-DATASET CSV empty
--

-DEFINE_STATEMENT_BLOCK INSERT_TINYSNB_PERSON [
-STATEMENT create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
---- ok
-STATEMENT LOAD WITH HEADERS (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID)
            FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson.csv"
            CREATE (:person{ID:ID, fName:fName, gender:gender, isStudent:isStudent, isWorker:isWorker, age:age, eyeSight:eyeSight, birthdate:birthdate, registerTime:registerTime, lastJobDuration:lastJobDuration, workedHours:workedHours, usedNames:usedNames, courseScoresPerTerm:courseScoresPerTerm, grades:grades, height:height, u:u});
---- ok
-STATEMENT LOAD WITH HEADERS (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID)
            FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson2.csv"
            CREATE (:person{ID:ID, fName:fName, gender:gender, isStudent:isStudent, isWorker:isWorker, age:age, eyeSight:eyeSight, birthdate:birthdate, registerTime:registerTime, lastJobDuration:lastJobDuration, workedHours:workedHours, usedNames:usedNames, courseScoresPerTerm:courseScoresPerTerm, grades:grades, height:height, u:u});
---- ok
 ]

-DEFINE_STATEMENT_BLOCK INSERT_TINYSNB_KNOWS [
-STATEMENT create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
---- ok
-STATEMENT LOAD WITH HEADERS (p1ID INT64, p2ID INT64, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING))
            FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/eKnows.csv"
            MATCH (p1:person), (p2:person) WHERE p1.ID = p1ID AND p2.ID = p2ID
            CREATE (p1)-[:knows{date:date, meetTime:meetTime, validInterval:validInterval, comments:comments, summary:summary, notes:notes, someMap:someMap}]->(p2);
---- ok
-STATEMENT LOAD WITH HEADERS (p1ID INT64, p2ID INT64, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING))
            FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/eKnows_2.csv"
            MATCH (p1:person), (p2:person) WHERE p1.ID = p1ID AND p2.ID = p2ID
            CREATE (p1)-[:knows{date:date, meetTime:meetTime, validInterval:validInterval, comments:comments, summary:summary, notes:notes, someMap:someMap}]->(p2);
---- ok
 ]

-CASE CreateAndInsertNodeCommit
-STATEMENT BEGIN TRANSACTION;
---- ok
-INSERT_STATEMENT_BLOCK INSERT_TINYSNB_PERSON
-STATEMENT COMMIT
---- ok
-STATEMENT CALL show_tables() return *;
---- 1
0|person|NODE|local(kuzu)|
-STATEMENT MATCH (p:person) RETURN count(*);
---- 1
8

-CASE CreateAndInsertNodeCommitRecovery
-STATEMENT CALL auto_checkpoint=false;
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-INSERT_STATEMENT_BLOCK INSERT_TINYSNB_PERSON
-STATEMENT COMMIT
---- ok
-RELOADDB
-STATEMENT CALL show_tables() return *;
---- 1
0|person|NODE|local(kuzu)|
-STATEMENT MATCH (p:person) RETURN count(*);
---- 1
8

-CASE CreateAndInsertNodeRollback
-STATEMENT BEGIN TRANSACTION;
---- ok
-INSERT_STATEMENT_BLOCK INSERT_TINYSNB_PERSON
-STATEMENT ROLLBACK
---- ok
-STATEMENT CALL show_tables() return *;
---- 0

-CASE CreateAndInsertNodeRollbackRecovery
-STATEMENT CALL auto_checkpoint=false;
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-INSERT_STATEMENT_BLOCK INSERT_TINYSNB_PERSON
-STATEMENT ROLLBACK
---- ok
-RELOADDB
-STATEMENT CALL show_tables() return *;
---- 0

-CASE CreateAndInsertRelCommit
-INSERT_STATEMENT_BLOCK INSERT_TINYSNB_PERSON
-STATEMENT BEGIN TRANSACTION;
---- ok
-INSERT_STATEMENT_BLOCK INSERT_TINYSNB_KNOWS
-STATEMENT COMMIT
---- ok
-STATEMENT CALL show_tables() return *;
---- 2
1|knows|REL|local(kuzu)|
0|person|NODE|local(kuzu)|
-STATEMENT MATCH (:person)-[k:knows]->(:person) RETURN COUNT(*);
---- 1
14

-CASE CreateAndInsertRelCommitRecovery
-STATEMENT CALL auto_checkpoint=false;
---- ok
-INSERT_STATEMENT_BLOCK INSERT_TINYSNB_PERSON
-STATEMENT BEGIN TRANSACTION;
---- ok
-INSERT_STATEMENT_BLOCK INSERT_TINYSNB_KNOWS
-STATEMENT COMMIT
---- ok
-RELOADDB
-STATEMENT CALL show_tables() return *;
---- 2
0|person|NODE|local(kuzu)|
1|knows|REL|local(kuzu)|
-STATEMENT MATCH (:person)-[k:knows]->(:person) RETURN COUNT(*);
---- 1
14

-CASE CreateAndInsertRelRollback
-INSERT_STATEMENT_BLOCK INSERT_TINYSNB_PERSON
-STATEMENT BEGIN TRANSACTION;
---- ok
-INSERT_STATEMENT_BLOCK INSERT_TINYSNB_KNOWS
-STATEMENT ROLLBACK
---- ok
-STATEMENT CALL show_tables() return *;
---- 1
0|person|NODE|local(kuzu)|

-CASE CreateAndInsertRelRollbackRecovery
-STATEMENT CALL auto_checkpoint=false;
---- ok
-INSERT_STATEMENT_BLOCK INSERT_TINYSNB_PERSON
-STATEMENT BEGIN TRANSACTION;
---- ok
-INSERT_STATEMENT_BLOCK INSERT_TINYSNB_KNOWS
-STATEMENT ROLLBACK
---- ok
-RELOADDB
-STATEMENT CALL show_tables() return *;
---- 1
0|person|NODE|local(kuzu)|
