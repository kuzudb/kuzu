-DATASET CSV empty
--

-CASE CopyNodeCommit
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT CREATE NODE TABLE person (ID INT64, fName STRING, gender INT64, isStudent BOOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration INTERVAL, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
---- ok
-STATEMENT COPY person FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson.csv" (HEADER=true)
---- ok
-STATEMENT COMMIT;
---- ok
-STATEMENT MATCH (p:person) return count(p);
---- 1
5
-STATEMENT MATCH (p:person) return p.age;
---- 5
20
20
30
35
45

-CASE CopyNodeCommitRecovery
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT CREATE NODE TABLE person (ID INT64, fName STRING, gender INT64, isStudent BOOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration INTERVAL, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
---- ok
-STATEMENT COPY person FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson.csv" (HEADER=true)
---- ok
-STATEMENT COMMIT;
---- ok
-RELOADDB
-STATEMENT MATCH (p:person) return count(p);
---- 1
5
-STATEMENT MATCH (p:person) return p.age;
---- 5
20
20
30
35
45

-CASE CopyRelCommit
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT CREATE NODE TABLE person (ID INT64, fName STRING, gender INT64, isStudent BOOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration INTERVAL, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
---- ok
-STATEMENT COPY person FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson.csv" (HEADER=true)
---- ok
-STATEMENT create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MANY);
---- ok
-STATEMENT COPY knows FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/eKnows.csv"
---- ok
-STATEMENT COMMIT
---- ok
-STATEMENT MATCH (:person)-[e:knows]->(:person) RETURN COUNT(e);
---- 1
6
-STATEMENT MATCH (:person)-[e:knows]->(:person) return e.date;
---- 6
2021-06-30
2021-06-30
2021-06-30
2021-06-30
1950-05-14
1950-05-14

-CASE CopyRelCommitRecovery
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT CREATE NODE TABLE person (ID INT64, fName STRING, gender INT64, isStudent BOOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration INTERVAL, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
---- ok
-STATEMENT COPY person FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson.csv" (HEADER=true)
---- ok
-STATEMENT create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MANY);
---- ok
-STATEMENT COPY knows FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/eKnows.csv"
---- ok
-STATEMENT COMMIT
---- ok
-RELOADDB
-STATEMENT MATCH (:person)-[e:knows]->(:person) RETURN COUNT(e);
---- 1
6
-STATEMENT MATCH (:person)-[e:knows]->(:person) return e.date;
---- 6
2021-06-30
2021-06-30
2021-06-30
2021-06-30
1950-05-14
1950-05-14

-CASE CopyRollbackDueToError
-STATEMENT CREATE NODE TABLE person (ID INT64, name STRING, PRIMARY KEY (ID));
---- ok
-STATEMENT COPY person FROM "${KUZU_ROOT_DIRECTORY}/dataset/copy-test/copy-error/person.csv" (HEADER=true)
---- error
Copy exception: Found duplicated primary key value 10, which violates the uniqueness constraint of the primary key column.
-STATEMENT MATCH (p:person) return count(*);
---- 1
0

-CASE CopyNodeCommitNormalExecutionManualCheckpoint
-STATEMENT CREATE NODE TABLE person
            (ID INT64, fName STRING, gender INT64, isStudent BOOLEAN,
            isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE,
            registerTime TIMESTAMP, lastJobDuration INTERVAL, workedHours INT64[],
            usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID,
            PRIMARY KEY (ID));
---- ok
-STATEMENT MATCH (p:person) return *
---- 0
-STATEMENT COPY person FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson.csv" (HEADER=true);
---- ok
-STATEMENT MATCH (p:person) return p.age
---- 5
20
20
45
30
35
-STATEMENT CALL CHECKPOINT() RETURN *;
---- ok
-STATEMENT MATCH (p:person) return p.age
---- 5
20
20
45
30
35
-STATEMENT COPY person FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson2.csv" (HEADER=false);
---- ok
-STATEMENT MATCH (p:person) return p.age
---- 8
20
20
25
30
35
40
45
83
-STATEMENT CALL CHECKPOINT() RETURN *;
---- ok
-STATEMENT MATCH (p:person) return p.age
---- 8
20
20
25
30
35
40
45
83
-RELOADDB
-STATEMENT MATCH (p:person) return p.age
---- 8
20
20
25
30
35
40
45
83

-CASE CopyRelCommitNormalExecutionManualCheckpoint
-STATEMENT CREATE NODE TABLE person
            (ID INT64, fName STRING, gender INT64, isStudent BOOLEAN,
            isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE,
            registerTime TIMESTAMP, lastJobDuration INTERVAL, workedHours INT64[],
            usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID,
            PRIMARY KEY (ID));
---- ok
-STATEMENT COPY person FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson.csv" (HEADER=true);
---- ok
-STATEMENT COPY person FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson2.csv" (HEADER=false);
---- ok
-STATEMENT CREATE REL TABLE knows
            (FROM person TO person, date DATE,
            meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[],
            summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])),
            notes UNION(firstmet DATE, type INT16, comment STRING),
            someMap MAP(STRING, STRING), MANY_MANY);
---- ok
-STATEMENT COPY knows FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/eKnows.csv"
---- ok
-STATEMENT match (:person)-[e:knows]->(:person) return e.date
---- 6
2021-06-30
2021-06-30
2021-06-30
2021-06-30
1950-05-14
1950-05-14
-STATEMENT CALL CHECKPOINT() RETURN *;
---- ok
-STATEMENT match (:person)-[e:knows]->(:person) return e.date
---- 6
2021-06-30
2021-06-30
2021-06-30
2021-06-30
1950-05-14
1950-05-14
-STATEMENT COPY knows FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/eKnows_2.csv"
---- ok
-STATEMENT match (:person)-[e:knows]->(:person) return e.date
---- 14
1905-12-12
1905-12-12
1950-05-14
1950-05-14
1950-05-14
1950-05-14
2000-01-01
2000-01-01
2021-06-30
2021-06-30
2021-06-30
2021-06-30
2021-06-30
2021-06-30
-STATEMENT CALL CHECKPOINT() RETURN *;
---- ok
-STATEMENT match (:person)-[e:knows]->(:person) return e.date
---- 14
1905-12-12
1905-12-12
1950-05-14
1950-05-14
1950-05-14
1950-05-14
2000-01-01
2000-01-01
2021-06-30
2021-06-30
2021-06-30
2021-06-30
2021-06-30
2021-06-30
-RELOADDB
-STATEMENT match (:person)-[e:knows]->(:person) return e.date
---- 14
1905-12-12
1905-12-12
1950-05-14
1950-05-14
1950-05-14
1950-05-14
2000-01-01
2000-01-01
2021-06-30
2021-06-30
2021-06-30
2021-06-30
2021-06-30
2021-06-30
