-DATASET CSV empty
--

-CASE ReplayRelGroup
-STATEMENT CALL force_checkpoint_on_close=false;
---- ok
-STATEMENT CALL auto_checkpoint=false;
---- ok
-STATEMENT CREATE NODE TABLE N1 (id INT64 PRIMARY KEY);
---- ok
-STATEMENT CREATE NODE TABLE N2 (id INT64 PRIMARY KEY);
---- ok
-STATEMENT CREATE REL TABLE R (FROM N1 to N1, FROM N2 to N2);
---- ok
-RELOADDB
-STATEMENT CALL show_tables() RETURN *;
---- 3
0|N1|NODE|local(kuzu)|
1|N2|NODE|local(kuzu)|
4|R|REL|local(kuzu)|

-CASE CreateDropNodeTableRecovery
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT CREATE NODE TABLE test(id SERIAL, primary key(id));
---- ok
-STATEMENT COMMIT;
---- ok
-RELOADDB
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 1
0|test|NODE|local(kuzu)|
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT DROP TABLE test;
---- ok
-STATEMENT COMMIT;
---- ok
-RELOADDB
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 0

-CASE CreateDropRelTableRecovery
-STATEMENT CREATE NODE TABLE base(id SERIAL, primary key(id));
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT CREATE REL TABLE test(FROM base TO base);
---- ok
-STATEMENT COMMIT;
---- ok
-RELOADDB
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 2
0|base|NODE|local(kuzu)|
2|test|REL|local(kuzu)|
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT DROP TABLE test;
---- ok
-STATEMENT COMMIT;
---- ok
-RELOADDB
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 1
0|base|NODE|local(kuzu)|

-CASE CreateDropRelGroupRecovery
-STATEMENT CREATE NODE TABLE base1(id SERIAL, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id SERIAL, primary key(id));
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 To base1, FROM base1 to base2);
---- ok
-STATEMENT COMMIT;
---- ok
-RELOADDB
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 3
0|base1|NODE|local(kuzu)|
1|base2|NODE|local(kuzu)|
4|test|REL|local(kuzu)|
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT DROP TABLE test;
---- ok
-STATEMENT COMMIT;
---- ok
-RELOADDB
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 2
0|base1|NODE|local(kuzu)|
1|base2|NODE|local(kuzu)|

-CASE InsertAndDropNodeColumnCheckpointRecovery
-STATEMENT CREATE NODE TABLE test(id INT64, age INT64, name STRING, prop2 INT64, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE (t:test {id: 0, age: 20, name: 'test', prop2: 1});
---- ok
-STATEMENT CREATE (t:test {id: 1, age: 21, name: 'test1', prop2: 2});
---- ok
-STATEMENT CREATE (t:test {id: 2, age: 22, name: 'test2', prop2: 3});
---- ok
-STATEMENT CREATE (t:test {id: 3, age: 23, name: 'test3', prop2: 4});
---- ok
-STATEMENT CREATE (t:test {id: 4, age: 24, name: 'test4', prop2: 5});
---- ok
-STATEMENT ALTER TABLE test DROP name;
---- ok
-STATEMENT CHECKPOINT;
---- ok
-RELOADDB
-STATEMENT MATCH (n:test) RETURN n.*;
---- 5
0|20|1
1|21|2
2|22|3
3|23|4
4|24|5

-CASE InsertAndDropRelColumnCheckpointRecovery
-STATEMENT CREATE NODE TABLE test(id INT64, age INT64, name STRING, prop2 INT64, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE REL TABLE testRel(FROM test TO test, since DATE, prop3 INT64);
---- ok
-STATEMENT CREATE (t:test {id: 0, age: 20, name: 'test', prop2: 1});
---- ok
-STATEMENT CREATE (t:test {id: 1, age: 21, name: 'test1', prop2: 2});
---- ok
-STATEMENT CREATE (t:test {id: 2, age: 22, name: 'test2', prop2: 3});
---- ok
-STATEMENT CREATE (t:test {id: 3, age: 23, name: 'test3', prop2: 4});
---- ok
-STATEMENT CREATE (t:test {id: 4, age: 24, name: 'test4', prop2: 5});
---- ok
-STATEMENT MATCH (t1:test {id: 0}), (t2:test {id: 1}) CREATE (t1)-[r:testRel {since: date('2020-01-01'), prop3: 1}]->(t2);
---- ok
-STATEMENT MATCH (t1:test {id: 1}), (t2:test {id: 2}) CREATE (t1)-[r:testRel {since: date('2020-01-01'), prop3: 2}]->(t2);
---- ok
-STATEMENT MATCH (t1:test {id: 2}), (t2:test {id: 3}) CREATE (t1)-[r:testRel {since: date('2020-01-01'), prop3: 3}]->(t2);
---- ok
-STATEMENT MATCH (t1:test {id: 3}), (t2:test {id: 4}) CREATE (t1)-[r:testRel {since: date('2020-01-01'), prop3: 4}]->(t2);
---- ok
-STATEMENT ALTER TABLE testRel DROP since;
---- ok
-STATEMENT CHECKPOINT;
---- ok
-RELOADDB
-STATEMENT MATCH ()-[k:testRel]->() RETURN k.since;
---- error
Binder exception: Cannot find property since for k.
-STATEMENT MATCH (:test)-[k:testRel]->(:test) RETURN k.prop3;
---- 4
1
2
3
4

-CASE RenameRelGroupCommit
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT ALTER TABLE test RENAME TO test1;
---- ok
-STATEMENT COMMIT;
---- ok
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 3
0|base1|NODE|local(kuzu)|
1|base2|NODE|local(kuzu)|
4|test1|REL|local(kuzu)|

-CASE RenameRelGroupRollback
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT ALTER TABLE test RENAME TO test1;
---- ok
-STATEMENT ROLLBACK;
---- ok
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 3
0|base1|NODE|local(kuzu)|
1|base2|NODE|local(kuzu)|
4|test|REL|local(kuzu)|

-CASE RenameRelGroupCommitRecovery
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT ALTER TABLE test RENAME TO test1;
---- ok
-STATEMENT COMMIT;
---- ok
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 3
0|base1|NODE|local(kuzu)|
1|base2|NODE|local(kuzu)|
4|test1|REL|local(kuzu)|
-RELOADDB
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 3
0|base1|NODE|local(kuzu)|
1|base2|NODE|local(kuzu)|
4|test1|REL|local(kuzu)|

-CASE RenameRelGroupRollbackRecovery
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT ALTER TABLE test RENAME TO test1;
---- ok
-STATEMENT ROLLBACK;
---- ok
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 3
0|base1|NODE|local(kuzu)|
1|base2|NODE|local(kuzu)|
4|test|REL|local(kuzu)|
-RELOADDB
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 3
0|base1|NODE|local(kuzu)|
1|base2|NODE|local(kuzu)|
4|test|REL|local(kuzu)|

-CASE RenameRelGroupPropertyCommit
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2, prop1 INT64);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT ALTER TABLE test RENAME prop1 TO prop2;
---- ok
-STATEMENT COMMIT;
---- ok
-STATEMENT CALL table_info("test") RETURN *;
---- 1
1|prop2|INT64|NULL|both

-CASE RenameRelGroupPropertyRollback
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2, prop1 INT64);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT ALTER TABLE test RENAME prop1 TO prop2;
---- ok
-STATEMENT ROLLBACK;
---- ok
-STATEMENT CALL table_info("test") RETURN *;
---- 1
1|prop1|INT64|NULL|both

-CASE RenameRelGroupPropertyCommitRecovery
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2, prop1 INT64);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT ALTER TABLE test RENAME prop1 TO prop2;
---- ok
-STATEMENT COMMIT;
---- ok
-STATEMENT CALL table_info("test") RETURN *;
---- 1
1|prop2|INT64|NULL|both
-RELOADDB
-STATEMENT CALL table_info("test") RETURN *;
---- 1
1|prop2|INT64|NULL|both

-CASE RenameRelGroupPropertyRollbackRecovery
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2, prop1 INT64);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT ALTER TABLE test RENAME prop1 TO prop2;
---- ok
-STATEMENT ROLLBACK;
---- ok
-STATEMENT CALL table_info("test") RETURN *;
---- 1
1|prop1|INT64|NULL|both
-RELOADDB
-STATEMENT CALL table_info("test") RETURN *;
---- 1
1|prop1|INT64|NULL|both

-CASE AddDropRelGroupPropertyCommit
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT ALTER TABLE test ADD prop1 INT64;
---- ok
-STATEMENT COMMIT;
---- ok
-STATEMENT CALL table_info("test") RETURN *;
---- 1
1|prop1|INT64|NULL|both

-CASE AddDropRelGroupPropertyRollback
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT ALTER TABLE test ADD prop1 INT64;
---- ok
-STATEMENT ROLLBACK;
---- ok
-STATEMENT CALL table_info("test") RETURN *;
---- 0

-CASE AddDropRelGroupPropertyCommitRecovery
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT ALTER TABLE test ADD prop1 INT64;
---- ok
-STATEMENT COMMIT;
---- ok
-STATEMENT CALL table_info("test") RETURN *;
---- 1
1|prop1|INT64|NULL|both
-RELOADDB
-STATEMENT CALL table_info("test") RETURN *;
---- 1
1|prop1|INT64|NULL|both

-CASE AddDropRelGroupPropertyRollbackRecovery
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT ALTER TABLE test ADD prop1 INT64;
---- ok
-STATEMENT ROLLBACK;
---- ok
-STATEMENT CALL table_info("test") RETURN *;
---- 0
-RELOADDB
-STATEMENT CALL table_info("test") RETURN *;
---- 0

-CASE DropRelGroupPropertyCommit
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2, prop1 INT64);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT ALTER TABLE test DROP prop1;
---- ok
-STATEMENT COMMIT;
---- ok
-STATEMENT CALL table_info("test") RETURN *;
---- 0

-CASE DropRelGroupPropertyRollback
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2, prop1 INT64);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT ALTER TABLE test DROP prop1;
---- ok
-STATEMENT ROLLBACK;
---- ok
-STATEMENT CALL table_info("test") RETURN *;
---- 1
1|prop1|INT64|NULL|both

-CASE DropRelGroupPropertyCommitRecovery
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2, prop1 INT64);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT ALTER TABLE test DROP prop1;
---- ok
-STATEMENT COMMIT;
---- ok
-STATEMENT CALL table_info("test") RETURN *;
---- 0
-RELOADDB
-STATEMENT CALL table_info("test") RETURN *;
---- 0

-CASE DropRelGroupPropertyRollbackRecovery
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2, prop1 INT64);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT ALTER TABLE test DROP prop1;
---- ok
-STATEMENT ROLLBACK;
---- ok
-STATEMENT CALL table_info("test") RETURN *;
---- 1
1|prop1|INT64|NULL|both
-RELOADDB
-STATEMENT CALL table_info("test") RETURN *;
---- 1
1|prop1|INT64|NULL|both

-CASE CommentRelGroupCommit
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT COMMENT ON TABLE test IS 'This is a test comment';
---- ok
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 3
0|base1|NODE|local(kuzu)|
1|base2|NODE|local(kuzu)|
4|test|REL|local(kuzu)|This is a test comment
-STATEMENT COMMIT;
---- ok
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 3
0|base1|NODE|local(kuzu)|
1|base2|NODE|local(kuzu)|
4|test|REL|local(kuzu)|This is a test comment

-CASE CommentRelGroupRollback
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT COMMENT ON TABLE test IS 'This is a test comment';
---- ok
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 3
0|base1|NODE|local(kuzu)|
1|base2|NODE|local(kuzu)|
4|test|REL|local(kuzu)|This is a test comment
-STATEMENT ROLLBACK;
---- ok
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 3
0|base1|NODE|local(kuzu)|
1|base2|NODE|local(kuzu)|
4|test|REL|local(kuzu)|

-CASE CommentRelGroupCommitRecovery
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT COMMENT ON TABLE test IS 'This is a test comment';
---- ok
-STATEMENT COMMIT;
---- ok
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 3
0|base1|NODE|local(kuzu)|
1|base2|NODE|local(kuzu)|
4|test|REL|local(kuzu)|This is a test comment
-RELOADDB
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 3
0|base1|NODE|local(kuzu)|
1|base2|NODE|local(kuzu)|
4|test|REL|local(kuzu)|This is a test comment

-CASE CommentRelGroupRollbackRecovery
-STATEMENT CREATE NODE TABLE base1(id INT64, primary key(id));
---- ok
-STATEMENT CREATE NODE TABLE base2(id INT64, primary key(id));
---- ok
-STATEMENT CREATE REL TABLE test(FROM base1 TO base1, FROM base1 TO base2);
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT COMMENT ON TABLE test IS 'This is a test comment';
---- ok
-STATEMENT ROLLBACK;
---- ok
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 3
0|base1|NODE|local(kuzu)|
1|base2|NODE|local(kuzu)|
4|test|REL|local(kuzu)|
-RELOADDB
-STATEMENT CALL SHOW_TABLES() RETURN *;
---- 3
0|base1|NODE|local(kuzu)|
1|base2|NODE|local(kuzu)|
4|test|REL|local(kuzu)|

-CASE DropNodeTableReclaim
-SKIP_IN_MEM
-STATEMENT create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
---- ok
# table used to store some intermediate results
-STATEMENT create node table stats(id SERIAL, numPages INT64, PRIMARY KEY(id))
---- ok
# preallocate storage for stats table
-STATEMENT create (:stats)
---- ok
-STATEMENT COPY movies FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vMovies.csv";
---- ok
-STATEMENT call file_info() with num_pages match (s:stats) where s.id = 0 set s.numPages = num_pages
---- ok
-STATEMENT drop table movies
---- ok
-STATEMENT checkpoint
---- ok

-STATEMENT create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
---- ok
-STATEMENT COPY movies FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vMovies.csv";
---- ok
-STATEMENT call file_info() with num_pages match (s:stats) where s.id = 0 return num_pages <= s.numPages
---- 1
True
-STATEMENT match (m:movies) return m.name, m.length
---- 3
Sóló cón tu párejâ|126
The 😂😃🧘🏻‍♂️🌍🌦️🍞🚗 movie|2544
Roma|298

-CASE DropNodeTableRollbackRecovery
-SKIP_IN_MEM
-STATEMENT begin transaction
---- ok
-STATEMENT create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
---- ok
-STATEMENT COPY movies FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vMovies.csv";
---- ok
-STATEMENT commit
---- ok
-STATEMENT call fsm_info() return *
---- 0
-STATEMENT begin transaction
---- ok
-STATEMENT drop table movies
---- ok
-STATEMENT rollback
---- ok
-STATEMENT call fsm_info() return *
---- 0
-STATEMENT match (m:movies) return m.name
---- 3
Sóló cón tu párejâ
The 😂😃🧘🏻‍♂️🌍🌦️🍞🚗 movie
Roma
-STATEMENT call auto_checkpoint=false
---- ok
-STATEMENT drop table movies
---- ok
-RELOADDB
-STATEMENT match (m:movies) return m.name
---- error
Binder exception: Table movies does not exist.
-STATEMENT call fsm_info() return sum(num_pages) > 0
---- 1
True

-CASE DropRelTableReclaim
-SKIP_IN_MEM
-STATEMENT create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
---- ok
-STATEMENT create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
---- ok
# table used to store some intermediate results
-STATEMENT create node table stats(id SERIAL, numPages INT64, PRIMARY KEY(id))
---- ok
# preallocate storage for stats table
-STATEMENT create (:stats)
---- ok
-STATEMENT copy person from ["${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson.csv", "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson2.csv"](ignore_errors=true)
---- ok
-STATEMENT COPY knows FROM ["${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/eKnows.csv", "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/eKnows_2.csv"];
---- ok
-STATEMENT drop table knows
---- ok
-STATEMENT checkpoint
---- ok
-STATEMENT match (a:person)-[k:knows]->(b:person) return a.id, b.id
---- error
Binder exception: Table knows does not exist.
-STATEMENT call file_info() with num_pages match (s:stats) where s.id = 0 set s.numPages = num_pages
---- ok
-STATEMENT create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
---- ok
-STATEMENT COPY knows FROM ["${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/eKnows.csv", "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/eKnows_2.csv"];
---- ok
# The DB shouldn't grow after the recopy
-STATEMENT CALL file_info() with num_pages match (s:stats) return num_pages <= s.numPages
---- 1
True

-CASE DropRelTableRollbackRecovery
-SKIP_IN_MEM
-STATEMENT begin transaction
---- ok
-STATEMENT create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
---- ok
-STATEMENT create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
---- ok
-STATEMENT create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
---- ok
-STATEMENT copy person from ["${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson.csv", "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson2.csv"](ignore_errors=true)
---- ok
-STATEMENT COPY organisation FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vOrganisation.csv";
---- ok
-STATEMENT COPY studyAt FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/eStudyAt.csv";
---- ok
-STATEMENT commit;
         checkpoint;
---- ok
---- ok
-STATEMENT call fsm_info() return *
---- 0
-STATEMENT begin transaction
---- ok
-STATEMENT drop table studyAt
---- ok
-STATEMENT rollback
---- ok
-STATEMENT call fsm_info() return *
---- 0
-STATEMENT match (a)-[s:studyAt]->(b) return a.id, b.id
---- 3
0|1
2|1
8|1
-STATEMENT call auto_checkpoint=false
---- ok
-STATEMENT drop table studyAt
---- ok
-RELOADDB
-STATEMENT match (a)-[s:studyAt]->(b) return a.id, b.id
---- error
Binder exception: Table studyAt does not exist.
-STATEMENT call fsm_info() return sum(num_pages) > 0
---- 1
True
