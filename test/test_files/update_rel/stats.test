-DATASET CSV empty

--

-CASE CreateIntegerStats
# Note that integer compression means that values get re-compressed and are updated out of place
-STATEMENT CREATE NODE TABLE N1(id INT64, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE NODE TABLE N2(id INT64, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE REL TABLE Rel1(FROM N1 TO N2, value INT8, ONE_ONE);
---- ok
-STATEMENT CREATE (:N1 {id: 1}), (:N1 {id: 2}), (:N2 {id: 1}), (:N2 {id: 2})
---- ok
-STATEMENT MATCH (n1:N1), (n2:N2) WHERE n1.id = n2.id AND n1.id = 1 CREATE (n1)-[r:Rel1 {value: 1}]->(n2)
---- ok
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN min;
---- 1
1
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN max;
---- 1
1
-STATEMENT MATCH (n1:N1), (n2:N2) WHERE n1.id = n2.id AND n1.id = 2 CREATE (n1)-[r:Rel1 {value: 5}]->(n2)
---- ok
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN min;
---- 1
1
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN max;
---- 1
5
-STATEMENT CREATE (:N1 {id: 3}), (:N2 {id: 3})
---- ok
-STATEMENT MATCH (n1:N1), (n2:N2) WHERE n1.id = n2.id AND n1.id = 3 CREATE (n1)-[r:Rel1 {value: 2}]->(n2)
---- ok
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN min;
---- 1
1
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN max;
---- 1
5
-STATEMENT CREATE (:N1 {id: 4}), (:N2 {id: 4})
---- ok
-STATEMENT MATCH (n1:N1), (n2:N2) WHERE n1.id = n2.id AND n1.id = 4 CREATE (n1)-[r:Rel1 {value: 6}]->(n2)
---- ok
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN min;
---- 1
1
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN max;
---- 1
6

-CASE CreateDoubleStats
# Note that integer compression means that values get re-compressed and are updated out of place
-STATEMENT CREATE NODE TABLE N1(id INT64, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE NODE TABLE N2(id INT64, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE REL TABLE Rel1(FROM N1 TO N2, value DOUBLE, ONE_ONE);
---- ok
-STATEMENT CREATE (:N1 {id: 1}), (:N1 {id: 2}), (:N2 {id: 1}), (:N2 {id: 2})
---- ok
-STATEMENT MATCH (n1:N1), (n2:N2) WHERE n1.id = n2.id AND n1.id = 1 CREATE (n1)-[r:Rel1 {value: 1}]->(n2)
---- ok
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN min;
---- 1
1.000000
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN max;
---- 1
1.000000
-STATEMENT MATCH (n1:N1), (n2:N2) WHERE n1.id = n2.id AND n1.id = 2 CREATE (n1)-[r:Rel1 {value: 5}]->(n2)
---- ok
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN min;
---- 1
1.000000
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN max;
---- 1
5.000000
-STATEMENT CREATE (:N1 {id: 3}), (:N2 {id: 3})
---- ok
-STATEMENT MATCH (n1:N1), (n2:N2) WHERE n1.id = n2.id AND n1.id = 3 CREATE (n1)-[r:Rel1 {value: 2}]->(n2)
---- ok
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN min;
---- 1
1.000000
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN max;
---- 1
5.000000
-STATEMENT CREATE (:N1 {id: 4}), (:N2 {id: 4})
---- ok
-STATEMENT MATCH (n1:N1), (n2:N2) WHERE n1.id = n2.id AND n1.id = 4 CREATE (n1)-[r:Rel1 {value: 6}]->(n2)
---- ok
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN min;
---- 1
1.000000
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN max;
---- 1
6.000000

-CASE DeleteIntegerStats
-STATEMENT CREATE NODE TABLE N1(id INT64, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE NODE TABLE N2(id INT64, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE REL TABLE Rel1(FROM N1 TO N2, value INT8, ONE_ONE);
---- ok
-STATEMENT CREATE (:N1 {id: 1}), (:N1 {id: 2}), (:N2 {id: 1}), (:N2 {id: 2})
---- ok
-STATEMENT MATCH (n1:N1), (n2:N2) WHERE n1.id = n2.id CREATE (n1)-[r:Rel1 {value: n1.id}]->(n2)
---- ok
-STATEMENT MATCH (n1)-[a:Rel1 {value: 2}]->(n2) DELETE a;
---- ok
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN to_int8(min) <= 1;
---- 1
True
# Maximum may not change after deletion, but should still be at least the new maximum
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN to_int8(max) >= 1;
---- 1
True

-CASE UpdateIntegerStats
-STATEMENT CREATE NODE TABLE N1(id INT64, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE NODE TABLE N2(id INT64, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE REL TABLE Rel1(FROM N1 TO N2, value INT8, ONE_ONE);
---- ok
-STATEMENT CREATE (:N1 {id: 1}), (:N1 {id: 2}), (:N2 {id: 1}), (:N2 {id: 2})
---- ok
-STATEMENT MATCH (n1:N1), (n2:N2) WHERE n1.id = n2.id CREATE (n1)-[r:Rel1 {value: n1.id}]->(n2)
---- ok
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN max;
---- 1
2
-STATEMENT MATCH (n1)-[a:Rel1 {value: 2}]->(n2) SET a.value = 3;
---- ok
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN max;
---- 1
3
-STATEMENT MATCH (n1)-[a:Rel1 {value: 1}]->(n2) SET a.value = 2;
---- ok
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN to_int8(min) <= 2;
---- 1
True

-CASE UpdateDoubleStats
-STATEMENT CREATE NODE TABLE N1(id INT64, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE NODE TABLE N2(id INT64, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE REL TABLE Rel1(FROM N1 TO N2, value DOUBLE, ONE_ONE);
---- ok
-STATEMENT CREATE (:N1 {id: 1}), (:N1 {id: 2}), (:N2 {id: 1}), (:N2 {id: 2})
---- ok
-STATEMENT MATCH (n1:N1), (n2:N2) WHERE n1.id = n2.id CREATE (n1)-[r:Rel1 {value: n1.id}]->(n2)
---- ok
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN max;
---- 1
2.000000
-STATEMENT MATCH (n1)-[a:Rel1 {value: 2}]->(n2) SET a.value = 3.123456;
---- ok
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN max;
---- 1
3.123456
-STATEMENT MATCH (n1)-[a:Rel1 {value: 1}]->(n2) SET a.value = 2;
---- ok
-STATEMENT CALL storage_info('Rel1') WHERE column_name = "fwd_value" RETURN to_double(min) <= 2;
---- 1
True
