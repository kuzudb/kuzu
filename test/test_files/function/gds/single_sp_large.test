-DATASET CSV gds-single-sp-large

--
-CASE SingleSPDestinationsDoNotReturnLengths
-STATEMENT PROJECT GRAPH PK (person1, knows11)
           MATCH (a:person1) WHERE a.ID = 1
           CALL single_sp_destinations(PK, a, 30, true)
           RETURN length, count(*);
---- error
Binder exception: Variable length is not in scope.

-CASE SingleSPLengthsDoNotReturnPathNodeIDs
-STATEMENT PROJECT GRAPH PK (person1, knows11)
           MATCH (a:person1) WHERE a.ID = 1
           CALL single_sp_lengths(PK, a, 30, true)
           RETURN length, pathNodeIDs;
---- error
Binder exception: Variable pathNodeIDs is not in scope.

-CASE SingleSPLengthsSingleLabel
-STATEMENT PROJECT GRAPH PK (person1, knows11)
           MATCH (a:person1) WHERE a.ID = 1
           CALL single_sp_lengths(PK, a, 30, true)
           RETURN length, count(*);
---- 5
0|1
1|10
2|100
3|1000
4|10000

# The first output tuples 11 comes from the fact that we also output 0-length paths, i.e., the from from source node
# to source node. Both for that path and the 10 paths of length 1, we output an empty pathNodeIDs, since there are no
# intermediate nodes.
-CASE SingleSPPathsSingleLabel
-STATEMENT PROJECT GRAPH PK (person1, knows11)
           MATCH (a:person1) WHERE a.ID = 1
           CALL single_sp_paths(PK, a, 30, true)
           RETURN size(pathNodeIDs), count(*);
---- 4
0|11
1|100
2|1000
3|10000

-CASE SingleSPDestinationsSingleLabel
-STATEMENT PROJECT GRAPH PK (person1, knows11)
           MATCH (a:person1) WHERE a.ID = 1
           CALL single_sp_destinations(PK, a, 30, true)
           RETURN count(*);
---- 1
11111

# This query will start from person1.1 and the traversal will zigzag as person2, person1, person2, person1 in 4
# iterations.
-CASE SingleSPLengthsMultilabel1
-STATEMENT PROJECT GRAPH PK (person1, person2, knows12, knows21)
           MATCH (a:person1) WHERE a.ID = 1
           CALL single_sp_lengths(PK, a, 30, true)
           RETURN length, count(*);
---- 5
0|1
1|10
2|100
3|1000
4|10000

# See CASEs SingleSPLengthsMultilabel1 & SingleSPPathsSingleLabel for the explanation on the expected output.
-CASE SingleSPPathsMultilabel1
-STATEMENT PROJECT GRAPH PK (person1, person2, knows12, knows21)
           MATCH (a:person1) WHERE a.ID = 1
           CALL single_sp_paths(PK, a, 30, true)
           RETURN size(pathNodeIDs), count(*);
---- 4
0|11
1|100
2|1000
3|10000

-CASE SingleSPDestinationsMultilabel1
-STATEMENT PROJECT GRAPH PK (person1, person2, knows12, knows21)
           MATCH (a:person1) WHERE a.ID = 1
           CALL single_sp_destinations(PK, a, 30, true)
           RETURN count(*);
---- 1
11111

# 1st iteration: This query will start from person1.1 and will visit 10 person1 and 10 person2 nodes all at level 1.
# There are no outgoing edges of person2 nodes in this graph.
# 2nd iteration: Each 10 level-1 person1 nodes will visit each 100 level-2 person1 and person2 nodes.
# 3rd iteration: Each 100 level-2 person1 nodes will visit each 1000 level-3 person1 and person2 nodes.
# 4th iteration: Each 1000 level-3 person1 nodes will visit each 10000 level-4 person1 and person2 nodes.
-CASE SingleSPLengthsMultilabel2
-STATEMENT PROJECT GRAPH PK (person1, person2, knows11, knows12)
           MATCH (a:person1) WHERE a.ID = 1
           CALL single_sp_lengths(PK, a, 30, true)
           RETURN length, count(*);
---- 5
0|1
1|20
2|200
3|2000
4|20000

# See CASEs SingleSPLengthsMultilabel2 & SingleSPPathsSingleLabel for the explanation on the expected output.
-CASE SingleSPPathsMultilabel2
-STATEMENT PROJECT GRAPH PK (person1, person2, knows11, knows12)
           MATCH (a:person1) WHERE a.ID = 1
           CALL single_sp_paths(PK, a, 30, true)
           RETURN size(pathNodeIDs), count(*);
---- 4
0|21
1|200
2|2000
3|20000

-CASE SingleSPDestinationsMultilabel2
-STATEMENT PROJECT GRAPH PK (person1, person2, knows11, knows12)
           MATCH (a:person1) WHERE a.ID = 1
           CALL single_sp_destinations(PK, a, 30, true)
           RETURN count(*);
---- 1
22221

# This behavior of this query should be similar to SingleSPLengthsMultilabel2. At each iteration each person2 nodes
# also visit next level's person1 nodes, but because the query is single shortest paths, this should not affect
# the counts.
-CASE SingleSPLengthsMultilabel3
-STATEMENT PROJECT GRAPH PK (person1, person2, knows11, knows12, knows21)
           MATCH (a:person1) WHERE a.ID = 1
           CALL single_sp_lengths(PK, a, 30, true)
           RETURN length, count(*);
---- 5
0|1
1|20
2|200
3|2000
4|20000

# See CASEs SingleSPLengthsMultilabel3 & SingleSPPathsSingleLabel for the explanation on the expected output.
-CASE SingleSPPathsLargeMultilabel3
-STATEMENT PROJECT GRAPH PK (person1, person2, knows11, knows12, knows21)
           MATCH (a:person1) WHERE a.ID = 1
           CALL single_sp_paths(PK, a, 30, true)
           RETURN size(pathNodeIDs), count(*);
---- 4
0|21
1|200
2|2000
3|20000

-CASE SingleSPLengthsMultilabel3
-STATEMENT PROJECT GRAPH PK (person1, person2, knows11, knows12, knows21)
           MATCH (a:person1) WHERE a.ID = 1
           CALL single_sp_destinations(PK, a, 30, true)
           RETURN count(*);
---- 1
22221