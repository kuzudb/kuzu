-DATASET CSV gds-all-sp-large

--
-CASE AllSPDestinationsDoNotReturnLengths
-STATEMENT PROJECT GRAPH PK (person1, knows11)
           MATCH (a:person1) WHERE a.ID = 1
           CALL all_sp_destinations(PK, a, 4, true)
           RETURN length, count(*);
---- error
Binder exception: Variable length is not in scope.

-CASE AllSPLengthsDoNotReturnPathNodeIDs
-STATEMENT PROJECT GRAPH PK (person1, knows11)
           MATCH (a:person1) WHERE a.ID = 1
           CALL all_sp_lengths(PK, a, 4, true)
           RETURN length, pathNodeIDs;
---- error
Binder exception: Variable pathNodeIDs is not in scope.

-CASE AllSPLengthsSingleLabel
-STATEMENT PROJECT GRAPH PK (person1, knows11)
           MATCH (a:person1) WHERE a.ID = 1
           CALL all_sp_lengths(PK, a, 30, true)
           RETURN length, count(*);
---- 5
0|1
1|10
2|100
3|1000
4|10000

-CASE AllSPPathsSingleLabel
-STATEMENT PROJECT GRAPH PK (person1, knows11)
           MATCH (a:person1) WHERE a.ID = 1
           CALL all_sp_paths(PK, a, 30, true)
           RETURN size(pathNodeIDs), count(*);
---- 4
0|11
1|100
2|1000
3|10000

-CASE AllSPDestinationsSingleLabel
-STATEMENT PROJECT GRAPH PK (person1, knows11)
           MATCH (a:person1) WHERE a.ID = 1
           CALL all_sp_destinations(PK, a, 30, true)
           RETURN count(*);
---- 1
11111

# This query will start from person1.1 and the traversal will zigzag as person2, person1, person2, person1 in 4
# iterations.
-CASE AllSPLengthsMultilabel1
-STATEMENT PROJECT GRAPH PK (person1, person2, knows12, knows21)
           MATCH (a:person1) WHERE a.ID = 1
           CALL all_sp_lengths(PK, a, 30, true)
           RETURN length, count(*);
---- 5
0|1
1|10
2|100
3|1000
4|10000

# See CASEs AllSPLengthsMultilabel1 & AllSPPathsSingleLabel for the explanation on the expected output.
-CASE AllSPPathsMultilabel1
-STATEMENT PROJECT GRAPH PK (person1, person2, knows12, knows21)
           MATCH (a:person1) WHERE a.ID = 1
           CALL all_sp_paths(PK, a, 30, true)
           RETURN size(pathNodeIDs), count(*);
---- 4
0|11
1|100
2|1000
3|10000

-CASE AllSPDestinationsMultilabel1
-STATEMENT PROJECT GRAPH PK (person1, person2, knows12, knows21)
           MATCH (a:person1) WHERE a.ID = 1
           CALL all_sp_destinations(PK, a, 30, true)
           RETURN count(*);
---- 1
11111


# 1st iteration: This query will start from person1.1 and will visit 10 person1 and 10 person2 nodes all at level 1.
# There are no outgoing edges of person2 nodes in this graph.
# 2nd iteration: Each 10 level-1 person1 nodes will visit each 10 person1 and each 10 person2 nodes at level-2. So in
# total, there will be 100 paths from the source to each level-2 person1 and person 2 nodes.
# 3rd iteration:Each 10 level-2 person1 nodes will visit each 10 person1 and each 10 person2 nodes at level-3. So in
# total, there will be 1000 paths from the source to each level-3 person1 and person 2 nodes.
# 3rd iteration:Each 10 level-3 person1 nodes will visit each 10 person1 and each 10 person2 nodes at level-4. So in
# total, there will be 10000 paths from the source to each level-4 person1 and person 2 nodes.
-CASE AllSPLengthsMultilabel2
-STATEMENT PROJECT GRAPH PK (person1, person2, knows11, knows12)
           MATCH (a:person1) WHERE a.ID = 1
           CALL all_sp_lengths(PK, a, 30, true)
           RETURN length, count(*);
---- 5
0|1
1|20
2|200
3|2000
4|20000

# See CASEs AllSPLengthsMultilabel2 & AllSPPathsSingleLabel for the explanation on the expected output.
-CASE AllSPPathsMultilabel2
-STATEMENT PROJECT GRAPH PK (person1, person2, knows11, knows12)
           MATCH (a:person1) WHERE a.ID = 1
           CALL all_sp_paths(PK, a, 30, true)
           RETURN size(pathNodeIDs), count(*);
---- 4
0|21
1|200
2|2000
3|20000

-CASE AllSPDestinationsMultilabel2
-STATEMENT PROJECT GRAPH PK (person1, person2, knows11, knows12)
           MATCH (a:person1) WHERE a.ID = 1
           CALL all_sp_destinations(PK, a, 30, true)
           RETURN count(*);
---- 1
22221

# 1st iteration: This query will start from person1.1 and will visit 10 person1 and 10 person2 nodes all at level 1.
# 2nd iteration: Each 10 level-1 person1 nodes will visit each 10 person1 and each 10 person2 nodes at level-2. Further,
# each level-1 person2 nodes will visit each level-2 person1 nodes (there are 10 of them). So there will be 200 paths
# from the source to level2 person1 nodes. And there will be 100 paths from the source to the level2 person2 nodes.
# 3rd iteration: Each 10 level-2 person1 nodes will visit each 10 person1 and each 10 person2 nodes at level-3. Further,
# each level-2 person2 nodes will visit each level-3 person1 nodes (there are 10 of them). So there will be 3000 paths
# from the source to level3 person1 nodes. And there will be 2000 paths from the source to the level3 person2 nodes.
# 4th iteration: Each 10 level-3 person1 nodes will visit each 10 person1 and each 10 person2 nodes at level-4. Further,
# each level-3 person2 nodes will visit each level-4 person1 nodes (there are 10 of them). So there will be 50000 paths
# from the source to level4 person1 nodes. And there will be 30000 paths from the source to the level4 person2 nodes.
-CASE AllSPLengthsMultilabel3
-STATEMENT PROJECT GRAPH PK (person1, person2, knows11, knows12, knows21)
           MATCH (a:person1) WHERE a.ID = 1
           CALL all_sp_lengths(PK, a, 30, true)
           RETURN length, count(*);
---- 5
0|1
1|20
2|300
3|5000
4|80000

# See CASEs AllSPLengthsMultilabel3 & AllSPPathsSingleLabel for the explanation on the expected output.
-CASE AllSPPathsLargeMultilabel3
-STATEMENT PROJECT GRAPH PK (person1, person2, knows11, knows12, knows21)
           MATCH (a:person1) WHERE a.ID = 1
           CALL all_sp_paths(PK, a, 30, true)
           RETURN size(pathNodeIDs), count(*);
---- 4
0|21
1|300
2|5000
3|80000

-CASE AllSPLengthsMultilabel3
-STATEMENT PROJECT GRAPH PK (person1, person2, knows11, knows12, knows21)
           MATCH (a:person1) WHERE a.ID = 1
           CALL all_sp_destinations(PK, a, 30, true)
           RETURN count(*);
---- 1
85321