-DATASET CSV empty

--

-CASE SingleSCC
-STATEMENT CREATE NODE TABLE Node(id INT64 PRIMARY KEY);
---- ok
-STATEMENT CREATE REL TABLE Edge(FROM Node to Node);
---- ok
-STATEMENT CREATE (u0:Node {id: 0}),
            (u1:Node {id: 1}),
            (u2:Node {id: 2}),
            (u3:Node {id: 3}),
            (u4:Node {id: 4}),
            (u5:Node {id: 5}),
            (u6:Node {id: 6}),
            (u7:Node {id: 7}),
            (u8:Node {id: 8}),
            (u0)-[:Edge]->(u1),
            (u1)-[:Edge]->(u2),
            (u2)-[:Edge]->(u0),
            (u2)-[:Edge]->(u3),
            (u2)-[:Edge]->(u4),
            (u5)-[:Edge]->(u4),
            (u6)-[:Edge]->(u4),
            (u6)-[:Edge]->(u5),
            (u6)-[:Edge]->(u7),
            (u7)-[:Edge]->(u4),
            (u6)-[:Edge]->(u5);
---- ok
-STATEMENT CALL create_projected_graph('Graph', ['Node'], ['Edge'])
---- ok
-STATEMENT CALL strongly_connected_components_kosaraju('Graph') WITH group_id, min(node.id) as sccId, count(*) as nodeCount, list_sort(collect(node.id)) as nodeIds RETURN sccId, nodeCount, nodeIds ORDER BY sccId;
---- 7
0|3|[0,1,2]
3|1|[3]
4|1|[4]
5|1|[5]
6|1|[6]
7|1|[7]
8|1|[8]
-STATEMENT CALL strongly_connected_components('Graph') WITH group_id, min(node.id) as sccId, count(*) as nodeCount, list_sort(collect(node.id)) as nodeIds RETURN sccId, nodeCount, nodeIds ORDER BY sccId;
---- 7
0|3|[0,1,2]
3|1|[3]
4|1|[4]
5|1|[5]
6|1|[6]
7|1|[7]
8|1|[8]

-CASE SingleSCCIsolated
-STATEMENT CREATE NODE TABLE Node(id INT64 PRIMARY KEY);
---- ok
-STATEMENT CREATE REL TABLE Edge(FROM Node to Node);
---- ok
-STATEMENT CREATE (u0:Node {id: 0}),
            (u1:Node {id: 1}),
            (u2:Node {id: 2}),
            (u3:Node {id: 3}),
            (u4:Node {id: 4}),
            (u5:Node {id: 5}),
            (u6:Node {id: 6}),
            (u0)-[:Edge]->(u1),
            (u1)-[:Edge]->(u2),
            (u2)-[:Edge]->(u0),
            (u2)-[:Edge]->(u3),
            (u6)-[:Edge]->(u4),
            (u6)-[:Edge]->(u5);
---- ok
-STATEMENT CALL create_projected_graph('Graph', ['Node'], ['Edge'])
---- ok
-STATEMENT CALL strongly_connected_components_kosaraju('Graph') WITH group_id, min(node.id) as sccId, count(*) as nodeCount, list_sort(collect(node.id)) as nodeIds RETURN sccId, nodeCount, nodeIds ORDER BY sccId;
---- 5
0|3|[0,1,2]
3|1|[3]
4|1|[4]
5|1|[5]
6|1|[6]
-STATEMENT CALL strongly_connected_components('Graph') WITH group_id, min(node.id) as sccId, count(*) as nodeCount, list_sort(collect(node.id)) as nodeIds RETURN sccId, nodeCount, nodeIds ORDER BY sccId;
---- 5
0|3|[0,1,2]
3|1|[3]
4|1|[4]
5|1|[5]
6|1|[6]

-CASE SCCMultiple
-STATEMENT CREATE NODE TABLE Node(id INT64 PRIMARY KEY);
---- ok
-STATEMENT CREATE REL TABLE Edge(FROM Node to Node);
---- ok
-STATEMENT CREATE (u0:Node {id: 0}),
            (u1:Node {id: 1}),
            (u2:Node {id: 2}),
            (u3:Node {id: 3}),
            (u4:Node {id: 4}),
            (u5:Node {id: 5}),
            (u6:Node {id: 6}),
            (u7:Node {id: 7}),
            (u8:Node {id: 8}),
            (u0)-[:Edge]->(u1),
            (u1)-[:Edge]->(u2),
            (u1)-[:Edge]->(u4),
            (u2)-[:Edge]->(u2),
            (u2)-[:Edge]->(u5),
            (u3)-[:Edge]->(u1),
            (u3)-[:Edge]->(u6),
            (u4)-[:Edge]->(u0),
            (u4)-[:Edge]->(u5),
            (u4)-[:Edge]->(u3),
            (u5)-[:Edge]->(u7),
            (u6)-[:Edge]->(u4),
            (u6)-[:Edge]->(u5),
            (u7)-[:Edge]->(u8),
            (u8)-[:Edge]->(u5);
---- ok
-STATEMENT CALL create_projected_graph('Graph', ['Node'], ['Edge'])
---- ok
-STATEMENT CALL strongly_connected_components('Graph') WITH group_id, min(node.id) as sccId, count(*) as nodeCount, list_sort(collect(node.id)) as nodeIds RETURN sccId, nodeCount, nodeIds ORDER BY sccId;
---- 3
0|5|[0,1,3,4,6]
2|1|[2]
5|3|[5,7,8]
-STATEMENT CALL strongly_connected_components_kosaraju('Graph') WITH group_id, min(node.id) as sccId, count(*) as nodeCount, list_sort(collect(node.id)) as nodeIds RETURN sccId, nodeCount, nodeIds ORDER BY sccId;
---- 3
0|5|[0,1,3,4,6]
2|1|[2]
5|3|[5,7,8]

-CASE SCCMultiple2
-STATEMENT CREATE NODE TABLE Node(id INT64 PRIMARY KEY);
---- ok
-STATEMENT CREATE REL TABLE Edge(FROM Node to Node);
---- ok
-STATEMENT CREATE (u0:Node {id: 0}),
            (u1:Node {id: 1}),
            (u2:Node {id: 2}),
            (u3:Node {id: 3}),
            (u4:Node {id: 4}),
            (u5:Node {id: 5}),
            (u6:Node {id: 6}),
            (u7:Node {id: 7}),
            (u8:Node {id: 8}),
            (u9:Node {id: 9}),
            (u10:Node {id: 10}),
            (u0)-[:Edge]->(u1),
            (u0)-[:Edge]->(u3),
            (u1)-[:Edge]->(u2),
            (u1)-[:Edge]->(u4),
            (u2)-[:Edge]->(u0),
            (u2)-[:Edge]->(u6),
            (u3)-[:Edge]->(u2),
            (u4)-[:Edge]->(u5),
            (u4)-[:Edge]->(u6),
            (u5)-[:Edge]->(u6),
            (u5)-[:Edge]->(u7),
            (u5)-[:Edge]->(u8),
            (u5)-[:Edge]->(u9),
            (u6)-[:Edge]->(u4),
            (u7)-[:Edge]->(u9),
            (u8)-[:Edge]->(u9),
            (u9)-[:Edge]->(u8);
---- ok
-STATEMENT CALL create_projected_graph('Graph', ['Node'], ['Edge']);
---- ok
-STATEMENT CALL strongly_connected_components_kosaraju('Graph') WITH group_id, min(node.id) as sccId, count(*) as nodeCount, list_sort(collect(node.id)) as nodeIds RETURN sccId, nodeCount, nodeIds ORDER BY sccId;
---- 5
0|4|[0,1,2,3]
4|3|[4,5,6]
7|1|[7]
8|2|[8,9]
10|1|[10]
-STATEMENT CALL strongly_connected_components('Graph') WITH group_id, min(node.id) as sccId, count(*) as nodeCount, list_sort(collect(node.id)) as nodeIds RETURN sccId, nodeCount, nodeIds ORDER BY sccId;
---- 5
0|4|[0,1,2,3]
4|3|[4,5,6]
7|1|[7]
8|2|[8,9]
10|1|[10]

-CASE NoScc
-STATEMENT CREATE NODE TABLE Node(id INT64 PRIMARY KEY);
---- ok
-STATEMENT CREATE REL TABLE Edge(FROM Node to Node);
---- ok
-STATEMENT CREATE (u0:Node {id: 0}),
            (u1:Node {id: 1}),
            (u2:Node {id: 2}),
            (u3:Node {id: 3}),
            (u4:Node {id: 4}),
            (u5:Node {id: 5}),
            (u6:Node {id: 6}),
            (u7:Node {id: 7}),
            (u8:Node {id: 8}),
            (u9:Node {id: 9}),
            (u10:Node {id: 10}),
            (u0)-[:Edge]->(u1),
            (u0)-[:Edge]->(u3),
            (u1)-[:Edge]->(u2),
            (u1)-[:Edge]->(u4),
            (u2)-[:Edge]->(u3),
            (u2)-[:Edge]->(u6),
            (u3)-[:Edge]->(u4),
            (u4)-[:Edge]->(u5),
            (u4)-[:Edge]->(u6),
            (u5)-[:Edge]->(u6),
            (u5)-[:Edge]->(u7),
            (u5)-[:Edge]->(u8),
            (u5)-[:Edge]->(u9),
            (u7)-[:Edge]->(u9),
            (u8)-[:Edge]->(u9);
---- ok
-STATEMENT CALL create_projected_graph('Graph', ['Node'], ['Edge']);
---- ok
-STATEMENT CALL strongly_connected_components_kosaraju('Graph') WITH group_id, min(node.id) as sccId, count(*) as nodeCount, list_sort(collect(node.id)) as nodeIds RETURN sccId, nodeCount, nodeIds ORDER BY sccId;
---- 11
0|1|[0]
1|1|[1]
2|1|[2]
3|1|[3]
4|1|[4]
5|1|[5]
6|1|[6]
7|1|[7]
8|1|[8]
9|1|[9]
10|1|[10]
-STATEMENT CALL strongly_connected_components('Graph') WITH group_id, min(node.id) as sccId, count(*) as nodeCount, list_sort(collect(node.id)) as nodeIds RETURN sccId, nodeCount, nodeIds ORDER BY sccId;
---- 11
0|1|[0]
1|1|[1]
2|1|[2]
3|1|[3]
4|1|[4]
5|1|[5]
6|1|[6]
7|1|[7]
8|1|[8]
9|1|[9]
10|1|[10]

-CASE ErrorHandling
-STATEMENT CREATE NODE TABLE Person(id INT64 PRIMARY KEY);
---- ok
-STATEMENT CREATE NODE TABLE City(id INT64 PRIMARY KEY);
---- ok
-STATEMENT CREATE REL TABLE Knows(FROM Person to Person);
---- ok
-STATEMENT CREATE REL TABLE LivesWith(FROM Person to Person);
---- ok
-STATEMENT CREATE REL TABLE LivesIn(FROM Person to City);
---- ok
-STATEMENT CALL create_projected_graph('SCC1', ['Person', 'City'], ['Knows', 'LivesIn']);
---- ok
-STATEMENT CALL strongly_connected_components_kosaraju('SCC1') RETURN node.id, group_id;
---- error
Runtime exception: Kosaraju's SCC only supports operations on one node table.
-STATEMENT CALL strongly_connected_components('SCC1') RETURN node.id, group_id;
---- error
Runtime exception: Parallel SCC only supports operations on one node table.
-STATEMENT CALL create_projected_graph('SCC2', ['Person'], ['Knows', 'LivesWith']);
---- ok
-STATEMENT CALL strongly_connected_components_kosaraju('SCC2') RETURN node.id, group_id;
---- error
Runtime exception: Kosaraju's SCC only supports operations on one edge table.
-STATEMENT CALL strongly_connected_components('SCC2') RETURN node.id, group_id;
---- error
Runtime exception: Parallel SCC only supports operations on one edge table.
