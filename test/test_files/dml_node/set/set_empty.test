-DATASET CSV empty

--

-CASE SetStructValueToNonNull
-STATEMENT CREATE NODE TABLE test(id INT64, prop STRUCT(age INT64, name STRING), PRIMARY KEY(id));
---- ok
-STATEMENT CREATE (t:test {id:1, prop:{age:10, name:'Alice'}})
---- ok
-STATEMENT CREATE (t:test {id:2, prop:{age:20, name:'Bobdjiweknfwhuwiehfuw'}})
---- ok
-STATEMENT CREATE (t:test {id:3, prop:{age:30, name:'Delta'}})
---- ok
-STATEMENT MATCH (t:test) RETURN t.prop
---- 3
{age: 10, name: Alice}
{age: 20, name: Bobdjiweknfwhuwiehfuw}
{age: 30, name: Delta}
-STATEMENT MATCH (t:test) WHERE t.id=1 SET t.prop={age:11, name:'Alicennewjfnwefwfw'}
---- ok
-STATEMENT MATCH (t:test) RETURN t.prop
---- 3
{age: 11, name: Alicennewjfnwefwfw}
{age: 20, name: Bobdjiweknfwhuwiehfuw}
{age: 30, name: Delta}

-CASE SetStructValueWithWriteTransaction
-STATEMENT CREATE NODE TABLE test(id INT64, prop STRUCT(age INT64, name STRING), PRIMARY KEY(id));
---- ok
-STATEMENT CREATE (t:test {id:1, prop:{age:10, name:'Alice'}})
---- ok
-STATEMENT CREATE (t:test {id:2, prop:{age:20, name:'Bobdjiweknfwhuwiehfuw'}})
---- ok
-STATEMENT CREATE (t:test {id:3, prop:{age:30, name:'Delta'}})
---- ok
-STATEMENT MATCH (t:test) RETURN t.prop
---- 3
{age: 10, name: Alice}
{age: 20, name: Bobdjiweknfwhuwiehfuw}
{age: 30, name: Delta}
-STATEMENT BEGIN TRANSACTION
---- ok
-STATEMENT MATCH (t:test) WHERE t.id=1 SET t.prop={age:11, name:'Alicennewjfnwefwfw'}
---- ok
-STATEMENT MATCH (t:test) RETURN t.prop
---- 3
{age: 11, name: Alicennewjfnwefwfw}
{age: 20, name: Bobdjiweknfwhuwiehfuw}
{age: 30, name: Delta}
-STATEMENT COMMIT
---- ok

-CASE SetStructValueToNull
-STATEMENT CREATE NODE TABLE test(id INT64, prop STRUCT(age INT64, name STRING), PRIMARY KEY(id));
---- ok
-STATEMENT CREATE (t:test {id:1, prop:{age:10, name:'Alice'}})
---- ok
-STATEMENT CREATE (t:test {id:2, prop:{age:20, name:'Bobdjiweknfwhuwiehfuw'}})
---- ok
-STATEMENT CREATE (t:test {id:3, prop:{age:30, name:'Delta'}})
---- ok
-STATEMENT MATCH (t:test) RETURN t.prop
---- 3
{age: 10, name: Alice}
{age: 20, name: Bobdjiweknfwhuwiehfuw}
{age: 30, name: Delta}
-STATEMENT MATCH (t:test) WHERE t.id=1 SET t.prop=NULL
---- ok
-STATEMENT MATCH (t:test) RETURN t.prop
---- 3

{age: 20, name: Bobdjiweknfwhuwiehfuw}
{age: 30, name: Delta}

-CASE SetPK
-STATEMENT CREATE NODE TABLE test(id INT64, name STRING, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE (t:test {id:1, name:'Alice'})
---- ok
-STATEMENT MATCH (t:test) SET t.id=2
---- ok
-STATEMENT MATCH (t:test) RETURN t
---- 1
{_ID: 0:0, _LABEL: test, id: 2, name: Alice}
-STATEMENT CREATE NODE TABLE test2(id INT64, name STRING, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE (t:test2 {id:1, name:'Bob'})
---- ok
-STATEMENT MATCH (t) SET t.id=3
---- ok
-STATEMENT MATCH (t) RETURN t
---- 2
{_ID: 0:0, _LABEL: test, id: 3, name: Alice}
{_ID: 1:0, _LABEL: test2, id: 3, name: Bob}
-STATEMENT CREATE NODE TABLE test3(id2 INT64, id INT64, name STRING, PRIMARY KEY(id2));
---- ok
-STATEMENT MATCH (t) SET t.id=4
---- error
Binder exception: Update primary key column t.id for multiple tables is not supported.

-CASE SetWithSerialPK
-STATEMENT CREATE NODE TABLE test(id SERIAL, name STRING, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE (t:test {name:'Alice'})
---- ok
-STATEMENT MATCH (t:test) SET t.id=NULL
---- error
Runtime exception: Found NULL, which violates the non-null constraint of the primary key column.

-CASE SetLongStringPK
-STATEMENT create node table person0 (ID STRING, PRIMARY KEY (ID));
---- ok
-STATEMENT CREATE (:person0 {ID: "Foo"})
---- ok
-STATEMENT match (p:person0) return p.ID;
---- 1
Foo
-DEFINE STRING_EXCEEDS_PAGE ARANGE 0 5990
-DEFINE STRING_LARGE_BUT_FITS ARANGE 0 40000
-DEFINE STRING_EXCEEDS_LARGE_PAGE ARANGE 0 50000
-STATEMENT match (p:person0) SET p.ID=${STRING_EXCEEDS_PAGE}
---- ok
-STATEMENT match (p:person0) return p.ID;
---- 1
${STRING_EXCEEDS_PAGE}
-LOG SetLongStringPKError
-STATEMENT match (p:person0) SET p.ID=${STRING_LARGE_BUT_FITS}
---- ok
-STATEMENT match (p:person0) return p.ID;
---- 1
${STRING_LARGE_BUT_FITS}

-CASE MultipleSet
-STATEMENT CREATE NODE TABLE person(id INT64, name STRING, primary key(id));
---- ok
-STATEMENT CREATE (p:person {id:1, name:'Alice'})
---- ok
-STATEMENT CREATE (p:person {id:2, name:'Bob'})
---- ok
-STATEMENT CREATE (p:person {id:3, name:'Charlie'})
---- ok
-STATEMENT MATCH (p:person) RETURN p.name
---- 3
Alice
Bob
Charlie
-STATEMENT MATCH (p:person) WHERE p.id=1 SET p.name='Alicenew', p.id=4
---- ok
-STATEMENT MATCH (p:person) WHERE p.id=4 SET p.name='Alicenewnew'
---- ok
-STATEMENT MATCH (p:person) WHERE p.id=2 SET p.name='Bobnew'
---- ok
-STATEMENT MATCH (p:person) WHERE p.id=3 SET p.name='Charlienew'
---- ok
-STATEMENT MATCH (p:person) RETURN p.name
---- 3
Alicenewnew
Bobnew
Charlienew

-CASE MixedCreateAndSet
-STATEMENT CREATE NODE TABLE person(id SERIAL, prop INT64, primary key(id));
---- ok
-STATEMENT UNWIND range(1, 200000) AS i CREATE (:person {prop: i})
---- ok
-STATEMENT MATCH (p:person) WHERE p.id % 2 = 0 SET p.prop=p.prop+1000000
---- ok
-STATEMENT MATCH (p:person) WHERE p.id % 2 = 0 AND p.prop>=1000000 RETURN COUNT(*)
---- 1
100000
