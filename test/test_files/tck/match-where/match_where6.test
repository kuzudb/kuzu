-GROUP TCKMatchWhere6
-DATASET CSV tck

--

# Filter node with node label predicate on multi variables with multiple bindings after MATCH and OPTIONAL MATCH
-CASE Scenario1
-STATEMENT CREATE NODE TABLE A(ID SERIAL, name STRING, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE B(ID SERIAL, name STRING, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE C(ID SERIAL, name STRING, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE D(ID SERIAL, name STRING, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE REL TABLE GROUP T(FROM A TO B, FROM A TO C, FROM A TO D);
---- ok
-STATEMENT CREATE (a:A {name: 'A'}), (b:B {name: 'B'}), (c:C {name: 'C'}), (d:D {name: 'C'})
           CREATE (a)-[:T_A_B]->(b),
                  (a)-[:T_A_C]->(c),
                  (a)-[:T_A_D]->(d);
---- ok
-STATEMENT MATCH (a)-->(b)
           WHERE LABEL(b) = 'B'
           OPTIONAL MATCH (a)-->(c)
           WHERE LABEL(c) = 'C'
           RETURN a.name;
---- 1
A

# Filter node with false node label predicate after OPTIONAL MATCH
-CASE Scenario2
-STATEMENT CREATE NODE TABLE Single(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE A(ID SERIAL, num INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE B(ID SERIAL, num INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE C(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE REL TABLE GROUP REL(FROM Single TO A, FROM Single TO B, FROM A TO C);
---- ok
-STATEMENT CREATE REL TABLE LOOP(FROM B TO B);
---- ok
-STATEMENT CREATE (s:Single), (a:A {num: 42}),
                  (b:B {num: 46}), (c:C)
           CREATE (s)-[:REL_Single_A]->(a),
                  (s)-[:REL_Single_B]->(b),
                  (a)-[:REL_A_C]->(c),
                  (b)-[:LOOP]->(b);
---- ok
-STATEMENT MATCH (n:Single)
           OPTIONAL MATCH (n)-[r]-(m)
           WHERE LABEL(m) = 'NonExistent'
           RETURN r;
---- 1


# Filter node with property predicate on multi variables with multiple bindings after OPTIONAL MATCH
-CASE Scenario3
-STATEMENT CREATE NODE TABLE Single(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE A(ID SERIAL, num INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE B(ID SERIAL, num INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE C(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE REL TABLE GROUP REL(FROM Single TO A, FROM Single TO B, FROM A TO C);
---- ok
-STATEMENT CREATE REL TABLE LOOP(FROM B TO B);
---- ok
-STATEMENT CREATE (s:Single), (a:A {num: 42}),
                  (b:B {num: 46}), (c:C)
           CREATE (s)-[:REL_Single_A]->(a),
                  (s)-[:REL_Single_B]->(b),
                  (a)-[:REL_A_C]->(c),
                  (b)-[:LOOP]->(b);
---- ok
-STATEMENT MATCH (n:Single)
           OPTIONAL MATCH (n)-[r]-(m)
           WHERE m.num = 42
           RETURN m;
---- 1
{_ID: 1:0, _LABEL: A, ID: 0, num: 42}

# Do not fail when predicates on optionally matched and missed nodes are invalid
-CASE Scenario4
-STATEMENT CREATE NODE TABLE A(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE B(ID SERIAL, name STRING, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE REL TABLE T(FROM A TO B);
---- ok
-STATEMENT CREATE (a:A), (b:B {name: 'Mark'})
           CREATE (a)-[:T]->(b);
---- ok
-STATEMENT MATCH (n)-->(x0)
           OPTIONAL MATCH (x0)-->(x1)
           WHERE x1.name = 'bar'
           RETURN x0.name;
---- 1
Mark

# Matching and optionally matching with unbound nodes and equality predicate in reverse direction
-CASE Scenario5
-SKIP
-STATEMENT CREATE NODE TABLE A(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE B(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE REL TABLE T(FROM A TO B);
---- ok
-STATEMENT CREATE (:A)-[:T]->(:B);
---- ok
-STATEMENT MATCH (a1)-[r]->()
           WITH r, a1
             LIMIT 1
           OPTIONAL MATCH (a2)<-[r]-(b2)
           WHERE a1 = a2
           RETURN a1, r, b2, a2;
---- 1
...|...|...|...

# Join nodes on non-equality of properties – OPTIONAL MATCH and WHERE
-CASE Scenario6
-STATEMENT CREATE NODE TABLE X(ID SERIAL, val INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE Y(ID SERIAL, val INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE Z(ID SERIAL, val INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE REL TABLE E1(FROM X TO Y);
---- ok
-STATEMENT CREATE REL TABLE E2(FROM Y TO Z);
---- ok
-STATEMENT CREATE (:X {val: 1})-[:E1]->(:Y {val: 2})-[:E2]->(:Z {val: 3}),
                  (:X {val: 4})-[:E1]->(:Y {val: 5}),
                  (:X {val: 6});
---- ok
-STATEMENT MATCH (x:X)
           OPTIONAL MATCH (x)-[:E1]->(y:Y)
           WHERE x.val < y.val
           RETURN x, y;
---- 3
{_ID: 0:0, _LABEL: X, ID: 0, val: 1}|{_ID: 1:0, _LABEL: Y, ID: 0, val: 2}
{_ID: 0:1, _LABEL: X, ID: 1, val: 4}|{_ID: 1:1, _LABEL: Y, ID: 1, val: 5}
{_ID: 0:2, _LABEL: X, ID: 2, val: 6}|

# Join nodes on non-equality of properties – OPTIONAL MATCH on two relationships and WHERE
-CASE Scenario7
-STATEMENT CREATE NODE TABLE X(ID SERIAL, val INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE Y(ID SERIAL, val INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE Z(ID SERIAL, val INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE REL TABLE E1(FROM X TO Y);
---- ok
-STATEMENT CREATE REL TABLE E2(FROM Y TO Z);
---- ok
-STATEMENT CREATE (:X {val: 1})-[:E1]->(:Y {val: 2})-[:E2]->(:Z {val: 3}),
                  (:X {val: 4})-[:E1]->(:Y {val: 5}),
                  (:X {val: 6});
---- ok
-STATEMENT MATCH (x:X)
           OPTIONAL MATCH (x)-[:E1]->(y:Y)-[:E2]->(z:Z)
           WHERE x.val < z.val
           RETURN x, y, z;
---- 3
{_ID: 0:0, _LABEL: X, ID: 0, val: 1}|{_ID: 1:0, _LABEL: Y, ID: 0, val: 2}|{_ID: 2:0, _LABEL: Z, ID: 0, val: 3}
{_ID: 0:1, _LABEL: X, ID: 1, val: 4}||
{_ID: 0:2, _LABEL: X, ID: 2, val: 6}||

# Join nodes on non-equality of properties – Two OPTIONAL MATCH clauses and WHERE
-CASE Scenario8
-STATEMENT CREATE NODE TABLE X(ID SERIAL, val INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE Y(ID SERIAL, val INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE Z(ID SERIAL, val INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE REL TABLE E1(FROM X TO Y);
---- ok
-STATEMENT CREATE REL TABLE E2(FROM Y TO Z);
---- ok
-STATEMENT CREATE (:X {val: 1})-[:E1]->(:Y {val: 2})-[:E2]->(:Z {val: 3}),
                  (:X {val: 4})-[:E1]->(:Y {val: 5}),
                  (:X {val: 6});
---- ok
-STATEMENT MATCH (x:X)
          OPTIONAL MATCH (x)-[:E1]->(y:Y)
          OPTIONAL MATCH (y)-[:E2]->(z:Z)
          WHERE x.val < z.val
          RETURN x, y, z;
---- 3
{_ID: 0:0, _LABEL: X, ID: 0, val: 1}|{_ID: 1:0, _LABEL: Y, ID: 0, val: 2}|{_ID: 2:0, _LABEL: Z, ID: 0, val: 3}
{_ID: 0:1, _LABEL: X, ID: 1, val: 4}|{_ID: 1:1, _LABEL: Y, ID: 1, val: 5}|
{_ID: 0:2, _LABEL: X, ID: 2, val: 6}||
