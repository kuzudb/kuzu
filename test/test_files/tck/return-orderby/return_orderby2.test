-GROUP TCKReturnOrderBy2
-DATASET CSV tck

--

# ORDER BY should return results in ascending order
-CASE Scenario1
-STATEMENT CREATE NODE TABLE A(ID SERIAL, num INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE (n1:A {num: 1}),
                  (n2:A {num: 3}),
                  (n3:A {num: -5});
---- ok
-STATEMENT MATCH (n)
           RETURN n.num AS prop
           ORDER BY n.num;
-CHECK_ORDER
---- 3
-5
1
3

# ORDER BY DESC should return results in descending order
-CASE Scenario2
-STATEMENT CREATE NODE TABLE A(ID SERIAL, num INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE (n1:A {num: 1}),
                  (n2:A {num: 3}),
                  (n3:A {num: -5});
---- ok
-STATEMENT MATCH (n)
           RETURN n.num AS prop
           ORDER BY n.num DESC;
-CHECK_ORDER
---- 3
3
1
-5

# Sort on aggregated function
-CASE Scenario3
-STATEMENT CREATE NODE TABLE A(ID SERIAL, division STRING, age INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE (:A {division: 'A', age: 22}),
                  (:A {division: 'B', age: 33}),
                  (:A {division: 'B', age: 44}),
                  (:A {division: 'C', age: 55});
---- ok
-STATEMENT MATCH (n)
           RETURN n.division, max(n.age)
             ORDER BY max(n.age);
-CHECK_ORDER
---- 3
A|22
B|44
C|55

# Support sort and distinct
-CASE Scenario4
-STATEMENT CREATE NODE TABLE A(ID SERIAL, name STRING, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE (:A {name: 'A'}),
                  (:A {name: 'B'}),
                  (:A {name: 'C'});
---- ok
-STATEMENT MATCH (a)
           RETURN DISTINCT a
             ORDER BY a.name;
-CHECK_ORDER
---- 3
{_ID: 0:0, _LABEL: A, ID: 0, name: A}
{_ID: 0:1, _LABEL: A, ID: 1, name: B}
{_ID: 0:2, _LABEL: A, ID: 2, name: C}

# Support ordering by a property after being distinct-ified
-CASE Scenario5
-SKIP
-STATEMENT CREATE NODE TABLE A(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE B(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE REL TABLE T(FROM A TO B);
---- ok
-STATEMENT CREATE (:A)-[:T]->(:B);
---- ok
-STATEMENT MATCH (a)-->(b)
           RETURN DISTINCT b
             ORDER BY b.name;
-CHECK_ORDER
---- 1
{_ID: 1:0, _LABEL: B, ID: 0}

# Count star should count everything in scope
-CASE Scenario6
-SKIP
-STATEMENT CREATE NODE TABLE L1(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE L2(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE L3(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE (:L1), (:L2), (:L3);
---- ok
-STATEMENT MATCH (a)
           RETURN a, count(*)
           ORDER BY count(*);
---- 3
{_ID: 0:0, _LABEL: L1, ID: 0}|1
{_ID: 1:0, _LABEL: L2, ID: 0}|1
{_ID: 2:0, _LABEL: L3, ID: 0}|1

# Ordering with aggregation
-CASE Scenario7
-STATEMENT CREATE NODE TABLE A(ID SERIAL, name STRING, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE (:A {name: 'nisse'});
---- ok
-STATEMENT MATCH (n)
           RETURN n.name, count(*) AS foo
             ORDER BY n.name;
-CHECK_ORDER
---- 1
nisse|1

# Returning all variables with ordering
-CASE Scenario8
-STATEMENT CREATE NODE TABLE A(id INT64, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE (:A {id: 1}), (:A {id: 10});
---- ok
-STATEMENT MATCH (n)
           RETURN *
             ORDER BY n.id;
-CHECK_ORDER
---- 2
{_ID: 0:0, _LABEL: A, id: 1}
{_ID: 0:1, _LABEL: A, id: 10}

# Using aliased DISTINCT expression in ORDER BY
-CASE Scenario9
-STATEMENT CREATE NODE TABLE A(id INT64, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE (:A {id: 1}), (:A {id: 10});
---- ok
-STATEMENT MATCH (n)
           RETURN DISTINCT n.id AS id
             ORDER BY id DESC;
-CHECK_ORDER
---- 2
10
1

# Returned columns do not change from using ORDER BY
-CASE Scenario10
-STATEMENT CREATE NODE TABLE A(id INT64, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE (:A {id: 1}), (:A {id: 10});
---- ok
-STATEMENT MATCH (n)
           RETURN DISTINCT n
             ORDER BY n.id;
-CHECK_ORDER
---- 2
{_ID: 0:0, _LABEL: A, id: 1}
{_ID: 0:1, _LABEL: A, id: 10}

# Aggregates ordered by arithmetics
-CASE Scenario11
-STATEMENT CREATE NODE TABLE A(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE X(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE (:A), (:X), (:X);
---- ok
-STATEMENT MATCH (a:A), (b:X)
           RETURN count(a) * 10 + count(b) * 5 AS x
           ORDER BY x;
-CHECK_ORDER
---- 1
30

# Aggregation of named paths
-CASE Scenario12
-SKIP
-STATEMENT CREATE NODE TABLE A(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE B(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE C(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE D(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE E(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE F(ID SERIAL, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE REL TABLE GROUP R(FROM A TO B, FROM C TO D, FROM D TO E, FROM E TO F);
---- ok
-STATEMENT CREATE (a:A), (b:B), (c:C), (d:D), (e:E), (f:F)
           CREATE (a)-[:R_A_B]->(b)
           CREATE (c)-[:R_C_D]->(d)
           CREATE (d)-[:R_D_E]->(e)
           CREATE (e)-[:R_E_F]->(f);
---- ok
-STATEMENT MATCH p = (a)-[*]->(b)
           RETURN collect(nodes(p)) AS paths, length(p) AS l
           ORDER BY l;
-PARALLELISM 1
-CHECK_ORDER
---- 3
[[{_ID: 0:0, _LABEL: A, ID: 0},{_ID: 1:0, _LABEL: B, ID: 0}],[{_ID: 2:0, _LABEL: C, ID: 0},{_ID: 3:0, _LABEL: D, ID: 0}],[{_ID: 3:0, _LABEL: D, ID: 0},{_ID: 4:0, _LABEL: E, ID: 0}],[{_ID: 4:0, _LABEL: E, ID: 0},{_ID: 5:0, _LABEL: F, ID: 0}]]|1
[[{_ID: 2:0, _LABEL: C, ID: 0},{_ID: 3:0, _LABEL: D, ID: 0},{_ID: 4:0, _LABEL: E, ID: 0}],[{_ID: 3:0, _LABEL: D, ID: 0},{_ID: 4:0, _LABEL: E, ID: 0},{_ID: 5:0, _LABEL: F, ID: 0}]]|2
[[{_ID: 2:0, _LABEL: C, ID: 0},{_ID: 3:0, _LABEL: D, ID: 0},{_ID: 4:0, _LABEL: E, ID: 0},{_ID: 5:0, _LABEL: F, ID: 0}]]|3

# Fail when sorting on variable removed by DISTINCT
-CASE Scenario13
-SKIP
-STATEMENT CREATE NODE TABLE A(ID SERIAL, name STRING, age INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE (:A {name: 'A', age: 13}), (:A {name: 'B', age: 12}), (:A {name: 'C', age: 11});
---- ok
-STATEMENT MATCH (a)
           RETURN DISTINCT a.name
             ORDER BY a.age;
---- error
UndefinedVariable

# Fail on aggregation in ORDER BY after RETURN
-CASE Scenario14
-STATEMENT CREATE NODE TABLE A(ID SERIAL, num1 INT64, num2 INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT MATCH (n)
           RETURN n.num1
             ORDER BY max(n.num2);
---- error
Cannot evaluate expression with type AGGREGATE_FUNCTION.
