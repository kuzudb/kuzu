-NAME SingleNodeAggTest
-QUERY MATCH (a:person) RETURN a.age, MIN(a.ID), AVG(a.eyeSight), COUNT(*)
---- 7
20|5|4.750000|2
25|8|4.500000|1
30|2|5.100000|1
35|0|5.000000|1
40|9|4.900000|1
45|3|5.000000|1
83|10|4.900000|1

-NAME InMemOverflowBufferTest
-QUERY MATCH (a:person) RETURN a.fName as name, COUNT(*) order by name desc
-PARALLELISM 1
---- 8
Hubert Blaine Wolfeschlegelsteinhausenbergerdorff|1
Greg|1
Farooq|1
Elizabeth|1
Dan|1
Carol|1
Bob|1
Alice|1

-NAME SingleNodeDistinctTest
-QUERY MATCH (a:person) RETURN DISTINCT a.gender
---- 2
1
2

-NAME OneHopAggTest
-QUERY MATCH (a:person)-[:knows]->(b:person) RETURN a.age, a.gender, COUNT(*)
-ENUMERATE
--PARALLELISM 2
---- 5
20|1|2
20|2|3
30|2|3
35|1|3
45|1|3

-NAME OneHopHashAggTest
-QUERY MATCH (a:person)-[:knows]->(b:person) RETURN a.gender, COUNT(*), SUM(b.age)
--PARALLELISM 3
-ENUMERATE
---- 2
1|8|245
2|6|210

-NAME TwoHopAggTest
-QUERY MATCH (a:person)-[:knows]->(b:person)-[:knows]->(c:person) RETURN a.gender, COUNT(*), COUNT(DISTINCT b.age)
--PARALLELISM 5
-ENUMERATE
---- 2
1|18|4
2|18|4

-NAME OneHopAggFlatUnflatVecTest
-QUERY MATCH (a:person)-[:knows]->(b:person) RETURN a.ID, b.gender, sum(b.age)
-PARALLELISM 6
-ENUMERATE
---- 9
0|1|45
0|2|50
2|1|80
2|2|20
3|1|35
3|2|50
5|1|80
5|2|30
7|2|65

-NAME OneHopAggFlatUnflatVecWithNonHashKeyTest
-QUERY MATCH (a:person)-[:knows]->(b:person) RETURN a.ID, a.gender, b.gender, sum(b.age)
-ENUMERATE
---- 9
0|1|1|45
0|1|2|50
2|2|1|80
2|2|2|20
3|1|1|35
3|1|2|50
5|2|1|80
5|2|2|30
7|1|2|65

-NAME OneHopDistinctTest
-QUERY MATCH (a:person)-[:knows]->(b:person) RETURN DISTINCT a.gender, b.isStudent
-ENUMERATE
---- 4
1|False
1|True
2|False
2|True

-NAME TwoHopDistinctTest
-QUERY MATCH (a:person)-[:knows]->(b:person)-[:knows]->(c:person) RETURN DISTINCT a.ID + 1
-ENUMERATE
---- 4
1
3
4
6

-NAME HashCollectINT64Test
-QUERY MATCH (p:person) RETURN p.gender, collect(p.age)
---- 2
1|[35,45,20]
2|[30,20,25,40,83]

-NAME HashCollectFloatTest
-QUERY MATCH (p:person) RETURN p.height, collect(p.eyeSight)
---- 8
1.731000|[5.000000]
0.990000|[5.100000]
1.000000|[5.000000]
1.300000|[4.800000]
1.463000|[4.700000]
1.510000|[4.500000]
1.600000|[4.900000]
1.323000|[4.900000]

-NAME HashCollectSTRINGTest
-QUERY MATCH (p:person) RETURN p.age, collect(p.fName)
---- 7
35|[Alice]
30|[Bob]
45|[Carol]
20|[Dan,Elizabeth]
25|[Farooq]
40|[Greg]
83|[Hubert Blaine Wolfeschlegelsteinhausenbergerdorff]

-NAME HashCollectLISTOfINT64Test
-QUERY MATCH (p:person) RETURN p.gender, collect(p.workedHours)
---- 2
1|[[10,5],[4,5],[2]]
2|[[12,8],[1,9],[3,4,5,6,7],[1],[10,11,12,3,4,5,6,7]]

-NAME HashCollectLISTOfSTRINGTest
-QUERY MATCH (p:person) RETURN p.isStudent, collect(p.usedNames)
---- 2
True|[[Aida],[Bobby],[Fesdwe]]
False|[[Carmen,Fred],[Wolfeschlegelstein,Daniel],[Ein],[Grad],[Ad,De,Hi,Kye,Orlan]]

-NAME HashCollectLISTOfLISTOfINT64Test
-QUERY MATCH (p:person) RETURN p.ID, collect(p.courseScoresPerTerm)
---- 8
0|[[[10,8],[6,7,8]]]
2|[[[8,9],[9,10]]]
3|[[[8,10]]]
5|[[[7,4],[8,8],[9]]]
7|[[[6],[7],[8]]]
8|[[[8]]]
9|[[[10]]]
10|[[[7],[10],[6,7]]]

-NAME HashCollectLISTOfSTRINGMultiThreadTest
-QUERY MATCH (p:person) RETURN p.isStudent, collect(p.usedNames)
-PARALLELISM 4
---- 2
True|[[Aida],[Bobby],[Fesdwe]]
False|[[Carmen,Fred],[Wolfeschlegelstein,Daniel],[Ein],[Grad],[Ad,De,Hi,Kye,Orlan]]

-NAME HashCollectOneHopTest
-QUERY MATCH (a:person)-[:knows]->(b:person) RETURN a.fName, collect(b.age)
---- 5
Alice|[30,45,20]
Bob|[35,45,20]
Carol|[35,30,20]
Dan|[35,30,45]
Elizabeth|[25,40]

-NAME HashCollectOnInt32Test
-QUERY MATCH (m:movies) RETURN m.length, collect(m.name)
---- 3
126|[Sóló cón tu párejâ]
2544|[The 😂😃🧘🏻‍♂️🌍🌦️🍞🚗 movie]
298|[Roma]

-NAME HashCollectOnInt16Test
-QUERY MATCH (:person)-[s:studyAt]->(:organisation) RETURN s.year, collect(s.length)
---- 2
2020|[55,22]
2021|[5]
