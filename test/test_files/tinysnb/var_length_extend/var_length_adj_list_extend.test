# In the knows relation of the tiny-snb dataset, Node 0,2,3,5 extends to each other, Node 7 extends to Node 8,9 and
# all other nodes don't have adjacent nodes.
# In level 1, there are 14 nodes (Node 0 extends to Node 2,3,5; Node 2 extends to Node 0,3,5; Node 3 extends to Node
# 0,2,5; Node 5 extends to Node 0,3,5 and Node 7 extends to Node 8,9). So level 1 has 3 * Node 0,2,3,5 and Node 8,9.
# In level 2,  Node 0,2,3,5 extends to each other so we have 3 * 3 * Node 0,2,3,5 = 36 nodes. Node 8,9 doesn't have
# adjacent nodes. # In level 3, Node 0,2,3,5 extends to each other so we have 3 * 3 * 3 * Node 0,2,3,5 = 108 nodes.
# In general the formula is this: nth level will have 4 * (3 ^ n) number of nodes (n > 1), and the first level has
# 14 nodes.
-NAME KnowsOneToTwoHopTest
-QUERY MATCH (a:person)-[:knows*1..2]->(b:person) RETURN COUNT(*)
-PARALLELISM 3
---- 1
50

-NAME KnowsThreeHopMinLenEqualsMaxLen
-QUERY MATCH (a:person)-[:knows*3..3]->(b:person) RETURN COUNT(*)
-PARALLELISM 2
---- 1
108

-NAME KnowsKnows2To4HopTest
-QUERY MATCH (a:person)-[:knows]->(b:person)-[:knows*2..4]->(c:person) RETURN COUNT(*)
-PARALLELISM 2
---- 1
1404

-NAME KnowsLongPathTest
-QUERY MATCH (a:person)-[:knows*8..11]->(b:person) RETURN COUNT(*)
-PARALLELISM 8
---- 1
1049760

-NAME KnowsOneToTwoHopWithFilterTest
-QUERY MATCH (a:person)-[:knows*1..2]->(b:person) WHERE a.ID = 7 RETURN b.fName
---- 2
Farooq
Greg

# Based on the above formula, the VAR_LENGTH_EXTEND will generate 144 tuples. However, if no matches are found on a
# particular node, the optional match will fill null for the missing part of the pattern (b in this case). Thus, the
# optional match will fill null for Node 7,8,9,10 that don't have matching pattern.
# -NAME KnowsWithOptionalMatch
# -QUERY MATCH (a:person) OPTIONAL MATCH (a)-[:knows*2..3]->(b:person) RETURN COUNT(*)
# ---- 1
# 148
