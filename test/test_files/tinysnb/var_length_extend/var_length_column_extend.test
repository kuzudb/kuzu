# In the meets relation of the tiny-snb dataset:
# Node 0,10 meets Node2; Node 7,8,9 meets Node 3; Node 2 meets Node 5; Node 3 meets Node 7.
# In layer 1: Node 7,8,9 extend to Node 3, Node 0,10 extends to Node 2, Node 2 extends to Node 5, and Node 3 extends
# to Node 7. In layer 2: 3 * Node 3 extend to Node 7, 2 * Node 2 extend to Node 5, 1 * Node 7 extends to Node 3.
# In layer 3: 3 * Node 7 extend to Node 3, 1 * Node 3 extend to Node 7. In layer 4: 3 * Node 3 extend to Node 7,
# 1 * Node 7 extend to Node 3.
# In general the formula is this: nth level will have 4 nodes (n > 2), and the first level has 7 nodes, second level
# has 6 nodes.

-NAME meetsOneToTwoHopTest
-QUERY MATCH (a:person)-[:meets*1..2]->(b:person) RETURN COUNT(*)
-PARALLELISM 2
---- 1
13

-NAME meetsThreeHopMinLenEqualsMaxLen
-QUERY MATCH (a:person)-[:meets*3..3]->(b:person) RETURN COUNT(*)
-PARALLELISM 2
---- 1
4

# The first varLenAdjListJoin will generate 3 * Node 0,2,3,5 and 1 * Node 8, 9. Node 0 can extend 2 levels (Node 0
# -> Node 2 -> Node 5), which generates 3 paths. Node 2 can only extend 1 level to Node 5.  Node 3 can extend to 2 or
# 3 levels (Node 3 -> Node 7 -> Node 3 -> Node 7), which generates 6 paths (3 paths of length 2 and 3 paths of length
# 3). Node 5 doesn't have any adjacent nodes. Node 8,9 can extend 2 or 3 levels (Node 8 9 -> Node 3 -> Node 7 -> Node
# 3), which generates another 4 paths (2 paths of length 2 and 2 paths of length 3). In total, there are 15 paths.
-NAME varLenAdjListJoinWithVarLenColumnJoinTwoToFourHopTest
-QUERY MATCH (a:person)-[:knows]->(b:person)-[:meets*2..3]->(c:person) RETURN COUNT(*)
-PARALLELISM 8
---- 1
13

-NAME meetsLongPathTest
-QUERY MATCH (a:person)-[:meets*8..11]->(b:person) RETURN COUNT(*)
-PARALLELISM 8
---- 1
16

-NAME meetsOneToTwoHopWithFilterTest
-QUERY MATCH (a:person)-[:meets*1..2]->(b:person) WHERE a.ID = 3 RETURN b.fName
---- 2
Carol
Elizabeth

# Node 3,7,8,9 can extend 3,4 levels and generate 8 paths (by using the above formulas). Node 0,2,5,10 don't have
# such paths, the optional match will put 'null' in the b valueVector for Node 0,2,5,10. In total, we have 12 output
# tuples.
# -NAME KnowsWithOptionalMatch
# -QUERY MATCH (a:person) OPTIONAL MATCH (a)-[:meets*3..4]->(b:person) RETURN COUNT(*)
# ---- 1
# 12
