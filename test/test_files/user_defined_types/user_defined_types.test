-DATASET CSV empty

--

-CASE UDT

-LOG UDT
-STATEMENT CREATE TYPE DESCRIPTION AS STRUCT(age int64, name string);
---- ok
-STATEMENT CREATE NODE TABLE person (id INT64, description DESCRIPTION, primary key(id));
---- ok
-STATEMENT CREATE (:person {id: 5, description: {age: 5, name: 'Alice'}});
---- ok
-STATEMENT CREATE (:person {id: 8, description: {age: 3, name: 'Bob'}});
---- ok
-STATEMENT CREATE (:person {id: 12, description: {age: 1, name: 'Dan'}});
---- ok
-STATEMENT MATCH (p:person) RETURN p.*;
---- 3
12|{age: 1, name: Dan}
5|{age: 5, name: Alice}
8|{age: 3, name: Bob}
-LOG StructExtractOnUserDefinedType
-STATEMENT MATCH (p:person) RETURN struct_extract(p.description, 'age');
---- 3
1
3
5
-STATEMENT MATCH (p:person) RETURN struct_extract(p.description, 'name');
---- 3
Alice
Bob
Dan
-STATEMENT CREATE TYPE timeinfo AS STRUCT(meetDate date, length interval);
---- ok
-STATEMENT CREATE REL TABLE knows (FROM person TO person, info timeinfo);
---- ok
-STATEMENT MATCH (p:person {id: 5}), (p1:person {id: 8}) CREATE (p)-[:knows {info: {meetDate: date('2020-05-03'), length: interval('3 years 2 hours')}}]->(p1)
---- ok
-STATEMENT MATCH (p:person {id: 12}), (p1:person {id: 8}) CREATE (p)-[:knows {info: {meetDate: date('2011-11-12'), length: interval('3 days 2 minutes')}}]->(p1)
---- ok
-STATEMENT MATCH (p:person {id: 8}), (p1:person {id: 5}) CREATE (p)-[:knows {info: {meetDate: date('1988-02-21'), length: interval('3 hours')}}]->(p1)
---- ok
-STATEMENT MATCH (p:person)-[e:knows]->(p1:person) return p.description, p1.description, e.info
---- 3
{age: 1, name: Dan}|{age: 3, name: Bob}|{meetDate: 2011-11-12, length: 3 days 00:02:00}
{age: 3, name: Bob}|{age: 5, name: Alice}|{meetDate: 1988-02-21, length: 03:00:00}
{age: 5, name: Alice}|{age: 3, name: Bob}|{meetDate: 2020-05-03, length: 3 years 02:00:00}
-STATEMENT CALL TABLE_INFO('person') RETURN *;
---- 2
0|id|INT64|NULL|True
1|description|STRUCT(age INT64, name STRING)|NULL|False
-STATEMENT CALL TABLE_INFO('knows') RETURN *;
---- 1
1|info|STRUCT(meetDate DATE, length INTERVAL)|NULL|both

-CASE InvalidUserDefinedType
-LOG InvalidUserDefinedTypeErr
-STATEMENT CREATE TYPE DESCRIPTION AS STRUCT(age int64, name string);
---- ok
-STATEMENT CREATE TYPE DESCRIPTION AS STRUCT(age int64, name string);
---- error
Binder exception: Duplicated type name: DESCRIPTION.

-CASE UDTPrimitiveType
-STATEMENT CREATE TYPE SMALLINT AS INT32;
---- ok
-STATEMENT CREATE TYPE BIGINT AS INT64;
---- ok
-STATEMENT RETURN CAST(CAST(3 AS SMALLINT) AS BIGINT)
---- 1
3
-STATEMENT CREATE NODE TABLE PERSON (ID SMALLINT, AGE BIGINT, primary key(ID))
---- ok
-STATEMENT COPY PERSON FROM '${KUZU_ROOT_DIRECTORY}/dataset/udt/vPerson.csv'
---- ok
-STATEMENT MATCH (p:PERSON) return p.*;
---- 3
30|40
5|20
8|100
-STATEMENT CREATE TYPE HEIGHT AS STRING;
---- ok
-STATEMENT LOAD FROM "${KUZU_ROOT_DIRECTORY}/dataset/udt/vMovies.csv" (header = true) RETURN size(height), preference
---- 3
3|200
2|55
2|33
-STATEMENT CREATE TYPE GENDER AS BOOL;
---- ok
-STATEMENT LOAD WITH HEADERS (height HEIGHT, gender GENDER) FROM "${KUZU_ROOT_DIRECTORY}/dataset/udt/no_header.csv" WHERE gender=true RETURN size(height)
---- 2
4
2
-STATEMENT alter table PERSON add propx GENDER default false;
---- ok
-STATEMENT MATCH (p:PERSON) return p.*;
---- 3
30|40|False
5|20|False
8|100|False
-STATEMENT alter table PERSON add propy SMALLINT;
---- ok
-STATEMENT MATCH (p:PERSON) return p.*;
---- 3
30|40|False|
5|20|False|
8|100|False|

-CASE Example
-STATEMENT CREATE TYPE BIGINT AS INT64;
---- ok
-STATEMENT CREATE NODE TABLE PERSON (ID BIGINT, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE (p:PERSON {ID: 5});
---- ok
-STATEMENT CREATE (p:PERSON {ID: 10});
---- ok
-STATEMENT MATCH (p:PERSON) RETURN CAST(p.ID AS INT32);
---- 2
5
10
-STATEMENT CREATE TYPE LENGTH AS BIGINT;
---- ok
-STATEMENT CREATE NODE TABLE STUDENT (ID BIGINT, HEIGHT LENGTH, PRIMARY KEY(ID));
---- ok

-CASE UDTInNestedType
-STATEMENT CREATE TYPE LENGTH AS INT64;
---- ok
-STATEMENT CREATE TYPE HEIGHT AS INT32;
---- ok
-STATEMENT CREATE NODE TABLE PERSON (name string, info struct(h HEIGHT, l length), primary key(name));
---- ok
-STATEMENT CREATE NODE TABLE PERSON1 (name string, info HEIGHT[], primary key(name));
---- ok
-STATEMENT CREATE NODE TABLE PERSON3 (name string, info HEIGHT[5], info1 LENGTH[3], primary key(name));
---- ok
-STATEMENT CREATE NODE TABLE PERSON2 (name string, info MAP(HEIGHT, LENGTH), primary key(name));
---- ok
-STATEMENT CREATE TYPE person_info as struct (l length, h height)
---- ok
-STATEMENT CREATE NODE TABLE PERSON_INFO (NAME STRING, information person_info, primary key(NAME))
---- ok
-STATEMENT CREATE (:PERSON_INFO {NAME: 'abc', information: {l: 5, h: 32}})
---- ok
-STATEMENT MATCH (p:PERSON_INFO) RETURN p.*;
---- 1
abc|{l: 5, h: 32}

-CASE UDTCastTest
-STATEMENT CREATE TYPE LENGTH AS INT64;
---- ok
-STATEMENT CREATE NODE TABLE person (id uint64, description INT64[], INFO STRUCT(age LENGTH, name string), primary key(id));
---- ok
-STATEMENT CREATE (:person {id: 5, description: [2,5,6], info: {age: 5, name: 'alice'}});
---- ok
-STATEMENT CREATE (:person {id: 25, description: [1,3,4], info: {age: 21, name: 'Bob'}});
---- ok
-STATEMENT CREATE (:person {id: 67, description: [4,5,8], info: {age: 32, name: 'Carol'}});
---- ok
-STATEMENT MATCH (p:person) RETURN cast(p.id as length)
---- 3
5
25
67
-STATEMENT MATCH (p:person) RETURN cast(p.description as LENGTH[3])
---- 3
[2,5,6]
[1,3,4]
[4,5,8]
-STATEMENT CREATE TYPE person_info AS STRUCT(age LENGTH, name string);
---- ok
-STATEMENT MATCH (p:person) RETURN cast(p.info as person_info)
---- 3
{age: 21, name: Bob}
{age: 32, name: Carol}
{age: 5, name: alice}

-CASE UDTInvalidCast
-STATEMENT RETURN CAST(['abc', 'def', 'ghi'] AS JSON[])
---- error
Catalog exception: JSON is neither an internal type nor a user defined type. This type exists in the JSON extension. You can install and load the extension by running 'INSTALL JSON; LOAD EXTENSION JSON;'.
