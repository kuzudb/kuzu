-DATASET CSV tinysnb

--

-CASE CallSetGetConfig

-LOG SetGetThread
-STATEMENT CALL THREADS=4
---- ok
-STATEMENT CALL current_setting('threads') RETURN *
-PARALLELISM 6
---- 1
6
-STATEMENT CALL current_setting('threads') RETURN *
-PARALLELISM 10
---- 1
10

-STATEMENT CREATE NODE TABLE personAlt(id INT64 PRIMARY KEY, prop STRING DEFAULT 'Alice');
---- ok
-STATEMENT CALL TABLE_INFO('personAlt') RETURN *;
---- 2
0|id|INT64|NULL|True
1|prop|STRING|'Alice'|False

-STATEMENT CREATE NODE TABLE personAlt2(id INT64, prop STRING DEFAULT 'Alice' PRIMARY KEY);
---- ok
-STATEMENT CALL TABLE_INFO('personAlt2') RETURN *;
---- 2
0|id|INT64|NULL|False
1|prop|STRING|'Alice'|True

-STATEMENT CREATE NODE TABLE personAlt3(id INT64, prop STRING DEFAULT 'Alice');
---- error
Parser exception: Can not find primary key.
-STATEMENT CREATE NODE TABLE personALt4(id INT64 PRIMARY KEY, prop STRING DEFAULT 'Alice' PRIMARY KEY);
---- error
Parser exception: Found multiple primary keys.
-STATEMENT CREATE NODE TABLE personAlt5(id INT64 PRIMARY KEY, prop STRING, PRIMARY KEY(id));
---- ok
-STATEMENT CALL TABLE_INFO('personAlt5') RETURN *;
0|id|INT64|NULL|True
1|prop|STRING|NULL|False

-STATEMENT CREATE NODE TABLE personOne(id INT64, prop STRING DEFAULT 'Alice', PRIMARY KEY(id));
---- ok
-STATEMENT CREATE NODE TABLE personTwo(id INT64, prop STRING DEFAULT gen_random_uuid(), PRIMARY KEY(id));
---- ok
-STATEMENT CREATE NODE TABLE personThree(id INT64, prop INT64 default 10+20, PRIMARY KEY(id));
---- ok
-STATEMENT CALL TABLE_INFO('personOne') RETURN *
---- 2
0|id|INT64|NULL|True
1|prop|STRING|'Alice'|False

-STATEMENT CALL TABLE_INFO('personTwo') RETURN *
---- 2
0|id|INT64|NULL|True
1|prop|STRING|gen_random_uuid()|False

-STATEMENT CALL TABLE_INFO('personThree') RETURN *
---- 2
0|id|INT64|NULL|True
1|prop|INT64|10 + 20|False

-LOG SetGetTimeout
-STATEMENT CALL timeout=40000
---- ok
-STATEMENT CALL current_setting('timeout') RETURN *
---- 1
40000
-STATEMENT CALL timeout=20000
---- ok
-STATEMENT CALL current_setting('timeout') RETURN *
---- 1
20000
-STATEMENT CALL timeout=(1+2+3)*10000
---- ok
-STATEMENT CALL current_setting('timeout') RETURN *
---- 1
60000

-LOG SetGetVarLengthMaxDepth
-STATEMENT CALL var_length_extend_max_depth=10
---- ok
-STATEMENT CALL current_setting('var_length_extend_max_depth') RETURN *
---- 1
10
-STATEMENT MATCH (a:person)-[:knows*1..28]->(b:person) RETURN COUNT(*);
---- error
Binder exception: Upper bound of rel  exceeds maximum: 10.
-STATEMENT MATCH (a:person)-[:knows*1..10]->(b:person) RETURN COUNT(*);
---- 1
354290

-LOG SetGetProgressBar
-STATEMENT CALL progress_bar=true
---- ok
-STATEMENT CALL current_setting('progress_bar') RETURN *
---- 1
True
-STATEMENT CALL progress_bar=false
---- ok
-STATEMENT CALL current_setting('progress_bar') RETURN *
---- 1
False
-STATEMENT CALL progress_bar=CASE WHEN 1<2 THEN True ELSE False END
---- ok
-STATEMENT CALL current_setting('progress_bar') RETURN *
---- 1
True

-LOG SemiMaskConfig
-STATEMENT CALL enable_semi_mask=true
---- ok
-STATEMENT CALL current_setting('enable_semi_mask') RETURN *
---- 1
True
-STATEMENT CALL enable_semi_mask=false
---- ok
-STATEMENT CALL current_setting('enable_semi_mask') RETURN *
---- 1
False

# -LOG ZoneMapConfig
# -STATEMENT CALL enable_zone_map=true
# ---- ok
# -STATEMENT CALL current_setting('enable_zone_map') RETURN *
# ---- 1
# True
# -STATEMENT CALL enable_zone_map=false
# ---- ok
# -STATEMENT CALL current_setting('enable_zone_map') RETURN *
# ---- 1
# False

-LOG NodeTableInfo
-STATEMENT CALL table_info('person') RETURN *
---- 16
0|ID|INT64|NULL|True
10|workedHours|INT64[]|NULL|False
11|usedNames|STRING[]|NULL|False
12|courseScoresPerTerm|INT64[][]|NULL|False
13|grades|INT64[4]|NULL|False
14|height|FLOAT|NULL|False
15|u|UUID|NULL|False
1|fName|STRING|NULL|False
2|gender|INT64|NULL|False
3|isStudent|BOOL|NULL|False
4|isWorker|BOOL|NULL|False
5|age|INT64|NULL|False
6|eyeSight|DOUBLE|NULL|False
7|birthdate|DATE|NULL|False
8|registerTime|TIMESTAMP|NULL|False
9|lastJobDuration|INTERVAL|NULL|False

-LOG RelTableInfo
-STATEMENT CALL table_info('knows') RETURN *
---- 7
1|date|DATE|NULL
2|meetTime|TIMESTAMP|NULL
3|validInterval|INTERVAL|NULL
4|comments|STRING[]|NULL
5|summary|STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[]))|NULL
6|notes|UNION(firstmet DATE, type INT16, comment STRING)|NULL
7|someMap|MAP(STRING, STRING)|NULL

-LOG ReturnNodeName
-STATEMENT CALL table_info('person') WHERE name <> 'ID' RETURN name
---- 15
fName
gender
isStudent
isWorker
age
eyeSight
birthdate
registerTime
lastJobDuration
workedHours
u
usedNames
courseScoresPerTerm
grades
height

-LOG ReturnRelName
-STATEMENT MATCH (m:movies) CALL table_info('knows') return id(m), type
---- 21
2:0|DATE
2:0|INTERVAL
2:0|MAP(STRING, STRING)
2:0|STRING[]
2:0|TIMESTAMP
2:0|STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[]))
2:0|UNION(firstmet DATE, type INT16, comment STRING)
2:1|DATE
2:1|INTERVAL
2:1|MAP(STRING, STRING)
2:1|STRING[]
2:1|TIMESTAMP
2:1|STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[]))
2:1|UNION(firstmet DATE, type INT16, comment STRING)
2:2|DATE
2:2|INTERVAL
2:2|MAP(STRING, STRING)
2:2|STRING[]
2:2|TIMESTAMP
2:2|STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[]))
2:2|UNION(firstmet DATE, type INT16, comment STRING)

-CASE CallNodeTableWith300ColumnsInfo
-DEFINE COLS REPEAT 2400 "col${count} INT64,"

-STATEMENT CREATE NODE TABLE person1(${COLS} PRIMARY KEY(col1));
---- ok
-STATEMENT CALL TABLE_INFO("person1") RETURN *
---- 2400
<FILE>:function_table_info_answer.txt

-LOG ReturnDBVersion
-STATEMENT CALL db_version() RETURN version
---- 1
${KUZU_VERSION}

-LOG ReturnTableConnection
-STATEMENT CALL show_connection('knows') RETURN *
---- 1
person|person|ID|ID
-STATEMENT CALL show_connection('workAt') RETURN *
---- 1
person|organisation|ID|ID
-STATEMENT CREATE REL TABLE GROUP Knows1 (FROM person To person, FROM person to organisation, year INT64);
---- ok
-STATEMENT CALL show_connection('Knows1') RETURN *
---- 2
person|person|ID|ID
person|organisation|ID|ID
-STATEMENT CALL show_connection('person') RETURN *
---- error
Binder exception: Show connection can only be called on a rel table!

-LOG WrongNumParameter
-STATEMENT CALL table_info('person', 'knows') RETURN *
---- error
Binder exception: Cannot match a built-in function for given function table_info(STRING,STRING). Supported inputs are
(STRING)

-LOG WrongParameterType
-STATEMENT CALL show_connection(123) RETURN *
---- error
Binder exception: 123 has data type INT64 but STRING was expected.

-LOG WrongParameterExprType
-STATEMENT CALL show_connection(upper("person")) RETURN *
---- error
Binder exception: Show connection can only be called on a rel table!
-STATEMENT MATCH (a:person) CALL show_connection(a.fName) RETURN *
---- error
Binder exception: a.fName has type PROPERTY but LITERAL was expected.

-LOG BMInfo
-STATEMENT CALL bm_info() RETURN mem_limit
---- 1
67108864
