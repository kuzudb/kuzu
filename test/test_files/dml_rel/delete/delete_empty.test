-DATASET CSV EMPTY

--

-CASE DeleteALPException
-STATEMENT CREATE NODE TABLE person (id INT64, PRIMARY KEY (id));
---- ok
-STATEMENT CREATE REL TABLE knows (FROM person TO person, val DOUBLE);
---- ok
-STATEMENT CREATE (a:person {ID: 88})
---- ok
-STATEMENT CREATE (a:person {ID: 77})
---- ok
-STATEMENT CREATE (a:person {ID: 66})
---- ok
-STATEMENT CREATE (a:person {ID: 55})
---- ok
-STATEMENT MATCH (a:person), (b:person) WHERE a.ID = 77 AND b.ID = 88 CREATE (a)-[e:knows {val:5.1}]->(b) RETURN COUNT(*);
---- 1
1
-STATEMENT MATCH (a:person), (b:person) WHERE a.ID = 77 AND b.ID = 66 CREATE (a)-[e:knows {val:123456789.123}]->(b) RETURN COUNT(*);
---- 1
1
-STATEMENT MATCH (a:person), (b:person) WHERE a.ID = 77 AND b.ID = 55 CREATE (a)-[e:knows {val:1.2}]->(b) RETURN COUNT(*);
---- 1
1
-STATEMENT MATCH (a:person), (b:person) WHERE a.ID = 66 AND b.ID = 55 CREATE (a)-[e:knows {val:2.3}]->(b) RETURN COUNT(*);
---- 1
1
-STATEMENT CHECKPOINT;
---- ok
-STATEMENT MATCH (a:person)-[e:knows]->(b:person) RETURN a.ID, b.ID, e.val;
---- 4
77|88|5.100000
77|66|123456789.123000
77|55|1.200000
66|55|2.300000
-STATEMENT MATCH (a:person)-[e:knows]->(b:person) WHERE b.ID = 66 DETACH DELETE b;
---- ok
-STATEMENT CHECKPOINT;
---- ok
-STATEMENT MATCH (a:person)-[e:knows]->(b:person) RETURN a.ID, b.ID, e.val;
---- 2
77|88|5.100000
77|55|1.200000

-CASE DetachDeleteSingleDirectionRelStorage
-SKIP
-STATEMENT create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID))
---- ok
-STATEMENT create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY) WITH (storage_direction = 'fwd')
---- ok
-STATEMENT COPY person FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson.csv";
---- ok
-STATEMENT COPY person FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson2.csv";
---- ok
-STATEMENT COPY knows FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/eKnows.csv";
---- ok
-STATEMENT MATCH (a:person) WHERE a.ID = 0 DETACH DELETE a;
---- error
Runtime exception: Cannot detach delete from node table 'person' as it has connected edges in rel table 'knows' (detach delete only supports deleting from rel tables with storage direction 'both').

-CASE DeleteAllRels
-TEST_FWD_ONLY_REL
-SKIP_IN_MEM
-STATEMENT call threads=1
---- ok
-STATEMENT create node table Person (id INT64, firstName STRING, lastName STRING, gender STRING, birthday INT64, creationDate INT64, locationIP STRING, browserUsed STRING, PRIMARY KEY (id));
---- ok
-STATEMENT create rel table knows (FROM Person TO Person, creationDate INT64, MANY_MANY);
---- ok
-STATEMENT copy Person from "${KUZU_ROOT_DIRECTORY}/dataset/ldbc-sf01/Person.csv"(parallel=false)
---- ok
-STATEMENT copy knows from ["${KUZU_ROOT_DIRECTORY}/dataset/ldbc-sf01/Person_knows_Person.csv","${KUZU_ROOT_DIRECTORY}/dataset/ldbc-sf01/Person_knows_Person_1.csv"](parallel=false)
---- ok
-STATEMENT call checkpoint_threshold=0
---- ok
-STATEMENT match (a)-[k:knows]->(b) delete k
---- ok
# re-copy, page allocation should start from end of Person since the pages for knows are reclaimed + truncated
-STATEMENT copy knows from ["${KUZU_ROOT_DIRECTORY}/dataset/ldbc-sf01/Person_knows_Person.csv","${KUZU_ROOT_DIRECTORY}/dataset/ldbc-sf01/Person_knows_Person_1.csv"](parallel=false)
---- ok
-STATEMENT call fsm_info() return count(*) <= 1
---- 1
True
-STATEMENT CALL storage_info('Person') where start_page_idx < 4294967295 with max(start_page_idx + num_pages) as expected_start_page_idx
        CALL storage_info('knows') where start_page_idx = expected_start_page_idx return count(*)
---- 1
0
-RELOADDB
# try some queries
-STATEMENT match (a)-[k:knows]->(b) return count(*)
---- 1
14073
-STATEMENT match (a)-[k:knows]->(b) where a.id = 17592186046041 return k.creationDate
---- 11
20110719184529612
20110929173245977
20111110222209521
20111214221549624
20111225070822925
20120208132201752
20120523102741692
20120610085946076
20120828085634951
20120806215110197
20120903202253152

-CASE DeleteSecondNodeGroup
-TEST_FWD_ONLY_REL
-SKIP_IN_MEM
-STATEMENT call threads=1
---- ok
-STATEMENT create node table Person (id INT64, firstName STRING, lastName STRING, gender STRING, birthday INT64, creationDate INT64, locationIP STRING, browserUsed STRING, PRIMARY KEY (id));
---- ok
-STATEMENT create rel table knows (FROM Person TO Person, creationDate INT64, MANY_MANY);
---- ok
-STATEMENT copy Person from "${KUZU_ROOT_DIRECTORY}/dataset/ldbc-sf01/Person.csv"(parallel=false)
---- ok
-STATEMENT copy knows from ["${KUZU_ROOT_DIRECTORY}/dataset/ldbc-sf01/Person_knows_Person.csv","${KUZU_ROOT_DIRECTORY}/dataset/ldbc-sf01/Person_knows_Person_1.csv"](parallel=false)
---- ok
-STATEMENT call checkpoint_threshold=0
---- ok
-STATEMENT call storage_info('Person') where node_group_id = 0 with num_values as node_group_capacity limit 1
           match (a)-[k:knows]->(b) where ID(a) >= internal_id(0, node_group_capacity) and ID(a) < internal_id(0, 2 * node_group_capacity)
           delete k
---- ok
-STATEMENT call fsm_info() with sum(num_pages) as num_free_pages
           match (a)-[k:knows]->(b) with count(*) as num_tuples, num_free_pages
           return num_tuples = 14073 or num_free_pages > 0
---- 1
True
-RELOADDB
-STATEMENT match (a)-[k:knows]->(b) where a.ID = 933 return k.creationDate
---- 3
20100422123057947
20101115072349104
20111215023443085
