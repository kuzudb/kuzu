-DATASET CSV empty
--

-CASE CreateOneToOneRel1
-TEST_FWD_ONLY_REL
-STATEMENT CREATE NODE TABLE N1(ID INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE N2(ID INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE REL TABLE Rel1(FROM N1 TO N2, ONE_ONE);
---- ok
-STATEMENT CREATE (:N1 {ID: 10}), (:N1 {ID: 1}), (:N2 {ID: 12}), (:N2 {ID: 8})
---- ok
-STATEMENT MATCH (n:N1) RETURN n.ID
---- 2
10
1
-STATEMENT MATCH (n:N2) RETURN n.ID
---- 2
12
8
-STATEMENT MATCH (n1:N1), (n2:N2) WHERE n1.ID=10 AND n2.ID=12 CREATE (n1)-[r:Rel1]->(n2)
---- ok
-STATEMENT MATCH (n:N1)-[r:Rel1]->(m:N2) RETURN n.ID, m.ID
---- 1
10|12

-CASE CreateOneToOneRel2
-TEST_FWD_ONLY_REL
-STATEMENT CREATE NODE TABLE N1(ID INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE N2(ID INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE REL TABLE Rel1(FROM N1 TO N2, ONE_ONE);
---- ok
-STATEMENT CREATE REL TABLE Rel2(FROM N2 TO N1, ONE_ONE);
---- ok
-STATEMENT CREATE (:N1 {ID: 10}),(:N1 {ID: 11});
---- ok
-STATEMENT MATCH (:N1)-[r:Rel1]->(:N2) RETURN COUNT(*);
---- 1
0
-STATEMENT CREATE (:N2 {ID: 12}),(:N2 {ID: 13});
---- ok
-STATEMENT MATCH (:N1)-[r:Rel1]->(:N2) RETURN COUNT(*);
---- 1
0
-STATEMENT MATCH (:N2)-[r:Rel2]->(:N1) RETURN COUNT(*);
---- 1
0

-CASE CreateOneToOneRelMultiplicityError
-STATEMENT CREATE NODE TABLE User(id STRING, PRIMARY KEY (id));
---- ok
-STATEMENT CREATE NODE TABLE City(id STRING, PRIMARY KEY (id));
---- ok
-STATEMENT CREATE REL TABLE LivesIn(FROM User TO City, ONE_ONE);
---- ok
-STATEMENT CREATE (u:User { id: 'user1' });
---- ok
-STATEMENT CREATE (u:User { id: 'user2' });
---- ok
-STATEMENT CREATE (c:City { id: 'city1' });
---- ok
-STATEMENT CREATE (c:City { id: 'city2' });
---- ok
-STATEMENT MATCH (u:User), (c:City) WHERE u.id = 'user1' AND c.id = 'city1' CREATE (u)-[e:LivesIn]->(c);
---- ok

-LOG EntriesCommitedInMem
-STATEMENT MATCH (u:User), (c:City) WHERE u.id = 'user2' AND c.id = 'city1' CREATE (u)-[e:LivesIn]->(c);
---- error
Runtime exception: Node(nodeOffset: 0) has more than one neighbour in table LivesIn in the bwd direction, which violates the rel multiplicity constraint.
-STATEMENT MATCH (u:User), (c:City) WHERE u.id = 'user1' AND c.id = 'city2' CREATE (u)-[e:LivesIn]->(c);
---- error
Runtime exception: Node(nodeOffset: 0) has more than one neighbour in table LivesIn in the fwd direction, which violates the rel multiplicity constraint.

-LOG EntriesCheckpointed
-STATEMENT CHECKPOINT
---- ok
-STATEMENT MATCH (u:User), (c:City) WHERE u.id = 'user2' AND c.id = 'city1' CREATE (u)-[e:LivesIn]->(c);
---- error
Runtime exception: Node(nodeOffset: 0) has more than one neighbour in table LivesIn in the bwd direction, which violates the rel multiplicity constraint.
-STATEMENT MATCH (u:User), (c:City) WHERE u.id = 'user1' AND c.id = 'city2' CREATE (u)-[e:LivesIn]->(c);
---- error
Runtime exception: Node(nodeOffset: 0) has more than one neighbour in table LivesIn in the fwd direction, which violates the rel multiplicity constraint.

-CASE CreateOneToOneRelTableAfterCreateNodes
-TEST_FWD_ONLY_REL
-STATEMENT CREATE NODE TABLE N1(ID SERIAL, PRIMARY KEY (ID));
---- ok
-STATEMENT CREATE NODE TABLE N2(ID SERIAL, PRIMARY KEY (ID));
---- ok
-STATEMENT CREATE (:N1), (:N1), (:N2), (:N2)
---- ok
-STATEMENT CREATE REL TABLE N1_HAS_N2(FROM N1 TO N2, ONE_ONE);
---- ok
-STATEMENT MATCH (a:N1), (b:N2) WHERE a.ID = b.ID CREATE (a)-[:N1_HAS_N2]->(b);
---- ok
-STATEMENT MATCH ()-[e:N1_HAS_N2]->() RETURN e;
---- 2
(0:0)-{_LABEL: N1_HAS_N2, _ID: 2:0}->(1:0)
(0:1)-{_LABEL: N1_HAS_N2, _ID: 2:1}->(1:1)


-CASE CreateOneToOneInBatch
-TEST_FWD_ONLY_REL
-STATEMENT create node table animal(id int64, primary key(id));
---- ok
-STATEMENT create node table person(id int64, primary key(id));
---- ok
-STATEMENT create rel table own(from person to animal, ONE_ONE);
---- ok
-STATEMENT create (:person {id:1});
---- ok
-STATEMENT create (:animal {id:1});
---- ok
-STATEMENT create (:person {id:2});
---- ok
-STATEMENT create (:animal {id:2});
---- ok
-STATEMENT create (:person {id:3});
---- ok
-STATEMENT create (:animal {id:3});
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT match (a:animal), (p:person) where a.id=1 and p.id=1 create (p)-[e:own]->(a);
---- ok
-STATEMENT match (a:animal), (p:person) where a.id=2 and p.id=2 create (p)-[e:own]->(a);
---- ok
-STATEMENT match (a:animal), (p:person) where a.id=3 and p.id=3 create (p)-[e:own]->(a);
---- ok
-STATEMENT COMMIT;
---- ok
-STATEMENT match (a)-[e]->(b) return e;
---- 3
(1:0)-{_LABEL: own, _ID: 2:0}->(0:0)
(1:1)-{_LABEL: own, _ID: 2:1}->(0:1)
(1:2)-{_LABEL: own, _ID: 2:2}->(0:2)

## TODO: FIX-ME. This can cause bm exception or long running (possibly hang) on 32-bit platform
-CASE CreateOneToOneRelOnLargeNodeTable
-SKIP_32BIT
-STATEMENT CREATE NODE TABLE N1(ID INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE N2(ID INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE REL TABLE Rel1(FROM N1 TO N2, ONE_ONE);
---- ok
-STATEMENT COPY N1 FROM "${KUZU_ROOT_DIRECTORY}/dataset/lsqb-sf01/Comment.csv" (HEADER=true);
---- ok
-STATEMENT COPY N2 FROM "${KUZU_ROOT_DIRECTORY}/dataset/lsqb-sf01/Post.csv" (HEADER=true);
---- ok
-STATEMENT MATCH (n1:N1), (n2:N2) WHERE n1.ID=1099512015344 AND n2.ID=3 CREATE (n1)-[r:Rel1]->(n2)
---- ok
-STATEMENT MATCH (n:N1)-[r:Rel1]->(m:N2) RETURN n.ID, m.ID
---- 1
1099512015344|3

-CASE CreateAndScanOneToOneRel
-TEST_FWD_ONLY_REL
-STATEMENT CREATE NODE TABLE N1(ID INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE N2(ID INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE REL TABLE Rel1(FROM N1 TO N2, ONE_ONE);
---- ok
-STATEMENT CREATE (:N1 {ID: 10}), (:N1 {ID: 1}), (:N2 {ID: 12}), (:N2 {ID: 8})
---- ok
-STATEMENT BEGIN TRANSACTION
---- ok
-STATEMENT MATCH (n1:N1), (n2:N2) WHERE n1.ID=10 AND n2.ID=12 CREATE (n1)-[r:Rel1]->(n2)
---- ok
-STATEMENT MATCH (n:N1)-[r:Rel1]->(m:N2) RETURN n.ID, m.ID
---- 1
10|12
-STATEMENT COMMIT
---- ok
-STATEMENT MATCH (n:N1)-[r:Rel1]->(m:N2) RETURN n.ID, m.ID
---- 1
10|12

-CASE CreateAndScanManyToManyRel
-TEST_FWD_ONLY_REL
-STATEMENT CREATE NODE TABLE N1(ID INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE N2(ID INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE REL TABLE Rel1(FROM N1 TO N2, MANY_MANY);
---- ok
-STATEMENT CREATE (:N1 {ID: 10}), (:N1 {ID: 1}), (:N2 {ID: 12}), (:N2 {ID: 8})
---- ok
-STATEMENT MATCH (n:N1) RETURN n.ID
---- 2
10
1
-STATEMENT MATCH (n:N2) RETURN n.ID
---- 2
12
8
-STATEMENT BEGIN TRANSACTION
---- ok
-STATEMENT MATCH (n1:N1), (n2:N2) WHERE n1.ID=10 AND n2.ID=12 CREATE (n1)-[r:Rel1]->(n2)
---- ok
-STATEMENT MATCH (n:N1)-[r:Rel1]->(m:N2) RETURN n.ID, m.ID
---- 1
10|12
-STATEMENT COMMIT
---- ok
-STATEMENT MATCH (n:N1)-[r:Rel1]->(m:N2) RETURN n.ID, m.ID
---- 1
10|12

-CASE DeleteNewlyCreatedRel
-TEST_FWD_ONLY_REL
-STATEMENT CREATE NODE TABLE N1(ID INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE NODE TABLE N2(ID INT64, PRIMARY KEY(ID));
---- ok
-STATEMENT CREATE REL TABLE Rel1(FROM N1 TO N2, MANY_MANY);
---- ok
-STATEMENT CREATE (:N1 {ID: 10}), (:N1 {ID: 1}), (:N2 {ID: 12}), (:N2 {ID: 8})
---- ok
-STATEMENT BEGIN TRANSACTION
---- ok
-STATEMENT MATCH (n1:N1), (n2:N2) WHERE n1.ID=10 AND n2.ID=12 CREATE (n1)-[r:Rel1]->(n2)
---- ok
-STATEMENT MATCH (n1:N1)-[r:Rel1]->(n2:N2) WHERE n1.ID=10 AND n2.ID=12 RETURN r
---- 1
(0:0)-{_LABEL: Rel1, _ID: 2:4611686018427387904}->(1:0)
-STATEMENT MATCH (n1:N1)-[r:Rel1]->(n2:N2) WHERE n1.ID=10 AND n2.ID=12 DELETE r
---- ok
-STATEMENT MATCH (n:N1)-[r:Rel1]->(m:N2) RETURN n.ID, m.ID
---- 0
-STATEMENT COMMIT
---- ok
-STATEMENT MATCH (n:N1)-[r:Rel1]->(m:N2) RETURN n.ID, m.ID
---- 0

-CASE ResizeAndDistribute
-TEST_FWD_ONLY_REL
-STATEMENT CREATE NODE TABLE Person(id INT64, age INT64, PRIMARY KEY(id));
---- ok
-STATEMENT CREATE (:Person {id: 0, age: 20});
---- ok
-STATEMENT CREATE (:Person {id: 1, age: 21});
---- ok
-STATEMENT CREATE (:Person {id: 2, age: 22});
---- ok
-STATEMENT CREATE (:Person {id: 3, age: 23});
---- ok
-STATEMENT CREATE (:Person {id: 4, age: 24});
---- ok
-STATEMENT CREATE (:Person {id: 5, age: 25});
---- ok
-STATEMENT CREATE REL TABLE knows(FROM Person TO Person, age INT64);
---- ok
-STATEMENT MATCH (a:Person), (b:Person) WHERE a.id=0 AND b.id=1 CREATE (a)-[:knows {age: 100}]->(b);
---- ok
-STATEMENT MATCH (a:Person)-[e:knows]->(b:Person) RETURN a.id, b.id, e.age;
---- 1
0|1|100
-STATEMENT MATCH (a:Person), (b:Person) WHERE a.id=0 AND b.id=2 CREATE (a)-[:knows {age: 101}]->(b);
---- ok
-STATEMENT MATCH (a:Person)-[e:knows]->(b:Person) RETURN a.id, b.id, e.age;
---- 2
0|1|100
0|2|101
-STATEMENT MATCH (a:Person), (b:Person) WHERE a.id=0 AND b.id=3 CREATE (a)-[:knows {age: 102}]->(b);
---- ok
-STATEMENT MATCH (a:Person), (b:Person) WHERE a.id=1 AND b.id=2 CREATE (a)-[:knows {age: 102}]->(b);
---- ok
-STATEMENT MATCH (a:Person)-[e:knows]->(b:Person) RETURN a.id, b.id, e.age;
---- 4
0|1|100
0|2|101
0|3|102
1|2|102
-STATEMENT MATCH (a:Person), (b:Person) WHERE a.id=4 AND b.id=0 CREATE (a)-[:knows {age: 102}]->(b);
---- ok
-STATEMENT BEGIN TRANSACTION
---- ok
-STATEMENT MATCH (a:Person), (b:Person) WHERE a.id=1 AND b.id=0 CREATE (a)-[:knows {age: 102}]->(b);
---- ok
-STATEMENT MATCH (a:Person), (b:Person) WHERE a.id=2 AND b.id=0 CREATE (a)-[:knows {age: 102}]->(b);
---- ok
-STATEMENT COMMIT
---- ok
-STATEMENT MATCH (a:Person)-[e:knows]->(b:Person) RETURN a.id, b.id, e.age;
---- 7
0|1|100
0|2|101
0|3|102
1|2|102
1|0|102
2|0|102
4|0|102

-CASE ScanUnCommittedRel
-TEST_FWD_ONLY_REL
-STATEMENT create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
---- ok
-STATEMENT create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
---- ok
-STATEMENT create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
---- ok
-STATEMENT COPY person FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson.csv";
---- ok
-STATEMENT COPY person FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vPerson2.csv";
---- ok
-STATEMENT COPY organisation FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/vOrganisation.csv";
---- ok
-STATEMENT COPY studyAt FROM "${KUZU_ROOT_DIRECTORY}/dataset/tinysnb/eStudyAt.csv";
---- ok
-STATEMENT BEGIN TRANSACTION;
---- ok
-STATEMENT MATCH (p:person), (o:organisation) WHERE p.ID = 5 AND o.ID = 6 CREATE (p)-[:studyAt {year: 2000, places: [], length: 4, level: 4, code: 9223372036854775807, temperature: 32799, ulength: 33767, ulevel: 249, hugedata: 1844674407370955161811111110}]->(o);
---- ok
-STATEMENT MATCH (p:person)-[s:studyAt]->(o:organisation) RETURN s ORDER BY s.year DESC;
---- 4
(0:0)-{_LABEL: studyAt, _ID: 2:0, year: 2021, places: [wwAewsdndweusd,wek], length: 5, level: 5, code: 9223372036854775808, temperature: 32800, ulength: 33768, ulevel: 250, hugedata: 1844674407370955161811111111}->(1:0)
(0:1)-{_LABEL: studyAt, _ID: 2:1, year: 2020, places: [anew,jsdnwusklklklwewsd], length: 55, level: 120, code: 6689, temperature: 1, ulength: 90, ulevel: 220, hugedata: -1844674407370955161511}->(1:0)
(0:3)-{_LABEL: studyAt, _ID: 2:4611686018427387904, year: 2000, places: [], length: 4, level: 4, code: 9223372036854775807, temperature: 32799, ulength: 33767, ulevel: 249, hugedata: 1844674407370955161811111110}->(1:2)
(0:5)-{_LABEL: studyAt, _ID: 2:2, year: 2020, places: [awndsnjwejwen,isuhuwennjnuhuhuwewe], length: 22, level: 2, code: 23, temperature: 20, ulength: 180, ulevel: 12, hugedata: -15}->(1:0)

-CASE issue3906
-STATEMENT CREATE NODE TABLE L1 (k5 BOOLEAN, k6 STRING, k7 BOOLEAN, k8 INT64, k9 INT64, id INT64, PRIMARY KEY (id));
---- ok
-STATEMENT CREATE NODE TABLE L2 (k10 STRING, k11 BOOLEAN, k12 STRING, k13 STRING, k14 BOOLEAN, k15 INT64, id INT64, PRIMARY KEY (id));
---- ok
-STATEMENT CREATE NODE TABLE L3 (k16 INT64, k17 BOOLEAN, k18 BOOLEAN, k19 BOOLEAN, k20 INT64, id INT64, PRIMARY KEY (id));
---- ok
-STATEMENT CREATE REL TABLE T3 (FROM L3 TO L1, k68 INT64, k69 INT64, k70 STRING, k71 BOOLEAN, k72 STRING, k73 INT64, k74 BOOLEAN, id INT64);
---- ok
-STATEMENT CREATE REL TABLE T4 (FROM L1 TO L2, k75 BOOLEAN, k76 INT64, k77 STRING, k78 INT64, k79 INT64, k80 INT64, k81 INT64, id INT64);
---- ok
-STATEMENT CREATE (n0 :L3{k17 : false, k16 : 8993382861735600205, k19 : true, k18 : true, k20 : 627801758695764003, id : 1});
---- ok
-STATEMENT CREATE (n0 :L1{k5 : true, k6 : "0sE0v", id : 3, k7 : true, k8 : 4583869781704786832, k9 : -2450552654359393402});
---- ok
-STATEMENT CREATE (n0 :L3{k17 : true, k16 : -6767407109008028552, k19 : true, k18 : true, k20 : 3222522150000917167, id : 7});
---- ok
-STATEMENT CREATE (n0 :L2{k11 : true, k10 : "hxS0uD", id : 8, k13 : "GW6VMHfM", k12 : "hSWWBpac0", k15 : -8129440654474488646, k14 : true});
---- ok
-STATEMENT MATCH (n0 {id : 3}), (n1 {id : 8}) CREATE(n0)-[r :T4{k80 : 1623934273299180333, k81 : 2691253309671402116, k75 : false, k77 : "OdcmX8O", k76 : 8922449714764930060, id : 12, k79 : 2358311490140127332, k78 : -8031617625991434006}]->(n1);
---- ok
-STATEMENT MATCH (n0 {id : 7}), (n1 {id : 3}) CREATE(n0)-[r :T3{k71 : false, k70 : "5vgOI", k72 : "yfz47n32", k74 : false, id : 14, k68 : 5436079733038307420, k69 : 7879073479750221767}]->(n1);
---- ok
-STATEMENT MATCH (n0)<-[r4]-(n1)-[r5]-(n2), (n3 :L3)-[r6]->(n4)-[r7]-(n5) RETURN DISTINCT r7.k80 , n0.id
---- 4
|3
|8
1623934273299180333|8
1623934273299180333|3
-STATEMENT MATCH (n0)<-[r4]-(n1)-[r5]-(n2), (n3 :L3)-[r6]->(n4)-[r7]-(n5) RETURN DISTINCT r7.k80 > n0.id
---- 2

True
