name: Multiplatform Build & Test

on:
  workflow_dispatch:
  schedule:
    - cron: "0 8 * * *"

jobs:
  ubuntu-2004-build-test:
    name: ubuntu-20.04
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    env:
      CC: gcc-11
      CXX: g++-11
    steps:
      - uses: actions/checkout@v3

      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential manpages-dev software-properties-common
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y gcc-11 g++-11

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Ensure Python dependencies
        run: |
          pip install torch~=2.0.0 --extra-index-url https://download.pytorch.org/whl/cpu
          pip install --user -r tools/python_api/requirements_dev.txt -f https://data.pyg.org/whl/torch-2.0.0+cpu.html

      - name: Ensure Node.js dependencies
        working-directory: tools/nodejs_api
        run: npm install --include=dev

      - name: Build
        run: |
          make release NUM_THREADS=$(nproc)
          echo "Build,$?" > status.txt

      - name: Test
        continue-on-error: true
        run: |
          make test NUM_THREADS=$(nproc)
          echo "Test,$?" >> status.txt

      - name: C and C++ examples
        continue-on-error: true
        run: |
          make example NUM_THREADS=$(nproc)
          echo "C and C++ examples,$?" >> status.txt

      - name: Python test
        continue-on-error: true
        run: |
          make pytest NUM_THREADS=$(nproc)
          echo "Python test,$?" >> status.txt

      - name: Node.js test
        continue-on-error: true
        run: |
          make nodejstest NUM_THREADS=$(nproc)
          echo "Node.js test,$?" >> status.txt

      - name: Java test
        continue-on-error: true
        run: |
          make javatest NUM_THREADS=$(nproc)
          echo "Java test,$?" >> status.txt

      - name: Rust share build
        run: echo $'[workspace]\nmembers = ["tools/rust_api","examples/rust"]' > Cargo.toml

      - name: Rust set env
        run: echo "CARGO_BUILD_JOBS=$(nproc)" >> $GITHUB_ENV

      - name: Rust test
        continue-on-error: true
        working-directory: tools/rust_api
        run: |
          cargo test --release --features arrow -- --test-threads=1
          echo "Rust test,$?" >> ../../status.txt

      - name: Rust example
        continue-on-error: true
        working-directory: examples/rust
        run: |
          cargo build --release --features arrow
          echo "Rust example,$?" >> ../../status.txt

      - name: Rename status.txt
        run: mv status.txt ubuntu-20.04.csv

      - uses: actions/upload-artifact@v4
        with:
          name: ubuntu-20.04
          path: ubuntu-20.04.csv

  macos-build-test:
    strategy:
      matrix:
        runner: [macos-13, macos-14]
      fail-fast: false
    name: ${{ matrix.runner }}
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - run: |
          echo ${{ matrix.runner }}

      - name: Ensure Python dependencies
        run: |
          pip install torch~=2.0.0 --extra-index-url https://download.pytorch.org/whl/cpu
          pip install --user -r tools/python_api/requirements_dev.txt -f https://data.pyg.org/whl/torch-2.0.0+cpu.html

      - name: Ensure Node.js dependencies
        working-directory: tools/nodejs_api
        run: npm install --include=dev

      - name: Build
        run: |
          make release NUM_THREADS=$(sysctl -n hw.physicalcpu)
          echo "Build,$?" > status.txt

      - name: Test
        continue-on-error: true
        run: |
          make test NUM_THREADS=$(sysctl -n hw.physicalcpu)
          echo "Test,$?" >> status.txt

      - name: C and C++ examples
        continue-on-error: true
        run: |
          make example NUM_THREADS=$(sysctl -n hw.physicalcpu)
          echo "C and C++ examples,$?" >> status.txt

      - name: Python test
        continue-on-error: true
        run: |
          make pytest NUM_THREADS=$(sysctl -n hw.physicalcpu)
          echo "Python test,$?" >> status.txt

      - name: Node.js test
        continue-on-error: true
        run: |
          make nodejstest NUM_THREADS=$(sysctl -n hw.physicalcpu)
          echo "Node.js test,$?" >> status.txt

      - name: Java test
        continue-on-error: true
        run: |
          make javatest NUM_THREADS=$(sysctl -n hw.physicalcpu)
          echo "Java test,$?" >> status.txt

      - name: Rust share build
        run: echo $'[workspace]\nmembers = ["tools/rust_api","examples/rust"]' > Cargo.toml

      - name: Rust set env
        run: echo "CARGO_BUILD_JOBS=$(sysctl -n hw.physicalcpu)" >> $GITHUB_ENV

      - name: Rust test
        continue-on-error: true
        working-directory: tools/rust_api
        run: |
          cargo test --release --features arrow -- --test-threads=1
          echo "Rust test,$?" >> ../../status.txt

      - name: Rust example
        continue-on-error: true
        working-directory: examples/rust
        run: |
          cargo build --release --features arrow
          echo "Rust example,$?" >> ../../status.txt

      - name: Rename status.txt
        run: mv status.txt ${{ matrix.runner }}.csv

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runner }}
          path: ${{ matrix.runner }}.csv

  windows-build-test:
    strategy:
      matrix:
        runner: [windows-2019, windows-2022]
      fail-fast: false
    name: ${{ matrix.runner }}
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Disable Windows Defender
        shell: powershell
        run: |
          Set-MpPreference -DisableRealtimeMonitoring $true
          Set-MpPreference -DisableBehaviorMonitoring $true
          Set-MpPreference -DisableBlockAtFirstSeen $true
          Set-MpPreference -DisableIOAVProtection $true
          Set-MpPreference -DisablePrivacyMode $true
          Set-MpPreference -SignatureDisableUpdateOnStartupWithoutEngine $true
          Set-MpPreference -DisableArchiveScanning $true
          Set-MpPreference -DisableIntrusionPreventionSystem $true
          Set-MpPreference -DisableScriptScanning $true
          Set-MpPreference -SubmitSamplesConsent NeverSend

      - uses: actions/checkout@v3

      - uses: ilammy/msvc-dev-cmd@v1

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Ensure Python dependencies
        shell: cmd
        run: |
          pip install torch~=2.0.0 --extra-index-url https://download.pytorch.org/whl/cpu
          pip install --user -r tools\python_api\requirements_dev.txt -f https://data.pyg.org/whl/torch-2.0.0+cpu.html

      - name: Ensure Node.js dependencies
        shell: cmd
        working-directory: .\tools\nodejs_api
        run: npm install --include=dev

      - name: Build
        shell: cmd
        run: |
          make release NUM_THREADS=%NUMBER_OF_PROCESSORS%
          echo Build,%ERRORLEVEL% > status.txt

      - name: Test
        shell: cmd
        continue-on-error: true
        run: |
          make test NUM_THREADS=%NUMBER_OF_PROCESSORS%
          echo Test,%ERRORLEVEL% >> status.txt

      - name: C and C++ examples
        shell: cmd
        continue-on-error: true
        run: |
          make example NUM_THREADS=%NUMBER_OF_PROCESSORS%
          echo C and C++ examples,%ERRORLEVEL% >> status.txt

      - name: Python test
        shell: cmd
        continue-on-error: true
        run: |
          make pytest NUM_THREADS=%NUMBER_OF_PROCESSORS%
          echo Python test,%ERRORLEVEL% >> status.txt

      - name: Node.js test
        shell: cmd
        continue-on-error: true
        run: |
          make nodejstest NUM_THREADS=%NUMBER_OF_PROCESSORS%
          echo Node.js test,%ERRORLEVEL% >> status.txt

      - name: Java test
        shell: cmd
        continue-on-error: true
        run: |
          make javatest NUM_THREADS=%NUMBER_OF_PROCESSORS%
          echo Java test,%ERRORLEVEL% >> status.txt

      - name: Rust share build
        shell: cmd
        run: (echo [workspace]& echo members = ["tools/rust_api","examples/rust"]) > Cargo.toml

      - name: Rust test
        shell: cmd
        continue-on-error: true
        run: |
          make clean
          set OPENSSL_DIR=C:\Program Files\OpenSSL-Win64
          set CXXFLAGS=/std:c++20
          set CARGO_BUILD_JOBS=%NUMBER_OF_PROCESSORS%
          cargo test --release --features arrow -- --test-threads=1
          echo Rust test,%ERRORLEVEL% >> status.txt

      - name: Rust example
        shell: cmd
        continue-on-error: true
        run: |
          set CARGO_BUILD_JOBS=%NUMBER_OF_PROCESSORS%
          cargo build --release --features arrow
          echo Rust example,%ERRORLEVEL% >> status.txt

      - name: Rename status.txt
        shell: cmd
        run: |
          rename status.txt ${{ matrix.runner }}.csv

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runner }}
          path: ${{ matrix.runner }}.csv

  debian-ubuntu-build-test:
    strategy:
      matrix:
        image: ["ubuntu:23.04", "ubuntu:23.10", "debian:12", "debian:sid"]
      fail-fast: false
    name: ${{ matrix.image }}
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
    env:
      CC: gcc
      CXX: g++
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
    steps:
      - name: Install packages
        run: |
          apt-get update
          apt-get install -y ca-certificates curl gnupg
          mkdir -p /etc/apt/keyrings
          curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
          echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list
          apt-get update
          apt-get install -y git build-essential cmake gcc g++ python3 python3-dev python3-pip openjdk-17-jdk nodejs

      - uses: actions/checkout@v3

      - name: Ensure Python dependencies
        run: |
          pip install torch~=2.0.0 --extra-index-url https://download.pytorch.org/whl/cpu ${{ matrix.image != 'debian:11' && '--break-system-packages' || '' }}
          pip install --user -r tools/python_api/requirements_dev.txt -f https://data.pyg.org/whl/torch-2.0.0+cpu.html ${{ matrix.image != 'debian:11' && '--break-system-packages' || '' }}

      - name: Ensure Node.js dependencies
        working-directory: tools/nodejs_api
        run: npm install --include=dev

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-update-default-toolchain
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          $HOME/.cargo/bin/rustup toolchain install 1.76

      - name: Build
        run: |
          make release NUM_THREADS=$(nproc)
          echo "Build,$?" > status.txt

      - name: Test
        continue-on-error: true
        run: |
          make test NUM_THREADS=$(nproc)
          echo "Test,$?" >> status.txt

      - name: C and C++ examples
        continue-on-error: true
        run: |
          make example NUM_THREADS=$(nproc)
          echo "C and C++ examples,$?" >> status.txt

      - name: Python test
        continue-on-error: true
        run: |
          make pytest NUM_THREADS=$(nproc)
          echo "Python test,$?" >> status.txt

      - name: Node.js test
        continue-on-error: true
        run: |
          make nodejstest NUM_THREADS=$(nproc)
          echo "Node.js test,$?" >> status.txt

      - name: Java test
        continue-on-error: true
        run: |
          make javatest NUM_THREADS=$(nproc)
          echo "Java test,$?" >> status.txt

      - name: Rust share build
        run: echo '[workspace]\nmembers = ["tools/rust_api","examples/rust"]' > Cargo.toml

      - name: Rust set env
        run: echo "CARGO_BUILD_JOBS=$(nproc)" >> $GITHUB_ENV

      - name: Rust test
        continue-on-error: true
        working-directory: tools/rust_api
        run: |
          cargo test --release --features arrow -- --test-threads=1
          echo "Rust test,$?" >> ../../status.txt

      - name: Rust example
        continue-on-error: true
        working-directory: examples/rust
        run: |
          cargo build --release --features arrow
          echo "Rust example,$?" >> ../../status.txt

      - name: Rename status.txt
        run: |
          PLATFORM=$(echo ${{ matrix.image }} | tr -d ':')
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
          mv status.txt $PLATFORM.csv

      - uses: actions/upload-artifact@v4
        with:
          name: ${{env.PLATFORM}}
          path: ${{env.PLATFORM}}.csv

  rhel-fedora-build-test:
    strategy:
      matrix:
        image: ["rockylinux:8", "rockylinux:9", "fedora:38"]
      fail-fast: false
    name: ${{ matrix.image }}
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
    env:
      CC: gcc
      CXX: g++
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk
      HOME: /root
    steps:
      - name: Enable EPEL
        if: ${{ matrix.image == 'rockylinux:8' || matrix.image ==  'rockylinux:9' }}
        run: |
          dnf update -y
          dnf install -y epel-release
          dnf update -y

      - name: Enable SHA-1 on Rocky Linux 9
        if: matrix.image == 'rockylinux:9'
        run: update-crypto-policies --set LEGACY

      - name: Install packages
        run: |
          curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
          dnf install -y git cmake ${{ matrix.image == 'rockylinux:8' && 'gcc-toolset-12 python3.11 python3.11-devel' || 'gcc gcc-c++ python3-devel' }} java-17-openjdk-devel nodejs

      - name: Enable gcc-toolset-12 and python3.11 on Rocky Linux 8
        if: matrix.image == 'rockylinux:8'
        run: |
          alternatives --set python /usr/bin/python3.11
          alternatives --set python3 /usr/bin/python3.11
          echo "PYTHON_EXECUTABLE=/usr/bin/python3.11" >> $GITHUB_ENV
          echo "PYBIND11_PYTHON_VERSION=3.11" >> $GITHUB_ENV
          source /opt/rh/gcc-toolset-12/enable
          echo $PATH >> $GITHUB_PATH

      - uses: actions/checkout@v3

      - name: Ensure Python dependencies
        run: |
          python3 -m venv /opt/venv
          source /opt/venv/bin/activate
          pip3 install torch~=2.0.0 --extra-index-url https://download.pytorch.org/whl/cpu
          pip3 install -r tools/python_api/requirements_dev.txt -f https://data.pyg.org/whl/torch-2.0.0+cpu.html

      - name: Ensure Node.js dependencies
        working-directory: tools/nodejs_api
        run: npm install --include=dev

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-update-default-toolchain
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          $HOME/.cargo/bin/rustup toolchain install 1.76

      - name: Build
        run: |
          make release NUM_THREADS=$(nproc)
          echo "Build,$?" > status.txt

      - name: Test
        run: |
          make test NUM_THREADS=$(nproc)
          echo "Test,$?" >> status.txt

      - name: C and C++ examples
        run: |
          make example NUM_THREADS=$(nproc)
          echo "C and C++ examples,$?" >> status.txt

      - name: Python test
        run: |
          source /opt/venv/bin/activate
          make pytest NUM_THREADS=$(nproc)
          echo "Python test,$?" >> status.txt

      - name: Node.js test
        run: |
          make nodejstest NUM_THREADS=$(nproc)
          echo "Node.js test,$?" >> status.txt

      - name: Java test
        run: |
          make javatest NUM_THREADS=$(nproc)
          echo "Java test,$?" >> status.txt

      - name: Rust share build
        run: echo $'[workspace]\nmembers = ["tools/rust_api","examples/rust"]' > Cargo.toml

      - name: Rust set env
        run: echo "CARGO_BUILD_JOBS=$(nproc)" >> $GITHUB_ENV

      - name: Rust test
        working-directory: tools/rust_api
        run: |
          cargo test --release --features arrow -- --test-threads=1
          echo "Rust test,$?" >> ../../status.txt

      - name: Rust example
        working-directory: examples/rust
        run: |
          cargo build --release --features arrow
          echo "Rust example,$?" >> ../../status.txt

      - name: Rename status.txt
        run: |
          PLATFORM=$(echo ${{ matrix.image }} | tr -d ':')
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
          mv status.txt $PLATFORM.csv

      - uses: actions/upload-artifact@v4
        with:
          name: ${{env.PLATFORM}}
          path: ${{env.PLATFORM}}.csv

  centos-7-build-test:
    name: centos-7
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux2014_x86_64
    env:
      CC: gcc
      CXX: g++
      PYBIND11_PYTHON_VERSION: 3.10
      PYTHON_EXECUTABLE: /usr/local/bin/python3.10
      JAVA_HOME: /usr/lib/jvm/java-11-openjdk
    steps:
      - name: Install packages
        run: |
          yum update -y
          yum install -y npm java-11-openjdk-devel devtoolset-11

      - name: Enable gcc-toolset-11
        run: |
          source /opt/rh/devtoolset-11/enable
          echo $PATH >> $GITHUB_PATH

      - uses: actions/checkout@v3

      - name: Ensure Python dependencies
        run: |
          ln -s /usr/local/bin/python3.10 /usr/bin/python3
          python3 -m pip install torch~=2.0.0 --extra-index-url https://download.pytorch.org/whl/cpu
          python3 -m pip install --user -r tools/python_api/requirements_dev.txt -f https://data.pyg.org/whl/torch-2.0.0+cpu.html

      - name: Ensure Node.js dependencies
        working-directory: tools/nodejs_api
        run: npm install --include=dev

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-update-default-toolchain
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          $HOME/.cargo/bin/rustup toolchain install 1.76

      - name: Build
        run: |
          make release NUM_THREADS=$(nproc)
          echo "Build,$?" > status.txt

      - name: Test
        continue-on-error: true
        run: |
          make test NUM_THREADS=$(nproc)
          echo "Test,$?" >> status.txt

      - name: C and C++ examples
        continue-on-error: true
        run: |
          make example NUM_THREADS=$(nproc)
          echo "C and C++ examples,$?" >> status.txt

      - name: Python test
        continue-on-error: true
        run: |
          make pytest NUM_THREADS=$(nproc)
          echo "Python test,$?" >> status.txt

      - name: Node.js test
        continue-on-error: true
        run: |
          make nodejstest NUM_THREADS=$(nproc)
          echo "Node.js test,$?" >> status.txt

      - name: Java test
        continue-on-error: true
        run: |
          make javatest NUM_THREADS=$(nproc)
          echo "Java test,$?" >> status.txt

      - name: Rust share build
        run: echo $'[workspace]\nmembers = ["tools/rust_api","examples/rust"]' > Cargo.toml

      - name: Rust set env
        run: echo "CARGO_BUILD_JOBS=$(nproc)" >> $GITHUB_ENV

      - name: Rust test
        continue-on-error: true
        working-directory: tools/rust_api
        run: |
          cargo test --release --features arrow -- --test-threads=1
          echo "Rust test,$?" >> ../status.txt

      - name: Rust example
        continue-on-error: true
        working-directory: examples/rust
        run: |
          cargo build --release --features arrow
          echo "Rust example,$?" >> ../status.txt

      - name: Rename status.txt
        run: mv status.txt centos-7.csv

      - uses: actions/upload-artifact@v4
        with:
          name: centos-7
          path: centos-7.csv

  archlinux-build-test:
    name: archlinux
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    env:
      CC: gcc
      CXX: g++
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk
    steps:
      - name: Install packages
        run: |
          pacman -Syu --noconfirm
          pacman -S --needed --noconfirm git base-devel cmake gcc python python-pip npm jdk17-openjdk

      - uses: actions/checkout@v3

      - name: Ensure Python dependencies
        run: |
          pip install torch~=2.0.0 --extra-index-url https://download.pytorch.org/whl/cpu --break-system-packages
          pip install --user -r tools/python_api/requirements_dev.txt -f https://data.pyg.org/whl/torch-2.0.0+cpu.html --break-system-packages

      - name: Ensure Node.js dependencies
        working-directory: tools/nodejs_api
        run: npm install --include=dev

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-update-default-toolchain
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          $HOME/.cargo/bin/rustup toolchain install 1.76

      - name: Build
        run: |
          make release NUM_THREADS=$(nproc)
          echo "Build,$?" > status.txt

      - name: Test
        continue-on-error: true
        run: |
          make test NUM_THREADS=$(nproc)
          echo "Test,$?" >> status.txt

      - name: C and C++ examples
        continue-on-error: true
        run: |
          make example NUM_THREADS=$(nproc)
          echo "C and C++ examples,$?" >> status.txt

      - name: Python test
        continue-on-error: true
        run: |
          make pytest NUM_THREADS=$(nproc)
          echo "Python test,$?" >> status.txt

      - name: Node.js test
        continue-on-error: true
        run: |
          make nodejstest NUM_THREADS=$(nproc)
          echo "Node.js test,$?" >> status.txt

      - name: Java test
        continue-on-error: true
        run: |
          make javatest NUM_THREADS=$(nproc)
          echo "Java test,$?" >> status.txt

      - name: Rust share build
        run: echo $'[workspace]\nmembers = ["tools/rust_api","examples/rust"]' > Cargo.toml

      - name: Rust set env
        run: echo "CARGO_BUILD_JOBS=$(nproc)" >> $GITHUB_ENV

      - name: Rust test
        continue-on-error: true
        working-directory: tools/rust_api
        run: |
          cargo test --release --features arrow -- --test-threads=1
          echo "Rust test,$?" >> ../../status.txt

      - name: Rust example
        continue-on-error: true
        working-directory: examples/rust
        run: |
          cargo build --release --features arrow
          echo "Rust example,$?" >> ../../status.txt

      - name: Rename status.txt
        run: |
          PLATFORM=$(echo ${{ matrix.image }} | tr -d ':')
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
          mv status.txt $PLATFORM.csv

      - uses: actions/upload-artifact@v4
        with:
          name: ${{env.PLATFORM}}
          path: ${{env.PLATFORM}}.csv
