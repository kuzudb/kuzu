[2025-05-26 15:39:37.041] [info] Starting runner in Rewrite Mode
[==========] Running 2 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 2 tests from function~list
[ RUN      ] function~list.ListHasAllTest
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/schema.cypher
Starting to execute query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Executed query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Starting to execute query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Executed query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Starting to execute query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Executed query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Starting to execute query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Executed query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Starting to execute query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Executed query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Starting to execute query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Executed query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Starting to execute query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Executed query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Starting to execute query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
Executed query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/copy.cypher
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Starting to execute query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Executed query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Starting to execute query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Executed query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Starting to execute query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Executed query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Starting to execute query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Executed query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Starting to execute query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Executed query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Starting to execute query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
Executed query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
[2025-05-26 15:39:38.373] [info] DEBUG LOG: 
[2025-05-26 15:39:38.373] [info] QUERY: RETURN list_has_all([4, 5, 6], [4, 6])
[2025-05-26 15:39:38.412] [info] DEBUG LOG: 
[2025-05-26 15:39:38.412] [info] QUERY: RETURN list_has_all([4, 5, 6], [6, 4])
[2025-05-26 15:39:38.413] [info] DEBUG LOG: 
[2025-05-26 15:39:38.413] [info] QUERY: RETURN list_has_all([4, 5, 6], [4])
[2025-05-26 15:39:38.414] [info] DEBUG LOG: 
[2025-05-26 15:39:38.414] [info] QUERY: RETURN list_has_all([4, 5, 6], [4,5,6])
[2025-05-26 15:39:38.416] [info] DEBUG LOG: 
[2025-05-26 15:39:38.417] [info] QUERY: RETURN list_has_all([TRUE, FALSE, FALSE], [FALSE, TRUE])
[2025-05-26 15:39:38.421] [info] DEBUG LOG: 
[2025-05-26 15:39:38.421] [info] QUERY: RETURN list_has_all([[2,3], [1,2], [5,4]], [[5,4]])
[2025-05-26 15:39:38.438] [info] DEBUG LOG: 
[2025-05-26 15:39:38.438] [info] QUERY: RETURN list_has_all([[2,3], [1,2], [5,4]], [[1,3]])
[2025-05-26 15:39:38.439] [info] DEBUG LOG: 
[2025-05-26 15:39:38.439] [info] QUERY: RETURN list_has_all([{a: 5, b:3}, {c: 2, d: 4}], [{c:2, d:4}])
[2025-05-26 15:39:38.468] [info] DEBUG LOG: 
[2025-05-26 15:39:38.468] [info] QUERY: RETURN list_has_all([{a: 5, b:3}, {c: 2, d: 4}], [{c:2, e:4}])
[2025-05-26 15:39:38.469] [info] DEBUG LOG: 
[2025-05-26 15:39:38.469] [info] QUERY: RETURN list_has_all([5,6,12], [null])
[2025-05-26 15:39:38.471] [info] DEBUG LOG: 
[2025-05-26 15:39:38.471] [info] QUERY: RETURN list_has_all([null], [null])
[2025-05-26 15:39:38.472] [info] DEBUG LOG: 
[2025-05-26 15:39:38.472] [info] QUERY: RETURN list_has_all([], [null])
[2025-05-26 15:39:38.473] [info] DEBUG LOG: 
[2025-05-26 15:39:38.473] [info] QUERY: RETURN list_has_all([], [])
[2025-05-26 15:39:38.474] [info] DEBUG LOG: 
[2025-05-26 15:39:38.474] [info] QUERY: RETURN list_has_all([null], [])
[2025-05-26 15:39:38.474] [info] DEBUG LOG: 
[2025-05-26 15:39:38.474] [info] QUERY: RETURN list_has_all(null, [1,3,2])
[2025-05-26 15:39:38.475] [info] DEBUG LOG: 
[2025-05-26 15:39:38.475] [info] QUERY: RETURN list_has_all([1,2], null)
[2025-05-26 15:39:38.476] [info] DEBUG LOG: 
[2025-05-26 15:39:38.476] [info] QUERY: RETURN list_has_all(null, null)
[2025-05-26 15:39:38.476] [info] DEBUG LOG: 
[2025-05-26 15:39:38.476] [info] QUERY: RETURN LIST_CAT(['7', '3'], [])
[2025-05-26 15:39:38.478] [info] DEBUG LOG: 
[2025-05-26 15:39:38.478] [info] QUERY: RETURN LIST_CAT([], ['3', '10'])
[2025-05-26 15:39:38.480] [info] DEBUG LOG: 
[2025-05-26 15:39:38.480] [info] QUERY: RETURN LIST_CAT([], [])
[2025-05-26 15:39:38.480] [info] DEBUG LOG: 
[2025-05-26 15:39:38.480] [info] QUERY: RETURN LIST_CAT(['7', '3'], null)
[2025-05-26 15:39:38.480] [info] DEBUG LOG: 
[2025-05-26 15:39:38.480] [info] QUERY: RETURN LIST_CAT(null, ['3', '10'])
[2025-05-26 15:39:38.481] [info] DEBUG LOG: 
[2025-05-26 15:39:38.481] [info] QUERY: RETURN LIST_CAT(null, null)
[       OK ] function~list.ListHasAllTest (1301 ms)
[ RUN      ] function~list.FunctionList
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/schema.cypher
Starting to execute query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Executed query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Starting to execute query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Executed query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Starting to execute query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Executed query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Starting to execute query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Executed query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Starting to execute query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Executed query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Starting to execute query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Executed query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Starting to execute query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Executed query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Starting to execute query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
Executed query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/copy.cypher
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Starting to execute query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Executed query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Starting to execute query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Executed query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Starting to execute query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Executed query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Starting to execute query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Executed query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Starting to execute query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Executed query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Starting to execute query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
Executed query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
[2025-05-26 15:39:39.656] [info] DEBUG LOG: ListReverse
[2025-05-26 15:39:39.656] [info] QUERY: RETURN list_reverse([1,2,3]),            list_reverse(cast([1,2,3], 'INT32[]')),             list_reverse(cast([1,2,3], 'INT16[]')),             list_reverse(cast([1,2,3], 'INT8[]')),             list_reverse(cast([1,2,3], 'INT128[]')),             list_reverse(cast([1,2,3], 'UINT64[]')),             list_reverse(cast([1,2,3], 'UINT32[]')),             list_reverse(cast([1,2,3], 'UINT16[]')),             list_reverse(cast([1,2,3], 'UINT8[]')),             list_reverse(cast([1.1,2.1,3.1], 'FLOAT[]')),             list_reverse(cast([1.1,2.1,3.1], 'DOUBLE[]')),             list_reverse(cast([date('2020-01-01'), date('2020-01-02'), date('2020-01-03')], 'DATE[]')),             list_reverse(cast([timestamp('2020-01-01 00:00:00'), timestamp('2020-01-02 00:00:00'), timestamp('2020-01-03 00:00:00')], 'TIMESTAMP[]')),             list_reverse(cast([timestamp('2020-01-01 00:00:00'), timestamp('2020-01-02 00:00:00'), timestamp('2020-01-03 00:00:00')], 'TIMESTAMP_NS[]')),             list_reverse(cast([timestamp('2020-01-01 00:00:00'), timestamp('2020-01-02 00:00:00'), timestamp('2020-01-03 00:00:00')], 'TIMESTAMP_MS[]')),             list_reverse(cast([timestamp('2020-01-01 00:00:00'), timestamp('2020-01-02 00:00:00'), timestamp('2020-01-03 00:00:00')], 'TIMESTAMP_SEC[]')),             list_reverse(cast([timestamp('2020-01-01 00:00:00'), timestamp('2020-01-02 00:00:00'), timestamp('2020-01-03 00:00:00')], 'TIMESTAMP_TZ[]')),             list_reverse(cast([interval('1 days'), interval('2 days'), interval('3 days')], 'INTERVAL[]')),             list_reverse(['long string 1', 'long string 2']),             list_reverse(cast(['long string 1', 'long string 2'], 'BLOB[]')),             list_reverse(cast(['47c256ed-b2c4-40a0-8135-98d9c25329f7', '374a9e4a-632e-47b5-9e3d-d37b08b7980b'], 'UUID[]')),             list_reverse([[1,2,3], [5,6], [7,8,9]]),             list_reverse([map([1,2,3], [11,22,33]), map([5,6], [55,66])]),             list_reverse([{a:1, b:2}, {a:3, b:4}]),             list_reverse([union_value(a:=1), union_value(a:=2)]);
[2025-05-26 15:39:39.772] [info] DEBUG LOG: 
[2025-05-26 15:39:39.772] [info] QUERY: MATCH p = (a:person)-[:knows*1]->(b:person) WHERE a.ID=0 RETURN list_reverse(nodes(p)), list_reverse(rels(p)), list_reverse(properties(nodes(p), 'fName')) ;
[2025-05-26 15:39:39.807] [info] DEBUG LOG: ListSliceOutOfRange
[2025-05-26 15:39:39.807] [info] QUERY: RETURN [1,2,3][:100], [1,2,3][-1:2], [1,2,3][2:1], [1,2,3][1:-1], [1,2,3][3:4], 'abc'[-1:4]
[2025-05-26 15:39:39.829] [info] DEBUG LOG: ListAddOperation
[2025-05-26 15:39:39.829] [info] QUERY: MATCH (p:person)-[:knows]->(p1:person) RETURN p.courseScoresPerTerm + p1.courseScoresPerTerm
[2025-05-26 15:39:39.836] [info] DEBUG LOG: ListLiteral
[2025-05-26 15:39:39.836] [info] QUERY: RETURN [1,,3];
[2025-05-26 15:39:39.838] [info] DEBUG LOG: 
[2025-05-26 15:39:39.838] [info] QUERY: UNWIND [1,,3] AS a RETURN a IS NULL;
[2025-05-26 15:39:39.846] [info] DEBUG LOG: 
[2025-05-26 15:39:39.846] [info] QUERY: RETURN [1, 2.0];
[2025-05-26 15:39:39.848] [info] DEBUG LOG: 
[2025-05-26 15:39:39.848] [info] QUERY: RETURN [null, 3.0, 3];
[2025-05-26 15:39:39.848] [info] DEBUG LOG: 
[2025-05-26 15:39:39.848] [info] QUERY: RETURN [1, 'a'];
[2025-05-26 15:39:39.849] [info] DEBUG LOG: 
[2025-05-26 15:39:39.849] [info] QUERY: RETURN [1,,'a'];
[2025-05-26 15:39:39.849] [info] DEBUG LOG: 
[2025-05-26 15:39:39.849] [info] QUERY: RETURN [1, NULL];
[2025-05-26 15:39:39.850] [info] DEBUG LOG: 
[2025-05-26 15:39:39.850] [info] QUERY: RETURN [];
[2025-05-26 15:39:39.851] [info] DEBUG LOG: 
[2025-05-26 15:39:39.851] [info] QUERY: RETURN [NULL, NULL];
[2025-05-26 15:39:39.851] [info] DEBUG LOG: 
[2025-05-26 15:39:39.851] [info] QUERY: RETURN ['a', , []];
[2025-05-26 15:39:39.855] [info] DEBUG LOG: 
[2025-05-26 15:39:39.855] [info] QUERY: RETURN [[], , []];
[2025-05-26 15:39:39.857] [info] DEBUG LOG: 
[2025-05-26 15:39:39.857] [info] QUERY: RETURN [[1], , [2]];
[2025-05-26 15:39:39.859] [info] DEBUG LOG: 
[2025-05-26 15:39:39.859] [info] QUERY: RETURN [[1], , ['a']];
[2025-05-26 15:39:39.860] [info] DEBUG LOG: NodeLISTPropertiesTest
[2025-05-26 15:39:39.860] [info] QUERY: MATCH (a:person) RETURN a.workedHours, a.usedNames, a.courseScoresPerTerm
[2025-05-26 15:39:39.861] [info] DEBUG LOG: RelLISTPropertyTest
[2025-05-26 15:39:39.861] [info] QUERY: MATCH (a:person)-[e:knows]->(b:person) RETURN e.comments
[2025-05-26 15:39:39.863] [info] DEBUG LOG: ListCreate1
[2025-05-26 15:39:39.863] [info] QUERY: MATCH (a:person) RETURN [a.age + 1, a.age * 2], [a.eyeSight], [a.isStudent AND a.isWorker], [a.birthdate], [a.registerTime], [a.lastJobDuration]
[2025-05-26 15:39:39.875] [info] DEBUG LOG: ListExtractNegativeIdx
[2025-05-26 15:39:39.875] [info] QUERY: RETURN list_extract([5,2,8], -1)
[2025-05-26 15:39:39.876] [info] DEBUG LOG: 
[2025-05-26 15:39:39.876] [info] QUERY: RETURN list_extract([5,2,8], -2)
[2025-05-26 15:39:39.876] [info] DEBUG LOG: 
[2025-05-26 15:39:39.876] [info] QUERY: RETURN list_extract([5,2,8], -3)
[2025-05-26 15:39:39.877] [info] DEBUG LOG: 
[2025-05-26 15:39:39.877] [info] QUERY: RETURN list_extract([5,2,8], -4)
[2025-05-26 15:39:39.877] [info] DEBUG LOG: ListExtractZeroIdx
[2025-05-26 15:39:39.877] [info] QUERY: RETURN list_extract([5,2,8], 0)
[2025-05-26 15:39:39.878] [info] DEBUG LOG: ListExtractPositiveIdx
[2025-05-26 15:39:39.878] [info] QUERY: RETURN list_extract([5,2,8], 1)
[2025-05-26 15:39:39.878] [info] DEBUG LOG: 
[2025-05-26 15:39:39.878] [info] QUERY: RETURN list_extract([5,2,8], 2)
[2025-05-26 15:39:39.879] [info] DEBUG LOG: 
[2025-05-26 15:39:39.879] [info] QUERY: RETURN list_extract([5,2,8], 3)
[2025-05-26 15:39:39.879] [info] DEBUG LOG: 
[2025-05-26 15:39:39.879] [info] QUERY: RETURN list_extract([5,2,8], 4)
[2025-05-26 15:39:39.879] [info] DEBUG LOG: ListExtractListOfINT64
[2025-05-26 15:39:39.879] [info] QUERY: MATCH (a:person) RETURN list_extract(a.workedHours, 1)
[2025-05-26 15:39:39.880] [info] DEBUG LOG: 
[2025-05-26 15:39:39.880] [info] QUERY: MATCH (a:person) RETURN list_extract(a.workedHours, -1)
[2025-05-26 15:39:39.881] [info] DEBUG LOG: ListExtractListOfINT32
[2025-05-26 15:39:39.881] [info] QUERY: MATCH (m:movies) RETURN list_extract([m.length], 1)
[2025-05-26 15:39:39.882] [info] DEBUG LOG: ListExtractListOfINT16
[2025-05-26 15:39:39.882] [info] QUERY: MATCH (:person)-[e:studyAt]->(:organisation) RETURN list_extract([e.length], 1)
[2025-05-26 15:39:39.883] [info] DEBUG LOG: ListExtractLisitOfINT8
[2025-05-26 15:39:39.883] [info] QUERY: MATCH (:person)-[e:studyAt]->(:organisation) RETURN list_extract([e.level], 1)
[2025-05-26 15:39:39.884] [info] DEBUG LOG: ListExtractListOfUINT64
[2025-05-26 15:39:39.884] [info] QUERY: MATCH (:person)-[e:studyAt]->(:organisation) RETURN list_extract([e.code], 1)
[2025-05-26 15:39:39.885] [info] DEBUG LOG: ListExtractListOfUINT32
[2025-05-26 15:39:39.885] [info] QUERY: MATCH (:person)-[e:studyAt]->(:organisation) RETURN list_extract([e.temperature], 1)
[2025-05-26 15:39:39.886] [info] DEBUG LOG: ListExtractListOfUINT16
[2025-05-26 15:39:39.886] [info] QUERY: MATCH (:person)-[e:studyAt]->(:organisation) RETURN list_extract([e.ulength], 1)
[2025-05-26 15:39:39.887] [info] DEBUG LOG: ListExtractListOfUINT8
[2025-05-26 15:39:39.887] [info] QUERY: MATCH (:person)-[e:studyAt]->(:organisation) RETURN list_extract([e.ulevel], 1)
[2025-05-26 15:39:39.888] [info] DEBUG LOG: ListExtractListOfINT128
[2025-05-26 15:39:39.888] [info] QUERY: MATCH (:person)-[e:studyAt]->(:organisation) RETURN list_extract([e.hugedata], 1)
[2025-05-26 15:39:39.889] [info] DEBUG LOG: ListExtractListOfFloat
[2025-05-26 15:39:39.889] [info] QUERY: MATCH (p:person) RETURN list_extract([p.height], 1)
[2025-05-26 15:39:39.889] [info] DEBUG LOG: ListExtractListOfStrings
[2025-05-26 15:39:39.889] [info] QUERY: MATCH (a:person) RETURN list_extract(a.usedNames, 1)
[2025-05-26 15:39:39.890] [info] DEBUG LOG: ListExtractLiteralListOfBools
[2025-05-26 15:39:39.890] [info] QUERY: MATCH (a:person) RETURN list_extract([true, false, true, false], a.gender)
[2025-05-26 15:39:39.891] [info] DEBUG LOG: ListExtractLiteralListOfDoubles
[2025-05-26 15:39:39.891] [info] QUERY: MATCH (a:person) RETURN list_extract([4.351, 6.13, 94.2, 3.1], a.gender)
[2025-05-26 15:39:39.893] [info] DEBUG LOG: ListExtractLiteralListOfDate
[2025-05-26 15:39:39.893] [info] QUERY: MATCH (a:person) RETURN list_extract([date('1992-05-03'), a.birthdate], a.gender)
[2025-05-26 15:39:39.894] [info] DEBUG LOG: ListExtractLiteralListOfTimestamp
[2025-05-26 15:39:39.894] [info] QUERY: MATCH (a:person) RETURN list_extract([timestamp('1992-05-03 11:13:25'), a.registerTime], a.gender)
[2025-05-26 15:39:39.895] [info] DEBUG LOG: ListExtractLiteralListOfInterval
[2025-05-26 15:39:39.895] [info] QUERY: MATCH (a:person) RETURN list_extract([interval('2 hours 3 days 20 minutes'), a.lastJobDuration], a.gender)
[2025-05-26 15:39:39.896] [info] DEBUG LOG: ListExtractListOfListOfInts
[2025-05-26 15:39:39.896] [info] QUERY: MATCH (a:person) RETURN list_element(a.courseScoresPerTerm, 1)
[2025-05-26 15:39:39.896] [info] DEBUG LOG: ListExtractList
[2025-05-26 15:39:39.896] [info] QUERY: MATCH (a:person) RETURN a.usedNames[1]
[2025-05-26 15:39:39.897] [info] DEBUG LOG: ListExtractDoubleExtract
[2025-05-26 15:39:39.897] [info] QUERY: MATCH (a:person) RETURN a.courseScoresPerTerm[1][1]
[2025-05-26 15:39:39.900] [info] DEBUG LOG: ListExtractInternalIDTest
[2025-05-26 15:39:39.900] [info] QUERY: MATCH (a:person) RETURN list_extract([id(a)], 1)
[2025-05-26 15:39:39.901] [info] DEBUG LOG: ListExtractSliceListOfStrings
[2025-05-26 15:39:39.901] [info] QUERY: MATCH (a:person) RETURN a.usedNames[1][3:7]
[2025-05-26 15:39:39.901] [info] DEBUG LOG: ListExtractWithNull
[2025-05-26 15:39:39.901] [info] QUERY: RETURN list_extract([1,3,null,null,2],3)
[2025-05-26 15:39:39.903] [info] DEBUG LOG: ExtractNullList
[2025-05-26 15:39:39.903] [info] QUERY: RETURN list_extract(null,1)
[2025-05-26 15:39:39.903] [info] DEBUG LOG: ListExtractNullPos
[2025-05-26 15:39:39.903] [info] QUERY: RETURN LIST_EXTRACT([3,4,5],NULL)
[2025-05-26 15:39:39.904] [info] DEBUG LOG: SliceUTF8String
[2025-05-26 15:39:39.904] [info] QUERY: Return '这是一个中文句子'[2:5]
[2025-05-26 15:39:39.905] [info] DEBUG LOG: ListLenListOfInts
[2025-05-26 15:39:39.905] [info] QUERY: MATCH (a:person) RETURN size(a.workedHours)
[2025-05-26 15:39:39.905] [info] DEBUG LOG: ListSize
[2025-05-26 15:39:39.905] [info] QUERY: MATCH (a:person) RETURN size(a.courseScoresPerTerm)
[2025-05-26 15:39:39.906] [info] DEBUG LOG: EmptyListContains
[2025-05-26 15:39:39.906] [info] QUERY: RETURN 'a' IN [];
[2025-05-26 15:39:39.910] [info] DEBUG LOG: ListConcatListOfInts
[2025-05-26 15:39:39.910] [info] QUERY: MATCH (a:person) RETURN list_concat(a.workedHours, [a.age, a.gender])
[2025-05-26 15:39:39.912] [info] DEBUG LOG: ListConcatIntLiteral
[2025-05-26 15:39:39.912] [info] QUERY: MATCH (a:person) RETURN list_cat(a.workedHours, [3])
[2025-05-26 15:39:39.912] [info] DEBUG LOG: ListConcatListOfStrings
[2025-05-26 15:39:39.912] [info] QUERY: MATCH (a:person) RETURN array_concat(a.usedNames, [a.fName])
[2025-05-26 15:39:39.913] [info] DEBUG LOG: ListConcatListOfListOfInts
[2025-05-26 15:39:39.913] [info] QUERY: MATCH (a:person) RETURN array_cat(a.courseScoresPerTerm, [[a.age, a.age], [a.gender]])
[2025-05-26 15:39:39.920] [info] DEBUG LOG: ListConcatEmpty
[2025-05-26 15:39:39.920] [info] QUERY: RETURN LIST_CONCAT([], [])
[2025-05-26 15:39:39.921] [info] DEBUG LOG: ListConcatEmptyAndNull
[2025-05-26 15:39:39.921] [info] QUERY: RETURN LIST_CONCAT([], [NULL])
[2025-05-26 15:39:39.921] [info] DEBUG LOG: ListConcatNullAndEmpty
[2025-05-26 15:39:39.921] [info] QUERY: RETURN LIST_CONCAT([NULL], [])
[2025-05-26 15:39:39.921] [info] DEBUG LOG: ListConcatNullAndNull
[2025-05-26 15:39:39.921] [info] QUERY: RETURN LIST_CONCAT([NULL], [NULL])
[2025-05-26 15:39:39.922] [info] DEBUG LOG: ListConcatEmptyAndEmpty
[2025-05-26 15:39:39.922] [info] QUERY: RETURN LIST_CONCAT([], [])
[2025-05-26 15:39:39.922] [info] DEBUG LOG: ListConcatINT64AndNull
[2025-05-26 15:39:39.922] [info] QUERY: RETURN LIST_CONCAT([1,2,NULL], [to_int64(NULL)])
[2025-05-26 15:39:39.926] [info] DEBUG LOG: 
[2025-05-26 15:39:39.926] [info] QUERY: RETURN LIST_CONCAT([1,2,NULL], [cast(NULL, "int64")])
[2025-05-26 15:39:39.935] [info] DEBUG LOG: ListConcatNullAndINT64
[2025-05-26 15:39:39.935] [info] QUERY: RETURN LIST_CONCAT([to_int64(NULL)], [NULL, 1, 3])
[2025-05-26 15:39:39.937] [info] DEBUG LOG: 
[2025-05-26 15:39:39.937] [info] QUERY: RETURN LIST_CONCAT([cast(NULL, "int64")], [NULL, 1, 3])
[2025-05-26 15:39:39.943] [info] DEBUG LOG: ListPositionListOfInts
[2025-05-26 15:39:39.943] [info] QUERY: MATCH (a:person) RETURN list_position(a.workedHours, 5)
[2025-05-26 15:39:39.944] [info] DEBUG LOG: ListPositionListOfStrings
[2025-05-26 15:39:39.944] [info] QUERY: MATCH (a:person) RETURN array_position(a.usedNames, "Grad")
[2025-05-26 15:39:39.944] [info] DEBUG LOG: ListPositionLiteralListOfInts
[2025-05-26 15:39:39.944] [info] QUERY: MATCH (o:organisation) RETURN list_indexof([7, 4, 100, 6, 1, 10], o.ID)
[2025-05-26 15:39:39.945] [info] DEBUG LOG: ListPositionListOfListOfInts
[2025-05-26 15:39:39.945] [info] QUERY: MATCH (a:person) RETURN array_indexof(a.courseScoresPerTerm, [8])
[2025-05-26 15:39:39.946] [info] DEBUG LOG: ListPositionLiteralListOfListOfBools
[2025-05-26 15:39:39.946] [info] QUERY: MATCH (a:person) RETURN array_indexof([[true, false], [false, true], [false, false]], [a.isStudent, a.isWorker])
[2025-05-26 15:39:39.952] [info] DEBUG LOG: ListPositionLiteralListOfListOfDoubles
[2025-05-26 15:39:39.952] [info] QUERY: MATCH (a:person) RETURN array_indexof([[5.0], [4.9], [4.8]], [a.eyeSight])
[2025-05-26 15:39:39.955] [info] DEBUG LOG: ListPositionLiteralListOfListOfStrings
[2025-05-26 15:39:39.955] [info] QUERY: MATCH (a:person) RETURN array_indexof([['Aida'], ['Wolfeschlegelstein', 'Daniel'], ['Grad']], a.usedNames)
[2025-05-26 15:39:39.957] [info] DEBUG LOG: ListPositionLiteralListOfListOfDates
[2025-05-26 15:39:39.957] [info] QUERY: MATCH (a:person) RETURN array_indexof([[date('1900-01-01')], [date('1900-01-01'), date('1900-05-01')], [date('1980-10-26')]], [a.birthdate])
[2025-05-26 15:39:39.968] [info] DEBUG LOG: ListPositionLiteralListOfListOfTimestamps
[2025-05-26 15:39:39.968] [info] QUERY: MATCH (a:person) RETURN array_indexof([[timestamp('2011-08-20 11:25:30')], [timestamp('1976-12-23 11:21:42'), timestamp('1972-07-31 13:22:30.678559')], [timestamp('2023-02-21 13:25:30')]], [a.registerTime])
[2025-05-26 15:39:39.969] [info] DEBUG LOG: ListPositionLiteralListOfListOfIntervals
[2025-05-26 15:39:39.969] [info] QUERY: MATCH (a:person) RETURN array_indexof([[interval('3 years 2 days 13 hours 2 minutes')], [interval('18 minutes 24 milliseconds')], [interval('10 years 5 months 13 hours 24 us')]], [a.lastJobDuration])
[2025-05-26 15:39:39.970] [info] DEBUG LOG: ListPositionLiteralListOfListOfListOfIntervals
[2025-05-26 15:39:39.970] [info] QUERY: MATCH (a:person) RETURN array_indexof([[[7,4],[8,8],[9]]], a.courseScoresPerTerm)
[2025-05-26 15:39:39.983] [info] DEBUG LOG: ListPositionUnmatchedDataType
[2025-05-26 15:39:39.983] [info] QUERY: MATCH (a:person) RETURN array_indexof(a.workedHours, a.registerTime)
[2025-05-26 15:39:39.983] [info] DEBUG LOG: ListIn
[2025-05-26 15:39:39.983] [info] QUERY: RETURN 1 IN [2,3,4], 2.0 IN [2,3,4], 3 IN [0,0,3]
[2025-05-26 15:39:39.993] [info] DEBUG LOG: 
[2025-05-26 15:39:39.993] [info] QUERY: RETURN [1+1] IN [[2], [3], [3,4,5]], "str" IN ["a", "Xiyang", "str"]
[2025-05-26 15:39:40.008] [info] DEBUG LOG: 
[2025-05-26 15:39:40.008] [info] QUERY: MATCH (a:person) RETURN a.ID + 1, a.workedHours, (a.ID + 1) IN a.workedHours
[2025-05-26 15:39:40.015] [info] DEBUG LOG: ListContainsListOfInts
[2025-05-26 15:39:40.015] [info] QUERY: MATCH (a:person) RETURN list_contains(a.workedHours, 5)
[2025-05-26 15:39:40.016] [info] DEBUG LOG: ListContainsUnmatchType
[2025-05-26 15:39:40.016] [info] QUERY: MATCH (a:person) where list_contains(cast([0, 7] as int8[]), a.ID) return a.ID
[2025-05-26 15:39:40.028] [info] DEBUG LOG: 
[2025-05-26 15:39:40.028] [info] QUERY: MATCH (a:person) where list_contains(cast([2, 3] as int16[]), a.ID) return a.ID
[2025-05-26 15:39:40.029] [info] DEBUG LOG: 
[2025-05-26 15:39:40.029] [info] QUERY: MATCH (a:person) where list_contains(cast([5] as int32[]), a.ID) return a.ID
[2025-05-26 15:39:40.030] [info] DEBUG LOG: 
[2025-05-26 15:39:40.030] [info] QUERY: MATCH (a:person) where list_contains(cast([7, 8] as int128[]), a.ID) return a.ID
[2025-05-26 15:39:40.030] [info] DEBUG LOG: 
[2025-05-26 15:39:40.030] [info] QUERY: MATCH (a:person) where list_contains(cast(['A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11', 'a0eebc99-9c0b4ef8-bb6d6bb9-bd380a15'] as uuid[]), a.u) return a.ID
[2025-05-26 15:39:40.032] [info] DEBUG LOG: ListContainsSelect
[2025-05-26 15:39:40.032] [info] QUERY: MATCH (a:person) WHERE list_contains(a.courseScoresPerTerm, [8]) RETURN a.ID
[2025-05-26 15:39:40.034] [info] DEBUG LOG: ListContainsListOfStrings
[2025-05-26 15:39:40.034] [info] QUERY: MATCH (a:person) RETURN list_has(a.usedNames, "Grad")
[2025-05-26 15:39:40.035] [info] DEBUG LOG: ListContainsListOfListOfInts
[2025-05-26 15:39:40.035] [info] QUERY: MATCH (a:person) RETURN array_contains(a.courseScoresPerTerm, [8])
[2025-05-26 15:39:40.035] [info] DEBUG LOG: ListContainsLiteralListOfInts
[2025-05-26 15:39:40.035] [info] QUERY: MATCH (o:organisation) RETURN array_has([7,6,1], o.ID)
[2025-05-26 15:39:40.036] [info] DEBUG LOG: ListSliceLiteralListOfInts
[2025-05-26 15:39:40.036] [info] QUERY: MATCH (o:organisation) RETURN array_slice([1,4,7,9,10,20,15,192,-5,21,3], 3, o.ID + 3)
[2025-05-26 15:39:40.041] [info] DEBUG LOG: ListSliceListOfInts
[2025-05-26 15:39:40.041] [info] QUERY: MATCH (a:person) RETURN list_slice(a.workedHours, 1, 2)
[2025-05-26 15:39:40.041] [info] DEBUG LOG: ListSliceListOfListOfInts
[2025-05-26 15:39:40.041] [info] QUERY: MATCH (a:person) RETURN array_slice(a.usedNames, 1, 2)
[2025-05-26 15:39:40.042] [info] DEBUG LOG: ListSliceListOfStrings
[2025-05-26 15:39:40.042] [info] QUERY: MATCH (a:person) RETURN list_slice(a.courseScoresPerTerm, 1, 2)
[2025-05-26 15:39:40.042] [info] DEBUG LOG: ListSliceString
[2025-05-26 15:39:40.042] [info] QUERY: MATCH (o:organisation) RETURN o.name[1:4]
[2025-05-26 15:39:40.043] [info] DEBUG LOG: ListSliceStringRight
[2025-05-26 15:39:40.043] [info] QUERY: MATCH (a:person) RETURN a.fName[4:]
[2025-05-26 15:39:40.044] [info] DEBUG LOG: ListSliceStringLeft
[2025-05-26 15:39:40.044] [info] QUERY: MATCH (a:person) RETURN a.fName[:5]
[2025-05-26 15:39:40.044] [info] DEBUG LOG: ListSliceStringNull
[2025-05-26 15:39:40.044] [info] QUERY: MATCH (o:organisation) RETURN o.name[:]
[2025-05-26 15:39:40.045] [info] DEBUG LOG: ListSliceStringDoubleSlice
[2025-05-26 15:39:40.045] [info] QUERY: MATCH (a:person) RETURN a.fName[3:][2:4]
[2025-05-26 15:39:40.045] [info] DEBUG LOG: ListSliceOutOfRange
[2025-05-26 15:39:40.045] [info] QUERY: MATCH (p:person) RETURN p.usedNames[7:]
[2025-05-26 15:39:40.046] [info] DEBUG LOG: 
[2025-05-26 15:39:40.046] [info] QUERY: MATCH (p:person) RETURN p.usedNames[:-2]
[2025-05-26 15:39:40.046] [info] DEBUG LOG: 
[2025-05-26 15:39:40.046] [info] QUERY: MATCH (a:person) RETURN a.fName[7:]
[2025-05-26 15:39:40.047] [info] DEBUG LOG: ListCreateFromLiteral1
[2025-05-26 15:39:40.047] [info] QUERY: RETURN [[100,200],[200,300],[300,400]]
[2025-05-26 15:39:40.051] [info] DEBUG LOG: ListCreateFromLiteral2
[2025-05-26 15:39:40.051] [info] QUERY: RETURN array_contains([[100,200],[200,300],[300,400]], [100,200])
[2025-05-26 15:39:40.053] [info] DEBUG LOG: ListCreateFromUnion
[2025-05-26 15:39:40.053] [info] QUERY: RETURN [UNION_VALUE(a := 3), UNION_VALUE(b := 7), UNION_VALUE(a := 11)]
[2025-05-26 15:39:40.064] [info] DEBUG LOG: ListSumSeq1
[2025-05-26 15:39:40.064] [info] QUERY: Return list_sum([1, 2, 3, NULL]);
[2025-05-26 15:39:40.065] [info] DEBUG LOG: ListSumSeq2
[2025-05-26 15:39:40.065] [info] QUERY: Return list_sum([1.1, 2.2, 3.3, NULL]);
[2025-05-26 15:39:40.066] [info] DEBUG LOG: ListSortInt8Asc
[2025-05-26 15:39:40.066] [info] QUERY: Return list_sort([to_int8(2), to_int8(3), to_int8(1), NULL, NULL]);
[2025-05-26 15:39:40.068] [info] DEBUG LOG: 
[2025-05-26 15:39:40.068] [info] QUERY: Return list_sort([cast(2, "int8"), cast(3, "int8"), cast(1, "int8"), NULL, NULL]);
[2025-05-26 15:39:40.079] [info] DEBUG LOG: ListSortInt8Desc
[2025-05-26 15:39:40.079] [info] QUERY: Return list_sort([to_int8(2), to_int8(3), to_int8(1), to_int8(5), NULL], 'DESC');
[2025-05-26 15:39:40.079] [info] DEBUG LOG: 
[2025-05-26 15:39:40.079] [info] QUERY: Return list_sort([cast(2, "int8"), cast(3, "int8"), cast(1, "int8"), cast(5, "int8"), NULL], 'DESC');
[2025-05-26 15:39:40.080] [info] DEBUG LOG: ListSortInt16Asc
[2025-05-26 15:39:40.080] [info] QUERY: Return list_sort([to_int16(2), to_int16(3), to_int16(1), NULL, NULL]);
[2025-05-26 15:39:40.081] [info] DEBUG LOG: 
[2025-05-26 15:39:40.081] [info] QUERY: Return list_sort([cast(2, "int16"), cast(3, "int16"), cast(1, "int16"), NULL, NULL]);
[2025-05-26 15:39:40.082] [info] DEBUG LOG: ListSortInt16Desc
[2025-05-26 15:39:40.082] [info] QUERY: Return list_sort([to_int16(2), to_int16(3), to_int16(1), to_int16(5), NULL], 'DESC');
[2025-05-26 15:39:40.082] [info] DEBUG LOG: 
[2025-05-26 15:39:40.082] [info] QUERY: Return list_sort([cast(2, "int16"), cast(3, "int16"), cast(1, "int16"), to_int16(5), NULL], 'DESC');
[2025-05-26 15:39:40.083] [info] DEBUG LOG: ListSortInt16DescWithNullsLast
[2025-05-26 15:39:40.083] [info] QUERY: Return list_sort([to_int16(2), to_int16(3), to_int16(1), NULL], 'DESC', 'NULLS LAST');
[2025-05-26 15:39:40.084] [info] DEBUG LOG: 
[2025-05-26 15:39:40.084] [info] QUERY: Return list_sort([cast(2, "int16"), cast(3, "int16"), cast(1, "int16"), NULL], 'DESC', 'NULLS LAST');
[2025-05-26 15:39:40.085] [info] DEBUG LOG: ListSortInt32Asc
[2025-05-26 15:39:40.085] [info] QUERY: Return list_sort([to_int32(2), to_int32(3), to_int32(1), NULL, NULL]);
[2025-05-26 15:39:40.086] [info] DEBUG LOG: ListSortInt32Desc
[2025-05-26 15:39:40.086] [info] QUERY: Return list_sort([to_int32(2), to_int32(3), to_int32(1), to_int32(5), NULL], 'DESC');
[2025-05-26 15:39:40.086] [info] DEBUG LOG: ListSortInt32DescWithNullsLast
[2025-05-26 15:39:40.086] [info] QUERY: Return list_sort([to_int32(2), to_int32(3), to_int32(1), NULL], 'DESC', 'NULLS LAST');
[2025-05-26 15:39:40.087] [info] DEBUG LOG: ListSortInt64Asc
[2025-05-26 15:39:40.087] [info] QUERY: Return list_sort([2, 3, 1, NULL, NULL]);
[2025-05-26 15:39:40.087] [info] DEBUG LOG: ListSortInt64Desc
[2025-05-26 15:39:40.087] [info] QUERY: Return list_sort([2, 3, 1, 5, NULL], 'DESC');
[2025-05-26 15:39:40.088] [info] DEBUG LOG: ListSortInt64DescWithNullsLast
[2025-05-26 15:39:40.088] [info] QUERY: Return list_sort([2, 3, 1, NULL], 'DESC', 'NULLS LAST');
[2025-05-26 15:39:40.088] [info] DEBUG LOG: ListSortUInt8Asc
[2025-05-26 15:39:40.088] [info] QUERY: Return list_sort([to_uint8(2), to_uint8(3), to_uint8(1), NULL, NULL]);
[2025-05-26 15:39:40.089] [info] DEBUG LOG: ListSortUInt8Desc
[2025-05-26 15:39:40.089] [info] QUERY: Return list_sort([to_uint8(2), to_uint8(3), to_uint8(1), to_uint8(5), NULL], 'DESC');
[2025-05-26 15:39:40.090] [info] DEBUG LOG: ListSortUInt8DescWithNullsLast
[2025-05-26 15:39:40.090] [info] QUERY: Return list_sort([to_uint8(2), to_uint8(3), to_uint8(1), NULL], 'DESC', 'NULLS LAST');
[2025-05-26 15:39:40.090] [info] DEBUG LOG: ListSortUInt16Asc
[2025-05-26 15:39:40.090] [info] QUERY: Return list_sort([to_uint16(2), to_uint16(3), to_uint16(1), NULL, NULL]);
[2025-05-26 15:39:40.091] [info] DEBUG LOG: ListSortUInt16Desc
[2025-05-26 15:39:40.091] [info] QUERY: Return list_sort([to_uint16(2), to_uint16(3), to_uint16(1), to_uint16(5), NULL], 'DESC');
[2025-05-26 15:39:40.092] [info] DEBUG LOG: ListSortUInt16DescWithNullsLast
[2025-05-26 15:39:40.092] [info] QUERY: Return list_sort([to_uint16(2), to_uint16(3), to_uint16(1), NULL], 'DESC', 'NULLS LAST');
[2025-05-26 15:39:40.092] [info] DEBUG LOG: ListSortUInt32Asc
[2025-05-26 15:39:40.092] [info] QUERY: Return list_sort([to_uint32(2), to_uint32(3), to_uint32(1), NULL, NULL]);
[2025-05-26 15:39:40.093] [info] DEBUG LOG: ListSortUInt32Desc
[2025-05-26 15:39:40.093] [info] QUERY: Return list_sort([to_uint32(2), to_uint32(3), to_uint32(1), to_uint32(5), NULL], 'DESC');
[2025-05-26 15:39:40.094] [info] DEBUG LOG: ListSortUInt32DescWithNullsLast
[2025-05-26 15:39:40.094] [info] QUERY: Return list_sort([to_uint32(2), to_uint32(3), to_uint32(1), NULL], 'DESC', 'NULLS LAST');
[2025-05-26 15:39:40.094] [info] DEBUG LOG: ListSortUInt64Asc
[2025-05-26 15:39:40.094] [info] QUERY: Return list_sort([to_uint64(2), to_uint64(3), to_uint64(1), NULL, NULL]);
[2025-05-26 15:39:40.095] [info] DEBUG LOG: ListSortUInt64Desc
[2025-05-26 15:39:40.095] [info] QUERY: Return list_sort([to_uint64(2), to_uint64(3), to_uint64(1), to_uint64(5), NULL], 'DESC');
[2025-05-26 15:39:40.096] [info] DEBUG LOG: ListSortUInt64DescWithNullsLast
[2025-05-26 15:39:40.096] [info] QUERY: Return list_sort([to_uint64(2), to_uint64(3), to_uint64(1), NULL], 'DESC', 'NULLS LAST');
[2025-05-26 15:39:40.096] [info] DEBUG LOG: ListSortInt128Asc
[2025-05-26 15:39:40.096] [info] QUERY: Return list_sort([to_int128(2), to_int128(3), to_int128(1), NULL, NULL]);
[2025-05-26 15:39:40.097] [info] DEBUG LOG: ListSortInt128Desc
[2025-05-26 15:39:40.097] [info] QUERY: Return list_sort([to_int128(2), to_int128(3), to_int128(1), to_int128(5), NULL], 'DESC');
[2025-05-26 15:39:40.098] [info] DEBUG LOG: ListSortInt128DescWithNullsLast
[2025-05-26 15:39:40.098] [info] QUERY: Return list_sort([to_int128(2), to_int128(3), to_int128(1), NULL], 'DESC', 'NULLS LAST');
[2025-05-26 15:39:40.098] [info] DEBUG LOG: ListSortFloatAsc
[2025-05-26 15:39:40.098] [info] QUERY: Return list_sort([to_float(1.1), to_float(2.3), to_float(4.5), NULL]);
[2025-05-26 15:39:40.100] [info] DEBUG LOG: ListSortFloatDesc
[2025-05-26 15:39:40.100] [info] QUERY: Return list_sort([to_float(2.1), to_float(3.2), to_float(1.33), to_float(5.44), NULL], 'DESC');
[2025-05-26 15:39:40.101] [info] DEBUG LOG: ListSortFloatDescWithNullsLast
[2025-05-26 15:39:40.101] [info] QUERY: Return list_sort([to_float(2.1), to_float(3.2), to_float(1.11), NULL], 'DESC', 'NULLS LAST');
[2025-05-26 15:39:40.101] [info] DEBUG LOG: ListSortStringDesc
[2025-05-26 15:39:40.102] [info] QUERY: Return list_sort(['sss', 'sssss', 'abs', NULL], 'DESC');
[2025-05-26 15:39:40.102] [info] DEBUG LOG: ListSortStringAscWithNullsLast
[2025-05-26 15:39:40.102] [info] QUERY: Return list_sort(['sss', 'sssss', 'abs', NULL], 'ASC', 'NULLS LAST');
[2025-05-26 15:39:40.102] [info] DEBUG LOG: ListSortDoubleAscWithNullsLast
[2025-05-26 15:39:40.102] [info] QUERY: Return list_sort([1.1, 2.3, 4.5, NULL], 'ASC', 'NULLS LAST');
[2025-05-26 15:39:40.103] [info] DEBUG LOG: ListSortDateSeq1
[2025-05-26 15:39:40.103] [info] QUERY: Return list_sort([date('1992-05-03'), date('1993-05-03'), date('1994-05-03'), NULL]);
[2025-05-26 15:39:40.104] [info] DEBUG LOG: ListSortDateSeq2
[2025-05-26 15:39:40.104] [info] QUERY: Return list_sort([date('1992-05-03'), date('1993-05-03'), date('1994-05-03'), NULL], 'DESC');
[2025-05-26 15:39:40.105] [info] DEBUG LOG: ListSortDateSeq3
[2025-05-26 15:39:40.105] [info] QUERY: Return list_sort([date('1992-05-03'), date('1993-05-03'), date('1994-05-03'), NULL], 'DESC', 'NULLS LAST');
[2025-05-26 15:39:40.105] [info] DEBUG LOG: ListSortTimestampSeq1
[2025-05-26 15:39:40.105] [info] QUERY: Return list_sort([timestamp('1992-05-03 11:13:25'), timestamp('1993-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), NULL]);
[2025-05-26 15:39:40.106] [info] DEBUG LOG: 
[2025-05-26 15:39:40.106] [info] QUERY: Return list_sort([cast('1992-05-03 11:13:25', "TIMESTAMP_MS"), cast('1993-05-03 11:13:25.43225', "TIMESTAMP_MS"), cast('1994-05-03 11:13:25.43225', "TIMESTAMP_MS"), NULL]);
[2025-05-26 15:39:40.108] [info] DEBUG LOG: ListSortTimestampSeq2
[2025-05-26 15:39:40.108] [info] QUERY: Return list_sort([timestamp('1992-05-03 11:13:25'), timestamp('1993-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), NULL], 'DESC');
[2025-05-26 15:39:40.109] [info] DEBUG LOG: 
[2025-05-26 15:39:40.109] [info] QUERY: Return list_sort([cast('1992-05-03 11:13:25', "TIMESTAMP_NS"), cast('1993-05-03 11:13:25.4322', "TIMESTAMP_NS"), cast('1994-05-03 11:13:25.43225', "TIMESTAMP_NS"), NULL], 'DESC');
[2025-05-26 15:39:40.109] [info] DEBUG LOG: ListSortTimestampSeq3
[2025-05-26 15:39:40.109] [info] QUERY: Return list_sort([timestamp('1992-05-03 11:13:25'), timestamp('1993-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), NULL], 'DESC', 'NULLS LAST');
[2025-05-26 15:39:40.110] [info] DEBUG LOG: 
[2025-05-26 15:39:40.110] [info] QUERY: Return list_sort([cast('1992-05-03 11:13:24', "TIMESTAMP_SEC"), cast('1993-05-03 11:13:25.4322', "TIMESTAMP_SEC"), cast('1994-05-03 11:13:25.43225', "TIMESTAMP_SEC"), NULL], 'DESC', 'NULLS LAST');
[2025-05-26 15:39:40.111] [info] DEBUG LOG: 
[2025-05-26 15:39:40.111] [info] QUERY: Return list_sort([cast('1992-05-03 11:13:25', "TIMESTAMP_TZ"), cast('1993-05-03 11:13:25.4322', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:25.43225', "TIMESTAMP_TZ"), NULL], 'DESC', 'NULLS LAST');
[2025-05-26 15:39:40.112] [info] DEBUG LOG: ListSortIntervalSeq1
[2025-05-26 15:39:40.112] [info] QUERY: Return list_sort([interval('2 hours 3 days 20 minutes'), interval('3 hours 3 days 20 minutes'), interval('4 hours 3 days 20 minutes'), NULL]);
[2025-05-26 15:39:40.112] [info] DEBUG LOG: ListSortIntervalSeq2
[2025-05-26 15:39:40.112] [info] QUERY: Return list_sort([interval('2 hours 3 days 20 minutes'), interval('3 hours 3 days 20 minutes'), interval('4 hours 3 days 20 minutes'), NULL], 'DESC');
[2025-05-26 15:39:40.113] [info] DEBUG LOG: ListSortIntervalSeq3
[2025-05-26 15:39:40.113] [info] QUERY: Return list_sort([interval('2 hours 3 days 20 minutes'), interval('3 hours 3 days 20 minutes'), interval('4 hours 3 days 20 minutes'), NULL], 'DESC', 'NULLS LAST');
[2025-05-26 15:39:40.114] [info] DEBUG LOG: ListSortBooleanSeq1
[2025-05-26 15:39:40.114] [info] QUERY: Return list_sort([true, true, false, NULL]);
[2025-05-26 15:39:40.114] [info] DEBUG LOG: ListSortBooleanSeq2
[2025-05-26 15:39:40.114] [info] QUERY: Return list_sort([true, true, false, NULL], 'DESC');
[2025-05-26 15:39:40.115] [info] DEBUG LOG: ListSortBooleanSeq3
[2025-05-26 15:39:40.115] [info] QUERY: Return list_sort([true, true, false, NULL], 'DESC', 'NULLS LAST');
[2025-05-26 15:39:40.115] [info] DEBUG LOG: ListSumInt8
[2025-05-26 15:39:40.115] [info] QUERY: Return list_sum([to_int8(-1), to_int8(2), NULL, to_int8(3)]);
[2025-05-26 15:39:40.117] [info] DEBUG LOG: ListSumInt
[2025-05-26 15:39:40.117] [info] QUERY: Return list_sum([1, 2, 3, NULL]);
[2025-05-26 15:39:40.117] [info] DEBUG LOG: ListSumDouble
[2025-05-26 15:39:40.117] [info] QUERY: Return list_sum([1.1, 2.2, 3.3, NULL]);
[2025-05-26 15:39:40.118] [info] DEBUG LOG: ListReverseSortInt8
[2025-05-26 15:39:40.118] [info] QUERY: Return list_reverse_sort([to_int8(1), to_int8(1), NULL, to_int8(-3), to_int8(1), to_int8(5)]);
[2025-05-26 15:39:40.120] [info] DEBUG LOG: ListReverseSortInt16
[2025-05-26 15:39:40.120] [info] QUERY: Return list_reverse_sort([to_int16(1), to_int16(1), NULL, to_int16(-3), to_int16(1), to_int16(5)]);
[2025-05-26 15:39:40.121] [info] DEBUG LOG: ListReverseSortInt16WithNullsLast
[2025-05-26 15:39:40.121] [info] QUERY: Return list_reverse_sort([to_int16(1), to_int16(1), NULL, to_int16(-3), to_int16(1), to_int16(5)], 'NULLS LAST');
[2025-05-26 15:39:40.121] [info] DEBUG LOG: ListReverseSortInt32
[2025-05-26 15:39:40.121] [info] QUERY: Return list_reverse_sort([to_int32(1), to_int32(1), NULL, to_int32(-3), to_int32(1), to_int32(5)]);
[2025-05-26 15:39:40.122] [info] DEBUG LOG: ListReverseSortInt32WithNullsLast
[2025-05-26 15:39:40.122] [info] QUERY: Return list_reverse_sort([to_int32(1), to_int32(1), NULL, to_int32(-3), to_int32(1), to_int32(5)], 'NULLS LAST');
[2025-05-26 15:39:40.123] [info] DEBUG LOG: ListReverseSortInt64
[2025-05-26 15:39:40.123] [info] QUERY: Return list_reverse_sort([2, 3, 1, 5, NULL]);
[2025-05-26 15:39:40.124] [info] DEBUG LOG: ListReverseSortInt64WithNullsLast
[2025-05-26 15:39:40.124] [info] QUERY: Return list_reverse_sort([2, 3, 1, 5, NULL], 'NULLS LAST');
[2025-05-26 15:39:40.124] [info] DEBUG LOG: ListReverseSortUInt8
[2025-05-26 15:39:40.124] [info] QUERY: Return list_reverse_sort([to_uint8(2), NULL, to_uint8(3), to_uint8(1), to_uint8(5)]);
[2025-05-26 15:39:40.125] [info] DEBUG LOG: ListReverseSortUInt8WithNullsLast
[2025-05-26 15:39:40.125] [info] QUERY: Return list_reverse_sort([to_uint8(2), NULL, to_uint8(3), to_uint8(1), to_uint8(5)], 'NULLS LAST');
[2025-05-26 15:39:40.125] [info] DEBUG LOG: ListReverseSortUInt16
[2025-05-26 15:39:40.125] [info] QUERY: Return list_reverse_sort([to_uint16(2), NULL, to_uint16(3), to_uint16(1), to_uint16(5)]);
[2025-05-26 15:39:40.126] [info] DEBUG LOG: ListReverseSortUInt16WithNullsLast
[2025-05-26 15:39:40.126] [info] QUERY: Return list_reverse_sort([to_uint16(2), NULL, to_uint16(3), to_uint16(1), to_uint16(5)], 'NULLS LAST');
[2025-05-26 15:39:40.127] [info] DEBUG LOG: ListReverseSortUInt32
[2025-05-26 15:39:40.127] [info] QUERY: Return list_reverse_sort([to_uint32(2), NULL, to_uint32(3), to_uint32(1), to_uint32(5)]);
[2025-05-26 15:39:40.127] [info] DEBUG LOG: ListReverseSortUInt32WithNullsLast
[2025-05-26 15:39:40.127] [info] QUERY: Return list_reverse_sort([to_uint32(2), NULL, to_uint32(3), to_uint32(1), to_uint32(5)], 'NULLS LAST');
[2025-05-26 15:39:40.128] [info] DEBUG LOG: ListReverseSortUInt64
[2025-05-26 15:39:40.128] [info] QUERY: Return list_reverse_sort([to_uint64(2), NULL, to_uint64(3), to_uint64(1), to_uint64(5)]);
[2025-05-26 15:39:40.129] [info] DEBUG LOG: ListReverseSortUInt64WithNullsLast
[2025-05-26 15:39:40.129] [info] QUERY: Return list_reverse_sort([to_uint64(2), NULL, to_uint64(3), to_uint64(1), to_uint64(5)], 'NULLS LAST');
[2025-05-26 15:39:40.130] [info] DEBUG LOG: ListDistinctWithFloat
[2025-05-26 15:39:40.130] [info] QUERY: Return list_reverse_sort([to_float(1.1), to_float(1.1), NULL, to_float(3.4), to_float(1.2), to_float(5.1)]);
[2025-05-26 15:39:40.130] [info] DEBUG LOG: ListDistinctWithFloat
[2025-05-26 15:39:40.130] [info] QUERY: Return list_reverse_sort([to_float(1.1), to_float(1.1), NULL, to_float(3.4), to_float(1.2), to_float(5.1)], 'NULLS LAST');
[2025-05-26 15:39:40.131] [info] DEBUG LOG: ListReverseSortDouble
[2025-05-26 15:39:40.131] [info] QUERY: Return list_reverse_sort([1.1, 2.3, 4.5, NULL]);
[2025-05-26 15:39:40.132] [info] DEBUG LOG: ListReverseSortDoubleWithNullsLast
[2025-05-26 15:39:40.132] [info] QUERY: Return list_reverse_sort([1.1, 2.3, 4.5, NULL], 'NULLS LAST');
[2025-05-26 15:39:40.132] [info] DEBUG LOG: ListReverseSortStringSeq1
[2025-05-26 15:39:40.132] [info] QUERY: Return list_reverse_sort(['this is a long string', 'this is yet another long string', 'abs', NULL]);
[2025-05-26 15:39:40.132] [info] DEBUG LOG: ListReverseSortWithStringSeq2
[2025-05-26 15:39:40.132] [info] QUERY: MATCH (a:person) RETURN list_reverse_sort([NULL, a.usedNames[1], 'Some val', NULL])
[2025-05-26 15:39:40.139] [info] DEBUG LOG: ListReverseSortStringWithNullsLast
[2025-05-26 15:39:40.139] [info] QUERY: Return list_reverse_sort(['sss', 'sssss', 'abs', NULL], 'NULLS LAST');
[2025-05-26 15:39:40.140] [info] DEBUG LOG: ListReverseSortDateSeq1
[2025-05-26 15:39:40.140] [info] QUERY: Return list_reverse_sort([date('1992-05-03'), date('1993-05-03'), date('1994-05-03'), NULL]);
[2025-05-26 15:39:40.140] [info] DEBUG LOG: ListReverseSortDateSeq2
[2025-05-26 15:39:40.140] [info] QUERY: Return list_reverse_sort([date('1992-05-03'), date('1993-05-03'), date('1994-05-03'), NULL], 'NULLS LAST');
[2025-05-26 15:39:40.141] [info] DEBUG LOG: ListReverseSortTimestampSeq1
[2025-05-26 15:39:40.141] [info] QUERY: Return list_reverse_sort([timestamp('1992-05-03 11:13:25'), timestamp('1993-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), NULL]);
[2025-05-26 15:39:40.141] [info] DEBUG LOG: 
[2025-05-26 15:39:40.141] [info] QUERY: Return list_reverse_sort([cast('1992-05-03 11:13:25', "TIMESTAMP_MS"), cast('1993-05-03 11:13:25.43225', "TIMESTAMP_MS"), cast('1994-05-03 11:13:25.43225', "TIMESTAMP_MS"), NULL]);
[2025-05-26 15:39:40.142] [info] DEBUG LOG: 
[2025-05-26 15:39:40.142] [info] QUERY: Return list_reverse_sort([cast('1992-05-03 11:13:25', "TIMESTAMP_NS"), cast('1993-05-03 11:13:25.4322', "TIMESTAMP_NS"), cast('1994-05-03 11:13:25.43225', "TIMESTAMP_NS"), NULL]);
[2025-05-26 15:39:40.143] [info] DEBUG LOG: ListReverseSortTimestampSeq2
[2025-05-26 15:39:40.143] [info] QUERY: Return list_reverse_sort([timestamp('1992-05-03 11:13:25'), timestamp('1993-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), NULL], 'NULLS LAST');
[2025-05-26 15:39:40.143] [info] DEBUG LOG: 
[2025-05-26 15:39:40.143] [info] QUERY: Return list_reverse_sort([cast('1992-05-03 11:13:24', "TIMESTAMP_SEC"), cast('1993-05-03 11:13:25.4322', "TIMESTAMP_SEC"), cast('1994-05-03 11:13:25.43225', "TIMESTAMP_SEC"), NULL], 'NULLS LAST');
[2025-05-26 15:39:40.144] [info] DEBUG LOG: 
[2025-05-26 15:39:40.144] [info] QUERY: Return list_reverse_sort([cast('1992-05-03 11:13:25', "TIMESTAMP_TZ"), cast('1993-05-03 11:13:25.4322', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:25.43225', "TIMESTAMP_TZ"), NULL], 'NULLS LAST');
[2025-05-26 15:39:40.145] [info] DEBUG LOG: ListReverseSortIntervalSeq1
[2025-05-26 15:39:40.145] [info] QUERY: Return list_reverse_sort([interval('2 hours 3 days 20 minutes'), interval('3 hours 3 days 20 minutes'), interval('4 hours 3 days 20 minutes'), NULL]);
[2025-05-26 15:39:40.146] [info] DEBUG LOG: ListReverseSortIntervalSeq2
[2025-05-26 15:39:40.146] [info] QUERY: Return list_reverse_sort([interval('2 hours 3 days 20 minutes'), interval('3 hours 3 days 20 minutes'), interval('4 hours 3 days 20 minutes'), NULL], 'NULLS LAST');
[2025-05-26 15:39:40.146] [info] DEBUG LOG: ListReverseSortBooleanSeq1
[2025-05-26 15:39:40.146] [info] QUERY: Return list_reverse_sort([true, true, false, NULL]);
[2025-05-26 15:39:40.147] [info] DEBUG LOG: ListReverseSortBooleanSeq2
[2025-05-26 15:39:40.147] [info] QUERY: Return list_reverse_sort([true, true, false, NULL], 'NULLS LAST');
[2025-05-26 15:39:40.147] [info] DEBUG LOG: ListDistinctWithInt8
[2025-05-26 15:39:40.147] [info] QUERY: Return list_distinct([to_int8(1), to_int8(1), NULL, to_int8(-3), to_int8(1), to_int8(5)]);
[2025-05-26 15:39:40.148] [info] DEBUG LOG: ListDistinctWithInt16
[2025-05-26 15:39:40.148] [info] QUERY: Return list_distinct([to_int16(1), to_int16(1), NULL, to_int16(-3), to_int16(1), to_int16(5)]);
[2025-05-26 15:39:40.149] [info] DEBUG LOG: ListDistinctWithInt32
[2025-05-26 15:39:40.149] [info] QUERY: Return list_distinct([to_int32(1), to_int32(1), NULL, to_int32(-3), to_int32(1), to_int32(5)]);
[2025-05-26 15:39:40.149] [info] DEBUG LOG: ListDistinctWithInt64
[2025-05-26 15:39:40.149] [info] QUERY: Return list_distinct([1, 1, NULL, -3, 1, 5]);
[2025-05-26 15:39:40.151] [info] DEBUG LOG: ListDistinctWithUInt8
[2025-05-26 15:39:40.151] [info] QUERY: Return list_distinct([to_uint8(1), to_uint8(1), NULL, to_uint8(3), to_uint8(1), to_uint8(5)]);
[2025-05-26 15:39:40.151] [info] DEBUG LOG: ListDistinctWithUInt16
[2025-05-26 15:39:40.151] [info] QUERY: Return list_distinct([to_uint16(1), to_uint16(1), NULL, to_uint16(3), to_uint16(1), to_uint16(5)]);
[2025-05-26 15:39:40.152] [info] DEBUG LOG: ListDistinctWithUInt32
[2025-05-26 15:39:40.152] [info] QUERY: Return list_distinct([to_uint32(1), to_uint32(1), NULL, to_uint32(3), to_uint32(1), to_uint32(5)]);
[2025-05-26 15:39:40.153] [info] DEBUG LOG: ListDistinctWithUInt64
[2025-05-26 15:39:40.153] [info] QUERY: Return list_distinct([to_uint64(1), to_uint64(1), NULL, to_uint64(3), to_uint64(1), to_uint64(5)]);
[2025-05-26 15:39:40.154] [info] DEBUG LOG: ListDistinctWithInt128
[2025-05-26 15:39:40.154] [info] QUERY: Return list_distinct([to_int128(1), to_int128(1), NULL, to_int128(-3), to_int128(1), to_int128(5)]);
[2025-05-26 15:39:40.154] [info] DEBUG LOG: ListDistinctWithFloat
[2025-05-26 15:39:40.154] [info] QUERY: Return list_distinct([to_float(1.1), to_float(1.1), NULL, to_float(3.4), to_float(1.2), to_float(5.1)]);
[2025-05-26 15:39:40.155] [info] DEBUG LOG: ListDistinctWithDouble
[2025-05-26 15:39:40.155] [info] QUERY: Return list_distinct([1.1, 1.1, NULL, -3.4, 1.2, 5.1]);
[2025-05-26 15:39:40.157] [info] DEBUG LOG: ListDistinctBoolean
[2025-05-26 15:39:40.157] [info] QUERY: Return list_distinct([true, true, NULL, false, false]);
[2025-05-26 15:39:40.157] [info] DEBUG LOG: ListDistinctWithStringSeq1
[2025-05-26 15:39:40.157] [info] QUERY: Return list_distinct(['this is a long string', 'this is a long string', NULL, 'bbb', 'ccc', 'ccc']);
[2025-05-26 15:39:40.158] [info] DEBUG LOG: ListDistinctWithStringSeq2
[2025-05-26 15:39:40.158] [info] QUERY: MATCH (a:person) RETURN list_distinct([NULL, a.usedNames[1], a.usedNames[1], NULL])
[2025-05-26 15:39:40.159] [info] DEBUG LOG: ListDistinctWithDate
[2025-05-26 15:39:40.159] [info] QUERY: Return list_distinct([date('1992-05-03'), date('1993-05-03'), date('1993-05-03'), date('1994-05-03'), date('1993-05-03'), NULL]);
[2025-05-26 15:39:40.159] [info] DEBUG LOG: ListDistinctWithTimestamp
[2025-05-26 15:39:40.159] [info] QUERY: Return list_distinct([timestamp('1992-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), timestamp('1993-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), NULL]);
[2025-05-26 15:39:40.160] [info] DEBUG LOG: 
[2025-05-26 15:39:40.160] [info] QUERY: Return list_distinct([cast('1993-05-03 11:13:25.012343', "TIMESTAMP_TZ"), cast('1993-05-03 11:13:25.000343', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:25', "TIMESTAMP_TZ"), cast('1993-05-03 11:13:25', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:25', "TIMESTAMP_TZ"), NULL]);
[2025-05-26 15:39:40.161] [info] DEBUG LOG: 
[2025-05-26 15:39:40.161] [info] QUERY: Return list_distinct([cast('1993-05-03 11:13:25.012343', "TIMESTAMP_NS"), cast('1993-05-03 11:13:25.000343', "TIMESTAMP_NS"), cast('1994-05-03 11:13:25', "TIMESTAMP_NS"), cast('1993-05-03 11:13:25', "TIMESTAMP_NS"), cast('1994-05-03 11:13:25', "TIMESTAMP_NS"), NULL]);
[2025-05-26 15:39:40.162] [info] DEBUG LOG: 
[2025-05-26 15:39:40.162] [info] QUERY: Return list_distinct([cast('1993-05-03 11:13:25.012343', "TIMESTAMP_MS"), cast('1993-05-03 11:13:25.000343', "TIMESTAMP_MS"), cast('1994-05-03 11:13:25', "TIMESTAMP_MS"), cast('1993-05-03 11:13:25', "TIMESTAMP_MS"), cast('1994-05-03 11:13:25', "TIMESTAMP_MS"), NULL]);
[2025-05-26 15:39:40.163] [info] DEBUG LOG: 
[2025-05-26 15:39:40.163] [info] QUERY: Return list_distinct([cast('1993-05-03 11:13:25.012343', "TIMESTAMP_SEC"), cast('1993-05-03 11:13:25.000343', "TIMESTAMP_SEC"), cast('1994-05-03 11:13:25', "TIMESTAMP_SEC"), cast('1993-05-03 11:13:25', "TIMESTAMP_SEC"), cast('1994-05-03 11:13:25', "TIMESTAMP_SEC"), NULL]);
[2025-05-26 15:39:40.164] [info] DEBUG LOG: ListDistinctWithInterval
[2025-05-26 15:39:40.164] [info] QUERY: Return list_distinct([interval('2 hours 3 days 20 minutes'), interval('2 hours 3 days 20 minutes'), interval('3 hours 3 days 20 minutes'), interval('4 hours 3 days 20 minutes'), NULL]);
[2025-05-26 15:39:40.165] [info] DEBUG LOG: ListDistinctWithInternalID
[2025-05-26 15:39:40.165] [info] QUERY: MATCH (p:person) RETURN list_distinct([id(p), id(p), id(p)])
[2025-05-26 15:39:40.167] [info] DEBUG LOG: ListDistinctWithList
[2025-05-26 15:39:40.167] [info] QUERY: MATCH (p:person) RETURN list_distinct([p.usedNames, p.usedNames, ['Carmen','Fred']])
[2025-05-26 15:39:40.168] [info] DEBUG LOG: ListDistinctWithArray
[2025-05-26 15:39:40.168] [info] QUERY: MATCH (p:person) RETURN list_distinct([p.grades, p.grades, cast([80,78,34,83], "int64[4]")])
[2025-05-26 15:39:40.176] [info] DEBUG LOG: ListDistinctWithStruct
[2025-05-26 15:39:40.176] [info] QUERY: MATCH (o:organisation) RETURN list_distinct([o.state, o.state, {'revenue': cast(138, 'int16'), location: ["'toronto'", "'montr,eal'"], stock: {price: [96, 56], volume: 1000}}])
[2025-05-26 15:39:40.219] [info] DEBUG LOG: ListDistinctWithUUID
[2025-05-26 15:39:40.219] [info] QUERY: MATCH (p:person) RETURN list_distinct([p.u, p.u, cast('a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a14', "uuid")])
[2025-05-26 15:39:40.220] [info] DEBUG LOG: ListDistinctWithInt8
[2025-05-26 15:39:40.220] [info] QUERY: Return list_unique([to_int8(1), to_int8(1), NULL, to_int8(-3), to_int8(1), to_int8(5)]);
[2025-05-26 15:39:40.221] [info] DEBUG LOG: ListUniqueWithInt16
[2025-05-26 15:39:40.221] [info] QUERY: MATCH (m:movies) WHERE m.name='Roma' RETURN list_unique([NULL, to_int16(m.length), to_int16(m.length), to_int16(1)])
[2025-05-26 15:39:40.223] [info] DEBUG LOG: ListUniqueWithInt32
[2025-05-26 15:39:40.223] [info] QUERY: MATCH (m:movies) WHERE m.name='Roma' RETURN list_unique([NULL, to_int32(m.length), to_int32(m.length), to_int32(3)])
[2025-05-26 15:39:40.224] [info] DEBUG LOG: ListUniqueWithInt64
[2025-05-26 15:39:40.224] [info] QUERY: Return list_unique([1, 1, NULL, -3, 1, 5]);
[2025-05-26 15:39:40.224] [info] DEBUG LOG: ListUniqueWithUInt8
[2025-05-26 15:39:40.224] [info] QUERY: Return list_unique([to_uint8(1), to_uint8(1), NULL, to_uint8(3), to_uint8(1), to_uint8(5)]);
[2025-05-26 15:39:40.225] [info] DEBUG LOG: ListUniqueWithUInt16
[2025-05-26 15:39:40.225] [info] QUERY: Return list_unique([to_uint16(1), to_uint16(1), NULL, to_uint16(3), to_uint16(1), to_uint16(5)]);
[2025-05-26 15:39:40.226] [info] DEBUG LOG: ListUniqueWithUInt32
[2025-05-26 15:39:40.226] [info] QUERY: Return list_unique([to_uint32(1), to_uint32(1), NULL, to_uint32(3), to_uint32(1), to_uint32(5)]);
[2025-05-26 15:39:40.227] [info] DEBUG LOG: ListUniqueWithUInt64
[2025-05-26 15:39:40.227] [info] QUERY: Return list_unique([to_uint64(1), to_uint64(1), NULL, to_uint64(3), to_uint64(1), to_uint64(5)]);
[2025-05-26 15:39:40.227] [info] DEBUG LOG: ListUniqueWithInt128
[2025-05-26 15:39:40.227] [info] QUERY: Return list_unique([to_int128(1), to_int128(1), NULL, to_int128(3), to_int128(1), to_int128(5)]);
[2025-05-26 15:39:40.228] [info] DEBUG LOG: ListUniqueWithFloat
[2025-05-26 15:39:40.228] [info] QUERY: MATCH (p:person) WHERE p.ID=0 RETURN list_unique([NULL, to_float(p.gender), to_float(p.gender), to_float(4.5)])
[2025-05-26 15:39:40.229] [info] DEBUG LOG: ListUniqueWithDouble
[2025-05-26 15:39:40.229] [info] QUERY: Return list_unique([1.1, 1.1, NULL, -3.4, 1.2, 5.1]);
[2025-05-26 15:39:40.229] [info] DEBUG LOG: ListUniqueBoolean
[2025-05-26 15:39:40.229] [info] QUERY: Return list_unique([true, true, NULL, false, false]);
[2025-05-26 15:39:40.230] [info] DEBUG LOG: ListUniqueWithStringSeq1
[2025-05-26 15:39:40.230] [info] QUERY: Return list_unique(['this is long string', 'this is long string', NULL, 'bbb', 'ccc', 'aaa']);
[2025-05-26 15:39:40.230] [info] DEBUG LOG: ListUniqueWithStringSeq2
[2025-05-26 15:39:40.230] [info] QUERY: MATCH (a:person) RETURN list_unique([NULL, a.usedNames[1], 'sss', NULL])
[2025-05-26 15:39:40.231] [info] DEBUG LOG: ListUniqueWithDate
[2025-05-26 15:39:40.231] [info] QUERY: Return list_unique([date('1992-05-03'), date('1993-05-03'), date('1993-05-03'), date('1994-05-03'), date('1993-05-03'), NULL]);
[2025-05-26 15:39:40.232] [info] DEBUG LOG: ListUniqueWithTimestamp
[2025-05-26 15:39:40.232] [info] QUERY: Return list_unique([timestamp('1992-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), timestamp('1993-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), NULL]);
[2025-05-26 15:39:40.232] [info] DEBUG LOG: 
[2025-05-26 15:39:40.232] [info] QUERY: Return list_unique([cast('1994-05-03 11:13:25.123', "TIMESTAMP_SEC"), cast('1994-05-03 11:13:25.12345', "TIMESTAMP_SEC"), cast('1994-05-03 11:13:25', "TIMESTAMP_S"), cast('1994-05-03 11:13:24', "TIMESTAMP_SEC"), NULL]);
[2025-05-26 15:39:40.233] [info] DEBUG LOG: 
[2025-05-26 15:39:40.233] [info] QUERY: Return list_unique([cast('1994-05-03 11:13:25.123', "TIMESTAMP_NS"), cast('1994-05-03 11:13:25.12345', "TIMESTAMP_NS"), cast('1994-05-03 11:13:25', "TIMESTAMP_NS"), cast('1994-05-03 11:13:24', "TIMESTAMP_NS"), NULL]);
[2025-05-26 15:39:40.234] [info] DEBUG LOG: 
[2025-05-26 15:39:40.234] [info] QUERY: Return list_unique([cast('1994-05-03 11:13:25.123', "TIMESTAMP_MS"), cast('1994-05-03 11:13:25.12345', "TIMESTAMP_MS"), cast('1994-05-03 11:13:25', "TIMESTAMP_MS"), cast('1994-05-03 11:13:24', "TIMESTAMP_MS"), NULL]);
[2025-05-26 15:39:40.235] [info] DEBUG LOG: 
[2025-05-26 15:39:40.235] [info] QUERY: Return list_unique([cast('1994-05-03 11:13:25.123', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:25.12345', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:25', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:24', "TIMESTAMP_TZ"), NULL]);
[2025-05-26 15:39:40.236] [info] DEBUG LOG: ListUniqueWithInterval
[2025-05-26 15:39:40.236] [info] QUERY: Return list_unique([interval('2 hours 3 days 20 minutes'), interval('2 hours 3 days 20 minutes'), interval('3 hours 3 days 20 minutes'), interval('4 hours 3 days 20 minutes'), NULL]);
[2025-05-26 15:39:40.237] [info] DEBUG LOG: ListUniqueWithInternalID
[2025-05-26 15:39:40.237] [info] QUERY: MATCH (p:person) RETURN list_unique([id(p), id(p), id(p)]);
[2025-05-26 15:39:40.237] [info] DEBUG LOG: ListUniqueWithUUID
[2025-05-26 15:39:40.237] [info] QUERY: MATCH (p:person) RETURN list_unique([p.u, p.u, cast('A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11', 'uuid')]);
[2025-05-26 15:39:40.238] [info] DEBUG LOG: ListUniqueWithList
[2025-05-26 15:39:40.238] [info] QUERY: MATCH (p:person) RETURN list_unique([p.courseScoresPerTerm, p.courseScoresPerTerm, [[8,9],[9,10]]]), p.ID;
[2025-05-26 15:39:40.249] [info] DEBUG LOG: ListUniqueWithArray
[2025-05-26 15:39:40.249] [info] QUERY: MATCH (p:person) RETURN list_unique([p.grades, p.grades, cast([96,59,65,88], "int64[4]")]), p.ID;
[2025-05-26 15:39:40.250] [info] DEBUG LOG: ListUniqueWithStruct
[2025-05-26 15:39:40.250] [info] QUERY: MATCH (o:organisation) RETURN list_unique([o.state, o.state, {revenue: cast(558, "int16"), location: ["'very long city name'", "'new york'"], stock: {price: [22], volume: 99}}]), o.ID;
[2025-05-26 15:39:40.252] [info] DEBUG LOG: ListUniqueWithUUID
[2025-05-26 15:39:40.252] [info] QUERY: MATCH (p:person) RETURN list_unique([p.u, p.u, cast('A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11', 'uuid')]), p.ID;
[2025-05-26 15:39:40.253] [info] DEBUG LOG: ListAnyValueWithInt8
[2025-05-26 15:39:40.253] [info] QUERY: Return list_any_value([NULL, to_int8(1), to_int8(1), NULL, to_int8(-3), to_int8(1), to_int8(5)]);
[2025-05-26 15:39:40.254] [info] DEBUG LOG: ListAnyValueWithInt16
[2025-05-26 15:39:40.254] [info] QUERY: MATCH (m:movies) WHERE m.name='Roma' RETURN list_any_value([NULL, to_int16(m.length), to_int16(m.length)])
[2025-05-26 15:39:40.255] [info] DEBUG LOG: ListAnyValueWithInt32
[2025-05-26 15:39:40.255] [info] QUERY: MATCH (m:movies) WHERE m.name='Roma' RETURN list_any_value([NULL, to_int32(m.length), to_int32(m.length)])
[2025-05-26 15:39:40.255] [info] DEBUG LOG: ListAnyValueWithInt64
[2025-05-26 15:39:40.255] [info] QUERY: Return list_any_value([NULL, 1, 1, NULL, -3, 1, 5]);
[2025-05-26 15:39:40.256] [info] DEBUG LOG: ListAnyValueWithUInt8
[2025-05-26 15:39:40.256] [info] QUERY: Return list_any_value([NULL, to_uint8(1), to_uint8(1), NULL, to_uint8(3), to_uint8(1), to_uint8(5)]);
[2025-05-26 15:39:40.257] [info] DEBUG LOG: ListAnyValueWithUInt16
[2025-05-26 15:39:40.257] [info] QUERY: Return list_any_value([NULL, to_uint16(1), to_uint16(1), NULL, to_uint16(3), to_uint16(1), to_uint16(5)]);
[2025-05-26 15:39:40.257] [info] DEBUG LOG: ListAnyValueWithUInt32
[2025-05-26 15:39:40.257] [info] QUERY: Return list_any_value([NULL, to_uint32(1), to_uint32(1), NULL, to_uint32(3), to_uint32(1), to_uint32(5)]);
[2025-05-26 15:39:40.258] [info] DEBUG LOG: ListAnyValueWithUInt64
[2025-05-26 15:39:40.258] [info] QUERY: Return list_any_value([NULL, to_uint64(1), to_uint64(1), NULL, to_uint64(3), to_uint64(1), to_uint64(5)]);
[2025-05-26 15:39:40.259] [info] DEBUG LOG: ListAnyValueWithInt128
[2025-05-26 15:39:40.259] [info] QUERY: Return list_any_value([NULL, to_int128(1), to_int128(1), NULL, to_int128(-3), to_int128(1), to_int128(5)]);
[2025-05-26 15:39:40.260] [info] DEBUG LOG: ListAnyValueWithFloat
[2025-05-26 15:39:40.260] [info] QUERY: MATCH (p:person) WHERE p.ID=0 RETURN list_any_value([NULL, to_float(p.gender), to_float(p.gender), to_float(2.3)])
[2025-05-26 15:39:40.261] [info] DEBUG LOG: ListAnyValueWithDouble
[2025-05-26 15:39:40.261] [info] QUERY: Return list_any_value([NULL, 1.1, 1.1, NULL, -3.4, 1.2, 5.1]);
[2025-05-26 15:39:40.261] [info] DEBUG LOG: ListAnyValueBoolean
[2025-05-26 15:39:40.261] [info] QUERY: Return list_any_value([NULL, true, true, NULL, false]);
[2025-05-26 15:39:40.262] [info] DEBUG LOG: ListAnyValueWithStringSeq1
[2025-05-26 15:39:40.262] [info] QUERY: Return list_any_value([NULL, NULL, 'this is long string', 'this is long string', NULL, 'this is long string', 'ccc', 'aaa']);
[2025-05-26 15:39:40.262] [info] DEBUG LOG: ListAnyValueWithStringSeq2
[2025-05-26 15:39:40.262] [info] QUERY: MATCH (a:person) RETURN list_any_value([NULL, a.usedNames[1], 'sss'])
[2025-05-26 15:39:40.263] [info] DEBUG LOG: ListAnyValueWithDate
[2025-05-26 15:39:40.263] [info] QUERY: Return list_any_value([NULL, date('1992-05-03'), date('1993-05-03'), date('1993-05-03'), date('1994-05-03'), date('1993-05-03'), NULL]);
[2025-05-26 15:39:40.263] [info] DEBUG LOG: ListAnyValueWithTimestamp
[2025-05-26 15:39:40.263] [info] QUERY: Return list_any_value([NULL, timestamp('1992-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), timestamp('1993-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), NULL]);
[2025-05-26 15:39:40.264] [info] DEBUG LOG: 
[2025-05-26 15:39:40.264] [info] QUERY: Return list_any_value([NULL, cast('1992-05-03 11:13:25', "TIMESTAMP_NS"), cast('1994-05-03 11:13:25', "TIMESTAMP_NS"), cast('1993-05-03 11:13:25', "TIMESTAMP_NS"), cast('1994-05-03 11:13:25', "TIMESTAMP_NS"), NULL]);
[2025-05-26 15:39:40.265] [info] DEBUG LOG: 
[2025-05-26 15:39:40.265] [info] QUERY: Return list_any_value([NULL, cast('1992-05-03 11:13:25', "TIMESTAMP_MS"), cast('1994-05-03 11:13:25', "TIMESTAMP_MS"), cast('1993-05-03 11:13:25', "TIMESTAMP_MS"), cast('1994-05-03 11:13:25', "TIMESTAMP_MS"), NULL]);
[2025-05-26 15:39:40.266] [info] DEBUG LOG: 
[2025-05-26 15:39:40.266] [info] QUERY: Return list_any_value([NULL, cast('1992-05-03 11:13:25', "TIMESTAMP_S"), cast('1994-05-03 11:13:25', "TIMESTAMP_S"), cast('1993-05-03 11:13:25', "TIMESTAMP_S"), cast('1994-05-03 11:13:25', "TIMESTAMP_S"), NULL]);
[2025-05-26 15:39:40.267] [info] DEBUG LOG: 
[2025-05-26 15:39:40.267] [info] QUERY: Return list_any_value([NULL, cast('1992-05-03 11:13:25', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:25', "TIMESTAMP_TZ"), cast('1993-05-03 11:13:25', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:25', "TIMESTAMP_TZ"), NULL]);
[2025-05-26 15:39:40.268] [info] DEBUG LOG: ListAnyValueWithInterval
[2025-05-26 15:39:40.268] [info] QUERY: Return list_any_value([NULL, interval('2 hours 3 days 20 minutes'), interval('2 hours 3 days 20 minutes'), interval('3 hours 3 days 20 minutes'), interval('4 hours 3 days 20 minutes'), NULL]);
[2025-05-26 15:39:40.268] [info] DEBUG LOG: ListAnyValueWithList
[2025-05-26 15:39:40.268] [info] QUERY: Return list_any_value([NULL, [1,2,3], [3,4,5]]);
[2025-05-26 15:39:40.269] [info] DEBUG LOG: ListAnyValueWithInternalID
[2025-05-26 15:39:40.269] [info] QUERY: MATCH (p:person) return list_any_value([NULL, id(p), id(p), id(p)]);
[2025-05-26 15:39:40.270] [info] DEBUG LOG: ListProductSeq1
[2025-05-26 15:39:40.270] [info] QUERY: Return list_product([1, 2, 3, NULL]);
[2025-05-26 15:39:40.271] [info] DEBUG LOG: ListProductSeq2
[2025-05-26 15:39:40.271] [info] QUERY: Return list_product([1.111111111111, 2.2, 3.3, NULL]);
[2025-05-26 15:39:40.271] [info] DEBUG LOG: ListProductSeq3
[2025-05-26 15:39:40.271] [info] QUERY: Return list_product([to_int64(NULL), NULL, NULL, NULL]);
[2025-05-26 15:39:40.271] [info] DEBUG LOG: ListProductSeq4
[2025-05-26 15:39:40.271] [info] QUERY: Return list_product([0, NULL, NULL, NULL]);
[2025-05-26 15:39:40.272] [info] DEBUG LOG: ListProductSeq5
[2025-05-26 15:39:40.272] [info] QUERY: Return list_product([-1, -2, -3]);
[2025-05-26 15:39:40.273] [info] DEBUG LOG: ListProductInt8
[2025-05-26 15:39:40.273] [info] QUERY: Return list_product([to_int8(-1), to_int8(2), NULL, to_int8(3)]);
[2025-05-26 15:39:40.274] [info] DEBUG LOG: ListProductInt16
[2025-05-26 15:39:40.274] [info] QUERY: Return list_product([to_int16(1), to_int16(2), to_int16(3), NULL]);
[2025-05-26 15:39:40.275] [info] DEBUG LOG: ListProductInt32
[2025-05-26 15:39:40.275] [info] QUERY: Return list_product([to_int32(-10), to_int32(20), to_int32(-5), NULL]);
[2025-05-26 15:39:40.275] [info] DEBUG LOG: ListProductFloat
[2025-05-26 15:39:40.275] [info] QUERY: Return list_product([to_float(1.111111111111), to_float(2.2), to_float(3.3), NULL]);
[2025-05-26 15:39:40.276] [info] DEBUG LOG: ListProductSerial
[2025-05-26 15:39:40.276] [info] QUERY: Return list_product([to_serial(1), to_serial(2)]);
[2025-05-26 15:39:40.276] [info] DEBUG LOG: ListProductUnsigned
[2025-05-26 15:39:40.276] [info] QUERY: Return list_product([to_uint8(1), to_uint8(10), to_uint8(3)]);
[2025-05-26 15:39:40.277] [info] DEBUG LOG: 
[2025-05-26 15:39:40.277] [info] QUERY: Return list_product([to_uint16(4), to_uint16(10), to_uint16(3)]);
[2025-05-26 15:39:40.277] [info] DEBUG LOG: 
[2025-05-26 15:39:40.277] [info] QUERY: Return list_product([to_uint32(9), to_uint32(2), to_uint32(3)]);
[2025-05-26 15:39:40.278] [info] DEBUG LOG: 
[2025-05-26 15:39:40.278] [info] QUERY: Return list_product([to_uint64(9), to_uint64(2), to_uint64(3)]);
[2025-05-26 15:39:40.278] [info] DEBUG LOG: ListProductWithInt128
[2025-05-26 15:39:40.278] [info] QUERY: Return list_product([to_int128(1), to_int128(2), to_int128(3), NULL]);
[2025-05-26 15:39:40.279] [info] DEBUG LOG: ListProductError
[2025-05-26 15:39:40.279] [info] QUERY: Return list_product(["ok"]);
[2025-05-26 15:39:40.279] [info] DEBUG LOG: ListToStringInt128
[2025-05-26 15:39:40.279] [info] QUERY: RETURN LIST_TO_STRING([CAST(5, 'INT128'), CAST(7, 'INT128'), CAST(10, 'INT128')], '--')
[2025-05-26 15:39:40.280] [info] DEBUG LOG: ListToStringInt64
[2025-05-26 15:39:40.280] [info] QUERY: RETURN LIST_TO_STRING([CAST(255, 'INT64'), CAST(-51, 'INT64'), CAST(3132, 'INT64')], '--')
[2025-05-26 15:39:40.282] [info] DEBUG LOG: ListToStringBOOL
[2025-05-26 15:39:40.282] [info] QUERY: RETURN LIST_TO_STRING([true, false, false, true], '/')
[2025-05-26 15:39:40.282] [info] DEBUG LOG: ListToStringUUID
[2025-05-26 15:39:40.282] [info] QUERY: MATCH (p:person) return list_to_string(collect(p.u), '*')
[2025-05-26 15:39:40.284] [info] DEBUG LOG: ListToStringDate
[2025-05-26 15:39:40.284] [info] QUERY: MATCH (p:person) return list_to_string(collect(p.birthdate), '+')
[2025-05-26 15:39:40.284] [info] DEBUG LOG: ListToStringTimestamp
[2025-05-26 15:39:40.284] [info] QUERY: MATCH (p:person) return list_to_string(collect(p.registerTime), '==')
[2025-05-26 15:39:40.285] [info] DEBUG LOG: ListToStringList
[2025-05-26 15:39:40.285] [info] QUERY: MATCH (p:person) return list_to_string(p.workedHours, ',')
[2025-05-26 15:39:40.286] [info] DEBUG LOG: ListToStringStruct
[2025-05-26 15:39:40.286] [info] QUERY: MATCH (o:organisation) return list_to_string(collect(o.state), '|')
[2025-05-26 15:39:40.286] [info] DEBUG LOG: ListToStringArray
[2025-05-26 15:39:40.286] [info] QUERY: MATCH (p:person) return list_to_string(collect(p.grades), '/')
[2025-05-26 15:39:40.287] [info] DEBUG LOG: 2385
[2025-05-26 15:39:40.287] [info] QUERY: RETURN [[23, 432], [], [NULL]];
[       OK ] function~list.FunctionList (1808 ms)
[----------] 2 tests from function~list (3109 ms total)

[----------] Global test environment tear-down
[==========] 2 tests from 1 test suite ran. (3110 ms total)
[  PASSED  ] 2 tests.
[2025-05-26 15:41:50.227] [info] Starting runner in Rewrite Mode
[==========] Running 2 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 2 tests from function~list
[ RUN      ] function~list.ListHasAllTest
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/schema.cypher
Starting to execute query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Executed query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Starting to execute query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Executed query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Starting to execute query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Executed query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Starting to execute query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Executed query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Starting to execute query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Executed query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Starting to execute query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Executed query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Starting to execute query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Executed query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Starting to execute query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
Executed query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/copy.cypher
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Starting to execute query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Executed query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Starting to execute query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Executed query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Starting to execute query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Executed query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Starting to execute query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Executed query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Starting to execute query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Executed query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Starting to execute query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
Executed query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
[2025-05-26 15:41:51.575] [info] DEBUG LOG: 
[2025-05-26 15:41:51.575] [info] QUERY: RETURN list_has_all([4, 5, 6], [4, 6])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.615] [info] DEBUG LOG: 
[2025-05-26 15:41:51.615] [info] QUERY: RETURN list_has_all([4, 5, 6], [6, 4])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.616] [info] DEBUG LOG: 
[2025-05-26 15:41:51.616] [info] QUERY: RETURN list_has_all([4, 5, 6], [4])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.617] [info] DEBUG LOG: 
[2025-05-26 15:41:51.617] [info] QUERY: RETURN list_has_all([4, 5, 6], [4,5,6])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.620] [info] DEBUG LOG: 
[2025-05-26 15:41:51.620] [info] QUERY: RETURN list_has_all([TRUE, FALSE, FALSE], [FALSE, TRUE])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.624] [info] DEBUG LOG: 
[2025-05-26 15:41:51.624] [info] QUERY: RETURN list_has_all([[2,3], [1,2], [5,4]], [[5,4]])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.642] [info] DEBUG LOG: 
[2025-05-26 15:41:51.642] [info] QUERY: RETURN list_has_all([[2,3], [1,2], [5,4]], [[1,3]])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.643] [info] DEBUG LOG: 
[2025-05-26 15:41:51.643] [info] QUERY: RETURN list_has_all([{a: 5, b:3}, {c: 2, d: 4}], [{c:2, d:4}])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.671] [info] DEBUG LOG: 
[2025-05-26 15:41:51.671] [info] QUERY: RETURN list_has_all([{a: 5, b:3}, {c: 2, d: 4}], [{c:2, e:4}])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.672] [info] DEBUG LOG: 
[2025-05-26 15:41:51.672] [info] QUERY: RETURN list_has_all([5,6,12], [null])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.674] [info] DEBUG LOG: 
[2025-05-26 15:41:51.674] [info] QUERY: RETURN list_has_all([null], [null])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.675] [info] DEBUG LOG: 
[2025-05-26 15:41:51.675] [info] QUERY: RETURN list_has_all([], [null])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.677] [info] DEBUG LOG: 
[2025-05-26 15:41:51.677] [info] QUERY: RETURN list_has_all([], [])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.678] [info] DEBUG LOG: 
[2025-05-26 15:41:51.678] [info] QUERY: RETURN list_has_all([null], [])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.678] [info] DEBUG LOG: 
[2025-05-26 15:41:51.678] [info] QUERY: RETURN list_has_all(null, [1,3,2])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.679] [info] DEBUG LOG: 
[2025-05-26 15:41:51.679] [info] QUERY: RETURN list_has_all([1,2], null)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.679] [info] DEBUG LOG: 
[2025-05-26 15:41:51.679] [info] QUERY: RETURN list_has_all(null, null)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.680] [info] DEBUG LOG: 
[2025-05-26 15:41:51.680] [info] QUERY: RETURN LIST_CAT(['7', '3'], [])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.682] [info] DEBUG LOG: 
[2025-05-26 15:41:51.682] [info] QUERY: RETURN LIST_CAT([], ['3', '10'])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.683] [info] DEBUG LOG: 
[2025-05-26 15:41:51.683] [info] QUERY: RETURN LIST_CAT([], [])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.683] [info] DEBUG LOG: 
[2025-05-26 15:41:51.683] [info] QUERY: RETURN LIST_CAT(['7', '3'], null)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.684] [info] DEBUG LOG: 
[2025-05-26 15:41:51.684] [info] QUERY: RETURN LIST_CAT(null, ['3', '10'])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:51.684] [info] DEBUG LOG: 
[2025-05-26 15:41:51.684] [info] QUERY: RETURN LIST_CAT(null, null)
GOT HERE 
GOT HERE 222
[       OK ] function~list.ListHasAllTest (1319 ms)
[ RUN      ] function~list.FunctionList
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/schema.cypher
Starting to execute query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Executed query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Starting to execute query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Executed query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Starting to execute query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Executed query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Starting to execute query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Executed query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Starting to execute query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Executed query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Starting to execute query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Executed query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Starting to execute query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Executed query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Starting to execute query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
Executed query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/copy.cypher
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Starting to execute query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Executed query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Starting to execute query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Executed query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Starting to execute query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Executed query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Starting to execute query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Executed query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Starting to execute query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Executed query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Starting to execute query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
Executed query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
[2025-05-26 15:41:52.883] [info] DEBUG LOG: ListReverse
[2025-05-26 15:41:52.883] [info] QUERY: RETURN list_reverse([1,2,3]),            list_reverse(cast([1,2,3], 'INT32[]')),             list_reverse(cast([1,2,3], 'INT16[]')),             list_reverse(cast([1,2,3], 'INT8[]')),             list_reverse(cast([1,2,3], 'INT128[]')),             list_reverse(cast([1,2,3], 'UINT64[]')),             list_reverse(cast([1,2,3], 'UINT32[]')),             list_reverse(cast([1,2,3], 'UINT16[]')),             list_reverse(cast([1,2,3], 'UINT8[]')),             list_reverse(cast([1.1,2.1,3.1], 'FLOAT[]')),             list_reverse(cast([1.1,2.1,3.1], 'DOUBLE[]')),             list_reverse(cast([date('2020-01-01'), date('2020-01-02'), date('2020-01-03')], 'DATE[]')),             list_reverse(cast([timestamp('2020-01-01 00:00:00'), timestamp('2020-01-02 00:00:00'), timestamp('2020-01-03 00:00:00')], 'TIMESTAMP[]')),             list_reverse(cast([timestamp('2020-01-01 00:00:00'), timestamp('2020-01-02 00:00:00'), timestamp('2020-01-03 00:00:00')], 'TIMESTAMP_NS[]')),             list_reverse(cast([timestamp('2020-01-01 00:00:00'), timestamp('2020-01-02 00:00:00'), timestamp('2020-01-03 00:00:00')], 'TIMESTAMP_MS[]')),             list_reverse(cast([timestamp('2020-01-01 00:00:00'), timestamp('2020-01-02 00:00:00'), timestamp('2020-01-03 00:00:00')], 'TIMESTAMP_SEC[]')),             list_reverse(cast([timestamp('2020-01-01 00:00:00'), timestamp('2020-01-02 00:00:00'), timestamp('2020-01-03 00:00:00')], 'TIMESTAMP_TZ[]')),             list_reverse(cast([interval('1 days'), interval('2 days'), interval('3 days')], 'INTERVAL[]')),             list_reverse(['long string 1', 'long string 2']),             list_reverse(cast(['long string 1', 'long string 2'], 'BLOB[]')),             list_reverse(cast(['47c256ed-b2c4-40a0-8135-98d9c25329f7', '374a9e4a-632e-47b5-9e3d-d37b08b7980b'], 'UUID[]')),             list_reverse([[1,2,3], [5,6], [7,8,9]]),             list_reverse([map([1,2,3], [11,22,33]), map([5,6], [55,66])]),             list_reverse([{a:1, b:2}, {a:3, b:4}]),             list_reverse([union_value(a:=1), union_value(a:=2)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.000] [info] DEBUG LOG: 
[2025-05-26 15:41:53.000] [info] QUERY: MATCH p = (a:person)-[:knows*1]->(b:person) WHERE a.ID=0 RETURN list_reverse(nodes(p)), list_reverse(rels(p)), list_reverse(properties(nodes(p), 'fName')) ;
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.036] [info] DEBUG LOG: ListSliceOutOfRange
[2025-05-26 15:41:53.036] [info] QUERY: RETURN [1,2,3][:100], [1,2,3][-1:2], [1,2,3][2:1], [1,2,3][1:-1], [1,2,3][3:4], 'abc'[-1:4]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.059] [info] DEBUG LOG: ListAddOperation
[2025-05-26 15:41:53.059] [info] QUERY: MATCH (p:person)-[:knows]->(p1:person) RETURN p.courseScoresPerTerm + p1.courseScoresPerTerm
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.066] [info] DEBUG LOG: ListLiteral
[2025-05-26 15:41:53.066] [info] QUERY: RETURN [1,,3];
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.067] [info] DEBUG LOG: 
[2025-05-26 15:41:53.067] [info] QUERY: UNWIND [1,,3] AS a RETURN a IS NULL;
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.076] [info] DEBUG LOG: 
[2025-05-26 15:41:53.076] [info] QUERY: RETURN [1, 2.0];
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.077] [info] DEBUG LOG: 
[2025-05-26 15:41:53.077] [info] QUERY: RETURN [null, 3.0, 3];
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.078] [info] DEBUG LOG: 
[2025-05-26 15:41:53.078] [info] QUERY: RETURN [1, 'a'];
[2025-05-26 15:41:53.079] [info] DEBUG LOG: 
[2025-05-26 15:41:53.079] [info] QUERY: RETURN [1,,'a'];
[2025-05-26 15:41:53.079] [info] DEBUG LOG: 
[2025-05-26 15:41:53.079] [info] QUERY: RETURN [1, NULL];
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.080] [info] DEBUG LOG: 
[2025-05-26 15:41:53.080] [info] QUERY: RETURN [];
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.081] [info] DEBUG LOG: 
[2025-05-26 15:41:53.081] [info] QUERY: RETURN [NULL, NULL];
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.081] [info] DEBUG LOG: 
[2025-05-26 15:41:53.081] [info] QUERY: RETURN ['a', , []];
[2025-05-26 15:41:53.085] [info] DEBUG LOG: 
[2025-05-26 15:41:53.085] [info] QUERY: RETURN [[], , []];
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.087] [info] DEBUG LOG: 
[2025-05-26 15:41:53.087] [info] QUERY: RETURN [[1], , [2]];
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.089] [info] DEBUG LOG: 
[2025-05-26 15:41:53.089] [info] QUERY: RETURN [[1], , ['a']];
[2025-05-26 15:41:53.090] [info] DEBUG LOG: NodeLISTPropertiesTest
[2025-05-26 15:41:53.090] [info] QUERY: MATCH (a:person) RETURN a.workedHours, a.usedNames, a.courseScoresPerTerm
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.091] [info] DEBUG LOG: RelLISTPropertyTest
[2025-05-26 15:41:53.091] [info] QUERY: MATCH (a:person)-[e:knows]->(b:person) RETURN e.comments
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.093] [info] DEBUG LOG: ListCreate1
[2025-05-26 15:41:53.093] [info] QUERY: MATCH (a:person) RETURN [a.age + 1, a.age * 2], [a.eyeSight], [a.isStudent AND a.isWorker], [a.birthdate], [a.registerTime], [a.lastJobDuration]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.105] [info] DEBUG LOG: ListExtractNegativeIdx
[2025-05-26 15:41:53.105] [info] QUERY: RETURN list_extract([5,2,8], -1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.106] [info] DEBUG LOG: 
[2025-05-26 15:41:53.106] [info] QUERY: RETURN list_extract([5,2,8], -2)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.107] [info] DEBUG LOG: 
[2025-05-26 15:41:53.107] [info] QUERY: RETURN list_extract([5,2,8], -3)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.107] [info] DEBUG LOG: 
[2025-05-26 15:41:53.107] [info] QUERY: RETURN list_extract([5,2,8], -4)
[2025-05-26 15:41:53.107] [info] DEBUG LOG: ListExtractZeroIdx
[2025-05-26 15:41:53.107] [info] QUERY: RETURN list_extract([5,2,8], 0)
[2025-05-26 15:41:53.108] [info] DEBUG LOG: ListExtractPositiveIdx
[2025-05-26 15:41:53.108] [info] QUERY: RETURN list_extract([5,2,8], 1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.108] [info] DEBUG LOG: 
[2025-05-26 15:41:53.108] [info] QUERY: RETURN list_extract([5,2,8], 2)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.109] [info] DEBUG LOG: 
[2025-05-26 15:41:53.109] [info] QUERY: RETURN list_extract([5,2,8], 3)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.109] [info] DEBUG LOG: 
[2025-05-26 15:41:53.109] [info] QUERY: RETURN list_extract([5,2,8], 4)
[2025-05-26 15:41:53.109] [info] DEBUG LOG: ListExtractListOfINT64
[2025-05-26 15:41:53.109] [info] QUERY: MATCH (a:person) RETURN list_extract(a.workedHours, 1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.110] [info] DEBUG LOG: 
[2025-05-26 15:41:53.110] [info] QUERY: MATCH (a:person) RETURN list_extract(a.workedHours, -1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.111] [info] DEBUG LOG: ListExtractListOfINT32
[2025-05-26 15:41:53.111] [info] QUERY: MATCH (m:movies) RETURN list_extract([m.length], 1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.112] [info] DEBUG LOG: ListExtractListOfINT16
[2025-05-26 15:41:53.112] [info] QUERY: MATCH (:person)-[e:studyAt]->(:organisation) RETURN list_extract([e.length], 1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.113] [info] DEBUG LOG: ListExtractLisitOfINT8
[2025-05-26 15:41:53.113] [info] QUERY: MATCH (:person)-[e:studyAt]->(:organisation) RETURN list_extract([e.level], 1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.114] [info] DEBUG LOG: ListExtractListOfUINT64
[2025-05-26 15:41:53.114] [info] QUERY: MATCH (:person)-[e:studyAt]->(:organisation) RETURN list_extract([e.code], 1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.115] [info] DEBUG LOG: ListExtractListOfUINT32
[2025-05-26 15:41:53.115] [info] QUERY: MATCH (:person)-[e:studyAt]->(:organisation) RETURN list_extract([e.temperature], 1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.116] [info] DEBUG LOG: ListExtractListOfUINT16
[2025-05-26 15:41:53.116] [info] QUERY: MATCH (:person)-[e:studyAt]->(:organisation) RETURN list_extract([e.ulength], 1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.117] [info] DEBUG LOG: ListExtractListOfUINT8
[2025-05-26 15:41:53.117] [info] QUERY: MATCH (:person)-[e:studyAt]->(:organisation) RETURN list_extract([e.ulevel], 1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.118] [info] DEBUG LOG: ListExtractListOfINT128
[2025-05-26 15:41:53.118] [info] QUERY: MATCH (:person)-[e:studyAt]->(:organisation) RETURN list_extract([e.hugedata], 1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.119] [info] DEBUG LOG: ListExtractListOfFloat
[2025-05-26 15:41:53.119] [info] QUERY: MATCH (p:person) RETURN list_extract([p.height], 1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.120] [info] DEBUG LOG: ListExtractListOfStrings
[2025-05-26 15:41:53.120] [info] QUERY: MATCH (a:person) RETURN list_extract(a.usedNames, 1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.120] [info] DEBUG LOG: ListExtractLiteralListOfBools
[2025-05-26 15:41:53.120] [info] QUERY: MATCH (a:person) RETURN list_extract([true, false, true, false], a.gender)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.122] [info] DEBUG LOG: ListExtractLiteralListOfDoubles
[2025-05-26 15:41:53.122] [info] QUERY: MATCH (a:person) RETURN list_extract([4.351, 6.13, 94.2, 3.1], a.gender)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.124] [info] DEBUG LOG: ListExtractLiteralListOfDate
[2025-05-26 15:41:53.124] [info] QUERY: MATCH (a:person) RETURN list_extract([date('1992-05-03'), a.birthdate], a.gender)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.125] [info] DEBUG LOG: ListExtractLiteralListOfTimestamp
[2025-05-26 15:41:53.125] [info] QUERY: MATCH (a:person) RETURN list_extract([timestamp('1992-05-03 11:13:25'), a.registerTime], a.gender)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.126] [info] DEBUG LOG: ListExtractLiteralListOfInterval
[2025-05-26 15:41:53.126] [info] QUERY: MATCH (a:person) RETURN list_extract([interval('2 hours 3 days 20 minutes'), a.lastJobDuration], a.gender)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.127] [info] DEBUG LOG: ListExtractListOfListOfInts
[2025-05-26 15:41:53.127] [info] QUERY: MATCH (a:person) RETURN list_element(a.courseScoresPerTerm, 1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.127] [info] DEBUG LOG: ListExtractList
[2025-05-26 15:41:53.127] [info] QUERY: MATCH (a:person) RETURN a.usedNames[1]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.128] [info] DEBUG LOG: ListExtractDoubleExtract
[2025-05-26 15:41:53.128] [info] QUERY: MATCH (a:person) RETURN a.courseScoresPerTerm[1][1]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.131] [info] DEBUG LOG: ListExtractInternalIDTest
[2025-05-26 15:41:53.131] [info] QUERY: MATCH (a:person) RETURN list_extract([id(a)], 1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.132] [info] DEBUG LOG: ListExtractSliceListOfStrings
[2025-05-26 15:41:53.132] [info] QUERY: MATCH (a:person) RETURN a.usedNames[1][3:7]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.132] [info] DEBUG LOG: ListExtractWithNull
[2025-05-26 15:41:53.132] [info] QUERY: RETURN list_extract([1,3,null,null,2],3)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.134] [info] DEBUG LOG: ExtractNullList
[2025-05-26 15:41:53.134] [info] QUERY: RETURN list_extract(null,1)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.134] [info] DEBUG LOG: ListExtractNullPos
[2025-05-26 15:41:53.134] [info] QUERY: RETURN LIST_EXTRACT([3,4,5],NULL)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.135] [info] DEBUG LOG: SliceUTF8String
[2025-05-26 15:41:53.135] [info] QUERY: Return '这是一个中文句子'[2:5]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.136] [info] DEBUG LOG: ListLenListOfInts
[2025-05-26 15:41:53.136] [info] QUERY: MATCH (a:person) RETURN size(a.workedHours)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.137] [info] DEBUG LOG: ListSize
[2025-05-26 15:41:53.137] [info] QUERY: MATCH (a:person) RETURN size(a.courseScoresPerTerm)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.137] [info] DEBUG LOG: EmptyListContains
[2025-05-26 15:41:53.137] [info] QUERY: RETURN 'a' IN [];
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.141] [info] DEBUG LOG: ListConcatListOfInts
[2025-05-26 15:41:53.141] [info] QUERY: MATCH (a:person) RETURN list_concat(a.workedHours, [a.age, a.gender])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.143] [info] DEBUG LOG: ListConcatIntLiteral
[2025-05-26 15:41:53.143] [info] QUERY: MATCH (a:person) RETURN list_cat(a.workedHours, [3])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.143] [info] DEBUG LOG: ListConcatListOfStrings
[2025-05-26 15:41:53.143] [info] QUERY: MATCH (a:person) RETURN array_concat(a.usedNames, [a.fName])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.144] [info] DEBUG LOG: ListConcatListOfListOfInts
[2025-05-26 15:41:53.144] [info] QUERY: MATCH (a:person) RETURN array_cat(a.courseScoresPerTerm, [[a.age, a.age], [a.gender]])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.152] [info] DEBUG LOG: ListConcatEmpty
[2025-05-26 15:41:53.152] [info] QUERY: RETURN LIST_CONCAT([], [])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.152] [info] DEBUG LOG: ListConcatEmptyAndNull
[2025-05-26 15:41:53.152] [info] QUERY: RETURN LIST_CONCAT([], [NULL])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.152] [info] DEBUG LOG: ListConcatNullAndEmpty
[2025-05-26 15:41:53.152] [info] QUERY: RETURN LIST_CONCAT([NULL], [])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.153] [info] DEBUG LOG: ListConcatNullAndNull
[2025-05-26 15:41:53.153] [info] QUERY: RETURN LIST_CONCAT([NULL], [NULL])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.153] [info] DEBUG LOG: ListConcatEmptyAndEmpty
[2025-05-26 15:41:53.153] [info] QUERY: RETURN LIST_CONCAT([], [])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.153] [info] DEBUG LOG: ListConcatINT64AndNull
[2025-05-26 15:41:53.153] [info] QUERY: RETURN LIST_CONCAT([1,2,NULL], [to_int64(NULL)])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.157] [info] DEBUG LOG: 
[2025-05-26 15:41:53.157] [info] QUERY: RETURN LIST_CONCAT([1,2,NULL], [cast(NULL, "int64")])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.167] [info] DEBUG LOG: ListConcatNullAndINT64
[2025-05-26 15:41:53.167] [info] QUERY: RETURN LIST_CONCAT([to_int64(NULL)], [NULL, 1, 3])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.168] [info] DEBUG LOG: 
[2025-05-26 15:41:53.168] [info] QUERY: RETURN LIST_CONCAT([cast(NULL, "int64")], [NULL, 1, 3])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.175] [info] DEBUG LOG: ListPositionListOfInts
[2025-05-26 15:41:53.175] [info] QUERY: MATCH (a:person) RETURN list_position(a.workedHours, 5)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.175] [info] DEBUG LOG: ListPositionListOfStrings
[2025-05-26 15:41:53.175] [info] QUERY: MATCH (a:person) RETURN array_position(a.usedNames, "Grad")
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.176] [info] DEBUG LOG: ListPositionLiteralListOfInts
[2025-05-26 15:41:53.176] [info] QUERY: MATCH (o:organisation) RETURN list_indexof([7, 4, 100, 6, 1, 10], o.ID)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.177] [info] DEBUG LOG: ListPositionListOfListOfInts
[2025-05-26 15:41:53.177] [info] QUERY: MATCH (a:person) RETURN array_indexof(a.courseScoresPerTerm, [8])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.178] [info] DEBUG LOG: ListPositionLiteralListOfListOfBools
[2025-05-26 15:41:53.178] [info] QUERY: MATCH (a:person) RETURN array_indexof([[true, false], [false, true], [false, false]], [a.isStudent, a.isWorker])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.184] [info] DEBUG LOG: ListPositionLiteralListOfListOfDoubles
[2025-05-26 15:41:53.184] [info] QUERY: MATCH (a:person) RETURN array_indexof([[5.0], [4.9], [4.8]], [a.eyeSight])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.186] [info] DEBUG LOG: ListPositionLiteralListOfListOfStrings
[2025-05-26 15:41:53.186] [info] QUERY: MATCH (a:person) RETURN array_indexof([['Aida'], ['Wolfeschlegelstein', 'Daniel'], ['Grad']], a.usedNames)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.188] [info] DEBUG LOG: ListPositionLiteralListOfListOfDates
[2025-05-26 15:41:53.188] [info] QUERY: MATCH (a:person) RETURN array_indexof([[date('1900-01-01')], [date('1900-01-01'), date('1900-05-01')], [date('1980-10-26')]], [a.birthdate])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.200] [info] DEBUG LOG: ListPositionLiteralListOfListOfTimestamps
[2025-05-26 15:41:53.200] [info] QUERY: MATCH (a:person) RETURN array_indexof([[timestamp('2011-08-20 11:25:30')], [timestamp('1976-12-23 11:21:42'), timestamp('1972-07-31 13:22:30.678559')], [timestamp('2023-02-21 13:25:30')]], [a.registerTime])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.201] [info] DEBUG LOG: ListPositionLiteralListOfListOfIntervals
[2025-05-26 15:41:53.201] [info] QUERY: MATCH (a:person) RETURN array_indexof([[interval('3 years 2 days 13 hours 2 minutes')], [interval('18 minutes 24 milliseconds')], [interval('10 years 5 months 13 hours 24 us')]], [a.lastJobDuration])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.202] [info] DEBUG LOG: ListPositionLiteralListOfListOfListOfIntervals
[2025-05-26 15:41:53.202] [info] QUERY: MATCH (a:person) RETURN array_indexof([[[7,4],[8,8],[9]]], a.courseScoresPerTerm)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.215] [info] DEBUG LOG: ListPositionUnmatchedDataType
[2025-05-26 15:41:53.215] [info] QUERY: MATCH (a:person) RETURN array_indexof(a.workedHours, a.registerTime)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.215] [info] DEBUG LOG: ListIn
[2025-05-26 15:41:53.215] [info] QUERY: RETURN 1 IN [2,3,4], 2.0 IN [2,3,4], 3 IN [0,0,3]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.226] [info] DEBUG LOG: 
[2025-05-26 15:41:53.226] [info] QUERY: RETURN [1+1] IN [[2], [3], [3,4,5]], "str" IN ["a", "Xiyang", "str"]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.241] [info] DEBUG LOG: 
[2025-05-26 15:41:53.241] [info] QUERY: MATCH (a:person) RETURN a.ID + 1, a.workedHours, (a.ID + 1) IN a.workedHours
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.248] [info] DEBUG LOG: ListContainsListOfInts
[2025-05-26 15:41:53.248] [info] QUERY: MATCH (a:person) RETURN list_contains(a.workedHours, 5)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.248] [info] DEBUG LOG: ListContainsUnmatchType
[2025-05-26 15:41:53.248] [info] QUERY: MATCH (a:person) where list_contains(cast([0, 7] as int8[]), a.ID) return a.ID
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.261] [info] DEBUG LOG: 
[2025-05-26 15:41:53.261] [info] QUERY: MATCH (a:person) where list_contains(cast([2, 3] as int16[]), a.ID) return a.ID
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.261] [info] DEBUG LOG: 
[2025-05-26 15:41:53.261] [info] QUERY: MATCH (a:person) where list_contains(cast([5] as int32[]), a.ID) return a.ID
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.263] [info] DEBUG LOG: 
[2025-05-26 15:41:53.263] [info] QUERY: MATCH (a:person) where list_contains(cast([7, 8] as int128[]), a.ID) return a.ID
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.263] [info] DEBUG LOG: 
[2025-05-26 15:41:53.263] [info] QUERY: MATCH (a:person) where list_contains(cast(['A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11', 'a0eebc99-9c0b4ef8-bb6d6bb9-bd380a15'] as uuid[]), a.u) return a.ID
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.265] [info] DEBUG LOG: ListContainsSelect
[2025-05-26 15:41:53.265] [info] QUERY: MATCH (a:person) WHERE list_contains(a.courseScoresPerTerm, [8]) RETURN a.ID
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.267] [info] DEBUG LOG: ListContainsListOfStrings
[2025-05-26 15:41:53.267] [info] QUERY: MATCH (a:person) RETURN list_has(a.usedNames, "Grad")
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.268] [info] DEBUG LOG: ListContainsListOfListOfInts
[2025-05-26 15:41:53.268] [info] QUERY: MATCH (a:person) RETURN array_contains(a.courseScoresPerTerm, [8])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.268] [info] DEBUG LOG: ListContainsLiteralListOfInts
[2025-05-26 15:41:53.268] [info] QUERY: MATCH (o:organisation) RETURN array_has([7,6,1], o.ID)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.269] [info] DEBUG LOG: ListSliceLiteralListOfInts
[2025-05-26 15:41:53.269] [info] QUERY: MATCH (o:organisation) RETURN array_slice([1,4,7,9,10,20,15,192,-5,21,3], 3, o.ID + 3)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.274] [info] DEBUG LOG: ListSliceListOfInts
[2025-05-26 15:41:53.274] [info] QUERY: MATCH (a:person) RETURN list_slice(a.workedHours, 1, 2)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.275] [info] DEBUG LOG: ListSliceListOfListOfInts
[2025-05-26 15:41:53.275] [info] QUERY: MATCH (a:person) RETURN array_slice(a.usedNames, 1, 2)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.275] [info] DEBUG LOG: ListSliceListOfStrings
[2025-05-26 15:41:53.275] [info] QUERY: MATCH (a:person) RETURN list_slice(a.courseScoresPerTerm, 1, 2)
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.276] [info] DEBUG LOG: ListSliceString
[2025-05-26 15:41:53.276] [info] QUERY: MATCH (o:organisation) RETURN o.name[1:4]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.276] [info] DEBUG LOG: ListSliceStringRight
[2025-05-26 15:41:53.276] [info] QUERY: MATCH (a:person) RETURN a.fName[4:]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.277] [info] DEBUG LOG: ListSliceStringLeft
[2025-05-26 15:41:53.277] [info] QUERY: MATCH (a:person) RETURN a.fName[:5]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.278] [info] DEBUG LOG: ListSliceStringNull
[2025-05-26 15:41:53.278] [info] QUERY: MATCH (o:organisation) RETURN o.name[:]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.278] [info] DEBUG LOG: ListSliceStringDoubleSlice
[2025-05-26 15:41:53.278] [info] QUERY: MATCH (a:person) RETURN a.fName[3:][2:4]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.279] [info] DEBUG LOG: ListSliceOutOfRange
[2025-05-26 15:41:53.279] [info] QUERY: MATCH (p:person) RETURN p.usedNames[7:]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.279] [info] DEBUG LOG: 
[2025-05-26 15:41:53.279] [info] QUERY: MATCH (p:person) RETURN p.usedNames[:-2]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.280] [info] DEBUG LOG: 
[2025-05-26 15:41:53.280] [info] QUERY: MATCH (a:person) RETURN a.fName[7:]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.280] [info] DEBUG LOG: ListCreateFromLiteral1
[2025-05-26 15:41:53.280] [info] QUERY: RETURN [[100,200],[200,300],[300,400]]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.284] [info] DEBUG LOG: ListCreateFromLiteral2
[2025-05-26 15:41:53.284] [info] QUERY: RETURN array_contains([[100,200],[200,300],[300,400]], [100,200])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.286] [info] DEBUG LOG: ListCreateFromUnion
[2025-05-26 15:41:53.286] [info] QUERY: RETURN [UNION_VALUE(a := 3), UNION_VALUE(b := 7), UNION_VALUE(a := 11)]
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.298] [info] DEBUG LOG: ListSumSeq1
[2025-05-26 15:41:53.298] [info] QUERY: Return list_sum([1, 2, 3, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.299] [info] DEBUG LOG: ListSumSeq2
[2025-05-26 15:41:53.299] [info] QUERY: Return list_sum([1.1, 2.2, 3.3, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.299] [info] DEBUG LOG: ListSortInt8Asc
[2025-05-26 15:41:53.299] [info] QUERY: Return list_sort([to_int8(2), to_int8(3), to_int8(1), NULL, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.302] [info] DEBUG LOG: 
[2025-05-26 15:41:53.302] [info] QUERY: Return list_sort([cast(2, "int8"), cast(3, "int8"), cast(1, "int8"), NULL, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.312] [info] DEBUG LOG: ListSortInt8Desc
[2025-05-26 15:41:53.312] [info] QUERY: Return list_sort([to_int8(2), to_int8(3), to_int8(1), to_int8(5), NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.313] [info] DEBUG LOG: 
[2025-05-26 15:41:53.313] [info] QUERY: Return list_sort([cast(2, "int8"), cast(3, "int8"), cast(1, "int8"), cast(5, "int8"), NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.314] [info] DEBUG LOG: ListSortInt16Asc
[2025-05-26 15:41:53.314] [info] QUERY: Return list_sort([to_int16(2), to_int16(3), to_int16(1), NULL, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.314] [info] DEBUG LOG: 
[2025-05-26 15:41:53.314] [info] QUERY: Return list_sort([cast(2, "int16"), cast(3, "int16"), cast(1, "int16"), NULL, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.315] [info] DEBUG LOG: ListSortInt16Desc
[2025-05-26 15:41:53.315] [info] QUERY: Return list_sort([to_int16(2), to_int16(3), to_int16(1), to_int16(5), NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.316] [info] DEBUG LOG: 
[2025-05-26 15:41:53.316] [info] QUERY: Return list_sort([cast(2, "int16"), cast(3, "int16"), cast(1, "int16"), to_int16(5), NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.317] [info] DEBUG LOG: ListSortInt16DescWithNullsLast
[2025-05-26 15:41:53.317] [info] QUERY: Return list_sort([to_int16(2), to_int16(3), to_int16(1), NULL], 'DESC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.318] [info] DEBUG LOG: 
[2025-05-26 15:41:53.318] [info] QUERY: Return list_sort([cast(2, "int16"), cast(3, "int16"), cast(1, "int16"), NULL], 'DESC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.318] [info] DEBUG LOG: ListSortInt32Asc
[2025-05-26 15:41:53.318] [info] QUERY: Return list_sort([to_int32(2), to_int32(3), to_int32(1), NULL, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.319] [info] DEBUG LOG: ListSortInt32Desc
[2025-05-26 15:41:53.319] [info] QUERY: Return list_sort([to_int32(2), to_int32(3), to_int32(1), to_int32(5), NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.320] [info] DEBUG LOG: ListSortInt32DescWithNullsLast
[2025-05-26 15:41:53.320] [info] QUERY: Return list_sort([to_int32(2), to_int32(3), to_int32(1), NULL], 'DESC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.320] [info] DEBUG LOG: ListSortInt64Asc
[2025-05-26 15:41:53.320] [info] QUERY: Return list_sort([2, 3, 1, NULL, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.321] [info] DEBUG LOG: ListSortInt64Desc
[2025-05-26 15:41:53.321] [info] QUERY: Return list_sort([2, 3, 1, 5, NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.321] [info] DEBUG LOG: ListSortInt64DescWithNullsLast
[2025-05-26 15:41:53.321] [info] QUERY: Return list_sort([2, 3, 1, NULL], 'DESC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.322] [info] DEBUG LOG: ListSortUInt8Asc
[2025-05-26 15:41:53.322] [info] QUERY: Return list_sort([to_uint8(2), to_uint8(3), to_uint8(1), NULL, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.322] [info] DEBUG LOG: ListSortUInt8Desc
[2025-05-26 15:41:53.323] [info] QUERY: Return list_sort([to_uint8(2), to_uint8(3), to_uint8(1), to_uint8(5), NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.323] [info] DEBUG LOG: ListSortUInt8DescWithNullsLast
[2025-05-26 15:41:53.323] [info] QUERY: Return list_sort([to_uint8(2), to_uint8(3), to_uint8(1), NULL], 'DESC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.324] [info] DEBUG LOG: ListSortUInt16Asc
[2025-05-26 15:41:53.324] [info] QUERY: Return list_sort([to_uint16(2), to_uint16(3), to_uint16(1), NULL, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.324] [info] DEBUG LOG: ListSortUInt16Desc
[2025-05-26 15:41:53.324] [info] QUERY: Return list_sort([to_uint16(2), to_uint16(3), to_uint16(1), to_uint16(5), NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.325] [info] DEBUG LOG: ListSortUInt16DescWithNullsLast
[2025-05-26 15:41:53.325] [info] QUERY: Return list_sort([to_uint16(2), to_uint16(3), to_uint16(1), NULL], 'DESC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.326] [info] DEBUG LOG: ListSortUInt32Asc
[2025-05-26 15:41:53.326] [info] QUERY: Return list_sort([to_uint32(2), to_uint32(3), to_uint32(1), NULL, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.326] [info] DEBUG LOG: ListSortUInt32Desc
[2025-05-26 15:41:53.326] [info] QUERY: Return list_sort([to_uint32(2), to_uint32(3), to_uint32(1), to_uint32(5), NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.327] [info] DEBUG LOG: ListSortUInt32DescWithNullsLast
[2025-05-26 15:41:53.327] [info] QUERY: Return list_sort([to_uint32(2), to_uint32(3), to_uint32(1), NULL], 'DESC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.328] [info] DEBUG LOG: ListSortUInt64Asc
[2025-05-26 15:41:53.328] [info] QUERY: Return list_sort([to_uint64(2), to_uint64(3), to_uint64(1), NULL, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.328] [info] DEBUG LOG: ListSortUInt64Desc
[2025-05-26 15:41:53.328] [info] QUERY: Return list_sort([to_uint64(2), to_uint64(3), to_uint64(1), to_uint64(5), NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.329] [info] DEBUG LOG: ListSortUInt64DescWithNullsLast
[2025-05-26 15:41:53.329] [info] QUERY: Return list_sort([to_uint64(2), to_uint64(3), to_uint64(1), NULL], 'DESC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.330] [info] DEBUG LOG: ListSortInt128Asc
[2025-05-26 15:41:53.330] [info] QUERY: Return list_sort([to_int128(2), to_int128(3), to_int128(1), NULL, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.330] [info] DEBUG LOG: ListSortInt128Desc
[2025-05-26 15:41:53.330] [info] QUERY: Return list_sort([to_int128(2), to_int128(3), to_int128(1), to_int128(5), NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.331] [info] DEBUG LOG: ListSortInt128DescWithNullsLast
[2025-05-26 15:41:53.331] [info] QUERY: Return list_sort([to_int128(2), to_int128(3), to_int128(1), NULL], 'DESC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.332] [info] DEBUG LOG: ListSortFloatAsc
[2025-05-26 15:41:53.332] [info] QUERY: Return list_sort([to_float(1.1), to_float(2.3), to_float(4.5), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.334] [info] DEBUG LOG: ListSortFloatDesc
[2025-05-26 15:41:53.334] [info] QUERY: Return list_sort([to_float(2.1), to_float(3.2), to_float(1.33), to_float(5.44), NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.334] [info] DEBUG LOG: ListSortFloatDescWithNullsLast
[2025-05-26 15:41:53.334] [info] QUERY: Return list_sort([to_float(2.1), to_float(3.2), to_float(1.11), NULL], 'DESC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.335] [info] DEBUG LOG: ListSortStringDesc
[2025-05-26 15:41:53.335] [info] QUERY: Return list_sort(['sss', 'sssss', 'abs', NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.336] [info] DEBUG LOG: ListSortStringAscWithNullsLast
[2025-05-26 15:41:53.336] [info] QUERY: Return list_sort(['sss', 'sssss', 'abs', NULL], 'ASC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.336] [info] DEBUG LOG: ListSortDoubleAscWithNullsLast
[2025-05-26 15:41:53.336] [info] QUERY: Return list_sort([1.1, 2.3, 4.5, NULL], 'ASC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.337] [info] DEBUG LOG: ListSortDateSeq1
[2025-05-26 15:41:53.337] [info] QUERY: Return list_sort([date('1992-05-03'), date('1993-05-03'), date('1994-05-03'), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.338] [info] DEBUG LOG: ListSortDateSeq2
[2025-05-26 15:41:53.338] [info] QUERY: Return list_sort([date('1992-05-03'), date('1993-05-03'), date('1994-05-03'), NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.338] [info] DEBUG LOG: ListSortDateSeq3
[2025-05-26 15:41:53.338] [info] QUERY: Return list_sort([date('1992-05-03'), date('1993-05-03'), date('1994-05-03'), NULL], 'DESC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.339] [info] DEBUG LOG: ListSortTimestampSeq1
[2025-05-26 15:41:53.339] [info] QUERY: Return list_sort([timestamp('1992-05-03 11:13:25'), timestamp('1993-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.340] [info] DEBUG LOG: 
[2025-05-26 15:41:53.340] [info] QUERY: Return list_sort([cast('1992-05-03 11:13:25', "TIMESTAMP_MS"), cast('1993-05-03 11:13:25.43225', "TIMESTAMP_MS"), cast('1994-05-03 11:13:25.43225', "TIMESTAMP_MS"), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.342] [info] DEBUG LOG: ListSortTimestampSeq2
[2025-05-26 15:41:53.342] [info] QUERY: Return list_sort([timestamp('1992-05-03 11:13:25'), timestamp('1993-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.342] [info] DEBUG LOG: 
[2025-05-26 15:41:53.342] [info] QUERY: Return list_sort([cast('1992-05-03 11:13:25', "TIMESTAMP_NS"), cast('1993-05-03 11:13:25.4322', "TIMESTAMP_NS"), cast('1994-05-03 11:13:25.43225', "TIMESTAMP_NS"), NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.343] [info] DEBUG LOG: ListSortTimestampSeq3
[2025-05-26 15:41:53.343] [info] QUERY: Return list_sort([timestamp('1992-05-03 11:13:25'), timestamp('1993-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), NULL], 'DESC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.344] [info] DEBUG LOG: 
[2025-05-26 15:41:53.344] [info] QUERY: Return list_sort([cast('1992-05-03 11:13:24', "TIMESTAMP_SEC"), cast('1993-05-03 11:13:25.4322', "TIMESTAMP_SEC"), cast('1994-05-03 11:13:25.43225', "TIMESTAMP_SEC"), NULL], 'DESC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.344] [info] DEBUG LOG: 
[2025-05-26 15:41:53.344] [info] QUERY: Return list_sort([cast('1992-05-03 11:13:25', "TIMESTAMP_TZ"), cast('1993-05-03 11:13:25.4322', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:25.43225', "TIMESTAMP_TZ"), NULL], 'DESC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.345] [info] DEBUG LOG: ListSortIntervalSeq1
[2025-05-26 15:41:53.345] [info] QUERY: Return list_sort([interval('2 hours 3 days 20 minutes'), interval('3 hours 3 days 20 minutes'), interval('4 hours 3 days 20 minutes'), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.346] [info] DEBUG LOG: ListSortIntervalSeq2
[2025-05-26 15:41:53.346] [info] QUERY: Return list_sort([interval('2 hours 3 days 20 minutes'), interval('3 hours 3 days 20 minutes'), interval('4 hours 3 days 20 minutes'), NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.347] [info] DEBUG LOG: ListSortIntervalSeq3
[2025-05-26 15:41:53.347] [info] QUERY: Return list_sort([interval('2 hours 3 days 20 minutes'), interval('3 hours 3 days 20 minutes'), interval('4 hours 3 days 20 minutes'), NULL], 'DESC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.347] [info] DEBUG LOG: ListSortBooleanSeq1
[2025-05-26 15:41:53.347] [info] QUERY: Return list_sort([true, true, false, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.348] [info] DEBUG LOG: ListSortBooleanSeq2
[2025-05-26 15:41:53.348] [info] QUERY: Return list_sort([true, true, false, NULL], 'DESC');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.348] [info] DEBUG LOG: ListSortBooleanSeq3
[2025-05-26 15:41:53.348] [info] QUERY: Return list_sort([true, true, false, NULL], 'DESC', 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.349] [info] DEBUG LOG: ListSumInt8
[2025-05-26 15:41:53.349] [info] QUERY: Return list_sum([to_int8(-1), to_int8(2), NULL, to_int8(3)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.351] [info] DEBUG LOG: ListSumInt
[2025-05-26 15:41:53.351] [info] QUERY: Return list_sum([1, 2, 3, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.351] [info] DEBUG LOG: ListSumDouble
[2025-05-26 15:41:53.351] [info] QUERY: Return list_sum([1.1, 2.2, 3.3, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.352] [info] DEBUG LOG: ListReverseSortInt8
[2025-05-26 15:41:53.352] [info] QUERY: Return list_reverse_sort([to_int8(1), to_int8(1), NULL, to_int8(-3), to_int8(1), to_int8(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.354] [info] DEBUG LOG: ListReverseSortInt16
[2025-05-26 15:41:53.354] [info] QUERY: Return list_reverse_sort([to_int16(1), to_int16(1), NULL, to_int16(-3), to_int16(1), to_int16(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.354] [info] DEBUG LOG: ListReverseSortInt16WithNullsLast
[2025-05-26 15:41:53.354] [info] QUERY: Return list_reverse_sort([to_int16(1), to_int16(1), NULL, to_int16(-3), to_int16(1), to_int16(5)], 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.355] [info] DEBUG LOG: ListReverseSortInt32
[2025-05-26 15:41:53.355] [info] QUERY: Return list_reverse_sort([to_int32(1), to_int32(1), NULL, to_int32(-3), to_int32(1), to_int32(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.356] [info] DEBUG LOG: ListReverseSortInt32WithNullsLast
[2025-05-26 15:41:53.356] [info] QUERY: Return list_reverse_sort([to_int32(1), to_int32(1), NULL, to_int32(-3), to_int32(1), to_int32(5)], 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.357] [info] DEBUG LOG: ListReverseSortInt64
[2025-05-26 15:41:53.357] [info] QUERY: Return list_reverse_sort([2, 3, 1, 5, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.357] [info] DEBUG LOG: ListReverseSortInt64WithNullsLast
[2025-05-26 15:41:53.357] [info] QUERY: Return list_reverse_sort([2, 3, 1, 5, NULL], 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.358] [info] DEBUG LOG: ListReverseSortUInt8
[2025-05-26 15:41:53.358] [info] QUERY: Return list_reverse_sort([to_uint8(2), NULL, to_uint8(3), to_uint8(1), to_uint8(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.358] [info] DEBUG LOG: ListReverseSortUInt8WithNullsLast
[2025-05-26 15:41:53.358] [info] QUERY: Return list_reverse_sort([to_uint8(2), NULL, to_uint8(3), to_uint8(1), to_uint8(5)], 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.359] [info] DEBUG LOG: ListReverseSortUInt16
[2025-05-26 15:41:53.359] [info] QUERY: Return list_reverse_sort([to_uint16(2), NULL, to_uint16(3), to_uint16(1), to_uint16(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.360] [info] DEBUG LOG: ListReverseSortUInt16WithNullsLast
[2025-05-26 15:41:53.360] [info] QUERY: Return list_reverse_sort([to_uint16(2), NULL, to_uint16(3), to_uint16(1), to_uint16(5)], 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.360] [info] DEBUG LOG: ListReverseSortUInt32
[2025-05-26 15:41:53.360] [info] QUERY: Return list_reverse_sort([to_uint32(2), NULL, to_uint32(3), to_uint32(1), to_uint32(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.361] [info] DEBUG LOG: ListReverseSortUInt32WithNullsLast
[2025-05-26 15:41:53.361] [info] QUERY: Return list_reverse_sort([to_uint32(2), NULL, to_uint32(3), to_uint32(1), to_uint32(5)], 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.362] [info] DEBUG LOG: ListReverseSortUInt64
[2025-05-26 15:41:53.362] [info] QUERY: Return list_reverse_sort([to_uint64(2), NULL, to_uint64(3), to_uint64(1), to_uint64(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.363] [info] DEBUG LOG: ListReverseSortUInt64WithNullsLast
[2025-05-26 15:41:53.363] [info] QUERY: Return list_reverse_sort([to_uint64(2), NULL, to_uint64(3), to_uint64(1), to_uint64(5)], 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.363] [info] DEBUG LOG: ListDistinctWithFloat
[2025-05-26 15:41:53.363] [info] QUERY: Return list_reverse_sort([to_float(1.1), to_float(1.1), NULL, to_float(3.4), to_float(1.2), to_float(5.1)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.364] [info] DEBUG LOG: ListDistinctWithFloat
[2025-05-26 15:41:53.364] [info] QUERY: Return list_reverse_sort([to_float(1.1), to_float(1.1), NULL, to_float(3.4), to_float(1.2), to_float(5.1)], 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.365] [info] DEBUG LOG: ListReverseSortDouble
[2025-05-26 15:41:53.365] [info] QUERY: Return list_reverse_sort([1.1, 2.3, 4.5, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.365] [info] DEBUG LOG: ListReverseSortDoubleWithNullsLast
[2025-05-26 15:41:53.365] [info] QUERY: Return list_reverse_sort([1.1, 2.3, 4.5, NULL], 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.366] [info] DEBUG LOG: ListReverseSortStringSeq1
[2025-05-26 15:41:53.366] [info] QUERY: Return list_reverse_sort(['this is a long string', 'this is yet another long string', 'abs', NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.366] [info] DEBUG LOG: ListReverseSortWithStringSeq2
[2025-05-26 15:41:53.366] [info] QUERY: MATCH (a:person) RETURN list_reverse_sort([NULL, a.usedNames[1], 'Some val', NULL])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.373] [info] DEBUG LOG: ListReverseSortStringWithNullsLast
[2025-05-26 15:41:53.373] [info] QUERY: Return list_reverse_sort(['sss', 'sssss', 'abs', NULL], 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.373] [info] DEBUG LOG: ListReverseSortDateSeq1
[2025-05-26 15:41:53.373] [info] QUERY: Return list_reverse_sort([date('1992-05-03'), date('1993-05-03'), date('1994-05-03'), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.374] [info] DEBUG LOG: ListReverseSortDateSeq2
[2025-05-26 15:41:53.374] [info] QUERY: Return list_reverse_sort([date('1992-05-03'), date('1993-05-03'), date('1994-05-03'), NULL], 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.374] [info] DEBUG LOG: ListReverseSortTimestampSeq1
[2025-05-26 15:41:53.374] [info] QUERY: Return list_reverse_sort([timestamp('1992-05-03 11:13:25'), timestamp('1993-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.375] [info] DEBUG LOG: 
[2025-05-26 15:41:53.375] [info] QUERY: Return list_reverse_sort([cast('1992-05-03 11:13:25', "TIMESTAMP_MS"), cast('1993-05-03 11:13:25.43225', "TIMESTAMP_MS"), cast('1994-05-03 11:13:25.43225', "TIMESTAMP_MS"), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.376] [info] DEBUG LOG: 
[2025-05-26 15:41:53.376] [info] QUERY: Return list_reverse_sort([cast('1992-05-03 11:13:25', "TIMESTAMP_NS"), cast('1993-05-03 11:13:25.4322', "TIMESTAMP_NS"), cast('1994-05-03 11:13:25.43225', "TIMESTAMP_NS"), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.377] [info] DEBUG LOG: ListReverseSortTimestampSeq2
[2025-05-26 15:41:53.377] [info] QUERY: Return list_reverse_sort([timestamp('1992-05-03 11:13:25'), timestamp('1993-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), NULL], 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.377] [info] DEBUG LOG: 
[2025-05-26 15:41:53.377] [info] QUERY: Return list_reverse_sort([cast('1992-05-03 11:13:24', "TIMESTAMP_SEC"), cast('1993-05-03 11:13:25.4322', "TIMESTAMP_SEC"), cast('1994-05-03 11:13:25.43225', "TIMESTAMP_SEC"), NULL], 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.378] [info] DEBUG LOG: 
[2025-05-26 15:41:53.378] [info] QUERY: Return list_reverse_sort([cast('1992-05-03 11:13:25', "TIMESTAMP_TZ"), cast('1993-05-03 11:13:25.4322', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:25.43225', "TIMESTAMP_TZ"), NULL], 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.379] [info] DEBUG LOG: ListReverseSortIntervalSeq1
[2025-05-26 15:41:53.379] [info] QUERY: Return list_reverse_sort([interval('2 hours 3 days 20 minutes'), interval('3 hours 3 days 20 minutes'), interval('4 hours 3 days 20 minutes'), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.379] [info] DEBUG LOG: ListReverseSortIntervalSeq2
[2025-05-26 15:41:53.379] [info] QUERY: Return list_reverse_sort([interval('2 hours 3 days 20 minutes'), interval('3 hours 3 days 20 minutes'), interval('4 hours 3 days 20 minutes'), NULL], 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.380] [info] DEBUG LOG: ListReverseSortBooleanSeq1
[2025-05-26 15:41:53.380] [info] QUERY: Return list_reverse_sort([true, true, false, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.380] [info] DEBUG LOG: ListReverseSortBooleanSeq2
[2025-05-26 15:41:53.380] [info] QUERY: Return list_reverse_sort([true, true, false, NULL], 'NULLS LAST');
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.381] [info] DEBUG LOG: ListDistinctWithInt8
[2025-05-26 15:41:53.381] [info] QUERY: Return list_distinct([to_int8(1), to_int8(1), NULL, to_int8(-3), to_int8(1), to_int8(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.382] [info] DEBUG LOG: ListDistinctWithInt16
[2025-05-26 15:41:53.382] [info] QUERY: Return list_distinct([to_int16(1), to_int16(1), NULL, to_int16(-3), to_int16(1), to_int16(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.382] [info] DEBUG LOG: ListDistinctWithInt32
[2025-05-26 15:41:53.382] [info] QUERY: Return list_distinct([to_int32(1), to_int32(1), NULL, to_int32(-3), to_int32(1), to_int32(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.383] [info] DEBUG LOG: ListDistinctWithInt64
[2025-05-26 15:41:53.383] [info] QUERY: Return list_distinct([1, 1, NULL, -3, 1, 5]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.384] [info] DEBUG LOG: ListDistinctWithUInt8
[2025-05-26 15:41:53.384] [info] QUERY: Return list_distinct([to_uint8(1), to_uint8(1), NULL, to_uint8(3), to_uint8(1), to_uint8(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.385] [info] DEBUG LOG: ListDistinctWithUInt16
[2025-05-26 15:41:53.385] [info] QUERY: Return list_distinct([to_uint16(1), to_uint16(1), NULL, to_uint16(3), to_uint16(1), to_uint16(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.386] [info] DEBUG LOG: ListDistinctWithUInt32
[2025-05-26 15:41:53.386] [info] QUERY: Return list_distinct([to_uint32(1), to_uint32(1), NULL, to_uint32(3), to_uint32(1), to_uint32(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.387] [info] DEBUG LOG: ListDistinctWithUInt64
[2025-05-26 15:41:53.387] [info] QUERY: Return list_distinct([to_uint64(1), to_uint64(1), NULL, to_uint64(3), to_uint64(1), to_uint64(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.387] [info] DEBUG LOG: ListDistinctWithInt128
[2025-05-26 15:41:53.387] [info] QUERY: Return list_distinct([to_int128(1), to_int128(1), NULL, to_int128(-3), to_int128(1), to_int128(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.388] [info] DEBUG LOG: ListDistinctWithFloat
[2025-05-26 15:41:53.388] [info] QUERY: Return list_distinct([to_float(1.1), to_float(1.1), NULL, to_float(3.4), to_float(1.2), to_float(5.1)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.389] [info] DEBUG LOG: ListDistinctWithDouble
[2025-05-26 15:41:53.389] [info] QUERY: Return list_distinct([1.1, 1.1, NULL, -3.4, 1.2, 5.1]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.391] [info] DEBUG LOG: ListDistinctBoolean
[2025-05-26 15:41:53.391] [info] QUERY: Return list_distinct([true, true, NULL, false, false]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.391] [info] DEBUG LOG: ListDistinctWithStringSeq1
[2025-05-26 15:41:53.391] [info] QUERY: Return list_distinct(['this is a long string', 'this is a long string', NULL, 'bbb', 'ccc', 'ccc']);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.392] [info] DEBUG LOG: ListDistinctWithStringSeq2
[2025-05-26 15:41:53.392] [info] QUERY: MATCH (a:person) RETURN list_distinct([NULL, a.usedNames[1], a.usedNames[1], NULL])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.392] [info] DEBUG LOG: ListDistinctWithDate
[2025-05-26 15:41:53.392] [info] QUERY: Return list_distinct([date('1992-05-03'), date('1993-05-03'), date('1993-05-03'), date('1994-05-03'), date('1993-05-03'), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.393] [info] DEBUG LOG: ListDistinctWithTimestamp
[2025-05-26 15:41:53.393] [info] QUERY: Return list_distinct([timestamp('1992-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), timestamp('1993-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.394] [info] DEBUG LOG: 
[2025-05-26 15:41:53.394] [info] QUERY: Return list_distinct([cast('1993-05-03 11:13:25.012343', "TIMESTAMP_TZ"), cast('1993-05-03 11:13:25.000343', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:25', "TIMESTAMP_TZ"), cast('1993-05-03 11:13:25', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:25', "TIMESTAMP_TZ"), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.395] [info] DEBUG LOG: 
[2025-05-26 15:41:53.395] [info] QUERY: Return list_distinct([cast('1993-05-03 11:13:25.012343', "TIMESTAMP_NS"), cast('1993-05-03 11:13:25.000343', "TIMESTAMP_NS"), cast('1994-05-03 11:13:25', "TIMESTAMP_NS"), cast('1993-05-03 11:13:25', "TIMESTAMP_NS"), cast('1994-05-03 11:13:25', "TIMESTAMP_NS"), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.396] [info] DEBUG LOG: 
[2025-05-26 15:41:53.396] [info] QUERY: Return list_distinct([cast('1993-05-03 11:13:25.012343', "TIMESTAMP_MS"), cast('1993-05-03 11:13:25.000343', "TIMESTAMP_MS"), cast('1994-05-03 11:13:25', "TIMESTAMP_MS"), cast('1993-05-03 11:13:25', "TIMESTAMP_MS"), cast('1994-05-03 11:13:25', "TIMESTAMP_MS"), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.397] [info] DEBUG LOG: 
[2025-05-26 15:41:53.397] [info] QUERY: Return list_distinct([cast('1993-05-03 11:13:25.012343', "TIMESTAMP_SEC"), cast('1993-05-03 11:13:25.000343', "TIMESTAMP_SEC"), cast('1994-05-03 11:13:25', "TIMESTAMP_SEC"), cast('1993-05-03 11:13:25', "TIMESTAMP_SEC"), cast('1994-05-03 11:13:25', "TIMESTAMP_SEC"), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.398] [info] DEBUG LOG: ListDistinctWithInterval
[2025-05-26 15:41:53.398] [info] QUERY: Return list_distinct([interval('2 hours 3 days 20 minutes'), interval('2 hours 3 days 20 minutes'), interval('3 hours 3 days 20 minutes'), interval('4 hours 3 days 20 minutes'), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.398] [info] DEBUG LOG: ListDistinctWithInternalID
[2025-05-26 15:41:53.398] [info] QUERY: MATCH (p:person) RETURN list_distinct([id(p), id(p), id(p)])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.401] [info] DEBUG LOG: ListDistinctWithList
[2025-05-26 15:41:53.401] [info] QUERY: MATCH (p:person) RETURN list_distinct([p.usedNames, p.usedNames, ['Carmen','Fred']])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.402] [info] DEBUG LOG: ListDistinctWithArray
[2025-05-26 15:41:53.402] [info] QUERY: MATCH (p:person) RETURN list_distinct([p.grades, p.grades, cast([80,78,34,83], "int64[4]")])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.409] [info] DEBUG LOG: ListDistinctWithStruct
[2025-05-26 15:41:53.409] [info] QUERY: MATCH (o:organisation) RETURN list_distinct([o.state, o.state, {'revenue': cast(138, 'int16'), location: ["'toronto'", "'montr,eal'"], stock: {price: [96, 56], volume: 1000}}])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.453] [info] DEBUG LOG: ListDistinctWithUUID
[2025-05-26 15:41:53.453] [info] QUERY: MATCH (p:person) RETURN list_distinct([p.u, p.u, cast('a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a14', "uuid")])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.454] [info] DEBUG LOG: ListDistinctWithInt8
[2025-05-26 15:41:53.454] [info] QUERY: Return list_unique([to_int8(1), to_int8(1), NULL, to_int8(-3), to_int8(1), to_int8(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.455] [info] DEBUG LOG: ListUniqueWithInt16
[2025-05-26 15:41:53.455] [info] QUERY: MATCH (m:movies) WHERE m.name='Roma' RETURN list_unique([NULL, to_int16(m.length), to_int16(m.length), to_int16(1)])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.457] [info] DEBUG LOG: ListUniqueWithInt32
[2025-05-26 15:41:53.457] [info] QUERY: MATCH (m:movies) WHERE m.name='Roma' RETURN list_unique([NULL, to_int32(m.length), to_int32(m.length), to_int32(3)])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.458] [info] DEBUG LOG: ListUniqueWithInt64
[2025-05-26 15:41:53.458] [info] QUERY: Return list_unique([1, 1, NULL, -3, 1, 5]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.458] [info] DEBUG LOG: ListUniqueWithUInt8
[2025-05-26 15:41:53.458] [info] QUERY: Return list_unique([to_uint8(1), to_uint8(1), NULL, to_uint8(3), to_uint8(1), to_uint8(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.459] [info] DEBUG LOG: ListUniqueWithUInt16
[2025-05-26 15:41:53.459] [info] QUERY: Return list_unique([to_uint16(1), to_uint16(1), NULL, to_uint16(3), to_uint16(1), to_uint16(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.460] [info] DEBUG LOG: ListUniqueWithUInt32
[2025-05-26 15:41:53.460] [info] QUERY: Return list_unique([to_uint32(1), to_uint32(1), NULL, to_uint32(3), to_uint32(1), to_uint32(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.461] [info] DEBUG LOG: ListUniqueWithUInt64
[2025-05-26 15:41:53.461] [info] QUERY: Return list_unique([to_uint64(1), to_uint64(1), NULL, to_uint64(3), to_uint64(1), to_uint64(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.461] [info] DEBUG LOG: ListUniqueWithInt128
[2025-05-26 15:41:53.461] [info] QUERY: Return list_unique([to_int128(1), to_int128(1), NULL, to_int128(3), to_int128(1), to_int128(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.462] [info] DEBUG LOG: ListUniqueWithFloat
[2025-05-26 15:41:53.462] [info] QUERY: MATCH (p:person) WHERE p.ID=0 RETURN list_unique([NULL, to_float(p.gender), to_float(p.gender), to_float(4.5)])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.463] [info] DEBUG LOG: ListUniqueWithDouble
[2025-05-26 15:41:53.463] [info] QUERY: Return list_unique([1.1, 1.1, NULL, -3.4, 1.2, 5.1]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.463] [info] DEBUG LOG: ListUniqueBoolean
[2025-05-26 15:41:53.463] [info] QUERY: Return list_unique([true, true, NULL, false, false]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.464] [info] DEBUG LOG: ListUniqueWithStringSeq1
[2025-05-26 15:41:53.464] [info] QUERY: Return list_unique(['this is long string', 'this is long string', NULL, 'bbb', 'ccc', 'aaa']);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.464] [info] DEBUG LOG: ListUniqueWithStringSeq2
[2025-05-26 15:41:53.464] [info] QUERY: MATCH (a:person) RETURN list_unique([NULL, a.usedNames[1], 'sss', NULL])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.465] [info] DEBUG LOG: ListUniqueWithDate
[2025-05-26 15:41:53.465] [info] QUERY: Return list_unique([date('1992-05-03'), date('1993-05-03'), date('1993-05-03'), date('1994-05-03'), date('1993-05-03'), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.466] [info] DEBUG LOG: ListUniqueWithTimestamp
[2025-05-26 15:41:53.466] [info] QUERY: Return list_unique([timestamp('1992-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), timestamp('1993-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.466] [info] DEBUG LOG: 
[2025-05-26 15:41:53.466] [info] QUERY: Return list_unique([cast('1994-05-03 11:13:25.123', "TIMESTAMP_SEC"), cast('1994-05-03 11:13:25.12345', "TIMESTAMP_SEC"), cast('1994-05-03 11:13:25', "TIMESTAMP_S"), cast('1994-05-03 11:13:24', "TIMESTAMP_SEC"), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.467] [info] DEBUG LOG: 
[2025-05-26 15:41:53.467] [info] QUERY: Return list_unique([cast('1994-05-03 11:13:25.123', "TIMESTAMP_NS"), cast('1994-05-03 11:13:25.12345', "TIMESTAMP_NS"), cast('1994-05-03 11:13:25', "TIMESTAMP_NS"), cast('1994-05-03 11:13:24', "TIMESTAMP_NS"), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.468] [info] DEBUG LOG: 
[2025-05-26 15:41:53.468] [info] QUERY: Return list_unique([cast('1994-05-03 11:13:25.123', "TIMESTAMP_MS"), cast('1994-05-03 11:13:25.12345', "TIMESTAMP_MS"), cast('1994-05-03 11:13:25', "TIMESTAMP_MS"), cast('1994-05-03 11:13:24', "TIMESTAMP_MS"), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.469] [info] DEBUG LOG: 
[2025-05-26 15:41:53.469] [info] QUERY: Return list_unique([cast('1994-05-03 11:13:25.123', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:25.12345', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:25', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:24', "TIMESTAMP_TZ"), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.470] [info] DEBUG LOG: ListUniqueWithInterval
[2025-05-26 15:41:53.470] [info] QUERY: Return list_unique([interval('2 hours 3 days 20 minutes'), interval('2 hours 3 days 20 minutes'), interval('3 hours 3 days 20 minutes'), interval('4 hours 3 days 20 minutes'), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.470] [info] DEBUG LOG: ListUniqueWithInternalID
[2025-05-26 15:41:53.470] [info] QUERY: MATCH (p:person) RETURN list_unique([id(p), id(p), id(p)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.471] [info] DEBUG LOG: ListUniqueWithUUID
[2025-05-26 15:41:53.471] [info] QUERY: MATCH (p:person) RETURN list_unique([p.u, p.u, cast('A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11', 'uuid')]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.472] [info] DEBUG LOG: ListUniqueWithList
[2025-05-26 15:41:53.472] [info] QUERY: MATCH (p:person) RETURN list_unique([p.courseScoresPerTerm, p.courseScoresPerTerm, [[8,9],[9,10]]]), p.ID;
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.483] [info] DEBUG LOG: ListUniqueWithArray
[2025-05-26 15:41:53.483] [info] QUERY: MATCH (p:person) RETURN list_unique([p.grades, p.grades, cast([96,59,65,88], "int64[4]")]), p.ID;
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.484] [info] DEBUG LOG: ListUniqueWithStruct
[2025-05-26 15:41:53.484] [info] QUERY: MATCH (o:organisation) RETURN list_unique([o.state, o.state, {revenue: cast(558, "int16"), location: ["'very long city name'", "'new york'"], stock: {price: [22], volume: 99}}]), o.ID;
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.486] [info] DEBUG LOG: ListUniqueWithUUID
[2025-05-26 15:41:53.486] [info] QUERY: MATCH (p:person) RETURN list_unique([p.u, p.u, cast('A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11', 'uuid')]), p.ID;
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.487] [info] DEBUG LOG: ListAnyValueWithInt8
[2025-05-26 15:41:53.487] [info] QUERY: Return list_any_value([NULL, to_int8(1), to_int8(1), NULL, to_int8(-3), to_int8(1), to_int8(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.488] [info] DEBUG LOG: ListAnyValueWithInt16
[2025-05-26 15:41:53.488] [info] QUERY: MATCH (m:movies) WHERE m.name='Roma' RETURN list_any_value([NULL, to_int16(m.length), to_int16(m.length)])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.489] [info] DEBUG LOG: ListAnyValueWithInt32
[2025-05-26 15:41:53.489] [info] QUERY: MATCH (m:movies) WHERE m.name='Roma' RETURN list_any_value([NULL, to_int32(m.length), to_int32(m.length)])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.489] [info] DEBUG LOG: ListAnyValueWithInt64
[2025-05-26 15:41:53.489] [info] QUERY: Return list_any_value([NULL, 1, 1, NULL, -3, 1, 5]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.490] [info] DEBUG LOG: ListAnyValueWithUInt8
[2025-05-26 15:41:53.490] [info] QUERY: Return list_any_value([NULL, to_uint8(1), to_uint8(1), NULL, to_uint8(3), to_uint8(1), to_uint8(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.491] [info] DEBUG LOG: ListAnyValueWithUInt16
[2025-05-26 15:41:53.491] [info] QUERY: Return list_any_value([NULL, to_uint16(1), to_uint16(1), NULL, to_uint16(3), to_uint16(1), to_uint16(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.492] [info] DEBUG LOG: ListAnyValueWithUInt32
[2025-05-26 15:41:53.492] [info] QUERY: Return list_any_value([NULL, to_uint32(1), to_uint32(1), NULL, to_uint32(3), to_uint32(1), to_uint32(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.492] [info] DEBUG LOG: ListAnyValueWithUInt64
[2025-05-26 15:41:53.492] [info] QUERY: Return list_any_value([NULL, to_uint64(1), to_uint64(1), NULL, to_uint64(3), to_uint64(1), to_uint64(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.493] [info] DEBUG LOG: ListAnyValueWithInt128
[2025-05-26 15:41:53.493] [info] QUERY: Return list_any_value([NULL, to_int128(1), to_int128(1), NULL, to_int128(-3), to_int128(1), to_int128(5)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.494] [info] DEBUG LOG: ListAnyValueWithFloat
[2025-05-26 15:41:53.494] [info] QUERY: MATCH (p:person) WHERE p.ID=0 RETURN list_any_value([NULL, to_float(p.gender), to_float(p.gender), to_float(2.3)])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.495] [info] DEBUG LOG: ListAnyValueWithDouble
[2025-05-26 15:41:53.495] [info] QUERY: Return list_any_value([NULL, 1.1, 1.1, NULL, -3.4, 1.2, 5.1]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.495] [info] DEBUG LOG: ListAnyValueBoolean
[2025-05-26 15:41:53.495] [info] QUERY: Return list_any_value([NULL, true, true, NULL, false]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.496] [info] DEBUG LOG: ListAnyValueWithStringSeq1
[2025-05-26 15:41:53.496] [info] QUERY: Return list_any_value([NULL, NULL, 'this is long string', 'this is long string', NULL, 'this is long string', 'ccc', 'aaa']);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.496] [info] DEBUG LOG: ListAnyValueWithStringSeq2
[2025-05-26 15:41:53.496] [info] QUERY: MATCH (a:person) RETURN list_any_value([NULL, a.usedNames[1], 'sss'])
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.497] [info] DEBUG LOG: ListAnyValueWithDate
[2025-05-26 15:41:53.497] [info] QUERY: Return list_any_value([NULL, date('1992-05-03'), date('1993-05-03'), date('1993-05-03'), date('1994-05-03'), date('1993-05-03'), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.498] [info] DEBUG LOG: ListAnyValueWithTimestamp
[2025-05-26 15:41:53.498] [info] QUERY: Return list_any_value([NULL, timestamp('1992-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), timestamp('1993-05-03 11:13:25'), timestamp('1994-05-03 11:13:25'), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.498] [info] DEBUG LOG: 
[2025-05-26 15:41:53.498] [info] QUERY: Return list_any_value([NULL, cast('1992-05-03 11:13:25', "TIMESTAMP_NS"), cast('1994-05-03 11:13:25', "TIMESTAMP_NS"), cast('1993-05-03 11:13:25', "TIMESTAMP_NS"), cast('1994-05-03 11:13:25', "TIMESTAMP_NS"), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.499] [info] DEBUG LOG: 
[2025-05-26 15:41:53.499] [info] QUERY: Return list_any_value([NULL, cast('1992-05-03 11:13:25', "TIMESTAMP_MS"), cast('1994-05-03 11:13:25', "TIMESTAMP_MS"), cast('1993-05-03 11:13:25', "TIMESTAMP_MS"), cast('1994-05-03 11:13:25', "TIMESTAMP_MS"), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.500] [info] DEBUG LOG: 
[2025-05-26 15:41:53.500] [info] QUERY: Return list_any_value([NULL, cast('1992-05-03 11:13:25', "TIMESTAMP_S"), cast('1994-05-03 11:13:25', "TIMESTAMP_S"), cast('1993-05-03 11:13:25', "TIMESTAMP_S"), cast('1994-05-03 11:13:25', "TIMESTAMP_S"), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.501] [info] DEBUG LOG: 
[2025-05-26 15:41:53.501] [info] QUERY: Return list_any_value([NULL, cast('1992-05-03 11:13:25', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:25', "TIMESTAMP_TZ"), cast('1993-05-03 11:13:25', "TIMESTAMP_TZ"), cast('1994-05-03 11:13:25', "TIMESTAMP_TZ"), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.502] [info] DEBUG LOG: ListAnyValueWithInterval
[2025-05-26 15:41:53.502] [info] QUERY: Return list_any_value([NULL, interval('2 hours 3 days 20 minutes'), interval('2 hours 3 days 20 minutes'), interval('3 hours 3 days 20 minutes'), interval('4 hours 3 days 20 minutes'), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.503] [info] DEBUG LOG: ListAnyValueWithList
[2025-05-26 15:41:53.503] [info] QUERY: Return list_any_value([NULL, [1,2,3], [3,4,5]]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.504] [info] DEBUG LOG: ListAnyValueWithInternalID
[2025-05-26 15:41:53.504] [info] QUERY: MATCH (p:person) return list_any_value([NULL, id(p), id(p), id(p)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.504] [info] DEBUG LOG: ListProductSeq1
[2025-05-26 15:41:53.504] [info] QUERY: Return list_product([1, 2, 3, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.505] [info] DEBUG LOG: ListProductSeq2
[2025-05-26 15:41:53.505] [info] QUERY: Return list_product([1.111111111111, 2.2, 3.3, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.505] [info] DEBUG LOG: ListProductSeq3
[2025-05-26 15:41:53.505] [info] QUERY: Return list_product([to_int64(NULL), NULL, NULL, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.506] [info] DEBUG LOG: ListProductSeq4
[2025-05-26 15:41:53.506] [info] QUERY: Return list_product([0, NULL, NULL, NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.506] [info] DEBUG LOG: ListProductSeq5
[2025-05-26 15:41:53.506] [info] QUERY: Return list_product([-1, -2, -3]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.508] [info] DEBUG LOG: ListProductInt8
[2025-05-26 15:41:53.508] [info] QUERY: Return list_product([to_int8(-1), to_int8(2), NULL, to_int8(3)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.508] [info] DEBUG LOG: ListProductInt16
[2025-05-26 15:41:53.508] [info] QUERY: Return list_product([to_int16(1), to_int16(2), to_int16(3), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.509] [info] DEBUG LOG: ListProductInt32
[2025-05-26 15:41:53.509] [info] QUERY: Return list_product([to_int32(-10), to_int32(20), to_int32(-5), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.509] [info] DEBUG LOG: ListProductFloat
[2025-05-26 15:41:53.509] [info] QUERY: Return list_product([to_float(1.111111111111), to_float(2.2), to_float(3.3), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.510] [info] DEBUG LOG: ListProductSerial
[2025-05-26 15:41:53.510] [info] QUERY: Return list_product([to_serial(1), to_serial(2)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.510] [info] DEBUG LOG: ListProductUnsigned
[2025-05-26 15:41:53.510] [info] QUERY: Return list_product([to_uint8(1), to_uint8(10), to_uint8(3)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.511] [info] DEBUG LOG: 
[2025-05-26 15:41:53.511] [info] QUERY: Return list_product([to_uint16(4), to_uint16(10), to_uint16(3)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.511] [info] DEBUG LOG: 
[2025-05-26 15:41:53.511] [info] QUERY: Return list_product([to_uint32(9), to_uint32(2), to_uint32(3)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.512] [info] DEBUG LOG: 
[2025-05-26 15:41:53.512] [info] QUERY: Return list_product([to_uint64(9), to_uint64(2), to_uint64(3)]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.513] [info] DEBUG LOG: ListProductWithInt128
[2025-05-26 15:41:53.513] [info] QUERY: Return list_product([to_int128(1), to_int128(2), to_int128(3), NULL]);
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.513] [info] DEBUG LOG: ListProductError
[2025-05-26 15:41:53.513] [info] QUERY: Return list_product(["ok"]);
[2025-05-26 15:41:53.513] [info] DEBUG LOG: ListToStringInt128
[2025-05-26 15:41:53.513] [info] QUERY: RETURN LIST_TO_STRING([CAST(5, 'INT128'), CAST(7, 'INT128'), CAST(10, 'INT128')], '--')
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.514] [info] DEBUG LOG: ListToStringInt64
[2025-05-26 15:41:53.514] [info] QUERY: RETURN LIST_TO_STRING([CAST(255, 'INT64'), CAST(-51, 'INT64'), CAST(3132, 'INT64')], '--')
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.516] [info] DEBUG LOG: ListToStringBOOL
[2025-05-26 15:41:53.516] [info] QUERY: RETURN LIST_TO_STRING([true, false, false, true], '/')
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.517] [info] DEBUG LOG: ListToStringUUID
[2025-05-26 15:41:53.517] [info] QUERY: MATCH (p:person) return list_to_string(collect(p.u), '*')
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.518] [info] DEBUG LOG: ListToStringDate
[2025-05-26 15:41:53.518] [info] QUERY: MATCH (p:person) return list_to_string(collect(p.birthdate), '+')
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.519] [info] DEBUG LOG: ListToStringTimestamp
[2025-05-26 15:41:53.519] [info] QUERY: MATCH (p:person) return list_to_string(collect(p.registerTime), '==')
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.520] [info] DEBUG LOG: ListToStringList
[2025-05-26 15:41:53.520] [info] QUERY: MATCH (p:person) return list_to_string(p.workedHours, ',')
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.520] [info] DEBUG LOG: ListToStringStruct
[2025-05-26 15:41:53.520] [info] QUERY: MATCH (o:organisation) return list_to_string(collect(o.state), '|')
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.521] [info] DEBUG LOG: ListToStringArray
[2025-05-26 15:41:53.521] [info] QUERY: MATCH (p:person) return list_to_string(collect(p.grades), '/')
GOT HERE 
GOT HERE 222
[2025-05-26 15:41:53.522] [info] DEBUG LOG: 2385
[2025-05-26 15:41:53.522] [info] QUERY: RETURN [[23, 432], [], [NULL]];
GOT HERE 
GOT HERE 222
[       OK ] function~list.FunctionList (1840 ms)
[----------] 2 tests from function~list (3159 ms total)

[----------] Global test environment tear-down
[==========] 2 tests from 1 test suite ran. (3159 ms total)
[  PASSED  ] 2 tests.
[2025-05-26 15:44:03.099] [info] Starting runner in Rewrite Mode
[==========] Running 3 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 3 tests from exceptions~exception
[ RUN      ] exceptions~exception.MultiStatementsWithTransaction
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher doesn't exist. Skipping...
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher doesn't exist. Skipping...
[2025-05-26 15:44:03.139] [info] DEBUG LOG: 
[2025-05-26 15:44:03.139] [info] QUERY: BEGIN TRANSACTION; create node table test(id serial primary key); create node table test(id int64 primary key); match (a) return a; COMMIT;
[2025-05-26 15:44:03.175] [info] DEBUG LOG: 
[2025-05-26 15:44:03.175] [info] QUERY: CALL show_tables() RETURN *;
GOT HERE 
GOT HERE 222
[       OK ] exceptions~exception.MultiStatementsWithTransaction (58 ms)
[ RUN      ] exceptions~exception.MultiStatements
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher doesn't exist. Skipping...
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher doesn't exist. Skipping...
[2025-05-26 15:44:03.190] [info] DEBUG LOG: 
[2025-05-26 15:44:03.190] [info] QUERY: create node table test(id serial primary key); create node table test(id int64 primary key); match (a) return a;
[2025-05-26 15:44:03.192] [info] DEBUG LOG: 
[2025-05-26 15:44:03.192] [info] QUERY: CALL show_tables() RETURN *;
GOT HERE 
GOT HERE 222
[       OK ] exceptions~exception.MultiStatements (12 ms)
[ RUN      ] exceptions~exception.EXCEPTION
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher doesn't exist. Skipping...
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher doesn't exist. Skipping...
[2025-05-26 15:44:03.202] [info] DEBUG LOG: DivideBy0Error
[2025-05-26 15:44:03.202] [info] QUERY: RETURN 1 / 0
[2025-05-26 15:44:03.209] [info] DEBUG LOG: ModuloBy0Error
[2025-05-26 15:44:03.209] [info] QUERY: RETURN 1 % 0
[2025-05-26 15:44:03.210] [info] DEBUG LOG: EmptyQuery
[2025-05-26 15:44:03.210] [info] QUERY: 
[2025-05-26 15:44:03.210] [info] DEBUG LOG: Overflow
[2025-05-26 15:44:03.210] [info] QUERY: RETURN to_int16(10000000000)
[2025-05-26 15:44:03.216] [info] DEBUG LOG: Int32PrimaryKey
[2025-05-26 15:44:03.216] [info] QUERY: CREATE NODE TABLE play(a INT32[], PRIMARY KEY (a))
[2025-05-26 15:44:03.217] [info] DEBUG LOG: UnalignedKeyAndValueList
[2025-05-26 15:44:03.217] [info] QUERY: RETURN MAP([4],[3,2])
[2025-05-26 15:44:03.232] [info] DEBUG LOG: MultiplyOutOfRange
[2025-05-26 15:44:03.232] [info] QUERY: RETURN cast(2, "INT8") * cast(64, "INT8");
[2025-05-26 15:44:03.248] [info] DEBUG LOG: 
[2025-05-26 15:44:03.248] [info] QUERY: RETURN cast(-2, "INT8") * cast(65, "INT8");
[2025-05-26 15:44:03.250] [info] DEBUG LOG: 
[2025-05-26 15:44:03.250] [info] QUERY: RETURN cast(-2, "INT16") * cast(16385, "INT16");
[2025-05-26 15:44:03.250] [info] DEBUG LOG: 
[2025-05-26 15:44:03.250] [info] QUERY: RETURN cast(2, "INT32") * cast(1073741824, "INT32");
[2025-05-26 15:44:03.251] [info] DEBUG LOG: 
[2025-05-26 15:44:03.251] [info] QUERY: RETURN cast(1231232342342123123, "INT64") * cast(432432423543534534, "INT64");
[2025-05-26 15:44:03.251] [info] DEBUG LOG: 
[2025-05-26 15:44:03.251] [info] QUERY: RETURN cast(432432423543534534, "INT64") * cast(1231232342342123123, "INT64");
[2025-05-26 15:44:03.252] [info] DEBUG LOG: 
[2025-05-26 15:44:03.252] [info] QUERY: RETURN cast(85070591730234615865843651857942052864, "int128") * cast(2, "int128");
[2025-05-26 15:44:03.252] [info] DEBUG LOG: 
[2025-05-26 15:44:03.252] [info] QUERY: RETURN cast(100, "UINT8") * cast(100, "UINT8");
[2025-05-26 15:44:03.252] [info] DEBUG LOG: 
[2025-05-26 15:44:03.252] [info] QUERY: RETURN cast(10000, "UINT16") * cast(10000, "UINT16");
[2025-05-26 15:44:03.253] [info] DEBUG LOG: 
[2025-05-26 15:44:03.253] [info] QUERY: RETURN cast(1000000, "UINT32") * cast(1000000, "UINT32");
[2025-05-26 15:44:03.253] [info] DEBUG LOG: 
[2025-05-26 15:44:03.253] [info] QUERY: RETURN cast(100000000, "UINT64") * cast(1000000000000, "UINT64");
[2025-05-26 15:44:03.253] [info] DEBUG LOG: 
[2025-05-26 15:44:03.253] [info] QUERY: RETURN cast(1000000000000, "UINT64") * cast(100000000, "UINT64");
[       OK ] exceptions~exception.EXCEPTION (60 ms)
[----------] 3 tests from exceptions~exception (131 ms total)

[----------] Global test environment tear-down
[==========] 3 tests from 1 test suite ran. (131 ms total)
[  PASSED  ] 3 tests.
[2025-05-26 15:44:03.261] [info] Starting runner in Rewrite Mode
[==========] Running 13 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 13 tests from ddl~sequence
[ RUN      ] ddl~sequence.DefaultSharedSequence
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher doesn't exist. Skipping...
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher doesn't exist. Skipping...
[2025-05-26 15:44:03.294] [info] DEBUG LOG: 
[2025-05-26 15:44:03.294] [info] QUERY: CREATE SEQUENCE shared;
[2025-05-26 15:44:03.304] [info] DEBUG LOG: 
[2025-05-26 15:44:03.304] [info] QUERY: CREATE NODE TABLE tba(id INT64, seq INT64 DEFAULT nextval('shared'), PRIMARY KEY(id));
[2025-05-26 15:44:03.319] [info] DEBUG LOG: 
[2025-05-26 15:44:03.319] [info] QUERY: CREATE NODE TABLE tbb(id INT64 DEFAULT nextval('shared'), PRIMARY KEY(id));
[2025-05-26 15:44:03.320] [info] DEBUG LOG: 
[2025-05-26 15:44:03.320] [info] QUERY: CREATE (t:tba {id:0});
[2025-05-26 15:44:03.324] [info] DEBUG LOG: 
[2025-05-26 15:44:03.324] [info] QUERY: CREATE (t:tbb);
[2025-05-26 15:44:03.324] [info] DEBUG LOG: 
[2025-05-26 15:44:03.324] [info] QUERY: MATCH (t:tba) RETURN t.*;
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.330] [info] DEBUG LOG: 
[2025-05-26 15:44:03.330] [info] QUERY: MATCH (t:tbb) RETURN t.*;
GOT HERE 
GOT HERE 222
[       OK ] ddl~sequence.DefaultSharedSequence (47 ms)
[ RUN      ] ddl~sequence.CreateTableDefaultSequencePKey
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher doesn't exist. Skipping...
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher doesn't exist. Skipping...
[2025-05-26 15:44:03.341] [info] DEBUG LOG: 
[2025-05-26 15:44:03.341] [info] QUERY: CREATE SEQUENCE test;
[2025-05-26 15:44:03.341] [info] DEBUG LOG: 
[2025-05-26 15:44:03.341] [info] QUERY: CREATE NODE TABLE test(id INT64 DEFAULT nextval('test'), PRIMARY KEY(id));
[2025-05-26 15:44:03.342] [info] DEBUG LOG: 
[2025-05-26 15:44:03.342] [info] QUERY: CREATE (t:test);
[2025-05-26 15:44:03.342] [info] DEBUG LOG: 
[2025-05-26 15:44:03.342] [info] QUERY: MATCH (t:test) RETURN t.*;
GOT HERE 
GOT HERE 222
[       OK ] ddl~sequence.CreateTableDefaultSequencePKey (11 ms)
[ RUN      ] ddl~sequence.DropInvalidSequence
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher doesn't exist. Skipping...
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher doesn't exist. Skipping...
[2025-05-26 15:44:03.352] [info] DEBUG LOG: 
[2025-05-26 15:44:03.352] [info] QUERY: DROP SEQUENCE if exists univers;
GOT HERE 
GOT HERE 222
[       OK ] ddl~sequence.DropInvalidSequence (9 ms)
[ RUN      ] ddl~sequence.ExpectedError
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher doesn't exist. Skipping...
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher doesn't exist. Skipping...
[2025-05-26 15:44:03.361] [info] DEBUG LOG: 
[2025-05-26 15:44:03.361] [info] QUERY: CREATE SEQUENCE err START 9223372036854775808;
[2025-05-26 15:44:03.362] [info] DEBUG LOG: 
[2025-05-26 15:44:03.362] [info] QUERY: CREATE SEQUENCE err START -9223372036854775809;
[2025-05-26 15:44:03.362] [info] DEBUG LOG: 
[2025-05-26 15:44:03.362] [info] QUERY: CREATE SEQUENCE err MINVALUE 10 MAXVALUE -10;
[2025-05-26 15:44:03.362] [info] DEBUG LOG: 
[2025-05-26 15:44:03.362] [info] QUERY: CREATE SEQUENCE err START -1;
[2025-05-26 15:44:03.362] [info] DEBUG LOG: 
[2025-05-26 15:44:03.362] [info] QUERY: CREATE SEQUENCE err START WITH 1 INCREMENT -1;
[       OK ] ddl~sequence.ExpectedError (9 ms)
[ RUN      ] ddl~sequence.CreateTableDefaultSequence
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher doesn't exist. Skipping...
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher doesn't exist. Skipping...
[2025-05-26 15:44:03.371] [info] DEBUG LOG: 
[2025-05-26 15:44:03.371] [info] QUERY: CREATE SEQUENCE test;
[2025-05-26 15:44:03.371] [info] DEBUG LOG: 
[2025-05-26 15:44:03.371] [info] QUERY: CREATE NODE TABLE test(id INT64, seq INT64 DEFAULT nextval('test'), PRIMARY KEY(id));
[2025-05-26 15:44:03.372] [info] DEBUG LOG: 
[2025-05-26 15:44:03.372] [info] QUERY: CREATE (t:test {id:0});
[2025-05-26 15:44:03.373] [info] DEBUG LOG: 
[2025-05-26 15:44:03.373] [info] QUERY: MATCH (t:test) RETURN t.*;
GOT HERE 
GOT HERE 222
[       OK ] ddl~sequence.CreateTableDefaultSequence (11 ms)
[ RUN      ] ddl~sequence.CreateDrop
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher doesn't exist. Skipping...
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher doesn't exist. Skipping...
[2025-05-26 15:44:03.383] [info] DEBUG LOG: 
[2025-05-26 15:44:03.383] [info] QUERY: CREATE NODE TABLE test(id INT64, PRIMARY KEY(id));
[2025-05-26 15:44:03.383] [info] DEBUG LOG: 
[2025-05-26 15:44:03.383] [info] QUERY: CREATE SEQUENCE test;
[2025-05-26 15:44:03.383] [info] DEBUG LOG: 
[2025-05-26 15:44:03.383] [info] QUERY: CREATE SEQUENCE test;
[2025-05-26 15:44:03.383] [info] DEBUG LOG: 
[2025-05-26 15:44:03.383] [info] QUERY: CREATE SEQUENCE IF NOT EXISTS test start 5;
[2025-05-26 15:44:03.384] [info] DEBUG LOG: 
[2025-05-26 15:44:03.384] [info] QUERY: RETURN nextval('test');
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.387] [info] DEBUG LOG: 
[2025-05-26 15:44:03.387] [info] QUERY: DROP TABLE test;
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.387] [info] DEBUG LOG: 
[2025-05-26 15:44:03.387] [info] QUERY: DROP SEQUENCE test;
GOT HERE 
GOT HERE 222
[       OK ] ddl~sequence.CreateDrop (14 ms)
[ RUN      ] ddl~sequence.EdgesNoCycle
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher doesn't exist. Skipping...
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher doesn't exist. Skipping...
[2025-05-26 15:44:03.397] [info] DEBUG LOG: 
[2025-05-26 15:44:03.397] [info] QUERY: CREATE SEQUENCE overflowMax START 9223372036854775807 INCREMENT 1;
[2025-05-26 15:44:03.397] [info] DEBUG LOG: 
[2025-05-26 15:44:03.397] [info] QUERY: CREATE SEQUENCE overflowMin START -9223372036854775808 INCREMENT -1;
[2025-05-26 15:44:03.397] [info] DEBUG LOG: 
[2025-05-26 15:44:03.397] [info] QUERY: CREATE SEQUENCE edgeMax START 10 INCREMENT 1 MAXVALUE 10;
[2025-05-26 15:44:03.397] [info] DEBUG LOG: 
[2025-05-26 15:44:03.397] [info] QUERY: CREATE SEQUENCE edgeMin START -10 INCREMENT -1 MINVALUE -10;
[2025-05-26 15:44:03.398] [info] DEBUG LOG: 
[2025-05-26 15:44:03.398] [info] QUERY: RETURN nextval('overflowMax');
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.406] [info] DEBUG LOG: 
[2025-05-26 15:44:03.406] [info] QUERY: RETURN nextval('overflowMin');
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.406] [info] DEBUG LOG: 
[2025-05-26 15:44:03.406] [info] QUERY: RETURN nextval('overflowMax');
[2025-05-26 15:44:03.407] [info] DEBUG LOG: 
[2025-05-26 15:44:03.407] [info] QUERY: RETURN nextval('overflowMin');
[2025-05-26 15:44:03.407] [info] DEBUG LOG: 
[2025-05-26 15:44:03.407] [info] QUERY: RETURN nextval('edgeMax');
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.407] [info] DEBUG LOG: 
[2025-05-26 15:44:03.407] [info] QUERY: RETURN nextval('edgeMax');
[2025-05-26 15:44:03.408] [info] DEBUG LOG: 
[2025-05-26 15:44:03.408] [info] QUERY: RETURN nextval('edgeMin');
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.408] [info] DEBUG LOG: 
[2025-05-26 15:44:03.408] [info] QUERY: RETURN nextval('edgeMin');
[       OK ] ddl~sequence.EdgesNoCycle (20 ms)
[ RUN      ] ddl~sequence.CreateOptions
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher doesn't exist. Skipping...
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher doesn't exist. Skipping...
[2025-05-26 15:44:03.417] [info] DEBUG LOG: 
[2025-05-26 15:44:03.417] [info] QUERY: CREATE SEQUENCE a;           CREATE SEQUENCE b START 10;            CREATE SEQUENCE c START WITH 20;            CREATE SEQUENCE d INCREMENT 10;            CREATE SEQUENCE e INCREMENT BY -5;            CREATE SEQUENCE f NO MINVALUE;            CREATE SEQUENCE g NO MAXVALUE;            CREATE SEQUENCE h MINVALUE 100;            CREATE SEQUENCE i MAXVALUE 100;            CREATE SEQUENCE j NO CYCLE;            CREATE SEQUENCE k CYCLE;            CREATE SEQUENCE l START 10 INCREMENT 5 MINVALUE -100 MAXVALUE 100 CYCLE;
[2025-05-26 15:44:03.423] [info] DEBUG LOG: 
[2025-05-26 15:44:03.423] [info] QUERY: CALL SHOW_SEQUENCES() RETURN * ORDER BY name;
GOT HERE 
GOT HERE 222
[       OK ] ddl~sequence.CreateOptions (18 ms)
[ RUN      ] ddl~sequence.ExpectedFunctionError
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher doesn't exist. Skipping...
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher doesn't exist. Skipping...
[2025-05-26 15:44:03.436] [info] DEBUG LOG: 
[2025-05-26 15:44:03.436] [info] QUERY: CREATE SEQUENCE err;
[2025-05-26 15:44:03.436] [info] DEBUG LOG: 
[2025-05-26 15:44:03.436] [info] QUERY: RETURN currval('err');
[       OK ] ddl~sequence.ExpectedFunctionError (9 ms)
[ RUN      ] ddl~sequence.BasicIncDec
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher doesn't exist. Skipping...
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher doesn't exist. Skipping...
[2025-05-26 15:44:03.445] [info] DEBUG LOG: 
[2025-05-26 15:44:03.445] [info] QUERY: CREATE SEQUENCE inc;
[2025-05-26 15:44:03.445] [info] DEBUG LOG: 
[2025-05-26 15:44:03.445] [info] QUERY: CREATE SEQUENCE dec INCREMENT -1;
[2025-05-26 15:44:03.445] [info] DEBUG LOG: 
[2025-05-26 15:44:03.445] [info] QUERY: RETURN nextval('inc');
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.446] [info] DEBUG LOG: 
[2025-05-26 15:44:03.446] [info] QUERY: RETURN nextval('dec');
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.446] [info] DEBUG LOG: 
[2025-05-26 15:44:03.446] [info] QUERY: RETURN currval('inc');
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.446] [info] DEBUG LOG: 
[2025-05-26 15:44:03.446] [info] QUERY: RETURN currval('dec');
GOT HERE 
GOT HERE 222
[       OK ] ddl~sequence.BasicIncDec (10 ms)
[ RUN      ] ddl~sequence.EdgesCycle
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher doesn't exist. Skipping...
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher doesn't exist. Skipping...
[2025-05-26 15:44:03.455] [info] DEBUG LOG: 
[2025-05-26 15:44:03.455] [info] QUERY: CREATE SEQUENCE overflowMax START 9223372036854775807 INCREMENT 1 CYCLE;
[2025-05-26 15:44:03.456] [info] DEBUG LOG: 
[2025-05-26 15:44:03.456] [info] QUERY: CREATE SEQUENCE overflowMin START -9223372036854775808 INCREMENT -1 CYCLE;
[2025-05-26 15:44:03.456] [info] DEBUG LOG: 
[2025-05-26 15:44:03.456] [info] QUERY: CREATE SEQUENCE edgeMax START 10 INCREMENT 1 MAXVALUE 10 CYCLE;
[2025-05-26 15:44:03.456] [info] DEBUG LOG: 
[2025-05-26 15:44:03.456] [info] QUERY: CREATE SEQUENCE edgeMin START -10 INCREMENT -1 MINVALUE -10 CYCLE;
[2025-05-26 15:44:03.456] [info] DEBUG LOG: 
[2025-05-26 15:44:03.456] [info] QUERY: RETURN nextval('overflowMax');
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.456] [info] DEBUG LOG: 
[2025-05-26 15:44:03.456] [info] QUERY: RETURN nextval('overflowMin');
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.457] [info] DEBUG LOG: 
[2025-05-26 15:44:03.457] [info] QUERY: RETURN nextval('edgeMax');
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.457] [info] DEBUG LOG: 
[2025-05-26 15:44:03.457] [info] QUERY: RETURN nextval('edgeMin');
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.457] [info] DEBUG LOG: 
[2025-05-26 15:44:03.457] [info] QUERY: RETURN nextval('overflowMax');
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.457] [info] DEBUG LOG: 
[2025-05-26 15:44:03.457] [info] QUERY: RETURN nextval('overflowMin');
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.458] [info] DEBUG LOG: 
[2025-05-26 15:44:03.458] [info] QUERY: RETURN nextval('edgeMax');
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.458] [info] DEBUG LOG: 
[2025-05-26 15:44:03.458] [info] QUERY: RETURN nextval('edgeMin');
GOT HERE 
GOT HERE 222
[       OK ] ddl~sequence.EdgesCycle (11 ms)
[ RUN      ] ddl~sequence.AddPropertySequence
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher doesn't exist. Skipping...
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher doesn't exist. Skipping...
[2025-05-26 15:44:03.467] [info] DEBUG LOG: 
[2025-05-26 15:44:03.467] [info] QUERY: CREATE SEQUENCE test;
[2025-05-26 15:44:03.467] [info] DEBUG LOG: 
[2025-05-26 15:44:03.467] [info] QUERY: CREATE SEQUENCE test2;
[2025-05-26 15:44:03.467] [info] DEBUG LOG: 
[2025-05-26 15:44:03.467] [info] QUERY: create node table Comment (id int64, PRIMARY KEY (id));
[2025-05-26 15:44:03.468] [info] DEBUG LOG: 
[2025-05-26 15:44:03.468] [info] QUERY: create rel table replyOf (FROM Comment TO Comment, MANY_ONE);
[2025-05-26 15:44:03.469] [info] DEBUG LOG: 
[2025-05-26 15:44:03.469] [info] QUERY: copy Comment from '/Users/tanvirgahunia/work/kuzu/dataset/lsqb-sf01/Comment.csv' (HEADER=true);
[2025-05-26 15:44:03.640] [info] DEBUG LOG: 
[2025-05-26 15:44:03.640] [info] QUERY: copy replyOf from '/Users/tanvirgahunia/work/kuzu/dataset/lsqb-sf01/Comment_replyOf_Comment.csv' (HEADER=true);
[2025-05-26 15:44:03.913] [info] DEBUG LOG: 
[2025-05-26 15:44:03.913] [info] QUERY: alter table Comment add propx int64 default nextval('test');
[2025-05-26 15:44:03.937] [info] DEBUG LOG: 
[2025-05-26 15:44:03.937] [info] QUERY: MATCH (c:Comment) RETURN SUM(c.propx);
GOT HERE 
GOT HERE 222
[2025-05-26 15:44:03.945] [info] DEBUG LOG: 
[2025-05-26 15:44:03.945] [info] QUERY: alter table replyOf add propx int64 default nextval('test2');
[       OK ] ddl~sequence.AddPropertySequence (493 ms)
[ RUN      ] ddl~sequence.CycleSequencePKey
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/schema.cypher doesn't exist. Skipping...
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/empty/copy.cypher doesn't exist. Skipping...
[2025-05-26 15:44:03.960] [info] DEBUG LOG: 
[2025-05-26 15:44:03.960] [info] QUERY: CREATE SEQUENCE test START 1 MAXVALUE 3;
[2025-05-26 15:44:03.960] [info] DEBUG LOG: 
[2025-05-26 15:44:03.960] [info] QUERY: CREATE NODE TABLE test(id INT64 DEFAULT nextval('test'), PRIMARY KEY(id));
[2025-05-26 15:44:03.961] [info] DEBUG LOG: 
[2025-05-26 15:44:03.961] [info] QUERY: CREATE (t:test);           CREATE (t:test);            CREATE (t:test);
[2025-05-26 15:44:03.963] [info] DEBUG LOG: 
[2025-05-26 15:44:03.963] [info] QUERY: CREATE (t:test);
[       OK ] ddl~sequence.CycleSequencePKey (12 ms)
[----------] 13 tests from ddl~sequence (678 ms total)

[----------] Global test environment tear-down
[==========] 13 tests from 1 test suite ran. (678 ms total)
[  PASSED  ] 13 tests.
[2025-05-26 15:44:03.972] [info] Starting runner in Rewrite Mode
[==========] Running 5 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 5 tests from exceptions~insert_delete
[ RUN      ] exceptions~insert_delete.DeleteNodeWithEdgeErrorTest
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/schema.cypher
Starting to execute query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Executed query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Starting to execute query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Executed query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Starting to execute query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Executed query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Starting to execute query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Executed query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Starting to execute query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Executed query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Starting to execute query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Executed query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Starting to execute query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Executed query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Starting to execute query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
Executed query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/copy.cypher
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Starting to execute query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Executed query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Starting to execute query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Executed query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Starting to execute query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Executed query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Starting to execute query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Executed query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Starting to execute query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Executed query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Starting to execute query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
Executed query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
[2025-05-26 15:44:05.175] [info] DEBUG LOG: 
[2025-05-26 15:44:05.175] [info] QUERY: MATCH (a:person) WHERE a.ID = 0 DELETE a
[       OK ] exceptions~insert_delete.DeleteNodeWithEdgeErrorTest (1229 ms)
[ RUN      ] exceptions~insert_delete.InsertNodeWithNullPK
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/schema.cypher
Starting to execute query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Executed query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Starting to execute query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Executed query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Starting to execute query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Executed query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Starting to execute query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Executed query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Starting to execute query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Executed query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Starting to execute query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Executed query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Starting to execute query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Executed query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Starting to execute query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
Executed query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/copy.cypher
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Starting to execute query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Executed query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Starting to execute query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Executed query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Starting to execute query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Executed query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Starting to execute query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Executed query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Starting to execute query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Executed query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Starting to execute query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
Executed query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
[2025-05-26 15:44:06.383] [info] DEBUG LOG: 
[2025-05-26 15:44:06.383] [info] QUERY: CREATE (a:person {ID:NULL, fName:'Guodong'})
[       OK ] exceptions~insert_delete.InsertNodeWithNullPK (1188 ms)
[ RUN      ] exceptions~insert_delete.InsertNodeWithExistedPKError2
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/schema.cypher
Starting to execute query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Executed query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Starting to execute query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Executed query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Starting to execute query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Executed query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Starting to execute query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Executed query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Starting to execute query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Executed query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Starting to execute query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Executed query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Starting to execute query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Executed query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Starting to execute query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
Executed query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/copy.cypher
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Starting to execute query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Executed query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Starting to execute query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Executed query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Starting to execute query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Executed query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Starting to execute query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Executed query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Starting to execute query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Executed query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Starting to execute query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
Executed query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
[2025-05-26 15:44:07.580] [info] DEBUG LOG: 
[2025-05-26 15:44:07.580] [info] QUERY: CREATE (a:person {ID:100, fName:'Charlie'})
[2025-05-26 15:44:07.582] [info] DEBUG LOG: 
[2025-05-26 15:44:07.582] [info] QUERY: CREATE (a:person {ID:100, fName:'Guodong'})
[       OK ] exceptions~insert_delete.InsertNodeWithExistedPKError2 (1195 ms)
[ RUN      ] exceptions~insert_delete.InsertNodeWithExistedPKError1
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/schema.cypher
Starting to execute query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Executed query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Starting to execute query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Executed query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Starting to execute query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Executed query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Starting to execute query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Executed query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Starting to execute query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Executed query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Starting to execute query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Executed query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Starting to execute query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Executed query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Starting to execute query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
Executed query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/copy.cypher
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Starting to execute query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Executed query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Starting to execute query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Executed query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Starting to execute query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Executed query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Starting to execute query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Executed query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Starting to execute query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Executed query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Starting to execute query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
Executed query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
[2025-05-26 15:44:08.777] [info] DEBUG LOG: 
[2025-05-26 15:44:08.777] [info] QUERY: CREATE (a:person {ID:0, fName:'Charlie'})
[       OK ] exceptions~insert_delete.InsertNodeWithExistedPKError1 (1195 ms)
[ RUN      ] exceptions~insert_delete.InsertNodeWithoutPrimaryKeyTest
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/schema.cypher
Starting to execute query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Executed query: create node table person (ID INt64, fName StRING, gender INT64, isStudent BoOLEAN, isWorker BOOLEAN, age INT64, eyeSight DOUBLE, birthdate DATE, registerTime TIMESTAMP, lastJobDuration interval, workedHours INT64[], usedNames STRING[], courseScoresPerTerm INT64[][], grades INT64[4], height float, u UUID, PRIMARY KEY (ID));
Starting to execute query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Executed query: create node table organisation (ID INT64, name STRING, orgCode INT64, mark DOUBLE, score INT64, history STRING, licenseValidInterval INTERVAL, rating DOUBLE, state STRUCT(revenue INT16, location STRING[], stock STRUCT(price INT64[], volume INT64)), info UNION(price FLOAT, movein DATE, note STRING),PRIMARY KEY (ID));
Starting to execute query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Executed query: create node table movies (name STRING, length INT32, note STRING, description STRUCT(rating DOUBLE, stars INT8, views INT64, release TIMESTAMP, release_ns TIMESTAMP_NS, release_ms TIMESTAMP_MS, release_sec TIMESTAMP_SEC, release_tz TIMESTAMP_TZ, film DATE, u8 UINT8, u16 UINT16, u32 UINT32, u64 UINT64, hugedata INT128), content BYTEA, audience MAP(STRING, INT64), grade union(credit boolean, grade1 double, grade2 int64), PRIMARY KEY (name));
Starting to execute query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Executed query: create rel table knows (FROM person TO person, date DATE, meetTime TIMESTAMP, validInterval INTERVAL, comments STRING[], summary STRUCT(locations STRING[], transfer STRUCT(day DATE, amount INT64[])), notes UNION(firstmet DATE, type INT16, comment STRING), someMap MAP(STRING, STRING), MANY_MAnY);
Starting to execute query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Executed query: create rel table studyAt (FROM person TO organisation, year INT64, places STRING[], length INT16, level INT8, code UINT64, temperature UINT32, ulength UINT16, ulevel UINT8, hugedata INT128, MANY_ONe);
Starting to execute query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Executed query: create rel table workAt (FROM person TO organisation, year INT64, grading DOUBLE[2], rating float, MANY_ONE);
Starting to execute query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Executed query: create rel table meets (FROM person TO person, location FLOAT[2], times INT, data BYTEA, MANY_ONE);
Starting to execute query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
Executed query: create rel table marries (FROM person TO person, usedAddress STRING[], address INT16[2], note STRING, ONE_ONE);
cypherScript: /Users/tanvirgahunia/work/kuzu/dataset/tinysnb/copy.cypher
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson.csv";
Starting to execute query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Executed query: COPY person FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vPerson2.csv";
Starting to execute query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Executed query: COPY organisation FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vOrganisation.csv";
Starting to execute query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Executed query: COPY movies FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/vMovies.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows.csv";
Starting to execute query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Executed query: COPY knows FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eKnows_2.csv";
Starting to execute query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Executed query: COPY studyAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eStudyAt.csv";
Starting to execute query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Executed query: COPY workAt FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eWorkAt.csv";
Starting to execute query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Executed query: COPY meets FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMeets.csv";
Starting to execute query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
Executed query: COPY marries FROM "/Users/tanvirgahunia/work/kuzu/dataset/tinysnb/eMarries.csv";
[2025-05-26 15:44:09.965] [info] DEBUG LOG: 
[2025-05-26 15:44:09.965] [info] QUERY: CREATE (a:person {isWorker:true})
[       OK ] exceptions~insert_delete.InsertNodeWithoutPrimaryKeyTest (1189 ms)
[----------] 5 tests from exceptions~insert_delete (5998 ms total)

[----------] Global test environment tear-down
[==========] 5 tests from 1 test suite ran. (5998 ms total)
[  PASSED  ] 5 tests.
