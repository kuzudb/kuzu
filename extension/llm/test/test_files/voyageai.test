-SKIP
-DATASET CSV llm/embeddings/voyageai/

--

-CASE CreateEmbeddingVoyageAILargeModel

-STATEMENT load extension "${KUZU_ROOT_DIRECTORY}/extension/llm/build/libllm.kuzu_extension"
---- ok

-STATEMENT MATCH (e:embedding) RETURN array_cosine_similarity(e.embedding, create_embedding(e.text, 'voyage-ai', 'voyage-3-large')) >= 0.9 AS similarity;
---- 4
True
True
True
True

-CASE TryConfiguration

-STATEMENT load extension "${KUZU_ROOT_DIRECTORY}/extension/llm/build/libllm.kuzu_extension"
---- ok

-STATEMENT return create_embedding('Hello World', 'voyage-ai', 'voyage-3-large', 512);
---- ok

-STATEMENT return create_embedding('Hello World', 'voyage-ai', 'voyage-3-large', 256);
---- ok

-CASE SemanticDistanceCheck

-STATEMENT load extension "${KUZU_ROOT_DIRECTORY}/extension/llm/build/libllm.kuzu_extension"
---- ok

-LOG Similar Text 1
-STATEMENT WITH create_embedding('Who is the author of 1984?', 'voyage-ai', 'voyage-3-large') AS t1, create_embedding('Who wrote the novel 1984?', 'voyage-ai', 'voyage-3-large') AS t2 RETURN array_cosine_similarity(t1, t2) >- 0.8;
---- 1
True


-LOG Similar Text 2
-STATEMENT WITH create_embedding('What is the capital of France?', 'voyage-ai', 'voyage-3-large') AS t1, create_embedding('Which city is the capital of France?', 'voyage-ai', 'voyage-3-large') AS t2 RETURN array_cosine_similarity(t1, t2) >- 0.8;
---- 1
True


-LOG Dissimilar Text 1
-STATEMENT WITH create_embedding('How to train a dog', 'voyage-ai', 'voyage-3-large') AS t1, create_embedding('What is the capital of France', 'voyage-ai', 'voyage-3-large') AS t2 RETURN array_cosine_similarity(t1, t2) >- 0.8;
---- 1
False


-LOG Dissimilar Text 2
-STATEMENT WITH create_embedding('How do Unix file permissions work?', 'voyage-ai', 'voyage-3-large') AS t1, create_embedding('History of the Roman Empire', 'voyage-ai', 'voyage-3-large') AS t2 RETURN array_cosine_similarity(t1, t2) >- 0.8;
---- 1
False

#TODO(TANVIR)
-CASE UseWithVectorExtension
-STATEMENT load extension "${KUZU_ROOT_DIRECTORY}/extension/llm/build/libllm.kuzu_extension"
---- ok

-STATEMENT load extension "${KUZU_ROOT_DIRECTORY}/extension/vector/build/libvector.kuzu_extension"
---- ok

-STATEMENT CREATE NODE TABLE Book(id SERIAL PRIMARY KEY, title STRING, title_embedding FLOAT[1536], published_year INT64);
---- ok

-STATEMENT CREATE NODE TABLE Publisher(name STRING PRIMARY KEY);
---- ok

-STATEMENT CREATE REL TABLE PublishedBy(FROM Book TO Publisher);
---- ok

-STATEMENT CREATE (b:Book {title: 'The Quantum World', published_year: 2004});
---- ok

-STATEMENT CREATE (b:Book {title: 'Chronicles of the Universe', published_year: 2022});
---- ok

-STATEMENT CREATE (b:Book {title: 'Learning Machines', published_year: 2019});
---- ok

-STATEMENT CREATE (b:Book {title: 'Echoes of the Past', published_year: 2010});
---- ok

-STATEMENT CREATE (b:Book {title: 'The Dragon Call', published_year: 2015});
---- ok

-STATEMENT CREATE (p:Publisher {name: "Harvard University Press"});
---- ok

-STATEMENT CREATE (p:Publisher {name: "Independent Publisher"});
---- ok

-STATEMENT CREATE (p:Publisher {name: "Pearson"});
---- ok

-STATEMENT CREATE (p:Publisher {name: "McGraw-Hill Ryerson"});
---- ok

-STATEMENT CREATE (p:Publisher {name: "O'Reilly"});
---- ok

-STATEMENT MATCH (b:Book {title: 'The Quantum World'}) MATCH (p:Publisher {name: 'Harvard University Press'}) CREATE (b)-[:PublishedBy]->(p);
---- ok

-STATEMENT MATCH (b:Book {title: 'Chronicles of the Universe'}) MATCH (p:Publisher {name: 'Independent Publisher'}) CREATE (b)-[:PublishedBy]->(p);
---- ok

-STATEMENT MATCH (b:Book {title: 'Learning Machines'}) MATCH (p:Publisher {name: 'Pearson'}) CREATE (b)-[:PublishedBy]->(p);
---- ok

-STATEMENT MATCH (b:Book {title: 'Echoes of the Past'}) MATCH (p:Publisher {name: 'McGraw-Hill Ryerson'}) CREATE (b)-[:PublishedBy]->(p);
---- ok

-STATEMENT MATCH (b:Book {title: 'The Dragon Call'}) MATCH (p:Publisher {name: "O'Reilly"}) CREATE (b)-[:PublishedBy]->(p);
---- ok

-STATEMENT MATCH (b:Book) WITH b, create_embedding(b.title, 'amazon-bedrock', 'amazon.titan-embed-text-v1', 'us-east-1') AS emb SET b.title_embedding = emb;
---- ok

-STATEMENT CALL CREATE_VECTOR_INDEX('Book', 'title_vec_index', 'title_embedding');
---- ok

-STATEMENT CALL QUERY_VECTOR_INDEX('Book', 'title_vec_index', create_embedding('Quantum Machines', 'amazon-bedrock', 'amazon.titan-embed-text-v1', 'us-east-1'), 2) RETURN node.title ORDER BY distance;
---- 2
Learning Machines
The Quantum World
