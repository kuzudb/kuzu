-DATASET CSV snap/grqc

--

-CASE grqc

-LOAD_DYNAMIC_EXTENSION algo

-STATEMENT CALL PROJECT_GRAPH('G', ['nodes'], ['edges'])
---- ok

-LOG WCC
-STATEMENT CALL weakly_connected_components('G') WITH group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 10
4158
14
12
10
9
9
8
8
8
8

-LOG SCC
-STATEMENT CALL strongly_connected_components('G') with group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 10
4158
14
12
10
9
9
8
8
8
8

-LOG SCC-KO
-STATEMENT CALL strongly_connected_components_kosaraju('G') with group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 10
4158
14
12
10
9
9
8
8
8
8

#-LOG LOUVAIN
#-STATEMENT CALL louvain('G') with node.ID AS id, group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
#---- 10
#78|1552|323
#26|4540|283
#122|1173|264
#45|68|245
#24|2087|241
#628|892|207
#27|2290|198
#80|2638|193
#164|4808|180
#22|4218|170

-LOG PageRank
-STATEMENT CALL page_rank('G', normalizeInitial:=false) WITH node.ID AS id, rank ORDER BY rank DESC LIMIT 10 RETURN id;
---- 10
14265
13801
13929
9572
21281
2710
7689
22691
6264
21012

-LOG KCore
-STATEMENT CALL k_core_decomposition('G') RETURN  k_degree, COUNT(*) AS c ORDER BY c DESC LIMIT 10;
-CHECK_ORDER
---- 10
2|1322
4|1307
6|1028
8|668
10|349
12|113
14|50
16|45
86|44
18|39

-CASE grqc_filter_low_selectivity

-LOAD_DYNAMIC_EXTENSION algo

-STATEMENT CALL PROJECT_GRAPH('G', {'nodes': 'n.id < 1000' }, ['edges'])
---- ok

-LOG WCC
-STATEMENT CALL weakly_connected_components('G') WITH group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 10
4
4
3
3
2
2
2
2
2
2

-LOG SCC
-STATEMENT CALL strongly_connected_components('G') with group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 10
4
4
3
3
2
2
2
2
2
2

-LOG SCC-KO
-STATEMENT CALL strongly_connected_components_kosaraju('G') with group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 10
4
4
3
3
2
2
2
2
2
2

#-LOG LOUVAIN
#-STATEMENT CALL louvain('G') with node.ID AS id, group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
#---- 10
#231|5|4
#45|6|4
#65|151|3
#185|165|3
#350|79|2
#22|101|2
#122|70|2
#482|76|2
#449|38|2
#200|59|2

-LOG PageRank
# most of the nodes have the same page rank so we just check for the highest
-STATEMENT CALL page_rank('G') WITH node.ID AS id, rank ORDER BY rank DESC LIMIT 1 RETURN id;
-CHECK_ORDER
---- 1
65

-LOG KCore
-STATEMENT CALL k_core_decomposition('G') RETURN  k_degree, COUNT(*) AS c ORDER BY c DESC LIMIT 10;
-CHECK_ORDER
---- 3
0|161
2|26
4|7

-CASE grqc_filter_high_selectivity

-LOAD_DYNAMIC_EXTENSION algo

-STATEMENT CALL PROJECT_GRAPH('G', {'nodes':  'n.id >= 1000'}, ['edges'])
---- ok

-LOG WCC
-STATEMENT CALL weakly_connected_components('G') WITH group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 10
3949
13
12
10
9
9
8
8
8
8

-LOG SCC
-STATEMENT CALL strongly_connected_components('G') with group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 10
3949
13
12
10
9
9
8
8
8
8

-LOG SCC-KO
-STATEMENT CALL strongly_connected_components_kosaraju('G') with group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 10
3949
13
12
10
9
9
8
8
8
8

#-LOG LOUVAIN
#-STATEMENT CALL louvain('G') with node.ID AS id, group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
#---- 10
#1124|3688|281
#1075|109|248
#1186|3344|234
#1058|1308|197
#1048|1937|197
#1006|1050|193
#1025|4020|189
#1008|2498|183
#1014|2369|171
#1105|2791|134

-LOG PageRank
-STATEMENT CALL page_rank('G', normalizeInitial:=false) WITH node.ID AS id, rank ORDER BY rank DESC LIMIT 10 RETURN id;
---- 10
14265
13801
13929
9572
21281
7689
21012
22691
2710
6264

-LOG KCore
-STATEMENT CALL k_core_decomposition('G') RETURN  k_degree, COUNT(*) AS c ORDER BY c DESC LIMIT 10;
-CHECK_ORDER
---- 10
2|1305
4|1268
6|973
8|609
10|329
12|103
16|49
14|45
0|44
80|41
