-DATASET CSV snap/email-Eu-core

--

-CASE email_eu_core

-LOAD_DYNAMIC_EXTENSION algo

-STATEMENT CALL PROJECT_GRAPH('G', ['nodes'], ['edges'])
---- ok

-LOG WCC
-STATEMENT CALL weakly_connected_components('G') WITH group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 10
986
1
1
1
1
1
1
1
1
1

-LOG SCC
-STATEMENT CALL strongly_connected_components('G') with group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 10
803
1
1
1
1
1
1
1
1
1

-LOG SCC-KO
-STATEMENT CALL strongly_connected_components_kosaraju('G') with group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 10
803
1
1
1
1
1
1
1
1
1

#-LOG LOUVAIN
#-STATEMENT CALL louvain('G') with node.ID AS id, group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
#---- 10
#10|645|224
#2|922|129
#13|972|128
#14|328|121
#52|804|98
#7|765|90
#0|947|66
#15|854|32
#605|829|2
#712|882|2

-LOG PageRank
-STATEMENT CALL page_rank('G', normalizeInitial:=false) WITH node.ID AS id, rank ORDER BY rank DESC LIMIT 10 RETURN id;
---- 10
1
160
130
62
86
107
365
121
5
129

-LOG KCore
-STATEMENT CALL k_core_decomposition('G') RETURN  k_degree, COUNT(*) AS c ORDER BY c DESC LIMIT 10;
-CHECK_ORDER
---- 10
56|98
1|71
2|48
45|43
36|38
48|35
3|33
4|32
7|28
49|26

-CASE low_selectivity

-LOAD_DYNAMIC_EXTENSION algo

-STATEMENT CALL PROJECT_GRAPH('G', {'nodes': 'n.id < 100' }, ['edges'])
---- ok

-LOG WCC
-STATEMENT CALL weakly_connected_components('G') WITH group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 1
100

-LOG SCC
-STATEMENT CALL strongly_connected_components('G') with group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 3
98
1
1

-LOG SCC-KO
-STATEMENT CALL strongly_connected_components_kosaraju('G') with group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 3
98
1
1

#-LOG LOUVAIN
#-STATEMENT CALL louvain('G') with node.ID AS id, group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
#---- 5
#0|72|29
#7|85|27
#13|22|25
#2|75|15
#66|64|4

-LOG PageRank
-STATEMENT CALL page_rank('G') WITH node.ID AS id, rank ORDER BY rank DESC LIMIT 10 RETURN id;
-CHECK_ORDER
---- 10
1
62
86
96
28
23
64
21
82
30

# Don't check order here as multiple groups have size 4
-LOG KCore
-STATEMENT CALL k_core_decomposition('G') RETURN  k_degree, COUNT(*) AS c ORDER BY c DESC LIMIT 10;
---- 10
22|22
24|15
10|11
19|8
15|6
12|4
20|4
16|4
11|4
6|4

-CASE high_selectivity

-LOAD_DYNAMIC_EXTENSION algo

-STATEMENT CALL PROJECT_GRAPH('G', {'nodes': 'n.id >= 100' }, ['edges'])
---- ok

-LOG WCC
-STATEMENT CALL weakly_connected_components('G') WITH group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 10
866
1
1
1
1
1
1
1
1
1

-LOG SCC
-STATEMENT CALL strongly_connected_components('G') with group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 10
685
2
1
1
1
1
1
1
1
1

-LOG SCC-KO
-STATEMENT CALL strongly_connected_components_kosaraju('G') with group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
---- 10
685
2
1
1
1
1
1
1
1
1

#-LOG LOUVAIN
#-STATEMENT CALL louvain('G') with node.ID AS id, group_id, COUNT(*) AS c RETURN c ORDER BY c DESC LIMIT 10;
#---- 10
#100|578|179
#120|841|112
#102|822|111
#103|704|95
#113|819|90
#117|786|87
#141|673|83
#139|754|32
#712|782|2
#801|262|1

-LOG PageRank
-STATEMENT CALL page_rank('G', normalizeInitial:=false) WITH node.ID AS id, rank ORDER BY rank DESC LIMIT 10 RETURN id;
---- 10
160
130
365
107
121
129
183
106
434
128

-LOG KCore
-STATEMENT CALL k_core_decomposition('G') RETURN  k_degree, COUNT(*) AS c ORDER BY c DESC LIMIT 10;
-CHECK_ORDER
---- 10
1|69
2|54
44|51
4|39
27|36
36|34
3|32
28|30
6|29
7|27
