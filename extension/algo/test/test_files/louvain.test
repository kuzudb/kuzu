-DATASET CSV empty

--

-CASE Basic
-LOAD_DYNAMIC_EXTENSION algo
-STATEMENT CREATE NODE TABLE Node(id INT64 PRIMARY KEY);
---- ok
-STATEMENT CREATE REL TABLE Edge(FROM Node to Node);
---- ok
-STATEMENT CREATE (u0:Node {id: 0}),
            (u1:Node {id: 1}),
            (u2:Node {id: 2}),
            (u3:Node {id: 3}),
            (u4:Node {id: 4}),
            (u5:Node {id: 5}),
            (u6:Node {id: 6}),
            (u7:Node {id: 7}),
            (u8:Node {id: 8}),
            (u9:Node {id: 9}),
            (u0)-[:Edge]->(u1),
            (u0)-[:Edge]->(u2),
            (u1)-[:Edge]->(u2),
            (u2)-[:Edge]->(u3),
            (u3)-[:Edge]->(u4),
            (u5)-[:Edge]->(u6),
            (u5)-[:Edge]->(u7),
            (u6)-[:Edge]->(u7),
            (u7)-[:Edge]->(u8),
            (u8)-[:Edge]->(u9),
            (u2)-[:Edge]->(u5),
            (u4)-[:Edge]->(u9);
---- ok
-STATEMENT CALL PROJECT_GRAPH('Graph', ['Node'], ['Edge'])
---- ok
-STATEMENT CALL LOUVAIN('Graph') WITH louvain_id, min(node.id) as louvainId, count(*) as nodeCount, list_sort(collect(node.id)) as nodeIds RETURN louvainId, nodeCount, nodeIds ORDER BY louvainId;
---- 3
0|3|[0,1,2]
3|4|[3,4,8,9]
5|3|[5,6,7]

-CASE OnlyNodes
-LOAD_DYNAMIC_EXTENSION algo
-STATEMENT CREATE NODE TABLE Node(id INT64 PRIMARY KEY);
---- ok
-STATEMENT CREATE REL TABLE Edge(FROM Node to Node);
---- ok
-STATEMENT CREATE (u0:Node {id: 0}),
            (u1:Node {id: 1}),
            (u2:Node {id: 2}),
            (u3:Node {id: 3}),
            (u4:Node {id: 4}),
            (u5:Node {id: 5}),
            (u0)-[:Edge]->(u0);
---- ok
-STATEMENT CALL PROJECT_GRAPH('Graph', ['Node'], ['Edge'])
---- ok
-STATEMENT CALL LOUVAIN('Graph') WITH louvain_id, min(node.id) as louvainId, count(*) as nodeCount, list_sort(collect(node.id)) as nodeIds RETURN louvainId, nodeCount, nodeIds ORDER BY louvainId;
---- 6
0|1|[0]
1|1|[1]
2|1|[2]
3|1|[3]
4|1|[4]
5|1|[5]

-CASE SimplePath
-LOAD_DYNAMIC_EXTENSION algo
-STATEMENT CREATE NODE TABLE Node(id INT64 PRIMARY KEY);
---- ok
-STATEMENT CREATE REL TABLE Edge(FROM Node to Node);
---- ok
-STATEMENT CREATE (u0:Node {id: 0}),
            (u1:Node {id: 1}),
            (u2:Node {id: 2}),
            (u3:Node {id: 3}),
            (u4:Node {id: 4}),
            (u5:Node {id: 5}),
            (u0)-[:Edge]->(u1),
            (u1)-[:Edge]->(u2),
            (u2)-[:Edge]->(u3),
            (u3)-[:Edge]->(u4),
            (u4)-[:Edge]->(u5);
---- ok
-STATEMENT CALL PROJECT_GRAPH('Graph', ['Node'], ['Edge'])
---- ok
-STATEMENT CALL LOUVAIN('Graph') WITH louvain_id, min(node.id) as louvainId, count(*) as nodeCount, list_sort(collect(node.id)) as nodeIds RETURN louvainId, nodeCount, nodeIds ORDER BY louvainId;
---- 2
0|3|[0,1,2]
3|3|[3,4,5]

-CASE Single6Clique
-LOAD_DYNAMIC_EXTENSION algo
-STATEMENT CREATE NODE TABLE Node(id INT64 PRIMARY KEY);
---- ok
-STATEMENT CREATE REL TABLE Edge(FROM Node to Node);
---- ok
-STATEMENT CREATE (u0:Node {id: 0}),
            (u1:Node {id: 1}),
            (u2:Node {id: 2}),
            (u3:Node {id: 3}),
            (u4:Node {id: 4}),
            (u5:Node {id: 5}),
            (u0)-[:Edge]->(u1),
            (u0)-[:Edge]->(u2),
            (u1)-[:Edge]->(u2),
            (u0)-[:Edge]->(u3),
            (u1)-[:Edge]->(u3),
            (u2)-[:Edge]->(u3),
            (u0)-[:Edge]->(u4),
            (u1)-[:Edge]->(u4),
            (u2)-[:Edge]->(u4),
            (u3)-[:Edge]->(u4),
            (u0)-[:Edge]->(u5),
            (u1)-[:Edge]->(u5),
            (u2)-[:Edge]->(u5),
            (u3)-[:Edge]->(u5),
            (u4)-[:Edge]->(u5);
---- ok
-STATEMENT CALL PROJECT_GRAPH('Graph', ['Node'], ['Edge'])
---- ok
-STATEMENT CALL LOUVAIN('Graph') WITH louvain_id, min(node.id) as louvainId, count(*) as nodeCount, list_sort(collect(node.id)) as nodeIds RETURN louvainId, nodeCount, nodeIds ORDER BY louvainId;
---- 1
0|6|[0,1,2,3,4,5]

-CASE Two3Clique
-LOAD_DYNAMIC_EXTENSION algo
-STATEMENT CREATE NODE TABLE Node(id INT64 PRIMARY KEY);
---- ok
-STATEMENT CREATE REL TABLE Edge(FROM Node to Node);
---- ok
-STATEMENT CREATE (u0:Node {id: 0}),
            (u1:Node {id: 1}),
            (u2:Node {id: 2}),
            (u3:Node {id: 3}),
            (u4:Node {id: 4}),
            (u5:Node {id: 5}),
            (u0)-[:Edge]->(u1),
            (u0)-[:Edge]->(u2),
            (u1)-[:Edge]->(u2),
            (u3)-[:Edge]->(u4),
            (u4)-[:Edge]->(u5),
            (u5)-[:Edge]->(u3),
            (u2)-[:Edge]->(u3);
---- ok
-STATEMENT CALL PROJECT_GRAPH('Graph', ['Node'], ['Edge'])
---- ok
-STATEMENT CALL LOUVAIN('Graph') WITH louvain_id, min(node.id) as louvainId, count(*) as nodeCount, list_sort(collect(node.id)) as nodeIds RETURN louvainId, nodeCount, nodeIds ORDER BY louvainId;
---- 2
0|3|[0,1,2]
3|3|[3,4,5]

-CASE Two4Clique
-LOAD_DYNAMIC_EXTENSION algo
-STATEMENT CREATE NODE TABLE Node(id INT64 PRIMARY KEY);
---- ok
-STATEMENT CREATE REL TABLE Edge(FROM Node to Node);
---- ok
-STATEMENT CREATE (u0:Node {id: 0}),
            (u1:Node {id: 1}),
            (u2:Node {id: 2}),
            (u3:Node {id: 3}),
            (u4:Node {id: 4}),
            (u5:Node {id: 5}),
            (u6:Node {id: 6}),
            (u7:Node {id: 7}),
            (u0)-[:Edge]->(u1),
            (u0)-[:Edge]->(u2),
            (u1)-[:Edge]->(u2),
            (u0)-[:Edge]->(u3),
            (u1)-[:Edge]->(u3),
            (u2)-[:Edge]->(u3),
            (u4)-[:Edge]->(u5),
            (u4)-[:Edge]->(u6),
            (u5)-[:Edge]->(u6),
            (u4)-[:Edge]->(u7),
            (u5)-[:Edge]->(u7),
            (u6)-[:Edge]->(u7),
            (u3)-[:Edge]->(u4);
---- ok
-STATEMENT CALL PROJECT_GRAPH('Graph', ['Node'], ['Edge'])
---- ok
-STATEMENT CALL LOUVAIN('Graph', maxphases:=50, maxiterations:=100) WITH louvain_id, min(node.id) as louvainId, count(*) as nodeCount, list_sort(collect(node.id)) as nodeIds RETURN louvainId, nodeCount, nodeIds ORDER BY louvainId;
---- 2
0|4|[0,1,2,3]
4|4|[4,5,6,7]
