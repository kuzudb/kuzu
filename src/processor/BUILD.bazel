load("@rules_cc//cc:defs.bzl", "cc_library")

cc_library(
    name = "data_pos",
    hdrs = [
        "include/physical_plan/data_pos.h",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "result",
    srcs = glob([
        "physical_plan/result/*.cpp",
    ]),
    hdrs = glob([
        "include/physical_plan/result/*.h",
    ]),
    visibility = ["//visibility:public"],
    deps = [
        "data_pos",
        "//src/common:data_chunk",
        "//src/common:type_utils",
        "//src/planner/logical_plan",
        "//src/storage/storage_structure:lists",
    ],
)

cc_library(
    name = "filtering_operator",
    hdrs = [
        "include/physical_plan/operator/filtering_operator.h",
    ],
    deps = [
        "//src/common:data_chunk",
    ],
)

cc_library(
    name = "execution_context",
    hdrs = [
        "include/execution_context.h",
    ],
    deps = [
        "//src/common:profiler",
        "//src/transaction",
    ],
)

cc_library(
    name = "base_operator",
    srcs = [
        "physical_plan/operator/physical_operator.cpp",
    ],
    hdrs = [
        "include/physical_plan/operator/physical_operator.h",
    ],
    deps = [
        "data_pos",
        "execution_context",
        "result",
    ],
)

cc_library(
    name = "source_operator",
    hdrs = [
        "include/physical_plan/operator/source_operator.h",
    ],
    deps = [
        "result",
    ],
)

cc_library(
    name = "sink_operator",
    hdrs = [
        "include/physical_plan/operator/sink.h",
    ],
    deps = [
        "base_operator",
    ],
)

cc_library(
    name = "base_table_scan_operator",
    srcs = [
        "physical_plan/operator/base_table_scan.cpp",
    ],
    hdrs = [
        "include/physical_plan/operator/base_table_scan.h",
    ],
    deps = [
        "result_collector",
        "source_operator",
    ],
)

cc_library(
    name = "aggregate",
    srcs = glob([
        "physical_plan/operator/aggregate/*.cpp",
    ]),
    hdrs = glob([
        "include/physical_plan/operator/aggregate/*.h",
    ]),
    deps = [
        "hash_table",
        "sink_operator",
        "source_operator",
        "//src/function/aggregate:aggregate_function",
    ],
)

cc_library(
    name = "hash_join",
    srcs = glob([
        "physical_plan/operator/hash_join/*.cpp",
    ]),
    hdrs = glob([
        "include/physical_plan/operator/hash_join/*.h",
    ]),
    deps = [
        "hash_table",
        "sink_operator",
    ],
)

cc_library(
    name = "var_length_extend",
    srcs = glob([
        "physical_plan/operator/var_length_extend/*.cpp",
    ]),
    hdrs = glob([
        "include/physical_plan/operator/var_length_extend/*.h",
    ]),
    deps = [
        "base_operator",
        "result",
        "//src/storage/storage_structure:column",
    ],
)

cc_library(
    name = "order_by",
    srcs = glob([
        "physical_plan/operator/order_by/*.cpp",
    ]),
    hdrs = glob([
        "include/physical_plan/operator/*.h",
        "include/physical_plan/operator/order_by/*.h",
    ]),
    deps = [
        "sink_operator",
        "//src/function/comparison/operations:comparison_operations",
    ],
)

cc_library(
    name = "scan_column",
    srcs = glob([
        "physical_plan/operator/scan_column/*.cpp",
    ]),
    hdrs = glob([
        "include/physical_plan/operator/scan_column/*.h",
    ]),
    deps = [
        "base_operator",
        "filtering_operator",
        "//src/storage/storage_structure:column",
    ],
)

cc_library(
    name = "update",
    srcs = glob([
        "physical_plan/operator/update/*.cpp",
    ]),
    hdrs = glob([
        "include/physical_plan/operator/update/*.h",
    ]),
    deps = [
        "base_table_scan_operator",
        "//src/expression_evaluator:base_expression_evaluator",
        "//src/storage/storage_structure:column",
    ],
)

cc_library(
    name = "result_collector",
    srcs = [
        "physical_plan/operator/result_collector.cpp",
    ],
    hdrs = [
        "include/physical_plan/operator/result_collector.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "sink_operator",
    ],
)

cc_library(
    name = "read_list",
    srcs = glob([
        "physical_plan/operator/read_list/**/*.cpp",
    ]),
    hdrs = glob([
        "include/physical_plan/operator/read_list/**/*.h",
    ]),
    deps = [
        "base_operator",
    ],
)

cc_library(
    name = "hash_table",
    srcs = glob([
        "physical_plan/hash_table/*.cpp",
    ]),
    hdrs = glob([
        "include/physical_plan/hash_table/*.h",
    ]),
    visibility = ["//visibility:public"],
    deps = [
        "result",
        "//src/function/aggregate:aggregate_function",
        "//src/function/hash/operations:hash_operations",
    ],
)

cc_library(
    name = "operator_impls",
    srcs = glob([
        "physical_plan/operator/*.cpp",
    ]),
    hdrs = glob([
        "include/physical_plan/operator/*.h",
    ]),
    visibility = ["//visibility:public"],
    deps = [
        "aggregate",
        "hash_join",
        "order_by",
        "physical_plan",
        "read_list",
        "scan_column",
        "update",
        "var_length_extend",
        "//src/storage/store:store",
        "//src/common:csv_reader",
        "//src/expression_evaluator:base_expression_evaluator",
    ],
)

cc_library(
    name = "physical_plan",
    hdrs = [
        "include/physical_plan/physical_plan.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "base_operator",
    ],
)

cc_library(
    name = "mapper",
    srcs = glob([
        "physical_plan/mapper/*.cpp",
    ]),
    hdrs = glob([
        "include/physical_plan/mapper/*.h",
    ]),
    visibility = ["//visibility:public"],
    deps = [
        "operator_impls",
        "physical_plan",
        "//src/binder/expression:expression_implementations",
        "//src/expression_evaluator:expression_evaluator_impls",
        "//src/function/aggregate:aggregate_function",
        "//src/planner/logical_plan/logical_operator:logical_operator_impls",
        "//src/storage:storage_manager",
    ],
)

cc_library(
    name = "processor",
    srcs = [
        "processor.cpp",
        "processor_task.cpp",
    ],
    hdrs = [
        "include/processor.h",
        "include/processor_task.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "aggregate",
        "physical_plan",
        "result_collector",
        "//src/common:task_system",
    ],
)
