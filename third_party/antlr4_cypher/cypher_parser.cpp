
// Generated from Cypher.g4 by ANTLR 4.13.1



#include "cypher_parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct CypherParserStaticData final {
  CypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CypherParserStaticData(const CypherParserStaticData&) = delete;
  CypherParserStaticData(CypherParserStaticData&&) = delete;
  CypherParserStaticData& operator=(const CypherParserStaticData&) = delete;
  CypherParserStaticData& operator=(CypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cypherParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CypherParserStaticData *cypherParserStaticData = nullptr;

void cypherParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cypherParserStaticData != nullptr) {
    return;
  }
#else
  assert(cypherParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CypherParserStaticData>(
    std::vector<std::string>{
      "ku_Statements", "oC_Cypher", "oC_Statement", "kU_CopyFrom", "kU_ColumnNames", 
      "kU_ScanSource", "kU_CopyFromByColumn", "kU_CopyTO", "kU_ExportDatabase", 
      "kU_ImportDatabase", "kU_AttachDatabase", "kU_Option", "kU_Options", 
      "kU_DetachDatabase", "kU_UseDatabase", "kU_StandaloneCall", "kU_CommentOn", 
      "kU_CreateMacro", "kU_PositionalArgs", "kU_DefaultArg", "kU_FilePaths", 
      "kU_IfNotExists", "kU_CreateNodeTable", "kU_CreateRelTable", "kU_FromToConnections", 
      "kU_FromToConnection", "kU_CreateSequence", "kU_CreateType", "kU_SequenceOptions", 
      "kU_IncrementBy", "kU_MinValue", "kU_MaxValue", "kU_StartWith", "kU_Cycle", 
      "kU_IfExists", "kU_Drop", "kU_AlterTable", "kU_AlterOptions", "kU_AddProperty", 
      "kU_Default", "kU_DropProperty", "kU_RenameTable", "kU_RenameProperty", 
      "kU_ColumnDefinitions", "kU_ColumnDefinition", "kU_PropertyDefinitions", 
      "kU_PropertyDefinition", "kU_CreateNodeConstraint", "kU_DataType", 
      "kU_ListIdentifiers", "kU_ListIdentifier", "oC_AnyCypherOption", "oC_Explain", 
      "oC_Profile", "kU_Transaction", "kU_Extension", "kU_LoadExtension", 
      "kU_InstallExtension", "kU_UninstallExtension", "kU_UpdateExtension", 
      "oC_Query", "oC_RegularQuery", "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", 
      "oC_MultiPartQuery", "kU_QueryPart", "oC_UpdatingClause", "oC_ReadingClause", 
      "kU_LoadFrom", "oC_YieldItem", "oC_YieldItems", "kU_InQueryCall", 
      "oC_Match", "kU_Hint", "kU_JoinNode", "oC_Unwind", "oC_Create", "oC_Merge", 
      "oC_MergeAction", "oC_Set", "oC_SetItem", "oC_Delete", "oC_With", 
      "oC_Return", "oC_ProjectionBody", "oC_ProjectionItems", "oC_ProjectionItem", 
      "oC_Order", "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
      "oC_PatternPart", "oC_AnonymousPatternPart", "oC_PatternElement", 
      "oC_NodePattern", "oC_PatternElementChain", "oC_RelationshipPattern", 
      "oC_RelationshipDetail", "kU_Properties", "oC_RelationshipTypes", 
      "oC_NodeLabels", "oC_NodeLabel", "kU_RecursiveDetail", "kU_RecursiveType", 
      "oC_RangeLiteral", "kU_RecursiveComprehension", "kU_RecursiveProjectionItems", 
      "oC_LowerBound", "oC_UpperBound", "oC_LabelName", "oC_RelTypeName", 
      "oC_Expression", "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
      "oC_NotExpression", "oC_ComparisonExpression", "kU_ComparisonOperator", 
      "kU_BitwiseOrOperatorExpression", "kU_BitwiseAndOperatorExpression", 
      "kU_BitShiftOperatorExpression", "kU_BitShiftOperator", "oC_AddOrSubtractExpression", 
      "kU_AddOrSubtractOperator", "oC_MultiplyDivideModuloExpression", "kU_MultiplyDivideModuloOperator", 
      "oC_PowerOfExpression", "oC_UnaryAddSubtractOrFactorialExpression", 
      "oC_StringListNullOperatorExpression", "oC_ListOperatorExpression", 
      "oC_StringOperatorExpression", "oC_RegularExpression", "oC_NullOperatorExpression", 
      "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Quantifier", "oC_FilterExpression", 
      "oC_IdInColl", "oC_Literal", "oC_BooleanLiteral", "oC_ListLiteral", 
      "kU_ListEntry", "kU_StructLiteral", "kU_StructField", "oC_ParenthesizedExpression", 
      "oC_FunctionInvocation", "oC_FunctionName", "kU_FunctionParameter", 
      "kU_LambdaParameter", "kU_LambdaVars", "oC_PathPatterns", "oC_ExistCountSubquery", 
      "oC_PropertyLookup", "oC_CaseExpression", "oC_CaseAlternative", "oC_Variable", 
      "oC_NumberLiteral", "oC_Parameter", "oC_PropertyExpression", "oC_PropertyKeyName", 
      "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_SchemaName", "oC_SymbolicName", 
      "kU_NonReservedKeywords", "oC_LeftArrowHead", "oC_RightArrowHead", 
      "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "'('", "')'", "','", "'.'", "'='", "'['", "']'", "'{'", 
      "'}'", "'|'", "'..'", "'<>'", "'<'", "'<='", "'>'", "'>='", "'&'", 
      "'>>'", "'<<'", "'+'", "'/'", "'%'", "'^'", "'=~'", "'$'", "'\\u27E8'", 
      "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", "'\\uFE65'", 
      "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", 
      "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", "'\\uFF0D'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "'*'", "", "'!='", "'-'", "'!'", 
      "':'", "", "", "", "", "", "", "", "", "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "ACYCLIC", "ANY", 
      "ADD", "ALL", "ALTER", "AND", "AS", "ASC", "ASCENDING", "ATTACH", 
      "BEGIN", "BY", "CALL", "CASE", "CAST", "CHECKPOINT", "COLUMN", "COMMENT", 
      "COMMIT", "COMMIT_SKIP_CHECKPOINT", "CONTAINS", "COPY", "COUNT", "CREATE", 
      "CYCLE", "DATABASE", "DBTYPE", "DEFAULT", "DELETE", "DESC", "DESCENDING", 
      "DETACH", "DISTINCT", "DROP", "ELSE", "END", "ENDS", "EXISTS", "EXPLAIN", 
      "EXPORT", "EXTENSION", "FALSE", "FROM", "FORCE", "GLOB", "GRAPH", 
      "GROUP", "HEADERS", "HINT", "IMPORT", "IF", "IN", "INCREMENT", "INSTALL", 
      "IS", "JOIN", "KEY", "LIMIT", "LOAD", "LOGICAL", "MACRO", "MATCH", 
      "MAXVALUE", "MERGE", "MINVALUE", "MULTI_JOIN", "NO", "NODE", "NOT", 
      "NONE", "NULL", "ON", "ONLY", "OPTIONAL", "OR", "ORDER", "PRIMARY", 
      "PROFILE", "PROJECT", "READ", "REL", "RENAME", "RETURN", "ROLLBACK", 
      "ROLLBACK_SKIP_CHECKPOINT", "SEQUENCE", "SET", "SHORTEST", "START", 
      "STARTS", "TABLE", "THEN", "TO", "TRAIL", "TRANSACTION", "TRUE", "TYPE", 
      "UNION", "UNWIND", "UNINSTALL", "UPDATE", "USE", "WHEN", "WHERE", 
      "WITH", "WRITE", "WSHORTEST", "XOR", "SINGLE", "YIELD", "DECIMAL", 
      "STAR", "L_SKIP", "INVALID_NOT_EQUAL", "MINUS", "FACTORIAL", "COLON", 
      "StringLiteral", "EscapedChar", "DecimalInteger", "HexLetter", "HexDigit", 
      "Digit", "NonZeroDigit", "NonZeroOctDigit", "ZeroDigit", "ExponentDecimalReal", 
      "RegularDecimalReal", "UnescapedSymbolicName", "IdentifierStart", 
      "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "CypherComment", 
      "Unknown"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,181,2813,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,1,0,1,0,3,0,345,8,0,1,0,1,0,3,0,349,8,0,1,0,5,0,352,8,0,10,0,12,
  	0,355,9,0,1,0,3,0,358,8,0,1,0,1,0,1,1,3,1,363,8,1,1,1,3,1,366,8,1,1,1,
  	1,1,3,1,370,8,1,1,1,3,1,373,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,395,8,2,1,3,1,3,1,3,1,3,
  	3,3,401,8,3,1,3,1,3,1,3,1,3,1,3,3,3,408,8,3,1,3,1,3,3,3,412,8,3,1,3,1,
  	3,3,3,416,8,3,1,3,1,3,3,3,420,8,3,1,4,3,4,423,8,4,1,4,1,4,3,4,427,8,4,
  	1,4,1,4,3,4,431,8,4,1,4,1,4,3,4,435,8,4,1,4,5,4,438,8,4,10,4,12,4,441,
  	9,4,1,4,3,4,444,8,4,3,4,446,8,4,1,4,1,4,1,5,1,5,1,5,3,5,453,8,5,1,5,1,
  	5,3,5,457,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,466,8,5,1,5,1,5,1,5,3,5,
  	471,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,481,8,6,1,6,1,6,3,6,485,8,
  	6,1,6,1,6,3,6,489,8,6,1,6,5,6,492,8,6,10,6,12,6,495,9,6,1,6,1,6,1,6,1,
  	6,1,6,1,6,1,7,1,7,1,7,1,7,3,7,507,8,7,1,7,1,7,3,7,511,8,7,1,7,1,7,1,7,
  	1,7,1,7,1,7,3,7,519,8,7,1,7,1,7,3,7,523,8,7,1,7,1,7,3,7,527,8,7,1,7,1,
  	7,3,7,531,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,539,8,8,1,8,1,8,3,8,543,8,8,
  	1,8,1,8,3,8,547,8,8,1,8,1,8,3,8,551,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
  	1,10,1,10,1,10,1,10,1,10,1,10,3,10,566,8,10,1,10,1,10,1,10,3,10,571,8,
  	10,1,10,1,10,1,10,1,10,3,10,577,8,10,1,10,1,10,3,10,581,8,10,1,10,3,10,
  	584,8,10,1,10,3,10,587,8,10,1,10,1,10,1,11,1,11,3,11,593,8,11,1,11,1,
  	11,3,11,597,8,11,1,11,5,11,600,8,11,10,11,12,11,603,9,11,3,11,605,8,11,
  	1,11,1,11,1,11,3,11,610,8,11,1,12,1,12,3,12,614,8,12,1,12,1,12,3,12,618,
  	8,12,1,12,5,12,621,8,12,10,12,12,12,624,9,12,1,13,1,13,1,13,1,13,1,14,
  	1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,638,8,15,1,15,1,15,3,15,642,8,
  	15,1,15,1,15,1,15,1,15,1,15,3,15,649,8,15,1,16,1,16,1,16,1,16,1,16,1,
  	16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,669,
  	8,17,1,17,1,17,3,17,673,8,17,1,17,3,17,676,8,17,1,17,3,17,679,8,17,1,
  	17,3,17,682,8,17,1,17,3,17,685,8,17,1,17,1,17,3,17,689,8,17,1,17,5,17,
  	692,8,17,10,17,12,17,695,9,17,1,17,3,17,698,8,17,1,17,1,17,1,17,1,17,
  	1,17,1,17,1,18,1,18,3,18,708,8,18,1,18,1,18,3,18,712,8,18,1,18,5,18,715,
  	8,18,10,18,12,18,718,9,18,1,19,1,19,3,19,722,8,19,1,19,1,19,1,19,3,19,
  	727,8,19,1,19,1,19,1,20,1,20,3,20,733,8,20,1,20,1,20,3,20,737,8,20,1,
  	20,1,20,3,20,741,8,20,1,20,5,20,744,8,20,10,20,12,20,747,9,20,1,20,1,
  	20,1,20,1,20,3,20,753,8,20,1,20,1,20,3,20,757,8,20,1,20,1,20,3,20,761,
  	8,20,1,20,3,20,764,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,
  	1,22,1,22,1,22,1,22,1,22,1,22,3,22,781,8,22,1,22,1,22,3,22,785,8,22,1,
  	22,1,22,3,22,789,8,22,1,22,1,22,3,22,793,8,22,1,22,1,22,3,22,797,8,22,
  	1,22,3,22,800,8,22,1,22,3,22,803,8,22,1,22,1,22,1,22,1,22,1,22,3,22,810,
  	8,22,1,22,3,22,813,8,22,1,22,1,22,3,22,817,8,22,3,22,819,8,22,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,3,23,828,8,23,1,23,1,23,3,23,832,8,23,1,23,
  	1,23,1,23,3,23,837,8,23,1,23,1,23,3,23,841,8,23,1,23,1,23,3,23,845,8,
  	23,1,23,1,23,3,23,849,8,23,1,23,1,23,3,23,853,8,23,3,23,855,8,23,1,23,
  	1,23,3,23,859,8,23,1,23,1,23,3,23,863,8,23,3,23,865,8,23,1,23,1,23,1,
  	23,1,23,3,23,871,8,23,1,23,1,23,3,23,875,8,23,1,23,1,23,3,23,879,8,23,
  	1,23,1,23,3,23,883,8,23,1,24,1,24,3,24,887,8,24,1,24,1,24,3,24,891,8,
  	24,1,24,5,24,894,8,24,10,24,12,24,897,9,24,1,25,1,25,1,25,1,25,1,25,1,
  	25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,914,8,26,1,26,1,
  	26,1,26,5,26,919,8,26,10,26,12,26,922,9,26,1,27,1,27,1,27,1,27,1,27,1,
  	27,1,27,1,27,1,27,1,27,3,27,934,8,27,1,28,1,28,1,28,1,28,1,28,3,28,941,
  	8,28,1,29,1,29,1,29,1,29,3,29,947,8,29,1,29,3,29,950,8,29,1,29,1,29,1,
  	30,1,30,1,30,1,30,1,30,1,30,3,30,960,8,30,1,30,3,30,963,8,30,1,31,1,31,
  	1,31,1,31,1,31,1,31,3,31,971,8,31,1,31,3,31,974,8,31,1,32,1,32,1,32,1,
  	32,3,32,980,8,32,1,32,3,32,983,8,32,1,32,1,32,1,33,1,33,3,33,989,8,33,
  	1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,
  	1004,8,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,
  	1,37,1,37,3,37,1020,8,37,1,38,1,38,1,38,1,38,1,38,3,38,1027,8,38,1,38,
  	1,38,1,38,1,38,1,38,3,38,1034,8,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,
  	1,40,1,40,3,40,1045,8,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,
  	1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,3,43,1065,8,43,1,43,1,43,
  	3,43,1069,8,43,1,43,5,43,1072,8,43,10,43,12,43,1075,9,43,1,44,1,44,1,
  	44,1,44,1,45,1,45,3,45,1083,8,45,1,45,1,45,3,45,1087,8,45,1,45,5,45,1090,
  	8,45,10,45,12,45,1093,9,45,1,46,1,46,1,46,3,46,1098,8,46,1,46,1,46,1,
  	46,1,46,3,46,1104,8,46,1,47,1,47,1,47,1,47,3,47,1110,8,47,1,47,1,47,3,
  	47,1114,8,47,1,47,1,47,3,47,1118,8,47,1,47,1,47,1,48,1,48,1,48,1,48,3,
  	48,1126,8,48,1,48,1,48,3,48,1130,8,48,1,48,1,48,3,48,1134,8,48,1,48,1,
  	48,1,48,1,48,3,48,1140,8,48,1,48,1,48,3,48,1144,8,48,1,48,1,48,3,48,1148,
  	8,48,1,48,1,48,1,48,1,48,3,48,1154,8,48,1,48,1,48,3,48,1158,8,48,1,48,
  	1,48,3,48,1162,8,48,1,48,1,48,3,48,1166,8,48,1,48,1,48,3,48,1170,8,48,
  	1,48,1,48,1,48,1,48,3,48,1176,8,48,1,48,1,48,3,48,1180,8,48,1,48,1,48,
  	3,48,1184,8,48,1,48,1,48,3,48,1188,8,48,1,48,1,48,3,48,1192,8,48,1,48,
  	1,48,3,48,1196,8,48,1,48,1,48,5,48,1200,8,48,10,48,12,48,1203,9,48,1,
  	49,1,49,5,49,1207,8,49,10,49,12,49,1210,9,49,1,50,1,50,3,50,1214,8,50,
  	1,50,1,50,1,51,1,51,3,51,1220,8,51,1,52,1,52,1,52,3,52,1225,8,52,1,53,
  	1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
  	3,54,1242,8,54,1,55,1,55,1,55,1,55,3,55,1248,8,55,1,56,1,56,1,56,1,56,
  	3,56,1254,8,56,1,56,1,56,3,56,1258,8,56,1,57,1,57,3,57,1262,8,57,1,57,
  	1,57,1,57,1,57,1,57,1,57,1,57,3,57,1271,8,57,1,58,1,58,1,58,1,58,1,59,
  	1,59,1,59,1,59,1,60,1,60,1,61,1,61,3,61,1285,8,61,1,61,5,61,1288,8,61,
  	10,61,12,61,1291,9,61,1,61,1,61,3,61,1295,8,61,4,61,1297,8,61,11,61,12,
  	61,1298,1,61,1,61,1,61,3,61,1304,8,61,1,62,1,62,1,62,1,62,3,62,1310,8,
  	62,1,62,1,62,1,62,3,62,1315,8,62,1,62,3,62,1318,8,62,1,63,1,63,3,63,1322,
  	8,63,1,64,1,64,3,64,1326,8,64,5,64,1328,8,64,10,64,12,64,1331,9,64,1,
  	64,1,64,1,64,3,64,1336,8,64,5,64,1338,8,64,10,64,12,64,1341,9,64,1,64,
  	1,64,3,64,1345,8,64,1,64,5,64,1348,8,64,10,64,12,64,1351,9,64,1,64,3,
  	64,1354,8,64,1,64,3,64,1357,8,64,3,64,1359,8,64,1,65,1,65,3,65,1363,8,
  	65,4,65,1365,8,65,11,65,12,65,1366,1,65,1,65,1,66,1,66,3,66,1373,8,66,
  	5,66,1375,8,66,10,66,12,66,1378,9,66,1,66,1,66,3,66,1382,8,66,5,66,1384,
  	8,66,10,66,12,66,1387,9,66,1,66,1,66,1,67,1,67,1,67,1,67,3,67,1395,8,
  	67,1,68,1,68,1,68,1,68,3,68,1401,8,68,1,69,1,69,1,69,1,69,1,69,1,69,3,
  	69,1409,8,69,1,69,1,69,3,69,1413,8,69,1,69,1,69,3,69,1417,8,69,1,69,1,
  	69,3,69,1421,8,69,1,69,1,69,1,69,1,69,1,69,3,69,1428,8,69,1,69,1,69,3,
  	69,1432,8,69,1,69,1,69,3,69,1436,8,69,1,69,1,69,3,69,1440,8,69,1,69,3,
  	69,1443,8,69,1,69,3,69,1446,8,69,1,70,1,70,1,70,1,70,1,70,3,70,1453,8,
  	70,1,70,1,70,1,71,1,71,3,71,1459,8,71,1,71,1,71,3,71,1463,8,71,1,71,5,
  	71,1466,8,71,10,71,12,71,1469,9,71,1,72,1,72,1,72,1,72,3,72,1475,8,72,
  	1,72,3,72,1478,8,72,1,72,3,72,1481,8,72,1,72,1,72,1,72,3,72,1486,8,72,
  	1,73,1,73,3,73,1490,8,73,1,73,1,73,3,73,1494,8,73,1,73,1,73,1,73,3,73,
  	1499,8,73,1,73,1,73,3,73,1503,8,73,1,74,1,74,1,74,1,74,1,75,1,75,1,75,
  	3,75,1512,8,75,1,75,1,75,3,75,1516,8,75,1,75,1,75,1,75,3,75,1521,8,75,
  	1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,4,75,1533,8,75,11,75,
  	12,75,1534,5,75,1537,8,75,10,75,12,75,1540,9,75,1,76,1,76,3,76,1544,8,
  	76,1,76,1,76,1,76,1,76,1,76,1,76,1,77,1,77,3,77,1554,8,77,1,77,1,77,1,
  	78,1,78,3,78,1560,8,78,1,78,1,78,1,78,5,78,1565,8,78,10,78,12,78,1568,
  	9,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1580,8,79,
  	1,80,1,80,3,80,1584,8,80,1,80,1,80,3,80,1588,8,80,1,80,1,80,3,80,1592,
  	8,80,1,80,5,80,1595,8,80,10,80,12,80,1598,9,80,1,81,1,81,3,81,1602,8,
  	81,1,81,1,81,3,81,1606,8,81,1,81,1,81,1,82,1,82,3,82,1612,8,82,1,82,1,
  	82,3,82,1616,8,82,1,82,1,82,3,82,1620,8,82,1,82,1,82,3,82,1624,8,82,1,
  	82,5,82,1627,8,82,10,82,12,82,1630,9,82,1,83,1,83,1,83,3,83,1635,8,83,
  	1,83,3,83,1638,8,83,1,84,1,84,1,84,1,85,3,85,1644,8,85,1,85,3,85,1647,
  	8,85,1,85,1,85,1,85,1,85,3,85,1653,8,85,1,85,1,85,3,85,1657,8,85,1,85,
  	1,85,3,85,1661,8,85,1,86,1,86,3,86,1665,8,86,1,86,1,86,3,86,1669,8,86,
  	1,86,5,86,1672,8,86,10,86,12,86,1675,9,86,1,86,1,86,3,86,1679,8,86,1,
  	86,1,86,3,86,1683,8,86,1,86,5,86,1686,8,86,10,86,12,86,1689,9,86,3,86,
  	1691,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1700,8,87,1,88,1,88,
  	1,88,1,88,1,88,1,88,1,88,3,88,1709,8,88,1,88,5,88,1712,8,88,10,88,12,
  	88,1715,9,88,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,91,1,91,3,91,1727,
  	8,91,1,91,3,91,1730,8,91,1,92,1,92,1,92,1,92,1,93,1,93,3,93,1738,8,93,
  	1,93,1,93,3,93,1742,8,93,1,93,5,93,1745,8,93,10,93,12,93,1748,9,93,1,
  	94,1,94,3,94,1752,8,94,1,94,1,94,3,94,1756,8,94,1,94,1,94,1,94,3,94,1761,
  	8,94,1,95,1,95,1,96,1,96,3,96,1767,8,96,1,96,5,96,1770,8,96,10,96,12,
  	96,1773,9,96,1,96,1,96,1,96,1,96,3,96,1779,8,96,1,97,1,97,3,97,1783,8,
  	97,1,97,1,97,3,97,1787,8,97,3,97,1789,8,97,1,97,1,97,3,97,1793,8,97,3,
  	97,1795,8,97,1,97,1,97,3,97,1799,8,97,3,97,1801,8,97,1,97,1,97,1,98,1,
  	98,3,98,1807,8,98,1,98,1,98,1,99,1,99,3,99,1813,8,99,1,99,1,99,3,99,1817,
  	8,99,1,99,3,99,1820,8,99,1,99,3,99,1823,8,99,1,99,1,99,1,99,1,99,3,99,
  	1829,8,99,1,99,3,99,1832,8,99,1,99,3,99,1835,8,99,1,99,1,99,3,99,1839,
  	8,99,1,99,1,99,1,99,1,99,3,99,1845,8,99,1,99,3,99,1848,8,99,1,99,3,99,
  	1851,8,99,1,99,1,99,3,99,1855,8,99,1,100,1,100,3,100,1859,8,100,1,100,
  	1,100,3,100,1863,8,100,3,100,1865,8,100,1,100,1,100,3,100,1869,8,100,
  	3,100,1871,8,100,1,100,1,100,3,100,1875,8,100,3,100,1877,8,100,1,100,
  	1,100,3,100,1881,8,100,3,100,1883,8,100,1,100,1,100,1,101,1,101,3,101,
  	1889,8,101,1,101,1,101,3,101,1893,8,101,1,101,1,101,3,101,1897,8,101,
  	1,101,1,101,3,101,1901,8,101,1,101,1,101,3,101,1905,8,101,1,101,1,101,
  	3,101,1909,8,101,1,101,1,101,3,101,1913,8,101,1,101,1,101,3,101,1917,
  	8,101,5,101,1919,8,101,10,101,12,101,1922,9,101,3,101,1924,8,101,1,101,
  	1,101,1,102,1,102,3,102,1930,8,102,1,102,1,102,3,102,1934,8,102,1,102,
  	1,102,3,102,1938,8,102,1,102,3,102,1941,8,102,1,102,5,102,1944,8,102,
  	10,102,12,102,1947,9,102,1,103,1,103,3,103,1951,8,103,1,103,5,103,1954,
  	8,103,10,103,12,103,1957,9,103,1,104,1,104,3,104,1961,8,104,1,104,1,104,
  	1,105,1,105,3,105,1967,8,105,1,105,3,105,1970,8,105,1,105,3,105,1973,
  	8,105,1,105,3,105,1976,8,105,1,105,3,105,1979,8,105,1,105,3,105,1982,
  	8,105,1,106,1,106,3,106,1986,8,106,1,106,1,106,3,106,1990,8,106,1,106,
  	1,106,3,106,1994,8,106,1,106,1,106,3,106,1998,8,106,1,106,1,106,1,106,
  	1,106,1,106,1,106,1,106,1,106,3,106,2008,8,106,1,107,3,107,2011,8,107,
  	1,107,3,107,2014,8,107,1,107,1,107,3,107,2018,8,107,1,107,3,107,2021,
  	8,107,1,107,3,107,2024,8,107,1,108,1,108,3,108,2028,8,108,1,108,1,108,
  	3,108,2032,8,108,1,108,1,108,3,108,2036,8,108,1,108,1,108,3,108,2040,
  	8,108,1,108,1,108,3,108,2044,8,108,1,108,1,108,3,108,2048,8,108,3,108,
  	2050,8,108,1,108,3,108,2053,8,108,1,108,1,108,3,108,2057,8,108,1,108,
  	1,108,3,108,2061,8,108,1,108,1,108,3,108,2065,8,108,1,108,1,108,3,108,
  	2069,8,108,3,108,2071,8,108,1,108,1,108,1,109,1,109,3,109,2077,8,109,
  	1,109,3,109,2080,8,109,1,109,3,109,2083,8,109,1,109,1,109,1,110,1,110,
  	1,111,1,111,1,112,1,112,1,113,1,113,1,114,1,114,1,115,1,115,1,115,1,115,
  	1,115,5,115,2102,8,115,10,115,12,115,2105,9,115,1,116,1,116,1,116,1,116,
  	1,116,5,116,2112,8,116,10,116,12,116,2115,9,116,1,117,1,117,1,117,1,117,
  	1,117,5,117,2122,8,117,10,117,12,117,2125,9,117,1,118,1,118,3,118,2129,
  	8,118,5,118,2131,8,118,10,118,12,118,2134,9,118,1,118,1,118,1,119,1,119,
  	3,119,2140,8,119,1,119,1,119,3,119,2144,8,119,1,119,1,119,3,119,2148,
  	8,119,1,119,1,119,3,119,2152,8,119,1,119,1,119,3,119,2156,8,119,1,119,
  	1,119,1,119,1,119,1,119,1,119,3,119,2164,8,119,1,119,1,119,3,119,2168,
  	8,119,1,119,1,119,3,119,2172,8,119,1,119,1,119,3,119,2176,8,119,1,119,
  	1,119,4,119,2180,8,119,11,119,12,119,2181,1,119,1,119,3,119,2186,8,119,
  	1,120,1,120,1,121,1,121,3,121,2192,8,121,1,121,1,121,3,121,2196,8,121,
  	1,121,5,121,2199,8,121,10,121,12,121,2202,9,121,1,122,1,122,3,122,2206,
  	8,122,1,122,1,122,3,122,2210,8,122,1,122,5,122,2213,8,122,10,122,12,122,
  	2216,9,122,1,123,1,123,3,123,2220,8,123,1,123,1,123,3,123,2224,8,123,
  	1,123,1,123,5,123,2228,8,123,10,123,12,123,2231,9,123,1,124,1,124,1,125,
  	1,125,3,125,2237,8,125,1,125,1,125,3,125,2241,8,125,1,125,1,125,5,125,
  	2245,8,125,10,125,12,125,2248,9,125,1,126,1,126,1,127,1,127,3,127,2254,
  	8,127,1,127,1,127,3,127,2258,8,127,1,127,1,127,5,127,2262,8,127,10,127,
  	12,127,2265,9,127,1,128,1,128,1,129,1,129,3,129,2271,8,129,1,129,1,129,
  	3,129,2275,8,129,1,129,5,129,2278,8,129,10,129,12,129,2281,9,129,1,130,
  	1,130,3,130,2285,8,130,5,130,2287,8,130,10,130,12,130,2290,9,130,1,130,
  	1,130,3,130,2294,8,130,1,130,3,130,2297,8,130,1,131,1,131,1,131,4,131,
  	2302,8,131,11,131,12,131,2303,1,131,3,131,2307,8,131,1,132,1,132,1,132,
  	3,132,2312,8,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,3,132,2321,
  	8,132,1,132,1,132,3,132,2325,8,132,1,132,3,132,2328,8,132,1,133,1,133,
  	1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,3,133,2341,8,133,
  	1,133,3,133,2344,8,133,1,133,1,133,1,134,3,134,2349,8,134,1,134,1,134,
  	1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,3,135,2363,
  	8,135,1,136,1,136,3,136,2367,8,136,1,136,5,136,2370,8,136,10,136,12,136,
  	2373,9,136,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,3,137,
  	2384,8,137,1,138,1,138,3,138,2388,8,138,1,138,1,138,3,138,2392,8,138,
  	1,138,1,138,3,138,2396,8,138,1,138,1,138,1,138,1,138,3,138,2402,8,138,
  	1,138,1,138,3,138,2406,8,138,1,138,1,138,3,138,2410,8,138,1,138,1,138,
  	1,138,1,138,3,138,2416,8,138,1,138,1,138,3,138,2420,8,138,1,138,1,138,
  	3,138,2424,8,138,1,138,1,138,1,138,1,138,3,138,2430,8,138,1,138,1,138,
  	3,138,2434,8,138,1,138,1,138,3,138,2438,8,138,1,138,1,138,3,138,2442,
  	8,138,1,139,1,139,1,139,1,139,1,140,1,140,1,140,1,140,1,140,1,140,1,141,
  	1,141,1,141,1,141,1,141,1,141,3,141,2460,8,141,1,142,1,142,1,143,1,143,
  	3,143,2466,8,143,1,143,1,143,3,143,2470,8,143,1,143,1,143,3,143,2474,
  	8,143,5,143,2476,8,143,10,143,12,143,2479,9,143,3,143,2481,8,143,1,143,
  	1,143,1,144,1,144,3,144,2487,8,144,1,144,3,144,2490,8,144,1,145,1,145,
  	3,145,2494,8,145,1,145,1,145,3,145,2498,8,145,1,145,1,145,3,145,2502,
  	8,145,1,145,1,145,3,145,2506,8,145,5,145,2508,8,145,10,145,12,145,2511,
  	9,145,1,145,1,145,1,146,1,146,3,146,2517,8,146,1,146,3,146,2520,8,146,
  	1,146,1,146,3,146,2524,8,146,1,146,1,146,1,147,1,147,3,147,2530,8,147,
  	1,147,1,147,3,147,2534,8,147,1,147,1,147,1,148,1,148,3,148,2540,8,148,
  	1,148,1,148,3,148,2544,8,148,1,148,1,148,3,148,2548,8,148,1,148,1,148,
  	1,148,3,148,2553,8,148,1,148,1,148,3,148,2557,8,148,1,148,1,148,3,148,
  	2561,8,148,1,148,1,148,3,148,2565,8,148,1,148,1,148,1,148,3,148,2570,
  	8,148,1,148,3,148,2573,8,148,1,148,3,148,2576,8,148,1,148,1,148,1,148,
  	1,148,3,148,2582,8,148,1,148,1,148,3,148,2586,8,148,1,148,1,148,3,148,
  	2590,8,148,3,148,2592,8,148,1,148,1,148,3,148,2596,8,148,1,148,1,148,
  	3,148,2600,8,148,1,148,1,148,3,148,2604,8,148,5,148,2606,8,148,10,148,
  	12,148,2609,9,148,3,148,2611,8,148,1,148,1,148,3,148,2615,8,148,1,149,
  	1,149,1,150,1,150,3,150,2621,8,150,1,150,1,150,1,150,3,150,2626,8,150,
  	3,150,2628,8,150,1,150,1,150,3,150,2632,8,150,1,151,1,151,3,151,2636,
  	8,151,1,151,1,151,1,151,3,151,2641,8,151,1,151,1,151,3,151,2645,8,151,
  	1,152,1,152,1,152,3,152,2650,8,152,1,152,1,152,3,152,2654,8,152,1,152,
  	1,152,3,152,2658,8,152,1,152,1,152,3,152,2662,8,152,5,152,2664,8,152,
  	10,152,12,152,2667,9,152,1,152,1,152,3,152,2671,8,152,1,153,1,153,3,153,
  	2675,8,153,1,153,4,153,2678,8,153,11,153,12,153,2679,1,154,1,154,3,154,
  	2684,8,154,1,154,1,154,3,154,2688,8,154,1,154,1,154,3,154,2692,8,154,
  	1,154,1,154,3,154,2696,8,154,1,154,3,154,2699,8,154,1,154,3,154,2702,
  	8,154,1,154,3,154,2705,8,154,1,154,3,154,2708,8,154,1,154,1,154,1,155,
  	1,155,3,155,2714,8,155,1,155,1,155,3,155,2718,8,155,1,156,1,156,3,156,
  	2722,8,156,1,156,4,156,2725,8,156,11,156,12,156,2726,1,156,1,156,3,156,
  	2731,8,156,1,156,1,156,3,156,2735,8,156,1,156,4,156,2738,8,156,11,156,
  	12,156,2739,3,156,2742,8,156,1,156,3,156,2745,8,156,1,156,1,156,3,156,
  	2749,8,156,1,156,3,156,2752,8,156,1,156,3,156,2755,8,156,1,156,1,156,
  	1,157,1,157,3,157,2761,8,157,1,157,1,157,3,157,2765,8,157,1,157,1,157,
  	3,157,2769,8,157,1,157,1,157,1,158,1,158,1,159,1,159,3,159,2777,8,159,
  	1,160,1,160,1,160,3,160,2782,8,160,1,161,1,161,3,161,2786,8,161,1,161,
  	1,161,1,162,1,162,1,163,1,163,1,164,1,164,1,165,1,165,1,166,1,166,1,166,
  	1,166,1,166,3,166,2803,8,166,1,167,1,167,1,168,1,168,1,169,1,169,1,170,
  	1,170,1,170,0,2,96,150,171,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
  	32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
  	78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
  	118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
  	154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
  	190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
  	226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
  	262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,
  	298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,
  	334,336,338,340,0,13,2,0,131,131,136,136,2,0,53,54,75,76,2,0,6,6,13,17,
  	1,0,19,20,2,0,21,21,160,160,2,0,22,23,157,157,2,0,87,87,141,141,2,0,68,
  	68,83,83,1,0,172,173,30,0,48,48,50,50,52,52,55,58,61,61,63,64,66,68,70,
  	71,74,74,77,77,79,79,84,86,88,89,91,91,95,96,98,98,100,100,102,105,107,
  	110,112,113,124,129,131,132,134,134,138,138,140,140,142,142,145,147,151,
  	151,155,156,158,158,2,0,14,14,27,30,2,0,16,16,31,34,2,0,35,45,160,160,
  	3192,0,342,1,0,0,0,2,362,1,0,0,0,4,394,1,0,0,0,6,396,1,0,0,0,8,422,1,
  	0,0,0,10,470,1,0,0,0,12,472,1,0,0,0,14,502,1,0,0,0,16,532,1,0,0,0,18,
  	552,1,0,0,0,20,558,1,0,0,0,22,609,1,0,0,0,24,611,1,0,0,0,26,625,1,0,0,
  	0,28,629,1,0,0,0,30,648,1,0,0,0,32,650,1,0,0,0,34,662,1,0,0,0,36,705,
  	1,0,0,0,38,719,1,0,0,0,40,763,1,0,0,0,42,765,1,0,0,0,44,771,1,0,0,0,46,
  	820,1,0,0,0,48,884,1,0,0,0,50,898,1,0,0,0,52,906,1,0,0,0,54,923,1,0,0,
  	0,56,940,1,0,0,0,58,942,1,0,0,0,60,962,1,0,0,0,62,973,1,0,0,0,64,975,
  	1,0,0,0,66,988,1,0,0,0,68,992,1,0,0,0,70,996,1,0,0,0,72,1007,1,0,0,0,
  	74,1019,1,0,0,0,76,1021,1,0,0,0,78,1035,1,0,0,0,80,1039,1,0,0,0,82,1048,
  	1,0,0,0,84,1054,1,0,0,0,86,1062,1,0,0,0,88,1076,1,0,0,0,90,1080,1,0,0,
  	0,92,1094,1,0,0,0,94,1105,1,0,0,0,96,1195,1,0,0,0,98,1204,1,0,0,0,100,
  	1211,1,0,0,0,102,1219,1,0,0,0,104,1221,1,0,0,0,106,1226,1,0,0,0,108,1241,
  	1,0,0,0,110,1247,1,0,0,0,112,1249,1,0,0,0,114,1261,1,0,0,0,116,1272,1,
  	0,0,0,118,1276,1,0,0,0,120,1280,1,0,0,0,122,1303,1,0,0,0,124,1317,1,0,
  	0,0,126,1321,1,0,0,0,128,1358,1,0,0,0,130,1364,1,0,0,0,132,1376,1,0,0,
  	0,134,1394,1,0,0,0,136,1400,1,0,0,0,138,1402,1,0,0,0,140,1452,1,0,0,0,
  	142,1456,1,0,0,0,144,1470,1,0,0,0,146,1489,1,0,0,0,148,1504,1,0,0,0,150,
  	1520,1,0,0,0,152,1541,1,0,0,0,154,1551,1,0,0,0,156,1557,1,0,0,0,158,1579,
  	1,0,0,0,160,1581,1,0,0,0,162,1599,1,0,0,0,164,1611,1,0,0,0,166,1631,1,
  	0,0,0,168,1639,1,0,0,0,170,1646,1,0,0,0,172,1690,1,0,0,0,174,1699,1,0,
  	0,0,176,1701,1,0,0,0,178,1716,1,0,0,0,180,1720,1,0,0,0,182,1724,1,0,0,
  	0,184,1731,1,0,0,0,186,1735,1,0,0,0,188,1760,1,0,0,0,190,1762,1,0,0,0,
  	192,1778,1,0,0,0,194,1780,1,0,0,0,196,1804,1,0,0,0,198,1854,1,0,0,0,200,
  	1856,1,0,0,0,202,1886,1,0,0,0,204,1927,1,0,0,0,206,1948,1,0,0,0,208,1958,
  	1,0,0,0,210,1964,1,0,0,0,212,2007,1,0,0,0,214,2023,1,0,0,0,216,2025,1,
  	0,0,0,218,2074,1,0,0,0,220,2086,1,0,0,0,222,2088,1,0,0,0,224,2090,1,0,
  	0,0,226,2092,1,0,0,0,228,2094,1,0,0,0,230,2096,1,0,0,0,232,2106,1,0,0,
  	0,234,2116,1,0,0,0,236,2132,1,0,0,0,238,2185,1,0,0,0,240,2187,1,0,0,0,
  	242,2189,1,0,0,0,244,2203,1,0,0,0,246,2217,1,0,0,0,248,2232,1,0,0,0,250,
  	2234,1,0,0,0,252,2249,1,0,0,0,254,2251,1,0,0,0,256,2266,1,0,0,0,258,2268,
  	1,0,0,0,260,2288,1,0,0,0,262,2298,1,0,0,0,264,2327,1,0,0,0,266,2340,1,
  	0,0,0,268,2348,1,0,0,0,270,2362,1,0,0,0,272,2364,1,0,0,0,274,2383,1,0,
  	0,0,276,2441,1,0,0,0,278,2443,1,0,0,0,280,2447,1,0,0,0,282,2459,1,0,0,
  	0,284,2461,1,0,0,0,286,2463,1,0,0,0,288,2484,1,0,0,0,290,2491,1,0,0,0,
  	292,2516,1,0,0,0,294,2527,1,0,0,0,296,2614,1,0,0,0,298,2616,1,0,0,0,300,
  	2631,1,0,0,0,302,2633,1,0,0,0,304,2670,1,0,0,0,306,2672,1,0,0,0,308,2681,
  	1,0,0,0,310,2711,1,0,0,0,312,2741,1,0,0,0,314,2758,1,0,0,0,316,2772,1,
  	0,0,0,318,2776,1,0,0,0,320,2778,1,0,0,0,322,2783,1,0,0,0,324,2789,1,0,
  	0,0,326,2791,1,0,0,0,328,2793,1,0,0,0,330,2795,1,0,0,0,332,2802,1,0,0,
  	0,334,2804,1,0,0,0,336,2806,1,0,0,0,338,2808,1,0,0,0,340,2810,1,0,0,0,
  	342,353,3,2,1,0,343,345,5,178,0,0,344,343,1,0,0,0,344,345,1,0,0,0,345,
  	346,1,0,0,0,346,348,5,1,0,0,347,349,5,178,0,0,348,347,1,0,0,0,348,349,
  	1,0,0,0,349,350,1,0,0,0,350,352,3,2,1,0,351,344,1,0,0,0,352,355,1,0,0,
  	0,353,351,1,0,0,0,353,354,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,356,
  	358,5,178,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,360,
  	5,0,0,1,360,1,1,0,0,0,361,363,3,102,51,0,362,361,1,0,0,0,362,363,1,0,
  	0,0,363,365,1,0,0,0,364,366,5,178,0,0,365,364,1,0,0,0,365,366,1,0,0,0,
  	366,367,1,0,0,0,367,372,3,4,2,0,368,370,5,178,0,0,369,368,1,0,0,0,369,
  	370,1,0,0,0,370,371,1,0,0,0,371,373,5,1,0,0,372,369,1,0,0,0,372,373,1,
  	0,0,0,373,3,1,0,0,0,374,395,3,120,60,0,375,395,3,44,22,0,376,395,3,46,
  	23,0,377,395,3,52,26,0,378,395,3,54,27,0,379,395,3,70,35,0,380,395,3,
  	72,36,0,381,395,3,6,3,0,382,395,3,12,6,0,383,395,3,14,7,0,384,395,3,30,
  	15,0,385,395,3,34,17,0,386,395,3,32,16,0,387,395,3,108,54,0,388,395,3,
  	110,55,0,389,395,3,16,8,0,390,395,3,18,9,0,391,395,3,20,10,0,392,395,
  	3,26,13,0,393,395,3,28,14,0,394,374,1,0,0,0,394,375,1,0,0,0,394,376,1,
  	0,0,0,394,377,1,0,0,0,394,378,1,0,0,0,394,379,1,0,0,0,394,380,1,0,0,0,
  	394,381,1,0,0,0,394,382,1,0,0,0,394,383,1,0,0,0,394,384,1,0,0,0,394,385,
  	1,0,0,0,394,386,1,0,0,0,394,387,1,0,0,0,394,388,1,0,0,0,394,389,1,0,0,
  	0,394,390,1,0,0,0,394,391,1,0,0,0,394,392,1,0,0,0,394,393,1,0,0,0,395,
  	5,1,0,0,0,396,397,5,67,0,0,397,398,5,178,0,0,398,400,3,330,165,0,399,
  	401,3,8,4,0,400,399,1,0,0,0,400,401,1,0,0,0,401,402,1,0,0,0,402,403,5,
  	178,0,0,403,404,5,88,0,0,404,405,5,178,0,0,405,419,3,10,5,0,406,408,5,
  	178,0,0,407,406,1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,0,409,411,5,2,0,
  	0,410,412,5,178,0,0,411,410,1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,
  	415,3,24,12,0,414,416,5,178,0,0,415,414,1,0,0,0,415,416,1,0,0,0,416,417,
  	1,0,0,0,417,418,5,3,0,0,418,420,1,0,0,0,419,407,1,0,0,0,419,420,1,0,0,
  	0,420,7,1,0,0,0,421,423,5,178,0,0,422,421,1,0,0,0,422,423,1,0,0,0,423,
  	424,1,0,0,0,424,426,5,2,0,0,425,427,5,178,0,0,426,425,1,0,0,0,426,427,
  	1,0,0,0,427,445,1,0,0,0,428,439,3,330,165,0,429,431,5,178,0,0,430,429,
  	1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,434,5,4,0,0,433,435,5,178,
  	0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,438,3,330,165,
  	0,437,430,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,
  	443,1,0,0,0,441,439,1,0,0,0,442,444,5,178,0,0,443,442,1,0,0,0,443,444,
  	1,0,0,0,444,446,1,0,0,0,445,428,1,0,0,0,445,446,1,0,0,0,446,447,1,0,0,
  	0,447,448,5,3,0,0,448,9,1,0,0,0,449,471,3,40,20,0,450,452,5,2,0,0,451,
  	453,5,178,0,0,452,451,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,456,
  	3,120,60,0,455,457,5,178,0,0,456,455,1,0,0,0,456,457,1,0,0,0,457,458,
  	1,0,0,0,458,459,5,3,0,0,459,471,1,0,0,0,460,471,3,320,160,0,461,471,3,
  	316,158,0,462,463,3,316,158,0,463,465,5,5,0,0,464,466,5,178,0,0,465,464,
  	1,0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,468,3,330,165,0,468,471,1,
  	0,0,0,469,471,3,296,148,0,470,449,1,0,0,0,470,450,1,0,0,0,470,460,1,0,
  	0,0,470,461,1,0,0,0,470,462,1,0,0,0,470,469,1,0,0,0,471,11,1,0,0,0,472,
  	473,5,67,0,0,473,474,5,178,0,0,474,475,3,330,165,0,475,476,5,178,0,0,
  	476,477,5,88,0,0,477,478,5,178,0,0,478,480,5,2,0,0,479,481,5,178,0,0,
  	480,479,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,493,5,163,0,0,483,
  	485,5,178,0,0,484,483,1,0,0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,488,
  	5,4,0,0,487,489,5,178,0,0,488,487,1,0,0,0,488,489,1,0,0,0,489,490,1,0,
  	0,0,490,492,5,163,0,0,491,484,1,0,0,0,492,495,1,0,0,0,493,491,1,0,0,0,
  	493,494,1,0,0,0,494,496,1,0,0,0,495,493,1,0,0,0,496,497,5,3,0,0,497,498,
  	5,178,0,0,498,499,5,57,0,0,499,500,5,178,0,0,500,501,5,62,0,0,501,13,
  	1,0,0,0,502,503,5,67,0,0,503,504,5,178,0,0,504,506,5,2,0,0,505,507,5,
  	178,0,0,506,505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,510,3,120,
  	60,0,509,511,5,178,0,0,510,509,1,0,0,0,510,511,1,0,0,0,511,512,1,0,0,
  	0,512,513,5,3,0,0,513,514,5,178,0,0,514,515,5,138,0,0,515,516,5,178,0,
  	0,516,530,5,163,0,0,517,519,5,178,0,0,518,517,1,0,0,0,518,519,1,0,0,0,
  	519,520,1,0,0,0,520,522,5,2,0,0,521,523,5,178,0,0,522,521,1,0,0,0,522,
  	523,1,0,0,0,523,524,1,0,0,0,524,526,3,24,12,0,525,527,5,178,0,0,526,525,
  	1,0,0,0,526,527,1,0,0,0,527,528,1,0,0,0,528,529,5,3,0,0,529,531,1,0,0,
  	0,530,518,1,0,0,0,530,531,1,0,0,0,531,15,1,0,0,0,532,533,5,85,0,0,533,
  	534,5,178,0,0,534,535,5,71,0,0,535,536,5,178,0,0,536,550,5,163,0,0,537,
  	539,5,178,0,0,538,537,1,0,0,0,538,539,1,0,0,0,539,540,1,0,0,0,540,542,
  	5,2,0,0,541,543,5,178,0,0,542,541,1,0,0,0,542,543,1,0,0,0,543,544,1,0,
  	0,0,544,546,3,24,12,0,545,547,5,178,0,0,546,545,1,0,0,0,546,547,1,0,0,
  	0,547,548,1,0,0,0,548,549,5,3,0,0,549,551,1,0,0,0,550,538,1,0,0,0,550,
  	551,1,0,0,0,551,17,1,0,0,0,552,553,5,95,0,0,553,554,5,178,0,0,554,555,
  	5,71,0,0,555,556,5,178,0,0,556,557,5,163,0,0,557,19,1,0,0,0,558,559,5,
  	55,0,0,559,560,5,178,0,0,560,565,5,163,0,0,561,562,5,178,0,0,562,563,
  	5,52,0,0,563,564,5,178,0,0,564,566,3,330,165,0,565,561,1,0,0,0,565,566,
  	1,0,0,0,566,567,1,0,0,0,567,568,5,178,0,0,568,570,5,2,0,0,569,571,5,178,
  	0,0,570,569,1,0,0,0,570,571,1,0,0,0,571,572,1,0,0,0,572,573,5,72,0,0,
  	573,574,5,178,0,0,574,583,3,332,166,0,575,577,5,178,0,0,576,575,1,0,0,
  	0,576,577,1,0,0,0,577,578,1,0,0,0,578,580,5,4,0,0,579,581,5,178,0,0,580,
  	579,1,0,0,0,580,581,1,0,0,0,581,582,1,0,0,0,582,584,3,24,12,0,583,576,
  	1,0,0,0,583,584,1,0,0,0,584,586,1,0,0,0,585,587,5,178,0,0,586,585,1,0,
  	0,0,586,587,1,0,0,0,587,588,1,0,0,0,588,589,5,3,0,0,589,21,1,0,0,0,590,
  	604,3,332,166,0,591,593,5,178,0,0,592,591,1,0,0,0,592,593,1,0,0,0,593,
  	594,1,0,0,0,594,596,5,6,0,0,595,597,5,178,0,0,596,595,1,0,0,0,596,597,
  	1,0,0,0,597,605,1,0,0,0,598,600,5,178,0,0,599,598,1,0,0,0,600,603,1,0,
  	0,0,601,599,1,0,0,0,601,602,1,0,0,0,602,605,1,0,0,0,603,601,1,0,0,0,604,
  	592,1,0,0,0,604,601,1,0,0,0,605,606,1,0,0,0,606,607,3,282,141,0,607,610,
  	1,0,0,0,608,610,3,332,166,0,609,590,1,0,0,0,609,608,1,0,0,0,610,23,1,
  	0,0,0,611,622,3,22,11,0,612,614,5,178,0,0,613,612,1,0,0,0,613,614,1,0,
  	0,0,614,615,1,0,0,0,615,617,5,4,0,0,616,618,5,178,0,0,617,616,1,0,0,0,
  	617,618,1,0,0,0,618,619,1,0,0,0,619,621,3,22,11,0,620,613,1,0,0,0,621,
  	624,1,0,0,0,622,620,1,0,0,0,622,623,1,0,0,0,623,25,1,0,0,0,624,622,1,
  	0,0,0,625,626,5,77,0,0,626,627,5,178,0,0,627,628,3,330,165,0,628,27,1,
  	0,0,0,629,630,5,147,0,0,630,631,5,178,0,0,631,632,3,330,165,0,632,29,
  	1,0,0,0,633,634,5,58,0,0,634,635,5,178,0,0,635,637,3,332,166,0,636,638,
  	5,178,0,0,637,636,1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,641,5,6,
  	0,0,640,642,5,178,0,0,641,640,1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,
  	643,644,3,228,114,0,644,649,1,0,0,0,645,646,5,58,0,0,646,647,5,178,0,
  	0,647,649,3,296,148,0,648,633,1,0,0,0,648,645,1,0,0,0,649,31,1,0,0,0,
  	650,651,5,63,0,0,651,652,5,178,0,0,652,653,5,117,0,0,653,654,5,178,0,
  	0,654,655,5,136,0,0,655,656,5,178,0,0,656,657,3,330,165,0,657,658,5,178,
  	0,0,658,659,5,100,0,0,659,660,5,178,0,0,660,661,5,163,0,0,661,33,1,0,
  	0,0,662,663,5,69,0,0,663,664,5,178,0,0,664,665,5,106,0,0,665,666,5,178,
  	0,0,666,668,3,298,149,0,667,669,5,178,0,0,668,667,1,0,0,0,668,669,1,0,
  	0,0,669,670,1,0,0,0,670,672,5,2,0,0,671,673,5,178,0,0,672,671,1,0,0,0,
  	672,673,1,0,0,0,673,675,1,0,0,0,674,676,3,36,18,0,675,674,1,0,0,0,675,
  	676,1,0,0,0,676,678,1,0,0,0,677,679,5,178,0,0,678,677,1,0,0,0,678,679,
  	1,0,0,0,679,681,1,0,0,0,680,682,3,38,19,0,681,680,1,0,0,0,681,682,1,0,
  	0,0,682,693,1,0,0,0,683,685,5,178,0,0,684,683,1,0,0,0,684,685,1,0,0,0,
  	685,686,1,0,0,0,686,688,5,4,0,0,687,689,5,178,0,0,688,687,1,0,0,0,688,
  	689,1,0,0,0,689,690,1,0,0,0,690,692,3,38,19,0,691,684,1,0,0,0,692,695,
  	1,0,0,0,693,691,1,0,0,0,693,694,1,0,0,0,694,697,1,0,0,0,695,693,1,0,0,
  	0,696,698,5,178,0,0,697,696,1,0,0,0,697,698,1,0,0,0,698,699,1,0,0,0,699,
  	700,5,3,0,0,700,701,5,178,0,0,701,702,5,52,0,0,702,703,5,178,0,0,703,
  	704,3,228,114,0,704,35,1,0,0,0,705,716,3,332,166,0,706,708,5,178,0,0,
  	707,706,1,0,0,0,707,708,1,0,0,0,708,709,1,0,0,0,709,711,5,4,0,0,710,712,
  	5,178,0,0,711,710,1,0,0,0,711,712,1,0,0,0,712,713,1,0,0,0,713,715,3,332,
  	166,0,714,707,1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,716,717,1,0,0,0,
  	717,37,1,0,0,0,718,716,1,0,0,0,719,721,3,332,166,0,720,722,5,178,0,0,
  	721,720,1,0,0,0,721,722,1,0,0,0,722,723,1,0,0,0,723,724,5,162,0,0,724,
  	726,5,6,0,0,725,727,5,178,0,0,726,725,1,0,0,0,726,727,1,0,0,0,727,728,
  	1,0,0,0,728,729,3,282,141,0,729,39,1,0,0,0,730,732,5,7,0,0,731,733,5,
  	178,0,0,732,731,1,0,0,0,732,733,1,0,0,0,733,734,1,0,0,0,734,745,5,163,
  	0,0,735,737,5,178,0,0,736,735,1,0,0,0,736,737,1,0,0,0,737,738,1,0,0,0,
  	738,740,5,4,0,0,739,741,5,178,0,0,740,739,1,0,0,0,740,741,1,0,0,0,741,
  	742,1,0,0,0,742,744,5,163,0,0,743,736,1,0,0,0,744,747,1,0,0,0,745,743,
  	1,0,0,0,745,746,1,0,0,0,746,748,1,0,0,0,747,745,1,0,0,0,748,764,5,8,0,
  	0,749,764,5,163,0,0,750,752,5,90,0,0,751,753,5,178,0,0,752,751,1,0,0,
  	0,752,753,1,0,0,0,753,754,1,0,0,0,754,756,5,2,0,0,755,757,5,178,0,0,756,
  	755,1,0,0,0,756,757,1,0,0,0,757,758,1,0,0,0,758,760,5,163,0,0,759,761,
  	5,178,0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,762,764,5,3,
  	0,0,763,730,1,0,0,0,763,749,1,0,0,0,763,750,1,0,0,0,764,41,1,0,0,0,765,
  	766,5,96,0,0,766,767,5,178,0,0,767,768,5,114,0,0,768,769,5,178,0,0,769,
  	770,5,83,0,0,770,43,1,0,0,0,771,772,5,69,0,0,772,773,5,178,0,0,773,774,
  	5,113,0,0,774,775,5,178,0,0,775,776,5,136,0,0,776,780,5,178,0,0,777,778,
  	3,42,21,0,778,779,5,178,0,0,779,781,1,0,0,0,780,777,1,0,0,0,780,781,1,
  	0,0,0,781,782,1,0,0,0,782,818,3,330,165,0,783,785,5,178,0,0,784,783,1,
  	0,0,0,784,785,1,0,0,0,785,786,1,0,0,0,786,788,5,2,0,0,787,789,5,178,0,
  	0,788,787,1,0,0,0,788,789,1,0,0,0,789,790,1,0,0,0,790,792,3,90,45,0,791,
  	793,5,178,0,0,792,791,1,0,0,0,792,793,1,0,0,0,793,799,1,0,0,0,794,796,
  	5,4,0,0,795,797,5,178,0,0,796,795,1,0,0,0,796,797,1,0,0,0,797,798,1,0,
  	0,0,798,800,3,94,47,0,799,794,1,0,0,0,799,800,1,0,0,0,800,802,1,0,0,0,
  	801,803,5,178,0,0,802,801,1,0,0,0,802,803,1,0,0,0,803,804,1,0,0,0,804,
  	805,5,3,0,0,805,819,1,0,0,0,806,807,5,178,0,0,807,809,5,52,0,0,808,810,
  	5,178,0,0,809,808,1,0,0,0,809,810,1,0,0,0,810,812,1,0,0,0,811,813,5,178,
  	0,0,812,811,1,0,0,0,812,813,1,0,0,0,813,814,1,0,0,0,814,816,3,120,60,
  	0,815,817,5,178,0,0,816,815,1,0,0,0,816,817,1,0,0,0,817,819,1,0,0,0,818,
  	784,1,0,0,0,818,806,1,0,0,0,819,45,1,0,0,0,820,821,5,69,0,0,821,822,5,
  	178,0,0,822,823,5,126,0,0,823,824,5,178,0,0,824,827,5,136,0,0,825,826,
  	5,178,0,0,826,828,5,92,0,0,827,825,1,0,0,0,827,828,1,0,0,0,828,831,1,
  	0,0,0,829,830,5,178,0,0,830,832,3,42,21,0,831,829,1,0,0,0,831,832,1,0,
  	0,0,832,833,1,0,0,0,833,834,5,178,0,0,834,836,3,330,165,0,835,837,5,178,
  	0,0,836,835,1,0,0,0,836,837,1,0,0,0,837,838,1,0,0,0,838,840,5,2,0,0,839,
  	841,5,178,0,0,840,839,1,0,0,0,840,841,1,0,0,0,841,842,1,0,0,0,842,844,
  	3,48,24,0,843,845,5,178,0,0,844,843,1,0,0,0,844,845,1,0,0,0,845,854,1,
  	0,0,0,846,848,5,4,0,0,847,849,5,178,0,0,848,847,1,0,0,0,848,849,1,0,0,
  	0,849,850,1,0,0,0,850,852,3,90,45,0,851,853,5,178,0,0,852,851,1,0,0,0,
  	852,853,1,0,0,0,853,855,1,0,0,0,854,846,1,0,0,0,854,855,1,0,0,0,855,864,
  	1,0,0,0,856,858,5,4,0,0,857,859,5,178,0,0,858,857,1,0,0,0,858,859,1,0,
  	0,0,859,860,1,0,0,0,860,862,3,332,166,0,861,863,5,178,0,0,862,861,1,0,
  	0,0,862,863,1,0,0,0,863,865,1,0,0,0,864,856,1,0,0,0,864,865,1,0,0,0,865,
  	866,1,0,0,0,866,882,5,3,0,0,867,868,5,178,0,0,868,870,5,150,0,0,869,871,
  	5,178,0,0,870,869,1,0,0,0,870,871,1,0,0,0,871,872,1,0,0,0,872,874,5,2,
  	0,0,873,875,5,178,0,0,874,873,1,0,0,0,874,875,1,0,0,0,875,876,1,0,0,0,
  	876,878,3,24,12,0,877,879,5,178,0,0,878,877,1,0,0,0,878,879,1,0,0,0,879,
  	880,1,0,0,0,880,881,5,3,0,0,881,883,1,0,0,0,882,867,1,0,0,0,882,883,1,
  	0,0,0,883,47,1,0,0,0,884,895,3,50,25,0,885,887,5,178,0,0,886,885,1,0,
  	0,0,886,887,1,0,0,0,887,888,1,0,0,0,888,890,5,4,0,0,889,891,5,178,0,0,
  	890,889,1,0,0,0,890,891,1,0,0,0,891,892,1,0,0,0,892,894,3,50,25,0,893,
  	886,1,0,0,0,894,897,1,0,0,0,895,893,1,0,0,0,895,896,1,0,0,0,896,49,1,
  	0,0,0,897,895,1,0,0,0,898,899,5,88,0,0,899,900,5,178,0,0,900,901,3,330,
  	165,0,901,902,5,178,0,0,902,903,5,138,0,0,903,904,5,178,0,0,904,905,3,
  	330,165,0,905,51,1,0,0,0,906,907,5,69,0,0,907,908,5,178,0,0,908,909,5,
  	131,0,0,909,913,5,178,0,0,910,911,3,42,21,0,911,912,5,178,0,0,912,914,
  	1,0,0,0,913,910,1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,915,920,3,330,
  	165,0,916,917,5,178,0,0,917,919,3,56,28,0,918,916,1,0,0,0,919,922,1,0,
  	0,0,920,918,1,0,0,0,920,921,1,0,0,0,921,53,1,0,0,0,922,920,1,0,0,0,923,
  	924,5,69,0,0,924,925,5,178,0,0,925,926,5,142,0,0,926,927,5,178,0,0,927,
  	928,3,330,165,0,928,929,5,178,0,0,929,930,5,52,0,0,930,931,5,178,0,0,
  	931,933,3,96,48,0,932,934,5,178,0,0,933,932,1,0,0,0,933,934,1,0,0,0,934,
  	55,1,0,0,0,935,941,3,58,29,0,936,941,3,60,30,0,937,941,3,62,31,0,938,
  	941,3,64,32,0,939,941,3,66,33,0,940,935,1,0,0,0,940,936,1,0,0,0,940,937,
  	1,0,0,0,940,938,1,0,0,0,940,939,1,0,0,0,941,57,1,0,0,0,942,943,5,98,0,
  	0,943,946,5,178,0,0,944,945,5,57,0,0,945,947,5,178,0,0,946,944,1,0,0,
  	0,946,947,1,0,0,0,947,949,1,0,0,0,948,950,5,160,0,0,949,948,1,0,0,0,949,
  	950,1,0,0,0,950,951,1,0,0,0,951,952,3,326,163,0,952,59,1,0,0,0,953,954,
  	5,112,0,0,954,955,5,178,0,0,955,963,5,110,0,0,956,957,5,110,0,0,957,959,
  	5,178,0,0,958,960,5,160,0,0,959,958,1,0,0,0,959,960,1,0,0,0,960,961,1,
  	0,0,0,961,963,3,326,163,0,962,953,1,0,0,0,962,956,1,0,0,0,963,61,1,0,
  	0,0,964,965,5,112,0,0,965,966,5,178,0,0,966,974,5,108,0,0,967,968,5,108,
  	0,0,968,970,5,178,0,0,969,971,5,160,0,0,970,969,1,0,0,0,970,971,1,0,0,
  	0,971,972,1,0,0,0,972,974,3,326,163,0,973,964,1,0,0,0,973,967,1,0,0,0,
  	974,63,1,0,0,0,975,976,5,134,0,0,976,979,5,178,0,0,977,978,5,150,0,0,
  	978,980,5,178,0,0,979,977,1,0,0,0,979,980,1,0,0,0,980,982,1,0,0,0,981,
  	983,5,160,0,0,982,981,1,0,0,0,982,983,1,0,0,0,983,984,1,0,0,0,984,985,
  	3,326,163,0,985,65,1,0,0,0,986,987,5,112,0,0,987,989,5,178,0,0,988,986,
  	1,0,0,0,988,989,1,0,0,0,989,990,1,0,0,0,990,991,5,70,0,0,991,67,1,0,0,
  	0,992,993,5,96,0,0,993,994,5,178,0,0,994,995,5,83,0,0,995,69,1,0,0,0,
  	996,997,5,79,0,0,997,998,5,178,0,0,998,999,7,0,0,0,999,1003,5,178,0,0,
  	1000,1001,3,68,34,0,1001,1002,5,178,0,0,1002,1004,1,0,0,0,1003,1000,1,
  	0,0,0,1003,1004,1,0,0,0,1004,1005,1,0,0,0,1005,1006,3,330,165,0,1006,
  	71,1,0,0,0,1007,1008,5,50,0,0,1008,1009,5,178,0,0,1009,1010,5,136,0,0,
  	1010,1011,5,178,0,0,1011,1012,3,330,165,0,1012,1013,5,178,0,0,1013,1014,
  	3,74,37,0,1014,73,1,0,0,0,1015,1020,3,76,38,0,1016,1020,3,80,40,0,1017,
  	1020,3,82,41,0,1018,1020,3,84,42,0,1019,1015,1,0,0,0,1019,1016,1,0,0,
  	0,1019,1017,1,0,0,0,1019,1018,1,0,0,0,1020,75,1,0,0,0,1021,1022,5,48,
  	0,0,1022,1026,5,178,0,0,1023,1024,3,42,21,0,1024,1025,5,178,0,0,1025,
  	1027,1,0,0,0,1026,1023,1,0,0,0,1026,1027,1,0,0,0,1027,1028,1,0,0,0,1028,
  	1029,3,324,162,0,1029,1030,5,178,0,0,1030,1033,3,96,48,0,1031,1032,5,
  	178,0,0,1032,1034,3,78,39,0,1033,1031,1,0,0,0,1033,1034,1,0,0,0,1034,
  	77,1,0,0,0,1035,1036,5,73,0,0,1036,1037,5,178,0,0,1037,1038,3,228,114,
  	0,1038,79,1,0,0,0,1039,1040,5,79,0,0,1040,1044,5,178,0,0,1041,1042,3,
  	68,34,0,1042,1043,5,178,0,0,1043,1045,1,0,0,0,1044,1041,1,0,0,0,1044,
  	1045,1,0,0,0,1045,1046,1,0,0,0,1046,1047,3,324,162,0,1047,81,1,0,0,0,
  	1048,1049,5,127,0,0,1049,1050,5,178,0,0,1050,1051,5,138,0,0,1051,1052,
  	5,178,0,0,1052,1053,3,330,165,0,1053,83,1,0,0,0,1054,1055,5,127,0,0,1055,
  	1056,5,178,0,0,1056,1057,3,324,162,0,1057,1058,5,178,0,0,1058,1059,5,
  	138,0,0,1059,1060,5,178,0,0,1060,1061,3,324,162,0,1061,85,1,0,0,0,1062,
  	1073,3,88,44,0,1063,1065,5,178,0,0,1064,1063,1,0,0,0,1064,1065,1,0,0,
  	0,1065,1066,1,0,0,0,1066,1068,5,4,0,0,1067,1069,5,178,0,0,1068,1067,1,
  	0,0,0,1068,1069,1,0,0,0,1069,1070,1,0,0,0,1070,1072,3,88,44,0,1071,1064,
  	1,0,0,0,1072,1075,1,0,0,0,1073,1071,1,0,0,0,1073,1074,1,0,0,0,1074,87,
  	1,0,0,0,1075,1073,1,0,0,0,1076,1077,3,324,162,0,1077,1078,5,178,0,0,1078,
  	1079,3,96,48,0,1079,89,1,0,0,0,1080,1091,3,92,46,0,1081,1083,5,178,0,
  	0,1082,1081,1,0,0,0,1082,1083,1,0,0,0,1083,1084,1,0,0,0,1084,1086,5,4,
  	0,0,1085,1087,5,178,0,0,1086,1085,1,0,0,0,1086,1087,1,0,0,0,1087,1088,
  	1,0,0,0,1088,1090,3,92,46,0,1089,1082,1,0,0,0,1090,1093,1,0,0,0,1091,
  	1089,1,0,0,0,1091,1092,1,0,0,0,1092,91,1,0,0,0,1093,1091,1,0,0,0,1094,
  	1097,3,88,44,0,1095,1096,5,178,0,0,1096,1098,3,78,39,0,1097,1095,1,0,
  	0,0,1097,1098,1,0,0,0,1098,1103,1,0,0,0,1099,1100,5,178,0,0,1100,1101,
  	5,122,0,0,1101,1102,5,178,0,0,1102,1104,5,102,0,0,1103,1099,1,0,0,0,1103,
  	1104,1,0,0,0,1104,93,1,0,0,0,1105,1106,5,122,0,0,1106,1107,5,178,0,0,
  	1107,1109,5,102,0,0,1108,1110,5,178,0,0,1109,1108,1,0,0,0,1109,1110,1,
  	0,0,0,1110,1111,1,0,0,0,1111,1113,5,2,0,0,1112,1114,5,178,0,0,1113,1112,
  	1,0,0,0,1113,1114,1,0,0,0,1114,1115,1,0,0,0,1115,1117,3,324,162,0,1116,
  	1118,5,178,0,0,1117,1116,1,0,0,0,1117,1118,1,0,0,0,1118,1119,1,0,0,0,
  	1119,1120,5,3,0,0,1120,95,1,0,0,0,1121,1122,6,48,-1,0,1122,1196,3,332,
  	166,0,1123,1125,5,143,0,0,1124,1126,5,178,0,0,1125,1124,1,0,0,0,1125,
  	1126,1,0,0,0,1126,1127,1,0,0,0,1127,1129,5,2,0,0,1128,1130,5,178,0,0,
  	1129,1128,1,0,0,0,1129,1130,1,0,0,0,1130,1131,1,0,0,0,1131,1133,3,86,
  	43,0,1132,1134,5,178,0,0,1133,1132,1,0,0,0,1133,1134,1,0,0,0,1134,1135,
  	1,0,0,0,1135,1136,5,3,0,0,1136,1196,1,0,0,0,1137,1139,3,332,166,0,1138,
  	1140,5,178,0,0,1139,1138,1,0,0,0,1139,1140,1,0,0,0,1140,1141,1,0,0,0,
  	1141,1143,5,2,0,0,1142,1144,5,178,0,0,1143,1142,1,0,0,0,1143,1144,1,0,
  	0,0,1144,1145,1,0,0,0,1145,1147,3,86,43,0,1146,1148,5,178,0,0,1147,1146,
  	1,0,0,0,1147,1148,1,0,0,0,1148,1149,1,0,0,0,1149,1150,5,3,0,0,1150,1196,
  	1,0,0,0,1151,1153,3,332,166,0,1152,1154,5,178,0,0,1153,1152,1,0,0,0,1153,
  	1154,1,0,0,0,1154,1155,1,0,0,0,1155,1157,5,2,0,0,1156,1158,5,178,0,0,
  	1157,1156,1,0,0,0,1157,1158,1,0,0,0,1158,1159,1,0,0,0,1159,1161,3,96,
  	48,0,1160,1162,5,178,0,0,1161,1160,1,0,0,0,1161,1162,1,0,0,0,1162,1163,
  	1,0,0,0,1163,1165,5,4,0,0,1164,1166,5,178,0,0,1165,1164,1,0,0,0,1165,
  	1166,1,0,0,0,1166,1167,1,0,0,0,1167,1169,3,96,48,0,1168,1170,5,178,0,
  	0,1169,1168,1,0,0,0,1169,1170,1,0,0,0,1170,1171,1,0,0,0,1171,1172,5,3,
  	0,0,1172,1196,1,0,0,0,1173,1175,5,156,0,0,1174,1176,5,178,0,0,1175,1174,
  	1,0,0,0,1175,1176,1,0,0,0,1176,1177,1,0,0,0,1177,1179,5,2,0,0,1178,1180,
  	5,178,0,0,1179,1178,1,0,0,0,1179,1180,1,0,0,0,1180,1181,1,0,0,0,1181,
  	1183,3,326,163,0,1182,1184,5,178,0,0,1183,1182,1,0,0,0,1183,1184,1,0,
  	0,0,1184,1185,1,0,0,0,1185,1187,5,4,0,0,1186,1188,5,178,0,0,1187,1186,
  	1,0,0,0,1187,1188,1,0,0,0,1188,1189,1,0,0,0,1189,1191,3,326,163,0,1190,
  	1192,5,178,0,0,1191,1190,1,0,0,0,1191,1192,1,0,0,0,1192,1193,1,0,0,0,
  	1193,1194,5,3,0,0,1194,1196,1,0,0,0,1195,1121,1,0,0,0,1195,1123,1,0,0,
  	0,1195,1137,1,0,0,0,1195,1151,1,0,0,0,1195,1173,1,0,0,0,1196,1201,1,0,
  	0,0,1197,1198,10,5,0,0,1198,1200,3,98,49,0,1199,1197,1,0,0,0,1200,1203,
  	1,0,0,0,1201,1199,1,0,0,0,1201,1202,1,0,0,0,1202,97,1,0,0,0,1203,1201,
  	1,0,0,0,1204,1208,3,100,50,0,1205,1207,3,100,50,0,1206,1205,1,0,0,0,1207,
  	1210,1,0,0,0,1208,1206,1,0,0,0,1208,1209,1,0,0,0,1209,99,1,0,0,0,1210,
  	1208,1,0,0,0,1211,1213,5,7,0,0,1212,1214,3,326,163,0,1213,1212,1,0,0,
  	0,1213,1214,1,0,0,0,1214,1215,1,0,0,0,1215,1216,5,8,0,0,1216,101,1,0,
  	0,0,1217,1220,3,104,52,0,1218,1220,3,106,53,0,1219,1217,1,0,0,0,1219,
  	1218,1,0,0,0,1220,103,1,0,0,0,1221,1224,5,84,0,0,1222,1223,5,178,0,0,
  	1223,1225,5,105,0,0,1224,1222,1,0,0,0,1224,1225,1,0,0,0,1225,105,1,0,
  	0,0,1226,1227,5,123,0,0,1227,107,1,0,0,0,1228,1229,5,56,0,0,1229,1230,
  	5,178,0,0,1230,1242,5,140,0,0,1231,1232,5,56,0,0,1232,1233,5,178,0,0,
  	1233,1234,5,140,0,0,1234,1235,5,178,0,0,1235,1236,5,125,0,0,1236,1237,
  	5,178,0,0,1237,1242,5,118,0,0,1238,1242,5,64,0,0,1239,1242,5,129,0,0,
  	1240,1242,5,61,0,0,1241,1228,1,0,0,0,1241,1231,1,0,0,0,1241,1238,1,0,
  	0,0,1241,1239,1,0,0,0,1241,1240,1,0,0,0,1242,109,1,0,0,0,1243,1248,3,
  	112,56,0,1244,1248,3,114,57,0,1245,1248,3,116,58,0,1246,1248,3,118,59,
  	0,1247,1243,1,0,0,0,1247,1244,1,0,0,0,1247,1245,1,0,0,0,1247,1246,1,0,
  	0,0,1248,111,1,0,0,0,1249,1250,5,104,0,0,1250,1253,5,178,0,0,1251,1252,
  	5,86,0,0,1252,1254,5,178,0,0,1253,1251,1,0,0,0,1253,1254,1,0,0,0,1254,
  	1257,1,0,0,0,1255,1258,5,163,0,0,1256,1258,3,316,158,0,1257,1255,1,0,
  	0,0,1257,1256,1,0,0,0,1258,113,1,0,0,0,1259,1260,5,89,0,0,1260,1262,5,
  	178,0,0,1261,1259,1,0,0,0,1261,1262,1,0,0,0,1262,1263,1,0,0,0,1263,1264,
  	5,99,0,0,1264,1265,5,178,0,0,1265,1270,3,316,158,0,1266,1267,5,178,0,
  	0,1267,1268,5,88,0,0,1268,1269,5,178,0,0,1269,1271,5,163,0,0,1270,1266,
  	1,0,0,0,1270,1271,1,0,0,0,1271,115,1,0,0,0,1272,1273,5,145,0,0,1273,1274,
  	5,178,0,0,1274,1275,3,316,158,0,1275,117,1,0,0,0,1276,1277,5,146,0,0,
  	1277,1278,5,178,0,0,1278,1279,3,316,158,0,1279,119,1,0,0,0,1280,1281,
  	3,122,61,0,1281,121,1,0,0,0,1282,1289,3,126,63,0,1283,1285,5,178,0,0,
  	1284,1283,1,0,0,0,1284,1285,1,0,0,0,1285,1286,1,0,0,0,1286,1288,3,124,
  	62,0,1287,1284,1,0,0,0,1288,1291,1,0,0,0,1289,1287,1,0,0,0,1289,1290,
  	1,0,0,0,1290,1304,1,0,0,0,1291,1289,1,0,0,0,1292,1294,3,168,84,0,1293,
  	1295,5,178,0,0,1294,1293,1,0,0,0,1294,1295,1,0,0,0,1295,1297,1,0,0,0,
  	1296,1292,1,0,0,0,1297,1298,1,0,0,0,1298,1296,1,0,0,0,1298,1299,1,0,0,
  	0,1299,1300,1,0,0,0,1300,1301,3,126,63,0,1301,1302,6,61,-1,0,1302,1304,
  	1,0,0,0,1303,1282,1,0,0,0,1303,1296,1,0,0,0,1304,123,1,0,0,0,1305,1306,
  	5,143,0,0,1306,1307,5,178,0,0,1307,1309,5,49,0,0,1308,1310,5,178,0,0,
  	1309,1308,1,0,0,0,1309,1310,1,0,0,0,1310,1311,1,0,0,0,1311,1318,3,126,
  	63,0,1312,1314,5,143,0,0,1313,1315,5,178,0,0,1314,1313,1,0,0,0,1314,1315,
  	1,0,0,0,1315,1316,1,0,0,0,1316,1318,3,126,63,0,1317,1305,1,0,0,0,1317,
  	1312,1,0,0,0,1318,125,1,0,0,0,1319,1322,3,128,64,0,1320,1322,3,130,65,
  	0,1321,1319,1,0,0,0,1321,1320,1,0,0,0,1322,127,1,0,0,0,1323,1325,3,136,
  	68,0,1324,1326,5,178,0,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,1328,
  	1,0,0,0,1327,1323,1,0,0,0,1328,1331,1,0,0,0,1329,1327,1,0,0,0,1329,1330,
  	1,0,0,0,1330,1332,1,0,0,0,1331,1329,1,0,0,0,1332,1359,3,168,84,0,1333,
  	1335,3,136,68,0,1334,1336,5,178,0,0,1335,1334,1,0,0,0,1335,1336,1,0,0,
  	0,1336,1338,1,0,0,0,1337,1333,1,0,0,0,1338,1341,1,0,0,0,1339,1337,1,0,
  	0,0,1339,1340,1,0,0,0,1340,1342,1,0,0,0,1341,1339,1,0,0,0,1342,1349,3,
  	134,67,0,1343,1345,5,178,0,0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,
  	1346,1,0,0,0,1346,1348,3,134,67,0,1347,1344,1,0,0,0,1348,1351,1,0,0,0,
  	1349,1347,1,0,0,0,1349,1350,1,0,0,0,1350,1356,1,0,0,0,1351,1349,1,0,0,
  	0,1352,1354,5,178,0,0,1353,1352,1,0,0,0,1353,1354,1,0,0,0,1354,1355,1,
  	0,0,0,1355,1357,3,168,84,0,1356,1353,1,0,0,0,1356,1357,1,0,0,0,1357,1359,
  	1,0,0,0,1358,1329,1,0,0,0,1358,1339,1,0,0,0,1359,129,1,0,0,0,1360,1362,
  	3,132,66,0,1361,1363,5,178,0,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,
  	1365,1,0,0,0,1364,1360,1,0,0,0,1365,1366,1,0,0,0,1366,1364,1,0,0,0,1366,
  	1367,1,0,0,0,1367,1368,1,0,0,0,1368,1369,3,128,64,0,1369,131,1,0,0,0,
  	1370,1372,3,136,68,0,1371,1373,5,178,0,0,1372,1371,1,0,0,0,1372,1373,
  	1,0,0,0,1373,1375,1,0,0,0,1374,1370,1,0,0,0,1375,1378,1,0,0,0,1376,1374,
  	1,0,0,0,1376,1377,1,0,0,0,1377,1385,1,0,0,0,1378,1376,1,0,0,0,1379,1381,
  	3,134,67,0,1380,1382,5,178,0,0,1381,1380,1,0,0,0,1381,1382,1,0,0,0,1382,
  	1384,1,0,0,0,1383,1379,1,0,0,0,1384,1387,1,0,0,0,1385,1383,1,0,0,0,1385,
  	1386,1,0,0,0,1386,1388,1,0,0,0,1387,1385,1,0,0,0,1388,1389,3,166,83,0,
  	1389,133,1,0,0,0,1390,1395,3,154,77,0,1391,1395,3,156,78,0,1392,1395,
  	3,160,80,0,1393,1395,3,164,82,0,1394,1390,1,0,0,0,1394,1391,1,0,0,0,1394,
  	1392,1,0,0,0,1394,1393,1,0,0,0,1395,135,1,0,0,0,1396,1401,3,146,73,0,
  	1397,1401,3,152,76,0,1398,1401,3,144,72,0,1399,1401,3,138,69,0,1400,1396,
  	1,0,0,0,1400,1397,1,0,0,0,1400,1398,1,0,0,0,1400,1399,1,0,0,0,1401,137,
  	1,0,0,0,1402,1420,5,104,0,0,1403,1404,5,178,0,0,1404,1405,5,150,0,0,1405,
  	1406,5,178,0,0,1406,1408,5,93,0,0,1407,1409,5,178,0,0,1408,1407,1,0,0,
  	0,1408,1409,1,0,0,0,1409,1410,1,0,0,0,1410,1412,5,2,0,0,1411,1413,5,178,
  	0,0,1412,1411,1,0,0,0,1412,1413,1,0,0,0,1413,1414,1,0,0,0,1414,1416,3,
  	86,43,0,1415,1417,5,178,0,0,1416,1415,1,0,0,0,1416,1417,1,0,0,0,1417,
  	1418,1,0,0,0,1418,1419,5,3,0,0,1419,1421,1,0,0,0,1420,1403,1,0,0,0,1420,
  	1421,1,0,0,0,1421,1422,1,0,0,0,1422,1423,5,178,0,0,1423,1424,5,88,0,0,
  	1424,1425,5,178,0,0,1425,1439,3,10,5,0,1426,1428,5,178,0,0,1427,1426,
  	1,0,0,0,1427,1428,1,0,0,0,1428,1429,1,0,0,0,1429,1431,5,2,0,0,1430,1432,
  	5,178,0,0,1431,1430,1,0,0,0,1431,1432,1,0,0,0,1432,1433,1,0,0,0,1433,
  	1435,3,24,12,0,1434,1436,5,178,0,0,1435,1434,1,0,0,0,1435,1436,1,0,0,
  	0,1436,1437,1,0,0,0,1437,1438,5,3,0,0,1438,1440,1,0,0,0,1439,1427,1,0,
  	0,0,1439,1440,1,0,0,0,1440,1445,1,0,0,0,1441,1443,5,178,0,0,1442,1441,
  	1,0,0,0,1442,1443,1,0,0,0,1443,1444,1,0,0,0,1444,1446,3,184,92,0,1445,
  	1442,1,0,0,0,1445,1446,1,0,0,0,1446,139,1,0,0,0,1447,1448,3,316,158,0,
  	1448,1449,5,178,0,0,1449,1450,5,52,0,0,1450,1451,5,178,0,0,1451,1453,
  	1,0,0,0,1452,1447,1,0,0,0,1452,1453,1,0,0,0,1453,1454,1,0,0,0,1454,1455,
  	3,316,158,0,1455,141,1,0,0,0,1456,1467,3,140,70,0,1457,1459,5,178,0,0,
  	1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,1460,1,0,0,0,1460,1462,5,4,0,
  	0,1461,1463,5,178,0,0,1462,1461,1,0,0,0,1462,1463,1,0,0,0,1463,1464,1,
  	0,0,0,1464,1466,3,140,70,0,1465,1458,1,0,0,0,1466,1469,1,0,0,0,1467,1465,
  	1,0,0,0,1467,1468,1,0,0,0,1468,143,1,0,0,0,1469,1467,1,0,0,0,1470,1471,
  	5,58,0,0,1471,1472,5,178,0,0,1472,1477,3,296,148,0,1473,1475,5,178,0,
  	0,1474,1473,1,0,0,0,1474,1475,1,0,0,0,1475,1476,1,0,0,0,1476,1478,3,184,
  	92,0,1477,1474,1,0,0,0,1477,1478,1,0,0,0,1478,1485,1,0,0,0,1479,1481,
  	5,178,0,0,1480,1479,1,0,0,0,1480,1481,1,0,0,0,1481,1482,1,0,0,0,1482,
  	1483,5,155,0,0,1483,1484,5,178,0,0,1484,1486,3,142,71,0,1485,1480,1,0,
  	0,0,1485,1486,1,0,0,0,1486,145,1,0,0,0,1487,1488,5,119,0,0,1488,1490,
  	5,178,0,0,1489,1487,1,0,0,0,1489,1490,1,0,0,0,1490,1491,1,0,0,0,1491,
  	1493,5,107,0,0,1492,1494,5,178,0,0,1493,1492,1,0,0,0,1493,1494,1,0,0,
  	0,1494,1495,1,0,0,0,1495,1498,3,186,93,0,1496,1497,5,178,0,0,1497,1499,
  	3,184,92,0,1498,1496,1,0,0,0,1498,1499,1,0,0,0,1499,1502,1,0,0,0,1500,
  	1501,5,178,0,0,1501,1503,3,148,74,0,1502,1500,1,0,0,0,1502,1503,1,0,0,
  	0,1503,147,1,0,0,0,1504,1505,5,94,0,0,1505,1506,5,178,0,0,1506,1507,3,
  	150,75,0,1507,149,1,0,0,0,1508,1509,6,75,-1,0,1509,1511,5,2,0,0,1510,
  	1512,5,178,0,0,1511,1510,1,0,0,0,1511,1512,1,0,0,0,1512,1513,1,0,0,0,
  	1513,1515,3,150,75,0,1514,1516,5,178,0,0,1515,1514,1,0,0,0,1515,1516,
  	1,0,0,0,1516,1517,1,0,0,0,1517,1518,5,3,0,0,1518,1521,1,0,0,0,1519,1521,
  	3,330,165,0,1520,1508,1,0,0,0,1520,1519,1,0,0,0,1521,1538,1,0,0,0,1522,
  	1523,10,4,0,0,1523,1524,5,178,0,0,1524,1525,5,101,0,0,1525,1526,5,178,
  	0,0,1526,1537,3,150,75,5,1527,1532,10,3,0,0,1528,1529,5,178,0,0,1529,
  	1530,5,111,0,0,1530,1531,5,178,0,0,1531,1533,3,330,165,0,1532,1528,1,
  	0,0,0,1533,1534,1,0,0,0,1534,1532,1,0,0,0,1534,1535,1,0,0,0,1535,1537,
  	1,0,0,0,1536,1522,1,0,0,0,1536,1527,1,0,0,0,1537,1540,1,0,0,0,1538,1536,
  	1,0,0,0,1538,1539,1,0,0,0,1539,151,1,0,0,0,1540,1538,1,0,0,0,1541,1543,
  	5,144,0,0,1542,1544,5,178,0,0,1543,1542,1,0,0,0,1543,1544,1,0,0,0,1544,
  	1545,1,0,0,0,1545,1546,3,228,114,0,1546,1547,5,178,0,0,1547,1548,5,52,
  	0,0,1548,1549,5,178,0,0,1549,1550,3,316,158,0,1550,153,1,0,0,0,1551,1553,
  	5,69,0,0,1552,1554,5,178,0,0,1553,1552,1,0,0,0,1553,1554,1,0,0,0,1554,
  	1555,1,0,0,0,1555,1556,3,186,93,0,1556,155,1,0,0,0,1557,1559,5,109,0,
  	0,1558,1560,5,178,0,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,1560,1561,1,
  	0,0,0,1561,1566,3,186,93,0,1562,1563,5,178,0,0,1563,1565,3,158,79,0,1564,
  	1562,1,0,0,0,1565,1568,1,0,0,0,1566,1564,1,0,0,0,1566,1567,1,0,0,0,1567,
  	157,1,0,0,0,1568,1566,1,0,0,0,1569,1570,5,117,0,0,1570,1571,5,178,0,0,
  	1571,1572,5,107,0,0,1572,1573,5,178,0,0,1573,1580,3,160,80,0,1574,1575,
  	5,117,0,0,1575,1576,5,178,0,0,1576,1577,5,69,0,0,1577,1578,5,178,0,0,
  	1578,1580,3,160,80,0,1579,1569,1,0,0,0,1579,1574,1,0,0,0,1580,159,1,0,
  	0,0,1581,1583,5,132,0,0,1582,1584,5,178,0,0,1583,1582,1,0,0,0,1583,1584,
  	1,0,0,0,1584,1585,1,0,0,0,1585,1596,3,162,81,0,1586,1588,5,178,0,0,1587,
  	1586,1,0,0,0,1587,1588,1,0,0,0,1588,1589,1,0,0,0,1589,1591,5,4,0,0,1590,
  	1592,5,178,0,0,1591,1590,1,0,0,0,1591,1592,1,0,0,0,1592,1593,1,0,0,0,
  	1593,1595,3,162,81,0,1594,1587,1,0,0,0,1595,1598,1,0,0,0,1596,1594,1,
  	0,0,0,1596,1597,1,0,0,0,1597,161,1,0,0,0,1598,1596,1,0,0,0,1599,1601,
  	3,322,161,0,1600,1602,5,178,0,0,1601,1600,1,0,0,0,1601,1602,1,0,0,0,1602,
  	1603,1,0,0,0,1603,1605,5,6,0,0,1604,1606,5,178,0,0,1605,1604,1,0,0,0,
  	1605,1606,1,0,0,0,1606,1607,1,0,0,0,1607,1608,3,228,114,0,1608,163,1,
  	0,0,0,1609,1610,5,77,0,0,1610,1612,5,178,0,0,1611,1609,1,0,0,0,1611,1612,
  	1,0,0,0,1612,1613,1,0,0,0,1613,1615,5,74,0,0,1614,1616,5,178,0,0,1615,
  	1614,1,0,0,0,1615,1616,1,0,0,0,1616,1617,1,0,0,0,1617,1628,3,228,114,
  	0,1618,1620,5,178,0,0,1619,1618,1,0,0,0,1619,1620,1,0,0,0,1620,1621,1,
  	0,0,0,1621,1623,5,4,0,0,1622,1624,5,178,0,0,1623,1622,1,0,0,0,1623,1624,
  	1,0,0,0,1624,1625,1,0,0,0,1625,1627,3,228,114,0,1626,1619,1,0,0,0,1627,
  	1630,1,0,0,0,1628,1626,1,0,0,0,1628,1629,1,0,0,0,1629,165,1,0,0,0,1630,
  	1628,1,0,0,0,1631,1632,5,150,0,0,1632,1637,3,170,85,0,1633,1635,5,178,
  	0,0,1634,1633,1,0,0,0,1634,1635,1,0,0,0,1635,1636,1,0,0,0,1636,1638,3,
  	184,92,0,1637,1634,1,0,0,0,1637,1638,1,0,0,0,1638,167,1,0,0,0,1639,1640,
  	5,128,0,0,1640,1641,3,170,85,0,1641,169,1,0,0,0,1642,1644,5,178,0,0,1643,
  	1642,1,0,0,0,1643,1644,1,0,0,0,1644,1645,1,0,0,0,1645,1647,5,78,0,0,1646,
  	1643,1,0,0,0,1646,1647,1,0,0,0,1647,1648,1,0,0,0,1648,1649,5,178,0,0,
  	1649,1652,3,172,86,0,1650,1651,5,178,0,0,1651,1653,3,176,88,0,1652,1650,
  	1,0,0,0,1652,1653,1,0,0,0,1653,1656,1,0,0,0,1654,1655,5,178,0,0,1655,
  	1657,3,178,89,0,1656,1654,1,0,0,0,1656,1657,1,0,0,0,1657,1660,1,0,0,0,
  	1658,1659,5,178,0,0,1659,1661,3,180,90,0,1660,1658,1,0,0,0,1660,1661,
  	1,0,0,0,1661,171,1,0,0,0,1662,1673,5,157,0,0,1663,1665,5,178,0,0,1664,
  	1663,1,0,0,0,1664,1665,1,0,0,0,1665,1666,1,0,0,0,1666,1668,5,4,0,0,1667,
  	1669,5,178,0,0,1668,1667,1,0,0,0,1668,1669,1,0,0,0,1669,1670,1,0,0,0,
  	1670,1672,3,174,87,0,1671,1664,1,0,0,0,1672,1675,1,0,0,0,1673,1671,1,
  	0,0,0,1673,1674,1,0,0,0,1674,1691,1,0,0,0,1675,1673,1,0,0,0,1676,1687,
  	3,174,87,0,1677,1679,5,178,0,0,1678,1677,1,0,0,0,1678,1679,1,0,0,0,1679,
  	1680,1,0,0,0,1680,1682,5,4,0,0,1681,1683,5,178,0,0,1682,1681,1,0,0,0,
  	1682,1683,1,0,0,0,1683,1684,1,0,0,0,1684,1686,3,174,87,0,1685,1678,1,
  	0,0,0,1686,1689,1,0,0,0,1687,1685,1,0,0,0,1687,1688,1,0,0,0,1688,1691,
  	1,0,0,0,1689,1687,1,0,0,0,1690,1662,1,0,0,0,1690,1676,1,0,0,0,1691,173,
  	1,0,0,0,1692,1693,3,228,114,0,1693,1694,5,178,0,0,1694,1695,5,52,0,0,
  	1695,1696,5,178,0,0,1696,1697,3,316,158,0,1697,1700,1,0,0,0,1698,1700,
  	3,228,114,0,1699,1692,1,0,0,0,1699,1698,1,0,0,0,1700,175,1,0,0,0,1701,
  	1702,5,121,0,0,1702,1703,5,178,0,0,1703,1704,5,57,0,0,1704,1705,5,178,
  	0,0,1705,1713,3,182,91,0,1706,1708,5,4,0,0,1707,1709,5,178,0,0,1708,1707,
  	1,0,0,0,1708,1709,1,0,0,0,1709,1710,1,0,0,0,1710,1712,3,182,91,0,1711,
  	1706,1,0,0,0,1712,1715,1,0,0,0,1713,1711,1,0,0,0,1713,1714,1,0,0,0,1714,
  	177,1,0,0,0,1715,1713,1,0,0,0,1716,1717,5,158,0,0,1717,1718,5,178,0,0,
  	1718,1719,3,228,114,0,1719,179,1,0,0,0,1720,1721,5,103,0,0,1721,1722,
  	5,178,0,0,1722,1723,3,228,114,0,1723,181,1,0,0,0,1724,1729,3,228,114,
  	0,1725,1727,5,178,0,0,1726,1725,1,0,0,0,1726,1727,1,0,0,0,1727,1728,1,
  	0,0,0,1728,1730,7,1,0,0,1729,1726,1,0,0,0,1729,1730,1,0,0,0,1730,183,
  	1,0,0,0,1731,1732,5,149,0,0,1732,1733,5,178,0,0,1733,1734,3,228,114,0,
  	1734,185,1,0,0,0,1735,1746,3,188,94,0,1736,1738,5,178,0,0,1737,1736,1,
  	0,0,0,1737,1738,1,0,0,0,1738,1739,1,0,0,0,1739,1741,5,4,0,0,1740,1742,
  	5,178,0,0,1741,1740,1,0,0,0,1741,1742,1,0,0,0,1742,1743,1,0,0,0,1743,
  	1745,3,188,94,0,1744,1737,1,0,0,0,1745,1748,1,0,0,0,1746,1744,1,0,0,0,
  	1746,1747,1,0,0,0,1747,187,1,0,0,0,1748,1746,1,0,0,0,1749,1751,3,316,
  	158,0,1750,1752,5,178,0,0,1751,1750,1,0,0,0,1751,1752,1,0,0,0,1752,1753,
  	1,0,0,0,1753,1755,5,6,0,0,1754,1756,5,178,0,0,1755,1754,1,0,0,0,1755,
  	1756,1,0,0,0,1756,1757,1,0,0,0,1757,1758,3,190,95,0,1758,1761,1,0,0,0,
  	1759,1761,3,190,95,0,1760,1749,1,0,0,0,1760,1759,1,0,0,0,1761,189,1,0,
  	0,0,1762,1763,3,192,96,0,1763,191,1,0,0,0,1764,1771,3,194,97,0,1765,1767,
  	5,178,0,0,1766,1765,1,0,0,0,1766,1767,1,0,0,0,1767,1768,1,0,0,0,1768,
  	1770,3,196,98,0,1769,1766,1,0,0,0,1770,1773,1,0,0,0,1771,1769,1,0,0,0,
  	1771,1772,1,0,0,0,1772,1779,1,0,0,0,1773,1771,1,0,0,0,1774,1775,5,2,0,
  	0,1775,1776,3,192,96,0,1776,1777,5,3,0,0,1777,1779,1,0,0,0,1778,1764,
  	1,0,0,0,1778,1774,1,0,0,0,1779,193,1,0,0,0,1780,1782,5,2,0,0,1781,1783,
  	5,178,0,0,1782,1781,1,0,0,0,1782,1783,1,0,0,0,1783,1788,1,0,0,0,1784,
  	1786,3,316,158,0,1785,1787,5,178,0,0,1786,1785,1,0,0,0,1786,1787,1,0,
  	0,0,1787,1789,1,0,0,0,1788,1784,1,0,0,0,1788,1789,1,0,0,0,1789,1794,1,
  	0,0,0,1790,1792,3,206,103,0,1791,1793,5,178,0,0,1792,1791,1,0,0,0,1792,
  	1793,1,0,0,0,1793,1795,1,0,0,0,1794,1790,1,0,0,0,1794,1795,1,0,0,0,1795,
  	1800,1,0,0,0,1796,1798,3,202,101,0,1797,1799,5,178,0,0,1798,1797,1,0,
  	0,0,1798,1799,1,0,0,0,1799,1801,1,0,0,0,1800,1796,1,0,0,0,1800,1801,1,
  	0,0,0,1801,1802,1,0,0,0,1802,1803,5,3,0,0,1803,195,1,0,0,0,1804,1806,
  	3,198,99,0,1805,1807,5,178,0,0,1806,1805,1,0,0,0,1806,1807,1,0,0,0,1807,
  	1808,1,0,0,0,1808,1809,3,194,97,0,1809,197,1,0,0,0,1810,1812,3,336,168,
  	0,1811,1813,5,178,0,0,1812,1811,1,0,0,0,1812,1813,1,0,0,0,1813,1814,1,
  	0,0,0,1814,1816,3,340,170,0,1815,1817,5,178,0,0,1816,1815,1,0,0,0,1816,
  	1817,1,0,0,0,1817,1819,1,0,0,0,1818,1820,3,200,100,0,1819,1818,1,0,0,
  	0,1819,1820,1,0,0,0,1820,1822,1,0,0,0,1821,1823,5,178,0,0,1822,1821,1,
  	0,0,0,1822,1823,1,0,0,0,1823,1824,1,0,0,0,1824,1825,3,340,170,0,1825,
  	1855,1,0,0,0,1826,1828,3,340,170,0,1827,1829,5,178,0,0,1828,1827,1,0,
  	0,0,1828,1829,1,0,0,0,1829,1831,1,0,0,0,1830,1832,3,200,100,0,1831,1830,
  	1,0,0,0,1831,1832,1,0,0,0,1832,1834,1,0,0,0,1833,1835,5,178,0,0,1834,
  	1833,1,0,0,0,1834,1835,1,0,0,0,1835,1836,1,0,0,0,1836,1838,3,340,170,
  	0,1837,1839,5,178,0,0,1838,1837,1,0,0,0,1838,1839,1,0,0,0,1839,1840,1,
  	0,0,0,1840,1841,3,338,169,0,1841,1855,1,0,0,0,1842,1844,3,340,170,0,1843,
  	1845,5,178,0,0,1844,1843,1,0,0,0,1844,1845,1,0,0,0,1845,1847,1,0,0,0,
  	1846,1848,3,200,100,0,1847,1846,1,0,0,0,1847,1848,1,0,0,0,1848,1850,1,
  	0,0,0,1849,1851,5,178,0,0,1850,1849,1,0,0,0,1850,1851,1,0,0,0,1851,1852,
  	1,0,0,0,1852,1853,3,340,170,0,1853,1855,1,0,0,0,1854,1810,1,0,0,0,1854,
  	1826,1,0,0,0,1854,1842,1,0,0,0,1855,199,1,0,0,0,1856,1858,5,7,0,0,1857,
  	1859,5,178,0,0,1858,1857,1,0,0,0,1858,1859,1,0,0,0,1859,1864,1,0,0,0,
  	1860,1862,3,316,158,0,1861,1863,5,178,0,0,1862,1861,1,0,0,0,1862,1863,
  	1,0,0,0,1863,1865,1,0,0,0,1864,1860,1,0,0,0,1864,1865,1,0,0,0,1865,1870,
  	1,0,0,0,1866,1868,3,204,102,0,1867,1869,5,178,0,0,1868,1867,1,0,0,0,1868,
  	1869,1,0,0,0,1869,1871,1,0,0,0,1870,1866,1,0,0,0,1870,1871,1,0,0,0,1871,
  	1876,1,0,0,0,1872,1874,3,210,105,0,1873,1875,5,178,0,0,1874,1873,1,0,
  	0,0,1874,1875,1,0,0,0,1875,1877,1,0,0,0,1876,1872,1,0,0,0,1876,1877,1,
  	0,0,0,1877,1882,1,0,0,0,1878,1880,3,202,101,0,1879,1881,5,178,0,0,1880,
  	1879,1,0,0,0,1880,1881,1,0,0,0,1881,1883,1,0,0,0,1882,1878,1,0,0,0,1882,
  	1883,1,0,0,0,1883,1884,1,0,0,0,1884,1885,5,8,0,0,1885,201,1,0,0,0,1886,
  	1888,5,9,0,0,1887,1889,5,178,0,0,1888,1887,1,0,0,0,1888,1889,1,0,0,0,
  	1889,1923,1,0,0,0,1890,1892,3,324,162,0,1891,1893,5,178,0,0,1892,1891,
  	1,0,0,0,1892,1893,1,0,0,0,1893,1894,1,0,0,0,1894,1896,5,162,0,0,1895,
  	1897,5,178,0,0,1896,1895,1,0,0,0,1896,1897,1,0,0,0,1897,1898,1,0,0,0,
  	1898,1900,3,228,114,0,1899,1901,5,178,0,0,1900,1899,1,0,0,0,1900,1901,
  	1,0,0,0,1901,1920,1,0,0,0,1902,1904,5,4,0,0,1903,1905,5,178,0,0,1904,
  	1903,1,0,0,0,1904,1905,1,0,0,0,1905,1906,1,0,0,0,1906,1908,3,324,162,
  	0,1907,1909,5,178,0,0,1908,1907,1,0,0,0,1908,1909,1,0,0,0,1909,1910,1,
  	0,0,0,1910,1912,5,162,0,0,1911,1913,5,178,0,0,1912,1911,1,0,0,0,1912,
  	1913,1,0,0,0,1913,1914,1,0,0,0,1914,1916,3,228,114,0,1915,1917,5,178,
  	0,0,1916,1915,1,0,0,0,1916,1917,1,0,0,0,1917,1919,1,0,0,0,1918,1902,1,
  	0,0,0,1919,1922,1,0,0,0,1920,1918,1,0,0,0,1920,1921,1,0,0,0,1921,1924,
  	1,0,0,0,1922,1920,1,0,0,0,1923,1890,1,0,0,0,1923,1924,1,0,0,0,1924,1925,
  	1,0,0,0,1925,1926,5,10,0,0,1926,203,1,0,0,0,1927,1929,5,162,0,0,1928,
  	1930,5,178,0,0,1929,1928,1,0,0,0,1929,1930,1,0,0,0,1930,1931,1,0,0,0,
  	1931,1945,3,226,113,0,1932,1934,5,178,0,0,1933,1932,1,0,0,0,1933,1934,
  	1,0,0,0,1934,1935,1,0,0,0,1935,1937,5,11,0,0,1936,1938,5,162,0,0,1937,
  	1936,1,0,0,0,1937,1938,1,0,0,0,1938,1940,1,0,0,0,1939,1941,5,178,0,0,
  	1940,1939,1,0,0,0,1940,1941,1,0,0,0,1941,1942,1,0,0,0,1942,1944,3,226,
  	113,0,1943,1933,1,0,0,0,1944,1947,1,0,0,0,1945,1943,1,0,0,0,1945,1946,
  	1,0,0,0,1946,205,1,0,0,0,1947,1945,1,0,0,0,1948,1955,3,208,104,0,1949,
  	1951,5,178,0,0,1950,1949,1,0,0,0,1950,1951,1,0,0,0,1951,1952,1,0,0,0,
  	1952,1954,3,208,104,0,1953,1950,1,0,0,0,1954,1957,1,0,0,0,1955,1953,1,
  	0,0,0,1955,1956,1,0,0,0,1956,207,1,0,0,0,1957,1955,1,0,0,0,1958,1960,
  	5,162,0,0,1959,1961,5,178,0,0,1960,1959,1,0,0,0,1960,1961,1,0,0,0,1961,
  	1962,1,0,0,0,1962,1963,3,224,112,0,1963,209,1,0,0,0,1964,1969,5,157,0,
  	0,1965,1967,5,178,0,0,1966,1965,1,0,0,0,1966,1967,1,0,0,0,1967,1968,1,
  	0,0,0,1968,1970,3,212,106,0,1969,1966,1,0,0,0,1969,1970,1,0,0,0,1970,
  	1975,1,0,0,0,1971,1973,5,178,0,0,1972,1971,1,0,0,0,1972,1973,1,0,0,0,
  	1973,1974,1,0,0,0,1974,1976,3,214,107,0,1975,1972,1,0,0,0,1975,1976,1,
  	0,0,0,1976,1981,1,0,0,0,1977,1979,5,178,0,0,1978,1977,1,0,0,0,1978,1979,
  	1,0,0,0,1979,1980,1,0,0,0,1980,1982,3,216,108,0,1981,1978,1,0,0,0,1981,
  	1982,1,0,0,0,1982,211,1,0,0,0,1983,1984,5,49,0,0,1984,1986,5,178,0,0,
  	1985,1983,1,0,0,0,1985,1986,1,0,0,0,1986,1987,1,0,0,0,1987,1989,5,152,
  	0,0,1988,1990,5,178,0,0,1989,1988,1,0,0,0,1989,1990,1,0,0,0,1990,1991,
  	1,0,0,0,1991,1993,5,2,0,0,1992,1994,5,178,0,0,1993,1992,1,0,0,0,1993,
  	1994,1,0,0,0,1994,1995,1,0,0,0,1995,1997,3,324,162,0,1996,1998,5,178,
  	0,0,1997,1996,1,0,0,0,1997,1998,1,0,0,0,1998,1999,1,0,0,0,1999,2000,5,
  	3,0,0,2000,2008,1,0,0,0,2001,2008,5,133,0,0,2002,2003,5,49,0,0,2003,2004,
  	5,178,0,0,2004,2008,5,133,0,0,2005,2008,5,139,0,0,2006,2008,5,46,0,0,
  	2007,1985,1,0,0,0,2007,2001,1,0,0,0,2007,2002,1,0,0,0,2007,2005,1,0,0,
  	0,2007,2006,1,0,0,0,2008,213,1,0,0,0,2009,2011,3,220,110,0,2010,2009,
  	1,0,0,0,2010,2011,1,0,0,0,2011,2013,1,0,0,0,2012,2014,5,178,0,0,2013,
  	2012,1,0,0,0,2013,2014,1,0,0,0,2014,2015,1,0,0,0,2015,2017,5,12,0,0,2016,
  	2018,5,178,0,0,2017,2016,1,0,0,0,2017,2018,1,0,0,0,2018,2020,1,0,0,0,
  	2019,2021,3,222,111,0,2020,2019,1,0,0,0,2020,2021,1,0,0,0,2021,2024,1,
  	0,0,0,2022,2024,3,326,163,0,2023,2010,1,0,0,0,2023,2022,1,0,0,0,2024,
  	215,1,0,0,0,2025,2027,5,2,0,0,2026,2028,5,178,0,0,2027,2026,1,0,0,0,2027,
  	2028,1,0,0,0,2028,2029,1,0,0,0,2029,2031,3,316,158,0,2030,2032,5,178,
  	0,0,2031,2030,1,0,0,0,2031,2032,1,0,0,0,2032,2033,1,0,0,0,2033,2035,5,
  	4,0,0,2034,2036,5,178,0,0,2035,2034,1,0,0,0,2035,2036,1,0,0,0,2036,2037,
  	1,0,0,0,2037,2049,3,316,158,0,2038,2040,5,178,0,0,2039,2038,1,0,0,0,2039,
  	2040,1,0,0,0,2040,2041,1,0,0,0,2041,2043,5,11,0,0,2042,2044,5,178,0,0,
  	2043,2042,1,0,0,0,2043,2044,1,0,0,0,2044,2045,1,0,0,0,2045,2047,3,184,
  	92,0,2046,2048,5,178,0,0,2047,2046,1,0,0,0,2047,2048,1,0,0,0,2048,2050,
  	1,0,0,0,2049,2039,1,0,0,0,2049,2050,1,0,0,0,2050,2070,1,0,0,0,2051,2053,
  	5,178,0,0,2052,2051,1,0,0,0,2052,2053,1,0,0,0,2053,2054,1,0,0,0,2054,
  	2056,5,11,0,0,2055,2057,5,178,0,0,2056,2055,1,0,0,0,2056,2057,1,0,0,0,
  	2057,2058,1,0,0,0,2058,2060,3,218,109,0,2059,2061,5,178,0,0,2060,2059,
  	1,0,0,0,2060,2061,1,0,0,0,2061,2062,1,0,0,0,2062,2064,5,4,0,0,2063,2065,
  	5,178,0,0,2064,2063,1,0,0,0,2064,2065,1,0,0,0,2065,2066,1,0,0,0,2066,
  	2068,3,218,109,0,2067,2069,5,178,0,0,2068,2067,1,0,0,0,2068,2069,1,0,
  	0,0,2069,2071,1,0,0,0,2070,2052,1,0,0,0,2070,2071,1,0,0,0,2071,2072,1,
  	0,0,0,2072,2073,5,3,0,0,2073,217,1,0,0,0,2074,2076,5,9,0,0,2075,2077,
  	5,178,0,0,2076,2075,1,0,0,0,2076,2077,1,0,0,0,2077,2079,1,0,0,0,2078,
  	2080,3,172,86,0,2079,2078,1,0,0,0,2079,2080,1,0,0,0,2080,2082,1,0,0,0,
  	2081,2083,5,178,0,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2084,1,0,
  	0,0,2084,2085,5,10,0,0,2085,219,1,0,0,0,2086,2087,5,165,0,0,2087,221,
  	1,0,0,0,2088,2089,5,165,0,0,2089,223,1,0,0,0,2090,2091,3,330,165,0,2091,
  	225,1,0,0,0,2092,2093,3,330,165,0,2093,227,1,0,0,0,2094,2095,3,230,115,
  	0,2095,229,1,0,0,0,2096,2103,3,232,116,0,2097,2098,5,178,0,0,2098,2099,
  	5,120,0,0,2099,2100,5,178,0,0,2100,2102,3,232,116,0,2101,2097,1,0,0,0,
  	2102,2105,1,0,0,0,2103,2101,1,0,0,0,2103,2104,1,0,0,0,2104,231,1,0,0,
  	0,2105,2103,1,0,0,0,2106,2113,3,234,117,0,2107,2108,5,178,0,0,2108,2109,
  	5,153,0,0,2109,2110,5,178,0,0,2110,2112,3,234,117,0,2111,2107,1,0,0,0,
  	2112,2115,1,0,0,0,2113,2111,1,0,0,0,2113,2114,1,0,0,0,2114,233,1,0,0,
  	0,2115,2113,1,0,0,0,2116,2123,3,236,118,0,2117,2118,5,178,0,0,2118,2119,
  	5,51,0,0,2119,2120,5,178,0,0,2120,2122,3,236,118,0,2121,2117,1,0,0,0,
  	2122,2125,1,0,0,0,2123,2121,1,0,0,0,2123,2124,1,0,0,0,2124,235,1,0,0,
  	0,2125,2123,1,0,0,0,2126,2128,5,114,0,0,2127,2129,5,178,0,0,2128,2127,
  	1,0,0,0,2128,2129,1,0,0,0,2129,2131,1,0,0,0,2130,2126,1,0,0,0,2131,2134,
  	1,0,0,0,2132,2130,1,0,0,0,2132,2133,1,0,0,0,2133,2135,1,0,0,0,2134,2132,
  	1,0,0,0,2135,2136,3,238,119,0,2136,237,1,0,0,0,2137,2147,3,242,121,0,
  	2138,2140,5,178,0,0,2139,2138,1,0,0,0,2139,2140,1,0,0,0,2140,2141,1,0,
  	0,0,2141,2143,3,240,120,0,2142,2144,5,178,0,0,2143,2142,1,0,0,0,2143,
  	2144,1,0,0,0,2144,2145,1,0,0,0,2145,2146,3,242,121,0,2146,2148,1,0,0,
  	0,2147,2139,1,0,0,0,2147,2148,1,0,0,0,2148,2186,1,0,0,0,2149,2151,3,242,
  	121,0,2150,2152,5,178,0,0,2151,2150,1,0,0,0,2151,2152,1,0,0,0,2152,2153,
  	1,0,0,0,2153,2155,5,159,0,0,2154,2156,5,178,0,0,2155,2154,1,0,0,0,2155,
  	2156,1,0,0,0,2156,2157,1,0,0,0,2157,2158,3,242,121,0,2158,2159,1,0,0,
  	0,2159,2160,6,119,-1,0,2160,2186,1,0,0,0,2161,2163,3,242,121,0,2162,2164,
  	5,178,0,0,2163,2162,1,0,0,0,2163,2164,1,0,0,0,2164,2165,1,0,0,0,2165,
  	2167,3,240,120,0,2166,2168,5,178,0,0,2167,2166,1,0,0,0,2167,2168,1,0,
  	0,0,2168,2169,1,0,0,0,2169,2179,3,242,121,0,2170,2172,5,178,0,0,2171,
  	2170,1,0,0,0,2171,2172,1,0,0,0,2172,2173,1,0,0,0,2173,2175,3,240,120,
  	0,2174,2176,5,178,0,0,2175,2174,1,0,0,0,2175,2176,1,0,0,0,2176,2177,1,
  	0,0,0,2177,2178,3,242,121,0,2178,2180,1,0,0,0,2179,2171,1,0,0,0,2180,
  	2181,1,0,0,0,2181,2179,1,0,0,0,2181,2182,1,0,0,0,2182,2183,1,0,0,0,2183,
  	2184,6,119,-1,0,2184,2186,1,0,0,0,2185,2137,1,0,0,0,2185,2149,1,0,0,0,
  	2185,2161,1,0,0,0,2186,239,1,0,0,0,2187,2188,7,2,0,0,2188,241,1,0,0,0,
  	2189,2200,3,244,122,0,2190,2192,5,178,0,0,2191,2190,1,0,0,0,2191,2192,
  	1,0,0,0,2192,2193,1,0,0,0,2193,2195,5,11,0,0,2194,2196,5,178,0,0,2195,
  	2194,1,0,0,0,2195,2196,1,0,0,0,2196,2197,1,0,0,0,2197,2199,3,244,122,
  	0,2198,2191,1,0,0,0,2199,2202,1,0,0,0,2200,2198,1,0,0,0,2200,2201,1,0,
  	0,0,2201,243,1,0,0,0,2202,2200,1,0,0,0,2203,2214,3,246,123,0,2204,2206,
  	5,178,0,0,2205,2204,1,0,0,0,2205,2206,1,0,0,0,2206,2207,1,0,0,0,2207,
  	2209,5,18,0,0,2208,2210,5,178,0,0,2209,2208,1,0,0,0,2209,2210,1,0,0,0,
  	2210,2211,1,0,0,0,2211,2213,3,246,123,0,2212,2205,1,0,0,0,2213,2216,1,
  	0,0,0,2214,2212,1,0,0,0,2214,2215,1,0,0,0,2215,245,1,0,0,0,2216,2214,
  	1,0,0,0,2217,2229,3,250,125,0,2218,2220,5,178,0,0,2219,2218,1,0,0,0,2219,
  	2220,1,0,0,0,2220,2221,1,0,0,0,2221,2223,3,248,124,0,2222,2224,5,178,
  	0,0,2223,2222,1,0,0,0,2223,2224,1,0,0,0,2224,2225,1,0,0,0,2225,2226,3,
  	250,125,0,2226,2228,1,0,0,0,2227,2219,1,0,0,0,2228,2231,1,0,0,0,2229,
  	2227,1,0,0,0,2229,2230,1,0,0,0,2230,247,1,0,0,0,2231,2229,1,0,0,0,2232,
  	2233,7,3,0,0,2233,249,1,0,0,0,2234,2246,3,254,127,0,2235,2237,5,178,0,
  	0,2236,2235,1,0,0,0,2236,2237,1,0,0,0,2237,2238,1,0,0,0,2238,2240,3,252,
  	126,0,2239,2241,5,178,0,0,2240,2239,1,0,0,0,2240,2241,1,0,0,0,2241,2242,
  	1,0,0,0,2242,2243,3,254,127,0,2243,2245,1,0,0,0,2244,2236,1,0,0,0,2245,
  	2248,1,0,0,0,2246,2244,1,0,0,0,2246,2247,1,0,0,0,2247,251,1,0,0,0,2248,
  	2246,1,0,0,0,2249,2250,7,4,0,0,2250,253,1,0,0,0,2251,2263,3,258,129,0,
  	2252,2254,5,178,0,0,2253,2252,1,0,0,0,2253,2254,1,0,0,0,2254,2255,1,0,
  	0,0,2255,2257,3,256,128,0,2256,2258,5,178,0,0,2257,2256,1,0,0,0,2257,
  	2258,1,0,0,0,2258,2259,1,0,0,0,2259,2260,3,258,129,0,2260,2262,1,0,0,
  	0,2261,2253,1,0,0,0,2262,2265,1,0,0,0,2263,2261,1,0,0,0,2263,2264,1,0,
  	0,0,2264,255,1,0,0,0,2265,2263,1,0,0,0,2266,2267,7,5,0,0,2267,257,1,0,
  	0,0,2268,2279,3,260,130,0,2269,2271,5,178,0,0,2270,2269,1,0,0,0,2270,
  	2271,1,0,0,0,2271,2272,1,0,0,0,2272,2274,5,24,0,0,2273,2275,5,178,0,0,
  	2274,2273,1,0,0,0,2274,2275,1,0,0,0,2275,2276,1,0,0,0,2276,2278,3,260,
  	130,0,2277,2270,1,0,0,0,2278,2281,1,0,0,0,2279,2277,1,0,0,0,2279,2280,
  	1,0,0,0,2280,259,1,0,0,0,2281,2279,1,0,0,0,2282,2284,5,160,0,0,2283,2285,
  	5,178,0,0,2284,2283,1,0,0,0,2284,2285,1,0,0,0,2285,2287,1,0,0,0,2286,
  	2282,1,0,0,0,2287,2290,1,0,0,0,2288,2286,1,0,0,0,2288,2289,1,0,0,0,2289,
  	2291,1,0,0,0,2290,2288,1,0,0,0,2291,2296,3,262,131,0,2292,2294,5,178,
  	0,0,2293,2292,1,0,0,0,2293,2294,1,0,0,0,2294,2295,1,0,0,0,2295,2297,5,
  	161,0,0,2296,2293,1,0,0,0,2296,2297,1,0,0,0,2297,261,1,0,0,0,2298,2306,
  	3,272,136,0,2299,2307,3,266,133,0,2300,2302,3,264,132,0,2301,2300,1,0,
  	0,0,2302,2303,1,0,0,0,2303,2301,1,0,0,0,2303,2304,1,0,0,0,2304,2307,1,
  	0,0,0,2305,2307,3,270,135,0,2306,2299,1,0,0,0,2306,2301,1,0,0,0,2306,
  	2305,1,0,0,0,2306,2307,1,0,0,0,2307,263,1,0,0,0,2308,2309,5,178,0,0,2309,
  	2311,5,97,0,0,2310,2312,5,178,0,0,2311,2310,1,0,0,0,2311,2312,1,0,0,0,
  	2312,2313,1,0,0,0,2313,2328,3,272,136,0,2314,2315,5,7,0,0,2315,2316,3,
  	228,114,0,2316,2317,5,8,0,0,2317,2328,1,0,0,0,2318,2320,5,7,0,0,2319,
  	2321,3,228,114,0,2320,2319,1,0,0,0,2320,2321,1,0,0,0,2321,2322,1,0,0,
  	0,2322,2324,5,162,0,0,2323,2325,3,228,114,0,2324,2323,1,0,0,0,2324,2325,
  	1,0,0,0,2325,2326,1,0,0,0,2326,2328,5,8,0,0,2327,2308,1,0,0,0,2327,2314,
  	1,0,0,0,2327,2318,1,0,0,0,2328,265,1,0,0,0,2329,2341,3,268,134,0,2330,
  	2331,5,178,0,0,2331,2332,5,135,0,0,2332,2333,5,178,0,0,2333,2341,5,150,
  	0,0,2334,2335,5,178,0,0,2335,2336,5,82,0,0,2336,2337,5,178,0,0,2337,2341,
  	5,150,0,0,2338,2339,5,178,0,0,2339,2341,5,66,0,0,2340,2329,1,0,0,0,2340,
  	2330,1,0,0,0,2340,2334,1,0,0,0,2340,2338,1,0,0,0,2341,2343,1,0,0,0,2342,
  	2344,5,178,0,0,2343,2342,1,0,0,0,2343,2344,1,0,0,0,2344,2345,1,0,0,0,
  	2345,2346,3,272,136,0,2346,267,1,0,0,0,2347,2349,5,178,0,0,2348,2347,
  	1,0,0,0,2348,2349,1,0,0,0,2349,2350,1,0,0,0,2350,2351,5,25,0,0,2351,269,
  	1,0,0,0,2352,2353,5,178,0,0,2353,2354,5,100,0,0,2354,2355,5,178,0,0,2355,
  	2363,5,116,0,0,2356,2357,5,178,0,0,2357,2358,5,100,0,0,2358,2359,5,178,
  	0,0,2359,2360,5,114,0,0,2360,2361,5,178,0,0,2361,2363,5,116,0,0,2362,
  	2352,1,0,0,0,2362,2356,1,0,0,0,2363,271,1,0,0,0,2364,2371,3,274,137,0,
  	2365,2367,5,178,0,0,2366,2365,1,0,0,0,2366,2367,1,0,0,0,2367,2368,1,0,
  	0,0,2368,2370,3,310,155,0,2369,2366,1,0,0,0,2370,2373,1,0,0,0,2371,2369,
  	1,0,0,0,2371,2372,1,0,0,0,2372,273,1,0,0,0,2373,2371,1,0,0,0,2374,2384,
  	3,282,141,0,2375,2384,3,320,160,0,2376,2384,3,312,156,0,2377,2384,3,294,
  	147,0,2378,2384,3,296,148,0,2379,2384,3,306,153,0,2380,2384,3,308,154,
  	0,2381,2384,3,316,158,0,2382,2384,3,276,138,0,2383,2374,1,0,0,0,2383,
  	2375,1,0,0,0,2383,2376,1,0,0,0,2383,2377,1,0,0,0,2383,2378,1,0,0,0,2383,
  	2379,1,0,0,0,2383,2380,1,0,0,0,2383,2381,1,0,0,0,2383,2382,1,0,0,0,2384,
  	275,1,0,0,0,2385,2387,5,49,0,0,2386,2388,5,178,0,0,2387,2386,1,0,0,0,
  	2387,2388,1,0,0,0,2388,2389,1,0,0,0,2389,2391,5,2,0,0,2390,2392,5,178,
  	0,0,2391,2390,1,0,0,0,2391,2392,1,0,0,0,2392,2393,1,0,0,0,2393,2395,3,
  	278,139,0,2394,2396,5,178,0,0,2395,2394,1,0,0,0,2395,2396,1,0,0,0,2396,
  	2397,1,0,0,0,2397,2398,5,3,0,0,2398,2442,1,0,0,0,2399,2401,5,47,0,0,2400,
  	2402,5,178,0,0,2401,2400,1,0,0,0,2401,2402,1,0,0,0,2402,2403,1,0,0,0,
  	2403,2405,5,2,0,0,2404,2406,5,178,0,0,2405,2404,1,0,0,0,2405,2406,1,0,
  	0,0,2406,2407,1,0,0,0,2407,2409,3,278,139,0,2408,2410,5,178,0,0,2409,
  	2408,1,0,0,0,2409,2410,1,0,0,0,2410,2411,1,0,0,0,2411,2412,5,3,0,0,2412,
  	2442,1,0,0,0,2413,2415,5,115,0,0,2414,2416,5,178,0,0,2415,2414,1,0,0,
  	0,2415,2416,1,0,0,0,2416,2417,1,0,0,0,2417,2419,5,2,0,0,2418,2420,5,178,
  	0,0,2419,2418,1,0,0,0,2419,2420,1,0,0,0,2420,2421,1,0,0,0,2421,2423,3,
  	278,139,0,2422,2424,5,178,0,0,2423,2422,1,0,0,0,2423,2424,1,0,0,0,2424,
  	2425,1,0,0,0,2425,2426,5,3,0,0,2426,2442,1,0,0,0,2427,2429,5,154,0,0,
  	2428,2430,5,178,0,0,2429,2428,1,0,0,0,2429,2430,1,0,0,0,2430,2431,1,0,
  	0,0,2431,2433,5,2,0,0,2432,2434,5,178,0,0,2433,2432,1,0,0,0,2433,2434,
  	1,0,0,0,2434,2435,1,0,0,0,2435,2437,3,278,139,0,2436,2438,5,178,0,0,2437,
  	2436,1,0,0,0,2437,2438,1,0,0,0,2438,2439,1,0,0,0,2439,2440,5,3,0,0,2440,
  	2442,1,0,0,0,2441,2385,1,0,0,0,2441,2399,1,0,0,0,2441,2413,1,0,0,0,2441,
  	2427,1,0,0,0,2442,277,1,0,0,0,2443,2444,3,280,140,0,2444,2445,5,178,0,
  	0,2445,2446,3,184,92,0,2446,279,1,0,0,0,2447,2448,3,316,158,0,2448,2449,
  	5,178,0,0,2449,2450,5,97,0,0,2450,2451,5,178,0,0,2451,2452,3,228,114,
  	0,2452,281,1,0,0,0,2453,2460,3,318,159,0,2454,2460,5,163,0,0,2455,2460,
  	3,284,142,0,2456,2460,5,116,0,0,2457,2460,3,286,143,0,2458,2460,3,290,
  	145,0,2459,2453,1,0,0,0,2459,2454,1,0,0,0,2459,2455,1,0,0,0,2459,2456,
  	1,0,0,0,2459,2457,1,0,0,0,2459,2458,1,0,0,0,2460,283,1,0,0,0,2461,2462,
  	7,6,0,0,2462,285,1,0,0,0,2463,2465,5,7,0,0,2464,2466,5,178,0,0,2465,2464,
  	1,0,0,0,2465,2466,1,0,0,0,2466,2480,1,0,0,0,2467,2469,3,228,114,0,2468,
  	2470,5,178,0,0,2469,2468,1,0,0,0,2469,2470,1,0,0,0,2470,2477,1,0,0,0,
  	2471,2473,3,288,144,0,2472,2474,5,178,0,0,2473,2472,1,0,0,0,2473,2474,
  	1,0,0,0,2474,2476,1,0,0,0,2475,2471,1,0,0,0,2476,2479,1,0,0,0,2477,2475,
  	1,0,0,0,2477,2478,1,0,0,0,2478,2481,1,0,0,0,2479,2477,1,0,0,0,2480,2467,
  	1,0,0,0,2480,2481,1,0,0,0,2481,2482,1,0,0,0,2482,2483,5,8,0,0,2483,287,
  	1,0,0,0,2484,2486,5,4,0,0,2485,2487,5,178,0,0,2486,2485,1,0,0,0,2486,
  	2487,1,0,0,0,2487,2489,1,0,0,0,2488,2490,3,228,114,0,2489,2488,1,0,0,
  	0,2489,2490,1,0,0,0,2490,289,1,0,0,0,2491,2493,5,9,0,0,2492,2494,5,178,
  	0,0,2493,2492,1,0,0,0,2493,2494,1,0,0,0,2494,2495,1,0,0,0,2495,2497,3,
  	292,146,0,2496,2498,5,178,0,0,2497,2496,1,0,0,0,2497,2498,1,0,0,0,2498,
  	2509,1,0,0,0,2499,2501,5,4,0,0,2500,2502,5,178,0,0,2501,2500,1,0,0,0,
  	2501,2502,1,0,0,0,2502,2503,1,0,0,0,2503,2505,3,292,146,0,2504,2506,5,
  	178,0,0,2505,2504,1,0,0,0,2505,2506,1,0,0,0,2506,2508,1,0,0,0,2507,2499,
  	1,0,0,0,2508,2511,1,0,0,0,2509,2507,1,0,0,0,2509,2510,1,0,0,0,2510,2512,
  	1,0,0,0,2511,2509,1,0,0,0,2512,2513,5,10,0,0,2513,291,1,0,0,0,2514,2517,
  	3,332,166,0,2515,2517,5,163,0,0,2516,2514,1,0,0,0,2516,2515,1,0,0,0,2517,
  	2519,1,0,0,0,2518,2520,5,178,0,0,2519,2518,1,0,0,0,2519,2520,1,0,0,0,
  	2520,2521,1,0,0,0,2521,2523,5,162,0,0,2522,2524,5,178,0,0,2523,2522,1,
  	0,0,0,2523,2524,1,0,0,0,2524,2525,1,0,0,0,2525,2526,3,228,114,0,2526,
  	293,1,0,0,0,2527,2529,5,2,0,0,2528,2530,5,178,0,0,2529,2528,1,0,0,0,2529,
  	2530,1,0,0,0,2530,2531,1,0,0,0,2531,2533,3,228,114,0,2532,2534,5,178,
  	0,0,2533,2532,1,0,0,0,2533,2534,1,0,0,0,2534,2535,1,0,0,0,2535,2536,5,
  	3,0,0,2536,295,1,0,0,0,2537,2539,5,68,0,0,2538,2540,5,178,0,0,2539,2538,
  	1,0,0,0,2539,2540,1,0,0,0,2540,2541,1,0,0,0,2541,2543,5,2,0,0,2542,2544,
  	5,178,0,0,2543,2542,1,0,0,0,2543,2544,1,0,0,0,2544,2545,1,0,0,0,2545,
  	2547,5,157,0,0,2546,2548,5,178,0,0,2547,2546,1,0,0,0,2547,2548,1,0,0,
  	0,2548,2549,1,0,0,0,2549,2615,5,3,0,0,2550,2552,5,60,0,0,2551,2553,5,
  	178,0,0,2552,2551,1,0,0,0,2552,2553,1,0,0,0,2553,2554,1,0,0,0,2554,2556,
  	5,2,0,0,2555,2557,5,178,0,0,2556,2555,1,0,0,0,2556,2557,1,0,0,0,2557,
  	2558,1,0,0,0,2558,2560,3,300,150,0,2559,2561,5,178,0,0,2560,2559,1,0,
  	0,0,2560,2561,1,0,0,0,2561,2572,1,0,0,0,2562,2564,5,52,0,0,2563,2565,
  	5,178,0,0,2564,2563,1,0,0,0,2564,2565,1,0,0,0,2565,2566,1,0,0,0,2566,
  	2573,3,96,48,0,2567,2569,5,4,0,0,2568,2570,5,178,0,0,2569,2568,1,0,0,
  	0,2569,2570,1,0,0,0,2570,2571,1,0,0,0,2571,2573,3,300,150,0,2572,2562,
  	1,0,0,0,2572,2567,1,0,0,0,2573,2575,1,0,0,0,2574,2576,5,178,0,0,2575,
  	2574,1,0,0,0,2575,2576,1,0,0,0,2576,2577,1,0,0,0,2577,2578,5,3,0,0,2578,
  	2615,1,0,0,0,2579,2581,3,298,149,0,2580,2582,5,178,0,0,2581,2580,1,0,
  	0,0,2581,2582,1,0,0,0,2582,2583,1,0,0,0,2583,2585,5,2,0,0,2584,2586,5,
  	178,0,0,2585,2584,1,0,0,0,2585,2586,1,0,0,0,2586,2591,1,0,0,0,2587,2589,
  	5,78,0,0,2588,2590,5,178,0,0,2589,2588,1,0,0,0,2589,2590,1,0,0,0,2590,
  	2592,1,0,0,0,2591,2587,1,0,0,0,2591,2592,1,0,0,0,2592,2610,1,0,0,0,2593,
  	2595,3,300,150,0,2594,2596,5,178,0,0,2595,2594,1,0,0,0,2595,2596,1,0,
  	0,0,2596,2607,1,0,0,0,2597,2599,5,4,0,0,2598,2600,5,178,0,0,2599,2598,
  	1,0,0,0,2599,2600,1,0,0,0,2600,2601,1,0,0,0,2601,2603,3,300,150,0,2602,
  	2604,5,178,0,0,2603,2602,1,0,0,0,2603,2604,1,0,0,0,2604,2606,1,0,0,0,
  	2605,2597,1,0,0,0,2606,2609,1,0,0,0,2607,2605,1,0,0,0,2607,2608,1,0,0,
  	0,2608,2611,1,0,0,0,2609,2607,1,0,0,0,2610,2593,1,0,0,0,2610,2611,1,0,
  	0,0,2611,2612,1,0,0,0,2612,2613,5,3,0,0,2613,2615,1,0,0,0,2614,2537,1,
  	0,0,0,2614,2550,1,0,0,0,2614,2579,1,0,0,0,2615,297,1,0,0,0,2616,2617,
  	3,332,166,0,2617,299,1,0,0,0,2618,2620,3,332,166,0,2619,2621,5,178,0,
  	0,2620,2619,1,0,0,0,2620,2621,1,0,0,0,2621,2622,1,0,0,0,2622,2623,5,162,
  	0,0,2623,2625,5,6,0,0,2624,2626,5,178,0,0,2625,2624,1,0,0,0,2625,2626,
  	1,0,0,0,2626,2628,1,0,0,0,2627,2618,1,0,0,0,2627,2628,1,0,0,0,2628,2629,
  	1,0,0,0,2629,2632,3,228,114,0,2630,2632,3,302,151,0,2631,2627,1,0,0,0,
  	2631,2630,1,0,0,0,2632,301,1,0,0,0,2633,2635,3,304,152,0,2634,2636,5,
  	178,0,0,2635,2634,1,0,0,0,2635,2636,1,0,0,0,2636,2637,1,0,0,0,2637,2638,
  	5,160,0,0,2638,2640,5,16,0,0,2639,2641,5,178,0,0,2640,2639,1,0,0,0,2640,
  	2641,1,0,0,0,2641,2642,1,0,0,0,2642,2644,3,228,114,0,2643,2645,5,178,
  	0,0,2644,2643,1,0,0,0,2644,2645,1,0,0,0,2645,303,1,0,0,0,2646,2671,3,
  	332,166,0,2647,2649,5,2,0,0,2648,2650,5,178,0,0,2649,2648,1,0,0,0,2649,
  	2650,1,0,0,0,2650,2651,1,0,0,0,2651,2653,3,332,166,0,2652,2654,5,178,
  	0,0,2653,2652,1,0,0,0,2653,2654,1,0,0,0,2654,2665,1,0,0,0,2655,2657,5,
  	4,0,0,2656,2658,5,178,0,0,2657,2656,1,0,0,0,2657,2658,1,0,0,0,2658,2659,
  	1,0,0,0,2659,2661,3,332,166,0,2660,2662,5,178,0,0,2661,2660,1,0,0,0,2661,
  	2662,1,0,0,0,2662,2664,1,0,0,0,2663,2655,1,0,0,0,2664,2667,1,0,0,0,2665,
  	2663,1,0,0,0,2665,2666,1,0,0,0,2666,2668,1,0,0,0,2667,2665,1,0,0,0,2668,
  	2669,5,3,0,0,2669,2671,1,0,0,0,2670,2646,1,0,0,0,2670,2647,1,0,0,0,2671,
  	305,1,0,0,0,2672,2677,3,194,97,0,2673,2675,5,178,0,0,2674,2673,1,0,0,
  	0,2674,2675,1,0,0,0,2675,2676,1,0,0,0,2676,2678,3,196,98,0,2677,2674,
  	1,0,0,0,2678,2679,1,0,0,0,2679,2677,1,0,0,0,2679,2680,1,0,0,0,2680,307,
  	1,0,0,0,2681,2683,7,7,0,0,2682,2684,5,178,0,0,2683,2682,1,0,0,0,2683,
  	2684,1,0,0,0,2684,2685,1,0,0,0,2685,2687,5,9,0,0,2686,2688,5,178,0,0,
  	2687,2686,1,0,0,0,2687,2688,1,0,0,0,2688,2689,1,0,0,0,2689,2691,5,107,
  	0,0,2690,2692,5,178,0,0,2691,2690,1,0,0,0,2691,2692,1,0,0,0,2692,2693,
  	1,0,0,0,2693,2698,3,186,93,0,2694,2696,5,178,0,0,2695,2694,1,0,0,0,2695,
  	2696,1,0,0,0,2696,2697,1,0,0,0,2697,2699,3,184,92,0,2698,2695,1,0,0,0,
  	2698,2699,1,0,0,0,2699,2704,1,0,0,0,2700,2702,5,178,0,0,2701,2700,1,0,
  	0,0,2701,2702,1,0,0,0,2702,2703,1,0,0,0,2703,2705,3,148,74,0,2704,2701,
  	1,0,0,0,2704,2705,1,0,0,0,2705,2707,1,0,0,0,2706,2708,5,178,0,0,2707,
  	2706,1,0,0,0,2707,2708,1,0,0,0,2708,2709,1,0,0,0,2709,2710,5,10,0,0,2710,
  	309,1,0,0,0,2711,2713,5,5,0,0,2712,2714,5,178,0,0,2713,2712,1,0,0,0,2713,
  	2714,1,0,0,0,2714,2717,1,0,0,0,2715,2718,3,324,162,0,2716,2718,5,157,
  	0,0,2717,2715,1,0,0,0,2717,2716,1,0,0,0,2718,311,1,0,0,0,2719,2724,5,
  	59,0,0,2720,2722,5,178,0,0,2721,2720,1,0,0,0,2721,2722,1,0,0,0,2722,2723,
  	1,0,0,0,2723,2725,3,314,157,0,2724,2721,1,0,0,0,2725,2726,1,0,0,0,2726,
  	2724,1,0,0,0,2726,2727,1,0,0,0,2727,2742,1,0,0,0,2728,2730,5,59,0,0,2729,
  	2731,5,178,0,0,2730,2729,1,0,0,0,2730,2731,1,0,0,0,2731,2732,1,0,0,0,
  	2732,2737,3,228,114,0,2733,2735,5,178,0,0,2734,2733,1,0,0,0,2734,2735,
  	1,0,0,0,2735,2736,1,0,0,0,2736,2738,3,314,157,0,2737,2734,1,0,0,0,2738,
  	2739,1,0,0,0,2739,2737,1,0,0,0,2739,2740,1,0,0,0,2740,2742,1,0,0,0,2741,
  	2719,1,0,0,0,2741,2728,1,0,0,0,2742,2751,1,0,0,0,2743,2745,5,178,0,0,
  	2744,2743,1,0,0,0,2744,2745,1,0,0,0,2745,2746,1,0,0,0,2746,2748,5,80,
  	0,0,2747,2749,5,178,0,0,2748,2747,1,0,0,0,2748,2749,1,0,0,0,2749,2750,
  	1,0,0,0,2750,2752,3,228,114,0,2751,2744,1,0,0,0,2751,2752,1,0,0,0,2752,
  	2754,1,0,0,0,2753,2755,5,178,0,0,2754,2753,1,0,0,0,2754,2755,1,0,0,0,
  	2755,2756,1,0,0,0,2756,2757,5,81,0,0,2757,313,1,0,0,0,2758,2760,5,148,
  	0,0,2759,2761,5,178,0,0,2760,2759,1,0,0,0,2760,2761,1,0,0,0,2761,2762,
  	1,0,0,0,2762,2764,3,228,114,0,2763,2765,5,178,0,0,2764,2763,1,0,0,0,2764,
  	2765,1,0,0,0,2765,2766,1,0,0,0,2766,2768,5,137,0,0,2767,2769,5,178,0,
  	0,2768,2767,1,0,0,0,2768,2769,1,0,0,0,2769,2770,1,0,0,0,2770,2771,3,228,
  	114,0,2771,315,1,0,0,0,2772,2773,3,332,166,0,2773,317,1,0,0,0,2774,2777,
  	3,328,164,0,2775,2777,3,326,163,0,2776,2774,1,0,0,0,2776,2775,1,0,0,0,
  	2777,319,1,0,0,0,2778,2781,5,26,0,0,2779,2782,3,332,166,0,2780,2782,5,
  	165,0,0,2781,2779,1,0,0,0,2781,2780,1,0,0,0,2782,321,1,0,0,0,2783,2785,
  	3,274,137,0,2784,2786,5,178,0,0,2785,2784,1,0,0,0,2785,2786,1,0,0,0,2786,
  	2787,1,0,0,0,2787,2788,3,310,155,0,2788,323,1,0,0,0,2789,2790,3,330,165,
  	0,2790,325,1,0,0,0,2791,2792,5,165,0,0,2792,327,1,0,0,0,2793,2794,7,8,
  	0,0,2794,329,1,0,0,0,2795,2796,3,332,166,0,2796,331,1,0,0,0,2797,2803,
  	5,174,0,0,2798,2799,5,177,0,0,2799,2803,6,166,-1,0,2800,2803,5,166,0,
  	0,2801,2803,3,334,167,0,2802,2797,1,0,0,0,2802,2798,1,0,0,0,2802,2800,
  	1,0,0,0,2802,2801,1,0,0,0,2803,333,1,0,0,0,2804,2805,7,9,0,0,2805,335,
  	1,0,0,0,2806,2807,7,10,0,0,2807,337,1,0,0,0,2808,2809,7,11,0,0,2809,339,
  	1,0,0,0,2810,2811,7,12,0,0,2811,341,1,0,0,0,485,344,348,353,357,362,365,
  	369,372,394,400,407,411,415,419,422,426,430,434,439,443,445,452,456,465,
  	470,480,484,488,493,506,510,518,522,526,530,538,542,546,550,565,570,576,
  	580,583,586,592,596,601,604,609,613,617,622,637,641,648,668,672,675,678,
  	681,684,688,693,697,707,711,716,721,726,732,736,740,745,752,756,760,763,
  	780,784,788,792,796,799,802,809,812,816,818,827,831,836,840,844,848,852,
  	854,858,862,864,870,874,878,882,886,890,895,913,920,933,940,946,949,959,
  	962,970,973,979,982,988,1003,1019,1026,1033,1044,1064,1068,1073,1082,
  	1086,1091,1097,1103,1109,1113,1117,1125,1129,1133,1139,1143,1147,1153,
  	1157,1161,1165,1169,1175,1179,1183,1187,1191,1195,1201,1208,1213,1219,
  	1224,1241,1247,1253,1257,1261,1270,1284,1289,1294,1298,1303,1309,1314,
  	1317,1321,1325,1329,1335,1339,1344,1349,1353,1356,1358,1362,1366,1372,
  	1376,1381,1385,1394,1400,1408,1412,1416,1420,1427,1431,1435,1439,1442,
  	1445,1452,1458,1462,1467,1474,1477,1480,1485,1489,1493,1498,1502,1511,
  	1515,1520,1534,1536,1538,1543,1553,1559,1566,1579,1583,1587,1591,1596,
  	1601,1605,1611,1615,1619,1623,1628,1634,1637,1643,1646,1652,1656,1660,
  	1664,1668,1673,1678,1682,1687,1690,1699,1708,1713,1726,1729,1737,1741,
  	1746,1751,1755,1760,1766,1771,1778,1782,1786,1788,1792,1794,1798,1800,
  	1806,1812,1816,1819,1822,1828,1831,1834,1838,1844,1847,1850,1854,1858,
  	1862,1864,1868,1870,1874,1876,1880,1882,1888,1892,1896,1900,1904,1908,
  	1912,1916,1920,1923,1929,1933,1937,1940,1945,1950,1955,1960,1966,1969,
  	1972,1975,1978,1981,1985,1989,1993,1997,2007,2010,2013,2017,2020,2023,
  	2027,2031,2035,2039,2043,2047,2049,2052,2056,2060,2064,2068,2070,2076,
  	2079,2082,2103,2113,2123,2128,2132,2139,2143,2147,2151,2155,2163,2167,
  	2171,2175,2181,2185,2191,2195,2200,2205,2209,2214,2219,2223,2229,2236,
  	2240,2246,2253,2257,2263,2270,2274,2279,2284,2288,2293,2296,2303,2306,
  	2311,2320,2324,2327,2340,2343,2348,2362,2366,2371,2383,2387,2391,2395,
  	2401,2405,2409,2415,2419,2423,2429,2433,2437,2441,2459,2465,2469,2473,
  	2477,2480,2486,2489,2493,2497,2501,2505,2509,2516,2519,2523,2529,2533,
  	2539,2543,2547,2552,2556,2560,2564,2569,2572,2575,2581,2585,2589,2591,
  	2595,2599,2603,2607,2610,2614,2620,2625,2627,2631,2635,2640,2644,2649,
  	2653,2657,2661,2665,2670,2674,2679,2683,2687,2691,2695,2698,2701,2704,
  	2707,2713,2717,2721,2726,2730,2734,2739,2741,2744,2748,2751,2754,2760,
  	2764,2768,2776,2781,2785,2802
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cypherParserStaticData = staticData.release();
}

}

CypherParser::CypherParser(TokenStream *input) : CypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CypherParser::CypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  CypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *cypherParserStaticData->atn, cypherParserStaticData->decisionToDFA, cypherParserStaticData->sharedContextCache, options);
}

CypherParser::~CypherParser() {
  delete _interpreter;
}

const atn::ATN& CypherParser::getATN() const {
  return *cypherParserStaticData->atn;
}

std::string CypherParser::getGrammarFileName() const {
  return "Cypher.g4";
}

const std::vector<std::string>& CypherParser::getRuleNames() const {
  return cypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& CypherParser::getVocabulary() const {
  return cypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CypherParser::getSerializedATN() const {
  return cypherParserStaticData->serializedATN;
}


//----------------- Ku_StatementsContext ------------------------------------------------------------------

CypherParser::Ku_StatementsContext::Ku_StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_CypherContext *> CypherParser::Ku_StatementsContext::oC_Cypher() {
  return getRuleContexts<CypherParser::OC_CypherContext>();
}

CypherParser::OC_CypherContext* CypherParser::Ku_StatementsContext::oC_Cypher(size_t i) {
  return getRuleContext<CypherParser::OC_CypherContext>(i);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::EOF() {
  return getToken(CypherParser::EOF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::Ku_StatementsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::Ku_StatementsContext::getRuleIndex() const {
  return CypherParser::RuleKu_Statements;
}


CypherParser::Ku_StatementsContext* CypherParser::ku_Statements() {
  Ku_StatementsContext *_localctx = _tracker.createInstance<Ku_StatementsContext>(_ctx, getState());
  enterRule(_localctx, 0, CypherParser::RuleKu_Statements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(342);
    oC_Cypher();
    setState(353);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(344);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(343);
          match(CypherParser::SP);
        }
        setState(346);
        match(CypherParser::T__0);
        setState(348);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
        case 1: {
          setState(347);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(350);
        oC_Cypher(); 
      }
      setState(355);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    }
    setState(357);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(356);
      match(CypherParser::SP);
    }
    setState(359);
    match(CypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CypherContext ------------------------------------------------------------------

CypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StatementContext* CypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<CypherParser::OC_StatementContext>(0);
}

CypherParser::OC_AnyCypherOptionContext* CypherParser::OC_CypherContext::oC_AnyCypherOption() {
  return getRuleContext<CypherParser::OC_AnyCypherOptionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CypherContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CypherContext::getRuleIndex() const {
  return CypherParser::RuleOC_Cypher;
}


CypherParser::OC_CypherContext* CypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 2, CypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(362);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::EXPLAIN

    || _la == CypherParser::PROFILE) {
      setState(361);
      oC_AnyCypherOption();
    }
    setState(365);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(364);
      match(CypherParser::SP);
    }

    setState(367);
    oC_Statement();
    setState(372);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(369);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(368);
        match(CypherParser::SP);
      }
      setState(371);
      match(CypherParser::T__0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

CypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_QueryContext* CypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

CypherParser::KU_CreateNodeTableContext* CypherParser::OC_StatementContext::kU_CreateNodeTable() {
  return getRuleContext<CypherParser::KU_CreateNodeTableContext>(0);
}

CypherParser::KU_CreateRelTableContext* CypherParser::OC_StatementContext::kU_CreateRelTable() {
  return getRuleContext<CypherParser::KU_CreateRelTableContext>(0);
}

CypherParser::KU_CreateSequenceContext* CypherParser::OC_StatementContext::kU_CreateSequence() {
  return getRuleContext<CypherParser::KU_CreateSequenceContext>(0);
}

CypherParser::KU_CreateTypeContext* CypherParser::OC_StatementContext::kU_CreateType() {
  return getRuleContext<CypherParser::KU_CreateTypeContext>(0);
}

CypherParser::KU_DropContext* CypherParser::OC_StatementContext::kU_Drop() {
  return getRuleContext<CypherParser::KU_DropContext>(0);
}

CypherParser::KU_AlterTableContext* CypherParser::OC_StatementContext::kU_AlterTable() {
  return getRuleContext<CypherParser::KU_AlterTableContext>(0);
}

CypherParser::KU_CopyFromContext* CypherParser::OC_StatementContext::kU_CopyFrom() {
  return getRuleContext<CypherParser::KU_CopyFromContext>(0);
}

CypherParser::KU_CopyFromByColumnContext* CypherParser::OC_StatementContext::kU_CopyFromByColumn() {
  return getRuleContext<CypherParser::KU_CopyFromByColumnContext>(0);
}

CypherParser::KU_CopyTOContext* CypherParser::OC_StatementContext::kU_CopyTO() {
  return getRuleContext<CypherParser::KU_CopyTOContext>(0);
}

CypherParser::KU_StandaloneCallContext* CypherParser::OC_StatementContext::kU_StandaloneCall() {
  return getRuleContext<CypherParser::KU_StandaloneCallContext>(0);
}

CypherParser::KU_CreateMacroContext* CypherParser::OC_StatementContext::kU_CreateMacro() {
  return getRuleContext<CypherParser::KU_CreateMacroContext>(0);
}

CypherParser::KU_CommentOnContext* CypherParser::OC_StatementContext::kU_CommentOn() {
  return getRuleContext<CypherParser::KU_CommentOnContext>(0);
}

CypherParser::KU_TransactionContext* CypherParser::OC_StatementContext::kU_Transaction() {
  return getRuleContext<CypherParser::KU_TransactionContext>(0);
}

CypherParser::KU_ExtensionContext* CypherParser::OC_StatementContext::kU_Extension() {
  return getRuleContext<CypherParser::KU_ExtensionContext>(0);
}

CypherParser::KU_ExportDatabaseContext* CypherParser::OC_StatementContext::kU_ExportDatabase() {
  return getRuleContext<CypherParser::KU_ExportDatabaseContext>(0);
}

CypherParser::KU_ImportDatabaseContext* CypherParser::OC_StatementContext::kU_ImportDatabase() {
  return getRuleContext<CypherParser::KU_ImportDatabaseContext>(0);
}

CypherParser::KU_AttachDatabaseContext* CypherParser::OC_StatementContext::kU_AttachDatabase() {
  return getRuleContext<CypherParser::KU_AttachDatabaseContext>(0);
}

CypherParser::KU_DetachDatabaseContext* CypherParser::OC_StatementContext::kU_DetachDatabase() {
  return getRuleContext<CypherParser::KU_DetachDatabaseContext>(0);
}

CypherParser::KU_UseDatabaseContext* CypherParser::OC_StatementContext::kU_UseDatabase() {
  return getRuleContext<CypherParser::KU_UseDatabaseContext>(0);
}


size_t CypherParser::OC_StatementContext::getRuleIndex() const {
  return CypherParser::RuleOC_Statement;
}


CypherParser::OC_StatementContext* CypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, CypherParser::RuleOC_Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(394);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(374);
      oC_Query();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(375);
      kU_CreateNodeTable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(376);
      kU_CreateRelTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(377);
      kU_CreateSequence();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(378);
      kU_CreateType();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(379);
      kU_Drop();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(380);
      kU_AlterTable();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(381);
      kU_CopyFrom();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(382);
      kU_CopyFromByColumn();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(383);
      kU_CopyTO();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(384);
      kU_StandaloneCall();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(385);
      kU_CreateMacro();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(386);
      kU_CommentOn();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(387);
      kU_Transaction();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(388);
      kU_Extension();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(389);
      kU_ExportDatabase();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(390);
      kU_ImportDatabase();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(391);
      kU_AttachDatabase();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(392);
      kU_DetachDatabase();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(393);
      kU_UseDatabase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromContext ------------------------------------------------------------------

CypherParser::KU_CopyFromContext::KU_CopyFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_CopyFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

CypherParser::KU_ColumnNamesContext* CypherParser::KU_CopyFromContext::kU_ColumnNames() {
  return getRuleContext<CypherParser::KU_ColumnNamesContext>(0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_CopyFromContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}


size_t CypherParser::KU_CopyFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFrom;
}


CypherParser::KU_CopyFromContext* CypherParser::kU_CopyFrom() {
  KU_CopyFromContext *_localctx = _tracker.createInstance<KU_CopyFromContext>(_ctx, getState());
  enterRule(_localctx, 6, CypherParser::RuleKU_CopyFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(396);
    match(CypherParser::COPY);
    setState(397);
    match(CypherParser::SP);
    setState(398);
    oC_SchemaName();
    setState(400);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      setState(399);
      kU_ColumnNames();
      break;
    }

    default:
      break;
    }
    setState(402);
    match(CypherParser::SP);
    setState(403);
    match(CypherParser::FROM);
    setState(404);
    match(CypherParser::SP);
    setState(405);
    kU_ScanSource();
    setState(419);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      setState(407);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(406);
        match(CypherParser::SP);
      }
      setState(409);
      match(CypherParser::T__1);
      setState(411);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(410);
        match(CypherParser::SP);
      }
      setState(413);
      kU_Options();
      setState(415);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(414);
        match(CypherParser::SP);
      }
      setState(417);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnNamesContext ------------------------------------------------------------------

CypherParser::KU_ColumnNamesContext::KU_ColumnNamesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_ColumnNamesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ColumnNamesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_ColumnNamesContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ColumnNamesContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}


size_t CypherParser::KU_ColumnNamesContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnNames;
}


CypherParser::KU_ColumnNamesContext* CypherParser::kU_ColumnNames() {
  KU_ColumnNamesContext *_localctx = _tracker.createInstance<KU_ColumnNamesContext>(_ctx, getState());
  enterRule(_localctx, 8, CypherParser::RuleKU_ColumnNames);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(422);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(421);
      match(CypherParser::SP);
    }
    setState(424);
    match(CypherParser::T__1);
    setState(426);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(425);
      match(CypherParser::SP);
    }
    setState(445);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -6371186097845698560) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1151940922579049251) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 633595061228635) != 0)) {
      setState(428);
      oC_SchemaName();
      setState(439);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(430);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(429);
            match(CypherParser::SP);
          }
          setState(432);
          match(CypherParser::T__3);
          setState(434);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(433);
            match(CypherParser::SP);
          }
          setState(436);
          oC_SchemaName(); 
        }
        setState(441);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx);
      }
      setState(443);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(442);
        match(CypherParser::SP);
      }
    }
    setState(447);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ScanSourceContext ------------------------------------------------------------------

CypherParser::KU_ScanSourceContext::KU_ScanSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_FilePathsContext* CypherParser::KU_ScanSourceContext::kU_FilePaths() {
  return getRuleContext<CypherParser::KU_FilePathsContext>(0);
}

CypherParser::OC_QueryContext* CypherParser::KU_ScanSourceContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ScanSourceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ScanSourceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ParameterContext* CypherParser::KU_ScanSourceContext::oC_Parameter() {
  return getRuleContext<CypherParser::OC_ParameterContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::KU_ScanSourceContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ScanSourceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::KU_ScanSourceContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}


size_t CypherParser::KU_ScanSourceContext::getRuleIndex() const {
  return CypherParser::RuleKU_ScanSource;
}


CypherParser::KU_ScanSourceContext* CypherParser::kU_ScanSource() {
  KU_ScanSourceContext *_localctx = _tracker.createInstance<KU_ScanSourceContext>(_ctx, getState());
  enterRule(_localctx, 10, CypherParser::RuleKU_ScanSource);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(470);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(449);
      kU_FilePaths();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(450);
      match(CypherParser::T__1);
      setState(452);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(451);
        match(CypherParser::SP);
      }
      setState(454);
      oC_Query();
      setState(456);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(455);
        match(CypherParser::SP);
      }
      setState(458);
      match(CypherParser::T__2);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(460);
      oC_Parameter();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(461);
      oC_Variable();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(462);
      oC_Variable();
      setState(463);
      match(CypherParser::T__4);
      setState(465);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(464);
        match(CypherParser::SP);
      }
      setState(467);
      oC_SchemaName();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(469);
      oC_FunctionInvocation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromByColumnContext ------------------------------------------------------------------

CypherParser::KU_CopyFromByColumnContext::KU_CopyFromByColumnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromByColumnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COLUMN() {
  return getToken(CypherParser::COLUMN, 0);
}


size_t CypherParser::KU_CopyFromByColumnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFromByColumn;
}


CypherParser::KU_CopyFromByColumnContext* CypherParser::kU_CopyFromByColumn() {
  KU_CopyFromByColumnContext *_localctx = _tracker.createInstance<KU_CopyFromByColumnContext>(_ctx, getState());
  enterRule(_localctx, 12, CypherParser::RuleKU_CopyFromByColumn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(472);
    match(CypherParser::COPY);
    setState(473);
    match(CypherParser::SP);
    setState(474);
    oC_SchemaName();
    setState(475);
    match(CypherParser::SP);
    setState(476);
    match(CypherParser::FROM);
    setState(477);
    match(CypherParser::SP);
    setState(478);
    match(CypherParser::T__1);
    setState(480);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(479);
      match(CypherParser::SP);
    }
    setState(482);
    match(CypherParser::StringLiteral);
    setState(493);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__3 || _la == CypherParser::SP) {
      setState(484);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(483);
        match(CypherParser::SP);
      }
      setState(486);
      match(CypherParser::T__3);
      setState(488);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(487);
        match(CypherParser::SP);
      }
      setState(490);
      match(CypherParser::StringLiteral);
      setState(495);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(496);
    match(CypherParser::T__2);
    setState(497);
    match(CypherParser::SP);
    setState(498);
    match(CypherParser::BY);
    setState(499);
    match(CypherParser::SP);
    setState(500);
    match(CypherParser::COLUMN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyTOContext ------------------------------------------------------------------

CypherParser::KU_CopyTOContext::KU_CopyTOContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyTOContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_QueryContext* CypherParser::KU_CopyTOContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::TO() {
  return getToken(CypherParser::TO, 0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_CopyTOContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}


size_t CypherParser::KU_CopyTOContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyTO;
}


CypherParser::KU_CopyTOContext* CypherParser::kU_CopyTO() {
  KU_CopyTOContext *_localctx = _tracker.createInstance<KU_CopyTOContext>(_ctx, getState());
  enterRule(_localctx, 14, CypherParser::RuleKU_CopyTO);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(502);
    match(CypherParser::COPY);
    setState(503);
    match(CypherParser::SP);
    setState(504);
    match(CypherParser::T__1);
    setState(506);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(505);
      match(CypherParser::SP);
    }
    setState(508);
    oC_Query();
    setState(510);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(509);
      match(CypherParser::SP);
    }
    setState(512);
    match(CypherParser::T__2);
    setState(513);
    match(CypherParser::SP);
    setState(514);
    match(CypherParser::TO);
    setState(515);
    match(CypherParser::SP);
    setState(516);
    match(CypherParser::StringLiteral);
    setState(530);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      setState(518);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(517);
        match(CypherParser::SP);
      }
      setState(520);
      match(CypherParser::T__1);
      setState(522);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(521);
        match(CypherParser::SP);
      }
      setState(524);
      kU_Options();
      setState(526);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(525);
        match(CypherParser::SP);
      }
      setState(528);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ExportDatabaseContext::KU_ExportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ExportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_ExportDatabaseContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}


size_t CypherParser::KU_ExportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ExportDatabase;
}


CypherParser::KU_ExportDatabaseContext* CypherParser::kU_ExportDatabase() {
  KU_ExportDatabaseContext *_localctx = _tracker.createInstance<KU_ExportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 16, CypherParser::RuleKU_ExportDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(532);
    match(CypherParser::EXPORT);
    setState(533);
    match(CypherParser::SP);
    setState(534);
    match(CypherParser::DATABASE);
    setState(535);
    match(CypherParser::SP);
    setState(536);
    match(CypherParser::StringLiteral);
    setState(550);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      setState(538);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(537);
        match(CypherParser::SP);
      }
      setState(540);
      match(CypherParser::T__1);
      setState(542);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(541);
        match(CypherParser::SP);
      }
      setState(544);
      kU_Options();
      setState(546);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(545);
        match(CypherParser::SP);
      }
      setState(548);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ImportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ImportDatabaseContext::KU_ImportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ImportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_ImportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ImportDatabase;
}


CypherParser::KU_ImportDatabaseContext* CypherParser::kU_ImportDatabase() {
  KU_ImportDatabaseContext *_localctx = _tracker.createInstance<KU_ImportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 18, CypherParser::RuleKU_ImportDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(552);
    match(CypherParser::IMPORT);
    setState(553);
    match(CypherParser::SP);
    setState(554);
    match(CypherParser::DATABASE);
    setState(555);
    match(CypherParser::SP);
    setState(556);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AttachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_AttachDatabaseContext::KU_AttachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::ATTACH() {
  return getToken(CypherParser::ATTACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AttachDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::DBTYPE() {
  return getToken(CypherParser::DBTYPE, 0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_AttachDatabaseContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AttachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_AttachDatabaseContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}


size_t CypherParser::KU_AttachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_AttachDatabase;
}


CypherParser::KU_AttachDatabaseContext* CypherParser::kU_AttachDatabase() {
  KU_AttachDatabaseContext *_localctx = _tracker.createInstance<KU_AttachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 20, CypherParser::RuleKU_AttachDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(558);
    match(CypherParser::ATTACH);
    setState(559);
    match(CypherParser::SP);
    setState(560);
    match(CypherParser::StringLiteral);
    setState(565);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      setState(561);
      match(CypherParser::SP);
      setState(562);
      match(CypherParser::AS);
      setState(563);
      match(CypherParser::SP);
      setState(564);
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
    setState(567);
    match(CypherParser::SP);
    setState(568);
    match(CypherParser::T__1);
    setState(570);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(569);
      match(CypherParser::SP);
    }
    setState(572);
    match(CypherParser::DBTYPE);
    setState(573);
    match(CypherParser::SP);
    setState(574);
    oC_SymbolicName();
    setState(583);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      setState(576);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(575);
        match(CypherParser::SP);
      }
      setState(578);
      match(CypherParser::T__3);
      setState(580);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(579);
        match(CypherParser::SP);
      }
      setState(582);
      kU_Options();
      break;
    }

    default:
      break;
    }
    setState(586);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(585);
      match(CypherParser::SP);
    }
    setState(588);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionContext ------------------------------------------------------------------

CypherParser::KU_OptionContext::KU_OptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_OptionContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_OptionContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Option;
}


CypherParser::KU_OptionContext* CypherParser::kU_Option() {
  KU_OptionContext *_localctx = _tracker.createInstance<KU_OptionContext>(_ctx, getState());
  enterRule(_localctx, 22, CypherParser::RuleKU_Option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(609);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(590);
      oC_SymbolicName();
      setState(604);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
      case 1: {
        setState(592);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(591);
          match(CypherParser::SP);
        }
        setState(594);
        match(CypherParser::T__5);
        setState(596);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(595);
          match(CypherParser::SP);
        }
        break;
      }

      case 2: {
        setState(601);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::SP) {
          setState(598);
          match(CypherParser::SP);
          setState(603);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      default:
        break;
      }
      setState(606);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(608);
      oC_SymbolicName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionsContext ------------------------------------------------------------------

CypherParser::KU_OptionsContext::KU_OptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_OptionContext *> CypherParser::KU_OptionsContext::kU_Option() {
  return getRuleContexts<CypherParser::KU_OptionContext>();
}

CypherParser::KU_OptionContext* CypherParser::KU_OptionsContext::kU_Option(size_t i) {
  return getRuleContext<CypherParser::KU_OptionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_Options;
}


CypherParser::KU_OptionsContext* CypherParser::kU_Options() {
  KU_OptionsContext *_localctx = _tracker.createInstance<KU_OptionsContext>(_ctx, getState());
  enterRule(_localctx, 24, CypherParser::RuleKU_Options);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(611);
    kU_Option();
    setState(622);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(613);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(612);
          match(CypherParser::SP);
        }
        setState(615);
        match(CypherParser::T__3);
        setState(617);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(616);
          match(CypherParser::SP);
        }
        setState(619);
        kU_Option(); 
      }
      setState(624);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DetachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_DetachDatabaseContext::KU_DetachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DetachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_DetachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_DetachDatabase;
}


CypherParser::KU_DetachDatabaseContext* CypherParser::kU_DetachDatabase() {
  KU_DetachDatabaseContext *_localctx = _tracker.createInstance<KU_DetachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 26, CypherParser::RuleKU_DetachDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(625);
    match(CypherParser::DETACH);
    setState(626);
    match(CypherParser::SP);
    setState(627);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_UseDatabaseContext ------------------------------------------------------------------

CypherParser::KU_UseDatabaseContext::KU_UseDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_UseDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_UseDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_UseDatabase;
}


CypherParser::KU_UseDatabaseContext* CypherParser::kU_UseDatabase() {
  KU_UseDatabaseContext *_localctx = _tracker.createInstance<KU_UseDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 28, CypherParser::RuleKU_UseDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(629);
    match(CypherParser::USE);
    setState(630);
    match(CypherParser::SP);
    setState(631);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StandaloneCallContext ------------------------------------------------------------------

CypherParser::KU_StandaloneCallContext::KU_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StandaloneCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StandaloneCallContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StandaloneCallContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::KU_StandaloneCallContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}


size_t CypherParser::KU_StandaloneCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_StandaloneCall;
}


CypherParser::KU_StandaloneCallContext* CypherParser::kU_StandaloneCall() {
  KU_StandaloneCallContext *_localctx = _tracker.createInstance<KU_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 30, CypherParser::RuleKU_StandaloneCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(648);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(633);
      match(CypherParser::CALL);
      setState(634);
      match(CypherParser::SP);
      setState(635);
      oC_SymbolicName();
      setState(637);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(636);
        match(CypherParser::SP);
      }
      setState(639);
      match(CypherParser::T__5);
      setState(641);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(640);
        match(CypherParser::SP);
      }
      setState(643);
      oC_Expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(645);
      match(CypherParser::CALL);
      setState(646);
      match(CypherParser::SP);
      setState(647);
      oC_FunctionInvocation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CommentOnContext ------------------------------------------------------------------

CypherParser::KU_CommentOnContext::KU_CommentOnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::COMMENT() {
  return getToken(CypherParser::COMMENT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CommentOnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::ON() {
  return getToken(CypherParser::ON, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CommentOnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_CommentOnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CommentOn;
}


CypherParser::KU_CommentOnContext* CypherParser::kU_CommentOn() {
  KU_CommentOnContext *_localctx = _tracker.createInstance<KU_CommentOnContext>(_ctx, getState());
  enterRule(_localctx, 32, CypherParser::RuleKU_CommentOn);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(650);
    match(CypherParser::COMMENT);
    setState(651);
    match(CypherParser::SP);
    setState(652);
    match(CypherParser::ON);
    setState(653);
    match(CypherParser::SP);
    setState(654);
    match(CypherParser::TABLE);
    setState(655);
    match(CypherParser::SP);
    setState(656);
    oC_SchemaName();
    setState(657);
    match(CypherParser::SP);
    setState(658);
    match(CypherParser::IS);
    setState(659);
    match(CypherParser::SP);
    setState(660);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateMacroContext ------------------------------------------------------------------

CypherParser::KU_CreateMacroContext::KU_CreateMacroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateMacroContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::MACRO() {
  return getToken(CypherParser::MACRO, 0);
}

CypherParser::OC_FunctionNameContext* CypherParser::KU_CreateMacroContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_CreateMacroContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::KU_PositionalArgsContext* CypherParser::KU_CreateMacroContext::kU_PositionalArgs() {
  return getRuleContext<CypherParser::KU_PositionalArgsContext>(0);
}

std::vector<CypherParser::KU_DefaultArgContext *> CypherParser::KU_CreateMacroContext::kU_DefaultArg() {
  return getRuleContexts<CypherParser::KU_DefaultArgContext>();
}

CypherParser::KU_DefaultArgContext* CypherParser::KU_CreateMacroContext::kU_DefaultArg(size_t i) {
  return getRuleContext<CypherParser::KU_DefaultArgContext>(i);
}


size_t CypherParser::KU_CreateMacroContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateMacro;
}


CypherParser::KU_CreateMacroContext* CypherParser::kU_CreateMacro() {
  KU_CreateMacroContext *_localctx = _tracker.createInstance<KU_CreateMacroContext>(_ctx, getState());
  enterRule(_localctx, 34, CypherParser::RuleKU_CreateMacro);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(662);
    match(CypherParser::CREATE);
    setState(663);
    match(CypherParser::SP);
    setState(664);
    match(CypherParser::MACRO);
    setState(665);
    match(CypherParser::SP);
    setState(666);
    oC_FunctionName();
    setState(668);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(667);
      match(CypherParser::SP);
    }
    setState(670);
    match(CypherParser::T__1);
    setState(672);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      setState(671);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(675);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      setState(674);
      kU_PositionalArgs();
      break;
    }

    default:
      break;
    }
    setState(678);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      setState(677);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(681);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -6371186097845698560) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1151940922579049251) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 633595061228635) != 0)) {
      setState(680);
      kU_DefaultArg();
    }
    setState(693);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(684);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(683);
          match(CypherParser::SP);
        }
        setState(686);
        match(CypherParser::T__3);
        setState(688);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(687);
          match(CypherParser::SP);
        }
        setState(690);
        kU_DefaultArg(); 
      }
      setState(695);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
    }
    setState(697);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(696);
      match(CypherParser::SP);
    }
    setState(699);
    match(CypherParser::T__2);
    setState(700);
    match(CypherParser::SP);
    setState(701);
    match(CypherParser::AS);
    setState(702);
    match(CypherParser::SP);
    setState(703);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PositionalArgsContext ------------------------------------------------------------------

CypherParser::KU_PositionalArgsContext::KU_PositionalArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_PositionalArgsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_PositionalArgsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PositionalArgsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PositionalArgsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PositionalArgsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PositionalArgs;
}


CypherParser::KU_PositionalArgsContext* CypherParser::kU_PositionalArgs() {
  KU_PositionalArgsContext *_localctx = _tracker.createInstance<KU_PositionalArgsContext>(_ctx, getState());
  enterRule(_localctx, 36, CypherParser::RuleKU_PositionalArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(705);
    oC_SymbolicName();
    setState(716);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(707);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(706);
          match(CypherParser::SP);
        }
        setState(709);
        match(CypherParser::T__3);
        setState(711);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(710);
          match(CypherParser::SP);
        }
        setState(713);
        oC_SymbolicName(); 
      }
      setState(718);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultArgContext ------------------------------------------------------------------

CypherParser::KU_DefaultArgContext::KU_DefaultArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DefaultArgContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_DefaultArgContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DefaultArgContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_DefaultArgContext::getRuleIndex() const {
  return CypherParser::RuleKU_DefaultArg;
}


CypherParser::KU_DefaultArgContext* CypherParser::kU_DefaultArg() {
  KU_DefaultArgContext *_localctx = _tracker.createInstance<KU_DefaultArgContext>(_ctx, getState());
  enterRule(_localctx, 38, CypherParser::RuleKU_DefaultArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(719);
    oC_SymbolicName();
    setState(721);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(720);
      match(CypherParser::SP);
    }
    setState(723);
    match(CypherParser::COLON);
    setState(724);
    match(CypherParser::T__5);
    setState(726);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(725);
      match(CypherParser::SP);
    }
    setState(728);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FilePathsContext ------------------------------------------------------------------

CypherParser::KU_FilePathsContext::KU_FilePathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::GLOB() {
  return getToken(CypherParser::GLOB, 0);
}


size_t CypherParser::KU_FilePathsContext::getRuleIndex() const {
  return CypherParser::RuleKU_FilePaths;
}


CypherParser::KU_FilePathsContext* CypherParser::kU_FilePaths() {
  KU_FilePathsContext *_localctx = _tracker.createInstance<KU_FilePathsContext>(_ctx, getState());
  enterRule(_localctx, 40, CypherParser::RuleKU_FilePaths);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(763);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 1);
        setState(730);
        match(CypherParser::T__6);
        setState(732);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(731);
          match(CypherParser::SP);
        }
        setState(734);
        match(CypherParser::StringLiteral);
        setState(745);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__3 || _la == CypherParser::SP) {
          setState(736);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(735);
            match(CypherParser::SP);
          }
          setState(738);
          match(CypherParser::T__3);
          setState(740);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(739);
            match(CypherParser::SP);
          }
          setState(742);
          match(CypherParser::StringLiteral);
          setState(747);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(748);
        match(CypherParser::T__7);
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(749);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::GLOB: {
        enterOuterAlt(_localctx, 3);
        setState(750);
        match(CypherParser::GLOB);
        setState(752);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(751);
          match(CypherParser::SP);
        }
        setState(754);
        match(CypherParser::T__1);
        setState(756);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(755);
          match(CypherParser::SP);
        }
        setState(758);
        match(CypherParser::StringLiteral);
        setState(760);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(759);
          match(CypherParser::SP);
        }
        setState(762);
        match(CypherParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IfNotExistsContext ------------------------------------------------------------------

CypherParser::KU_IfNotExistsContext::KU_IfNotExistsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::IF() {
  return getToken(CypherParser::IF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_IfNotExistsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}


size_t CypherParser::KU_IfNotExistsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IfNotExists;
}


CypherParser::KU_IfNotExistsContext* CypherParser::kU_IfNotExists() {
  KU_IfNotExistsContext *_localctx = _tracker.createInstance<KU_IfNotExistsContext>(_ctx, getState());
  enterRule(_localctx, 42, CypherParser::RuleKU_IfNotExists);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(765);
    match(CypherParser::IF);
    setState(766);
    match(CypherParser::SP);
    setState(767);
    match(CypherParser::NOT);
    setState(768);
    match(CypherParser::SP);
    setState(769);
    match(CypherParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeTableContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeTableContext::KU_CreateNodeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateNodeTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateNodeTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_QueryContext* CypherParser::KU_CreateNodeTableContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateNodeTableContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

CypherParser::KU_CreateNodeConstraintContext* CypherParser::KU_CreateNodeTableContext::kU_CreateNodeConstraint() {
  return getRuleContext<CypherParser::KU_CreateNodeConstraintContext>(0);
}


size_t CypherParser::KU_CreateNodeTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeTable;
}


CypherParser::KU_CreateNodeTableContext* CypherParser::kU_CreateNodeTable() {
  KU_CreateNodeTableContext *_localctx = _tracker.createInstance<KU_CreateNodeTableContext>(_ctx, getState());
  enterRule(_localctx, 44, CypherParser::RuleKU_CreateNodeTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(771);
    match(CypherParser::CREATE);
    setState(772);
    match(CypherParser::SP);
    setState(773);
    match(CypherParser::NODE);
    setState(774);
    match(CypherParser::SP);
    setState(775);
    match(CypherParser::TABLE);
    setState(776);
    match(CypherParser::SP);
    setState(780);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx)) {
    case 1: {
      setState(777);
      kU_IfNotExists();
      setState(778);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(782);
    oC_SchemaName();
    setState(818);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      setState(784);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(783);
        match(CypherParser::SP);
      }
      setState(786);
      match(CypherParser::T__1);
      setState(788);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(787);
        match(CypherParser::SP);
      }
      setState(790);
      kU_PropertyDefinitions();
      setState(792);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
      case 1: {
        setState(791);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(799);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__3) {
        setState(794);
        match(CypherParser::T__3);
        setState(796);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(795);
          match(CypherParser::SP);
        }
        setState(798);
        kU_CreateNodeConstraint();
      }
      setState(802);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(801);
        match(CypherParser::SP);
      }
      setState(804);
      match(CypherParser::T__2);
      break;
    }

    case 2: {
      setState(806);
      match(CypherParser::SP);
      setState(807);
      match(CypherParser::AS);
      setState(809);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
      case 1: {
        setState(808);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(812);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(811);
        match(CypherParser::SP);
      }
      setState(814);
      oC_Query();
      setState(816);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
      case 1: {
        setState(815);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableContext::KU_CreateRelTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_FromToConnectionsContext* CypherParser::KU_CreateRelTableContext::kU_FromToConnections() {
  return getRuleContext<CypherParser::KU_FromToConnectionsContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::GROUP() {
  return getToken(CypherParser::GROUP, 0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateRelTableContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_CreateRelTableContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}


size_t CypherParser::KU_CreateRelTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTable;
}


CypherParser::KU_CreateRelTableContext* CypherParser::kU_CreateRelTable() {
  KU_CreateRelTableContext *_localctx = _tracker.createInstance<KU_CreateRelTableContext>(_ctx, getState());
  enterRule(_localctx, 46, CypherParser::RuleKU_CreateRelTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(820);
    match(CypherParser::CREATE);
    setState(821);
    match(CypherParser::SP);
    setState(822);
    match(CypherParser::REL);
    setState(823);
    match(CypherParser::SP);
    setState(824);
    match(CypherParser::TABLE);
    setState(827);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      setState(825);
      match(CypherParser::SP);
      setState(826);
      match(CypherParser::GROUP);
      break;
    }

    default:
      break;
    }
    setState(831);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      setState(829);
      match(CypherParser::SP);
      setState(830);
      kU_IfNotExists();
      break;
    }

    default:
      break;
    }
    setState(833);
    match(CypherParser::SP);
    setState(834);
    oC_SchemaName();
    setState(836);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(835);
      match(CypherParser::SP);
    }
    setState(838);
    match(CypherParser::T__1);
    setState(840);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(839);
      match(CypherParser::SP);
    }
    setState(842);
    kU_FromToConnections();
    setState(844);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(843);
      match(CypherParser::SP);
    }
    setState(854);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx)) {
    case 1: {
      setState(846);
      match(CypherParser::T__3);
      setState(848);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(847);
        match(CypherParser::SP);
      }
      setState(850);
      kU_PropertyDefinitions();
      setState(852);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(851);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(864);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__3) {
      setState(856);
      match(CypherParser::T__3);
      setState(858);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(857);
        match(CypherParser::SP);
      }
      setState(860);
      oC_SymbolicName();
      setState(862);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(861);
        match(CypherParser::SP);
      }
    }
    setState(866);
    match(CypherParser::T__2);
    setState(882);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      setState(867);
      match(CypherParser::SP);
      setState(868);
      match(CypherParser::WITH);
      setState(870);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(869);
        match(CypherParser::SP);
      }
      setState(872);
      match(CypherParser::T__1);
      setState(874);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(873);
        match(CypherParser::SP);
      }
      setState(876);
      kU_Options();
      setState(878);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(877);
        match(CypherParser::SP);
      }
      setState(880);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FromToConnectionsContext ------------------------------------------------------------------

CypherParser::KU_FromToConnectionsContext::KU_FromToConnectionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_FromToConnectionContext *> CypherParser::KU_FromToConnectionsContext::kU_FromToConnection() {
  return getRuleContexts<CypherParser::KU_FromToConnectionContext>();
}

CypherParser::KU_FromToConnectionContext* CypherParser::KU_FromToConnectionsContext::kU_FromToConnection(size_t i) {
  return getRuleContext<CypherParser::KU_FromToConnectionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FromToConnectionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FromToConnectionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_FromToConnectionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_FromToConnections;
}


CypherParser::KU_FromToConnectionsContext* CypherParser::kU_FromToConnections() {
  KU_FromToConnectionsContext *_localctx = _tracker.createInstance<KU_FromToConnectionsContext>(_ctx, getState());
  enterRule(_localctx, 48, CypherParser::RuleKU_FromToConnections);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(884);
    kU_FromToConnection();
    setState(895);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(886);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(885);
          match(CypherParser::SP);
        }
        setState(888);
        match(CypherParser::T__3);
        setState(890);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(889);
          match(CypherParser::SP);
        }
        setState(892);
        kU_FromToConnection(); 
      }
      setState(897);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FromToConnectionContext ------------------------------------------------------------------

CypherParser::KU_FromToConnectionContext::KU_FromToConnectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_FromToConnectionContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FromToConnectionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FromToConnectionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_FromToConnectionContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_FromToConnectionContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_FromToConnectionContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_FromToConnectionContext::getRuleIndex() const {
  return CypherParser::RuleKU_FromToConnection;
}


CypherParser::KU_FromToConnectionContext* CypherParser::kU_FromToConnection() {
  KU_FromToConnectionContext *_localctx = _tracker.createInstance<KU_FromToConnectionContext>(_ctx, getState());
  enterRule(_localctx, 50, CypherParser::RuleKU_FromToConnection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(898);
    match(CypherParser::FROM);
    setState(899);
    match(CypherParser::SP);
    setState(900);
    oC_SchemaName();
    setState(901);
    match(CypherParser::SP);
    setState(902);
    match(CypherParser::TO);
    setState(903);
    match(CypherParser::SP);
    setState(904);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateSequenceContext ------------------------------------------------------------------

CypherParser::KU_CreateSequenceContext::KU_CreateSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateSequenceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateSequenceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateSequenceContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

std::vector<CypherParser::KU_SequenceOptionsContext *> CypherParser::KU_CreateSequenceContext::kU_SequenceOptions() {
  return getRuleContexts<CypherParser::KU_SequenceOptionsContext>();
}

CypherParser::KU_SequenceOptionsContext* CypherParser::KU_CreateSequenceContext::kU_SequenceOptions(size_t i) {
  return getRuleContext<CypherParser::KU_SequenceOptionsContext>(i);
}


size_t CypherParser::KU_CreateSequenceContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateSequence;
}


CypherParser::KU_CreateSequenceContext* CypherParser::kU_CreateSequence() {
  KU_CreateSequenceContext *_localctx = _tracker.createInstance<KU_CreateSequenceContext>(_ctx, getState());
  enterRule(_localctx, 52, CypherParser::RuleKU_CreateSequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(906);
    match(CypherParser::CREATE);
    setState(907);
    match(CypherParser::SP);
    setState(908);
    match(CypherParser::SEQUENCE);
    setState(909);
    match(CypherParser::SP);
    setState(913);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      setState(910);
      kU_IfNotExists();
      setState(911);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(915);
    oC_SchemaName();
    setState(920);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(916);
        match(CypherParser::SP);
        setState(917);
        kU_SequenceOptions(); 
      }
      setState(922);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateTypeContext ------------------------------------------------------------------

CypherParser::KU_CreateTypeContext::KU_CreateTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::TYPE() {
  return getToken(CypherParser::TYPE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateTypeContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_CreateTypeContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_CreateTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateType;
}


CypherParser::KU_CreateTypeContext* CypherParser::kU_CreateType() {
  KU_CreateTypeContext *_localctx = _tracker.createInstance<KU_CreateTypeContext>(_ctx, getState());
  enterRule(_localctx, 54, CypherParser::RuleKU_CreateType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(923);
    match(CypherParser::CREATE);
    setState(924);
    match(CypherParser::SP);
    setState(925);
    match(CypherParser::TYPE);
    setState(926);
    match(CypherParser::SP);
    setState(927);
    oC_SchemaName();
    setState(928);
    match(CypherParser::SP);
    setState(929);
    match(CypherParser::AS);
    setState(930);
    match(CypherParser::SP);
    setState(931);
    kU_DataType(0);
    setState(933);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx)) {
    case 1: {
      setState(932);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_SequenceOptionsContext ------------------------------------------------------------------

CypherParser::KU_SequenceOptionsContext::KU_SequenceOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_IncrementByContext* CypherParser::KU_SequenceOptionsContext::kU_IncrementBy() {
  return getRuleContext<CypherParser::KU_IncrementByContext>(0);
}

CypherParser::KU_MinValueContext* CypherParser::KU_SequenceOptionsContext::kU_MinValue() {
  return getRuleContext<CypherParser::KU_MinValueContext>(0);
}

CypherParser::KU_MaxValueContext* CypherParser::KU_SequenceOptionsContext::kU_MaxValue() {
  return getRuleContext<CypherParser::KU_MaxValueContext>(0);
}

CypherParser::KU_StartWithContext* CypherParser::KU_SequenceOptionsContext::kU_StartWith() {
  return getRuleContext<CypherParser::KU_StartWithContext>(0);
}

CypherParser::KU_CycleContext* CypherParser::KU_SequenceOptionsContext::kU_Cycle() {
  return getRuleContext<CypherParser::KU_CycleContext>(0);
}


size_t CypherParser::KU_SequenceOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_SequenceOptions;
}


CypherParser::KU_SequenceOptionsContext* CypherParser::kU_SequenceOptions() {
  KU_SequenceOptionsContext *_localctx = _tracker.createInstance<KU_SequenceOptionsContext>(_ctx, getState());
  enterRule(_localctx, 56, CypherParser::RuleKU_SequenceOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(940);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(935);
      kU_IncrementBy();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(936);
      kU_MinValue();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(937);
      kU_MaxValue();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(938);
      kU_StartWith();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(939);
      kU_Cycle();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IncrementByContext ------------------------------------------------------------------

CypherParser::KU_IncrementByContext::KU_IncrementByContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_IncrementByContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_IncrementByContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_IncrementByContext::getRuleIndex() const {
  return CypherParser::RuleKU_IncrementBy;
}


CypherParser::KU_IncrementByContext* CypherParser::kU_IncrementBy() {
  KU_IncrementByContext *_localctx = _tracker.createInstance<KU_IncrementByContext>(_ctx, getState());
  enterRule(_localctx, 58, CypherParser::RuleKU_IncrementBy);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(942);
    match(CypherParser::INCREMENT);
    setState(943);
    match(CypherParser::SP);
    setState(946);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::BY) {
      setState(944);
      match(CypherParser::BY);
      setState(945);
      match(CypherParser::SP);
    }
    setState(949);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(948);
      match(CypherParser::MINUS);
    }
    setState(951);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MinValueContext ------------------------------------------------------------------

CypherParser::KU_MinValueContext::KU_MinValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MinValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MinValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MinValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MinValue;
}


CypherParser::KU_MinValueContext* CypherParser::kU_MinValue() {
  KU_MinValueContext *_localctx = _tracker.createInstance<KU_MinValueContext>(_ctx, getState());
  enterRule(_localctx, 60, CypherParser::RuleKU_MinValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(962);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(953);
        match(CypherParser::NO);
        setState(954);
        match(CypherParser::SP);
        setState(955);
        match(CypherParser::MINVALUE);
        break;
      }

      case CypherParser::MINVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(956);
        match(CypherParser::MINVALUE);
        setState(957);
        match(CypherParser::SP);
        setState(959);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(958);
          match(CypherParser::MINUS);
        }
        setState(961);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MaxValueContext ------------------------------------------------------------------

CypherParser::KU_MaxValueContext::KU_MaxValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MaxValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MaxValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MaxValue;
}


CypherParser::KU_MaxValueContext* CypherParser::kU_MaxValue() {
  KU_MaxValueContext *_localctx = _tracker.createInstance<KU_MaxValueContext>(_ctx, getState());
  enterRule(_localctx, 62, CypherParser::RuleKU_MaxValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(973);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(964);
        match(CypherParser::NO);
        setState(965);
        match(CypherParser::SP);
        setState(966);
        match(CypherParser::MAXVALUE);
        break;
      }

      case CypherParser::MAXVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(967);
        match(CypherParser::MAXVALUE);
        setState(968);
        match(CypherParser::SP);
        setState(970);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(969);
          match(CypherParser::MINUS);
        }
        setState(972);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StartWithContext ------------------------------------------------------------------

CypherParser::KU_StartWithContext::KU_StartWithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StartWithContext::START() {
  return getToken(CypherParser::START, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StartWithContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_StartWithContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_StartWithContext::getRuleIndex() const {
  return CypherParser::RuleKU_StartWith;
}


CypherParser::KU_StartWithContext* CypherParser::kU_StartWith() {
  KU_StartWithContext *_localctx = _tracker.createInstance<KU_StartWithContext>(_ctx, getState());
  enterRule(_localctx, 64, CypherParser::RuleKU_StartWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(975);
    match(CypherParser::START);
    setState(976);
    match(CypherParser::SP);
    setState(979);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::WITH) {
      setState(977);
      match(CypherParser::WITH);
      setState(978);
      match(CypherParser::SP);
    }
    setState(982);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(981);
      match(CypherParser::MINUS);
    }
    setState(984);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CycleContext ------------------------------------------------------------------

CypherParser::KU_CycleContext::KU_CycleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CycleContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::KU_CycleContext::getRuleIndex() const {
  return CypherParser::RuleKU_Cycle;
}


CypherParser::KU_CycleContext* CypherParser::kU_Cycle() {
  KU_CycleContext *_localctx = _tracker.createInstance<KU_CycleContext>(_ctx, getState());
  enterRule(_localctx, 66, CypherParser::RuleKU_Cycle);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(988);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::NO) {
      setState(986);
      match(CypherParser::NO);
      setState(987);
      match(CypherParser::SP);
    }
    setState(990);
    match(CypherParser::CYCLE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IfExistsContext ------------------------------------------------------------------

CypherParser::KU_IfExistsContext::KU_IfExistsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IfExistsContext::IF() {
  return getToken(CypherParser::IF, 0);
}

tree::TerminalNode* CypherParser::KU_IfExistsContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_IfExistsContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}


size_t CypherParser::KU_IfExistsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IfExists;
}


CypherParser::KU_IfExistsContext* CypherParser::kU_IfExists() {
  KU_IfExistsContext *_localctx = _tracker.createInstance<KU_IfExistsContext>(_ctx, getState());
  enterRule(_localctx, 68, CypherParser::RuleKU_IfExists);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(992);
    match(CypherParser::IF);
    setState(993);
    match(CypherParser::SP);
    setState(994);
    match(CypherParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropContext ------------------------------------------------------------------

CypherParser::KU_DropContext::KU_DropContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DropContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DropContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DropContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DropContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_DropContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

CypherParser::KU_IfExistsContext* CypherParser::KU_DropContext::kU_IfExists() {
  return getRuleContext<CypherParser::KU_IfExistsContext>(0);
}


size_t CypherParser::KU_DropContext::getRuleIndex() const {
  return CypherParser::RuleKU_Drop;
}


CypherParser::KU_DropContext* CypherParser::kU_Drop() {
  KU_DropContext *_localctx = _tracker.createInstance<KU_DropContext>(_ctx, getState());
  enterRule(_localctx, 70, CypherParser::RuleKU_Drop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(996);
    match(CypherParser::DROP);
    setState(997);
    match(CypherParser::SP);
    setState(998);
    _la = _input->LA(1);
    if (!(_la == CypherParser::SEQUENCE

    || _la == CypherParser::TABLE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(999);
    match(CypherParser::SP);
    setState(1003);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      setState(1000);
      kU_IfExists();
      setState(1001);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1005);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterTableContext ------------------------------------------------------------------

CypherParser::KU_AlterTableContext::KU_AlterTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AlterTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AlterTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_AlterOptionsContext* CypherParser::KU_AlterTableContext::kU_AlterOptions() {
  return getRuleContext<CypherParser::KU_AlterOptionsContext>(0);
}


size_t CypherParser::KU_AlterTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterTable;
}


CypherParser::KU_AlterTableContext* CypherParser::kU_AlterTable() {
  KU_AlterTableContext *_localctx = _tracker.createInstance<KU_AlterTableContext>(_ctx, getState());
  enterRule(_localctx, 72, CypherParser::RuleKU_AlterTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1007);
    match(CypherParser::ALTER);
    setState(1008);
    match(CypherParser::SP);
    setState(1009);
    match(CypherParser::TABLE);
    setState(1010);
    match(CypherParser::SP);
    setState(1011);
    oC_SchemaName();
    setState(1012);
    match(CypherParser::SP);
    setState(1013);
    kU_AlterOptions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterOptionsContext ------------------------------------------------------------------

CypherParser::KU_AlterOptionsContext::KU_AlterOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_AddPropertyContext* CypherParser::KU_AlterOptionsContext::kU_AddProperty() {
  return getRuleContext<CypherParser::KU_AddPropertyContext>(0);
}

CypherParser::KU_DropPropertyContext* CypherParser::KU_AlterOptionsContext::kU_DropProperty() {
  return getRuleContext<CypherParser::KU_DropPropertyContext>(0);
}

CypherParser::KU_RenameTableContext* CypherParser::KU_AlterOptionsContext::kU_RenameTable() {
  return getRuleContext<CypherParser::KU_RenameTableContext>(0);
}

CypherParser::KU_RenamePropertyContext* CypherParser::KU_AlterOptionsContext::kU_RenameProperty() {
  return getRuleContext<CypherParser::KU_RenamePropertyContext>(0);
}


size_t CypherParser::KU_AlterOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterOptions;
}


CypherParser::KU_AlterOptionsContext* CypherParser::kU_AlterOptions() {
  KU_AlterOptionsContext *_localctx = _tracker.createInstance<KU_AlterOptionsContext>(_ctx, getState());
  enterRule(_localctx, 74, CypherParser::RuleKU_AlterOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1019);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1015);
      kU_AddProperty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1016);
      kU_DropProperty();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1017);
      kU_RenameTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1018);
      kU_RenameProperty();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddPropertyContext ------------------------------------------------------------------

CypherParser::KU_AddPropertyContext::KU_AddPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AddPropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_AddPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_AddPropertyContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_AddPropertyContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

CypherParser::KU_DefaultContext* CypherParser::KU_AddPropertyContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}


size_t CypherParser::KU_AddPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddProperty;
}


CypherParser::KU_AddPropertyContext* CypherParser::kU_AddProperty() {
  KU_AddPropertyContext *_localctx = _tracker.createInstance<KU_AddPropertyContext>(_ctx, getState());
  enterRule(_localctx, 76, CypherParser::RuleKU_AddProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1021);
    match(CypherParser::ADD);
    setState(1022);
    match(CypherParser::SP);
    setState(1026);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
    case 1: {
      setState(1023);
      kU_IfNotExists();
      setState(1024);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1028);
    oC_PropertyKeyName();
    setState(1029);
    match(CypherParser::SP);
    setState(1030);
    kU_DataType(0);
    setState(1033);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
    case 1: {
      setState(1031);
      match(CypherParser::SP);
      setState(1032);
      kU_Default();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultContext ------------------------------------------------------------------

CypherParser::KU_DefaultContext::KU_DefaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DefaultContext::DEFAULT() {
  return getToken(CypherParser::DEFAULT, 0);
}

tree::TerminalNode* CypherParser::KU_DefaultContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_DefaultContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_DefaultContext::getRuleIndex() const {
  return CypherParser::RuleKU_Default;
}


CypherParser::KU_DefaultContext* CypherParser::kU_Default() {
  KU_DefaultContext *_localctx = _tracker.createInstance<KU_DefaultContext>(_ctx, getState());
  enterRule(_localctx, 78, CypherParser::RuleKU_Default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1035);
    match(CypherParser::DEFAULT);
    setState(1036);
    match(CypherParser::SP);
    setState(1037);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropPropertyContext ------------------------------------------------------------------

CypherParser::KU_DropPropertyContext::KU_DropPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DropPropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_DropPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

CypherParser::KU_IfExistsContext* CypherParser::KU_DropPropertyContext::kU_IfExists() {
  return getRuleContext<CypherParser::KU_IfExistsContext>(0);
}


size_t CypherParser::KU_DropPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropProperty;
}


CypherParser::KU_DropPropertyContext* CypherParser::kU_DropProperty() {
  KU_DropPropertyContext *_localctx = _tracker.createInstance<KU_DropPropertyContext>(_ctx, getState());
  enterRule(_localctx, 80, CypherParser::RuleKU_DropProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1039);
    match(CypherParser::DROP);
    setState(1040);
    match(CypherParser::SP);
    setState(1044);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
    case 1: {
      setState(1041);
      kU_IfExists();
      setState(1042);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1046);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenameTableContext ------------------------------------------------------------------

CypherParser::KU_RenameTableContext::KU_RenameTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenameTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::TO() {
  return getToken(CypherParser::TO, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RenameTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_RenameTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameTable;
}


CypherParser::KU_RenameTableContext* CypherParser::kU_RenameTable() {
  KU_RenameTableContext *_localctx = _tracker.createInstance<KU_RenameTableContext>(_ctx, getState());
  enterRule(_localctx, 82, CypherParser::RuleKU_RenameTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1048);
    match(CypherParser::RENAME);
    setState(1049);
    match(CypherParser::SP);
    setState(1050);
    match(CypherParser::TO);
    setState(1051);
    match(CypherParser::SP);
    setState(1052);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenamePropertyContext ------------------------------------------------------------------

CypherParser::KU_RenamePropertyContext::KU_RenamePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenamePropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RenamePropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameProperty;
}


CypherParser::KU_RenamePropertyContext* CypherParser::kU_RenameProperty() {
  KU_RenamePropertyContext *_localctx = _tracker.createInstance<KU_RenamePropertyContext>(_ctx, getState());
  enterRule(_localctx, 84, CypherParser::RuleKU_RenameProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1054);
    match(CypherParser::RENAME);
    setState(1055);
    match(CypherParser::SP);
    setState(1056);
    oC_PropertyKeyName();
    setState(1057);
    match(CypherParser::SP);
    setState(1058);
    match(CypherParser::TO);
    setState(1059);
    match(CypherParser::SP);
    setState(1060);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnDefinitionsContext ------------------------------------------------------------------

CypherParser::KU_ColumnDefinitionsContext::KU_ColumnDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ColumnDefinitionContext *> CypherParser::KU_ColumnDefinitionsContext::kU_ColumnDefinition() {
  return getRuleContexts<CypherParser::KU_ColumnDefinitionContext>();
}

CypherParser::KU_ColumnDefinitionContext* CypherParser::KU_ColumnDefinitionsContext::kU_ColumnDefinition(size_t i) {
  return getRuleContext<CypherParser::KU_ColumnDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ColumnDefinitionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ColumnDefinitionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ColumnDefinitionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnDefinitions;
}


CypherParser::KU_ColumnDefinitionsContext* CypherParser::kU_ColumnDefinitions() {
  KU_ColumnDefinitionsContext *_localctx = _tracker.createInstance<KU_ColumnDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 86, CypherParser::RuleKU_ColumnDefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1062);
    kU_ColumnDefinition();
    setState(1073);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1064);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1063);
          match(CypherParser::SP);
        }
        setState(1066);
        match(CypherParser::T__3);
        setState(1068);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1067);
          match(CypherParser::SP);
        }
        setState(1070);
        kU_ColumnDefinition(); 
      }
      setState(1075);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnDefinitionContext ------------------------------------------------------------------

CypherParser::KU_ColumnDefinitionContext::KU_ColumnDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_ColumnDefinitionContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_ColumnDefinitionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_ColumnDefinitionContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_ColumnDefinitionContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnDefinition;
}


CypherParser::KU_ColumnDefinitionContext* CypherParser::kU_ColumnDefinition() {
  KU_ColumnDefinitionContext *_localctx = _tracker.createInstance<KU_ColumnDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 88, CypherParser::RuleKU_ColumnDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1076);
    oC_PropertyKeyName();
    setState(1077);
    match(CypherParser::SP);
    setState(1078);
    kU_DataType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsContext::KU_PropertyDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionContext *> CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionContext>();
}

CypherParser::KU_PropertyDefinitionContext* CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitions;
}


CypherParser::KU_PropertyDefinitionsContext* CypherParser::kU_PropertyDefinitions() {
  KU_PropertyDefinitionsContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 90, CypherParser::RuleKU_PropertyDefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1080);
    kU_PropertyDefinition();
    setState(1091);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1082);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1081);
          match(CypherParser::SP);
        }
        setState(1084);
        match(CypherParser::T__3);
        setState(1086);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1085);
          match(CypherParser::SP);
        }
        setState(1088);
        kU_PropertyDefinition(); 
      }
      setState(1093);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionContext::KU_PropertyDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_ColumnDefinitionContext* CypherParser::KU_PropertyDefinitionContext::kU_ColumnDefinition() {
  return getRuleContext<CypherParser::KU_ColumnDefinitionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::KU_DefaultContext* CypherParser::KU_PropertyDefinitionContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::PRIMARY() {
  return getToken(CypherParser::PRIMARY, 0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}


size_t CypherParser::KU_PropertyDefinitionContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinition;
}


CypherParser::KU_PropertyDefinitionContext* CypherParser::kU_PropertyDefinition() {
  KU_PropertyDefinitionContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 92, CypherParser::RuleKU_PropertyDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1094);
    kU_ColumnDefinition();
    setState(1097);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
    case 1: {
      setState(1095);
      match(CypherParser::SP);
      setState(1096);
      kU_Default();
      break;
    }

    default:
      break;
    }
    setState(1103);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      setState(1099);
      match(CypherParser::SP);
      setState(1100);
      match(CypherParser::PRIMARY);
      setState(1101);
      match(CypherParser::SP);
      setState(1102);
      match(CypherParser::KEY);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeConstraintContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeConstraintContext::KU_CreateNodeConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::PRIMARY() {
  return getToken(CypherParser::PRIMARY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeConstraintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_CreateNodeConstraintContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_CreateNodeConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeConstraint;
}


CypherParser::KU_CreateNodeConstraintContext* CypherParser::kU_CreateNodeConstraint() {
  KU_CreateNodeConstraintContext *_localctx = _tracker.createInstance<KU_CreateNodeConstraintContext>(_ctx, getState());
  enterRule(_localctx, 94, CypherParser::RuleKU_CreateNodeConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1105);
    match(CypherParser::PRIMARY);
    setState(1106);
    match(CypherParser::SP);
    setState(1107);
    match(CypherParser::KEY);
    setState(1109);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1108);
      match(CypherParser::SP);
    }
    setState(1111);
    match(CypherParser::T__1);
    setState(1113);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1112);
      match(CypherParser::SP);
    }
    setState(1115);
    oC_PropertyKeyName();
    setState(1117);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1116);
      match(CypherParser::SP);
    }
    setState(1119);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DataTypeContext ------------------------------------------------------------------

CypherParser::KU_DataTypeContext::KU_DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DataTypeContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

CypherParser::KU_ColumnDefinitionsContext* CypherParser::KU_DataTypeContext::kU_ColumnDefinitions() {
  return getRuleContext<CypherParser::KU_ColumnDefinitionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DataTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::KU_DataTypeContext *> CypherParser::KU_DataTypeContext::kU_DataType() {
  return getRuleContexts<CypherParser::KU_DataTypeContext>();
}

CypherParser::KU_DataTypeContext* CypherParser::KU_DataTypeContext::kU_DataType(size_t i) {
  return getRuleContext<CypherParser::KU_DataTypeContext>(i);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::DECIMAL() {
  return getToken(CypherParser::DECIMAL, 0);
}

std::vector<CypherParser::OC_IntegerLiteralContext *> CypherParser::KU_DataTypeContext::oC_IntegerLiteral() {
  return getRuleContexts<CypherParser::OC_IntegerLiteralContext>();
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_DataTypeContext::oC_IntegerLiteral(size_t i) {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(i);
}

CypherParser::KU_ListIdentifiersContext* CypherParser::KU_DataTypeContext::kU_ListIdentifiers() {
  return getRuleContext<CypherParser::KU_ListIdentifiersContext>(0);
}


size_t CypherParser::KU_DataTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_DataType;
}



CypherParser::KU_DataTypeContext* CypherParser::kU_DataType() {
   return kU_DataType(0);
}

CypherParser::KU_DataTypeContext* CypherParser::kU_DataType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_DataTypeContext *_localctx = _tracker.createInstance<KU_DataTypeContext>(_ctx, parentState);
  CypherParser::KU_DataTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 96;
  enterRecursionRule(_localctx, 96, CypherParser::RuleKU_DataType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1195);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
    case 1: {
      setState(1122);
      oC_SymbolicName();
      break;
    }

    case 2: {
      setState(1123);
      match(CypherParser::UNION);
      setState(1125);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1124);
        match(CypherParser::SP);
      }
      setState(1127);
      match(CypherParser::T__1);
      setState(1129);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1128);
        match(CypherParser::SP);
      }
      setState(1131);
      kU_ColumnDefinitions();
      setState(1133);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1132);
        match(CypherParser::SP);
      }
      setState(1135);
      match(CypherParser::T__2);
      break;
    }

    case 3: {
      setState(1137);
      oC_SymbolicName();
      setState(1139);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1138);
        match(CypherParser::SP);
      }
      setState(1141);
      match(CypherParser::T__1);
      setState(1143);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1142);
        match(CypherParser::SP);
      }
      setState(1145);
      kU_ColumnDefinitions();
      setState(1147);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1146);
        match(CypherParser::SP);
      }
      setState(1149);
      match(CypherParser::T__2);
      break;
    }

    case 4: {
      setState(1151);
      oC_SymbolicName();
      setState(1153);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1152);
        match(CypherParser::SP);
      }
      setState(1155);
      match(CypherParser::T__1);
      setState(1157);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1156);
        match(CypherParser::SP);
      }
      setState(1159);
      kU_DataType(0);
      setState(1161);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1160);
        match(CypherParser::SP);
      }
      setState(1163);
      match(CypherParser::T__3);
      setState(1165);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1164);
        match(CypherParser::SP);
      }
      setState(1167);
      kU_DataType(0);
      setState(1169);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1168);
        match(CypherParser::SP);
      }
      setState(1171);
      match(CypherParser::T__2);
      break;
    }

    case 5: {
      setState(1173);
      match(CypherParser::DECIMAL);
      setState(1175);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1174);
        match(CypherParser::SP);
      }
      setState(1177);
      match(CypherParser::T__1);
      setState(1179);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1178);
        match(CypherParser::SP);
      }
      setState(1181);
      oC_IntegerLiteral();
      setState(1183);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1182);
        match(CypherParser::SP);
      }
      setState(1185);
      match(CypherParser::T__3);
      setState(1187);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1186);
        match(CypherParser::SP);
      }
      setState(1189);
      oC_IntegerLiteral();
      setState(1191);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1190);
        match(CypherParser::SP);
      }
      setState(1193);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1201);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<KU_DataTypeContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleKU_DataType);
        setState(1197);

        if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
        setState(1198);
        kU_ListIdentifiers(); 
      }
      setState(1203);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- KU_ListIdentifiersContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifiersContext::KU_ListIdentifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ListIdentifierContext *> CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier() {
  return getRuleContexts<CypherParser::KU_ListIdentifierContext>();
}

CypherParser::KU_ListIdentifierContext* CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier(size_t i) {
  return getRuleContext<CypherParser::KU_ListIdentifierContext>(i);
}


size_t CypherParser::KU_ListIdentifiersContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifiers;
}


CypherParser::KU_ListIdentifiersContext* CypherParser::kU_ListIdentifiers() {
  KU_ListIdentifiersContext *_localctx = _tracker.createInstance<KU_ListIdentifiersContext>(_ctx, getState());
  enterRule(_localctx, 98, CypherParser::RuleKU_ListIdentifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1204);
    kU_ListIdentifier();
    setState(1208);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1205);
        kU_ListIdentifier(); 
      }
      setState(1210);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListIdentifierContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifierContext::KU_ListIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_ListIdentifierContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::KU_ListIdentifierContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifier;
}


CypherParser::KU_ListIdentifierContext* CypherParser::kU_ListIdentifier() {
  KU_ListIdentifierContext *_localctx = _tracker.createInstance<KU_ListIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 100, CypherParser::RuleKU_ListIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1211);
    match(CypherParser::T__6);
    setState(1213);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DecimalInteger) {
      setState(1212);
      oC_IntegerLiteral();
    }
    setState(1215);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnyCypherOptionContext ------------------------------------------------------------------

CypherParser::OC_AnyCypherOptionContext::OC_AnyCypherOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExplainContext* CypherParser::OC_AnyCypherOptionContext::oC_Explain() {
  return getRuleContext<CypherParser::OC_ExplainContext>(0);
}

CypherParser::OC_ProfileContext* CypherParser::OC_AnyCypherOptionContext::oC_Profile() {
  return getRuleContext<CypherParser::OC_ProfileContext>(0);
}


size_t CypherParser::OC_AnyCypherOptionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnyCypherOption;
}


CypherParser::OC_AnyCypherOptionContext* CypherParser::oC_AnyCypherOption() {
  OC_AnyCypherOptionContext *_localctx = _tracker.createInstance<OC_AnyCypherOptionContext>(_ctx, getState());
  enterRule(_localctx, 102, CypherParser::RuleOC_AnyCypherOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1219);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::EXPLAIN: {
        enterOuterAlt(_localctx, 1);
        setState(1217);
        oC_Explain();
        break;
      }

      case CypherParser::PROFILE: {
        enterOuterAlt(_localctx, 2);
        setState(1218);
        oC_Profile();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplainContext ------------------------------------------------------------------

CypherParser::OC_ExplainContext::OC_ExplainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExplainContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}

tree::TerminalNode* CypherParser::OC_ExplainContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::OC_ExplainContext::LOGICAL() {
  return getToken(CypherParser::LOGICAL, 0);
}


size_t CypherParser::OC_ExplainContext::getRuleIndex() const {
  return CypherParser::RuleOC_Explain;
}


CypherParser::OC_ExplainContext* CypherParser::oC_Explain() {
  OC_ExplainContext *_localctx = _tracker.createInstance<OC_ExplainContext>(_ctx, getState());
  enterRule(_localctx, 104, CypherParser::RuleOC_Explain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1221);
    match(CypherParser::EXPLAIN);
    setState(1224);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
    case 1: {
      setState(1222);
      match(CypherParser::SP);
      setState(1223);
      match(CypherParser::LOGICAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProfileContext ------------------------------------------------------------------

CypherParser::OC_ProfileContext::OC_ProfileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProfileContext::PROFILE() {
  return getToken(CypherParser::PROFILE, 0);
}


size_t CypherParser::OC_ProfileContext::getRuleIndex() const {
  return CypherParser::RuleOC_Profile;
}


CypherParser::OC_ProfileContext* CypherParser::oC_Profile() {
  OC_ProfileContext *_localctx = _tracker.createInstance<OC_ProfileContext>(_ctx, getState());
  enterRule(_localctx, 106, CypherParser::RuleOC_Profile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1226);
    match(CypherParser::PROFILE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_TransactionContext ------------------------------------------------------------------

CypherParser::KU_TransactionContext::KU_TransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_TransactionContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_TransactionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ONLY() {
  return getToken(CypherParser::ONLY, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::CHECKPOINT() {
  return getToken(CypherParser::CHECKPOINT, 0);
}


size_t CypherParser::KU_TransactionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Transaction;
}


CypherParser::KU_TransactionContext* CypherParser::kU_Transaction() {
  KU_TransactionContext *_localctx = _tracker.createInstance<KU_TransactionContext>(_ctx, getState());
  enterRule(_localctx, 108, CypherParser::RuleKU_Transaction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1241);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1228);
      match(CypherParser::BEGIN);
      setState(1229);
      match(CypherParser::SP);
      setState(1230);
      match(CypherParser::TRANSACTION);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1231);
      match(CypherParser::BEGIN);
      setState(1232);
      match(CypherParser::SP);
      setState(1233);
      match(CypherParser::TRANSACTION);
      setState(1234);
      match(CypherParser::SP);
      setState(1235);
      match(CypherParser::READ);
      setState(1236);
      match(CypherParser::SP);
      setState(1237);
      match(CypherParser::ONLY);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1238);
      match(CypherParser::COMMIT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1239);
      match(CypherParser::ROLLBACK);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1240);
      match(CypherParser::CHECKPOINT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExtensionContext ------------------------------------------------------------------

CypherParser::KU_ExtensionContext::KU_ExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LoadExtensionContext* CypherParser::KU_ExtensionContext::kU_LoadExtension() {
  return getRuleContext<CypherParser::KU_LoadExtensionContext>(0);
}

CypherParser::KU_InstallExtensionContext* CypherParser::KU_ExtensionContext::kU_InstallExtension() {
  return getRuleContext<CypherParser::KU_InstallExtensionContext>(0);
}

CypherParser::KU_UninstallExtensionContext* CypherParser::KU_ExtensionContext::kU_UninstallExtension() {
  return getRuleContext<CypherParser::KU_UninstallExtensionContext>(0);
}

CypherParser::KU_UpdateExtensionContext* CypherParser::KU_ExtensionContext::kU_UpdateExtension() {
  return getRuleContext<CypherParser::KU_UpdateExtensionContext>(0);
}


size_t CypherParser::KU_ExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Extension;
}


CypherParser::KU_ExtensionContext* CypherParser::kU_Extension() {
  KU_ExtensionContext *_localctx = _tracker.createInstance<KU_ExtensionContext>(_ctx, getState());
  enterRule(_localctx, 110, CypherParser::RuleKU_Extension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1247);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 1);
        setState(1243);
        kU_LoadExtension();
        break;
      }

      case CypherParser::FORCE:
      case CypherParser::INSTALL: {
        enterOuterAlt(_localctx, 2);
        setState(1244);
        kU_InstallExtension();
        break;
      }

      case CypherParser::UNINSTALL: {
        enterOuterAlt(_localctx, 3);
        setState(1245);
        kU_UninstallExtension();
        break;
      }

      case CypherParser::UPDATE: {
        enterOuterAlt(_localctx, 4);
        setState(1246);
        kU_UpdateExtension();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadExtensionContext ------------------------------------------------------------------

CypherParser::KU_LoadExtensionContext::KU_LoadExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadExtensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_LoadExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}


size_t CypherParser::KU_LoadExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadExtension;
}


CypherParser::KU_LoadExtensionContext* CypherParser::kU_LoadExtension() {
  KU_LoadExtensionContext *_localctx = _tracker.createInstance<KU_LoadExtensionContext>(_ctx, getState());
  enterRule(_localctx, 112, CypherParser::RuleKU_LoadExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1249);
    match(CypherParser::LOAD);
    setState(1250);
    match(CypherParser::SP);
    setState(1253);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx)) {
    case 1: {
      setState(1251);
      match(CypherParser::EXTENSION);
      setState(1252);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1257);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::StringLiteral: {
        setState(1255);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::FROM:
      case CypherParser::FORCE:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TO:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::UNINSTALL:
      case CypherParser::UPDATE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::YIELD:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1256);
        oC_Variable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InstallExtensionContext ------------------------------------------------------------------

CypherParser::KU_InstallExtensionContext::KU_InstallExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::INSTALL() {
  return getToken(CypherParser::INSTALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_InstallExtensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::KU_InstallExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::FORCE() {
  return getToken(CypherParser::FORCE, 0);
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_InstallExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_InstallExtension;
}


CypherParser::KU_InstallExtensionContext* CypherParser::kU_InstallExtension() {
  KU_InstallExtensionContext *_localctx = _tracker.createInstance<KU_InstallExtensionContext>(_ctx, getState());
  enterRule(_localctx, 114, CypherParser::RuleKU_InstallExtension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1261);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::FORCE) {
      setState(1259);
      match(CypherParser::FORCE);
      setState(1260);
      match(CypherParser::SP);
    }
    setState(1263);
    match(CypherParser::INSTALL);
    setState(1264);
    match(CypherParser::SP);
    setState(1265);
    oC_Variable();
    setState(1270);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx)) {
    case 1: {
      setState(1266);
      match(CypherParser::SP);
      setState(1267);
      match(CypherParser::FROM);
      setState(1268);
      match(CypherParser::SP);
      setState(1269);
      match(CypherParser::StringLiteral);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_UninstallExtensionContext ------------------------------------------------------------------

CypherParser::KU_UninstallExtensionContext::KU_UninstallExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_UninstallExtensionContext::UNINSTALL() {
  return getToken(CypherParser::UNINSTALL, 0);
}

tree::TerminalNode* CypherParser::KU_UninstallExtensionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_UninstallExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_UninstallExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_UninstallExtension;
}


CypherParser::KU_UninstallExtensionContext* CypherParser::kU_UninstallExtension() {
  KU_UninstallExtensionContext *_localctx = _tracker.createInstance<KU_UninstallExtensionContext>(_ctx, getState());
  enterRule(_localctx, 116, CypherParser::RuleKU_UninstallExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1272);
    match(CypherParser::UNINSTALL);
    setState(1273);
    match(CypherParser::SP);
    setState(1274);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_UpdateExtensionContext ------------------------------------------------------------------

CypherParser::KU_UpdateExtensionContext::KU_UpdateExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_UpdateExtensionContext::UPDATE() {
  return getToken(CypherParser::UPDATE, 0);
}

tree::TerminalNode* CypherParser::KU_UpdateExtensionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_UpdateExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_UpdateExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_UpdateExtension;
}


CypherParser::KU_UpdateExtensionContext* CypherParser::kU_UpdateExtension() {
  KU_UpdateExtensionContext *_localctx = _tracker.createInstance<KU_UpdateExtensionContext>(_ctx, getState());
  enterRule(_localctx, 118, CypherParser::RuleKU_UpdateExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1276);
    match(CypherParser::UPDATE);
    setState(1277);
    match(CypherParser::SP);
    setState(1278);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

CypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RegularQueryContext* CypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<CypherParser::OC_RegularQueryContext>(0);
}


size_t CypherParser::OC_QueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_Query;
}


CypherParser::OC_QueryContext* CypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
  enterRule(_localctx, 120, CypherParser::RuleOC_Query);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1280);
    oC_RegularQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

CypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}

std::vector<CypherParser::OC_UnionContext *> CypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<CypherParser::OC_UnionContext>();
}

CypherParser::OC_UnionContext* CypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<CypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RegularQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_ReturnContext *> CypherParser::OC_RegularQueryContext::oC_Return() {
  return getRuleContexts<CypherParser::OC_ReturnContext>();
}

CypherParser::OC_ReturnContext* CypherParser::OC_RegularQueryContext::oC_Return(size_t i) {
  return getRuleContext<CypherParser::OC_ReturnContext>(i);
}


size_t CypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularQuery;
}


CypherParser::OC_RegularQueryContext* CypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
  enterRule(_localctx, 122, CypherParser::RuleOC_RegularQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1303);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1282);
      oC_SingleQuery();
      setState(1289);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1284);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1283);
            match(CypherParser::SP);
          }
          setState(1286);
          oC_Union(); 
        }
        setState(1291);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1296); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1292);
                oC_Return();
                setState(1294);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1293);
                  match(CypherParser::SP);
                }
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1298); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1300);
      oC_SingleQuery();
       notifyReturnNotAtEnd(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

CypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnionContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnionContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}


size_t CypherParser::OC_UnionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Union;
}


CypherParser::OC_UnionContext* CypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
  enterRule(_localctx, 124, CypherParser::RuleOC_Union);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1317);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1305);
      match(CypherParser::UNION);
      setState(1306);
      match(CypherParser::SP);
      setState(1307);
      match(CypherParser::ALL);
      setState(1309);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1308);
        match(CypherParser::SP);
      }
      setState(1311);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1312);
      match(CypherParser::UNION);
      setState(1314);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1313);
        match(CypherParser::SP);
      }
      setState(1316);
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

CypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

CypherParser::OC_MultiPartQueryContext* CypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<CypherParser::OC_MultiPartQueryContext>(0);
}


size_t CypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SingleQuery;
}


CypherParser::OC_SingleQueryContext* CypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 126, CypherParser::RuleOC_SingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1321);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1319);
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1320);
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

CypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ReturnContext* CypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<CypherParser::OC_ReturnContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}


size_t CypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SinglePartQuery;
}


CypherParser::OC_SinglePartQueryContext* CypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
  enterRule(_localctx, 128, CypherParser::RuleOC_SinglePartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1358);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1329);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::CALL || ((((_la - 104) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 104)) & 1099511660553) != 0)) {
        setState(1323);
        oC_ReadingClause();
        setState(1325);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1324);
          match(CypherParser::SP);
        }
        setState(1331);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1332);
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1339);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::CALL || ((((_la - 104) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 104)) & 1099511660553) != 0)) {
        setState(1333);
        oC_ReadingClause();
        setState(1335);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1334);
          match(CypherParser::SP);
        }
        setState(1341);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1342);
      oC_UpdatingClause();
      setState(1349);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1344);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1343);
            match(CypherParser::SP);
          }
          setState(1346);
          oC_UpdatingClause(); 
        }
        setState(1351);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx);
      }
      setState(1356);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx)) {
      case 1: {
        setState(1353);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1352);
          match(CypherParser::SP);
        }
        setState(1355);
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

CypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<CypherParser::KU_QueryPartContext *> CypherParser::OC_MultiPartQueryContext::kU_QueryPart() {
  return getRuleContexts<CypherParser::KU_QueryPartContext>();
}

CypherParser::KU_QueryPartContext* CypherParser::OC_MultiPartQueryContext::kU_QueryPart(size_t i) {
  return getRuleContext<CypherParser::KU_QueryPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiPartQuery;
}


CypherParser::OC_MultiPartQueryContext* CypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
  enterRule(_localctx, 130, CypherParser::RuleOC_MultiPartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1364); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1360);
              kU_QueryPart();
              setState(1362);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(1361);
                match(CypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1366); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1368);
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_QueryPartContext ------------------------------------------------------------------

CypherParser::KU_QueryPartContext::KU_QueryPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_WithContext* CypherParser::KU_QueryPartContext::oC_With() {
  return getRuleContext<CypherParser::OC_WithContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::KU_QueryPartContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::KU_QueryPartContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::KU_QueryPartContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::KU_QueryPartContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_QueryPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_QueryPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_QueryPartContext::getRuleIndex() const {
  return CypherParser::RuleKU_QueryPart;
}


CypherParser::KU_QueryPartContext* CypherParser::kU_QueryPart() {
  KU_QueryPartContext *_localctx = _tracker.createInstance<KU_QueryPartContext>(_ctx, getState());
  enterRule(_localctx, 132, CypherParser::RuleKU_QueryPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1376);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::CALL || ((((_la - 104) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 104)) & 1099511660553) != 0)) {
      setState(1370);
      oC_ReadingClause();
      setState(1372);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1371);
        match(CypherParser::SP);
      }
      setState(1378);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1385);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & -9223370937343147743) != 0)) {
      setState(1379);
      oC_UpdatingClause();
      setState(1381);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1380);
        match(CypherParser::SP);
      }
      setState(1387);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1388);
    oC_With();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

CypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_CreateContext* CypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<CypherParser::OC_CreateContext>(0);
}

CypherParser::OC_MergeContext* CypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<CypherParser::OC_MergeContext>(0);
}

CypherParser::OC_SetContext* CypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

CypherParser::OC_DeleteContext* CypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<CypherParser::OC_DeleteContext>(0);
}


size_t CypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpdatingClause;
}


CypherParser::OC_UpdatingClauseContext* CypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
  enterRule(_localctx, 134, CypherParser::RuleOC_UpdatingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1394);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
        setState(1390);
        oC_Create();
        break;
      }

      case CypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
        setState(1391);
        oC_Merge();
        break;
      }

      case CypherParser::SET: {
        enterOuterAlt(_localctx, 3);
        setState(1392);
        oC_Set();
        break;
      }

      case CypherParser::DELETE:
      case CypherParser::DETACH: {
        enterOuterAlt(_localctx, 4);
        setState(1393);
        oC_Delete();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

CypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_MatchContext* CypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<CypherParser::OC_MatchContext>(0);
}

CypherParser::OC_UnwindContext* CypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<CypherParser::OC_UnwindContext>(0);
}

CypherParser::KU_InQueryCallContext* CypherParser::OC_ReadingClauseContext::kU_InQueryCall() {
  return getRuleContext<CypherParser::KU_InQueryCallContext>(0);
}

CypherParser::KU_LoadFromContext* CypherParser::OC_ReadingClauseContext::kU_LoadFrom() {
  return getRuleContext<CypherParser::KU_LoadFromContext>(0);
}


size_t CypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_ReadingClause;
}


CypherParser::OC_ReadingClauseContext* CypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 136, CypherParser::RuleOC_ReadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1400);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::MATCH:
      case CypherParser::OPTIONAL: {
        enterOuterAlt(_localctx, 1);
        setState(1396);
        oC_Match();
        break;
      }

      case CypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
        setState(1397);
        oC_Unwind();
        break;
      }

      case CypherParser::CALL: {
        enterOuterAlt(_localctx, 3);
        setState(1398);
        kU_InQueryCall();
        break;
      }

      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 4);
        setState(1399);
        kU_LoadFrom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadFromContext ------------------------------------------------------------------

CypherParser::KU_LoadFromContext::KU_LoadFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_LoadFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::HEADERS() {
  return getToken(CypherParser::HEADERS, 0);
}

CypherParser::KU_ColumnDefinitionsContext* CypherParser::KU_LoadFromContext::kU_ColumnDefinitions() {
  return getRuleContext<CypherParser::KU_ColumnDefinitionsContext>(0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_LoadFromContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_LoadFromContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_LoadFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadFrom;
}


CypherParser::KU_LoadFromContext* CypherParser::kU_LoadFrom() {
  KU_LoadFromContext *_localctx = _tracker.createInstance<KU_LoadFromContext>(_ctx, getState());
  enterRule(_localctx, 138, CypherParser::RuleKU_LoadFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1402);
    match(CypherParser::LOAD);
    setState(1420);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx)) {
    case 1: {
      setState(1403);
      match(CypherParser::SP);
      setState(1404);
      match(CypherParser::WITH);
      setState(1405);
      match(CypherParser::SP);
      setState(1406);
      match(CypherParser::HEADERS);
      setState(1408);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1407);
        match(CypherParser::SP);
      }
      setState(1410);
      match(CypherParser::T__1);
      setState(1412);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1411);
        match(CypherParser::SP);
      }
      setState(1414);
      kU_ColumnDefinitions();
      setState(1416);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1415);
        match(CypherParser::SP);
      }
      setState(1418);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
    setState(1422);
    match(CypherParser::SP);
    setState(1423);
    match(CypherParser::FROM);
    setState(1424);
    match(CypherParser::SP);
    setState(1425);
    kU_ScanSource();
    setState(1439);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
    case 1: {
      setState(1427);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1426);
        match(CypherParser::SP);
      }
      setState(1429);
      match(CypherParser::T__1);
      setState(1431);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1430);
        match(CypherParser::SP);
      }
      setState(1433);
      kU_Options();
      setState(1435);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1434);
        match(CypherParser::SP);
      }
      setState(1437);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
    setState(1445);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      setState(1442);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1441);
        match(CypherParser::SP);
      }
      setState(1444);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_YieldItemContext ------------------------------------------------------------------

CypherParser::OC_YieldItemContext::OC_YieldItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_VariableContext *> CypherParser::OC_YieldItemContext::oC_Variable() {
  return getRuleContexts<CypherParser::OC_VariableContext>();
}

CypherParser::OC_VariableContext* CypherParser::OC_YieldItemContext::oC_Variable(size_t i) {
  return getRuleContext<CypherParser::OC_VariableContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_YieldItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_YieldItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_YieldItemContext::AS() {
  return getToken(CypherParser::AS, 0);
}


size_t CypherParser::OC_YieldItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_YieldItem;
}


CypherParser::OC_YieldItemContext* CypherParser::oC_YieldItem() {
  OC_YieldItemContext *_localctx = _tracker.createInstance<OC_YieldItemContext>(_ctx, getState());
  enterRule(_localctx, 140, CypherParser::RuleOC_YieldItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1452);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx)) {
    case 1: {
      setState(1447);
      oC_Variable();
      setState(1448);
      match(CypherParser::SP);
      setState(1449);
      match(CypherParser::AS);
      setState(1450);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1454);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_YieldItemsContext ------------------------------------------------------------------

CypherParser::OC_YieldItemsContext::OC_YieldItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_YieldItemContext *> CypherParser::OC_YieldItemsContext::oC_YieldItem() {
  return getRuleContexts<CypherParser::OC_YieldItemContext>();
}

CypherParser::OC_YieldItemContext* CypherParser::OC_YieldItemsContext::oC_YieldItem(size_t i) {
  return getRuleContext<CypherParser::OC_YieldItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_YieldItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_YieldItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_YieldItemsContext::getRuleIndex() const {
  return CypherParser::RuleOC_YieldItems;
}


CypherParser::OC_YieldItemsContext* CypherParser::oC_YieldItems() {
  OC_YieldItemsContext *_localctx = _tracker.createInstance<OC_YieldItemsContext>(_ctx, getState());
  enterRule(_localctx, 142, CypherParser::RuleOC_YieldItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1456);
    oC_YieldItem();
    setState(1467);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1458);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1457);
          match(CypherParser::SP);
        }
        setState(1460);
        match(CypherParser::T__3);
        setState(1462);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1461);
          match(CypherParser::SP);
        }
        setState(1464);
        oC_YieldItem(); 
      }
      setState(1469);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InQueryCallContext ------------------------------------------------------------------

CypherParser::KU_InQueryCallContext::KU_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_InQueryCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::KU_InQueryCallContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_InQueryCallContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::YIELD() {
  return getToken(CypherParser::YIELD, 0);
}

CypherParser::OC_YieldItemsContext* CypherParser::KU_InQueryCallContext::oC_YieldItems() {
  return getRuleContext<CypherParser::OC_YieldItemsContext>(0);
}


size_t CypherParser::KU_InQueryCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_InQueryCall;
}


CypherParser::KU_InQueryCallContext* CypherParser::kU_InQueryCall() {
  KU_InQueryCallContext *_localctx = _tracker.createInstance<KU_InQueryCallContext>(_ctx, getState());
  enterRule(_localctx, 144, CypherParser::RuleKU_InQueryCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1470);
    match(CypherParser::CALL);
    setState(1471);
    match(CypherParser::SP);
    setState(1472);
    oC_FunctionInvocation();
    setState(1477);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx)) {
    case 1: {
      setState(1474);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1473);
        match(CypherParser::SP);
      }
      setState(1476);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(1485);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx)) {
    case 1: {
      setState(1480);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1479);
        match(CypherParser::SP);
      }
      setState(1482);
      match(CypherParser::YIELD);
      setState(1483);
      match(CypherParser::SP);
      setState(1484);
      oC_YieldItems();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

CypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MatchContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_MatchContext::OPTIONAL() {
  return getToken(CypherParser::OPTIONAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MatchContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_HintContext* CypherParser::OC_MatchContext::kU_Hint() {
  return getRuleContext<CypherParser::KU_HintContext>(0);
}


size_t CypherParser::OC_MatchContext::getRuleIndex() const {
  return CypherParser::RuleOC_Match;
}


CypherParser::OC_MatchContext* CypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
  enterRule(_localctx, 146, CypherParser::RuleOC_Match);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1489);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::OPTIONAL) {
      setState(1487);
      match(CypherParser::OPTIONAL);
      setState(1488);
      match(CypherParser::SP);
    }
    setState(1491);
    match(CypherParser::MATCH);
    setState(1493);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1492);
      match(CypherParser::SP);
    }
    setState(1495);
    oC_Pattern();
    setState(1498);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
    case 1: {
      setState(1496);
      match(CypherParser::SP);
      setState(1497);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(1502);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
    case 1: {
      setState(1500);
      match(CypherParser::SP);
      setState(1501);
      kU_Hint();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_HintContext ------------------------------------------------------------------

CypherParser::KU_HintContext::KU_HintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_HintContext::HINT() {
  return getToken(CypherParser::HINT, 0);
}

tree::TerminalNode* CypherParser::KU_HintContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_JoinNodeContext* CypherParser::KU_HintContext::kU_JoinNode() {
  return getRuleContext<CypherParser::KU_JoinNodeContext>(0);
}


size_t CypherParser::KU_HintContext::getRuleIndex() const {
  return CypherParser::RuleKU_Hint;
}


CypherParser::KU_HintContext* CypherParser::kU_Hint() {
  KU_HintContext *_localctx = _tracker.createInstance<KU_HintContext>(_ctx, getState());
  enterRule(_localctx, 148, CypherParser::RuleKU_Hint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1504);
    match(CypherParser::HINT);
    setState(1505);
    match(CypherParser::SP);
    setState(1506);
    kU_JoinNode(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_JoinNodeContext ------------------------------------------------------------------

CypherParser::KU_JoinNodeContext::KU_JoinNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_JoinNodeContext *> CypherParser::KU_JoinNodeContext::kU_JoinNode() {
  return getRuleContexts<CypherParser::KU_JoinNodeContext>();
}

CypherParser::KU_JoinNodeContext* CypherParser::KU_JoinNodeContext::kU_JoinNode(size_t i) {
  return getRuleContext<CypherParser::KU_JoinNodeContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_JoinNodeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_JoinNodeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_JoinNodeContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_JoinNodeContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_JoinNodeContext::JOIN() {
  return getToken(CypherParser::JOIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_JoinNodeContext::MULTI_JOIN() {
  return getTokens(CypherParser::MULTI_JOIN);
}

tree::TerminalNode* CypherParser::KU_JoinNodeContext::MULTI_JOIN(size_t i) {
  return getToken(CypherParser::MULTI_JOIN, i);
}


size_t CypherParser::KU_JoinNodeContext::getRuleIndex() const {
  return CypherParser::RuleKU_JoinNode;
}



CypherParser::KU_JoinNodeContext* CypherParser::kU_JoinNode() {
   return kU_JoinNode(0);
}

CypherParser::KU_JoinNodeContext* CypherParser::kU_JoinNode(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_JoinNodeContext *_localctx = _tracker.createInstance<KU_JoinNodeContext>(_ctx, parentState);
  CypherParser::KU_JoinNodeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 150;
  enterRecursionRule(_localctx, 150, CypherParser::RuleKU_JoinNode, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1520);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__1: {
        setState(1509);
        match(CypherParser::T__1);
        setState(1511);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1510);
          match(CypherParser::SP);
        }
        setState(1513);
        kU_JoinNode(0);
        setState(1515);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1514);
          match(CypherParser::SP);
        }
        setState(1517);
        match(CypherParser::T__2);
        break;
      }

      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::FROM:
      case CypherParser::FORCE:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TO:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::UNINSTALL:
      case CypherParser::UPDATE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::YIELD:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1519);
        oC_SchemaName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(1538);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1536);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<KU_JoinNodeContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleKU_JoinNode);
          setState(1522);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(1523);
          match(CypherParser::SP);
          setState(1524);
          match(CypherParser::JOIN);
          setState(1525);
          match(CypherParser::SP);
          setState(1526);
          kU_JoinNode(5);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<KU_JoinNodeContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleKU_JoinNode);
          setState(1527);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1532); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(1528);
                    match(CypherParser::SP);
                    setState(1529);
                    match(CypherParser::MULTI_JOIN);
                    setState(1530);
                    match(CypherParser::SP);
                    setState(1531);
                    oC_SchemaName();
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(1534); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        default:
          break;
        } 
      }
      setState(1540);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

CypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnwindContext::UNWIND() {
  return getToken(CypherParser::UNWIND, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnwindContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_UnwindContext::getRuleIndex() const {
  return CypherParser::RuleOC_Unwind;
}


CypherParser::OC_UnwindContext* CypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
  enterRule(_localctx, 152, CypherParser::RuleOC_Unwind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1541);
    match(CypherParser::UNWIND);
    setState(1543);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1542);
      match(CypherParser::SP);
    }
    setState(1545);
    oC_Expression();
    setState(1546);
    match(CypherParser::SP);
    setState(1547);
    match(CypherParser::AS);
    setState(1548);
    match(CypherParser::SP);
    setState(1549);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

CypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CreateContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_CreateContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_CreateContext::getRuleIndex() const {
  return CypherParser::RuleOC_Create;
}


CypherParser::OC_CreateContext* CypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
  enterRule(_localctx, 154, CypherParser::RuleOC_Create);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1551);
    match(CypherParser::CREATE);
    setState(1553);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1552);
      match(CypherParser::SP);
    }
    setState(1555);
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

CypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MergeContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_MergeActionContext *> CypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<CypherParser::OC_MergeActionContext>();
}

CypherParser::OC_MergeActionContext* CypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<CypherParser::OC_MergeActionContext>(i);
}


size_t CypherParser::OC_MergeContext::getRuleIndex() const {
  return CypherParser::RuleOC_Merge;
}


CypherParser::OC_MergeContext* CypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
  enterRule(_localctx, 156, CypherParser::RuleOC_Merge);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1557);
    match(CypherParser::MERGE);
    setState(1559);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1558);
      match(CypherParser::SP);
    }
    setState(1561);
    oC_Pattern();
    setState(1566);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1562);
        match(CypherParser::SP);
        setState(1563);
        oC_MergeAction(); 
      }
      setState(1568);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

CypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::ON() {
  return getToken(CypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeActionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_SetContext* CypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}


size_t CypherParser::OC_MergeActionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MergeAction;
}


CypherParser::OC_MergeActionContext* CypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
  enterRule(_localctx, 158, CypherParser::RuleOC_MergeAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1579);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1569);
      match(CypherParser::ON);
      setState(1570);
      match(CypherParser::SP);
      setState(1571);
      match(CypherParser::MATCH);
      setState(1572);
      match(CypherParser::SP);
      setState(1573);
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1574);
      match(CypherParser::ON);
      setState(1575);
      match(CypherParser::SP);
      setState(1576);
      match(CypherParser::CREATE);
      setState(1577);
      match(CypherParser::SP);
      setState(1578);
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

CypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SetContext::SET() {
  return getToken(CypherParser::SET, 0);
}

std::vector<CypherParser::OC_SetItemContext *> CypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<CypherParser::OC_SetItemContext>();
}

CypherParser::OC_SetItemContext* CypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<CypherParser::OC_SetItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetContext::getRuleIndex() const {
  return CypherParser::RuleOC_Set;
}


CypherParser::OC_SetContext* CypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
  enterRule(_localctx, 160, CypherParser::RuleOC_Set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1581);
    match(CypherParser::SET);
    setState(1583);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1582);
      match(CypherParser::SP);
    }
    setState(1585);
    oC_SetItem();
    setState(1596);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1587);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1586);
          match(CypherParser::SP);
        }
        setState(1589);
        match(CypherParser::T__3);
        setState(1591);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1590);
          match(CypherParser::SP);
        }
        setState(1593);
        oC_SetItem(); 
      }
      setState(1598);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

CypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyExpressionContext* CypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<CypherParser::OC_PropertyExpressionContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SetItem;
}


CypherParser::OC_SetItemContext* CypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
  enterRule(_localctx, 162, CypherParser::RuleOC_SetItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1599);
    oC_PropertyExpression();
    setState(1601);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1600);
      match(CypherParser::SP);
    }
    setState(1603);
    match(CypherParser::T__5);
    setState(1605);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1604);
      match(CypherParser::SP);
    }
    setState(1607);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

CypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_DeleteContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_DeleteContext::getRuleIndex() const {
  return CypherParser::RuleOC_Delete;
}


CypherParser::OC_DeleteContext* CypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
  enterRule(_localctx, 164, CypherParser::RuleOC_Delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1611);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DETACH) {
      setState(1609);
      match(CypherParser::DETACH);
      setState(1610);
      match(CypherParser::SP);
    }
    setState(1613);
    match(CypherParser::DELETE);
    setState(1615);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1614);
      match(CypherParser::SP);
    }
    setState(1617);
    oC_Expression();
    setState(1628);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1619);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1618);
          match(CypherParser::SP);
        }
        setState(1621);
        match(CypherParser::T__3);
        setState(1623);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1622);
          match(CypherParser::SP);
        }
        setState(1625);
        oC_Expression(); 
      }
      setState(1630);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

CypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_WithContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_WithContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_WithContext::getRuleIndex() const {
  return CypherParser::RuleOC_With;
}


CypherParser::OC_WithContext* CypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
  enterRule(_localctx, 166, CypherParser::RuleOC_With);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1631);
    match(CypherParser::WITH);
    setState(1632);
    oC_ProjectionBody();
    setState(1637);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx)) {
    case 1: {
      setState(1634);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1633);
        match(CypherParser::SP);
      }
      setState(1636);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

CypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ReturnContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_ReturnContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}


size_t CypherParser::OC_ReturnContext::getRuleIndex() const {
  return CypherParser::RuleOC_Return;
}


CypherParser::OC_ReturnContext* CypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
  enterRule(_localctx, 168, CypherParser::RuleOC_Return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1639);
    match(CypherParser::RETURN);
    setState(1640);
    oC_ProjectionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionBodyContext ------------------------------------------------------------------

CypherParser::OC_ProjectionBodyContext::OC_ProjectionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionBodyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::OC_ProjectionBodyContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

CypherParser::OC_OrderContext* CypherParser::OC_ProjectionBodyContext::oC_Order() {
  return getRuleContext<CypherParser::OC_OrderContext>(0);
}

CypherParser::OC_SkipContext* CypherParser::OC_ProjectionBodyContext::oC_Skip() {
  return getRuleContext<CypherParser::OC_SkipContext>(0);
}

CypherParser::OC_LimitContext* CypherParser::OC_ProjectionBodyContext::oC_Limit() {
  return getRuleContext<CypherParser::OC_LimitContext>(0);
}


size_t CypherParser::OC_ProjectionBodyContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionBody;
}


CypherParser::OC_ProjectionBodyContext* CypherParser::oC_ProjectionBody() {
  OC_ProjectionBodyContext *_localctx = _tracker.createInstance<OC_ProjectionBodyContext>(_ctx, getState());
  enterRule(_localctx, 170, CypherParser::RuleOC_ProjectionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1646);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
    case 1: {
      setState(1643);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1642);
        match(CypherParser::SP);
      }
      setState(1645);
      match(CypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(1648);
    match(CypherParser::SP);
    setState(1649);
    oC_ProjectionItems();
    setState(1652);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx)) {
    case 1: {
      setState(1650);
      match(CypherParser::SP);
      setState(1651);
      oC_Order();
      break;
    }

    default:
      break;
    }
    setState(1656);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 239, _ctx)) {
    case 1: {
      setState(1654);
      match(CypherParser::SP);
      setState(1655);
      oC_Skip();
      break;
    }

    default:
      break;
    }
    setState(1660);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx)) {
    case 1: {
      setState(1658);
      match(CypherParser::SP);
      setState(1659);
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemsContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemsContext::OC_ProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<CypherParser::OC_ProjectionItemContext *> CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem() {
  return getRuleContexts<CypherParser::OC_ProjectionItemContext>();
}

CypherParser::OC_ProjectionItemContext* CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem(size_t i) {
  return getRuleContext<CypherParser::OC_ProjectionItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItems;
}


CypherParser::OC_ProjectionItemsContext* CypherParser::oC_ProjectionItems() {
  OC_ProjectionItemsContext *_localctx = _tracker.createInstance<OC_ProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 172, CypherParser::RuleOC_ProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1690);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1662);
        match(CypherParser::STAR);
        setState(1673);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1664);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1663);
              match(CypherParser::SP);
            }
            setState(1666);
            match(CypherParser::T__3);
            setState(1668);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1667);
              match(CypherParser::SP);
            }
            setState(1670);
            oC_ProjectionItem(); 
          }
          setState(1675);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx);
        }
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__6:
      case CypherParser::T__8:
      case CypherParser::T__25:
      case CypherParser::ANY:
      case CypherParser::ADD:
      case CypherParser::ALL:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CASE:
      case CypherParser::CAST:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXISTS:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::FALSE:
      case CypherParser::FROM:
      case CypherParser::FORCE:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::NOT:
      case CypherParser::NONE:
      case CypherParser::NULL_:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TO:
      case CypherParser::TRANSACTION:
      case CypherParser::TRUE:
      case CypherParser::TYPE:
      case CypherParser::UNINSTALL:
      case CypherParser::UPDATE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::SINGLE:
      case CypherParser::YIELD:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::MINUS:
      case CypherParser::StringLiteral:
      case CypherParser::DecimalInteger:
      case CypherParser::HexLetter:
      case CypherParser::ExponentDecimalReal:
      case CypherParser::RegularDecimalReal:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(1676);
        oC_ProjectionItem();
        setState(1687);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1678);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1677);
              match(CypherParser::SP);
            }
            setState(1680);
            match(CypherParser::T__3);
            setState(1682);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1681);
              match(CypherParser::SP);
            }
            setState(1684);
            oC_ProjectionItem(); 
          }
          setState(1689);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemContext::OC_ProjectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ProjectionItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_ProjectionItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_ProjectionItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItem;
}


CypherParser::OC_ProjectionItemContext* CypherParser::oC_ProjectionItem() {
  OC_ProjectionItemContext *_localctx = _tracker.createInstance<OC_ProjectionItemContext>(_ctx, getState());
  enterRule(_localctx, 174, CypherParser::RuleOC_ProjectionItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1699);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 248, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1692);
      oC_Expression();
      setState(1693);
      match(CypherParser::SP);
      setState(1694);
      match(CypherParser::AS);
      setState(1695);
      match(CypherParser::SP);
      setState(1696);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1698);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

CypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_OrderContext::ORDER() {
  return getToken(CypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrderContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_OrderContext::BY() {
  return getToken(CypherParser::BY, 0);
}

std::vector<CypherParser::OC_SortItemContext *> CypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<CypherParser::OC_SortItemContext>();
}

CypherParser::OC_SortItemContext* CypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<CypherParser::OC_SortItemContext>(i);
}


size_t CypherParser::OC_OrderContext::getRuleIndex() const {
  return CypherParser::RuleOC_Order;
}


CypherParser::OC_OrderContext* CypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
  enterRule(_localctx, 176, CypherParser::RuleOC_Order);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1701);
    match(CypherParser::ORDER);
    setState(1702);
    match(CypherParser::SP);
    setState(1703);
    match(CypherParser::BY);
    setState(1704);
    match(CypherParser::SP);
    setState(1705);
    oC_SortItem();
    setState(1713);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__3) {
      setState(1706);
      match(CypherParser::T__3);
      setState(1708);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1707);
        match(CypherParser::SP);
      }
      setState(1710);
      oC_SortItem();
      setState(1715);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

CypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SkipContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::OC_SkipContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_SkipContext::getRuleIndex() const {
  return CypherParser::RuleOC_Skip;
}


CypherParser::OC_SkipContext* CypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
  enterRule(_localctx, 178, CypherParser::RuleOC_Skip);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1716);
    match(CypherParser::L_SKIP);
    setState(1717);
    match(CypherParser::SP);
    setState(1718);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

CypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LimitContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::OC_LimitContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_LimitContext::getRuleIndex() const {
  return CypherParser::RuleOC_Limit;
}


CypherParser::OC_LimitContext* CypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
  enterRule(_localctx, 180, CypherParser::RuleOC_Limit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1720);
    match(CypherParser::LIMIT);
    setState(1721);
    match(CypherParser::SP);
    setState(1722);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

CypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(CypherParser::ASCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASC() {
  return getToken(CypherParser::ASC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(CypherParser::DESCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESC() {
  return getToken(CypherParser::DESC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_SortItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SortItem;
}


CypherParser::OC_SortItemContext* CypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
  enterRule(_localctx, 182, CypherParser::RuleOC_SortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1724);
    oC_Expression();
    setState(1729);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx)) {
    case 1: {
      setState(1726);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1725);
        match(CypherParser::SP);
      }
      setState(1728);
      _la = _input->LA(1);
      if (!(((((_la - 53) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 53)) & 12582915) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

CypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WhereContext::WHERE() {
  return getToken(CypherParser::WHERE, 0);
}

tree::TerminalNode* CypherParser::OC_WhereContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_WhereContext::getRuleIndex() const {
  return CypherParser::RuleOC_Where;
}


CypherParser::OC_WhereContext* CypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
  enterRule(_localctx, 184, CypherParser::RuleOC_Where);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1731);
    match(CypherParser::WHERE);
    setState(1732);
    match(CypherParser::SP);
    setState(1733);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

CypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PatternPartContext *> CypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<CypherParser::OC_PatternPartContext>();
}

CypherParser::OC_PatternPartContext* CypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<CypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_Pattern;
}


CypherParser::OC_PatternContext* CypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
  enterRule(_localctx, 186, CypherParser::RuleOC_Pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1735);
    oC_PatternPart();
    setState(1746);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1737);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1736);
          match(CypherParser::SP);
        }
        setState(1739);
        match(CypherParser::T__3);
        setState(1741);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1740);
          match(CypherParser::SP);
        }
        setState(1743);
        oC_PatternPart(); 
      }
      setState(1748);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

CypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_AnonymousPatternPartContext* CypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<CypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternPart;
}


CypherParser::OC_PatternPartContext* CypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
  enterRule(_localctx, 188, CypherParser::RuleOC_PatternPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1760);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::FROM:
      case CypherParser::FORCE:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TO:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::UNINSTALL:
      case CypherParser::UPDATE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::YIELD:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1749);
        oC_Variable();
        setState(1751);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1750);
          match(CypherParser::SP);
        }
        setState(1753);
        match(CypherParser::T__5);
        setState(1755);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1754);
          match(CypherParser::SP);
        }
        setState(1757);
        oC_AnonymousPatternPart();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(1759);
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

CypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PatternElementContext* CypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnonymousPatternPart;
}


CypherParser::OC_AnonymousPatternPartContext* CypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
  enterRule(_localctx, 190, CypherParser::RuleOC_AnonymousPatternPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1762);
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

CypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternElementContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PatternElementContext* CypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_PatternElementContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElement;
}


CypherParser::OC_PatternElementContext* CypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 192, CypherParser::RuleOC_PatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1778);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1764);
      oC_NodePattern();
      setState(1771);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 260, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1766);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1765);
            match(CypherParser::SP);
          }
          setState(1768);
          oC_PatternElementChain(); 
        }
        setState(1773);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 260, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1774);
      match(CypherParser::T__1);
      setState(1775);
      oC_PatternElement();
      setState(1776);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

CypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodePatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_NodePatternContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_NodePatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodePattern;
}


CypherParser::OC_NodePatternContext* CypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 194, CypherParser::RuleOC_NodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1780);
    match(CypherParser::T__1);
    setState(1782);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1781);
      match(CypherParser::SP);
    }
    setState(1788);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -6371186097845698560) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1151940922579049251) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 633595061228635) != 0)) {
      setState(1784);
      oC_Variable();
      setState(1786);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1785);
        match(CypherParser::SP);
      }
    }
    setState(1794);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1790);
      oC_NodeLabels();
      setState(1792);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1791);
        match(CypherParser::SP);
      }
    }
    setState(1800);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1796);
      kU_Properties();
      setState(1798);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1797);
        match(CypherParser::SP);
      }
    }
    setState(1802);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

CypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RelationshipPatternContext* CypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<CypherParser::OC_RelationshipPatternContext>(0);
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_PatternElementChainContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElementChain;
}


CypherParser::OC_PatternElementChainContext* CypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
  enterRule(_localctx, 196, CypherParser::RuleOC_PatternElementChain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1804);
    oC_RelationshipPattern();
    setState(1806);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1805);
      match(CypherParser::SP);
    }
    setState(1808);
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

CypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LeftArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<CypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<CypherParser::OC_DashContext *> CypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<CypherParser::OC_DashContext>();
}

CypherParser::OC_DashContext* CypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<CypherParser::OC_DashContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_RelationshipDetailContext* CypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<CypherParser::OC_RelationshipDetailContext>(0);
}

CypherParser::OC_RightArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<CypherParser::OC_RightArrowHeadContext>(0);
}


size_t CypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipPattern;
}


CypherParser::OC_RelationshipPatternContext* CypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
  enterRule(_localctx, 198, CypherParser::RuleOC_RelationshipPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1854);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1810);
      oC_LeftArrowHead();
      setState(1812);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1811);
        match(CypherParser::SP);
      }
      setState(1814);
      oC_Dash();
      setState(1816);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 271, _ctx)) {
      case 1: {
        setState(1815);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1819);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1818);
        oC_RelationshipDetail();
      }
      setState(1822);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1821);
        match(CypherParser::SP);
      }
      setState(1824);
      oC_Dash();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1826);
      oC_Dash();
      setState(1828);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 274, _ctx)) {
      case 1: {
        setState(1827);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1831);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1830);
        oC_RelationshipDetail();
      }
      setState(1834);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1833);
        match(CypherParser::SP);
      }
      setState(1836);
      oC_Dash();
      setState(1838);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1837);
        match(CypherParser::SP);
      }
      setState(1840);
      oC_RightArrowHead();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1842);
      oC_Dash();
      setState(1844);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx)) {
      case 1: {
        setState(1843);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1847);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1846);
        oC_RelationshipDetail();
      }
      setState(1850);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1849);
        match(CypherParser::SP);
      }
      setState(1852);
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

CypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_RelationshipTypesContext* CypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<CypherParser::OC_RelationshipTypesContext>(0);
}

CypherParser::KU_RecursiveDetailContext* CypherParser::OC_RelationshipDetailContext::kU_RecursiveDetail() {
  return getRuleContext<CypherParser::KU_RecursiveDetailContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_RelationshipDetailContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipDetail;
}


CypherParser::OC_RelationshipDetailContext* CypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
  enterRule(_localctx, 200, CypherParser::RuleOC_RelationshipDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1856);
    match(CypherParser::T__6);
    setState(1858);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1857);
      match(CypherParser::SP);
    }
    setState(1864);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -6371186097845698560) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1151940922579049251) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 633595061228635) != 0)) {
      setState(1860);
      oC_Variable();
      setState(1862);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1861);
        match(CypherParser::SP);
      }
    }
    setState(1870);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1866);
      oC_RelationshipTypes();
      setState(1868);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1867);
        match(CypherParser::SP);
      }
    }
    setState(1876);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::STAR) {
      setState(1872);
      kU_RecursiveDetail();
      setState(1874);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1873);
        match(CypherParser::SP);
      }
    }
    setState(1882);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1878);
      kU_Properties();
      setState(1880);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1879);
        match(CypherParser::SP);
      }
    }
    setState(1884);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertiesContext ------------------------------------------------------------------

CypherParser::KU_PropertiesContext::KU_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_PropertiesContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertiesContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::KU_PropertiesContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::KU_PropertiesContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::KU_PropertiesContext::getRuleIndex() const {
  return CypherParser::RuleKU_Properties;
}


CypherParser::KU_PropertiesContext* CypherParser::kU_Properties() {
  KU_PropertiesContext *_localctx = _tracker.createInstance<KU_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 202, CypherParser::RuleKU_Properties);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1886);
    match(CypherParser::T__8);
    setState(1888);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1887);
      match(CypherParser::SP);
    }
    setState(1923);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -6371186097845698560) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1151940922579049251) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 633595061228635) != 0)) {
      setState(1890);
      oC_PropertyKeyName();
      setState(1892);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1891);
        match(CypherParser::SP);
      }
      setState(1894);
      match(CypherParser::COLON);
      setState(1896);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1895);
        match(CypherParser::SP);
      }
      setState(1898);
      oC_Expression();
      setState(1900);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1899);
        match(CypherParser::SP);
      }
      setState(1920);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__3) {
        setState(1902);
        match(CypherParser::T__3);
        setState(1904);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1903);
          match(CypherParser::SP);
        }
        setState(1906);
        oC_PropertyKeyName();
        setState(1908);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1907);
          match(CypherParser::SP);
        }
        setState(1910);
        match(CypherParser::COLON);
        setState(1912);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1911);
          match(CypherParser::SP);
        }
        setState(1914);
        oC_Expression();
        setState(1916);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1915);
          match(CypherParser::SP);
        }
        setState(1922);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1925);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

CypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_RelTypeNameContext *> CypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<CypherParser::OC_RelTypeNameContext>();
}

CypherParser::OC_RelTypeNameContext* CypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<CypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipTypes;
}


CypherParser::OC_RelationshipTypesContext* CypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
  enterRule(_localctx, 204, CypherParser::RuleOC_RelationshipTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1927);
    match(CypherParser::COLON);
    setState(1929);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1928);
      match(CypherParser::SP);
    }
    setState(1931);
    oC_RelTypeName();
    setState(1945);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1933);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1932);
          match(CypherParser::SP);
        }
        setState(1935);
        match(CypherParser::T__10);
        setState(1937);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::COLON) {
          setState(1936);
          match(CypherParser::COLON);
        }
        setState(1940);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1939);
          match(CypherParser::SP);
        }
        setState(1942);
        oC_RelTypeName(); 
      }
      setState(1947);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NodeLabelContext *> CypherParser::OC_NodeLabelsContext::oC_NodeLabel() {
  return getRuleContexts<CypherParser::OC_NodeLabelContext>();
}

CypherParser::OC_NodeLabelContext* CypherParser::OC_NodeLabelsContext::oC_NodeLabel(size_t i) {
  return getRuleContext<CypherParser::OC_NodeLabelContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabels;
}


CypherParser::OC_NodeLabelsContext* CypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
  enterRule(_localctx, 206, CypherParser::RuleOC_NodeLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1948);
    oC_NodeLabel();
    setState(1955);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1950);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1949);
          match(CypherParser::SP);
        }
        setState(1952);
        oC_NodeLabel(); 
      }
      setState(1957);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelContext::OC_NodeLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LabelNameContext* CypherParser::OC_NodeLabelContext::oC_LabelName() {
  return getRuleContext<CypherParser::OC_LabelNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_NodeLabelContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabel;
}


CypherParser::OC_NodeLabelContext* CypherParser::oC_NodeLabel() {
  OC_NodeLabelContext *_localctx = _tracker.createInstance<OC_NodeLabelContext>(_ctx, getState());
  enterRule(_localctx, 208, CypherParser::RuleOC_NodeLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1958);
    match(CypherParser::COLON);
    setState(1960);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1959);
      match(CypherParser::SP);
    }
    setState(1962);
    oC_LabelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RecursiveDetailContext ------------------------------------------------------------------

CypherParser::KU_RecursiveDetailContext::KU_RecursiveDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RecursiveDetailContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

CypherParser::KU_RecursiveTypeContext* CypherParser::KU_RecursiveDetailContext::kU_RecursiveType() {
  return getRuleContext<CypherParser::KU_RecursiveTypeContext>(0);
}

CypherParser::OC_RangeLiteralContext* CypherParser::KU_RecursiveDetailContext::oC_RangeLiteral() {
  return getRuleContext<CypherParser::OC_RangeLiteralContext>(0);
}

CypherParser::KU_RecursiveComprehensionContext* CypherParser::KU_RecursiveDetailContext::kU_RecursiveComprehension() {
  return getRuleContext<CypherParser::KU_RecursiveComprehensionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RecursiveDetailContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RecursiveDetailContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_RecursiveDetailContext::getRuleIndex() const {
  return CypherParser::RuleKU_RecursiveDetail;
}


CypherParser::KU_RecursiveDetailContext* CypherParser::kU_RecursiveDetail() {
  KU_RecursiveDetailContext *_localctx = _tracker.createInstance<KU_RecursiveDetailContext>(_ctx, getState());
  enterRule(_localctx, 210, CypherParser::RuleKU_RecursiveDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1964);
    match(CypherParser::STAR);
    setState(1969);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx)) {
    case 1: {
      setState(1966);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1965);
        match(CypherParser::SP);
      }
      setState(1968);
      kU_RecursiveType();
      break;
    }

    default:
      break;
    }
    setState(1975);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 312, _ctx)) {
    case 1: {
      setState(1972);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx)) {
      case 1: {
        setState(1971);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1974);
      oC_RangeLiteral();
      break;
    }

    default:
      break;
    }
    setState(1981);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx)) {
    case 1: {
      setState(1978);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1977);
        match(CypherParser::SP);
      }
      setState(1980);
      kU_RecursiveComprehension();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RecursiveTypeContext ------------------------------------------------------------------

CypherParser::KU_RecursiveTypeContext::KU_RecursiveTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RecursiveTypeContext::WSHORTEST() {
  return getToken(CypherParser::WSHORTEST, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_RecursiveTypeContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_RecursiveTypeContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RecursiveTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RecursiveTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_RecursiveTypeContext::SHORTEST() {
  return getToken(CypherParser::SHORTEST, 0);
}

tree::TerminalNode* CypherParser::KU_RecursiveTypeContext::TRAIL() {
  return getToken(CypherParser::TRAIL, 0);
}

tree::TerminalNode* CypherParser::KU_RecursiveTypeContext::ACYCLIC() {
  return getToken(CypherParser::ACYCLIC, 0);
}


size_t CypherParser::KU_RecursiveTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_RecursiveType;
}


CypherParser::KU_RecursiveTypeContext* CypherParser::kU_RecursiveType() {
  KU_RecursiveTypeContext *_localctx = _tracker.createInstance<KU_RecursiveTypeContext>(_ctx, getState());
  enterRule(_localctx, 212, CypherParser::RuleKU_RecursiveType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2007);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1985);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::ALL) {
        setState(1983);
        match(CypherParser::ALL);
        setState(1984);
        match(CypherParser::SP);
      }
      setState(1987);
      match(CypherParser::WSHORTEST);
      setState(1989);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1988);
        match(CypherParser::SP);
      }
      setState(1991);
      match(CypherParser::T__1);
      setState(1993);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1992);
        match(CypherParser::SP);
      }
      setState(1995);
      oC_PropertyKeyName();
      setState(1997);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1996);
        match(CypherParser::SP);
      }
      setState(1999);
      match(CypherParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2001);
      match(CypherParser::SHORTEST);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2002);
      match(CypherParser::ALL);
      setState(2003);
      match(CypherParser::SP);
      setState(2004);
      match(CypherParser::SHORTEST);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2005);
      match(CypherParser::TRAIL);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2006);
      match(CypherParser::ACYCLIC);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

CypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LowerBoundContext* CypherParser::OC_RangeLiteralContext::oC_LowerBound() {
  return getRuleContext<CypherParser::OC_LowerBoundContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_UpperBoundContext* CypherParser::OC_RangeLiteralContext::oC_UpperBound() {
  return getRuleContext<CypherParser::OC_UpperBoundContext>(0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_RangeLiteral;
}


CypherParser::OC_RangeLiteralContext* CypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 214, CypherParser::RuleOC_RangeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2023);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2010);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(2009);
        oC_LowerBound();
      }
      setState(2013);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2012);
        match(CypherParser::SP);
      }
      setState(2015);
      match(CypherParser::T__11);
      setState(2017);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 322, _ctx)) {
      case 1: {
        setState(2016);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(2020);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(2019);
        oC_UpperBound();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2022);
      oC_IntegerLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RecursiveComprehensionContext ------------------------------------------------------------------

CypherParser::KU_RecursiveComprehensionContext::KU_RecursiveComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_VariableContext *> CypherParser::KU_RecursiveComprehensionContext::oC_Variable() {
  return getRuleContexts<CypherParser::OC_VariableContext>();
}

CypherParser::OC_VariableContext* CypherParser::KU_RecursiveComprehensionContext::oC_Variable(size_t i) {
  return getRuleContext<CypherParser::OC_VariableContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RecursiveComprehensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RecursiveComprehensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_RecursiveComprehensionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

std::vector<CypherParser::KU_RecursiveProjectionItemsContext *> CypherParser::KU_RecursiveComprehensionContext::kU_RecursiveProjectionItems() {
  return getRuleContexts<CypherParser::KU_RecursiveProjectionItemsContext>();
}

CypherParser::KU_RecursiveProjectionItemsContext* CypherParser::KU_RecursiveComprehensionContext::kU_RecursiveProjectionItems(size_t i) {
  return getRuleContext<CypherParser::KU_RecursiveProjectionItemsContext>(i);
}


size_t CypherParser::KU_RecursiveComprehensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RecursiveComprehension;
}


CypherParser::KU_RecursiveComprehensionContext* CypherParser::kU_RecursiveComprehension() {
  KU_RecursiveComprehensionContext *_localctx = _tracker.createInstance<KU_RecursiveComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 216, CypherParser::RuleKU_RecursiveComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2025);
    match(CypherParser::T__1);
    setState(2027);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2026);
      match(CypherParser::SP);
    }
    setState(2029);
    oC_Variable();
    setState(2031);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2030);
      match(CypherParser::SP);
    }
    setState(2033);
    match(CypherParser::T__3);
    setState(2035);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2034);
      match(CypherParser::SP);
    }
    setState(2037);
    oC_Variable();
    setState(2049);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx)) {
    case 1: {
      setState(2039);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2038);
        match(CypherParser::SP);
      }
      setState(2041);
      match(CypherParser::T__10);
      setState(2043);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2042);
        match(CypherParser::SP);
      }
      setState(2045);
      oC_Where();
      setState(2047);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx)) {
      case 1: {
        setState(2046);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    setState(2070);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__10 || _la == CypherParser::SP) {
      setState(2052);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2051);
        match(CypherParser::SP);
      }
      setState(2054);
      match(CypherParser::T__10);
      setState(2056);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2055);
        match(CypherParser::SP);
      }
      setState(2058);
      kU_RecursiveProjectionItems();
      setState(2060);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2059);
        match(CypherParser::SP);
      }
      setState(2062);
      match(CypherParser::T__3);
      setState(2064);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2063);
        match(CypherParser::SP);
      }
      setState(2066);
      kU_RecursiveProjectionItems();
      setState(2068);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2067);
        match(CypherParser::SP);
      }
    }
    setState(2072);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RecursiveProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_RecursiveProjectionItemsContext::KU_RecursiveProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_RecursiveProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RecursiveProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_RecursiveProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_RecursiveProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_RecursiveProjectionItems;
}


CypherParser::KU_RecursiveProjectionItemsContext* CypherParser::kU_RecursiveProjectionItems() {
  KU_RecursiveProjectionItemsContext *_localctx = _tracker.createInstance<KU_RecursiveProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 218, CypherParser::RuleKU_RecursiveProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2074);
    match(CypherParser::T__8);
    setState(2076);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx)) {
    case 1: {
      setState(2075);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2079);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4641100153426541948) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1144059623222237987) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 686548317008987) != 0)) {
      setState(2078);
      oC_ProjectionItems();
    }
    setState(2082);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2081);
      match(CypherParser::SP);
    }
    setState(2084);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LowerBoundContext ------------------------------------------------------------------

CypherParser::OC_LowerBoundContext::OC_LowerBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LowerBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_LowerBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_LowerBound;
}


CypherParser::OC_LowerBoundContext* CypherParser::oC_LowerBound() {
  OC_LowerBoundContext *_localctx = _tracker.createInstance<OC_LowerBoundContext>(_ctx, getState());
  enterRule(_localctx, 220, CypherParser::RuleOC_LowerBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2086);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpperBoundContext ------------------------------------------------------------------

CypherParser::OC_UpperBoundContext::OC_UpperBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UpperBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_UpperBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpperBound;
}


CypherParser::OC_UpperBoundContext* CypherParser::oC_UpperBound() {
  OC_UpperBoundContext *_localctx = _tracker.createInstance<OC_UpperBoundContext>(_ctx, getState());
  enterRule(_localctx, 222, CypherParser::RuleOC_UpperBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2088);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

CypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_LabelNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_LabelName;
}


CypherParser::OC_LabelNameContext* CypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 224, CypherParser::RuleOC_LabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2090);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

CypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelTypeName;
}


CypherParser::OC_RelTypeNameContext* CypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 226, CypherParser::RuleOC_RelTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2092);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

CypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_OrExpressionContext* CypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<CypherParser::OC_OrExpressionContext>(0);
}


size_t CypherParser::OC_ExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Expression;
}


CypherParser::OC_ExpressionContext* CypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 228, CypherParser::RuleOC_Expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2094);
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

CypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_XorExpressionContext *> CypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<CypherParser::OC_XorExpressionContext>();
}

CypherParser::OC_XorExpressionContext* CypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::OR() {
  return getTokens(CypherParser::OR);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(CypherParser::OR, i);
}


size_t CypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_OrExpression;
}


CypherParser::OC_OrExpressionContext* CypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 230, CypherParser::RuleOC_OrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2096);
    oC_XorExpression();
    setState(2103);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2097);
        match(CypherParser::SP);
        setState(2098);
        match(CypherParser::OR);
        setState(2099);
        match(CypherParser::SP);
        setState(2100);
        oC_XorExpression(); 
      }
      setState(2105);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

CypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AndExpressionContext *> CypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<CypherParser::OC_AndExpressionContext>();
}

CypherParser::OC_AndExpressionContext* CypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(CypherParser::XOR);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(CypherParser::XOR, i);
}


size_t CypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_XorExpression;
}


CypherParser::OC_XorExpressionContext* CypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 232, CypherParser::RuleOC_XorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2106);
    oC_AndExpression();
    setState(2113);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2107);
        match(CypherParser::SP);
        setState(2108);
        match(CypherParser::XOR);
        setState(2109);
        match(CypherParser::SP);
        setState(2110);
        oC_AndExpression(); 
      }
      setState(2115);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

CypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NotExpressionContext *> CypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<CypherParser::OC_NotExpressionContext>();
}

CypherParser::OC_NotExpressionContext* CypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<CypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::AND() {
  return getTokens(CypherParser::AND);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(CypherParser::AND, i);
}


size_t CypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AndExpression;
}


CypherParser::OC_AndExpressionContext* CypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 234, CypherParser::RuleOC_AndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2116);
    oC_NotExpression();
    setState(2123);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 343, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2117);
        match(CypherParser::SP);
        setState(2118);
        match(CypherParser::AND);
        setState(2119);
        match(CypherParser::SP);
        setState(2120);
        oC_NotExpression(); 
      }
      setState(2125);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 343, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

CypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ComparisonExpressionContext* CypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<CypherParser::OC_ComparisonExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::NOT() {
  return getTokens(CypherParser::NOT);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::NOT(size_t i) {
  return getToken(CypherParser::NOT, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NotExpression;
}


CypherParser::OC_NotExpressionContext* CypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
  enterRule(_localctx, 236, CypherParser::RuleOC_NotExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2132);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::NOT) {
      setState(2126);
      match(CypherParser::NOT);
      setState(2128);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2127);
        match(CypherParser::SP);
      }
      setState(2134);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2135);
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

CypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseOrOperatorExpressionContext *> CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseOrOperatorExpressionContext>();
}

CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseOrOperatorExpressionContext>(i);
}

std::vector<CypherParser::KU_ComparisonOperatorContext *> CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator() {
  return getRuleContexts<CypherParser::KU_ComparisonOperatorContext>();
}

CypherParser::KU_ComparisonOperatorContext* CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator(size_t i) {
  return getRuleContext<CypherParser::KU_ComparisonOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::INVALID_NOT_EQUAL() {
  return getToken(CypherParser::INVALID_NOT_EQUAL, 0);
}


size_t CypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ComparisonExpression;
}


CypherParser::OC_ComparisonExpressionContext* CypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 238, CypherParser::RuleOC_ComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2185);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 356, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2137);
      kU_BitwiseOrOperatorExpression();
      setState(2147);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx)) {
      case 1: {
        setState(2139);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2138);
          match(CypherParser::SP);
        }
        setState(2141);
        kU_ComparisonOperator();
        setState(2143);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2142);
          match(CypherParser::SP);
        }
        setState(2145);
        kU_BitwiseOrOperatorExpression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2149);
      kU_BitwiseOrOperatorExpression();

      setState(2151);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2150);
        match(CypherParser::SP);
      }
      setState(2153);
      antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken = match(CypherParser::INVALID_NOT_EQUAL);
      setState(2155);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2154);
        match(CypherParser::SP);
      }
      setState(2157);
      kU_BitwiseOrOperatorExpression();
       notifyInvalidNotEqualOperator(antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken); 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2161);
      kU_BitwiseOrOperatorExpression();
      setState(2163);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2162);
        match(CypherParser::SP);
      }
      setState(2165);
      kU_ComparisonOperator();
      setState(2167);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2166);
        match(CypherParser::SP);
      }
      setState(2169);
      kU_BitwiseOrOperatorExpression();
      setState(2179); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2171);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2170);
                  match(CypherParser::SP);
                }
                setState(2173);
                kU_ComparisonOperator();
                setState(2175);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2174);
                  match(CypherParser::SP);
                }
                setState(2177);
                kU_BitwiseOrOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2181); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 355, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
       notifyNonBinaryComparison(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ComparisonOperatorContext ------------------------------------------------------------------

CypherParser::KU_ComparisonOperatorContext::KU_ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_ComparisonOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_ComparisonOperator;
}


CypherParser::KU_ComparisonOperatorContext* CypherParser::kU_ComparisonOperator() {
  KU_ComparisonOperatorContext *_localctx = _tracker.createInstance<KU_ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 240, CypherParser::RuleKU_ComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2187);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 254016) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseOrOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseOrOperatorExpressionContext::KU_BitwiseOrOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseAndOperatorExpressionContext *> CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseAndOperatorExpressionContext>();
}

CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseAndOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseOrOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseOrOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseOrOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseOrOperatorExpression;
}


CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::kU_BitwiseOrOperatorExpression() {
  KU_BitwiseOrOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseOrOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 242, CypherParser::RuleKU_BitwiseOrOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2189);
    kU_BitwiseAndOperatorExpression();
    setState(2200);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2191);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2190);
          match(CypherParser::SP);
        }
        setState(2193);
        match(CypherParser::T__10);
        setState(2195);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2194);
          match(CypherParser::SP);
        }
        setState(2197);
        kU_BitwiseAndOperatorExpression(); 
      }
      setState(2202);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseAndOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseAndOperatorExpressionContext::KU_BitwiseAndOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitShiftOperatorExpressionContext *> CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorExpressionContext>();
}

CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseAndOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseAndOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseAndOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseAndOperatorExpression;
}


CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::kU_BitwiseAndOperatorExpression() {
  KU_BitwiseAndOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseAndOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 244, CypherParser::RuleKU_BitwiseAndOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2203);
    kU_BitShiftOperatorExpression();
    setState(2214);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 362, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2205);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2204);
          match(CypherParser::SP);
        }
        setState(2207);
        match(CypherParser::T__17);
        setState(2209);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2208);
          match(CypherParser::SP);
        }
        setState(2211);
        kU_BitShiftOperatorExpression(); 
      }
      setState(2216);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 362, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorExpressionContext::KU_BitShiftOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AddOrSubtractExpressionContext *> CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContexts<CypherParser::OC_AddOrSubtractExpressionContext>();
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AddOrSubtractExpressionContext>(i);
}

std::vector<CypherParser::KU_BitShiftOperatorContext *> CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorContext>();
}

CypherParser::KU_BitShiftOperatorContext* CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitShiftOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitShiftOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitShiftOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperatorExpression;
}


CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::kU_BitShiftOperatorExpression() {
  KU_BitShiftOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 246, CypherParser::RuleKU_BitShiftOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2217);
    oC_AddOrSubtractExpression();
    setState(2229);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 365, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2219);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2218);
          match(CypherParser::SP);
        }
        setState(2221);
        kU_BitShiftOperator();
        setState(2223);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2222);
          match(CypherParser::SP);
        }
        setState(2225);
        oC_AddOrSubtractExpression(); 
      }
      setState(2231);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 365, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorContext::KU_BitShiftOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_BitShiftOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperator;
}


CypherParser::KU_BitShiftOperatorContext* CypherParser::kU_BitShiftOperator() {
  KU_BitShiftOperatorContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorContext>(_ctx, getState());
  enterRule(_localctx, 248, CypherParser::RuleKU_BitShiftOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2232);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__18

    || _la == CypherParser::T__19)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

CypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_MultiplyDivideModuloExpressionContext *> CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<CypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<CypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<CypherParser::KU_AddOrSubtractOperatorContext *> CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator() {
  return getRuleContexts<CypherParser::KU_AddOrSubtractOperatorContext>();
}

CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator(size_t i) {
  return getRuleContext<CypherParser::KU_AddOrSubtractOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AddOrSubtractExpression;
}


CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 250, CypherParser::RuleOC_AddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2234);
    oC_MultiplyDivideModuloExpression();
    setState(2246);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2236);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2235);
          match(CypherParser::SP);
        }
        setState(2238);
        kU_AddOrSubtractOperator();
        setState(2240);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2239);
          match(CypherParser::SP);
        }
        setState(2242);
        oC_MultiplyDivideModuloExpression(); 
      }
      setState(2248);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddOrSubtractOperatorContext ------------------------------------------------------------------

CypherParser::KU_AddOrSubtractOperatorContext::KU_AddOrSubtractOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddOrSubtractOperatorContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_AddOrSubtractOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddOrSubtractOperator;
}


CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::kU_AddOrSubtractOperator() {
  KU_AddOrSubtractOperatorContext *_localctx = _tracker.createInstance<KU_AddOrSubtractOperatorContext>(_ctx, getState());
  enterRule(_localctx, 252, CypherParser::RuleKU_AddOrSubtractOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2249);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__20 || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

CypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PowerOfExpressionContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<CypherParser::OC_PowerOfExpressionContext>();
}

CypherParser::OC_PowerOfExpressionContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<CypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<CypherParser::KU_MultiplyDivideModuloOperatorContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator() {
  return getRuleContexts<CypherParser::KU_MultiplyDivideModuloOperatorContext>();
}

CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator(size_t i) {
  return getRuleContext<CypherParser::KU_MultiplyDivideModuloOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiplyDivideModuloExpression;
}


CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
  enterRule(_localctx, 254, CypherParser::RuleOC_MultiplyDivideModuloExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2251);
    oC_PowerOfExpression();
    setState(2263);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 371, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2253);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2252);
          match(CypherParser::SP);
        }
        setState(2255);
        kU_MultiplyDivideModuloOperator();
        setState(2257);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2256);
          match(CypherParser::SP);
        }
        setState(2259);
        oC_PowerOfExpression(); 
      }
      setState(2265);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 371, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MultiplyDivideModuloOperatorContext ------------------------------------------------------------------

CypherParser::KU_MultiplyDivideModuloOperatorContext::KU_MultiplyDivideModuloOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MultiplyDivideModuloOperatorContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}


size_t CypherParser::KU_MultiplyDivideModuloOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_MultiplyDivideModuloOperator;
}


CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::kU_MultiplyDivideModuloOperator() {
  KU_MultiplyDivideModuloOperatorContext *_localctx = _tracker.createInstance<KU_MultiplyDivideModuloOperatorContext>(_ctx, getState());
  enterRule(_localctx, 256, CypherParser::RuleKU_MultiplyDivideModuloOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2266);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__21

    || _la == CypherParser::T__22 || _la == CypherParser::STAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

CypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext *> CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression() {
  return getRuleContexts<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>();
}

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression(size_t i) {
  return getRuleContext<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PowerOfExpression;
}


CypherParser::OC_PowerOfExpressionContext* CypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
  enterRule(_localctx, 258, CypherParser::RuleOC_PowerOfExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2268);
    oC_UnaryAddSubtractOrFactorialExpression();
    setState(2279);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 374, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2270);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2269);
          match(CypherParser::SP);
        }
        setState(2272);
        match(CypherParser::T__23);
        setState(2274);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2273);
          match(CypherParser::SP);
        }
        setState(2276);
        oC_UnaryAddSubtractOrFactorialExpression(); 
      }
      setState(2281);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 374, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddSubtractOrFactorialExpressionContext ------------------------------------------------------------------

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::OC_UnaryAddSubtractOrFactorialExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::oC_StringListNullOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringListNullOperatorExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS() {
  return getTokens(CypherParser::MINUS);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS(size_t i) {
  return getToken(CypherParser::MINUS, i);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::FACTORIAL() {
  return getToken(CypherParser::FACTORIAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression;
}


CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::oC_UnaryAddSubtractOrFactorialExpression() {
  OC_UnaryAddSubtractOrFactorialExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddSubtractOrFactorialExpressionContext>(_ctx, getState());
  enterRule(_localctx, 260, CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2288);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::MINUS) {
      setState(2282);
      match(CypherParser::MINUS);
      setState(2284);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2283);
        match(CypherParser::SP);
      }
      setState(2290);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2291);
    oC_StringListNullOperatorExpression();
    setState(2296);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 378, _ctx)) {
    case 1: {
      setState(2293);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2292);
        match(CypherParser::SP);
      }
      setState(2295);
      match(CypherParser::FACTORIAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringListNullOperatorExpressionContext::OC_StringListNullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_StringOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringOperatorExpressionContext>(0);
}

CypherParser::OC_NullOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression() {
  return getRuleContext<CypherParser::OC_NullOperatorExpressionContext>(0);
}

std::vector<CypherParser::OC_ListOperatorExpressionContext *> CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<CypherParser::OC_ListOperatorExpressionContext>();
}

CypherParser::OC_ListOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_ListOperatorExpressionContext>(i);
}


size_t CypherParser::OC_StringListNullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringListNullOperatorExpression;
}


CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::oC_StringListNullOperatorExpression() {
  OC_StringListNullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 262, CypherParser::RuleOC_StringListNullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2298);
    oC_PropertyOrLabelsExpression();
    setState(2306);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 380, _ctx)) {
    case 1: {
      setState(2299);
      oC_StringOperatorExpression();
      break;
    }

    case 2: {
      setState(2301); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2300);
                oC_ListOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2303); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 379, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 3: {
      setState(2305);
      oC_NullOperatorExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::IN() {
  return getToken(CypherParser::IN, 0);
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_ListOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}


size_t CypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListOperatorExpression;
}


CypherParser::OC_ListOperatorExpressionContext* CypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 264, CypherParser::RuleOC_ListOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2327);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 384, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2308);
      match(CypherParser::SP);
      setState(2309);
      match(CypherParser::IN);
      setState(2311);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2310);
        match(CypherParser::SP);
      }
      setState(2313);
      oC_PropertyOrLabelsExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2314);
      match(CypherParser::T__6);
      setState(2315);
      oC_Expression();
      setState(2316);
      match(CypherParser::T__7);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2318);
      match(CypherParser::T__6);
      setState(2320);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4641100153426541948) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1144059623222237987) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 686547780138075) != 0)) {
        setState(2319);
        oC_Expression();
      }
      setState(2322);
      match(CypherParser::COLON);
      setState(2324);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4641100153426541948) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1144059623222237987) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 686547780138075) != 0)) {
        setState(2323);
        oC_Expression();
      }
      setState(2326);
      match(CypherParser::T__7);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringOperatorExpressionContext::OC_StringOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_RegularExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_RegularExpression() {
  return getRuleContext<CypherParser::OC_RegularExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_StringOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::STARTS() {
  return getToken(CypherParser::STARTS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::ENDS() {
  return getToken(CypherParser::ENDS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}


size_t CypherParser::OC_StringOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringOperatorExpression;
}


CypherParser::OC_StringOperatorExpressionContext* CypherParser::oC_StringOperatorExpression() {
  OC_StringOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 266, CypherParser::RuleOC_StringOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2340);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 385, _ctx)) {
    case 1: {
      setState(2329);
      oC_RegularExpression();
      break;
    }

    case 2: {
      setState(2330);
      match(CypherParser::SP);
      setState(2331);
      match(CypherParser::STARTS);
      setState(2332);
      match(CypherParser::SP);
      setState(2333);
      match(CypherParser::WITH);
      break;
    }

    case 3: {
      setState(2334);
      match(CypherParser::SP);
      setState(2335);
      match(CypherParser::ENDS);
      setState(2336);
      match(CypherParser::SP);
      setState(2337);
      match(CypherParser::WITH);
      break;
    }

    case 4: {
      setState(2338);
      match(CypherParser::SP);
      setState(2339);
      match(CypherParser::CONTAINS);
      break;
    }

    default:
      break;
    }
    setState(2343);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2342);
      match(CypherParser::SP);
    }
    setState(2345);
    oC_PropertyOrLabelsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularExpressionContext ------------------------------------------------------------------

CypherParser::OC_RegularExpressionContext::OC_RegularExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RegularExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_RegularExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularExpression;
}


CypherParser::OC_RegularExpressionContext* CypherParser::oC_RegularExpression() {
  OC_RegularExpressionContext *_localctx = _tracker.createInstance<OC_RegularExpressionContext>(_ctx, getState());
  enterRule(_localctx, 268, CypherParser::RuleOC_RegularExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2348);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2347);
      match(CypherParser::SP);
    }
    setState(2350);
    match(CypherParser::T__24);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_NullOperatorExpressionContext::OC_NullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NullOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}


size_t CypherParser::OC_NullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NullOperatorExpression;
}


CypherParser::OC_NullOperatorExpressionContext* CypherParser::oC_NullOperatorExpression() {
  OC_NullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 270, CypherParser::RuleOC_NullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2362);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 388, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2352);
      match(CypherParser::SP);
      setState(2353);
      match(CypherParser::IS);
      setState(2354);
      match(CypherParser::SP);
      setState(2355);
      match(CypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2356);
      match(CypherParser::SP);
      setState(2357);
      match(CypherParser::IS);
      setState(2358);
      match(CypherParser::SP);
      setState(2359);
      match(CypherParser::NOT);
      setState(2360);
      match(CypherParser::SP);
      setState(2361);
      match(CypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyOrLabelsExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyOrLabelsExpressionContext::OC_PropertyOrLabelsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

std::vector<CypherParser::OC_PropertyLookupContext *> CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<CypherParser::OC_PropertyLookupContext>();
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PropertyOrLabelsExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PropertyOrLabelsExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PropertyOrLabelsExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyOrLabelsExpression;
}


CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::oC_PropertyOrLabelsExpression() {
  OC_PropertyOrLabelsExpressionContext *_localctx = _tracker.createInstance<OC_PropertyOrLabelsExpressionContext>(_ctx, getState());
  enterRule(_localctx, 272, CypherParser::RuleOC_PropertyOrLabelsExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2364);
    oC_Atom();
    setState(2371);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 390, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2366);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2365);
          match(CypherParser::SP);
        }
        setState(2368);
        oC_PropertyLookup(); 
      }
      setState(2373);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 390, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

CypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LiteralContext* CypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

CypherParser::OC_ParameterContext* CypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<CypherParser::OC_ParameterContext>(0);
}

CypherParser::OC_CaseExpressionContext* CypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<CypherParser::OC_CaseExpressionContext>(0);
}

CypherParser::OC_ParenthesizedExpressionContext* CypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<CypherParser::OC_ParenthesizedExpressionContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_PathPatternsContext* CypherParser::OC_AtomContext::oC_PathPatterns() {
  return getRuleContext<CypherParser::OC_PathPatternsContext>(0);
}

CypherParser::OC_ExistCountSubqueryContext* CypherParser::OC_AtomContext::oC_ExistCountSubquery() {
  return getRuleContext<CypherParser::OC_ExistCountSubqueryContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_QuantifierContext* CypherParser::OC_AtomContext::oC_Quantifier() {
  return getRuleContext<CypherParser::OC_QuantifierContext>(0);
}


size_t CypherParser::OC_AtomContext::getRuleIndex() const {
  return CypherParser::RuleOC_Atom;
}


CypherParser::OC_AtomContext* CypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
  enterRule(_localctx, 274, CypherParser::RuleOC_Atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2383);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 391, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2374);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2375);
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2376);
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2377);
      oC_ParenthesizedExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2378);
      oC_FunctionInvocation();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2379);
      oC_PathPatterns();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2380);
      oC_ExistCountSubquery();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2381);
      oC_Variable();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2382);
      oC_Quantifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QuantifierContext ------------------------------------------------------------------

CypherParser::OC_QuantifierContext::OC_QuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_FilterExpressionContext* CypherParser::OC_QuantifierContext::oC_FilterExpression() {
  return getRuleContext<CypherParser::OC_FilterExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_QuantifierContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::ANY() {
  return getToken(CypherParser::ANY, 0);
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::NONE() {
  return getToken(CypherParser::NONE, 0);
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::SINGLE() {
  return getToken(CypherParser::SINGLE, 0);
}


size_t CypherParser::OC_QuantifierContext::getRuleIndex() const {
  return CypherParser::RuleOC_Quantifier;
}


CypherParser::OC_QuantifierContext* CypherParser::oC_Quantifier() {
  OC_QuantifierContext *_localctx = _tracker.createInstance<OC_QuantifierContext>(_ctx, getState());
  enterRule(_localctx, 276, CypherParser::RuleOC_Quantifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2441);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ALL: {
        enterOuterAlt(_localctx, 1);
        setState(2385);
        match(CypherParser::ALL);
        setState(2387);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2386);
          match(CypherParser::SP);
        }
        setState(2389);
        match(CypherParser::T__1);
        setState(2391);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2390);
          match(CypherParser::SP);
        }
        setState(2393);
        oC_FilterExpression();
        setState(2395);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2394);
          match(CypherParser::SP);
        }
        setState(2397);
        match(CypherParser::T__2);
        break;
      }

      case CypherParser::ANY: {
        enterOuterAlt(_localctx, 2);
        setState(2399);
        match(CypherParser::ANY);
        setState(2401);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2400);
          match(CypherParser::SP);
        }
        setState(2403);
        match(CypherParser::T__1);
        setState(2405);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2404);
          match(CypherParser::SP);
        }
        setState(2407);
        oC_FilterExpression();
        setState(2409);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2408);
          match(CypherParser::SP);
        }
        setState(2411);
        match(CypherParser::T__2);
        break;
      }

      case CypherParser::NONE: {
        enterOuterAlt(_localctx, 3);
        setState(2413);
        match(CypherParser::NONE);
        setState(2415);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2414);
          match(CypherParser::SP);
        }
        setState(2417);
        match(CypherParser::T__1);
        setState(2419);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2418);
          match(CypherParser::SP);
        }
        setState(2421);
        oC_FilterExpression();
        setState(2423);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2422);
          match(CypherParser::SP);
        }
        setState(2425);
        match(CypherParser::T__2);
        break;
      }

      case CypherParser::SINGLE: {
        enterOuterAlt(_localctx, 4);
        setState(2427);
        match(CypherParser::SINGLE);
        setState(2429);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2428);
          match(CypherParser::SP);
        }
        setState(2431);
        match(CypherParser::T__1);
        setState(2433);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2432);
          match(CypherParser::SP);
        }
        setState(2435);
        oC_FilterExpression();
        setState(2437);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2436);
          match(CypherParser::SP);
        }
        setState(2439);
        match(CypherParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FilterExpressionContext ------------------------------------------------------------------

CypherParser::OC_FilterExpressionContext::OC_FilterExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IdInCollContext* CypherParser::OC_FilterExpressionContext::oC_IdInColl() {
  return getRuleContext<CypherParser::OC_IdInCollContext>(0);
}

tree::TerminalNode* CypherParser::OC_FilterExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_WhereContext* CypherParser::OC_FilterExpressionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_FilterExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_FilterExpression;
}


CypherParser::OC_FilterExpressionContext* CypherParser::oC_FilterExpression() {
  OC_FilterExpressionContext *_localctx = _tracker.createInstance<OC_FilterExpressionContext>(_ctx, getState());
  enterRule(_localctx, 278, CypherParser::RuleOC_FilterExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2443);
    oC_IdInColl();
    setState(2444);
    match(CypherParser::SP);
    setState(2445);
    oC_Where();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IdInCollContext ------------------------------------------------------------------

CypherParser::OC_IdInCollContext::OC_IdInCollContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_IdInCollContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_IdInCollContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_IdInCollContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_IdInCollContext::IN() {
  return getToken(CypherParser::IN, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_IdInCollContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_IdInCollContext::getRuleIndex() const {
  return CypherParser::RuleOC_IdInColl;
}


CypherParser::OC_IdInCollContext* CypherParser::oC_IdInColl() {
  OC_IdInCollContext *_localctx = _tracker.createInstance<OC_IdInCollContext>(_ctx, getState());
  enterRule(_localctx, 280, CypherParser::RuleOC_IdInColl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2447);
    oC_Variable();
    setState(2448);
    match(CypherParser::SP);
    setState(2449);
    match(CypherParser::IN);
    setState(2450);
    match(CypherParser::SP);
    setState(2451);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

CypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NumberLiteralContext* CypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<CypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_BooleanLiteralContext* CypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<CypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

CypherParser::OC_ListLiteralContext* CypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<CypherParser::OC_ListLiteralContext>(0);
}

CypherParser::KU_StructLiteralContext* CypherParser::OC_LiteralContext::kU_StructLiteral() {
  return getRuleContext<CypherParser::KU_StructLiteralContext>(0);
}


size_t CypherParser::OC_LiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_Literal;
}


CypherParser::OC_LiteralContext* CypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
  enterRule(_localctx, 282, CypherParser::RuleOC_Literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2459);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::DecimalInteger:
      case CypherParser::ExponentDecimalReal:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2453);
        oC_NumberLiteral();
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(2454);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::FALSE:
      case CypherParser::TRUE: {
        enterOuterAlt(_localctx, 3);
        setState(2455);
        oC_BooleanLiteral();
        break;
      }

      case CypherParser::NULL_: {
        enterOuterAlt(_localctx, 4);
        setState(2456);
        match(CypherParser::NULL_);
        break;
      }

      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 5);
        setState(2457);
        oC_ListLiteral();
        break;
      }

      case CypherParser::T__8: {
        enterOuterAlt(_localctx, 6);
        setState(2458);
        kU_StructLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

CypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::TRUE() {
  return getToken(CypherParser::TRUE, 0);
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::FALSE() {
  return getToken(CypherParser::FALSE, 0);
}


size_t CypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_BooleanLiteral;
}


CypherParser::OC_BooleanLiteralContext* CypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 284, CypherParser::RuleOC_BooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2461);
    _la = _input->LA(1);
    if (!(_la == CypherParser::FALSE

    || _la == CypherParser::TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

CypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<CypherParser::KU_ListEntryContext *> CypherParser::OC_ListLiteralContext::kU_ListEntry() {
  return getRuleContexts<CypherParser::KU_ListEntryContext>();
}

CypherParser::KU_ListEntryContext* CypherParser::OC_ListLiteralContext::kU_ListEntry(size_t i) {
  return getRuleContext<CypherParser::KU_ListEntryContext>(i);
}


size_t CypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListLiteral;
}


CypherParser::OC_ListLiteralContext* CypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 286, CypherParser::RuleOC_ListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2463);
    match(CypherParser::T__6);
    setState(2465);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2464);
      match(CypherParser::SP);
    }
    setState(2480);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4641100153426541948) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1144059623222237987) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 686547780138075) != 0)) {
      setState(2467);
      oC_Expression();
      setState(2469);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2468);
        match(CypherParser::SP);
      }
      setState(2477);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__3) {
        setState(2471);
        kU_ListEntry();
        setState(2473);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2472);
          match(CypherParser::SP);
        }
        setState(2479);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2482);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListEntryContext ------------------------------------------------------------------

CypherParser::KU_ListEntryContext::KU_ListEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ListEntryContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListEntryContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_ListEntryContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListEntry;
}


CypherParser::KU_ListEntryContext* CypherParser::kU_ListEntry() {
  KU_ListEntryContext *_localctx = _tracker.createInstance<KU_ListEntryContext>(_ctx, getState());
  enterRule(_localctx, 288, CypherParser::RuleKU_ListEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2484);
    match(CypherParser::T__3);
    setState(2486);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 411, _ctx)) {
    case 1: {
      setState(2485);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2489);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4641100153426541948) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1144059623222237987) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 686547780138075) != 0)) {
      setState(2488);
      oC_Expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructLiteralContext ------------------------------------------------------------------

CypherParser::KU_StructLiteralContext::KU_StructLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_StructFieldContext *> CypherParser::KU_StructLiteralContext::kU_StructField() {
  return getRuleContexts<CypherParser::KU_StructFieldContext>();
}

CypherParser::KU_StructFieldContext* CypherParser::KU_StructLiteralContext::kU_StructField(size_t i) {
  return getRuleContext<CypherParser::KU_StructFieldContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructLiteralContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructLiteral;
}


CypherParser::KU_StructLiteralContext* CypherParser::kU_StructLiteral() {
  KU_StructLiteralContext *_localctx = _tracker.createInstance<KU_StructLiteralContext>(_ctx, getState());
  enterRule(_localctx, 290, CypherParser::RuleKU_StructLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2491);
    match(CypherParser::T__8);
    setState(2493);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2492);
      match(CypherParser::SP);
    }
    setState(2495);
    kU_StructField();
    setState(2497);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2496);
      match(CypherParser::SP);
    }
    setState(2509);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__3) {
      setState(2499);
      match(CypherParser::T__3);
      setState(2501);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2500);
        match(CypherParser::SP);
      }
      setState(2503);
      kU_StructField();
      setState(2505);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2504);
        match(CypherParser::SP);
      }
      setState(2511);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2512);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructFieldContext ------------------------------------------------------------------

CypherParser::KU_StructFieldContext::KU_StructFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StructFieldContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StructFieldContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructFieldContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructFieldContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructField;
}


CypherParser::KU_StructFieldContext* CypherParser::kU_StructField() {
  KU_StructFieldContext *_localctx = _tracker.createInstance<KU_StructFieldContext>(_ctx, getState());
  enterRule(_localctx, 292, CypherParser::RuleKU_StructField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2516);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::FROM:
      case CypherParser::FORCE:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TO:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::UNINSTALL:
      case CypherParser::UPDATE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::YIELD:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2514);
        oC_SymbolicName();
        break;
      }

      case CypherParser::StringLiteral: {
        setState(2515);
        match(CypherParser::StringLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2519);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2518);
      match(CypherParser::SP);
    }
    setState(2521);
    match(CypherParser::COLON);
    setState(2523);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2522);
      match(CypherParser::SP);
    }
    setState(2525);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

CypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ParenthesizedExpression;
}


CypherParser::OC_ParenthesizedExpressionContext* CypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 294, CypherParser::RuleOC_ParenthesizedExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2527);
    match(CypherParser::T__1);
    setState(2529);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2528);
      match(CypherParser::SP);
    }
    setState(2531);
    oC_Expression();
    setState(2533);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2532);
      match(CypherParser::SP);
    }
    setState(2535);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

CypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::CAST() {
  return getToken(CypherParser::CAST, 0);
}

std::vector<CypherParser::KU_FunctionParameterContext *> CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter() {
  return getRuleContexts<CypherParser::KU_FunctionParameterContext>();
}

CypherParser::KU_FunctionParameterContext* CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter(size_t i) {
  return getRuleContext<CypherParser::KU_FunctionParameterContext>(i);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::OC_FunctionInvocationContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

CypherParser::OC_FunctionNameContext* CypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}


size_t CypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionInvocation;
}


CypherParser::OC_FunctionInvocationContext* CypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
  enterRule(_localctx, 296, CypherParser::RuleOC_FunctionInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2614);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 442, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2537);
      match(CypherParser::COUNT);
      setState(2539);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2538);
        match(CypherParser::SP);
      }
      setState(2541);
      match(CypherParser::T__1);
      setState(2543);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2542);
        match(CypherParser::SP);
      }
      setState(2545);
      match(CypherParser::STAR);
      setState(2547);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2546);
        match(CypherParser::SP);
      }
      setState(2549);
      match(CypherParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2550);
      match(CypherParser::CAST);
      setState(2552);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2551);
        match(CypherParser::SP);
      }
      setState(2554);
      match(CypherParser::T__1);
      setState(2556);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2555);
        match(CypherParser::SP);
      }
      setState(2558);
      kU_FunctionParameter();
      setState(2560);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2559);
        match(CypherParser::SP);
      }
      setState(2572);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CypherParser::AS: {
          setState(2562);
          match(CypherParser::AS);
          setState(2564);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2563);
            match(CypherParser::SP);
          }
          setState(2566);
          kU_DataType(0);
          break;
        }

        case CypherParser::T__3: {
          setState(2567);
          match(CypherParser::T__3);
          setState(2569);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2568);
            match(CypherParser::SP);
          }
          setState(2571);
          kU_FunctionParameter();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2575);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2574);
        match(CypherParser::SP);
      }
      setState(2577);
      match(CypherParser::T__2);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2579);
      oC_FunctionName();
      setState(2581);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2580);
        match(CypherParser::SP);
      }
      setState(2583);
      match(CypherParser::T__1);
      setState(2585);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2584);
        match(CypherParser::SP);
      }
      setState(2591);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DISTINCT) {
        setState(2587);
        match(CypherParser::DISTINCT);
        setState(2589);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2588);
          match(CypherParser::SP);
        }
      }
      setState(2610);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4641100153426541948) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1144059623222237987) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 686547780138075) != 0)) {
        setState(2593);
        kU_FunctionParameter();
        setState(2595);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2594);
          match(CypherParser::SP);
        }
        setState(2607);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__3) {
          setState(2597);
          match(CypherParser::T__3);
          setState(2599);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2598);
            match(CypherParser::SP);
          }
          setState(2601);
          kU_FunctionParameter();
          setState(2603);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2602);
            match(CypherParser::SP);
          }
          setState(2609);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(2612);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

CypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionName;
}


CypherParser::OC_FunctionNameContext* CypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 298, CypherParser::RuleOC_FunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2616);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FunctionParameterContext ------------------------------------------------------------------

CypherParser::KU_FunctionParameterContext::KU_FunctionParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_FunctionParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_FunctionParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FunctionParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::KU_LambdaParameterContext* CypherParser::KU_FunctionParameterContext::kU_LambdaParameter() {
  return getRuleContext<CypherParser::KU_LambdaParameterContext>(0);
}


size_t CypherParser::KU_FunctionParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_FunctionParameter;
}


CypherParser::KU_FunctionParameterContext* CypherParser::kU_FunctionParameter() {
  KU_FunctionParameterContext *_localctx = _tracker.createInstance<KU_FunctionParameterContext>(_ctx, getState());
  enterRule(_localctx, 300, CypherParser::RuleKU_FunctionParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2631);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 446, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2627);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 445, _ctx)) {
      case 1: {
        setState(2618);
        oC_SymbolicName();
        setState(2620);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2619);
          match(CypherParser::SP);
        }
        setState(2622);
        match(CypherParser::COLON);
        setState(2623);
        match(CypherParser::T__5);
        setState(2625);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2624);
          match(CypherParser::SP);
        }
        break;
      }

      default:
        break;
      }
      setState(2629);
      oC_Expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2630);
      kU_LambdaParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LambdaParameterContext ------------------------------------------------------------------

CypherParser::KU_LambdaParameterContext::KU_LambdaParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LambdaVarsContext* CypherParser::KU_LambdaParameterContext::kU_LambdaVars() {
  return getRuleContext<CypherParser::KU_LambdaVarsContext>(0);
}

tree::TerminalNode* CypherParser::KU_LambdaParameterContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_LambdaParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LambdaParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LambdaParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_LambdaParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_LambdaParameter;
}


CypherParser::KU_LambdaParameterContext* CypherParser::kU_LambdaParameter() {
  KU_LambdaParameterContext *_localctx = _tracker.createInstance<KU_LambdaParameterContext>(_ctx, getState());
  enterRule(_localctx, 302, CypherParser::RuleKU_LambdaParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2633);
    kU_LambdaVars();
    setState(2635);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2634);
      match(CypherParser::SP);
    }
    setState(2637);
    match(CypherParser::MINUS);
    setState(2638);
    match(CypherParser::T__15);
    setState(2640);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2639);
      match(CypherParser::SP);
    }
    setState(2642);
    oC_Expression();
    setState(2644);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 449, _ctx)) {
    case 1: {
      setState(2643);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LambdaVarsContext ------------------------------------------------------------------

CypherParser::KU_LambdaVarsContext::KU_LambdaVarsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_LambdaVarsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_LambdaVarsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LambdaVarsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LambdaVarsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_LambdaVarsContext::getRuleIndex() const {
  return CypherParser::RuleKU_LambdaVars;
}


CypherParser::KU_LambdaVarsContext* CypherParser::kU_LambdaVars() {
  KU_LambdaVarsContext *_localctx = _tracker.createInstance<KU_LambdaVarsContext>(_ctx, getState());
  enterRule(_localctx, 304, CypherParser::RuleKU_LambdaVars);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2670);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::FROM:
      case CypherParser::FORCE:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TO:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::UNINSTALL:
      case CypherParser::UPDATE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::YIELD:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(2646);
        oC_SymbolicName();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(2647);
        match(CypherParser::T__1);
        setState(2649);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2648);
          match(CypherParser::SP);
        }
        setState(2651);
        oC_SymbolicName();
        setState(2653);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2652);
          match(CypherParser::SP);
        }
        setState(2665);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__3) {
          setState(2655);
          match(CypherParser::T__3);
          setState(2657);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2656);
            match(CypherParser::SP);
          }
          setState(2659);
          oC_SymbolicName();
          setState(2661);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2660);
            match(CypherParser::SP);
          }
          setState(2667);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2668);
        match(CypherParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PathPatternsContext ------------------------------------------------------------------

CypherParser::OC_PathPatternsContext::OC_PathPatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PathPatternsContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PathPatternsContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PathPatternsContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PathPatternsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PathPatternsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PathPatternsContext::getRuleIndex() const {
  return CypherParser::RuleOC_PathPatterns;
}


CypherParser::OC_PathPatternsContext* CypherParser::oC_PathPatterns() {
  OC_PathPatternsContext *_localctx = _tracker.createInstance<OC_PathPatternsContext>(_ctx, getState());
  enterRule(_localctx, 306, CypherParser::RuleOC_PathPatterns);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2672);
    oC_NodePattern();
    setState(2677); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2674);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(2673);
                match(CypherParser::SP);
              }
              setState(2676);
              oC_PatternElementChain();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2679); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 457, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExistCountSubqueryContext ------------------------------------------------------------------

CypherParser::OC_ExistCountSubqueryContext::OC_ExistCountSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExistCountSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_ExistCountSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_ExistCountSubqueryContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}

tree::TerminalNode* CypherParser::OC_ExistCountSubqueryContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExistCountSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExistCountSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_ExistCountSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_HintContext* CypherParser::OC_ExistCountSubqueryContext::kU_Hint() {
  return getRuleContext<CypherParser::KU_HintContext>(0);
}


size_t CypherParser::OC_ExistCountSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_ExistCountSubquery;
}


CypherParser::OC_ExistCountSubqueryContext* CypherParser::oC_ExistCountSubquery() {
  OC_ExistCountSubqueryContext *_localctx = _tracker.createInstance<OC_ExistCountSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 308, CypherParser::RuleOC_ExistCountSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2681);
    _la = _input->LA(1);
    if (!(_la == CypherParser::COUNT

    || _la == CypherParser::EXISTS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2683);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2682);
      match(CypherParser::SP);
    }
    setState(2685);
    match(CypherParser::T__8);
    setState(2687);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2686);
      match(CypherParser::SP);
    }
    setState(2689);
    match(CypherParser::MATCH);
    setState(2691);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2690);
      match(CypherParser::SP);
    }
    setState(2693);
    oC_Pattern();
    setState(2698);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 462, _ctx)) {
    case 1: {
      setState(2695);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2694);
        match(CypherParser::SP);
      }
      setState(2697);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2704);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 464, _ctx)) {
    case 1: {
      setState(2701);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2700);
        match(CypherParser::SP);
      }
      setState(2703);
      kU_Hint();
      break;
    }

    default:
      break;
    }
    setState(2707);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2706);
      match(CypherParser::SP);
    }
    setState(2709);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

CypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyLookup;
}


CypherParser::OC_PropertyLookupContext* CypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
  enterRule(_localctx, 310, CypherParser::RuleOC_PropertyLookup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2711);
    match(CypherParser::T__4);
    setState(2713);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2712);
      match(CypherParser::SP);
    }
    setState(2717);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::FROM:
      case CypherParser::FORCE:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TO:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::UNINSTALL:
      case CypherParser::UPDATE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::YIELD:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2715);
        oC_PropertyKeyName();
        break;
      }

      case CypherParser::STAR: {
        setState(2716);
        match(CypherParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

CypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(CypherParser::ELSE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(CypherParser::CASE, 0);
}

std::vector<CypherParser::OC_CaseAlternativeContext *> CypherParser::OC_CaseExpressionContext::oC_CaseAlternative() {
  return getRuleContexts<CypherParser::OC_CaseAlternativeContext>();
}

CypherParser::OC_CaseAlternativeContext* CypherParser::OC_CaseExpressionContext::oC_CaseAlternative(size_t i) {
  return getRuleContext<CypherParser::OC_CaseAlternativeContext>(i);
}


size_t CypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseExpression;
}


CypherParser::OC_CaseExpressionContext* CypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 312, CypherParser::RuleOC_CaseExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2741);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 473, _ctx)) {
    case 1: {
      setState(2719);
      match(CypherParser::CASE);
      setState(2724); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2721);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2720);
                  match(CypherParser::SP);
                }
                setState(2723);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2726); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 469, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(2728);
      match(CypherParser::CASE);
      setState(2730);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2729);
        match(CypherParser::SP);
      }
      setState(2732);
      oC_Expression();
      setState(2737); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2734);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2733);
                  match(CypherParser::SP);
                }
                setState(2736);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2739); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 472, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
    setState(2751);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 476, _ctx)) {
    case 1: {
      setState(2744);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2743);
        match(CypherParser::SP);
      }
      setState(2746);
      match(CypherParser::ELSE);
      setState(2748);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2747);
        match(CypherParser::SP);
      }
      setState(2750);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(2754);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2753);
      match(CypherParser::SP);
    }
    setState(2756);
    match(CypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativeContext ------------------------------------------------------------------

CypherParser::OC_CaseAlternativeContext::OC_CaseAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::WHEN() {
  return getToken(CypherParser::WHEN, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseAlternativeContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseAlternativeContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::THEN() {
  return getToken(CypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseAlternativeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CaseAlternativeContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseAlternative;
}


CypherParser::OC_CaseAlternativeContext* CypherParser::oC_CaseAlternative() {
  OC_CaseAlternativeContext *_localctx = _tracker.createInstance<OC_CaseAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 314, CypherParser::RuleOC_CaseAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2758);
    match(CypherParser::WHEN);
    setState(2760);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2759);
      match(CypherParser::SP);
    }
    setState(2762);
    oC_Expression();
    setState(2764);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2763);
      match(CypherParser::SP);
    }
    setState(2766);
    match(CypherParser::THEN);
    setState(2768);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2767);
      match(CypherParser::SP);
    }
    setState(2770);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

CypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_VariableContext::getRuleIndex() const {
  return CypherParser::RuleOC_Variable;
}


CypherParser::OC_VariableContext* CypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
  enterRule(_localctx, 316, CypherParser::RuleOC_Variable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2772);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

CypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_DoubleLiteralContext* CypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<CypherParser::OC_DoubleLiteralContext>(0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_NumberLiteral;
}


CypherParser::OC_NumberLiteralContext* CypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 318, CypherParser::RuleOC_NumberLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2776);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ExponentDecimalReal:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2774);
        oC_DoubleLiteral();
        break;
      }

      case CypherParser::DecimalInteger: {
        enterOuterAlt(_localctx, 2);
        setState(2775);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

CypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_ParameterContext::getRuleIndex() const {
  return CypherParser::RuleOC_Parameter;
}


CypherParser::OC_ParameterContext* CypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
  enterRule(_localctx, 320, CypherParser::RuleOC_Parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2778);
    match(CypherParser::T__25);
    setState(2781);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::FROM:
      case CypherParser::FORCE:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TO:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::UNINSTALL:
      case CypherParser::UPDATE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::YIELD:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2779);
        oC_SymbolicName();
        break;
      }

      case CypherParser::DecimalInteger: {
        setState(2780);
        match(CypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyExpression;
}


CypherParser::OC_PropertyExpressionContext* CypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 322, CypherParser::RuleOC_PropertyExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2783);
    oC_Atom();
    setState(2785);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2784);
      match(CypherParser::SP);
    }
    setState(2787);
    oC_PropertyLookup();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

CypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyKeyName;
}


CypherParser::OC_PropertyKeyNameContext* CypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
  enterRule(_localctx, 324, CypherParser::RuleOC_PropertyKeyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2789);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

CypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_IntegerLiteral;
}


CypherParser::OC_IntegerLiteralContext* CypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 326, CypherParser::RuleOC_IntegerLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2791);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

CypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::ExponentDecimalReal() {
  return getToken(CypherParser::ExponentDecimalReal, 0);
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(CypherParser::RegularDecimalReal, 0);
}


size_t CypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_DoubleLiteral;
}


CypherParser::OC_DoubleLiteralContext* CypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 328, CypherParser::RuleOC_DoubleLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2793);
    _la = _input->LA(1);
    if (!(_la == CypherParser::ExponentDecimalReal

    || _la == CypherParser::RegularDecimalReal)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

CypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SchemaName;
}


CypherParser::OC_SchemaNameContext* CypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 330, CypherParser::RuleOC_SchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2795);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

CypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(CypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(CypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(CypherParser::HexLetter, 0);
}

CypherParser::KU_NonReservedKeywordsContext* CypherParser::OC_SymbolicNameContext::kU_NonReservedKeywords() {
  return getRuleContext<CypherParser::KU_NonReservedKeywordsContext>(0);
}


size_t CypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SymbolicName;
}


CypherParser::OC_SymbolicNameContext* CypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
  enterRule(_localctx, 332, CypherParser::RuleOC_SymbolicName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2802);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::UnescapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(2797);
        match(CypherParser::UnescapedSymbolicName);
        break;
      }

      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(2798);
        antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken = match(CypherParser::EscapedSymbolicName);
        if ((antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken != nullptr ? antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken->getText() : "") == "``") { notifyEmptyToken(antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken); }
        break;
      }

      case CypherParser::HexLetter: {
        enterOuterAlt(_localctx, 3);
        setState(2800);
        match(CypherParser::HexLetter);
        break;
      }

      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::FROM:
      case CypherParser::FORCE:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TO:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::UNINSTALL:
      case CypherParser::UPDATE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::YIELD:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP: {
        enterOuterAlt(_localctx, 4);
        setState(2801);
        kU_NonReservedKeywords();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_NonReservedKeywordsContext ------------------------------------------------------------------

CypherParser::KU_NonReservedKeywordsContext::KU_NonReservedKeywordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMENT() {
  return getToken(CypherParser::COMMENT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::AS() {
  return getToken(CypherParser::AS, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ATTACH() {
  return getToken(CypherParser::ATTACH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CHECKPOINT() {
  return getToken(CypherParser::CHECKPOINT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DECIMAL() {
  return getToken(CypherParser::DECIMAL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::FORCE() {
  return getToken(CypherParser::FORCE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::GRAPH() {
  return getToken(CypherParser::GRAPH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IF() {
  return getToken(CypherParser::IF, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::LOGICAL() {
  return getToken(CypherParser::LOGICAL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::PROJECT() {
  return getToken(CypherParser::PROJECT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::SET() {
  return getToken(CypherParser::SET, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::START() {
  return getToken(CypherParser::START, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::TYPE() {
  return getToken(CypherParser::TYPE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::UNINSTALL() {
  return getToken(CypherParser::UNINSTALL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::UPDATE() {
  return getToken(CypherParser::UPDATE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::WRITE() {
  return getToken(CypherParser::WRITE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::TO() {
  return getToken(CypherParser::TO, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::YIELD() {
  return getToken(CypherParser::YIELD, 0);
}


size_t CypherParser::KU_NonReservedKeywordsContext::getRuleIndex() const {
  return CypherParser::RuleKU_NonReservedKeywords;
}


CypherParser::KU_NonReservedKeywordsContext* CypherParser::kU_NonReservedKeywords() {
  KU_NonReservedKeywordsContext *_localctx = _tracker.createInstance<KU_NonReservedKeywordsContext>(_ctx, getState());
  enterRule(_localctx, 334, CypherParser::RuleKU_NonReservedKeywords);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2804);
    _la = _input->LA(1);
    if (!(((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & 8923191552623093653) != 0) || ((((_la - 112) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 112)) & 97368323911683) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_LeftArrowHead;
}


CypherParser::OC_LeftArrowHeadContext* CypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 336, CypherParser::RuleOC_LeftArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2806);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2013282304) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_RightArrowHead;
}


CypherParser::OC_RightArrowHeadContext* CypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 338, CypherParser::RuleOC_RightArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2808);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 32212320256) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

CypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DashContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::OC_DashContext::getRuleIndex() const {
  return CypherParser::RuleOC_Dash;
}


CypherParser::OC_DashContext* CypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
  enterRule(_localctx, 340, CypherParser::RuleOC_Dash);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2810);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 70334384439296) != 0) || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CypherParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 48: return kU_DataTypeSempred(antlrcpp::downCast<KU_DataTypeContext *>(context), predicateIndex);
    case 75: return kU_JoinNodeSempred(antlrcpp::downCast<KU_JoinNodeContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_DataTypeSempred(KU_DataTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 5);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_JoinNodeSempred(KU_JoinNodeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 4);
    case 2: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

void CypherParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cypherParserInitialize();
#else
  ::antlr4::internal::call_once(cypherParserOnceFlag, cypherParserInitialize);
#endif
}
