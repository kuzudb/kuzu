
// Generated from Cypher.g4 by ANTLR 4.13.1



#include "cypher_parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct CypherParserStaticData final {
  CypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CypherParserStaticData(const CypherParserStaticData&) = delete;
  CypherParserStaticData(CypherParserStaticData&&) = delete;
  CypherParserStaticData& operator=(const CypherParserStaticData&) = delete;
  CypherParserStaticData& operator=(CypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cypherParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CypherParserStaticData *cypherParserStaticData = nullptr;

void cypherParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cypherParserStaticData != nullptr) {
    return;
  }
#else
  assert(cypherParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CypherParserStaticData>(
    std::vector<std::string>{
      "ku_Statements", "oC_Cypher", "oC_Statement", "kU_CopyFrom", "kU_ColumnNames", 
      "kU_ScanSource", "kU_CopyFromByColumn", "kU_CopyTO", "kU_ExportDatabase", 
      "kU_ImportDatabase", "kU_AttachDatabase", "kU_Option", "kU_Options", 
      "kU_DetachDatabase", "kU_UseDatabase", "kU_StandaloneCall", "kU_CommentOn", 
      "kU_CreateMacro", "kU_PositionalArgs", "kU_DefaultArg", "kU_FilePaths", 
      "kU_ParsingOptions", "kU_IfNotExists", "kU_CreateNodeTable", "kU_CreateRelTable", 
      "kU_CreateRelTableGroup", "kU_RelTableConnection", "kU_CreateRdfGraph", 
      "kU_CreateSequence", "kU_CreateType", "kU_SequenceOptions", "kU_IncrementBy", 
      "kU_MinValue", "kU_MaxValue", "kU_StartWith", "kU_Cycle", "kU_IfExists", 
      "kU_Drop", "kU_AlterTable", "kU_AlterOptions", "kU_AddProperty", "kU_Default", 
      "kU_DropProperty", "kU_RenameTable", "kU_RenameProperty", "kU_ColumnDefinitions", 
      "kU_ColumnDefinition", "kU_PropertyDefinitions", "kU_PropertyDefinition", 
      "kU_PropertyDefinitionBeforeConstraint", "kU_PropertyDefinitionAfterConstraint", 
      "kU_CreateNodeConstraint", "kU_PropertyDefinitionWithConstraint", 
      "kU_PropertyDefinitionsWithConstraint", "kU_DataType", "kU_ListIdentifiers", 
      "kU_ListIdentifier", "oC_AnyCypherOption", "oC_Explain", "oC_Profile", 
      "kU_Transaction", "kU_Extension", "kU_LoadExtension", "kU_InstallExtension", 
      "oC_Query", "kU_ProjectGraph", "kU_GraphProjectionTableItems", "oC_RegularQuery", 
      "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
      "kU_QueryPart", "oC_UpdatingClause", "oC_ReadingClause", "kU_LoadFrom", 
      "kU_InQueryCall", "kU_GraphProjectionTableItem", "kU_GraphProjectionColumnItems", 
      "kU_GraphProjectionColumnItem", "oC_Match", "kU_Hint", "kU_JoinNode", 
      "oC_Unwind", "oC_Create", "oC_Merge", "oC_MergeAction", "oC_Set", 
      "oC_SetItem", "oC_Delete", "oC_With", "oC_Return", "oC_ProjectionBody", 
      "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", "oC_Skip", 
      "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", "oC_PatternPart", 
      "oC_AnonymousPatternPart", "oC_PatternElement", "oC_NodePattern", 
      "oC_PatternElementChain", "oC_RelationshipPattern", "oC_RelationshipDetail", 
      "kU_Properties", "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
      "oC_RangeLiteral", "kU_RecursiveRelationshipComprehension", "kU_IntermediateNodeProjectionItems", 
      "kU_IntermediateRelProjectionItems", "oC_LowerBound", "oC_UpperBound", 
      "oC_LabelName", "oC_RelTypeName", "oC_Expression", "oC_OrExpression", 
      "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression", 
      "kU_ComparisonOperator", "kU_BitwiseOrOperatorExpression", "kU_BitwiseAndOperatorExpression", 
      "kU_BitShiftOperatorExpression", "kU_BitShiftOperator", "oC_AddOrSubtractExpression", 
      "kU_AddOrSubtractOperator", "oC_MultiplyDivideModuloExpression", "kU_MultiplyDivideModuloOperator", 
      "oC_PowerOfExpression", "oC_UnaryAddSubtractOrFactorialExpression", 
      "oC_StringListNullOperatorExpression", "oC_ListOperatorExpression", 
      "oC_StringOperatorExpression", "oC_RegularExpression", "oC_NullOperatorExpression", 
      "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Quantifier", "oC_FilterExpression", 
      "oC_IdInColl", "oC_Literal", "oC_BooleanLiteral", "oC_ListLiteral", 
      "kU_ListEntry", "kU_StructLiteral", "kU_StructField", "oC_ParenthesizedExpression", 
      "oC_FunctionInvocation", "oC_FunctionName", "kU_FunctionParameter", 
      "kU_LambdaParameter", "kU_LambdaVars", "oC_PathPatterns", "oC_ExistSubquery", 
      "kU_CountSubquery", "oC_PropertyLookup", "oC_CaseExpression", "oC_CaseAlternative", 
      "oC_Variable", "oC_NumberLiteral", "oC_Parameter", "oC_PropertyExpression", 
      "oC_PropertyKeyName", "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_SchemaName", 
      "oC_SymbolicName", "kU_NonReservedKeywords", "oC_LeftArrowHead", "oC_RightArrowHead", 
      "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "'('", "','", "')'", "'.'", "'='", "'['", "']'", "'{'", 
      "'}'", "'|'", "'..'", "'<>'", "'<'", "'<='", "'>'", "'>='", "'&'", 
      "'>>'", "'<<'", "'+'", "'/'", "'%'", "'^'", "'=~'", "'$'", "'\\u27E8'", 
      "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", "'\\uFE65'", 
      "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", 
      "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", "'\\uFF0D'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "'*'", "", "'!='", "'-'", "'!'", "':'", "", "", "", "", "", 
      "", "", "", "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "ANY", "ADD", "ALL", 
      "ALTER", "AND", "AS", "ASC", "ASCENDING", "ATTACH", "BEGIN", "BY", 
      "CALL", "CASE", "CAST", "CHECKPOINT", "COLUMN", "COMMENT", "COMMIT", 
      "COMMIT_SKIP_CHECKPOINT", "CONTAINS", "COPY", "COUNT", "CREATE", "CYCLE", 
      "DATABASE", "DBTYPE", "DEFAULT", "DELETE", "DESC", "DESCENDING", "DETACH", 
      "DISTINCT", "DROP", "ELSE", "END", "ENDS", "EXISTS", "EXPLAIN", "EXPORT", 
      "EXTENSION", "FALSE", "FROM", "GLOB", "GRAPH", "GROUP", "HEADERS", 
      "HINT", "IMPORT", "IF", "IN", "INCREMENT", "INSTALL", "IS", "JOIN", 
      "KEY", "LIMIT", "LOAD", "MACRO", "MATCH", "MAXVALUE", "MERGE", "MINVALUE", 
      "MULTI_JOIN", "NO", "NODE", "NOT", "NONE", "NULL", "ON", "ONLY", "OPTIONAL", 
      "OR", "ORDER", "PRIMARY", "PROFILE", "PROJECT", "RDFGRAPH", "READ", 
      "REL", "RENAME", "RETURN", "ROLLBACK", "ROLLBACK_SKIP_CHECKPOINT", 
      "SEQUENCE", "SET", "SHORTEST", "START", "STARTS", "TABLE", "THEN", 
      "TO", "TRANSACTION", "TRUE", "TYPE", "UNION", "UNWIND", "USE", "WHEN", 
      "WHERE", "WITH", "WRITE", "XOR", "SINGLE", "DECIMAL", "STAR", "L_SKIP", 
      "INVALID_NOT_EQUAL", "MINUS", "FACTORIAL", "COLON", "StringLiteral", 
      "EscapedChar", "DecimalInteger", "HexLetter", "HexDigit", "Digit", 
      "NonZeroDigit", "NonZeroOctDigit", "ZeroDigit", "RegularDecimalReal", 
      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", 
      "SP", "WHITESPACE", "CypherComment", "Unknown"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,173,2922,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,1,0,1,0,3,0,359,8,0,1,0,1,0,3,0,363,8,0,1,0,5,0,366,
  	8,0,10,0,12,0,369,9,0,1,0,3,0,372,8,0,1,0,1,0,1,1,3,1,377,8,1,1,1,3,1,
  	380,8,1,1,1,1,1,3,1,384,8,1,1,1,3,1,387,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,411,
  	8,2,1,3,1,3,1,3,1,3,3,3,417,8,3,1,3,1,3,3,3,421,8,3,1,3,3,3,424,8,3,1,
  	3,1,3,1,3,1,3,3,3,430,8,3,1,3,3,3,433,8,3,1,4,1,4,3,4,437,8,4,1,4,1,4,
  	3,4,441,8,4,1,4,1,4,3,4,445,8,4,1,4,5,4,448,8,4,10,4,12,4,451,9,4,1,4,
  	3,4,454,8,4,1,4,1,4,1,5,1,5,1,5,3,5,461,8,5,1,5,1,5,3,5,465,8,5,1,5,1,
  	5,1,5,1,5,1,5,1,5,3,5,473,8,5,1,5,1,5,3,5,477,8,5,1,6,1,6,1,6,1,6,1,6,
  	1,6,1,6,1,6,3,6,487,8,6,1,6,1,6,3,6,491,8,6,1,6,1,6,3,6,495,8,6,1,6,5,
  	6,498,8,6,10,6,12,6,501,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,3,
  	7,513,8,7,1,7,1,7,3,7,517,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,525,8,7,1,7,
  	3,7,528,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,536,8,8,1,8,3,8,539,8,8,1,9,1,
  	9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,554,8,10,1,
  	10,1,10,1,10,3,10,559,8,10,1,10,1,10,1,10,1,10,3,10,565,8,10,1,10,1,10,
  	3,10,569,8,10,1,10,3,10,572,8,10,1,10,3,10,575,8,10,1,10,1,10,1,11,1,
  	11,3,11,581,8,11,1,11,1,11,3,11,585,8,11,1,11,5,11,588,8,11,10,11,12,
  	11,591,9,11,3,11,593,8,11,1,11,1,11,1,11,3,11,598,8,11,1,12,1,12,3,12,
  	602,8,12,1,12,1,12,3,12,606,8,12,1,12,5,12,609,8,12,10,12,12,12,612,9,
  	12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,626,
  	8,15,1,15,1,15,3,15,630,8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
  	1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,652,
  	8,17,1,17,1,17,3,17,656,8,17,1,17,3,17,659,8,17,1,17,3,17,662,8,17,1,
  	17,3,17,665,8,17,1,17,3,17,668,8,17,1,17,1,17,3,17,672,8,17,1,17,5,17,
  	675,8,17,10,17,12,17,678,9,17,1,17,3,17,681,8,17,1,17,1,17,1,17,1,17,
  	1,17,1,17,1,18,1,18,3,18,691,8,18,1,18,1,18,3,18,695,8,18,1,18,5,18,698,
  	8,18,10,18,12,18,701,9,18,1,19,1,19,3,19,705,8,19,1,19,1,19,1,19,3,19,
  	710,8,19,1,19,1,19,1,20,1,20,3,20,716,8,20,1,20,1,20,3,20,720,8,20,1,
  	20,1,20,3,20,724,8,20,1,20,5,20,727,8,20,10,20,12,20,730,9,20,1,20,1,
  	20,1,20,1,20,3,20,736,8,20,1,20,1,20,3,20,740,8,20,1,20,1,20,3,20,744,
  	8,20,1,20,3,20,747,8,20,1,21,1,21,3,21,751,8,21,1,21,1,21,3,21,755,8,
  	21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,3,23,774,8,23,1,23,1,23,3,23,778,8,23,1,23,1,23,3,23,
  	782,8,23,1,23,1,23,3,23,786,8,23,1,23,1,23,3,23,790,8,23,1,23,1,23,1,
  	23,3,23,795,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,3,23,808,8,23,1,23,1,23,3,23,812,8,23,1,23,1,23,3,23,816,8,23,1,23,
  	1,23,3,23,820,8,23,1,23,1,23,3,23,824,8,23,1,24,1,24,1,24,1,24,1,24,1,
  	24,1,24,1,24,1,24,3,24,835,8,24,1,24,1,24,3,24,839,8,24,1,24,1,24,3,24,
  	843,8,24,1,24,1,24,3,24,847,8,24,1,24,1,24,3,24,851,8,24,1,24,1,24,3,
  	24,855,8,24,3,24,857,8,24,1,24,1,24,3,24,861,8,24,1,24,1,24,3,24,865,
  	8,24,3,24,867,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,3,25,882,8,25,1,25,1,25,3,25,886,8,25,1,25,1,25,3,25,890,
  	8,25,1,25,1,25,3,25,894,8,25,1,25,1,25,3,25,898,8,25,1,25,4,25,901,8,
  	25,11,25,12,25,902,1,25,3,25,906,8,25,1,25,1,25,3,25,910,8,25,1,25,1,
  	25,3,25,914,8,25,3,25,916,8,25,1,25,1,25,3,25,920,8,25,1,25,1,25,3,25,
  	924,8,25,3,25,926,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
  	26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,945,8,27,1,27,1,27,1,28,1,
  	28,1,28,1,28,1,28,1,28,1,28,3,28,956,8,28,1,28,1,28,1,28,5,28,961,8,28,
  	10,28,12,28,964,9,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
  	3,29,976,8,29,1,30,1,30,1,30,1,30,1,30,3,30,983,8,30,1,31,1,31,1,31,1,
  	31,3,31,989,8,31,1,31,3,31,992,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
  	1,32,3,32,1002,8,32,1,32,3,32,1005,8,32,1,33,1,33,1,33,1,33,1,33,1,33,
  	3,33,1013,8,33,1,33,3,33,1016,8,33,1,34,1,34,1,34,1,34,3,34,1022,8,34,
  	1,34,3,34,1025,8,34,1,34,1,34,1,35,1,35,3,35,1031,8,35,1,35,1,35,1,36,
  	1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,1046,8,37,1,37,
  	1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,3,39,
  	1062,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1071,8,40,1,41,1,41,
  	1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,3,45,1097,8,45,1,45,1,45,3,45,
  	1101,8,45,1,45,5,45,1104,8,45,10,45,12,45,1107,9,45,1,46,1,46,1,46,1,
  	46,1,47,1,47,3,47,1115,8,47,1,47,1,47,3,47,1119,8,47,1,47,5,47,1122,8,
  	47,10,47,12,47,1125,9,47,1,48,1,48,1,48,3,48,1130,8,48,1,49,1,49,1,49,
  	3,49,1135,8,49,1,50,1,50,1,50,3,50,1140,8,50,1,51,1,51,1,51,1,51,3,51,
  	1146,8,51,1,51,1,51,3,51,1150,8,51,1,51,1,51,3,51,1154,8,51,1,51,1,51,
  	1,52,1,52,1,52,3,52,1161,8,52,1,52,3,52,1164,8,52,1,52,1,52,1,52,1,52,
  	1,53,1,53,1,53,3,53,1173,8,53,5,53,1175,8,53,10,53,12,53,1178,9,53,1,
  	53,1,53,3,53,1182,8,53,1,53,1,53,3,53,1186,8,53,1,53,5,53,1189,8,53,10,
  	53,12,53,1192,9,53,1,54,1,54,1,54,1,54,3,54,1198,8,54,1,54,1,54,3,54,
  	1202,8,54,1,54,1,54,3,54,1206,8,54,1,54,1,54,1,54,1,54,3,54,1212,8,54,
  	1,54,1,54,3,54,1216,8,54,1,54,1,54,3,54,1220,8,54,1,54,1,54,1,54,1,54,
  	3,54,1226,8,54,1,54,1,54,3,54,1230,8,54,1,54,1,54,3,54,1234,8,54,1,54,
  	1,54,3,54,1238,8,54,1,54,1,54,3,54,1242,8,54,1,54,1,54,1,54,1,54,3,54,
  	1248,8,54,1,54,1,54,3,54,1252,8,54,1,54,1,54,3,54,1256,8,54,1,54,1,54,
  	3,54,1260,8,54,1,54,1,54,3,54,1264,8,54,1,54,1,54,3,54,1268,8,54,1,54,
  	1,54,5,54,1272,8,54,10,54,12,54,1275,9,54,1,55,1,55,5,55,1279,8,55,10,
  	55,12,55,1282,9,55,1,56,1,56,3,56,1286,8,56,1,56,1,56,1,57,1,57,3,57,
  	1292,8,57,1,58,1,58,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
  	1,60,1,60,1,60,1,60,1,60,3,60,1311,8,60,1,61,1,61,3,61,1315,8,61,1,62,
  	1,62,1,62,1,62,1,62,1,62,3,62,1323,8,62,1,63,1,63,1,63,1,63,1,64,1,64,
  	3,64,1331,8,64,3,64,1333,8,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,
  	3,65,1343,8,65,1,65,1,65,3,65,1347,8,65,1,65,1,65,3,65,1351,8,65,1,65,
  	1,65,1,66,1,66,3,66,1357,8,66,1,66,1,66,3,66,1361,8,66,1,66,5,66,1364,
  	8,66,10,66,12,66,1367,9,66,1,67,1,67,3,67,1371,8,67,1,67,5,67,1374,8,
  	67,10,67,12,67,1377,9,67,1,67,1,67,3,67,1381,8,67,4,67,1383,8,67,11,67,
  	12,67,1384,1,67,1,67,1,67,3,67,1390,8,67,1,68,1,68,1,68,1,68,3,68,1396,
  	8,68,1,68,1,68,1,68,3,68,1401,8,68,1,68,3,68,1404,8,68,1,69,1,69,3,69,
  	1408,8,69,1,70,1,70,3,70,1412,8,70,5,70,1414,8,70,10,70,12,70,1417,9,
  	70,1,70,1,70,1,70,3,70,1422,8,70,5,70,1424,8,70,10,70,12,70,1427,9,70,
  	1,70,1,70,3,70,1431,8,70,1,70,5,70,1434,8,70,10,70,12,70,1437,9,70,1,
  	70,3,70,1440,8,70,1,70,3,70,1443,8,70,1,70,1,70,3,70,1447,8,70,4,70,1449,
  	8,70,11,70,12,70,1450,1,70,1,70,3,70,1455,8,70,1,71,1,71,3,71,1459,8,
  	71,4,71,1461,8,71,11,71,12,71,1462,1,71,1,71,1,72,1,72,3,72,1469,8,72,
  	5,72,1471,8,72,10,72,12,72,1474,9,72,1,72,1,72,3,72,1478,8,72,5,72,1480,
  	8,72,10,72,12,72,1483,9,72,1,72,1,72,1,73,1,73,1,73,1,73,3,73,1491,8,
  	73,1,74,1,74,1,74,1,74,3,74,1497,8,74,1,75,1,75,1,75,1,75,1,75,1,75,3,
  	75,1505,8,75,1,75,1,75,3,75,1509,8,75,1,75,1,75,3,75,1513,8,75,1,75,1,
  	75,3,75,1517,8,75,1,75,1,75,1,75,1,75,1,75,3,75,1524,8,75,1,75,3,75,1527,
  	8,75,1,75,3,75,1530,8,75,1,75,3,75,1533,8,75,1,76,1,76,3,76,1537,8,76,
  	3,76,1539,8,76,1,76,1,76,1,76,1,76,3,76,1545,8,76,1,76,3,76,1548,8,76,
  	1,77,1,77,3,77,1552,8,77,1,77,1,77,3,77,1556,8,77,1,77,1,77,3,77,1560,
  	8,77,1,77,1,77,3,77,1564,8,77,1,78,1,78,3,78,1568,8,78,1,78,1,78,3,78,
  	1572,8,78,1,78,5,78,1575,8,78,10,78,12,78,1578,9,78,1,79,1,79,1,79,3,
  	79,1583,8,79,1,79,1,79,3,79,1587,8,79,1,80,1,80,3,80,1591,8,80,1,80,1,
  	80,3,80,1595,8,80,1,80,1,80,1,80,3,80,1600,8,80,1,80,1,80,3,80,1604,8,
  	80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,3,82,1613,8,82,1,82,1,82,3,82,1617,
  	8,82,1,82,1,82,1,82,3,82,1622,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
  	1,82,1,82,1,82,4,82,1634,8,82,11,82,12,82,1635,5,82,1638,8,82,10,82,12,
  	82,1641,9,82,1,83,1,83,3,83,1645,8,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
  	84,1,84,3,84,1655,8,84,1,84,1,84,1,85,1,85,3,85,1661,8,85,1,85,1,85,1,
  	85,5,85,1666,8,85,10,85,12,85,1669,9,85,1,86,1,86,1,86,1,86,1,86,1,86,
  	1,86,1,86,1,86,1,86,3,86,1681,8,86,1,87,1,87,3,87,1685,8,87,1,87,1,87,
  	3,87,1689,8,87,1,87,1,87,3,87,1693,8,87,1,87,5,87,1696,8,87,10,87,12,
  	87,1699,9,87,1,88,1,88,3,88,1703,8,88,1,88,1,88,3,88,1707,8,88,1,88,1,
  	88,1,89,1,89,3,89,1713,8,89,1,89,1,89,3,89,1717,8,89,1,89,1,89,3,89,1721,
  	8,89,1,89,1,89,3,89,1725,8,89,1,89,5,89,1728,8,89,10,89,12,89,1731,9,
  	89,1,90,1,90,1,90,3,90,1736,8,90,1,90,3,90,1739,8,90,1,91,1,91,1,91,1,
  	92,3,92,1745,8,92,1,92,3,92,1748,8,92,1,92,1,92,1,92,1,92,3,92,1754,8,
  	92,1,92,1,92,3,92,1758,8,92,1,92,1,92,3,92,1762,8,92,1,93,1,93,3,93,1766,
  	8,93,1,93,1,93,3,93,1770,8,93,1,93,5,93,1773,8,93,10,93,12,93,1776,9,
  	93,1,93,1,93,3,93,1780,8,93,1,93,1,93,3,93,1784,8,93,1,93,5,93,1787,8,
  	93,10,93,12,93,1790,9,93,3,93,1792,8,93,1,94,1,94,1,94,1,94,1,94,1,94,
  	1,94,3,94,1801,8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,1810,8,95,
  	1,95,5,95,1813,8,95,10,95,12,95,1816,9,95,1,96,1,96,1,96,1,96,1,97,1,
  	97,1,97,1,97,1,98,1,98,3,98,1828,8,98,1,98,3,98,1831,8,98,1,99,1,99,1,
  	99,1,99,1,100,1,100,3,100,1839,8,100,1,100,1,100,3,100,1843,8,100,1,100,
  	5,100,1846,8,100,10,100,12,100,1849,9,100,1,101,1,101,3,101,1853,8,101,
  	1,101,1,101,3,101,1857,8,101,1,101,1,101,1,101,3,101,1862,8,101,1,102,
  	1,102,1,103,1,103,3,103,1868,8,103,1,103,5,103,1871,8,103,10,103,12,103,
  	1874,9,103,1,103,1,103,1,103,1,103,3,103,1880,8,103,1,104,1,104,3,104,
  	1884,8,104,1,104,1,104,3,104,1888,8,104,3,104,1890,8,104,1,104,1,104,
  	3,104,1894,8,104,3,104,1896,8,104,1,104,1,104,3,104,1900,8,104,3,104,
  	1902,8,104,1,104,1,104,1,105,1,105,3,105,1908,8,105,1,105,1,105,1,106,
  	1,106,3,106,1914,8,106,1,106,1,106,3,106,1918,8,106,1,106,3,106,1921,
  	8,106,1,106,3,106,1924,8,106,1,106,1,106,1,106,1,106,3,106,1930,8,106,
  	1,106,3,106,1933,8,106,1,106,3,106,1936,8,106,1,106,1,106,3,106,1940,
  	8,106,1,106,1,106,1,106,1,106,3,106,1946,8,106,1,106,3,106,1949,8,106,
  	1,106,3,106,1952,8,106,1,106,1,106,3,106,1956,8,106,1,107,1,107,3,107,
  	1960,8,107,1,107,1,107,3,107,1964,8,107,3,107,1966,8,107,1,107,1,107,
  	3,107,1970,8,107,3,107,1972,8,107,1,107,1,107,3,107,1976,8,107,3,107,
  	1978,8,107,1,107,1,107,3,107,1982,8,107,3,107,1984,8,107,1,107,1,107,
  	1,108,1,108,3,108,1990,8,108,1,108,1,108,3,108,1994,8,108,1,108,1,108,
  	3,108,1998,8,108,1,108,1,108,3,108,2002,8,108,1,108,1,108,3,108,2006,
  	8,108,1,108,1,108,3,108,2010,8,108,1,108,1,108,3,108,2014,8,108,1,108,
  	1,108,3,108,2018,8,108,5,108,2020,8,108,10,108,12,108,2023,9,108,3,108,
  	2025,8,108,1,108,1,108,1,109,1,109,3,109,2031,8,109,1,109,1,109,3,109,
  	2035,8,109,1,109,1,109,3,109,2039,8,109,1,109,3,109,2042,8,109,1,109,
  	5,109,2045,8,109,10,109,12,109,2048,9,109,1,110,1,110,3,110,2052,8,110,
  	1,110,5,110,2055,8,110,10,110,12,110,2058,9,110,1,111,1,111,3,111,2062,
  	8,111,1,111,1,111,1,112,1,112,3,112,2068,8,112,1,112,1,112,1,112,1,112,
  	3,112,2074,8,112,1,112,3,112,2077,8,112,1,112,3,112,2080,8,112,1,112,
  	3,112,2083,8,112,1,112,1,112,3,112,2087,8,112,1,112,3,112,2090,8,112,
  	1,112,3,112,2093,8,112,1,112,3,112,2096,8,112,1,112,3,112,2099,8,112,
  	1,113,1,113,3,113,2103,8,113,1,113,1,113,3,113,2107,8,113,1,113,1,113,
  	3,113,2111,8,113,1,113,1,113,3,113,2115,8,113,1,113,1,113,3,113,2119,
  	8,113,1,113,1,113,3,113,2123,8,113,3,113,2125,8,113,1,113,3,113,2128,
  	8,113,1,113,1,113,3,113,2132,8,113,1,113,1,113,3,113,2136,8,113,1,113,
  	1,113,3,113,2140,8,113,1,113,1,113,3,113,2144,8,113,3,113,2146,8,113,
  	1,113,1,113,1,114,1,114,3,114,2152,8,114,1,114,3,114,2155,8,114,1,114,
  	3,114,2158,8,114,1,114,1,114,1,115,1,115,3,115,2164,8,115,1,115,3,115,
  	2167,8,115,1,115,3,115,2170,8,115,1,115,1,115,1,116,1,116,1,117,1,117,
  	1,118,1,118,1,119,1,119,1,120,1,120,1,121,1,121,1,121,1,121,1,121,5,121,
  	2189,8,121,10,121,12,121,2192,9,121,1,122,1,122,1,122,1,122,1,122,5,122,
  	2199,8,122,10,122,12,122,2202,9,122,1,123,1,123,1,123,1,123,1,123,5,123,
  	2209,8,123,10,123,12,123,2212,9,123,1,124,1,124,3,124,2216,8,124,5,124,
  	2218,8,124,10,124,12,124,2221,9,124,1,124,1,124,1,125,1,125,3,125,2227,
  	8,125,1,125,1,125,3,125,2231,8,125,1,125,1,125,3,125,2235,8,125,1,125,
  	1,125,3,125,2239,8,125,1,125,1,125,3,125,2243,8,125,1,125,1,125,1,125,
  	1,125,1,125,1,125,3,125,2251,8,125,1,125,1,125,3,125,2255,8,125,1,125,
  	1,125,3,125,2259,8,125,1,125,1,125,3,125,2263,8,125,1,125,1,125,4,125,
  	2267,8,125,11,125,12,125,2268,1,125,1,125,3,125,2273,8,125,1,126,1,126,
  	1,127,1,127,3,127,2279,8,127,1,127,1,127,3,127,2283,8,127,1,127,5,127,
  	2286,8,127,10,127,12,127,2289,9,127,1,128,1,128,3,128,2293,8,128,1,128,
  	1,128,3,128,2297,8,128,1,128,5,128,2300,8,128,10,128,12,128,2303,9,128,
  	1,129,1,129,3,129,2307,8,129,1,129,1,129,3,129,2311,8,129,1,129,1,129,
  	5,129,2315,8,129,10,129,12,129,2318,9,129,1,130,1,130,1,131,1,131,3,131,
  	2324,8,131,1,131,1,131,3,131,2328,8,131,1,131,1,131,5,131,2332,8,131,
  	10,131,12,131,2335,9,131,1,132,1,132,1,133,1,133,3,133,2341,8,133,1,133,
  	1,133,3,133,2345,8,133,1,133,1,133,5,133,2349,8,133,10,133,12,133,2352,
  	9,133,1,134,1,134,1,135,1,135,3,135,2358,8,135,1,135,1,135,3,135,2362,
  	8,135,1,135,5,135,2365,8,135,10,135,12,135,2368,9,135,1,136,1,136,3,136,
  	2372,8,136,5,136,2374,8,136,10,136,12,136,2377,9,136,1,136,1,136,3,136,
  	2381,8,136,1,136,3,136,2384,8,136,1,137,1,137,1,137,4,137,2389,8,137,
  	11,137,12,137,2390,1,137,3,137,2394,8,137,1,138,1,138,1,138,3,138,2399,
  	8,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,2408,8,138,1,138,
  	1,138,3,138,2412,8,138,1,138,3,138,2415,8,138,1,139,1,139,1,139,1,139,
  	1,139,1,139,1,139,1,139,1,139,1,139,1,139,3,139,2428,8,139,1,139,3,139,
  	2431,8,139,1,139,1,139,1,140,3,140,2436,8,140,1,140,1,140,1,141,1,141,
  	1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,3,141,2450,8,141,1,142,
  	1,142,3,142,2454,8,142,1,142,5,142,2457,8,142,10,142,12,142,2460,9,142,
  	1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,2472,
  	8,143,1,144,1,144,3,144,2476,8,144,1,144,1,144,3,144,2480,8,144,1,144,
  	1,144,3,144,2484,8,144,1,144,1,144,1,144,1,144,3,144,2490,8,144,1,144,
  	1,144,3,144,2494,8,144,1,144,1,144,3,144,2498,8,144,1,144,1,144,1,144,
  	1,144,3,144,2504,8,144,1,144,1,144,3,144,2508,8,144,1,144,1,144,3,144,
  	2512,8,144,1,144,1,144,1,144,1,144,3,144,2518,8,144,1,144,1,144,3,144,
  	2522,8,144,1,144,1,144,3,144,2526,8,144,1,144,1,144,3,144,2530,8,144,
  	1,145,1,145,3,145,2534,8,145,1,145,3,145,2537,8,145,1,146,1,146,1,146,
  	1,146,1,146,1,146,1,147,1,147,1,147,1,147,1,147,1,147,3,147,2551,8,147,
  	1,148,1,148,1,149,1,149,3,149,2557,8,149,1,149,1,149,3,149,2561,8,149,
  	1,149,1,149,3,149,2565,8,149,5,149,2567,8,149,10,149,12,149,2570,9,149,
  	3,149,2572,8,149,1,149,1,149,1,150,1,150,3,150,2578,8,150,1,150,3,150,
  	2581,8,150,1,151,1,151,3,151,2585,8,151,1,151,1,151,3,151,2589,8,151,
  	1,151,1,151,3,151,2593,8,151,1,151,1,151,3,151,2597,8,151,5,151,2599,
  	8,151,10,151,12,151,2602,9,151,1,151,1,151,1,152,1,152,3,152,2608,8,152,
  	1,152,3,152,2611,8,152,1,152,1,152,3,152,2615,8,152,1,152,1,152,1,153,
  	1,153,3,153,2621,8,153,1,153,1,153,3,153,2625,8,153,1,153,1,153,1,154,
  	1,154,3,154,2631,8,154,1,154,1,154,3,154,2635,8,154,1,154,1,154,3,154,
  	2639,8,154,1,154,1,154,1,154,3,154,2644,8,154,1,154,1,154,3,154,2648,
  	8,154,1,154,1,154,3,154,2652,8,154,1,154,1,154,3,154,2656,8,154,1,154,
  	1,154,1,154,3,154,2661,8,154,1,154,3,154,2664,8,154,1,154,3,154,2667,
  	8,154,1,154,1,154,1,154,1,154,3,154,2673,8,154,1,154,1,154,3,154,2677,
  	8,154,1,154,1,154,3,154,2681,8,154,3,154,2683,8,154,1,154,1,154,3,154,
  	2687,8,154,1,154,1,154,3,154,2691,8,154,1,154,1,154,3,154,2695,8,154,
  	5,154,2697,8,154,10,154,12,154,2700,9,154,3,154,2702,8,154,1,154,1,154,
  	3,154,2706,8,154,1,155,1,155,1,156,1,156,3,156,2712,8,156,1,156,1,156,
  	1,156,3,156,2717,8,156,3,156,2719,8,156,1,156,1,156,3,156,2723,8,156,
  	1,157,1,157,3,157,2727,8,157,1,157,1,157,1,157,3,157,2732,8,157,1,157,
  	1,157,3,157,2736,8,157,1,158,1,158,1,158,3,158,2741,8,158,1,158,1,158,
  	3,158,2745,8,158,1,158,1,158,3,158,2749,8,158,1,158,1,158,3,158,2753,
  	8,158,5,158,2755,8,158,10,158,12,158,2758,9,158,1,158,1,158,3,158,2762,
  	8,158,1,159,1,159,3,159,2766,8,159,1,159,4,159,2769,8,159,11,159,12,159,
  	2770,1,160,1,160,3,160,2775,8,160,1,160,1,160,3,160,2779,8,160,1,160,
  	1,160,3,160,2783,8,160,1,160,1,160,3,160,2787,8,160,1,160,3,160,2790,
  	8,160,1,160,3,160,2793,8,160,1,160,1,160,1,161,1,161,3,161,2799,8,161,
  	1,161,1,161,3,161,2803,8,161,1,161,1,161,3,161,2807,8,161,1,161,1,161,
  	3,161,2811,8,161,1,161,3,161,2814,8,161,1,161,3,161,2817,8,161,1,161,
  	1,161,1,162,1,162,3,162,2823,8,162,1,162,1,162,3,162,2827,8,162,1,163,
  	1,163,3,163,2831,8,163,1,163,4,163,2834,8,163,11,163,12,163,2835,1,163,
  	1,163,3,163,2840,8,163,1,163,1,163,3,163,2844,8,163,1,163,4,163,2847,
  	8,163,11,163,12,163,2848,3,163,2851,8,163,1,163,3,163,2854,8,163,1,163,
  	1,163,3,163,2858,8,163,1,163,3,163,2861,8,163,1,163,3,163,2864,8,163,
  	1,163,1,163,1,164,1,164,3,164,2870,8,164,1,164,1,164,3,164,2874,8,164,
  	1,164,1,164,3,164,2878,8,164,1,164,1,164,1,165,1,165,1,166,1,166,3,166,
  	2886,8,166,1,167,1,167,1,167,3,167,2891,8,167,1,168,1,168,3,168,2895,
  	8,168,1,168,1,168,1,169,1,169,1,170,1,170,1,171,1,171,1,172,1,172,1,173,
  	1,173,1,173,1,173,1,173,3,173,2912,8,173,1,174,1,174,1,175,1,175,1,176,
  	1,176,1,177,1,177,1,177,0,2,108,164,178,0,2,4,6,8,10,12,14,16,18,20,22,
  	24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
  	70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
  	112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
  	148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
  	184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
  	220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
  	256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
  	292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,
  	328,330,332,334,336,338,340,342,344,346,348,350,352,354,0,11,3,0,122,
  	122,129,129,134,134,2,0,52,53,74,75,2,0,6,6,13,17,1,0,19,20,2,0,21,21,
  	153,153,2,0,22,23,150,150,2,0,86,86,138,138,29,0,47,47,49,49,51,51,54,
  	57,60,60,62,63,65,67,69,70,73,73,76,76,78,78,83,85,89,89,93,94,96,96,
  	98,98,100,102,104,107,109,110,121,121,123,127,129,130,132,132,137,137,
  	139,139,142,142,146,146,149,149,151,151,2,0,14,14,27,30,2,0,16,16,31,
  	34,2,0,35,45,153,153,3312,0,356,1,0,0,0,2,376,1,0,0,0,4,410,1,0,0,0,6,
  	412,1,0,0,0,8,434,1,0,0,0,10,476,1,0,0,0,12,478,1,0,0,0,14,508,1,0,0,
  	0,16,529,1,0,0,0,18,540,1,0,0,0,20,546,1,0,0,0,22,597,1,0,0,0,24,599,
  	1,0,0,0,26,613,1,0,0,0,28,617,1,0,0,0,30,621,1,0,0,0,32,633,1,0,0,0,34,
  	645,1,0,0,0,36,688,1,0,0,0,38,702,1,0,0,0,40,746,1,0,0,0,42,748,1,0,0,
  	0,44,758,1,0,0,0,46,823,1,0,0,0,48,825,1,0,0,0,50,870,1,0,0,0,52,929,
  	1,0,0,0,54,937,1,0,0,0,56,948,1,0,0,0,58,965,1,0,0,0,60,982,1,0,0,0,62,
  	984,1,0,0,0,64,1004,1,0,0,0,66,1015,1,0,0,0,68,1017,1,0,0,0,70,1030,1,
  	0,0,0,72,1034,1,0,0,0,74,1038,1,0,0,0,76,1049,1,0,0,0,78,1061,1,0,0,0,
  	80,1063,1,0,0,0,82,1072,1,0,0,0,84,1076,1,0,0,0,86,1080,1,0,0,0,88,1086,
  	1,0,0,0,90,1094,1,0,0,0,92,1108,1,0,0,0,94,1112,1,0,0,0,96,1126,1,0,0,
  	0,98,1131,1,0,0,0,100,1136,1,0,0,0,102,1141,1,0,0,0,104,1157,1,0,0,0,
  	106,1176,1,0,0,0,108,1267,1,0,0,0,110,1276,1,0,0,0,112,1283,1,0,0,0,114,
  	1291,1,0,0,0,116,1293,1,0,0,0,118,1295,1,0,0,0,120,1310,1,0,0,0,122,1314,
  	1,0,0,0,124,1316,1,0,0,0,126,1324,1,0,0,0,128,1332,1,0,0,0,130,1336,1,
  	0,0,0,132,1354,1,0,0,0,134,1389,1,0,0,0,136,1403,1,0,0,0,138,1407,1,0,
  	0,0,140,1454,1,0,0,0,142,1460,1,0,0,0,144,1472,1,0,0,0,146,1490,1,0,0,
  	0,148,1496,1,0,0,0,150,1498,1,0,0,0,152,1538,1,0,0,0,154,1549,1,0,0,0,
  	156,1565,1,0,0,0,158,1579,1,0,0,0,160,1590,1,0,0,0,162,1605,1,0,0,0,164,
  	1621,1,0,0,0,166,1642,1,0,0,0,168,1652,1,0,0,0,170,1658,1,0,0,0,172,1680,
  	1,0,0,0,174,1682,1,0,0,0,176,1700,1,0,0,0,178,1712,1,0,0,0,180,1732,1,
  	0,0,0,182,1740,1,0,0,0,184,1747,1,0,0,0,186,1791,1,0,0,0,188,1800,1,0,
  	0,0,190,1802,1,0,0,0,192,1817,1,0,0,0,194,1821,1,0,0,0,196,1825,1,0,0,
  	0,198,1832,1,0,0,0,200,1836,1,0,0,0,202,1861,1,0,0,0,204,1863,1,0,0,0,
  	206,1879,1,0,0,0,208,1881,1,0,0,0,210,1905,1,0,0,0,212,1955,1,0,0,0,214,
  	1957,1,0,0,0,216,1987,1,0,0,0,218,2028,1,0,0,0,220,2049,1,0,0,0,222,2059,
  	1,0,0,0,224,2065,1,0,0,0,226,2100,1,0,0,0,228,2149,1,0,0,0,230,2161,1,
  	0,0,0,232,2173,1,0,0,0,234,2175,1,0,0,0,236,2177,1,0,0,0,238,2179,1,0,
  	0,0,240,2181,1,0,0,0,242,2183,1,0,0,0,244,2193,1,0,0,0,246,2203,1,0,0,
  	0,248,2219,1,0,0,0,250,2272,1,0,0,0,252,2274,1,0,0,0,254,2276,1,0,0,0,
  	256,2290,1,0,0,0,258,2304,1,0,0,0,260,2319,1,0,0,0,262,2321,1,0,0,0,264,
  	2336,1,0,0,0,266,2338,1,0,0,0,268,2353,1,0,0,0,270,2355,1,0,0,0,272,2375,
  	1,0,0,0,274,2385,1,0,0,0,276,2414,1,0,0,0,278,2427,1,0,0,0,280,2435,1,
  	0,0,0,282,2449,1,0,0,0,284,2451,1,0,0,0,286,2471,1,0,0,0,288,2529,1,0,
  	0,0,290,2531,1,0,0,0,292,2538,1,0,0,0,294,2550,1,0,0,0,296,2552,1,0,0,
  	0,298,2554,1,0,0,0,300,2575,1,0,0,0,302,2582,1,0,0,0,304,2607,1,0,0,0,
  	306,2618,1,0,0,0,308,2705,1,0,0,0,310,2707,1,0,0,0,312,2722,1,0,0,0,314,
  	2724,1,0,0,0,316,2761,1,0,0,0,318,2763,1,0,0,0,320,2772,1,0,0,0,322,2796,
  	1,0,0,0,324,2820,1,0,0,0,326,2850,1,0,0,0,328,2867,1,0,0,0,330,2881,1,
  	0,0,0,332,2885,1,0,0,0,334,2887,1,0,0,0,336,2892,1,0,0,0,338,2898,1,0,
  	0,0,340,2900,1,0,0,0,342,2902,1,0,0,0,344,2904,1,0,0,0,346,2911,1,0,0,
  	0,348,2913,1,0,0,0,350,2915,1,0,0,0,352,2917,1,0,0,0,354,2919,1,0,0,0,
  	356,367,3,2,1,0,357,359,5,170,0,0,358,357,1,0,0,0,358,359,1,0,0,0,359,
  	360,1,0,0,0,360,362,5,1,0,0,361,363,5,170,0,0,362,361,1,0,0,0,362,363,
  	1,0,0,0,363,364,1,0,0,0,364,366,3,2,1,0,365,358,1,0,0,0,366,369,1,0,0,
  	0,367,365,1,0,0,0,367,368,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,370,
  	372,5,170,0,0,371,370,1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,374,
  	5,0,0,1,374,1,1,0,0,0,375,377,3,114,57,0,376,375,1,0,0,0,376,377,1,0,
  	0,0,377,379,1,0,0,0,378,380,5,170,0,0,379,378,1,0,0,0,379,380,1,0,0,0,
  	380,381,1,0,0,0,381,386,3,4,2,0,382,384,5,170,0,0,383,382,1,0,0,0,383,
  	384,1,0,0,0,384,385,1,0,0,0,385,387,5,1,0,0,386,383,1,0,0,0,386,387,1,
  	0,0,0,387,3,1,0,0,0,388,411,3,128,64,0,389,411,3,46,23,0,390,411,3,48,
  	24,0,391,411,3,50,25,0,392,411,3,54,27,0,393,411,3,56,28,0,394,411,3,
  	58,29,0,395,411,3,74,37,0,396,411,3,76,38,0,397,411,3,6,3,0,398,411,3,
  	12,6,0,399,411,3,14,7,0,400,411,3,30,15,0,401,411,3,34,17,0,402,411,3,
  	32,16,0,403,411,3,120,60,0,404,411,3,122,61,0,405,411,3,16,8,0,406,411,
  	3,18,9,0,407,411,3,20,10,0,408,411,3,26,13,0,409,411,3,28,14,0,410,388,
  	1,0,0,0,410,389,1,0,0,0,410,390,1,0,0,0,410,391,1,0,0,0,410,392,1,0,0,
  	0,410,393,1,0,0,0,410,394,1,0,0,0,410,395,1,0,0,0,410,396,1,0,0,0,410,
  	397,1,0,0,0,410,398,1,0,0,0,410,399,1,0,0,0,410,400,1,0,0,0,410,401,1,
  	0,0,0,410,402,1,0,0,0,410,403,1,0,0,0,410,404,1,0,0,0,410,405,1,0,0,0,
  	410,406,1,0,0,0,410,407,1,0,0,0,410,408,1,0,0,0,410,409,1,0,0,0,411,5,
  	1,0,0,0,412,413,5,66,0,0,413,414,5,170,0,0,414,423,3,344,172,0,415,417,
  	5,170,0,0,416,415,1,0,0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,420,3,8,
  	4,0,419,421,5,170,0,0,420,419,1,0,0,0,420,421,1,0,0,0,421,424,1,0,0,0,
  	422,424,5,170,0,0,423,416,1,0,0,0,423,422,1,0,0,0,424,425,1,0,0,0,425,
  	426,5,87,0,0,426,427,5,170,0,0,427,432,3,10,5,0,428,430,5,170,0,0,429,
  	428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,433,3,42,21,0,432,429,
  	1,0,0,0,432,433,1,0,0,0,433,7,1,0,0,0,434,436,5,2,0,0,435,437,5,170,0,
  	0,436,435,1,0,0,0,436,437,1,0,0,0,437,438,1,0,0,0,438,449,3,344,172,0,
  	439,441,5,170,0,0,440,439,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,
  	444,5,3,0,0,443,445,5,170,0,0,444,443,1,0,0,0,444,445,1,0,0,0,445,446,
  	1,0,0,0,446,448,3,344,172,0,447,440,1,0,0,0,448,451,1,0,0,0,449,447,1,
  	0,0,0,449,450,1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,452,454,5,170,0,
  	0,453,452,1,0,0,0,453,454,1,0,0,0,454,455,1,0,0,0,455,456,5,4,0,0,456,
  	9,1,0,0,0,457,477,3,40,20,0,458,460,5,2,0,0,459,461,5,170,0,0,460,459,
  	1,0,0,0,460,461,1,0,0,0,461,462,1,0,0,0,462,464,3,128,64,0,463,465,5,
  	170,0,0,464,463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,467,5,4,0,
  	0,467,477,1,0,0,0,468,477,3,330,165,0,469,470,3,330,165,0,470,472,5,5,
  	0,0,471,473,5,170,0,0,472,471,1,0,0,0,472,473,1,0,0,0,473,474,1,0,0,0,
  	474,475,3,344,172,0,475,477,1,0,0,0,476,457,1,0,0,0,476,458,1,0,0,0,476,
  	468,1,0,0,0,476,469,1,0,0,0,477,11,1,0,0,0,478,479,5,66,0,0,479,480,5,
  	170,0,0,480,481,3,344,172,0,481,482,5,170,0,0,482,483,5,87,0,0,483,484,
  	5,170,0,0,484,486,5,2,0,0,485,487,5,170,0,0,486,485,1,0,0,0,486,487,1,
  	0,0,0,487,488,1,0,0,0,488,499,5,156,0,0,489,491,5,170,0,0,490,489,1,0,
  	0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,494,5,3,0,0,493,495,5,170,0,0,
  	494,493,1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,0,496,498,5,156,0,0,497,
  	490,1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,502,1,
  	0,0,0,501,499,1,0,0,0,502,503,5,4,0,0,503,504,5,170,0,0,504,505,5,56,
  	0,0,505,506,5,170,0,0,506,507,5,61,0,0,507,13,1,0,0,0,508,509,5,66,0,
  	0,509,510,5,170,0,0,510,512,5,2,0,0,511,513,5,170,0,0,512,511,1,0,0,0,
  	512,513,1,0,0,0,513,514,1,0,0,0,514,516,3,128,64,0,515,517,5,170,0,0,
  	516,515,1,0,0,0,516,517,1,0,0,0,517,518,1,0,0,0,518,519,5,4,0,0,519,520,
  	5,170,0,0,520,521,5,136,0,0,521,522,5,170,0,0,522,527,5,156,0,0,523,525,
  	5,170,0,0,524,523,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,526,528,3,42,
  	21,0,527,524,1,0,0,0,527,528,1,0,0,0,528,15,1,0,0,0,529,530,5,84,0,0,
  	530,531,5,170,0,0,531,532,5,70,0,0,532,533,5,170,0,0,533,538,5,156,0,
  	0,534,536,5,170,0,0,535,534,1,0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,537,
  	539,3,42,21,0,538,535,1,0,0,0,538,539,1,0,0,0,539,17,1,0,0,0,540,541,
  	5,93,0,0,541,542,5,170,0,0,542,543,5,70,0,0,543,544,5,170,0,0,544,545,
  	5,156,0,0,545,19,1,0,0,0,546,547,5,54,0,0,547,548,5,170,0,0,548,553,5,
  	156,0,0,549,550,5,170,0,0,550,551,5,51,0,0,551,552,5,170,0,0,552,554,
  	3,344,172,0,553,549,1,0,0,0,553,554,1,0,0,0,554,555,1,0,0,0,555,556,5,
  	170,0,0,556,558,5,2,0,0,557,559,5,170,0,0,558,557,1,0,0,0,558,559,1,0,
  	0,0,559,560,1,0,0,0,560,561,5,71,0,0,561,562,5,170,0,0,562,571,3,346,
  	173,0,563,565,5,170,0,0,564,563,1,0,0,0,564,565,1,0,0,0,565,566,1,0,0,
  	0,566,568,5,3,0,0,567,569,5,170,0,0,568,567,1,0,0,0,568,569,1,0,0,0,569,
  	570,1,0,0,0,570,572,3,24,12,0,571,564,1,0,0,0,571,572,1,0,0,0,572,574,
  	1,0,0,0,573,575,5,170,0,0,574,573,1,0,0,0,574,575,1,0,0,0,575,576,1,0,
  	0,0,576,577,5,4,0,0,577,21,1,0,0,0,578,592,3,346,173,0,579,581,5,170,
  	0,0,580,579,1,0,0,0,580,581,1,0,0,0,581,582,1,0,0,0,582,584,5,6,0,0,583,
  	585,5,170,0,0,584,583,1,0,0,0,584,585,1,0,0,0,585,593,1,0,0,0,586,588,
  	5,170,0,0,587,586,1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,
  	0,0,590,593,1,0,0,0,591,589,1,0,0,0,592,580,1,0,0,0,592,589,1,0,0,0,593,
  	594,1,0,0,0,594,595,3,294,147,0,595,598,1,0,0,0,596,598,3,346,173,0,597,
  	578,1,0,0,0,597,596,1,0,0,0,598,23,1,0,0,0,599,610,3,22,11,0,600,602,
  	5,170,0,0,601,600,1,0,0,0,601,602,1,0,0,0,602,603,1,0,0,0,603,605,5,3,
  	0,0,604,606,5,170,0,0,605,604,1,0,0,0,605,606,1,0,0,0,606,607,1,0,0,0,
  	607,609,3,22,11,0,608,601,1,0,0,0,609,612,1,0,0,0,610,608,1,0,0,0,610,
  	611,1,0,0,0,611,25,1,0,0,0,612,610,1,0,0,0,613,614,5,76,0,0,614,615,5,
  	170,0,0,615,616,3,344,172,0,616,27,1,0,0,0,617,618,5,142,0,0,618,619,
  	5,170,0,0,619,620,3,344,172,0,620,29,1,0,0,0,621,622,5,57,0,0,622,623,
  	5,170,0,0,623,625,3,346,173,0,624,626,5,170,0,0,625,624,1,0,0,0,625,626,
  	1,0,0,0,626,627,1,0,0,0,627,629,5,6,0,0,628,630,5,170,0,0,629,628,1,0,
  	0,0,629,630,1,0,0,0,630,631,1,0,0,0,631,632,3,240,120,0,632,31,1,0,0,
  	0,633,634,5,62,0,0,634,635,5,170,0,0,635,636,5,114,0,0,636,637,5,170,
  	0,0,637,638,5,134,0,0,638,639,5,170,0,0,639,640,3,344,172,0,640,641,5,
  	170,0,0,641,642,5,98,0,0,642,643,5,170,0,0,643,644,5,156,0,0,644,33,1,
  	0,0,0,645,646,5,68,0,0,646,647,5,170,0,0,647,648,5,103,0,0,648,649,5,
  	170,0,0,649,651,3,310,155,0,650,652,5,170,0,0,651,650,1,0,0,0,651,652,
  	1,0,0,0,652,653,1,0,0,0,653,655,5,2,0,0,654,656,5,170,0,0,655,654,1,0,
  	0,0,655,656,1,0,0,0,656,658,1,0,0,0,657,659,3,36,18,0,658,657,1,0,0,0,
  	658,659,1,0,0,0,659,661,1,0,0,0,660,662,5,170,0,0,661,660,1,0,0,0,661,
  	662,1,0,0,0,662,664,1,0,0,0,663,665,3,38,19,0,664,663,1,0,0,0,664,665,
  	1,0,0,0,665,676,1,0,0,0,666,668,5,170,0,0,667,666,1,0,0,0,667,668,1,0,
  	0,0,668,669,1,0,0,0,669,671,5,3,0,0,670,672,5,170,0,0,671,670,1,0,0,0,
  	671,672,1,0,0,0,672,673,1,0,0,0,673,675,3,38,19,0,674,667,1,0,0,0,675,
  	678,1,0,0,0,676,674,1,0,0,0,676,677,1,0,0,0,677,680,1,0,0,0,678,676,1,
  	0,0,0,679,681,5,170,0,0,680,679,1,0,0,0,680,681,1,0,0,0,681,682,1,0,0,
  	0,682,683,5,4,0,0,683,684,5,170,0,0,684,685,5,51,0,0,685,686,5,170,0,
  	0,686,687,3,240,120,0,687,35,1,0,0,0,688,699,3,346,173,0,689,691,5,170,
  	0,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,694,5,3,0,0,693,
  	695,5,170,0,0,694,693,1,0,0,0,694,695,1,0,0,0,695,696,1,0,0,0,696,698,
  	3,346,173,0,697,690,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,699,700,1,
  	0,0,0,700,37,1,0,0,0,701,699,1,0,0,0,702,704,3,346,173,0,703,705,5,170,
  	0,0,704,703,1,0,0,0,704,705,1,0,0,0,705,706,1,0,0,0,706,707,5,155,0,0,
  	707,709,5,6,0,0,708,710,5,170,0,0,709,708,1,0,0,0,709,710,1,0,0,0,710,
  	711,1,0,0,0,711,712,3,294,147,0,712,39,1,0,0,0,713,715,5,7,0,0,714,716,
  	5,170,0,0,715,714,1,0,0,0,715,716,1,0,0,0,716,717,1,0,0,0,717,728,5,156,
  	0,0,718,720,5,170,0,0,719,718,1,0,0,0,719,720,1,0,0,0,720,721,1,0,0,0,
  	721,723,5,3,0,0,722,724,5,170,0,0,723,722,1,0,0,0,723,724,1,0,0,0,724,
  	725,1,0,0,0,725,727,5,156,0,0,726,719,1,0,0,0,727,730,1,0,0,0,728,726,
  	1,0,0,0,728,729,1,0,0,0,729,731,1,0,0,0,730,728,1,0,0,0,731,747,5,8,0,
  	0,732,747,5,156,0,0,733,735,5,88,0,0,734,736,5,170,0,0,735,734,1,0,0,
  	0,735,736,1,0,0,0,736,737,1,0,0,0,737,739,5,2,0,0,738,740,5,170,0,0,739,
  	738,1,0,0,0,739,740,1,0,0,0,740,741,1,0,0,0,741,743,5,156,0,0,742,744,
  	5,170,0,0,743,742,1,0,0,0,743,744,1,0,0,0,744,745,1,0,0,0,745,747,5,4,
  	0,0,746,713,1,0,0,0,746,732,1,0,0,0,746,733,1,0,0,0,747,41,1,0,0,0,748,
  	750,5,2,0,0,749,751,5,170,0,0,750,749,1,0,0,0,750,751,1,0,0,0,751,752,
  	1,0,0,0,752,754,3,24,12,0,753,755,5,170,0,0,754,753,1,0,0,0,754,755,1,
  	0,0,0,755,756,1,0,0,0,756,757,5,4,0,0,757,43,1,0,0,0,758,759,5,94,0,0,
  	759,760,5,170,0,0,760,761,5,111,0,0,761,762,5,170,0,0,762,763,5,82,0,
  	0,763,45,1,0,0,0,764,765,5,68,0,0,765,766,5,170,0,0,766,767,5,110,0,0,
  	767,768,5,170,0,0,768,769,5,134,0,0,769,773,5,170,0,0,770,771,3,44,22,
  	0,771,772,5,170,0,0,772,774,1,0,0,0,773,770,1,0,0,0,773,774,1,0,0,0,774,
  	775,1,0,0,0,775,777,3,344,172,0,776,778,5,170,0,0,777,776,1,0,0,0,777,
  	778,1,0,0,0,778,779,1,0,0,0,779,781,5,2,0,0,780,782,5,170,0,0,781,780,
  	1,0,0,0,781,782,1,0,0,0,782,783,1,0,0,0,783,785,3,94,47,0,784,786,5,170,
  	0,0,785,784,1,0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,789,5,3,0,0,788,
  	790,5,170,0,0,789,788,1,0,0,0,789,790,1,0,0,0,790,791,1,0,0,0,791,792,
  	3,102,51,0,792,794,1,0,0,0,793,795,5,170,0,0,794,793,1,0,0,0,794,795,
  	1,0,0,0,795,796,1,0,0,0,796,797,5,4,0,0,797,824,1,0,0,0,798,799,5,68,
  	0,0,799,800,5,170,0,0,800,801,5,110,0,0,801,802,5,170,0,0,802,803,5,134,
  	0,0,803,807,5,170,0,0,804,805,3,44,22,0,805,806,5,170,0,0,806,808,1,0,
  	0,0,807,804,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,811,3,344,172,
  	0,810,812,5,170,0,0,811,810,1,0,0,0,811,812,1,0,0,0,812,813,1,0,0,0,813,
  	815,5,2,0,0,814,816,5,170,0,0,815,814,1,0,0,0,815,816,1,0,0,0,816,817,
  	1,0,0,0,817,819,3,106,53,0,818,820,5,170,0,0,819,818,1,0,0,0,819,820,
  	1,0,0,0,820,821,1,0,0,0,821,822,5,4,0,0,822,824,1,0,0,0,823,764,1,0,0,
  	0,823,798,1,0,0,0,824,47,1,0,0,0,825,826,5,68,0,0,826,827,5,170,0,0,827,
  	828,5,124,0,0,828,829,5,170,0,0,829,830,5,134,0,0,830,834,5,170,0,0,831,
  	832,3,44,22,0,832,833,5,170,0,0,833,835,1,0,0,0,834,831,1,0,0,0,834,835,
  	1,0,0,0,835,836,1,0,0,0,836,838,3,344,172,0,837,839,5,170,0,0,838,837,
  	1,0,0,0,838,839,1,0,0,0,839,840,1,0,0,0,840,842,5,2,0,0,841,843,5,170,
  	0,0,842,841,1,0,0,0,842,843,1,0,0,0,843,844,1,0,0,0,844,846,3,52,26,0,
  	845,847,5,170,0,0,846,845,1,0,0,0,846,847,1,0,0,0,847,856,1,0,0,0,848,
  	850,5,3,0,0,849,851,5,170,0,0,850,849,1,0,0,0,850,851,1,0,0,0,851,852,
  	1,0,0,0,852,854,3,94,47,0,853,855,5,170,0,0,854,853,1,0,0,0,854,855,1,
  	0,0,0,855,857,1,0,0,0,856,848,1,0,0,0,856,857,1,0,0,0,857,866,1,0,0,0,
  	858,860,5,3,0,0,859,861,5,170,0,0,860,859,1,0,0,0,860,861,1,0,0,0,861,
  	862,1,0,0,0,862,864,3,346,173,0,863,865,5,170,0,0,864,863,1,0,0,0,864,
  	865,1,0,0,0,865,867,1,0,0,0,866,858,1,0,0,0,866,867,1,0,0,0,867,868,1,
  	0,0,0,868,869,5,4,0,0,869,49,1,0,0,0,870,871,5,68,0,0,871,872,5,170,0,
  	0,872,873,5,124,0,0,873,874,5,170,0,0,874,875,5,134,0,0,875,876,5,170,
  	0,0,876,877,5,90,0,0,877,881,5,170,0,0,878,879,3,44,22,0,879,880,5,170,
  	0,0,880,882,1,0,0,0,881,878,1,0,0,0,881,882,1,0,0,0,882,883,1,0,0,0,883,
  	885,3,344,172,0,884,886,5,170,0,0,885,884,1,0,0,0,885,886,1,0,0,0,886,
  	887,1,0,0,0,887,889,5,2,0,0,888,890,5,170,0,0,889,888,1,0,0,0,889,890,
  	1,0,0,0,890,891,1,0,0,0,891,900,3,52,26,0,892,894,5,170,0,0,893,892,1,
  	0,0,0,893,894,1,0,0,0,894,895,1,0,0,0,895,897,5,3,0,0,896,898,5,170,0,
  	0,897,896,1,0,0,0,897,898,1,0,0,0,898,899,1,0,0,0,899,901,3,52,26,0,900,
  	893,1,0,0,0,901,902,1,0,0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,905,1,
  	0,0,0,904,906,5,170,0,0,905,904,1,0,0,0,905,906,1,0,0,0,906,915,1,0,0,
  	0,907,909,5,3,0,0,908,910,5,170,0,0,909,908,1,0,0,0,909,910,1,0,0,0,910,
  	911,1,0,0,0,911,913,3,94,47,0,912,914,5,170,0,0,913,912,1,0,0,0,913,914,
  	1,0,0,0,914,916,1,0,0,0,915,907,1,0,0,0,915,916,1,0,0,0,916,925,1,0,0,
  	0,917,919,5,3,0,0,918,920,5,170,0,0,919,918,1,0,0,0,919,920,1,0,0,0,920,
  	921,1,0,0,0,921,923,3,346,173,0,922,924,5,170,0,0,923,922,1,0,0,0,923,
  	924,1,0,0,0,924,926,1,0,0,0,925,917,1,0,0,0,925,926,1,0,0,0,926,927,1,
  	0,0,0,927,928,5,4,0,0,928,51,1,0,0,0,929,930,5,87,0,0,930,931,5,170,0,
  	0,931,932,3,344,172,0,932,933,5,170,0,0,933,934,5,136,0,0,934,935,5,170,
  	0,0,935,936,3,344,172,0,936,53,1,0,0,0,937,938,5,68,0,0,938,939,5,170,
  	0,0,939,940,5,122,0,0,940,944,5,170,0,0,941,942,3,44,22,0,942,943,5,170,
  	0,0,943,945,1,0,0,0,944,941,1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,
  	947,3,344,172,0,947,55,1,0,0,0,948,949,5,68,0,0,949,950,5,170,0,0,950,
  	951,5,129,0,0,951,955,5,170,0,0,952,953,3,44,22,0,953,954,5,170,0,0,954,
  	956,1,0,0,0,955,952,1,0,0,0,955,956,1,0,0,0,956,957,1,0,0,0,957,962,3,
  	344,172,0,958,959,5,170,0,0,959,961,3,60,30,0,960,958,1,0,0,0,961,964,
  	1,0,0,0,962,960,1,0,0,0,962,963,1,0,0,0,963,57,1,0,0,0,964,962,1,0,0,
  	0,965,966,5,68,0,0,966,967,5,170,0,0,967,968,5,139,0,0,968,969,5,170,
  	0,0,969,970,3,344,172,0,970,971,5,170,0,0,971,972,5,51,0,0,972,973,5,
  	170,0,0,973,975,3,108,54,0,974,976,5,170,0,0,975,974,1,0,0,0,975,976,
  	1,0,0,0,976,59,1,0,0,0,977,983,3,62,31,0,978,983,3,64,32,0,979,983,3,
  	66,33,0,980,983,3,68,34,0,981,983,3,70,35,0,982,977,1,0,0,0,982,978,1,
  	0,0,0,982,979,1,0,0,0,982,980,1,0,0,0,982,981,1,0,0,0,983,61,1,0,0,0,
  	984,985,5,96,0,0,985,988,5,170,0,0,986,987,5,56,0,0,987,989,5,170,0,0,
  	988,986,1,0,0,0,988,989,1,0,0,0,989,991,1,0,0,0,990,992,5,153,0,0,991,
  	990,1,0,0,0,991,992,1,0,0,0,992,993,1,0,0,0,993,994,3,340,170,0,994,63,
  	1,0,0,0,995,996,5,109,0,0,996,997,5,170,0,0,997,1005,5,107,0,0,998,999,
  	5,107,0,0,999,1001,5,170,0,0,1000,1002,5,153,0,0,1001,1000,1,0,0,0,1001,
  	1002,1,0,0,0,1002,1003,1,0,0,0,1003,1005,3,340,170,0,1004,995,1,0,0,0,
  	1004,998,1,0,0,0,1005,65,1,0,0,0,1006,1007,5,109,0,0,1007,1008,5,170,
  	0,0,1008,1016,5,105,0,0,1009,1010,5,105,0,0,1010,1012,5,170,0,0,1011,
  	1013,5,153,0,0,1012,1011,1,0,0,0,1012,1013,1,0,0,0,1013,1014,1,0,0,0,
  	1014,1016,3,340,170,0,1015,1006,1,0,0,0,1015,1009,1,0,0,0,1016,67,1,0,
  	0,0,1017,1018,5,132,0,0,1018,1021,5,170,0,0,1019,1020,5,145,0,0,1020,
  	1022,5,170,0,0,1021,1019,1,0,0,0,1021,1022,1,0,0,0,1022,1024,1,0,0,0,
  	1023,1025,5,153,0,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,1026,1,0,
  	0,0,1026,1027,3,340,170,0,1027,69,1,0,0,0,1028,1029,5,109,0,0,1029,1031,
  	5,170,0,0,1030,1028,1,0,0,0,1030,1031,1,0,0,0,1031,1032,1,0,0,0,1032,
  	1033,5,69,0,0,1033,71,1,0,0,0,1034,1035,5,94,0,0,1035,1036,5,170,0,0,
  	1036,1037,5,82,0,0,1037,73,1,0,0,0,1038,1039,5,78,0,0,1039,1040,5,170,
  	0,0,1040,1041,7,0,0,0,1041,1045,5,170,0,0,1042,1043,3,72,36,0,1043,1044,
  	5,170,0,0,1044,1046,1,0,0,0,1045,1042,1,0,0,0,1045,1046,1,0,0,0,1046,
  	1047,1,0,0,0,1047,1048,3,344,172,0,1048,75,1,0,0,0,1049,1050,5,49,0,0,
  	1050,1051,5,170,0,0,1051,1052,5,134,0,0,1052,1053,5,170,0,0,1053,1054,
  	3,344,172,0,1054,1055,5,170,0,0,1055,1056,3,78,39,0,1056,77,1,0,0,0,1057,
  	1062,3,80,40,0,1058,1062,3,84,42,0,1059,1062,3,86,43,0,1060,1062,3,88,
  	44,0,1061,1057,1,0,0,0,1061,1058,1,0,0,0,1061,1059,1,0,0,0,1061,1060,
  	1,0,0,0,1062,79,1,0,0,0,1063,1064,5,47,0,0,1064,1065,5,170,0,0,1065,1066,
  	3,338,169,0,1066,1067,5,170,0,0,1067,1070,3,108,54,0,1068,1069,5,170,
  	0,0,1069,1071,3,82,41,0,1070,1068,1,0,0,0,1070,1071,1,0,0,0,1071,81,1,
  	0,0,0,1072,1073,5,72,0,0,1073,1074,5,170,0,0,1074,1075,3,240,120,0,1075,
  	83,1,0,0,0,1076,1077,5,78,0,0,1077,1078,5,170,0,0,1078,1079,3,338,169,
  	0,1079,85,1,0,0,0,1080,1081,5,125,0,0,1081,1082,5,170,0,0,1082,1083,5,
  	136,0,0,1083,1084,5,170,0,0,1084,1085,3,344,172,0,1085,87,1,0,0,0,1086,
  	1087,5,125,0,0,1087,1088,5,170,0,0,1088,1089,3,338,169,0,1089,1090,5,
  	170,0,0,1090,1091,5,136,0,0,1091,1092,5,170,0,0,1092,1093,3,338,169,0,
  	1093,89,1,0,0,0,1094,1105,3,92,46,0,1095,1097,5,170,0,0,1096,1095,1,0,
  	0,0,1096,1097,1,0,0,0,1097,1098,1,0,0,0,1098,1100,5,3,0,0,1099,1101,5,
  	170,0,0,1100,1099,1,0,0,0,1100,1101,1,0,0,0,1101,1102,1,0,0,0,1102,1104,
  	3,92,46,0,1103,1096,1,0,0,0,1104,1107,1,0,0,0,1105,1103,1,0,0,0,1105,
  	1106,1,0,0,0,1106,91,1,0,0,0,1107,1105,1,0,0,0,1108,1109,3,338,169,0,
  	1109,1110,5,170,0,0,1110,1111,3,108,54,0,1111,93,1,0,0,0,1112,1123,3,
  	96,48,0,1113,1115,5,170,0,0,1114,1113,1,0,0,0,1114,1115,1,0,0,0,1115,
  	1116,1,0,0,0,1116,1118,5,3,0,0,1117,1119,5,170,0,0,1118,1117,1,0,0,0,
  	1118,1119,1,0,0,0,1119,1120,1,0,0,0,1120,1122,3,96,48,0,1121,1114,1,0,
  	0,0,1122,1125,1,0,0,0,1123,1121,1,0,0,0,1123,1124,1,0,0,0,1124,95,1,0,
  	0,0,1125,1123,1,0,0,0,1126,1129,3,92,46,0,1127,1128,5,170,0,0,1128,1130,
  	3,82,41,0,1129,1127,1,0,0,0,1129,1130,1,0,0,0,1130,97,1,0,0,0,1131,1134,
  	3,92,46,0,1132,1133,5,170,0,0,1133,1135,3,82,41,0,1134,1132,1,0,0,0,1134,
  	1135,1,0,0,0,1135,99,1,0,0,0,1136,1139,3,92,46,0,1137,1138,5,170,0,0,
  	1138,1140,3,82,41,0,1139,1137,1,0,0,0,1139,1140,1,0,0,0,1140,101,1,0,
  	0,0,1141,1142,5,119,0,0,1142,1143,5,170,0,0,1143,1145,5,100,0,0,1144,
  	1146,5,170,0,0,1145,1144,1,0,0,0,1145,1146,1,0,0,0,1146,1147,1,0,0,0,
  	1147,1149,5,2,0,0,1148,1150,5,170,0,0,1149,1148,1,0,0,0,1149,1150,1,0,
  	0,0,1150,1151,1,0,0,0,1151,1153,3,338,169,0,1152,1154,5,170,0,0,1153,
  	1152,1,0,0,0,1153,1154,1,0,0,0,1154,1155,1,0,0,0,1155,1156,5,4,0,0,1156,
  	103,1,0,0,0,1157,1160,3,92,46,0,1158,1159,5,170,0,0,1159,1161,3,82,41,
  	0,1160,1158,1,0,0,0,1160,1161,1,0,0,0,1161,1163,1,0,0,0,1162,1164,5,170,
  	0,0,1163,1162,1,0,0,0,1163,1164,1,0,0,0,1164,1165,1,0,0,0,1165,1166,5,
  	119,0,0,1166,1167,5,170,0,0,1167,1168,5,100,0,0,1168,105,1,0,0,0,1169,
  	1170,3,98,49,0,1170,1172,5,3,0,0,1171,1173,5,170,0,0,1172,1171,1,0,0,
  	0,1172,1173,1,0,0,0,1173,1175,1,0,0,0,1174,1169,1,0,0,0,1175,1178,1,0,
  	0,0,1176,1174,1,0,0,0,1176,1177,1,0,0,0,1177,1179,1,0,0,0,1178,1176,1,
  	0,0,0,1179,1190,3,104,52,0,1180,1182,5,170,0,0,1181,1180,1,0,0,0,1181,
  	1182,1,0,0,0,1182,1183,1,0,0,0,1183,1185,5,3,0,0,1184,1186,5,170,0,0,
  	1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1187,1,0,0,0,1187,1189,3,100,
  	50,0,1188,1181,1,0,0,0,1189,1192,1,0,0,0,1190,1188,1,0,0,0,1190,1191,
  	1,0,0,0,1191,107,1,0,0,0,1192,1190,1,0,0,0,1193,1194,6,54,-1,0,1194,1268,
  	3,346,173,0,1195,1197,5,140,0,0,1196,1198,5,170,0,0,1197,1196,1,0,0,0,
  	1197,1198,1,0,0,0,1198,1199,1,0,0,0,1199,1201,5,2,0,0,1200,1202,5,170,
  	0,0,1201,1200,1,0,0,0,1201,1202,1,0,0,0,1202,1203,1,0,0,0,1203,1205,3,
  	90,45,0,1204,1206,5,170,0,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,
  	1207,1,0,0,0,1207,1208,5,4,0,0,1208,1268,1,0,0,0,1209,1211,3,346,173,
  	0,1210,1212,5,170,0,0,1211,1210,1,0,0,0,1211,1212,1,0,0,0,1212,1213,1,
  	0,0,0,1213,1215,5,2,0,0,1214,1216,5,170,0,0,1215,1214,1,0,0,0,1215,1216,
  	1,0,0,0,1216,1217,1,0,0,0,1217,1219,3,90,45,0,1218,1220,5,170,0,0,1219,
  	1218,1,0,0,0,1219,1220,1,0,0,0,1220,1221,1,0,0,0,1221,1222,5,4,0,0,1222,
  	1268,1,0,0,0,1223,1225,3,346,173,0,1224,1226,5,170,0,0,1225,1224,1,0,
  	0,0,1225,1226,1,0,0,0,1226,1227,1,0,0,0,1227,1229,5,2,0,0,1228,1230,5,
  	170,0,0,1229,1228,1,0,0,0,1229,1230,1,0,0,0,1230,1231,1,0,0,0,1231,1233,
  	3,108,54,0,1232,1234,5,170,0,0,1233,1232,1,0,0,0,1233,1234,1,0,0,0,1234,
  	1235,1,0,0,0,1235,1237,5,3,0,0,1236,1238,5,170,0,0,1237,1236,1,0,0,0,
  	1237,1238,1,0,0,0,1238,1239,1,0,0,0,1239,1241,3,108,54,0,1240,1242,5,
  	170,0,0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,1243,1,0,0,0,1243,1244,
  	5,4,0,0,1244,1268,1,0,0,0,1245,1247,5,149,0,0,1246,1248,5,170,0,0,1247,
  	1246,1,0,0,0,1247,1248,1,0,0,0,1248,1249,1,0,0,0,1249,1251,5,2,0,0,1250,
  	1252,5,170,0,0,1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,1253,1,0,0,0,
  	1253,1255,3,340,170,0,1254,1256,5,170,0,0,1255,1254,1,0,0,0,1255,1256,
  	1,0,0,0,1256,1257,1,0,0,0,1257,1259,5,3,0,0,1258,1260,5,170,0,0,1259,
  	1258,1,0,0,0,1259,1260,1,0,0,0,1260,1261,1,0,0,0,1261,1263,3,340,170,
  	0,1262,1264,5,170,0,0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,1264,1265,1,
  	0,0,0,1265,1266,5,4,0,0,1266,1268,1,0,0,0,1267,1193,1,0,0,0,1267,1195,
  	1,0,0,0,1267,1209,1,0,0,0,1267,1223,1,0,0,0,1267,1245,1,0,0,0,1268,1273,
  	1,0,0,0,1269,1270,10,5,0,0,1270,1272,3,110,55,0,1271,1269,1,0,0,0,1272,
  	1275,1,0,0,0,1273,1271,1,0,0,0,1273,1274,1,0,0,0,1274,109,1,0,0,0,1275,
  	1273,1,0,0,0,1276,1280,3,112,56,0,1277,1279,3,112,56,0,1278,1277,1,0,
  	0,0,1279,1282,1,0,0,0,1280,1278,1,0,0,0,1280,1281,1,0,0,0,1281,111,1,
  	0,0,0,1282,1280,1,0,0,0,1283,1285,5,7,0,0,1284,1286,3,340,170,0,1285,
  	1284,1,0,0,0,1285,1286,1,0,0,0,1286,1287,1,0,0,0,1287,1288,5,8,0,0,1288,
  	113,1,0,0,0,1289,1292,3,116,58,0,1290,1292,3,118,59,0,1291,1289,1,0,0,
  	0,1291,1290,1,0,0,0,1292,115,1,0,0,0,1293,1294,5,83,0,0,1294,117,1,0,
  	0,0,1295,1296,5,120,0,0,1296,119,1,0,0,0,1297,1298,5,55,0,0,1298,1299,
  	5,170,0,0,1299,1311,5,137,0,0,1300,1301,5,55,0,0,1301,1302,5,170,0,0,
  	1302,1303,5,137,0,0,1303,1304,5,170,0,0,1304,1305,5,123,0,0,1305,1306,
  	5,170,0,0,1306,1311,5,115,0,0,1307,1311,5,63,0,0,1308,1311,5,127,0,0,
  	1309,1311,5,60,0,0,1310,1297,1,0,0,0,1310,1300,1,0,0,0,1310,1307,1,0,
  	0,0,1310,1308,1,0,0,0,1310,1309,1,0,0,0,1311,121,1,0,0,0,1312,1315,3,
  	124,62,0,1313,1315,3,126,63,0,1314,1312,1,0,0,0,1314,1313,1,0,0,0,1315,
  	123,1,0,0,0,1316,1317,5,102,0,0,1317,1318,5,170,0,0,1318,1319,5,85,0,
  	0,1319,1322,5,170,0,0,1320,1323,5,156,0,0,1321,1323,3,330,165,0,1322,
  	1320,1,0,0,0,1322,1321,1,0,0,0,1323,125,1,0,0,0,1324,1325,5,97,0,0,1325,
  	1326,5,170,0,0,1326,1327,3,330,165,0,1327,127,1,0,0,0,1328,1330,3,130,
  	65,0,1329,1331,5,170,0,0,1330,1329,1,0,0,0,1330,1331,1,0,0,0,1331,1333,
  	1,0,0,0,1332,1328,1,0,0,0,1332,1333,1,0,0,0,1333,1334,1,0,0,0,1334,1335,
  	3,134,67,0,1335,129,1,0,0,0,1336,1337,5,121,0,0,1337,1338,5,170,0,0,1338,
  	1339,5,89,0,0,1339,1340,5,170,0,0,1340,1342,3,344,172,0,1341,1343,5,170,
  	0,0,1342,1341,1,0,0,0,1342,1343,1,0,0,0,1343,1344,1,0,0,0,1344,1346,5,
  	2,0,0,1345,1347,5,170,0,0,1346,1345,1,0,0,0,1346,1347,1,0,0,0,1347,1348,
  	1,0,0,0,1348,1350,3,132,66,0,1349,1351,5,170,0,0,1350,1349,1,0,0,0,1350,
  	1351,1,0,0,0,1351,1352,1,0,0,0,1352,1353,5,4,0,0,1353,131,1,0,0,0,1354,
  	1365,3,154,77,0,1355,1357,5,170,0,0,1356,1355,1,0,0,0,1356,1357,1,0,0,
  	0,1357,1358,1,0,0,0,1358,1360,5,3,0,0,1359,1361,5,170,0,0,1360,1359,1,
  	0,0,0,1360,1361,1,0,0,0,1361,1362,1,0,0,0,1362,1364,3,154,77,0,1363,1356,
  	1,0,0,0,1364,1367,1,0,0,0,1365,1363,1,0,0,0,1365,1366,1,0,0,0,1366,133,
  	1,0,0,0,1367,1365,1,0,0,0,1368,1375,3,138,69,0,1369,1371,5,170,0,0,1370,
  	1369,1,0,0,0,1370,1371,1,0,0,0,1371,1372,1,0,0,0,1372,1374,3,136,68,0,
  	1373,1370,1,0,0,0,1374,1377,1,0,0,0,1375,1373,1,0,0,0,1375,1376,1,0,0,
  	0,1376,1390,1,0,0,0,1377,1375,1,0,0,0,1378,1380,3,182,91,0,1379,1381,
  	5,170,0,0,1380,1379,1,0,0,0,1380,1381,1,0,0,0,1381,1383,1,0,0,0,1382,
  	1378,1,0,0,0,1383,1384,1,0,0,0,1384,1382,1,0,0,0,1384,1385,1,0,0,0,1385,
  	1386,1,0,0,0,1386,1387,3,138,69,0,1387,1388,6,67,-1,0,1388,1390,1,0,0,
  	0,1389,1368,1,0,0,0,1389,1382,1,0,0,0,1390,135,1,0,0,0,1391,1392,5,140,
  	0,0,1392,1393,5,170,0,0,1393,1395,5,48,0,0,1394,1396,5,170,0,0,1395,1394,
  	1,0,0,0,1395,1396,1,0,0,0,1396,1397,1,0,0,0,1397,1404,3,138,69,0,1398,
  	1400,5,140,0,0,1399,1401,5,170,0,0,1400,1399,1,0,0,0,1400,1401,1,0,0,
  	0,1401,1402,1,0,0,0,1402,1404,3,138,69,0,1403,1391,1,0,0,0,1403,1398,
  	1,0,0,0,1404,137,1,0,0,0,1405,1408,3,140,70,0,1406,1408,3,142,71,0,1407,
  	1405,1,0,0,0,1407,1406,1,0,0,0,1408,139,1,0,0,0,1409,1411,3,148,74,0,
  	1410,1412,5,170,0,0,1411,1410,1,0,0,0,1411,1412,1,0,0,0,1412,1414,1,0,
  	0,0,1413,1409,1,0,0,0,1414,1417,1,0,0,0,1415,1413,1,0,0,0,1415,1416,1,
  	0,0,0,1416,1418,1,0,0,0,1417,1415,1,0,0,0,1418,1455,3,182,91,0,1419,1421,
  	3,148,74,0,1420,1422,5,170,0,0,1421,1420,1,0,0,0,1421,1422,1,0,0,0,1422,
  	1424,1,0,0,0,1423,1419,1,0,0,0,1424,1427,1,0,0,0,1425,1423,1,0,0,0,1425,
  	1426,1,0,0,0,1426,1428,1,0,0,0,1427,1425,1,0,0,0,1428,1435,3,146,73,0,
  	1429,1431,5,170,0,0,1430,1429,1,0,0,0,1430,1431,1,0,0,0,1431,1432,1,0,
  	0,0,1432,1434,3,146,73,0,1433,1430,1,0,0,0,1434,1437,1,0,0,0,1435,1433,
  	1,0,0,0,1435,1436,1,0,0,0,1436,1442,1,0,0,0,1437,1435,1,0,0,0,1438,1440,
  	5,170,0,0,1439,1438,1,0,0,0,1439,1440,1,0,0,0,1440,1441,1,0,0,0,1441,
  	1443,3,182,91,0,1442,1439,1,0,0,0,1442,1443,1,0,0,0,1443,1455,1,0,0,0,
  	1444,1446,3,148,74,0,1445,1447,5,170,0,0,1446,1445,1,0,0,0,1446,1447,
  	1,0,0,0,1447,1449,1,0,0,0,1448,1444,1,0,0,0,1449,1450,1,0,0,0,1450,1448,
  	1,0,0,0,1450,1451,1,0,0,0,1451,1452,1,0,0,0,1452,1453,6,70,-1,0,1453,
  	1455,1,0,0,0,1454,1415,1,0,0,0,1454,1425,1,0,0,0,1454,1448,1,0,0,0,1455,
  	141,1,0,0,0,1456,1458,3,144,72,0,1457,1459,5,170,0,0,1458,1457,1,0,0,
  	0,1458,1459,1,0,0,0,1459,1461,1,0,0,0,1460,1456,1,0,0,0,1461,1462,1,0,
  	0,0,1462,1460,1,0,0,0,1462,1463,1,0,0,0,1463,1464,1,0,0,0,1464,1465,3,
  	140,70,0,1465,143,1,0,0,0,1466,1468,3,148,74,0,1467,1469,5,170,0,0,1468,
  	1467,1,0,0,0,1468,1469,1,0,0,0,1469,1471,1,0,0,0,1470,1466,1,0,0,0,1471,
  	1474,1,0,0,0,1472,1470,1,0,0,0,1472,1473,1,0,0,0,1473,1481,1,0,0,0,1474,
  	1472,1,0,0,0,1475,1477,3,146,73,0,1476,1478,5,170,0,0,1477,1476,1,0,0,
  	0,1477,1478,1,0,0,0,1478,1480,1,0,0,0,1479,1475,1,0,0,0,1480,1483,1,0,
  	0,0,1481,1479,1,0,0,0,1481,1482,1,0,0,0,1482,1484,1,0,0,0,1483,1481,1,
  	0,0,0,1484,1485,3,180,90,0,1485,145,1,0,0,0,1486,1491,3,168,84,0,1487,
  	1491,3,170,85,0,1488,1491,3,174,87,0,1489,1491,3,178,89,0,1490,1486,1,
  	0,0,0,1490,1487,1,0,0,0,1490,1488,1,0,0,0,1490,1489,1,0,0,0,1491,147,
  	1,0,0,0,1492,1497,3,160,80,0,1493,1497,3,166,83,0,1494,1497,3,152,76,
  	0,1495,1497,3,150,75,0,1496,1492,1,0,0,0,1496,1493,1,0,0,0,1496,1494,
  	1,0,0,0,1496,1495,1,0,0,0,1497,149,1,0,0,0,1498,1516,5,102,0,0,1499,1500,
  	5,170,0,0,1500,1501,5,145,0,0,1501,1502,5,170,0,0,1502,1504,5,91,0,0,
  	1503,1505,5,170,0,0,1504,1503,1,0,0,0,1504,1505,1,0,0,0,1505,1506,1,0,
  	0,0,1506,1508,5,2,0,0,1507,1509,5,170,0,0,1508,1507,1,0,0,0,1508,1509,
  	1,0,0,0,1509,1510,1,0,0,0,1510,1512,3,90,45,0,1511,1513,5,170,0,0,1512,
  	1511,1,0,0,0,1512,1513,1,0,0,0,1513,1514,1,0,0,0,1514,1515,5,4,0,0,1515,
  	1517,1,0,0,0,1516,1499,1,0,0,0,1516,1517,1,0,0,0,1517,1518,1,0,0,0,1518,
  	1519,5,170,0,0,1519,1520,5,87,0,0,1520,1521,5,170,0,0,1521,1526,3,10,
  	5,0,1522,1524,5,170,0,0,1523,1522,1,0,0,0,1523,1524,1,0,0,0,1524,1525,
  	1,0,0,0,1525,1527,3,42,21,0,1526,1523,1,0,0,0,1526,1527,1,0,0,0,1527,
  	1532,1,0,0,0,1528,1530,5,170,0,0,1529,1528,1,0,0,0,1529,1530,1,0,0,0,
  	1530,1531,1,0,0,0,1531,1533,3,198,99,0,1532,1529,1,0,0,0,1532,1533,1,
  	0,0,0,1533,151,1,0,0,0,1534,1536,3,130,65,0,1535,1537,5,170,0,0,1536,
  	1535,1,0,0,0,1536,1537,1,0,0,0,1537,1539,1,0,0,0,1538,1534,1,0,0,0,1538,
  	1539,1,0,0,0,1539,1540,1,0,0,0,1540,1541,5,57,0,0,1541,1542,5,170,0,0,
  	1542,1547,3,308,154,0,1543,1545,5,170,0,0,1544,1543,1,0,0,0,1544,1545,
  	1,0,0,0,1545,1546,1,0,0,0,1546,1548,3,198,99,0,1547,1544,1,0,0,0,1547,
  	1548,1,0,0,0,1548,153,1,0,0,0,1549,1563,3,344,172,0,1550,1552,5,170,0,
  	0,1551,1550,1,0,0,0,1551,1552,1,0,0,0,1552,1553,1,0,0,0,1553,1555,5,9,
  	0,0,1554,1556,5,170,0,0,1555,1554,1,0,0,0,1555,1556,1,0,0,0,1556,1557,
  	1,0,0,0,1557,1559,3,156,78,0,1558,1560,5,170,0,0,1559,1558,1,0,0,0,1559,
  	1560,1,0,0,0,1560,1561,1,0,0,0,1561,1562,5,10,0,0,1562,1564,1,0,0,0,1563,
  	1551,1,0,0,0,1563,1564,1,0,0,0,1564,155,1,0,0,0,1565,1576,3,158,79,0,
  	1566,1568,5,170,0,0,1567,1566,1,0,0,0,1567,1568,1,0,0,0,1568,1569,1,0,
  	0,0,1569,1571,5,3,0,0,1570,1572,5,170,0,0,1571,1570,1,0,0,0,1571,1572,
  	1,0,0,0,1572,1573,1,0,0,0,1573,1575,3,158,79,0,1574,1567,1,0,0,0,1575,
  	1578,1,0,0,0,1576,1574,1,0,0,0,1576,1577,1,0,0,0,1577,157,1,0,0,0,1578,
  	1576,1,0,0,0,1579,1582,3,338,169,0,1580,1581,5,170,0,0,1581,1583,3,82,
  	41,0,1582,1580,1,0,0,0,1582,1583,1,0,0,0,1583,1586,1,0,0,0,1584,1585,
  	5,170,0,0,1585,1587,3,198,99,0,1586,1584,1,0,0,0,1586,1587,1,0,0,0,1587,
  	159,1,0,0,0,1588,1589,5,116,0,0,1589,1591,5,170,0,0,1590,1588,1,0,0,0,
  	1590,1591,1,0,0,0,1591,1592,1,0,0,0,1592,1594,5,104,0,0,1593,1595,5,170,
  	0,0,1594,1593,1,0,0,0,1594,1595,1,0,0,0,1595,1596,1,0,0,0,1596,1599,3,
  	200,100,0,1597,1598,5,170,0,0,1598,1600,3,198,99,0,1599,1597,1,0,0,0,
  	1599,1600,1,0,0,0,1600,1603,1,0,0,0,1601,1602,5,170,0,0,1602,1604,3,162,
  	81,0,1603,1601,1,0,0,0,1603,1604,1,0,0,0,1604,161,1,0,0,0,1605,1606,5,
  	92,0,0,1606,1607,5,170,0,0,1607,1608,3,164,82,0,1608,163,1,0,0,0,1609,
  	1610,6,82,-1,0,1610,1612,5,2,0,0,1611,1613,5,170,0,0,1612,1611,1,0,0,
  	0,1612,1613,1,0,0,0,1613,1614,1,0,0,0,1614,1616,3,164,82,0,1615,1617,
  	5,170,0,0,1616,1615,1,0,0,0,1616,1617,1,0,0,0,1617,1618,1,0,0,0,1618,
  	1619,5,4,0,0,1619,1622,1,0,0,0,1620,1622,3,344,172,0,1621,1609,1,0,0,
  	0,1621,1620,1,0,0,0,1622,1639,1,0,0,0,1623,1624,10,4,0,0,1624,1625,5,
  	170,0,0,1625,1626,5,99,0,0,1626,1627,5,170,0,0,1627,1638,3,164,82,5,1628,
  	1633,10,3,0,0,1629,1630,5,170,0,0,1630,1631,5,108,0,0,1631,1632,5,170,
  	0,0,1632,1634,3,344,172,0,1633,1629,1,0,0,0,1634,1635,1,0,0,0,1635,1633,
  	1,0,0,0,1635,1636,1,0,0,0,1636,1638,1,0,0,0,1637,1623,1,0,0,0,1637,1628,
  	1,0,0,0,1638,1641,1,0,0,0,1639,1637,1,0,0,0,1639,1640,1,0,0,0,1640,165,
  	1,0,0,0,1641,1639,1,0,0,0,1642,1644,5,141,0,0,1643,1645,5,170,0,0,1644,
  	1643,1,0,0,0,1644,1645,1,0,0,0,1645,1646,1,0,0,0,1646,1647,3,240,120,
  	0,1647,1648,5,170,0,0,1648,1649,5,51,0,0,1649,1650,5,170,0,0,1650,1651,
  	3,330,165,0,1651,167,1,0,0,0,1652,1654,5,68,0,0,1653,1655,5,170,0,0,1654,
  	1653,1,0,0,0,1654,1655,1,0,0,0,1655,1656,1,0,0,0,1656,1657,3,200,100,
  	0,1657,169,1,0,0,0,1658,1660,5,106,0,0,1659,1661,5,170,0,0,1660,1659,
  	1,0,0,0,1660,1661,1,0,0,0,1661,1662,1,0,0,0,1662,1667,3,200,100,0,1663,
  	1664,5,170,0,0,1664,1666,3,172,86,0,1665,1663,1,0,0,0,1666,1669,1,0,0,
  	0,1667,1665,1,0,0,0,1667,1668,1,0,0,0,1668,171,1,0,0,0,1669,1667,1,0,
  	0,0,1670,1671,5,114,0,0,1671,1672,5,170,0,0,1672,1673,5,104,0,0,1673,
  	1674,5,170,0,0,1674,1681,3,174,87,0,1675,1676,5,114,0,0,1676,1677,5,170,
  	0,0,1677,1678,5,68,0,0,1678,1679,5,170,0,0,1679,1681,3,174,87,0,1680,
  	1670,1,0,0,0,1680,1675,1,0,0,0,1681,173,1,0,0,0,1682,1684,5,130,0,0,1683,
  	1685,5,170,0,0,1684,1683,1,0,0,0,1684,1685,1,0,0,0,1685,1686,1,0,0,0,
  	1686,1697,3,176,88,0,1687,1689,5,170,0,0,1688,1687,1,0,0,0,1688,1689,
  	1,0,0,0,1689,1690,1,0,0,0,1690,1692,5,3,0,0,1691,1693,5,170,0,0,1692,
  	1691,1,0,0,0,1692,1693,1,0,0,0,1693,1694,1,0,0,0,1694,1696,3,176,88,0,
  	1695,1688,1,0,0,0,1696,1699,1,0,0,0,1697,1695,1,0,0,0,1697,1698,1,0,0,
  	0,1698,175,1,0,0,0,1699,1697,1,0,0,0,1700,1702,3,336,168,0,1701,1703,
  	5,170,0,0,1702,1701,1,0,0,0,1702,1703,1,0,0,0,1703,1704,1,0,0,0,1704,
  	1706,5,6,0,0,1705,1707,5,170,0,0,1706,1705,1,0,0,0,1706,1707,1,0,0,0,
  	1707,1708,1,0,0,0,1708,1709,3,240,120,0,1709,177,1,0,0,0,1710,1711,5,
  	76,0,0,1711,1713,5,170,0,0,1712,1710,1,0,0,0,1712,1713,1,0,0,0,1713,1714,
  	1,0,0,0,1714,1716,5,73,0,0,1715,1717,5,170,0,0,1716,1715,1,0,0,0,1716,
  	1717,1,0,0,0,1717,1718,1,0,0,0,1718,1729,3,240,120,0,1719,1721,5,170,
  	0,0,1720,1719,1,0,0,0,1720,1721,1,0,0,0,1721,1722,1,0,0,0,1722,1724,5,
  	3,0,0,1723,1725,5,170,0,0,1724,1723,1,0,0,0,1724,1725,1,0,0,0,1725,1726,
  	1,0,0,0,1726,1728,3,240,120,0,1727,1720,1,0,0,0,1728,1731,1,0,0,0,1729,
  	1727,1,0,0,0,1729,1730,1,0,0,0,1730,179,1,0,0,0,1731,1729,1,0,0,0,1732,
  	1733,5,145,0,0,1733,1738,3,184,92,0,1734,1736,5,170,0,0,1735,1734,1,0,
  	0,0,1735,1736,1,0,0,0,1736,1737,1,0,0,0,1737,1739,3,198,99,0,1738,1735,
  	1,0,0,0,1738,1739,1,0,0,0,1739,181,1,0,0,0,1740,1741,5,126,0,0,1741,1742,
  	3,184,92,0,1742,183,1,0,0,0,1743,1745,5,170,0,0,1744,1743,1,0,0,0,1744,
  	1745,1,0,0,0,1745,1746,1,0,0,0,1746,1748,5,77,0,0,1747,1744,1,0,0,0,1747,
  	1748,1,0,0,0,1748,1749,1,0,0,0,1749,1750,5,170,0,0,1750,1753,3,186,93,
  	0,1751,1752,5,170,0,0,1752,1754,3,190,95,0,1753,1751,1,0,0,0,1753,1754,
  	1,0,0,0,1754,1757,1,0,0,0,1755,1756,5,170,0,0,1756,1758,3,192,96,0,1757,
  	1755,1,0,0,0,1757,1758,1,0,0,0,1758,1761,1,0,0,0,1759,1760,5,170,0,0,
  	1760,1762,3,194,97,0,1761,1759,1,0,0,0,1761,1762,1,0,0,0,1762,185,1,0,
  	0,0,1763,1774,5,150,0,0,1764,1766,5,170,0,0,1765,1764,1,0,0,0,1765,1766,
  	1,0,0,0,1766,1767,1,0,0,0,1767,1769,5,3,0,0,1768,1770,5,170,0,0,1769,
  	1768,1,0,0,0,1769,1770,1,0,0,0,1770,1771,1,0,0,0,1771,1773,3,188,94,0,
  	1772,1765,1,0,0,0,1773,1776,1,0,0,0,1774,1772,1,0,0,0,1774,1775,1,0,0,
  	0,1775,1792,1,0,0,0,1776,1774,1,0,0,0,1777,1788,3,188,94,0,1778,1780,
  	5,170,0,0,1779,1778,1,0,0,0,1779,1780,1,0,0,0,1780,1781,1,0,0,0,1781,
  	1783,5,3,0,0,1782,1784,5,170,0,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,
  	1784,1785,1,0,0,0,1785,1787,3,188,94,0,1786,1779,1,0,0,0,1787,1790,1,
  	0,0,0,1788,1786,1,0,0,0,1788,1789,1,0,0,0,1789,1792,1,0,0,0,1790,1788,
  	1,0,0,0,1791,1763,1,0,0,0,1791,1777,1,0,0,0,1792,187,1,0,0,0,1793,1794,
  	3,240,120,0,1794,1795,5,170,0,0,1795,1796,5,51,0,0,1796,1797,5,170,0,
  	0,1797,1798,3,330,165,0,1798,1801,1,0,0,0,1799,1801,3,240,120,0,1800,
  	1793,1,0,0,0,1800,1799,1,0,0,0,1801,189,1,0,0,0,1802,1803,5,118,0,0,1803,
  	1804,5,170,0,0,1804,1805,5,56,0,0,1805,1806,5,170,0,0,1806,1814,3,196,
  	98,0,1807,1809,5,3,0,0,1808,1810,5,170,0,0,1809,1808,1,0,0,0,1809,1810,
  	1,0,0,0,1810,1811,1,0,0,0,1811,1813,3,196,98,0,1812,1807,1,0,0,0,1813,
  	1816,1,0,0,0,1814,1812,1,0,0,0,1814,1815,1,0,0,0,1815,191,1,0,0,0,1816,
  	1814,1,0,0,0,1817,1818,5,151,0,0,1818,1819,5,170,0,0,1819,1820,3,240,
  	120,0,1820,193,1,0,0,0,1821,1822,5,101,0,0,1822,1823,5,170,0,0,1823,1824,
  	3,240,120,0,1824,195,1,0,0,0,1825,1830,3,240,120,0,1826,1828,5,170,0,
  	0,1827,1826,1,0,0,0,1827,1828,1,0,0,0,1828,1829,1,0,0,0,1829,1831,7,1,
  	0,0,1830,1827,1,0,0,0,1830,1831,1,0,0,0,1831,197,1,0,0,0,1832,1833,5,
  	144,0,0,1833,1834,5,170,0,0,1834,1835,3,240,120,0,1835,199,1,0,0,0,1836,
  	1847,3,202,101,0,1837,1839,5,170,0,0,1838,1837,1,0,0,0,1838,1839,1,0,
  	0,0,1839,1840,1,0,0,0,1840,1842,5,3,0,0,1841,1843,5,170,0,0,1842,1841,
  	1,0,0,0,1842,1843,1,0,0,0,1843,1844,1,0,0,0,1844,1846,3,202,101,0,1845,
  	1838,1,0,0,0,1846,1849,1,0,0,0,1847,1845,1,0,0,0,1847,1848,1,0,0,0,1848,
  	201,1,0,0,0,1849,1847,1,0,0,0,1850,1852,3,330,165,0,1851,1853,5,170,0,
  	0,1852,1851,1,0,0,0,1852,1853,1,0,0,0,1853,1854,1,0,0,0,1854,1856,5,6,
  	0,0,1855,1857,5,170,0,0,1856,1855,1,0,0,0,1856,1857,1,0,0,0,1857,1858,
  	1,0,0,0,1858,1859,3,204,102,0,1859,1862,1,0,0,0,1860,1862,3,204,102,0,
  	1861,1850,1,0,0,0,1861,1860,1,0,0,0,1862,203,1,0,0,0,1863,1864,3,206,
  	103,0,1864,205,1,0,0,0,1865,1872,3,208,104,0,1866,1868,5,170,0,0,1867,
  	1866,1,0,0,0,1867,1868,1,0,0,0,1868,1869,1,0,0,0,1869,1871,3,210,105,
  	0,1870,1867,1,0,0,0,1871,1874,1,0,0,0,1872,1870,1,0,0,0,1872,1873,1,0,
  	0,0,1873,1880,1,0,0,0,1874,1872,1,0,0,0,1875,1876,5,2,0,0,1876,1877,3,
  	206,103,0,1877,1878,5,4,0,0,1878,1880,1,0,0,0,1879,1865,1,0,0,0,1879,
  	1875,1,0,0,0,1880,207,1,0,0,0,1881,1883,5,2,0,0,1882,1884,5,170,0,0,1883,
  	1882,1,0,0,0,1883,1884,1,0,0,0,1884,1889,1,0,0,0,1885,1887,3,330,165,
  	0,1886,1888,5,170,0,0,1887,1886,1,0,0,0,1887,1888,1,0,0,0,1888,1890,1,
  	0,0,0,1889,1885,1,0,0,0,1889,1890,1,0,0,0,1890,1895,1,0,0,0,1891,1893,
  	3,220,110,0,1892,1894,5,170,0,0,1893,1892,1,0,0,0,1893,1894,1,0,0,0,1894,
  	1896,1,0,0,0,1895,1891,1,0,0,0,1895,1896,1,0,0,0,1896,1901,1,0,0,0,1897,
  	1899,3,216,108,0,1898,1900,5,170,0,0,1899,1898,1,0,0,0,1899,1900,1,0,
  	0,0,1900,1902,1,0,0,0,1901,1897,1,0,0,0,1901,1902,1,0,0,0,1902,1903,1,
  	0,0,0,1903,1904,5,4,0,0,1904,209,1,0,0,0,1905,1907,3,212,106,0,1906,1908,
  	5,170,0,0,1907,1906,1,0,0,0,1907,1908,1,0,0,0,1908,1909,1,0,0,0,1909,
  	1910,3,208,104,0,1910,211,1,0,0,0,1911,1913,3,350,175,0,1912,1914,5,170,
  	0,0,1913,1912,1,0,0,0,1913,1914,1,0,0,0,1914,1915,1,0,0,0,1915,1917,3,
  	354,177,0,1916,1918,5,170,0,0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,1918,
  	1920,1,0,0,0,1919,1921,3,214,107,0,1920,1919,1,0,0,0,1920,1921,1,0,0,
  	0,1921,1923,1,0,0,0,1922,1924,5,170,0,0,1923,1922,1,0,0,0,1923,1924,1,
  	0,0,0,1924,1925,1,0,0,0,1925,1926,3,354,177,0,1926,1956,1,0,0,0,1927,
  	1929,3,354,177,0,1928,1930,5,170,0,0,1929,1928,1,0,0,0,1929,1930,1,0,
  	0,0,1930,1932,1,0,0,0,1931,1933,3,214,107,0,1932,1931,1,0,0,0,1932,1933,
  	1,0,0,0,1933,1935,1,0,0,0,1934,1936,5,170,0,0,1935,1934,1,0,0,0,1935,
  	1936,1,0,0,0,1936,1937,1,0,0,0,1937,1939,3,354,177,0,1938,1940,5,170,
  	0,0,1939,1938,1,0,0,0,1939,1940,1,0,0,0,1940,1941,1,0,0,0,1941,1942,3,
  	352,176,0,1942,1956,1,0,0,0,1943,1945,3,354,177,0,1944,1946,5,170,0,0,
  	1945,1944,1,0,0,0,1945,1946,1,0,0,0,1946,1948,1,0,0,0,1947,1949,3,214,
  	107,0,1948,1947,1,0,0,0,1948,1949,1,0,0,0,1949,1951,1,0,0,0,1950,1952,
  	5,170,0,0,1951,1950,1,0,0,0,1951,1952,1,0,0,0,1952,1953,1,0,0,0,1953,
  	1954,3,354,177,0,1954,1956,1,0,0,0,1955,1911,1,0,0,0,1955,1927,1,0,0,
  	0,1955,1943,1,0,0,0,1956,213,1,0,0,0,1957,1959,5,7,0,0,1958,1960,5,170,
  	0,0,1959,1958,1,0,0,0,1959,1960,1,0,0,0,1960,1965,1,0,0,0,1961,1963,3,
  	330,165,0,1962,1964,5,170,0,0,1963,1962,1,0,0,0,1963,1964,1,0,0,0,1964,
  	1966,1,0,0,0,1965,1961,1,0,0,0,1965,1966,1,0,0,0,1966,1971,1,0,0,0,1967,
  	1969,3,218,109,0,1968,1970,5,170,0,0,1969,1968,1,0,0,0,1969,1970,1,0,
  	0,0,1970,1972,1,0,0,0,1971,1967,1,0,0,0,1971,1972,1,0,0,0,1972,1977,1,
  	0,0,0,1973,1975,3,224,112,0,1974,1976,5,170,0,0,1975,1974,1,0,0,0,1975,
  	1976,1,0,0,0,1976,1978,1,0,0,0,1977,1973,1,0,0,0,1977,1978,1,0,0,0,1978,
  	1983,1,0,0,0,1979,1981,3,216,108,0,1980,1982,5,170,0,0,1981,1980,1,0,
  	0,0,1981,1982,1,0,0,0,1982,1984,1,0,0,0,1983,1979,1,0,0,0,1983,1984,1,
  	0,0,0,1984,1985,1,0,0,0,1985,1986,5,8,0,0,1986,215,1,0,0,0,1987,1989,
  	5,9,0,0,1988,1990,5,170,0,0,1989,1988,1,0,0,0,1989,1990,1,0,0,0,1990,
  	2024,1,0,0,0,1991,1993,3,338,169,0,1992,1994,5,170,0,0,1993,1992,1,0,
  	0,0,1993,1994,1,0,0,0,1994,1995,1,0,0,0,1995,1997,5,155,0,0,1996,1998,
  	5,170,0,0,1997,1996,1,0,0,0,1997,1998,1,0,0,0,1998,1999,1,0,0,0,1999,
  	2001,3,240,120,0,2000,2002,5,170,0,0,2001,2000,1,0,0,0,2001,2002,1,0,
  	0,0,2002,2021,1,0,0,0,2003,2005,5,3,0,0,2004,2006,5,170,0,0,2005,2004,
  	1,0,0,0,2005,2006,1,0,0,0,2006,2007,1,0,0,0,2007,2009,3,338,169,0,2008,
  	2010,5,170,0,0,2009,2008,1,0,0,0,2009,2010,1,0,0,0,2010,2011,1,0,0,0,
  	2011,2013,5,155,0,0,2012,2014,5,170,0,0,2013,2012,1,0,0,0,2013,2014,1,
  	0,0,0,2014,2015,1,0,0,0,2015,2017,3,240,120,0,2016,2018,5,170,0,0,2017,
  	2016,1,0,0,0,2017,2018,1,0,0,0,2018,2020,1,0,0,0,2019,2003,1,0,0,0,2020,
  	2023,1,0,0,0,2021,2019,1,0,0,0,2021,2022,1,0,0,0,2022,2025,1,0,0,0,2023,
  	2021,1,0,0,0,2024,1991,1,0,0,0,2024,2025,1,0,0,0,2025,2026,1,0,0,0,2026,
  	2027,5,10,0,0,2027,217,1,0,0,0,2028,2030,5,155,0,0,2029,2031,5,170,0,
  	0,2030,2029,1,0,0,0,2030,2031,1,0,0,0,2031,2032,1,0,0,0,2032,2046,3,238,
  	119,0,2033,2035,5,170,0,0,2034,2033,1,0,0,0,2034,2035,1,0,0,0,2035,2036,
  	1,0,0,0,2036,2038,5,11,0,0,2037,2039,5,155,0,0,2038,2037,1,0,0,0,2038,
  	2039,1,0,0,0,2039,2041,1,0,0,0,2040,2042,5,170,0,0,2041,2040,1,0,0,0,
  	2041,2042,1,0,0,0,2042,2043,1,0,0,0,2043,2045,3,238,119,0,2044,2034,1,
  	0,0,0,2045,2048,1,0,0,0,2046,2044,1,0,0,0,2046,2047,1,0,0,0,2047,219,
  	1,0,0,0,2048,2046,1,0,0,0,2049,2056,3,222,111,0,2050,2052,5,170,0,0,2051,
  	2050,1,0,0,0,2051,2052,1,0,0,0,2052,2053,1,0,0,0,2053,2055,3,222,111,
  	0,2054,2051,1,0,0,0,2055,2058,1,0,0,0,2056,2054,1,0,0,0,2056,2057,1,0,
  	0,0,2057,221,1,0,0,0,2058,2056,1,0,0,0,2059,2061,5,155,0,0,2060,2062,
  	5,170,0,0,2061,2060,1,0,0,0,2061,2062,1,0,0,0,2062,2063,1,0,0,0,2063,
  	2064,3,236,118,0,2064,223,1,0,0,0,2065,2067,5,150,0,0,2066,2068,5,170,
  	0,0,2067,2066,1,0,0,0,2067,2068,1,0,0,0,2068,2073,1,0,0,0,2069,2074,5,
  	131,0,0,2070,2071,5,48,0,0,2071,2072,5,170,0,0,2072,2074,5,131,0,0,2073,
  	2069,1,0,0,0,2073,2070,1,0,0,0,2073,2074,1,0,0,0,2074,2076,1,0,0,0,2075,
  	2077,5,170,0,0,2076,2075,1,0,0,0,2076,2077,1,0,0,0,2077,2092,1,0,0,0,
  	2078,2080,3,232,116,0,2079,2078,1,0,0,0,2079,2080,1,0,0,0,2080,2082,1,
  	0,0,0,2081,2083,5,170,0,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2084,
  	1,0,0,0,2084,2086,5,12,0,0,2085,2087,5,170,0,0,2086,2085,1,0,0,0,2086,
  	2087,1,0,0,0,2087,2089,1,0,0,0,2088,2090,3,234,117,0,2089,2088,1,0,0,
  	0,2089,2090,1,0,0,0,2090,2093,1,0,0,0,2091,2093,3,340,170,0,2092,2079,
  	1,0,0,0,2092,2091,1,0,0,0,2092,2093,1,0,0,0,2093,2098,1,0,0,0,2094,2096,
  	5,170,0,0,2095,2094,1,0,0,0,2095,2096,1,0,0,0,2096,2097,1,0,0,0,2097,
  	2099,3,226,113,0,2098,2095,1,0,0,0,2098,2099,1,0,0,0,2099,225,1,0,0,0,
  	2100,2102,5,2,0,0,2101,2103,5,170,0,0,2102,2101,1,0,0,0,2102,2103,1,0,
  	0,0,2103,2104,1,0,0,0,2104,2106,3,330,165,0,2105,2107,5,170,0,0,2106,
  	2105,1,0,0,0,2106,2107,1,0,0,0,2107,2108,1,0,0,0,2108,2110,5,3,0,0,2109,
  	2111,5,170,0,0,2110,2109,1,0,0,0,2110,2111,1,0,0,0,2111,2112,1,0,0,0,
  	2112,2124,3,330,165,0,2113,2115,5,170,0,0,2114,2113,1,0,0,0,2114,2115,
  	1,0,0,0,2115,2116,1,0,0,0,2116,2118,5,11,0,0,2117,2119,5,170,0,0,2118,
  	2117,1,0,0,0,2118,2119,1,0,0,0,2119,2120,1,0,0,0,2120,2122,3,198,99,0,
  	2121,2123,5,170,0,0,2122,2121,1,0,0,0,2122,2123,1,0,0,0,2123,2125,1,0,
  	0,0,2124,2114,1,0,0,0,2124,2125,1,0,0,0,2125,2145,1,0,0,0,2126,2128,5,
  	170,0,0,2127,2126,1,0,0,0,2127,2128,1,0,0,0,2128,2129,1,0,0,0,2129,2131,
  	5,11,0,0,2130,2132,5,170,0,0,2131,2130,1,0,0,0,2131,2132,1,0,0,0,2132,
  	2133,1,0,0,0,2133,2135,3,230,115,0,2134,2136,5,170,0,0,2135,2134,1,0,
  	0,0,2135,2136,1,0,0,0,2136,2137,1,0,0,0,2137,2139,5,3,0,0,2138,2140,5,
  	170,0,0,2139,2138,1,0,0,0,2139,2140,1,0,0,0,2140,2141,1,0,0,0,2141,2143,
  	3,228,114,0,2142,2144,5,170,0,0,2143,2142,1,0,0,0,2143,2144,1,0,0,0,2144,
  	2146,1,0,0,0,2145,2127,1,0,0,0,2145,2146,1,0,0,0,2146,2147,1,0,0,0,2147,
  	2148,5,4,0,0,2148,227,1,0,0,0,2149,2151,5,9,0,0,2150,2152,5,170,0,0,2151,
  	2150,1,0,0,0,2151,2152,1,0,0,0,2152,2154,1,0,0,0,2153,2155,3,186,93,0,
  	2154,2153,1,0,0,0,2154,2155,1,0,0,0,2155,2157,1,0,0,0,2156,2158,5,170,
  	0,0,2157,2156,1,0,0,0,2157,2158,1,0,0,0,2158,2159,1,0,0,0,2159,2160,5,
  	10,0,0,2160,229,1,0,0,0,2161,2163,5,9,0,0,2162,2164,5,170,0,0,2163,2162,
  	1,0,0,0,2163,2164,1,0,0,0,2164,2166,1,0,0,0,2165,2167,3,186,93,0,2166,
  	2165,1,0,0,0,2166,2167,1,0,0,0,2167,2169,1,0,0,0,2168,2170,5,170,0,0,
  	2169,2168,1,0,0,0,2169,2170,1,0,0,0,2170,2171,1,0,0,0,2171,2172,5,10,
  	0,0,2172,231,1,0,0,0,2173,2174,5,158,0,0,2174,233,1,0,0,0,2175,2176,5,
  	158,0,0,2176,235,1,0,0,0,2177,2178,3,344,172,0,2178,237,1,0,0,0,2179,
  	2180,3,344,172,0,2180,239,1,0,0,0,2181,2182,3,242,121,0,2182,241,1,0,
  	0,0,2183,2190,3,244,122,0,2184,2185,5,170,0,0,2185,2186,5,117,0,0,2186,
  	2187,5,170,0,0,2187,2189,3,244,122,0,2188,2184,1,0,0,0,2189,2192,1,0,
  	0,0,2190,2188,1,0,0,0,2190,2191,1,0,0,0,2191,243,1,0,0,0,2192,2190,1,
  	0,0,0,2193,2200,3,246,123,0,2194,2195,5,170,0,0,2195,2196,5,147,0,0,2196,
  	2197,5,170,0,0,2197,2199,3,246,123,0,2198,2194,1,0,0,0,2199,2202,1,0,
  	0,0,2200,2198,1,0,0,0,2200,2201,1,0,0,0,2201,245,1,0,0,0,2202,2200,1,
  	0,0,0,2203,2210,3,248,124,0,2204,2205,5,170,0,0,2205,2206,5,50,0,0,2206,
  	2207,5,170,0,0,2207,2209,3,248,124,0,2208,2204,1,0,0,0,2209,2212,1,0,
  	0,0,2210,2208,1,0,0,0,2210,2211,1,0,0,0,2211,247,1,0,0,0,2212,2210,1,
  	0,0,0,2213,2215,5,111,0,0,2214,2216,5,170,0,0,2215,2214,1,0,0,0,2215,
  	2216,1,0,0,0,2216,2218,1,0,0,0,2217,2213,1,0,0,0,2218,2221,1,0,0,0,2219,
  	2217,1,0,0,0,2219,2220,1,0,0,0,2220,2222,1,0,0,0,2221,2219,1,0,0,0,2222,
  	2223,3,250,125,0,2223,249,1,0,0,0,2224,2234,3,254,127,0,2225,2227,5,170,
  	0,0,2226,2225,1,0,0,0,2226,2227,1,0,0,0,2227,2228,1,0,0,0,2228,2230,3,
  	252,126,0,2229,2231,5,170,0,0,2230,2229,1,0,0,0,2230,2231,1,0,0,0,2231,
  	2232,1,0,0,0,2232,2233,3,254,127,0,2233,2235,1,0,0,0,2234,2226,1,0,0,
  	0,2234,2235,1,0,0,0,2235,2273,1,0,0,0,2236,2238,3,254,127,0,2237,2239,
  	5,170,0,0,2238,2237,1,0,0,0,2238,2239,1,0,0,0,2239,2240,1,0,0,0,2240,
  	2242,5,152,0,0,2241,2243,5,170,0,0,2242,2241,1,0,0,0,2242,2243,1,0,0,
  	0,2243,2244,1,0,0,0,2244,2245,3,254,127,0,2245,2246,1,0,0,0,2246,2247,
  	6,125,-1,0,2247,2273,1,0,0,0,2248,2250,3,254,127,0,2249,2251,5,170,0,
  	0,2250,2249,1,0,0,0,2250,2251,1,0,0,0,2251,2252,1,0,0,0,2252,2254,3,252,
  	126,0,2253,2255,5,170,0,0,2254,2253,1,0,0,0,2254,2255,1,0,0,0,2255,2256,
  	1,0,0,0,2256,2266,3,254,127,0,2257,2259,5,170,0,0,2258,2257,1,0,0,0,2258,
  	2259,1,0,0,0,2259,2260,1,0,0,0,2260,2262,3,252,126,0,2261,2263,5,170,
  	0,0,2262,2261,1,0,0,0,2262,2263,1,0,0,0,2263,2264,1,0,0,0,2264,2265,3,
  	254,127,0,2265,2267,1,0,0,0,2266,2258,1,0,0,0,2267,2268,1,0,0,0,2268,
  	2266,1,0,0,0,2268,2269,1,0,0,0,2269,2270,1,0,0,0,2270,2271,6,125,-1,0,
  	2271,2273,1,0,0,0,2272,2224,1,0,0,0,2272,2236,1,0,0,0,2272,2248,1,0,0,
  	0,2273,251,1,0,0,0,2274,2275,7,2,0,0,2275,253,1,0,0,0,2276,2287,3,256,
  	128,0,2277,2279,5,170,0,0,2278,2277,1,0,0,0,2278,2279,1,0,0,0,2279,2280,
  	1,0,0,0,2280,2282,5,11,0,0,2281,2283,5,170,0,0,2282,2281,1,0,0,0,2282,
  	2283,1,0,0,0,2283,2284,1,0,0,0,2284,2286,3,256,128,0,2285,2278,1,0,0,
  	0,2286,2289,1,0,0,0,2287,2285,1,0,0,0,2287,2288,1,0,0,0,2288,255,1,0,
  	0,0,2289,2287,1,0,0,0,2290,2301,3,258,129,0,2291,2293,5,170,0,0,2292,
  	2291,1,0,0,0,2292,2293,1,0,0,0,2293,2294,1,0,0,0,2294,2296,5,18,0,0,2295,
  	2297,5,170,0,0,2296,2295,1,0,0,0,2296,2297,1,0,0,0,2297,2298,1,0,0,0,
  	2298,2300,3,258,129,0,2299,2292,1,0,0,0,2300,2303,1,0,0,0,2301,2299,1,
  	0,0,0,2301,2302,1,0,0,0,2302,257,1,0,0,0,2303,2301,1,0,0,0,2304,2316,
  	3,262,131,0,2305,2307,5,170,0,0,2306,2305,1,0,0,0,2306,2307,1,0,0,0,2307,
  	2308,1,0,0,0,2308,2310,3,260,130,0,2309,2311,5,170,0,0,2310,2309,1,0,
  	0,0,2310,2311,1,0,0,0,2311,2312,1,0,0,0,2312,2313,3,262,131,0,2313,2315,
  	1,0,0,0,2314,2306,1,0,0,0,2315,2318,1,0,0,0,2316,2314,1,0,0,0,2316,2317,
  	1,0,0,0,2317,259,1,0,0,0,2318,2316,1,0,0,0,2319,2320,7,3,0,0,2320,261,
  	1,0,0,0,2321,2333,3,266,133,0,2322,2324,5,170,0,0,2323,2322,1,0,0,0,2323,
  	2324,1,0,0,0,2324,2325,1,0,0,0,2325,2327,3,264,132,0,2326,2328,5,170,
  	0,0,2327,2326,1,0,0,0,2327,2328,1,0,0,0,2328,2329,1,0,0,0,2329,2330,3,
  	266,133,0,2330,2332,1,0,0,0,2331,2323,1,0,0,0,2332,2335,1,0,0,0,2333,
  	2331,1,0,0,0,2333,2334,1,0,0,0,2334,263,1,0,0,0,2335,2333,1,0,0,0,2336,
  	2337,7,4,0,0,2337,265,1,0,0,0,2338,2350,3,270,135,0,2339,2341,5,170,0,
  	0,2340,2339,1,0,0,0,2340,2341,1,0,0,0,2341,2342,1,0,0,0,2342,2344,3,268,
  	134,0,2343,2345,5,170,0,0,2344,2343,1,0,0,0,2344,2345,1,0,0,0,2345,2346,
  	1,0,0,0,2346,2347,3,270,135,0,2347,2349,1,0,0,0,2348,2340,1,0,0,0,2349,
  	2352,1,0,0,0,2350,2348,1,0,0,0,2350,2351,1,0,0,0,2351,267,1,0,0,0,2352,
  	2350,1,0,0,0,2353,2354,7,5,0,0,2354,269,1,0,0,0,2355,2366,3,272,136,0,
  	2356,2358,5,170,0,0,2357,2356,1,0,0,0,2357,2358,1,0,0,0,2358,2359,1,0,
  	0,0,2359,2361,5,24,0,0,2360,2362,5,170,0,0,2361,2360,1,0,0,0,2361,2362,
  	1,0,0,0,2362,2363,1,0,0,0,2363,2365,3,272,136,0,2364,2357,1,0,0,0,2365,
  	2368,1,0,0,0,2366,2364,1,0,0,0,2366,2367,1,0,0,0,2367,271,1,0,0,0,2368,
  	2366,1,0,0,0,2369,2371,5,153,0,0,2370,2372,5,170,0,0,2371,2370,1,0,0,
  	0,2371,2372,1,0,0,0,2372,2374,1,0,0,0,2373,2369,1,0,0,0,2374,2377,1,0,
  	0,0,2375,2373,1,0,0,0,2375,2376,1,0,0,0,2376,2378,1,0,0,0,2377,2375,1,
  	0,0,0,2378,2383,3,274,137,0,2379,2381,5,170,0,0,2380,2379,1,0,0,0,2380,
  	2381,1,0,0,0,2381,2382,1,0,0,0,2382,2384,5,154,0,0,2383,2380,1,0,0,0,
  	2383,2384,1,0,0,0,2384,273,1,0,0,0,2385,2393,3,284,142,0,2386,2394,3,
  	278,139,0,2387,2389,3,276,138,0,2388,2387,1,0,0,0,2389,2390,1,0,0,0,2390,
  	2388,1,0,0,0,2390,2391,1,0,0,0,2391,2394,1,0,0,0,2392,2394,3,282,141,
  	0,2393,2386,1,0,0,0,2393,2388,1,0,0,0,2393,2392,1,0,0,0,2393,2394,1,0,
  	0,0,2394,275,1,0,0,0,2395,2396,5,170,0,0,2396,2398,5,95,0,0,2397,2399,
  	5,170,0,0,2398,2397,1,0,0,0,2398,2399,1,0,0,0,2399,2400,1,0,0,0,2400,
  	2415,3,284,142,0,2401,2402,5,7,0,0,2402,2403,3,240,120,0,2403,2404,5,
  	8,0,0,2404,2415,1,0,0,0,2405,2407,5,7,0,0,2406,2408,3,240,120,0,2407,
  	2406,1,0,0,0,2407,2408,1,0,0,0,2408,2409,1,0,0,0,2409,2411,5,155,0,0,
  	2410,2412,3,240,120,0,2411,2410,1,0,0,0,2411,2412,1,0,0,0,2412,2413,1,
  	0,0,0,2413,2415,5,8,0,0,2414,2395,1,0,0,0,2414,2401,1,0,0,0,2414,2405,
  	1,0,0,0,2415,277,1,0,0,0,2416,2428,3,280,140,0,2417,2418,5,170,0,0,2418,
  	2419,5,133,0,0,2419,2420,5,170,0,0,2420,2428,5,145,0,0,2421,2422,5,170,
  	0,0,2422,2423,5,81,0,0,2423,2424,5,170,0,0,2424,2428,5,145,0,0,2425,2426,
  	5,170,0,0,2426,2428,5,65,0,0,2427,2416,1,0,0,0,2427,2417,1,0,0,0,2427,
  	2421,1,0,0,0,2427,2425,1,0,0,0,2428,2430,1,0,0,0,2429,2431,5,170,0,0,
  	2430,2429,1,0,0,0,2430,2431,1,0,0,0,2431,2432,1,0,0,0,2432,2433,3,284,
  	142,0,2433,279,1,0,0,0,2434,2436,5,170,0,0,2435,2434,1,0,0,0,2435,2436,
  	1,0,0,0,2436,2437,1,0,0,0,2437,2438,5,25,0,0,2438,281,1,0,0,0,2439,2440,
  	5,170,0,0,2440,2441,5,98,0,0,2441,2442,5,170,0,0,2442,2450,5,113,0,0,
  	2443,2444,5,170,0,0,2444,2445,5,98,0,0,2445,2446,5,170,0,0,2446,2447,
  	5,111,0,0,2447,2448,5,170,0,0,2448,2450,5,113,0,0,2449,2439,1,0,0,0,2449,
  	2443,1,0,0,0,2450,283,1,0,0,0,2451,2458,3,286,143,0,2452,2454,5,170,0,
  	0,2453,2452,1,0,0,0,2453,2454,1,0,0,0,2454,2455,1,0,0,0,2455,2457,3,324,
  	162,0,2456,2453,1,0,0,0,2457,2460,1,0,0,0,2458,2456,1,0,0,0,2458,2459,
  	1,0,0,0,2459,285,1,0,0,0,2460,2458,1,0,0,0,2461,2472,3,294,147,0,2462,
  	2472,3,334,167,0,2463,2472,3,326,163,0,2464,2472,3,306,153,0,2465,2472,
  	3,308,154,0,2466,2472,3,318,159,0,2467,2472,3,320,160,0,2468,2472,3,322,
  	161,0,2469,2472,3,330,165,0,2470,2472,3,288,144,0,2471,2461,1,0,0,0,2471,
  	2462,1,0,0,0,2471,2463,1,0,0,0,2471,2464,1,0,0,0,2471,2465,1,0,0,0,2471,
  	2466,1,0,0,0,2471,2467,1,0,0,0,2471,2468,1,0,0,0,2471,2469,1,0,0,0,2471,
  	2470,1,0,0,0,2472,287,1,0,0,0,2473,2475,5,48,0,0,2474,2476,5,170,0,0,
  	2475,2474,1,0,0,0,2475,2476,1,0,0,0,2476,2477,1,0,0,0,2477,2479,5,2,0,
  	0,2478,2480,5,170,0,0,2479,2478,1,0,0,0,2479,2480,1,0,0,0,2480,2481,1,
  	0,0,0,2481,2483,3,290,145,0,2482,2484,5,170,0,0,2483,2482,1,0,0,0,2483,
  	2484,1,0,0,0,2484,2485,1,0,0,0,2485,2486,5,4,0,0,2486,2530,1,0,0,0,2487,
  	2489,5,46,0,0,2488,2490,5,170,0,0,2489,2488,1,0,0,0,2489,2490,1,0,0,0,
  	2490,2491,1,0,0,0,2491,2493,5,2,0,0,2492,2494,5,170,0,0,2493,2492,1,0,
  	0,0,2493,2494,1,0,0,0,2494,2495,1,0,0,0,2495,2497,3,290,145,0,2496,2498,
  	5,170,0,0,2497,2496,1,0,0,0,2497,2498,1,0,0,0,2498,2499,1,0,0,0,2499,
  	2500,5,4,0,0,2500,2530,1,0,0,0,2501,2503,5,112,0,0,2502,2504,5,170,0,
  	0,2503,2502,1,0,0,0,2503,2504,1,0,0,0,2504,2505,1,0,0,0,2505,2507,5,2,
  	0,0,2506,2508,5,170,0,0,2507,2506,1,0,0,0,2507,2508,1,0,0,0,2508,2509,
  	1,0,0,0,2509,2511,3,290,145,0,2510,2512,5,170,0,0,2511,2510,1,0,0,0,2511,
  	2512,1,0,0,0,2512,2513,1,0,0,0,2513,2514,5,4,0,0,2514,2530,1,0,0,0,2515,
  	2517,5,148,0,0,2516,2518,5,170,0,0,2517,2516,1,0,0,0,2517,2518,1,0,0,
  	0,2518,2519,1,0,0,0,2519,2521,5,2,0,0,2520,2522,5,170,0,0,2521,2520,1,
  	0,0,0,2521,2522,1,0,0,0,2522,2523,1,0,0,0,2523,2525,3,290,145,0,2524,
  	2526,5,170,0,0,2525,2524,1,0,0,0,2525,2526,1,0,0,0,2526,2527,1,0,0,0,
  	2527,2528,5,4,0,0,2528,2530,1,0,0,0,2529,2473,1,0,0,0,2529,2487,1,0,0,
  	0,2529,2501,1,0,0,0,2529,2515,1,0,0,0,2530,289,1,0,0,0,2531,2536,3,292,
  	146,0,2532,2534,5,170,0,0,2533,2532,1,0,0,0,2533,2534,1,0,0,0,2534,2535,
  	1,0,0,0,2535,2537,3,198,99,0,2536,2533,1,0,0,0,2536,2537,1,0,0,0,2537,
  	291,1,0,0,0,2538,2539,3,330,165,0,2539,2540,5,170,0,0,2540,2541,5,95,
  	0,0,2541,2542,5,170,0,0,2542,2543,3,240,120,0,2543,293,1,0,0,0,2544,2551,
  	3,332,166,0,2545,2551,5,156,0,0,2546,2551,3,296,148,0,2547,2551,5,113,
  	0,0,2548,2551,3,298,149,0,2549,2551,3,302,151,0,2550,2544,1,0,0,0,2550,
  	2545,1,0,0,0,2550,2546,1,0,0,0,2550,2547,1,0,0,0,2550,2548,1,0,0,0,2550,
  	2549,1,0,0,0,2551,295,1,0,0,0,2552,2553,7,6,0,0,2553,297,1,0,0,0,2554,
  	2556,5,7,0,0,2555,2557,5,170,0,0,2556,2555,1,0,0,0,2556,2557,1,0,0,0,
  	2557,2571,1,0,0,0,2558,2560,3,240,120,0,2559,2561,5,170,0,0,2560,2559,
  	1,0,0,0,2560,2561,1,0,0,0,2561,2568,1,0,0,0,2562,2564,3,300,150,0,2563,
  	2565,5,170,0,0,2564,2563,1,0,0,0,2564,2565,1,0,0,0,2565,2567,1,0,0,0,
  	2566,2562,1,0,0,0,2567,2570,1,0,0,0,2568,2566,1,0,0,0,2568,2569,1,0,0,
  	0,2569,2572,1,0,0,0,2570,2568,1,0,0,0,2571,2558,1,0,0,0,2571,2572,1,0,
  	0,0,2572,2573,1,0,0,0,2573,2574,5,8,0,0,2574,299,1,0,0,0,2575,2577,5,
  	3,0,0,2576,2578,5,170,0,0,2577,2576,1,0,0,0,2577,2578,1,0,0,0,2578,2580,
  	1,0,0,0,2579,2581,3,240,120,0,2580,2579,1,0,0,0,2580,2581,1,0,0,0,2581,
  	301,1,0,0,0,2582,2584,5,9,0,0,2583,2585,5,170,0,0,2584,2583,1,0,0,0,2584,
  	2585,1,0,0,0,2585,2586,1,0,0,0,2586,2588,3,304,152,0,2587,2589,5,170,
  	0,0,2588,2587,1,0,0,0,2588,2589,1,0,0,0,2589,2600,1,0,0,0,2590,2592,5,
  	3,0,0,2591,2593,5,170,0,0,2592,2591,1,0,0,0,2592,2593,1,0,0,0,2593,2594,
  	1,0,0,0,2594,2596,3,304,152,0,2595,2597,5,170,0,0,2596,2595,1,0,0,0,2596,
  	2597,1,0,0,0,2597,2599,1,0,0,0,2598,2590,1,0,0,0,2599,2602,1,0,0,0,2600,
  	2598,1,0,0,0,2600,2601,1,0,0,0,2601,2603,1,0,0,0,2602,2600,1,0,0,0,2603,
  	2604,5,10,0,0,2604,303,1,0,0,0,2605,2608,3,346,173,0,2606,2608,5,156,
  	0,0,2607,2605,1,0,0,0,2607,2606,1,0,0,0,2608,2610,1,0,0,0,2609,2611,5,
  	170,0,0,2610,2609,1,0,0,0,2610,2611,1,0,0,0,2611,2612,1,0,0,0,2612,2614,
  	5,155,0,0,2613,2615,5,170,0,0,2614,2613,1,0,0,0,2614,2615,1,0,0,0,2615,
  	2616,1,0,0,0,2616,2617,3,240,120,0,2617,305,1,0,0,0,2618,2620,5,2,0,0,
  	2619,2621,5,170,0,0,2620,2619,1,0,0,0,2620,2621,1,0,0,0,2621,2622,1,0,
  	0,0,2622,2624,3,240,120,0,2623,2625,5,170,0,0,2624,2623,1,0,0,0,2624,
  	2625,1,0,0,0,2625,2626,1,0,0,0,2626,2627,5,4,0,0,2627,307,1,0,0,0,2628,
  	2630,5,67,0,0,2629,2631,5,170,0,0,2630,2629,1,0,0,0,2630,2631,1,0,0,0,
  	2631,2632,1,0,0,0,2632,2634,5,2,0,0,2633,2635,5,170,0,0,2634,2633,1,0,
  	0,0,2634,2635,1,0,0,0,2635,2636,1,0,0,0,2636,2638,5,150,0,0,2637,2639,
  	5,170,0,0,2638,2637,1,0,0,0,2638,2639,1,0,0,0,2639,2640,1,0,0,0,2640,
  	2706,5,4,0,0,2641,2643,5,59,0,0,2642,2644,5,170,0,0,2643,2642,1,0,0,0,
  	2643,2644,1,0,0,0,2644,2645,1,0,0,0,2645,2647,5,2,0,0,2646,2648,5,170,
  	0,0,2647,2646,1,0,0,0,2647,2648,1,0,0,0,2648,2649,1,0,0,0,2649,2651,3,
  	312,156,0,2650,2652,5,170,0,0,2651,2650,1,0,0,0,2651,2652,1,0,0,0,2652,
  	2663,1,0,0,0,2653,2655,5,51,0,0,2654,2656,5,170,0,0,2655,2654,1,0,0,0,
  	2655,2656,1,0,0,0,2656,2657,1,0,0,0,2657,2664,3,108,54,0,2658,2660,5,
  	3,0,0,2659,2661,5,170,0,0,2660,2659,1,0,0,0,2660,2661,1,0,0,0,2661,2662,
  	1,0,0,0,2662,2664,3,312,156,0,2663,2653,1,0,0,0,2663,2658,1,0,0,0,2664,
  	2666,1,0,0,0,2665,2667,5,170,0,0,2666,2665,1,0,0,0,2666,2667,1,0,0,0,
  	2667,2668,1,0,0,0,2668,2669,5,4,0,0,2669,2706,1,0,0,0,2670,2672,3,310,
  	155,0,2671,2673,5,170,0,0,2672,2671,1,0,0,0,2672,2673,1,0,0,0,2673,2674,
  	1,0,0,0,2674,2676,5,2,0,0,2675,2677,5,170,0,0,2676,2675,1,0,0,0,2676,
  	2677,1,0,0,0,2677,2682,1,0,0,0,2678,2680,5,77,0,0,2679,2681,5,170,0,0,
  	2680,2679,1,0,0,0,2680,2681,1,0,0,0,2681,2683,1,0,0,0,2682,2678,1,0,0,
  	0,2682,2683,1,0,0,0,2683,2701,1,0,0,0,2684,2686,3,312,156,0,2685,2687,
  	5,170,0,0,2686,2685,1,0,0,0,2686,2687,1,0,0,0,2687,2698,1,0,0,0,2688,
  	2690,5,3,0,0,2689,2691,5,170,0,0,2690,2689,1,0,0,0,2690,2691,1,0,0,0,
  	2691,2692,1,0,0,0,2692,2694,3,312,156,0,2693,2695,5,170,0,0,2694,2693,
  	1,0,0,0,2694,2695,1,0,0,0,2695,2697,1,0,0,0,2696,2688,1,0,0,0,2697,2700,
  	1,0,0,0,2698,2696,1,0,0,0,2698,2699,1,0,0,0,2699,2702,1,0,0,0,2700,2698,
  	1,0,0,0,2701,2684,1,0,0,0,2701,2702,1,0,0,0,2702,2703,1,0,0,0,2703,2704,
  	5,4,0,0,2704,2706,1,0,0,0,2705,2628,1,0,0,0,2705,2641,1,0,0,0,2705,2670,
  	1,0,0,0,2706,309,1,0,0,0,2707,2708,3,346,173,0,2708,311,1,0,0,0,2709,
  	2711,3,346,173,0,2710,2712,5,170,0,0,2711,2710,1,0,0,0,2711,2712,1,0,
  	0,0,2712,2713,1,0,0,0,2713,2714,5,155,0,0,2714,2716,5,6,0,0,2715,2717,
  	5,170,0,0,2716,2715,1,0,0,0,2716,2717,1,0,0,0,2717,2719,1,0,0,0,2718,
  	2709,1,0,0,0,2718,2719,1,0,0,0,2719,2720,1,0,0,0,2720,2723,3,240,120,
  	0,2721,2723,3,314,157,0,2722,2718,1,0,0,0,2722,2721,1,0,0,0,2723,313,
  	1,0,0,0,2724,2726,3,316,158,0,2725,2727,5,170,0,0,2726,2725,1,0,0,0,2726,
  	2727,1,0,0,0,2727,2728,1,0,0,0,2728,2729,5,153,0,0,2729,2731,5,16,0,0,
  	2730,2732,5,170,0,0,2731,2730,1,0,0,0,2731,2732,1,0,0,0,2732,2733,1,0,
  	0,0,2733,2735,3,240,120,0,2734,2736,5,170,0,0,2735,2734,1,0,0,0,2735,
  	2736,1,0,0,0,2736,315,1,0,0,0,2737,2762,3,346,173,0,2738,2740,5,2,0,0,
  	2739,2741,5,170,0,0,2740,2739,1,0,0,0,2740,2741,1,0,0,0,2741,2742,1,0,
  	0,0,2742,2744,3,346,173,0,2743,2745,5,170,0,0,2744,2743,1,0,0,0,2744,
  	2745,1,0,0,0,2745,2756,1,0,0,0,2746,2748,5,3,0,0,2747,2749,5,170,0,0,
  	2748,2747,1,0,0,0,2748,2749,1,0,0,0,2749,2750,1,0,0,0,2750,2752,3,346,
  	173,0,2751,2753,5,170,0,0,2752,2751,1,0,0,0,2752,2753,1,0,0,0,2753,2755,
  	1,0,0,0,2754,2746,1,0,0,0,2755,2758,1,0,0,0,2756,2754,1,0,0,0,2756,2757,
  	1,0,0,0,2757,2759,1,0,0,0,2758,2756,1,0,0,0,2759,2760,5,4,0,0,2760,2762,
  	1,0,0,0,2761,2737,1,0,0,0,2761,2738,1,0,0,0,2762,317,1,0,0,0,2763,2768,
  	3,208,104,0,2764,2766,5,170,0,0,2765,2764,1,0,0,0,2765,2766,1,0,0,0,2766,
  	2767,1,0,0,0,2767,2769,3,210,105,0,2768,2765,1,0,0,0,2769,2770,1,0,0,
  	0,2770,2768,1,0,0,0,2770,2771,1,0,0,0,2771,319,1,0,0,0,2772,2774,5,82,
  	0,0,2773,2775,5,170,0,0,2774,2773,1,0,0,0,2774,2775,1,0,0,0,2775,2776,
  	1,0,0,0,2776,2778,5,9,0,0,2777,2779,5,170,0,0,2778,2777,1,0,0,0,2778,
  	2779,1,0,0,0,2779,2780,1,0,0,0,2780,2782,5,104,0,0,2781,2783,5,170,0,
  	0,2782,2781,1,0,0,0,2782,2783,1,0,0,0,2783,2784,1,0,0,0,2784,2789,3,200,
  	100,0,2785,2787,5,170,0,0,2786,2785,1,0,0,0,2786,2787,1,0,0,0,2787,2788,
  	1,0,0,0,2788,2790,3,198,99,0,2789,2786,1,0,0,0,2789,2790,1,0,0,0,2790,
  	2792,1,0,0,0,2791,2793,5,170,0,0,2792,2791,1,0,0,0,2792,2793,1,0,0,0,
  	2793,2794,1,0,0,0,2794,2795,5,10,0,0,2795,321,1,0,0,0,2796,2798,5,67,
  	0,0,2797,2799,5,170,0,0,2798,2797,1,0,0,0,2798,2799,1,0,0,0,2799,2800,
  	1,0,0,0,2800,2802,5,9,0,0,2801,2803,5,170,0,0,2802,2801,1,0,0,0,2802,
  	2803,1,0,0,0,2803,2804,1,0,0,0,2804,2806,5,104,0,0,2805,2807,5,170,0,
  	0,2806,2805,1,0,0,0,2806,2807,1,0,0,0,2807,2808,1,0,0,0,2808,2813,3,200,
  	100,0,2809,2811,5,170,0,0,2810,2809,1,0,0,0,2810,2811,1,0,0,0,2811,2812,
  	1,0,0,0,2812,2814,3,198,99,0,2813,2810,1,0,0,0,2813,2814,1,0,0,0,2814,
  	2816,1,0,0,0,2815,2817,5,170,0,0,2816,2815,1,0,0,0,2816,2817,1,0,0,0,
  	2817,2818,1,0,0,0,2818,2819,5,10,0,0,2819,323,1,0,0,0,2820,2822,5,5,0,
  	0,2821,2823,5,170,0,0,2822,2821,1,0,0,0,2822,2823,1,0,0,0,2823,2826,1,
  	0,0,0,2824,2827,3,338,169,0,2825,2827,5,150,0,0,2826,2824,1,0,0,0,2826,
  	2825,1,0,0,0,2827,325,1,0,0,0,2828,2833,5,58,0,0,2829,2831,5,170,0,0,
  	2830,2829,1,0,0,0,2830,2831,1,0,0,0,2831,2832,1,0,0,0,2832,2834,3,328,
  	164,0,2833,2830,1,0,0,0,2834,2835,1,0,0,0,2835,2833,1,0,0,0,2835,2836,
  	1,0,0,0,2836,2851,1,0,0,0,2837,2839,5,58,0,0,2838,2840,5,170,0,0,2839,
  	2838,1,0,0,0,2839,2840,1,0,0,0,2840,2841,1,0,0,0,2841,2846,3,240,120,
  	0,2842,2844,5,170,0,0,2843,2842,1,0,0,0,2843,2844,1,0,0,0,2844,2845,1,
  	0,0,0,2845,2847,3,328,164,0,2846,2843,1,0,0,0,2847,2848,1,0,0,0,2848,
  	2846,1,0,0,0,2848,2849,1,0,0,0,2849,2851,1,0,0,0,2850,2828,1,0,0,0,2850,
  	2837,1,0,0,0,2851,2860,1,0,0,0,2852,2854,5,170,0,0,2853,2852,1,0,0,0,
  	2853,2854,1,0,0,0,2854,2855,1,0,0,0,2855,2857,5,79,0,0,2856,2858,5,170,
  	0,0,2857,2856,1,0,0,0,2857,2858,1,0,0,0,2858,2859,1,0,0,0,2859,2861,3,
  	240,120,0,2860,2853,1,0,0,0,2860,2861,1,0,0,0,2861,2863,1,0,0,0,2862,
  	2864,5,170,0,0,2863,2862,1,0,0,0,2863,2864,1,0,0,0,2864,2865,1,0,0,0,
  	2865,2866,5,80,0,0,2866,327,1,0,0,0,2867,2869,5,143,0,0,2868,2870,5,170,
  	0,0,2869,2868,1,0,0,0,2869,2870,1,0,0,0,2870,2871,1,0,0,0,2871,2873,3,
  	240,120,0,2872,2874,5,170,0,0,2873,2872,1,0,0,0,2873,2874,1,0,0,0,2874,
  	2875,1,0,0,0,2875,2877,5,135,0,0,2876,2878,5,170,0,0,2877,2876,1,0,0,
  	0,2877,2878,1,0,0,0,2878,2879,1,0,0,0,2879,2880,3,240,120,0,2880,329,
  	1,0,0,0,2881,2882,3,346,173,0,2882,331,1,0,0,0,2883,2886,3,342,171,0,
  	2884,2886,3,340,170,0,2885,2883,1,0,0,0,2885,2884,1,0,0,0,2886,333,1,
  	0,0,0,2887,2890,5,26,0,0,2888,2891,3,346,173,0,2889,2891,5,158,0,0,2890,
  	2888,1,0,0,0,2890,2889,1,0,0,0,2891,335,1,0,0,0,2892,2894,3,286,143,0,
  	2893,2895,5,170,0,0,2894,2893,1,0,0,0,2894,2895,1,0,0,0,2895,2896,1,0,
  	0,0,2896,2897,3,324,162,0,2897,337,1,0,0,0,2898,2899,3,344,172,0,2899,
  	339,1,0,0,0,2900,2901,5,158,0,0,2901,341,1,0,0,0,2902,2903,5,165,0,0,
  	2903,343,1,0,0,0,2904,2905,3,346,173,0,2905,345,1,0,0,0,2906,2912,5,166,
  	0,0,2907,2908,5,169,0,0,2908,2912,6,173,-1,0,2909,2912,5,159,0,0,2910,
  	2912,3,348,174,0,2911,2906,1,0,0,0,2911,2907,1,0,0,0,2911,2909,1,0,0,
  	0,2911,2910,1,0,0,0,2912,347,1,0,0,0,2913,2914,7,7,0,0,2914,349,1,0,0,
  	0,2915,2916,7,8,0,0,2916,351,1,0,0,0,2917,2918,7,9,0,0,2918,353,1,0,0,
  	0,2919,2920,7,10,0,0,2920,355,1,0,0,0,504,358,362,367,371,376,379,383,
  	386,410,416,420,423,429,432,436,440,444,449,453,460,464,472,476,486,490,
  	494,499,512,516,524,527,535,538,553,558,564,568,571,574,580,584,589,592,
  	597,601,605,610,625,629,651,655,658,661,664,667,671,676,680,690,694,699,
  	704,709,715,719,723,728,735,739,743,746,750,754,773,777,781,785,789,794,
  	807,811,815,819,823,834,838,842,846,850,854,856,860,864,866,881,885,889,
  	893,897,902,905,909,913,915,919,923,925,944,955,962,975,982,988,991,1001,
  	1004,1012,1015,1021,1024,1030,1045,1061,1070,1096,1100,1105,1114,1118,
  	1123,1129,1134,1139,1145,1149,1153,1160,1163,1172,1176,1181,1185,1190,
  	1197,1201,1205,1211,1215,1219,1225,1229,1233,1237,1241,1247,1251,1255,
  	1259,1263,1267,1273,1280,1285,1291,1310,1314,1322,1330,1332,1342,1346,
  	1350,1356,1360,1365,1370,1375,1380,1384,1389,1395,1400,1403,1407,1411,
  	1415,1421,1425,1430,1435,1439,1442,1446,1450,1454,1458,1462,1468,1472,
  	1477,1481,1490,1496,1504,1508,1512,1516,1523,1526,1529,1532,1536,1538,
  	1544,1547,1551,1555,1559,1563,1567,1571,1576,1582,1586,1590,1594,1599,
  	1603,1612,1616,1621,1635,1637,1639,1644,1654,1660,1667,1680,1684,1688,
  	1692,1697,1702,1706,1712,1716,1720,1724,1729,1735,1738,1744,1747,1753,
  	1757,1761,1765,1769,1774,1779,1783,1788,1791,1800,1809,1814,1827,1830,
  	1838,1842,1847,1852,1856,1861,1867,1872,1879,1883,1887,1889,1893,1895,
  	1899,1901,1907,1913,1917,1920,1923,1929,1932,1935,1939,1945,1948,1951,
  	1955,1959,1963,1965,1969,1971,1975,1977,1981,1983,1989,1993,1997,2001,
  	2005,2009,2013,2017,2021,2024,2030,2034,2038,2041,2046,2051,2056,2061,
  	2067,2073,2076,2079,2082,2086,2089,2092,2095,2098,2102,2106,2110,2114,
  	2118,2122,2124,2127,2131,2135,2139,2143,2145,2151,2154,2157,2163,2166,
  	2169,2190,2200,2210,2215,2219,2226,2230,2234,2238,2242,2250,2254,2258,
  	2262,2268,2272,2278,2282,2287,2292,2296,2301,2306,2310,2316,2323,2327,
  	2333,2340,2344,2350,2357,2361,2366,2371,2375,2380,2383,2390,2393,2398,
  	2407,2411,2414,2427,2430,2435,2449,2453,2458,2471,2475,2479,2483,2489,
  	2493,2497,2503,2507,2511,2517,2521,2525,2529,2533,2536,2550,2556,2560,
  	2564,2568,2571,2577,2580,2584,2588,2592,2596,2600,2607,2610,2614,2620,
  	2624,2630,2634,2638,2643,2647,2651,2655,2660,2663,2666,2672,2676,2680,
  	2682,2686,2690,2694,2698,2701,2705,2711,2716,2718,2722,2726,2731,2735,
  	2740,2744,2748,2752,2756,2761,2765,2770,2774,2778,2782,2786,2789,2792,
  	2798,2802,2806,2810,2813,2816,2822,2826,2830,2835,2839,2843,2848,2850,
  	2853,2857,2860,2863,2869,2873,2877,2885,2890,2894,2911
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cypherParserStaticData = staticData.release();
}

}

CypherParser::CypherParser(TokenStream *input) : CypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CypherParser::CypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  CypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *cypherParserStaticData->atn, cypherParserStaticData->decisionToDFA, cypherParserStaticData->sharedContextCache, options);
}

CypherParser::~CypherParser() {
  delete _interpreter;
}

const atn::ATN& CypherParser::getATN() const {
  return *cypherParserStaticData->atn;
}

std::string CypherParser::getGrammarFileName() const {
  return "Cypher.g4";
}

const std::vector<std::string>& CypherParser::getRuleNames() const {
  return cypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& CypherParser::getVocabulary() const {
  return cypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CypherParser::getSerializedATN() const {
  return cypherParserStaticData->serializedATN;
}


//----------------- Ku_StatementsContext ------------------------------------------------------------------

CypherParser::Ku_StatementsContext::Ku_StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_CypherContext *> CypherParser::Ku_StatementsContext::oC_Cypher() {
  return getRuleContexts<CypherParser::OC_CypherContext>();
}

CypherParser::OC_CypherContext* CypherParser::Ku_StatementsContext::oC_Cypher(size_t i) {
  return getRuleContext<CypherParser::OC_CypherContext>(i);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::EOF() {
  return getToken(CypherParser::EOF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::Ku_StatementsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::Ku_StatementsContext::getRuleIndex() const {
  return CypherParser::RuleKu_Statements;
}


CypherParser::Ku_StatementsContext* CypherParser::ku_Statements() {
  Ku_StatementsContext *_localctx = _tracker.createInstance<Ku_StatementsContext>(_ctx, getState());
  enterRule(_localctx, 0, CypherParser::RuleKu_Statements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(356);
    oC_Cypher();
    setState(367);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(358);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(357);
          match(CypherParser::SP);
        }
        setState(360);
        match(CypherParser::T__0);
        setState(362);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
        case 1: {
          setState(361);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(364);
        oC_Cypher(); 
      }
      setState(369);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    }
    setState(371);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(370);
      match(CypherParser::SP);
    }
    setState(373);
    match(CypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CypherContext ------------------------------------------------------------------

CypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StatementContext* CypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<CypherParser::OC_StatementContext>(0);
}

CypherParser::OC_AnyCypherOptionContext* CypherParser::OC_CypherContext::oC_AnyCypherOption() {
  return getRuleContext<CypherParser::OC_AnyCypherOptionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CypherContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CypherContext::getRuleIndex() const {
  return CypherParser::RuleOC_Cypher;
}


CypherParser::OC_CypherContext* CypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 2, CypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(376);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::EXPLAIN

    || _la == CypherParser::PROFILE) {
      setState(375);
      oC_AnyCypherOption();
    }
    setState(379);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(378);
      match(CypherParser::SP);
    }

    setState(381);
    oC_Statement();
    setState(386);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(383);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(382);
        match(CypherParser::SP);
      }
      setState(385);
      match(CypherParser::T__0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

CypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_QueryContext* CypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

CypherParser::KU_CreateNodeTableContext* CypherParser::OC_StatementContext::kU_CreateNodeTable() {
  return getRuleContext<CypherParser::KU_CreateNodeTableContext>(0);
}

CypherParser::KU_CreateRelTableContext* CypherParser::OC_StatementContext::kU_CreateRelTable() {
  return getRuleContext<CypherParser::KU_CreateRelTableContext>(0);
}

CypherParser::KU_CreateRelTableGroupContext* CypherParser::OC_StatementContext::kU_CreateRelTableGroup() {
  return getRuleContext<CypherParser::KU_CreateRelTableGroupContext>(0);
}

CypherParser::KU_CreateRdfGraphContext* CypherParser::OC_StatementContext::kU_CreateRdfGraph() {
  return getRuleContext<CypherParser::KU_CreateRdfGraphContext>(0);
}

CypherParser::KU_CreateSequenceContext* CypherParser::OC_StatementContext::kU_CreateSequence() {
  return getRuleContext<CypherParser::KU_CreateSequenceContext>(0);
}

CypherParser::KU_CreateTypeContext* CypherParser::OC_StatementContext::kU_CreateType() {
  return getRuleContext<CypherParser::KU_CreateTypeContext>(0);
}

CypherParser::KU_DropContext* CypherParser::OC_StatementContext::kU_Drop() {
  return getRuleContext<CypherParser::KU_DropContext>(0);
}

CypherParser::KU_AlterTableContext* CypherParser::OC_StatementContext::kU_AlterTable() {
  return getRuleContext<CypherParser::KU_AlterTableContext>(0);
}

CypherParser::KU_CopyFromContext* CypherParser::OC_StatementContext::kU_CopyFrom() {
  return getRuleContext<CypherParser::KU_CopyFromContext>(0);
}

CypherParser::KU_CopyFromByColumnContext* CypherParser::OC_StatementContext::kU_CopyFromByColumn() {
  return getRuleContext<CypherParser::KU_CopyFromByColumnContext>(0);
}

CypherParser::KU_CopyTOContext* CypherParser::OC_StatementContext::kU_CopyTO() {
  return getRuleContext<CypherParser::KU_CopyTOContext>(0);
}

CypherParser::KU_StandaloneCallContext* CypherParser::OC_StatementContext::kU_StandaloneCall() {
  return getRuleContext<CypherParser::KU_StandaloneCallContext>(0);
}

CypherParser::KU_CreateMacroContext* CypherParser::OC_StatementContext::kU_CreateMacro() {
  return getRuleContext<CypherParser::KU_CreateMacroContext>(0);
}

CypherParser::KU_CommentOnContext* CypherParser::OC_StatementContext::kU_CommentOn() {
  return getRuleContext<CypherParser::KU_CommentOnContext>(0);
}

CypherParser::KU_TransactionContext* CypherParser::OC_StatementContext::kU_Transaction() {
  return getRuleContext<CypherParser::KU_TransactionContext>(0);
}

CypherParser::KU_ExtensionContext* CypherParser::OC_StatementContext::kU_Extension() {
  return getRuleContext<CypherParser::KU_ExtensionContext>(0);
}

CypherParser::KU_ExportDatabaseContext* CypherParser::OC_StatementContext::kU_ExportDatabase() {
  return getRuleContext<CypherParser::KU_ExportDatabaseContext>(0);
}

CypherParser::KU_ImportDatabaseContext* CypherParser::OC_StatementContext::kU_ImportDatabase() {
  return getRuleContext<CypherParser::KU_ImportDatabaseContext>(0);
}

CypherParser::KU_AttachDatabaseContext* CypherParser::OC_StatementContext::kU_AttachDatabase() {
  return getRuleContext<CypherParser::KU_AttachDatabaseContext>(0);
}

CypherParser::KU_DetachDatabaseContext* CypherParser::OC_StatementContext::kU_DetachDatabase() {
  return getRuleContext<CypherParser::KU_DetachDatabaseContext>(0);
}

CypherParser::KU_UseDatabaseContext* CypherParser::OC_StatementContext::kU_UseDatabase() {
  return getRuleContext<CypherParser::KU_UseDatabaseContext>(0);
}


size_t CypherParser::OC_StatementContext::getRuleIndex() const {
  return CypherParser::RuleOC_Statement;
}


CypherParser::OC_StatementContext* CypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, CypherParser::RuleOC_Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(410);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(388);
      oC_Query();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(389);
      kU_CreateNodeTable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(390);
      kU_CreateRelTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(391);
      kU_CreateRelTableGroup();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(392);
      kU_CreateRdfGraph();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(393);
      kU_CreateSequence();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(394);
      kU_CreateType();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(395);
      kU_Drop();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(396);
      kU_AlterTable();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(397);
      kU_CopyFrom();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(398);
      kU_CopyFromByColumn();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(399);
      kU_CopyTO();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(400);
      kU_StandaloneCall();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(401);
      kU_CreateMacro();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(402);
      kU_CommentOn();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(403);
      kU_Transaction();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(404);
      kU_Extension();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(405);
      kU_ExportDatabase();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(406);
      kU_ImportDatabase();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(407);
      kU_AttachDatabase();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(408);
      kU_DetachDatabase();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(409);
      kU_UseDatabase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromContext ------------------------------------------------------------------

CypherParser::KU_CopyFromContext::KU_CopyFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_CopyFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::KU_ColumnNamesContext* CypherParser::KU_CopyFromContext::kU_ColumnNames() {
  return getRuleContext<CypherParser::KU_ColumnNamesContext>(0);
}


size_t CypherParser::KU_CopyFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFrom;
}


CypherParser::KU_CopyFromContext* CypherParser::kU_CopyFrom() {
  KU_CopyFromContext *_localctx = _tracker.createInstance<KU_CopyFromContext>(_ctx, getState());
  enterRule(_localctx, 6, CypherParser::RuleKU_CopyFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(412);
    match(CypherParser::COPY);
    setState(413);
    match(CypherParser::SP);
    setState(414);
    oC_SchemaName();
    setState(423);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(416);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(415);
        match(CypherParser::SP);
      }
      setState(418);
      kU_ColumnNames();
      setState(420);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(419);
        match(CypherParser::SP);
      }
      break;
    }

    case 2: {
      setState(422);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(425);
    match(CypherParser::FROM);
    setState(426);
    match(CypherParser::SP);
    setState(427);
    kU_ScanSource();
    setState(432);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      setState(429);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(428);
        match(CypherParser::SP);
      }
      setState(431);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnNamesContext ------------------------------------------------------------------

CypherParser::KU_ColumnNamesContext::KU_ColumnNamesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_ColumnNamesContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ColumnNamesContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ColumnNamesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ColumnNamesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ColumnNamesContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnNames;
}


CypherParser::KU_ColumnNamesContext* CypherParser::kU_ColumnNames() {
  KU_ColumnNamesContext *_localctx = _tracker.createInstance<KU_ColumnNamesContext>(_ctx, getState());
  enterRule(_localctx, 8, CypherParser::RuleKU_ColumnNames);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(434);
    match(CypherParser::T__1);
    setState(436);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(435);
      match(CypherParser::SP);
    }
    setState(438);
    oC_SchemaName();
    setState(449);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(440);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(439);
          match(CypherParser::SP);
        }
        setState(442);
        match(CypherParser::T__2);
        setState(444);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(443);
          match(CypherParser::SP);
        }
        setState(446);
        oC_SchemaName(); 
      }
      setState(451);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    }
    setState(453);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(452);
      match(CypherParser::SP);
    }
    setState(455);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ScanSourceContext ------------------------------------------------------------------

CypherParser::KU_ScanSourceContext::KU_ScanSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_FilePathsContext* CypherParser::KU_ScanSourceContext::kU_FilePaths() {
  return getRuleContext<CypherParser::KU_FilePathsContext>(0);
}

CypherParser::OC_QueryContext* CypherParser::KU_ScanSourceContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ScanSourceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ScanSourceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::KU_ScanSourceContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ScanSourceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_ScanSourceContext::getRuleIndex() const {
  return CypherParser::RuleKU_ScanSource;
}


CypherParser::KU_ScanSourceContext* CypherParser::kU_ScanSource() {
  KU_ScanSourceContext *_localctx = _tracker.createInstance<KU_ScanSourceContext>(_ctx, getState());
  enterRule(_localctx, 10, CypherParser::RuleKU_ScanSource);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(476);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(457);
      kU_FilePaths();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(458);
      match(CypherParser::T__1);
      setState(460);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(459);
        match(CypherParser::SP);
      }
      setState(462);
      oC_Query();
      setState(464);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(463);
        match(CypherParser::SP);
      }
      setState(466);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(468);
      oC_Variable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(469);
      oC_Variable();
      setState(470);
      match(CypherParser::T__4);
      setState(472);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(471);
        match(CypherParser::SP);
      }
      setState(474);
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromByColumnContext ------------------------------------------------------------------

CypherParser::KU_CopyFromByColumnContext::KU_CopyFromByColumnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromByColumnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COLUMN() {
  return getToken(CypherParser::COLUMN, 0);
}


size_t CypherParser::KU_CopyFromByColumnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFromByColumn;
}


CypherParser::KU_CopyFromByColumnContext* CypherParser::kU_CopyFromByColumn() {
  KU_CopyFromByColumnContext *_localctx = _tracker.createInstance<KU_CopyFromByColumnContext>(_ctx, getState());
  enterRule(_localctx, 12, CypherParser::RuleKU_CopyFromByColumn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(478);
    match(CypherParser::COPY);
    setState(479);
    match(CypherParser::SP);
    setState(480);
    oC_SchemaName();
    setState(481);
    match(CypherParser::SP);
    setState(482);
    match(CypherParser::FROM);
    setState(483);
    match(CypherParser::SP);
    setState(484);
    match(CypherParser::T__1);
    setState(486);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(485);
      match(CypherParser::SP);
    }
    setState(488);
    match(CypherParser::StringLiteral);
    setState(499);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
      setState(490);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(489);
        match(CypherParser::SP);
      }
      setState(492);
      match(CypherParser::T__2);
      setState(494);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(493);
        match(CypherParser::SP);
      }
      setState(496);
      match(CypherParser::StringLiteral);
      setState(501);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(502);
    match(CypherParser::T__3);
    setState(503);
    match(CypherParser::SP);
    setState(504);
    match(CypherParser::BY);
    setState(505);
    match(CypherParser::SP);
    setState(506);
    match(CypherParser::COLUMN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyTOContext ------------------------------------------------------------------

CypherParser::KU_CopyTOContext::KU_CopyTOContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyTOContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_QueryContext* CypherParser::KU_CopyTOContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::TO() {
  return getToken(CypherParser::TO, 0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyTOContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_CopyTOContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyTO;
}


CypherParser::KU_CopyTOContext* CypherParser::kU_CopyTO() {
  KU_CopyTOContext *_localctx = _tracker.createInstance<KU_CopyTOContext>(_ctx, getState());
  enterRule(_localctx, 14, CypherParser::RuleKU_CopyTO);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(508);
    match(CypherParser::COPY);
    setState(509);
    match(CypherParser::SP);
    setState(510);
    match(CypherParser::T__1);
    setState(512);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(511);
      match(CypherParser::SP);
    }
    setState(514);
    oC_Query();
    setState(516);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(515);
      match(CypherParser::SP);
    }
    setState(518);
    match(CypherParser::T__3);
    setState(519);
    match(CypherParser::SP);
    setState(520);
    match(CypherParser::TO);
    setState(521);
    match(CypherParser::SP);
    setState(522);
    match(CypherParser::StringLiteral);
    setState(527);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      setState(524);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(523);
        match(CypherParser::SP);
      }
      setState(526);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ExportDatabaseContext::KU_ExportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ExportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_ExportDatabaseContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_ExportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ExportDatabase;
}


CypherParser::KU_ExportDatabaseContext* CypherParser::kU_ExportDatabase() {
  KU_ExportDatabaseContext *_localctx = _tracker.createInstance<KU_ExportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 16, CypherParser::RuleKU_ExportDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(529);
    match(CypherParser::EXPORT);
    setState(530);
    match(CypherParser::SP);
    setState(531);
    match(CypherParser::DATABASE);
    setState(532);
    match(CypherParser::SP);
    setState(533);
    match(CypherParser::StringLiteral);
    setState(538);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      setState(535);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(534);
        match(CypherParser::SP);
      }
      setState(537);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ImportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ImportDatabaseContext::KU_ImportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ImportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_ImportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ImportDatabase;
}


CypherParser::KU_ImportDatabaseContext* CypherParser::kU_ImportDatabase() {
  KU_ImportDatabaseContext *_localctx = _tracker.createInstance<KU_ImportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 18, CypherParser::RuleKU_ImportDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(540);
    match(CypherParser::IMPORT);
    setState(541);
    match(CypherParser::SP);
    setState(542);
    match(CypherParser::DATABASE);
    setState(543);
    match(CypherParser::SP);
    setState(544);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AttachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_AttachDatabaseContext::KU_AttachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::ATTACH() {
  return getToken(CypherParser::ATTACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AttachDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::DBTYPE() {
  return getToken(CypherParser::DBTYPE, 0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_AttachDatabaseContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AttachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_AttachDatabaseContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}


size_t CypherParser::KU_AttachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_AttachDatabase;
}


CypherParser::KU_AttachDatabaseContext* CypherParser::kU_AttachDatabase() {
  KU_AttachDatabaseContext *_localctx = _tracker.createInstance<KU_AttachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 20, CypherParser::RuleKU_AttachDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(546);
    match(CypherParser::ATTACH);
    setState(547);
    match(CypherParser::SP);
    setState(548);
    match(CypherParser::StringLiteral);
    setState(553);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(549);
      match(CypherParser::SP);
      setState(550);
      match(CypherParser::AS);
      setState(551);
      match(CypherParser::SP);
      setState(552);
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
    setState(555);
    match(CypherParser::SP);
    setState(556);
    match(CypherParser::T__1);
    setState(558);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(557);
      match(CypherParser::SP);
    }
    setState(560);
    match(CypherParser::DBTYPE);
    setState(561);
    match(CypherParser::SP);
    setState(562);
    oC_SymbolicName();
    setState(571);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      setState(564);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(563);
        match(CypherParser::SP);
      }
      setState(566);
      match(CypherParser::T__2);
      setState(568);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(567);
        match(CypherParser::SP);
      }
      setState(570);
      kU_Options();
      break;
    }

    default:
      break;
    }
    setState(574);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(573);
      match(CypherParser::SP);
    }
    setState(576);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionContext ------------------------------------------------------------------

CypherParser::KU_OptionContext::KU_OptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_OptionContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_OptionContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Option;
}


CypherParser::KU_OptionContext* CypherParser::kU_Option() {
  KU_OptionContext *_localctx = _tracker.createInstance<KU_OptionContext>(_ctx, getState());
  enterRule(_localctx, 22, CypherParser::RuleKU_Option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(597);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(578);
      oC_SymbolicName();
      setState(592);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
      case 1: {
        setState(580);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(579);
          match(CypherParser::SP);
        }
        setState(582);
        match(CypherParser::T__5);
        setState(584);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(583);
          match(CypherParser::SP);
        }
        break;
      }

      case 2: {
        setState(589);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::SP) {
          setState(586);
          match(CypherParser::SP);
          setState(591);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      default:
        break;
      }
      setState(594);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(596);
      oC_SymbolicName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionsContext ------------------------------------------------------------------

CypherParser::KU_OptionsContext::KU_OptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_OptionContext *> CypherParser::KU_OptionsContext::kU_Option() {
  return getRuleContexts<CypherParser::KU_OptionContext>();
}

CypherParser::KU_OptionContext* CypherParser::KU_OptionsContext::kU_Option(size_t i) {
  return getRuleContext<CypherParser::KU_OptionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_Options;
}


CypherParser::KU_OptionsContext* CypherParser::kU_Options() {
  KU_OptionsContext *_localctx = _tracker.createInstance<KU_OptionsContext>(_ctx, getState());
  enterRule(_localctx, 24, CypherParser::RuleKU_Options);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(599);
    kU_Option();
    setState(610);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(601);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(600);
          match(CypherParser::SP);
        }
        setState(603);
        match(CypherParser::T__2);
        setState(605);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(604);
          match(CypherParser::SP);
        }
        setState(607);
        kU_Option(); 
      }
      setState(612);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DetachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_DetachDatabaseContext::KU_DetachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DetachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_DetachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_DetachDatabase;
}


CypherParser::KU_DetachDatabaseContext* CypherParser::kU_DetachDatabase() {
  KU_DetachDatabaseContext *_localctx = _tracker.createInstance<KU_DetachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 26, CypherParser::RuleKU_DetachDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(613);
    match(CypherParser::DETACH);
    setState(614);
    match(CypherParser::SP);
    setState(615);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_UseDatabaseContext ------------------------------------------------------------------

CypherParser::KU_UseDatabaseContext::KU_UseDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_UseDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_UseDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_UseDatabase;
}


CypherParser::KU_UseDatabaseContext* CypherParser::kU_UseDatabase() {
  KU_UseDatabaseContext *_localctx = _tracker.createInstance<KU_UseDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 28, CypherParser::RuleKU_UseDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(617);
    match(CypherParser::USE);
    setState(618);
    match(CypherParser::SP);
    setState(619);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StandaloneCallContext ------------------------------------------------------------------

CypherParser::KU_StandaloneCallContext::KU_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StandaloneCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StandaloneCallContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StandaloneCallContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_StandaloneCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_StandaloneCall;
}


CypherParser::KU_StandaloneCallContext* CypherParser::kU_StandaloneCall() {
  KU_StandaloneCallContext *_localctx = _tracker.createInstance<KU_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 30, CypherParser::RuleKU_StandaloneCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(621);
    match(CypherParser::CALL);
    setState(622);
    match(CypherParser::SP);
    setState(623);
    oC_SymbolicName();
    setState(625);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(624);
      match(CypherParser::SP);
    }
    setState(627);
    match(CypherParser::T__5);
    setState(629);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(628);
      match(CypherParser::SP);
    }
    setState(631);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CommentOnContext ------------------------------------------------------------------

CypherParser::KU_CommentOnContext::KU_CommentOnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::COMMENT() {
  return getToken(CypherParser::COMMENT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CommentOnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::ON() {
  return getToken(CypherParser::ON, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CommentOnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_CommentOnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CommentOn;
}


CypherParser::KU_CommentOnContext* CypherParser::kU_CommentOn() {
  KU_CommentOnContext *_localctx = _tracker.createInstance<KU_CommentOnContext>(_ctx, getState());
  enterRule(_localctx, 32, CypherParser::RuleKU_CommentOn);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(633);
    match(CypherParser::COMMENT);
    setState(634);
    match(CypherParser::SP);
    setState(635);
    match(CypherParser::ON);
    setState(636);
    match(CypherParser::SP);
    setState(637);
    match(CypherParser::TABLE);
    setState(638);
    match(CypherParser::SP);
    setState(639);
    oC_SchemaName();
    setState(640);
    match(CypherParser::SP);
    setState(641);
    match(CypherParser::IS);
    setState(642);
    match(CypherParser::SP);
    setState(643);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateMacroContext ------------------------------------------------------------------

CypherParser::KU_CreateMacroContext::KU_CreateMacroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateMacroContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::MACRO() {
  return getToken(CypherParser::MACRO, 0);
}

CypherParser::OC_FunctionNameContext* CypherParser::KU_CreateMacroContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_CreateMacroContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::KU_PositionalArgsContext* CypherParser::KU_CreateMacroContext::kU_PositionalArgs() {
  return getRuleContext<CypherParser::KU_PositionalArgsContext>(0);
}

std::vector<CypherParser::KU_DefaultArgContext *> CypherParser::KU_CreateMacroContext::kU_DefaultArg() {
  return getRuleContexts<CypherParser::KU_DefaultArgContext>();
}

CypherParser::KU_DefaultArgContext* CypherParser::KU_CreateMacroContext::kU_DefaultArg(size_t i) {
  return getRuleContext<CypherParser::KU_DefaultArgContext>(i);
}


size_t CypherParser::KU_CreateMacroContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateMacro;
}


CypherParser::KU_CreateMacroContext* CypherParser::kU_CreateMacro() {
  KU_CreateMacroContext *_localctx = _tracker.createInstance<KU_CreateMacroContext>(_ctx, getState());
  enterRule(_localctx, 34, CypherParser::RuleKU_CreateMacro);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(645);
    match(CypherParser::CREATE);
    setState(646);
    match(CypherParser::SP);
    setState(647);
    match(CypherParser::MACRO);
    setState(648);
    match(CypherParser::SP);
    setState(649);
    oC_FunctionName();
    setState(651);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(650);
      match(CypherParser::SP);
    }
    setState(653);
    match(CypherParser::T__1);
    setState(655);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      setState(654);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(658);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx)) {
    case 1: {
      setState(657);
      kU_PositionalArgs();
      break;
    }

    default:
      break;
    }
    setState(661);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      setState(660);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(664);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & -2383877064657885291) != 0) || ((((_la - 121) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 121)) & 316935604865917) != 0)) {
      setState(663);
      kU_DefaultArg();
    }
    setState(676);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(667);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(666);
          match(CypherParser::SP);
        }
        setState(669);
        match(CypherParser::T__2);
        setState(671);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(670);
          match(CypherParser::SP);
        }
        setState(673);
        kU_DefaultArg(); 
      }
      setState(678);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    }
    setState(680);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(679);
      match(CypherParser::SP);
    }
    setState(682);
    match(CypherParser::T__3);
    setState(683);
    match(CypherParser::SP);
    setState(684);
    match(CypherParser::AS);
    setState(685);
    match(CypherParser::SP);
    setState(686);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PositionalArgsContext ------------------------------------------------------------------

CypherParser::KU_PositionalArgsContext::KU_PositionalArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_PositionalArgsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_PositionalArgsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PositionalArgsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PositionalArgsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PositionalArgsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PositionalArgs;
}


CypherParser::KU_PositionalArgsContext* CypherParser::kU_PositionalArgs() {
  KU_PositionalArgsContext *_localctx = _tracker.createInstance<KU_PositionalArgsContext>(_ctx, getState());
  enterRule(_localctx, 36, CypherParser::RuleKU_PositionalArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(688);
    oC_SymbolicName();
    setState(699);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(690);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(689);
          match(CypherParser::SP);
        }
        setState(692);
        match(CypherParser::T__2);
        setState(694);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(693);
          match(CypherParser::SP);
        }
        setState(696);
        oC_SymbolicName(); 
      }
      setState(701);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultArgContext ------------------------------------------------------------------

CypherParser::KU_DefaultArgContext::KU_DefaultArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DefaultArgContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_DefaultArgContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DefaultArgContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_DefaultArgContext::getRuleIndex() const {
  return CypherParser::RuleKU_DefaultArg;
}


CypherParser::KU_DefaultArgContext* CypherParser::kU_DefaultArg() {
  KU_DefaultArgContext *_localctx = _tracker.createInstance<KU_DefaultArgContext>(_ctx, getState());
  enterRule(_localctx, 38, CypherParser::RuleKU_DefaultArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(702);
    oC_SymbolicName();
    setState(704);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(703);
      match(CypherParser::SP);
    }
    setState(706);
    match(CypherParser::COLON);
    setState(707);
    match(CypherParser::T__5);
    setState(709);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(708);
      match(CypherParser::SP);
    }
    setState(711);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FilePathsContext ------------------------------------------------------------------

CypherParser::KU_FilePathsContext::KU_FilePathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::GLOB() {
  return getToken(CypherParser::GLOB, 0);
}


size_t CypherParser::KU_FilePathsContext::getRuleIndex() const {
  return CypherParser::RuleKU_FilePaths;
}


CypherParser::KU_FilePathsContext* CypherParser::kU_FilePaths() {
  KU_FilePathsContext *_localctx = _tracker.createInstance<KU_FilePathsContext>(_ctx, getState());
  enterRule(_localctx, 40, CypherParser::RuleKU_FilePaths);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(746);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 1);
        setState(713);
        match(CypherParser::T__6);
        setState(715);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(714);
          match(CypherParser::SP);
        }
        setState(717);
        match(CypherParser::StringLiteral);
        setState(728);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
          setState(719);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(718);
            match(CypherParser::SP);
          }
          setState(721);
          match(CypherParser::T__2);
          setState(723);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(722);
            match(CypherParser::SP);
          }
          setState(725);
          match(CypherParser::StringLiteral);
          setState(730);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(731);
        match(CypherParser::T__7);
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(732);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::GLOB: {
        enterOuterAlt(_localctx, 3);
        setState(733);
        match(CypherParser::GLOB);
        setState(735);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(734);
          match(CypherParser::SP);
        }
        setState(737);
        match(CypherParser::T__1);
        setState(739);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(738);
          match(CypherParser::SP);
        }
        setState(741);
        match(CypherParser::StringLiteral);
        setState(743);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(742);
          match(CypherParser::SP);
        }
        setState(745);
        match(CypherParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ParsingOptionsContext ------------------------------------------------------------------

CypherParser::KU_ParsingOptionsContext::KU_ParsingOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_OptionsContext* CypherParser::KU_ParsingOptionsContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ParsingOptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ParsingOptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ParsingOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_ParsingOptions;
}


CypherParser::KU_ParsingOptionsContext* CypherParser::kU_ParsingOptions() {
  KU_ParsingOptionsContext *_localctx = _tracker.createInstance<KU_ParsingOptionsContext>(_ctx, getState());
  enterRule(_localctx, 42, CypherParser::RuleKU_ParsingOptions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(748);
    match(CypherParser::T__1);
    setState(750);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(749);
      match(CypherParser::SP);
    }
    setState(752);
    kU_Options();
    setState(754);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(753);
      match(CypherParser::SP);
    }
    setState(756);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IfNotExistsContext ------------------------------------------------------------------

CypherParser::KU_IfNotExistsContext::KU_IfNotExistsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::IF() {
  return getToken(CypherParser::IF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_IfNotExistsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}


size_t CypherParser::KU_IfNotExistsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IfNotExists;
}


CypherParser::KU_IfNotExistsContext* CypherParser::kU_IfNotExists() {
  KU_IfNotExistsContext *_localctx = _tracker.createInstance<KU_IfNotExistsContext>(_ctx, getState());
  enterRule(_localctx, 44, CypherParser::RuleKU_IfNotExists);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(758);
    match(CypherParser::IF);
    setState(759);
    match(CypherParser::SP);
    setState(760);
    match(CypherParser::NOT);
    setState(761);
    match(CypherParser::SP);
    setState(762);
    match(CypherParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeTableContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeTableContext::KU_CreateNodeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateNodeTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateNodeTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_CreateNodeConstraintContext* CypherParser::KU_CreateNodeTableContext::kU_CreateNodeConstraint() {
  return getRuleContext<CypherParser::KU_CreateNodeConstraintContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateNodeTableContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

CypherParser::KU_PropertyDefinitionsWithConstraintContext* CypherParser::KU_CreateNodeTableContext::kU_PropertyDefinitionsWithConstraint() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsWithConstraintContext>(0);
}


size_t CypherParser::KU_CreateNodeTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeTable;
}


CypherParser::KU_CreateNodeTableContext* CypherParser::kU_CreateNodeTable() {
  KU_CreateNodeTableContext *_localctx = _tracker.createInstance<KU_CreateNodeTableContext>(_ctx, getState());
  enterRule(_localctx, 46, CypherParser::RuleKU_CreateNodeTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(823);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(764);
      match(CypherParser::CREATE);
      setState(765);
      match(CypherParser::SP);
      setState(766);
      match(CypherParser::NODE);
      setState(767);
      match(CypherParser::SP);
      setState(768);
      match(CypherParser::TABLE);
      setState(769);
      match(CypherParser::SP);
      setState(773);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
      case 1: {
        setState(770);
        kU_IfNotExists();
        setState(771);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(775);
      oC_SchemaName();
      setState(777);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(776);
        match(CypherParser::SP);
      }
      setState(779);
      match(CypherParser::T__1);
      setState(781);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(780);
        match(CypherParser::SP);
      }
      setState(783);
      kU_PropertyDefinitions();
      setState(785);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(784);
        match(CypherParser::SP);
      }

      setState(787);
      match(CypherParser::T__2);
      setState(789);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(788);
        match(CypherParser::SP);
      }
      setState(791);
      kU_CreateNodeConstraint();
      setState(794);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(793);
        match(CypherParser::SP);
      }
      setState(796);
      match(CypherParser::T__3);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(798);
      match(CypherParser::CREATE);
      setState(799);
      match(CypherParser::SP);
      setState(800);
      match(CypherParser::NODE);
      setState(801);
      match(CypherParser::SP);
      setState(802);
      match(CypherParser::TABLE);
      setState(803);
      match(CypherParser::SP);
      setState(807);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
      case 1: {
        setState(804);
        kU_IfNotExists();
        setState(805);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(809);
      oC_SchemaName();
      setState(811);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(810);
        match(CypherParser::SP);
      }
      setState(813);
      match(CypherParser::T__1);
      setState(815);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(814);
        match(CypherParser::SP);
      }
      setState(817);
      kU_PropertyDefinitionsWithConstraint();
      setState(819);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(818);
        match(CypherParser::SP);
      }
      setState(821);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableContext::KU_CreateRelTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableContext::kU_RelTableConnection() {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateRelTableContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTable;
}


CypherParser::KU_CreateRelTableContext* CypherParser::kU_CreateRelTable() {
  KU_CreateRelTableContext *_localctx = _tracker.createInstance<KU_CreateRelTableContext>(_ctx, getState());
  enterRule(_localctx, 48, CypherParser::RuleKU_CreateRelTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(825);
    match(CypherParser::CREATE);
    setState(826);
    match(CypherParser::SP);
    setState(827);
    match(CypherParser::REL);
    setState(828);
    match(CypherParser::SP);
    setState(829);
    match(CypherParser::TABLE);
    setState(830);
    match(CypherParser::SP);
    setState(834);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
    case 1: {
      setState(831);
      kU_IfNotExists();
      setState(832);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(836);
    oC_SchemaName();
    setState(838);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(837);
      match(CypherParser::SP);
    }
    setState(840);
    match(CypherParser::T__1);
    setState(842);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(841);
      match(CypherParser::SP);
    }
    setState(844);
    kU_RelTableConnection();
    setState(846);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(845);
      match(CypherParser::SP);
    }
    setState(856);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      setState(848);
      match(CypherParser::T__2);
      setState(850);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(849);
        match(CypherParser::SP);
      }
      setState(852);
      kU_PropertyDefinitions();
      setState(854);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(853);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(866);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
      setState(858);
      match(CypherParser::T__2);
      setState(860);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(859);
        match(CypherParser::SP);
      }
      setState(862);
      oC_SymbolicName();
      setState(864);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(863);
        match(CypherParser::SP);
      }
    }
    setState(868);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableGroupContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableGroupContext::KU_CreateRelTableGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableGroupContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::GROUP() {
  return getToken(CypherParser::GROUP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

std::vector<CypherParser::KU_RelTableConnectionContext *> CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection() {
  return getRuleContexts<CypherParser::KU_RelTableConnectionContext>();
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection(size_t i) {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(i);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateRelTableGroupContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableGroupContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableGroupContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTableGroup;
}


CypherParser::KU_CreateRelTableGroupContext* CypherParser::kU_CreateRelTableGroup() {
  KU_CreateRelTableGroupContext *_localctx = _tracker.createInstance<KU_CreateRelTableGroupContext>(_ctx, getState());
  enterRule(_localctx, 50, CypherParser::RuleKU_CreateRelTableGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(870);
    match(CypherParser::CREATE);
    setState(871);
    match(CypherParser::SP);
    setState(872);
    match(CypherParser::REL);
    setState(873);
    match(CypherParser::SP);
    setState(874);
    match(CypherParser::TABLE);
    setState(875);
    match(CypherParser::SP);
    setState(876);
    match(CypherParser::GROUP);
    setState(877);
    match(CypherParser::SP);
    setState(881);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
    case 1: {
      setState(878);
      kU_IfNotExists();
      setState(879);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(883);
    oC_SchemaName();
    setState(885);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(884);
      match(CypherParser::SP);
    }
    setState(887);
    match(CypherParser::T__1);
    setState(889);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(888);
      match(CypherParser::SP);
    }
    setState(891);
    kU_RelTableConnection();
    setState(900); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(893);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(892);
                match(CypherParser::SP);
              }
              setState(895);
              match(CypherParser::T__2);
              setState(897);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(896);
                match(CypherParser::SP);
              }
              setState(899);
              kU_RelTableConnection();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(902); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(905);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(904);
      match(CypherParser::SP);
    }
    setState(915);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      setState(907);
      match(CypherParser::T__2);
      setState(909);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(908);
        match(CypherParser::SP);
      }
      setState(911);
      kU_PropertyDefinitions();
      setState(913);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(912);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(925);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
      setState(917);
      match(CypherParser::T__2);
      setState(919);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(918);
        match(CypherParser::SP);
      }
      setState(921);
      oC_SymbolicName();
      setState(923);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(922);
        match(CypherParser::SP);
      }
    }
    setState(927);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RelTableConnectionContext ------------------------------------------------------------------

CypherParser::KU_RelTableConnectionContext::KU_RelTableConnectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RelTableConnectionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_RelTableConnectionContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RelTableConnectionContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RelTableConnectionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RelTableConnection;
}


CypherParser::KU_RelTableConnectionContext* CypherParser::kU_RelTableConnection() {
  KU_RelTableConnectionContext *_localctx = _tracker.createInstance<KU_RelTableConnectionContext>(_ctx, getState());
  enterRule(_localctx, 52, CypherParser::RuleKU_RelTableConnection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(929);
    match(CypherParser::FROM);
    setState(930);
    match(CypherParser::SP);
    setState(931);
    oC_SchemaName();
    setState(932);
    match(CypherParser::SP);
    setState(933);
    match(CypherParser::TO);
    setState(934);
    match(CypherParser::SP);
    setState(935);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRdfGraphContext ------------------------------------------------------------------

CypherParser::KU_CreateRdfGraphContext::KU_CreateRdfGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRdfGraphContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRdfGraphContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateRdfGraphContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}


size_t CypherParser::KU_CreateRdfGraphContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRdfGraph;
}


CypherParser::KU_CreateRdfGraphContext* CypherParser::kU_CreateRdfGraph() {
  KU_CreateRdfGraphContext *_localctx = _tracker.createInstance<KU_CreateRdfGraphContext>(_ctx, getState());
  enterRule(_localctx, 54, CypherParser::RuleKU_CreateRdfGraph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(937);
    match(CypherParser::CREATE);
    setState(938);
    match(CypherParser::SP);
    setState(939);
    match(CypherParser::RDFGRAPH);
    setState(940);
    match(CypherParser::SP);
    setState(944);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      setState(941);
      kU_IfNotExists();
      setState(942);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(946);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateSequenceContext ------------------------------------------------------------------

CypherParser::KU_CreateSequenceContext::KU_CreateSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateSequenceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateSequenceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateSequenceContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

std::vector<CypherParser::KU_SequenceOptionsContext *> CypherParser::KU_CreateSequenceContext::kU_SequenceOptions() {
  return getRuleContexts<CypherParser::KU_SequenceOptionsContext>();
}

CypherParser::KU_SequenceOptionsContext* CypherParser::KU_CreateSequenceContext::kU_SequenceOptions(size_t i) {
  return getRuleContext<CypherParser::KU_SequenceOptionsContext>(i);
}


size_t CypherParser::KU_CreateSequenceContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateSequence;
}


CypherParser::KU_CreateSequenceContext* CypherParser::kU_CreateSequence() {
  KU_CreateSequenceContext *_localctx = _tracker.createInstance<KU_CreateSequenceContext>(_ctx, getState());
  enterRule(_localctx, 56, CypherParser::RuleKU_CreateSequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(948);
    match(CypherParser::CREATE);
    setState(949);
    match(CypherParser::SP);
    setState(950);
    match(CypherParser::SEQUENCE);
    setState(951);
    match(CypherParser::SP);
    setState(955);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
    case 1: {
      setState(952);
      kU_IfNotExists();
      setState(953);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(957);
    oC_SchemaName();
    setState(962);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(958);
        match(CypherParser::SP);
        setState(959);
        kU_SequenceOptions(); 
      }
      setState(964);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateTypeContext ------------------------------------------------------------------

CypherParser::KU_CreateTypeContext::KU_CreateTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::TYPE() {
  return getToken(CypherParser::TYPE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateTypeContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_CreateTypeContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_CreateTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateType;
}


CypherParser::KU_CreateTypeContext* CypherParser::kU_CreateType() {
  KU_CreateTypeContext *_localctx = _tracker.createInstance<KU_CreateTypeContext>(_ctx, getState());
  enterRule(_localctx, 58, CypherParser::RuleKU_CreateType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(965);
    match(CypherParser::CREATE);
    setState(966);
    match(CypherParser::SP);
    setState(967);
    match(CypherParser::TYPE);
    setState(968);
    match(CypherParser::SP);
    setState(969);
    oC_SchemaName();
    setState(970);
    match(CypherParser::SP);
    setState(971);
    match(CypherParser::AS);
    setState(972);
    match(CypherParser::SP);
    setState(973);
    kU_DataType(0);
    setState(975);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx)) {
    case 1: {
      setState(974);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_SequenceOptionsContext ------------------------------------------------------------------

CypherParser::KU_SequenceOptionsContext::KU_SequenceOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_IncrementByContext* CypherParser::KU_SequenceOptionsContext::kU_IncrementBy() {
  return getRuleContext<CypherParser::KU_IncrementByContext>(0);
}

CypherParser::KU_MinValueContext* CypherParser::KU_SequenceOptionsContext::kU_MinValue() {
  return getRuleContext<CypherParser::KU_MinValueContext>(0);
}

CypherParser::KU_MaxValueContext* CypherParser::KU_SequenceOptionsContext::kU_MaxValue() {
  return getRuleContext<CypherParser::KU_MaxValueContext>(0);
}

CypherParser::KU_StartWithContext* CypherParser::KU_SequenceOptionsContext::kU_StartWith() {
  return getRuleContext<CypherParser::KU_StartWithContext>(0);
}

CypherParser::KU_CycleContext* CypherParser::KU_SequenceOptionsContext::kU_Cycle() {
  return getRuleContext<CypherParser::KU_CycleContext>(0);
}


size_t CypherParser::KU_SequenceOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_SequenceOptions;
}


CypherParser::KU_SequenceOptionsContext* CypherParser::kU_SequenceOptions() {
  KU_SequenceOptionsContext *_localctx = _tracker.createInstance<KU_SequenceOptionsContext>(_ctx, getState());
  enterRule(_localctx, 60, CypherParser::RuleKU_SequenceOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(982);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(977);
      kU_IncrementBy();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(978);
      kU_MinValue();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(979);
      kU_MaxValue();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(980);
      kU_StartWith();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(981);
      kU_Cycle();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IncrementByContext ------------------------------------------------------------------

CypherParser::KU_IncrementByContext::KU_IncrementByContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_IncrementByContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_IncrementByContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_IncrementByContext::getRuleIndex() const {
  return CypherParser::RuleKU_IncrementBy;
}


CypherParser::KU_IncrementByContext* CypherParser::kU_IncrementBy() {
  KU_IncrementByContext *_localctx = _tracker.createInstance<KU_IncrementByContext>(_ctx, getState());
  enterRule(_localctx, 62, CypherParser::RuleKU_IncrementBy);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(984);
    match(CypherParser::INCREMENT);
    setState(985);
    match(CypherParser::SP);
    setState(988);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::BY) {
      setState(986);
      match(CypherParser::BY);
      setState(987);
      match(CypherParser::SP);
    }
    setState(991);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(990);
      match(CypherParser::MINUS);
    }
    setState(993);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MinValueContext ------------------------------------------------------------------

CypherParser::KU_MinValueContext::KU_MinValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MinValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MinValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MinValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MinValue;
}


CypherParser::KU_MinValueContext* CypherParser::kU_MinValue() {
  KU_MinValueContext *_localctx = _tracker.createInstance<KU_MinValueContext>(_ctx, getState());
  enterRule(_localctx, 64, CypherParser::RuleKU_MinValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1004);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(995);
        match(CypherParser::NO);
        setState(996);
        match(CypherParser::SP);
        setState(997);
        match(CypherParser::MINVALUE);
        break;
      }

      case CypherParser::MINVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(998);
        match(CypherParser::MINVALUE);
        setState(999);
        match(CypherParser::SP);
        setState(1001);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(1000);
          match(CypherParser::MINUS);
        }
        setState(1003);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MaxValueContext ------------------------------------------------------------------

CypherParser::KU_MaxValueContext::KU_MaxValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MaxValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MaxValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MaxValue;
}


CypherParser::KU_MaxValueContext* CypherParser::kU_MaxValue() {
  KU_MaxValueContext *_localctx = _tracker.createInstance<KU_MaxValueContext>(_ctx, getState());
  enterRule(_localctx, 66, CypherParser::RuleKU_MaxValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1015);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(1006);
        match(CypherParser::NO);
        setState(1007);
        match(CypherParser::SP);
        setState(1008);
        match(CypherParser::MAXVALUE);
        break;
      }

      case CypherParser::MAXVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(1009);
        match(CypherParser::MAXVALUE);
        setState(1010);
        match(CypherParser::SP);
        setState(1012);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(1011);
          match(CypherParser::MINUS);
        }
        setState(1014);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StartWithContext ------------------------------------------------------------------

CypherParser::KU_StartWithContext::KU_StartWithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StartWithContext::START() {
  return getToken(CypherParser::START, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StartWithContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_StartWithContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_StartWithContext::getRuleIndex() const {
  return CypherParser::RuleKU_StartWith;
}


CypherParser::KU_StartWithContext* CypherParser::kU_StartWith() {
  KU_StartWithContext *_localctx = _tracker.createInstance<KU_StartWithContext>(_ctx, getState());
  enterRule(_localctx, 68, CypherParser::RuleKU_StartWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1017);
    match(CypherParser::START);
    setState(1018);
    match(CypherParser::SP);
    setState(1021);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::WITH) {
      setState(1019);
      match(CypherParser::WITH);
      setState(1020);
      match(CypherParser::SP);
    }
    setState(1024);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(1023);
      match(CypherParser::MINUS);
    }
    setState(1026);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CycleContext ------------------------------------------------------------------

CypherParser::KU_CycleContext::KU_CycleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CycleContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::KU_CycleContext::getRuleIndex() const {
  return CypherParser::RuleKU_Cycle;
}


CypherParser::KU_CycleContext* CypherParser::kU_Cycle() {
  KU_CycleContext *_localctx = _tracker.createInstance<KU_CycleContext>(_ctx, getState());
  enterRule(_localctx, 70, CypherParser::RuleKU_Cycle);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1030);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::NO) {
      setState(1028);
      match(CypherParser::NO);
      setState(1029);
      match(CypherParser::SP);
    }
    setState(1032);
    match(CypherParser::CYCLE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IfExistsContext ------------------------------------------------------------------

CypherParser::KU_IfExistsContext::KU_IfExistsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IfExistsContext::IF() {
  return getToken(CypherParser::IF, 0);
}

tree::TerminalNode* CypherParser::KU_IfExistsContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_IfExistsContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}


size_t CypherParser::KU_IfExistsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IfExists;
}


CypherParser::KU_IfExistsContext* CypherParser::kU_IfExists() {
  KU_IfExistsContext *_localctx = _tracker.createInstance<KU_IfExistsContext>(_ctx, getState());
  enterRule(_localctx, 72, CypherParser::RuleKU_IfExists);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1034);
    match(CypherParser::IF);
    setState(1035);
    match(CypherParser::SP);
    setState(1036);
    match(CypherParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropContext ------------------------------------------------------------------

CypherParser::KU_DropContext::KU_DropContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DropContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DropContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DropContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DropContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_DropContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}

tree::TerminalNode* CypherParser::KU_DropContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

CypherParser::KU_IfExistsContext* CypherParser::KU_DropContext::kU_IfExists() {
  return getRuleContext<CypherParser::KU_IfExistsContext>(0);
}


size_t CypherParser::KU_DropContext::getRuleIndex() const {
  return CypherParser::RuleKU_Drop;
}


CypherParser::KU_DropContext* CypherParser::kU_Drop() {
  KU_DropContext *_localctx = _tracker.createInstance<KU_DropContext>(_ctx, getState());
  enterRule(_localctx, 74, CypherParser::RuleKU_Drop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1038);
    match(CypherParser::DROP);
    setState(1039);
    match(CypherParser::SP);
    setState(1040);
    _la = _input->LA(1);
    if (!(((((_la - 122) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 122)) & 4225) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1041);
    match(CypherParser::SP);
    setState(1045);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      setState(1042);
      kU_IfExists();
      setState(1043);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1047);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterTableContext ------------------------------------------------------------------

CypherParser::KU_AlterTableContext::KU_AlterTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AlterTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AlterTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_AlterOptionsContext* CypherParser::KU_AlterTableContext::kU_AlterOptions() {
  return getRuleContext<CypherParser::KU_AlterOptionsContext>(0);
}


size_t CypherParser::KU_AlterTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterTable;
}


CypherParser::KU_AlterTableContext* CypherParser::kU_AlterTable() {
  KU_AlterTableContext *_localctx = _tracker.createInstance<KU_AlterTableContext>(_ctx, getState());
  enterRule(_localctx, 76, CypherParser::RuleKU_AlterTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1049);
    match(CypherParser::ALTER);
    setState(1050);
    match(CypherParser::SP);
    setState(1051);
    match(CypherParser::TABLE);
    setState(1052);
    match(CypherParser::SP);
    setState(1053);
    oC_SchemaName();
    setState(1054);
    match(CypherParser::SP);
    setState(1055);
    kU_AlterOptions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterOptionsContext ------------------------------------------------------------------

CypherParser::KU_AlterOptionsContext::KU_AlterOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_AddPropertyContext* CypherParser::KU_AlterOptionsContext::kU_AddProperty() {
  return getRuleContext<CypherParser::KU_AddPropertyContext>(0);
}

CypherParser::KU_DropPropertyContext* CypherParser::KU_AlterOptionsContext::kU_DropProperty() {
  return getRuleContext<CypherParser::KU_DropPropertyContext>(0);
}

CypherParser::KU_RenameTableContext* CypherParser::KU_AlterOptionsContext::kU_RenameTable() {
  return getRuleContext<CypherParser::KU_RenameTableContext>(0);
}

CypherParser::KU_RenamePropertyContext* CypherParser::KU_AlterOptionsContext::kU_RenameProperty() {
  return getRuleContext<CypherParser::KU_RenamePropertyContext>(0);
}


size_t CypherParser::KU_AlterOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterOptions;
}


CypherParser::KU_AlterOptionsContext* CypherParser::kU_AlterOptions() {
  KU_AlterOptionsContext *_localctx = _tracker.createInstance<KU_AlterOptionsContext>(_ctx, getState());
  enterRule(_localctx, 78, CypherParser::RuleKU_AlterOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1061);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1057);
      kU_AddProperty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1058);
      kU_DropProperty();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1059);
      kU_RenameTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1060);
      kU_RenameProperty();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddPropertyContext ------------------------------------------------------------------

CypherParser::KU_AddPropertyContext::KU_AddPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AddPropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_AddPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_AddPropertyContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

CypherParser::KU_DefaultContext* CypherParser::KU_AddPropertyContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}


size_t CypherParser::KU_AddPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddProperty;
}


CypherParser::KU_AddPropertyContext* CypherParser::kU_AddProperty() {
  KU_AddPropertyContext *_localctx = _tracker.createInstance<KU_AddPropertyContext>(_ctx, getState());
  enterRule(_localctx, 80, CypherParser::RuleKU_AddProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1063);
    match(CypherParser::ADD);
    setState(1064);
    match(CypherParser::SP);
    setState(1065);
    oC_PropertyKeyName();
    setState(1066);
    match(CypherParser::SP);
    setState(1067);
    kU_DataType(0);
    setState(1070);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
    case 1: {
      setState(1068);
      match(CypherParser::SP);
      setState(1069);
      kU_Default();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultContext ------------------------------------------------------------------

CypherParser::KU_DefaultContext::KU_DefaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DefaultContext::DEFAULT() {
  return getToken(CypherParser::DEFAULT, 0);
}

tree::TerminalNode* CypherParser::KU_DefaultContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_DefaultContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_DefaultContext::getRuleIndex() const {
  return CypherParser::RuleKU_Default;
}


CypherParser::KU_DefaultContext* CypherParser::kU_Default() {
  KU_DefaultContext *_localctx = _tracker.createInstance<KU_DefaultContext>(_ctx, getState());
  enterRule(_localctx, 82, CypherParser::RuleKU_Default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1072);
    match(CypherParser::DEFAULT);
    setState(1073);
    match(CypherParser::SP);
    setState(1074);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropPropertyContext ------------------------------------------------------------------

CypherParser::KU_DropPropertyContext::KU_DropPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_DropPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_DropPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropProperty;
}


CypherParser::KU_DropPropertyContext* CypherParser::kU_DropProperty() {
  KU_DropPropertyContext *_localctx = _tracker.createInstance<KU_DropPropertyContext>(_ctx, getState());
  enterRule(_localctx, 84, CypherParser::RuleKU_DropProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1076);
    match(CypherParser::DROP);
    setState(1077);
    match(CypherParser::SP);
    setState(1078);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenameTableContext ------------------------------------------------------------------

CypherParser::KU_RenameTableContext::KU_RenameTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenameTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::TO() {
  return getToken(CypherParser::TO, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RenameTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_RenameTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameTable;
}


CypherParser::KU_RenameTableContext* CypherParser::kU_RenameTable() {
  KU_RenameTableContext *_localctx = _tracker.createInstance<KU_RenameTableContext>(_ctx, getState());
  enterRule(_localctx, 86, CypherParser::RuleKU_RenameTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1080);
    match(CypherParser::RENAME);
    setState(1081);
    match(CypherParser::SP);
    setState(1082);
    match(CypherParser::TO);
    setState(1083);
    match(CypherParser::SP);
    setState(1084);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenamePropertyContext ------------------------------------------------------------------

CypherParser::KU_RenamePropertyContext::KU_RenamePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenamePropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RenamePropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameProperty;
}


CypherParser::KU_RenamePropertyContext* CypherParser::kU_RenameProperty() {
  KU_RenamePropertyContext *_localctx = _tracker.createInstance<KU_RenamePropertyContext>(_ctx, getState());
  enterRule(_localctx, 88, CypherParser::RuleKU_RenameProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1086);
    match(CypherParser::RENAME);
    setState(1087);
    match(CypherParser::SP);
    setState(1088);
    oC_PropertyKeyName();
    setState(1089);
    match(CypherParser::SP);
    setState(1090);
    match(CypherParser::TO);
    setState(1091);
    match(CypherParser::SP);
    setState(1092);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnDefinitionsContext ------------------------------------------------------------------

CypherParser::KU_ColumnDefinitionsContext::KU_ColumnDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ColumnDefinitionContext *> CypherParser::KU_ColumnDefinitionsContext::kU_ColumnDefinition() {
  return getRuleContexts<CypherParser::KU_ColumnDefinitionContext>();
}

CypherParser::KU_ColumnDefinitionContext* CypherParser::KU_ColumnDefinitionsContext::kU_ColumnDefinition(size_t i) {
  return getRuleContext<CypherParser::KU_ColumnDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ColumnDefinitionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ColumnDefinitionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ColumnDefinitionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnDefinitions;
}


CypherParser::KU_ColumnDefinitionsContext* CypherParser::kU_ColumnDefinitions() {
  KU_ColumnDefinitionsContext *_localctx = _tracker.createInstance<KU_ColumnDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 90, CypherParser::RuleKU_ColumnDefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1094);
    kU_ColumnDefinition();
    setState(1105);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1096);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1095);
          match(CypherParser::SP);
        }
        setState(1098);
        match(CypherParser::T__2);
        setState(1100);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1099);
          match(CypherParser::SP);
        }
        setState(1102);
        kU_ColumnDefinition(); 
      }
      setState(1107);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnDefinitionContext ------------------------------------------------------------------

CypherParser::KU_ColumnDefinitionContext::KU_ColumnDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_ColumnDefinitionContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_ColumnDefinitionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_ColumnDefinitionContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_ColumnDefinitionContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnDefinition;
}


CypherParser::KU_ColumnDefinitionContext* CypherParser::kU_ColumnDefinition() {
  KU_ColumnDefinitionContext *_localctx = _tracker.createInstance<KU_ColumnDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 92, CypherParser::RuleKU_ColumnDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1108);
    oC_PropertyKeyName();
    setState(1109);
    match(CypherParser::SP);
    setState(1110);
    kU_DataType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsContext::KU_PropertyDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionContext *> CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionContext>();
}

CypherParser::KU_PropertyDefinitionContext* CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitions;
}


CypherParser::KU_PropertyDefinitionsContext* CypherParser::kU_PropertyDefinitions() {
  KU_PropertyDefinitionsContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 94, CypherParser::RuleKU_PropertyDefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1112);
    kU_PropertyDefinition();
    setState(1123);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1114);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1113);
          match(CypherParser::SP);
        }
        setState(1116);
        match(CypherParser::T__2);
        setState(1118);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1117);
          match(CypherParser::SP);
        }
        setState(1120);
        kU_PropertyDefinition(); 
      }
      setState(1125);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionContext::KU_PropertyDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_ColumnDefinitionContext* CypherParser::KU_PropertyDefinitionContext::kU_ColumnDefinition() {
  return getRuleContext<CypherParser::KU_ColumnDefinitionContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_DefaultContext* CypherParser::KU_PropertyDefinitionContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinition;
}


CypherParser::KU_PropertyDefinitionContext* CypherParser::kU_PropertyDefinition() {
  KU_PropertyDefinitionContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 96, CypherParser::RuleKU_PropertyDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1126);
    kU_ColumnDefinition();
    setState(1129);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
    case 1: {
      setState(1127);
      match(CypherParser::SP);
      setState(1128);
      kU_Default();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionBeforeConstraintContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionBeforeConstraintContext::KU_PropertyDefinitionBeforeConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_ColumnDefinitionContext* CypherParser::KU_PropertyDefinitionBeforeConstraintContext::kU_ColumnDefinition() {
  return getRuleContext<CypherParser::KU_ColumnDefinitionContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionBeforeConstraintContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_DefaultContext* CypherParser::KU_PropertyDefinitionBeforeConstraintContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionBeforeConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitionBeforeConstraint;
}


CypherParser::KU_PropertyDefinitionBeforeConstraintContext* CypherParser::kU_PropertyDefinitionBeforeConstraint() {
  KU_PropertyDefinitionBeforeConstraintContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionBeforeConstraintContext>(_ctx, getState());
  enterRule(_localctx, 98, CypherParser::RuleKU_PropertyDefinitionBeforeConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1131);
    kU_ColumnDefinition();
    setState(1134);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1132);
      match(CypherParser::SP);
      setState(1133);
      kU_Default();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionAfterConstraintContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionAfterConstraintContext::KU_PropertyDefinitionAfterConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_ColumnDefinitionContext* CypherParser::KU_PropertyDefinitionAfterConstraintContext::kU_ColumnDefinition() {
  return getRuleContext<CypherParser::KU_ColumnDefinitionContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionAfterConstraintContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_DefaultContext* CypherParser::KU_PropertyDefinitionAfterConstraintContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionAfterConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitionAfterConstraint;
}


CypherParser::KU_PropertyDefinitionAfterConstraintContext* CypherParser::kU_PropertyDefinitionAfterConstraint() {
  KU_PropertyDefinitionAfterConstraintContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionAfterConstraintContext>(_ctx, getState());
  enterRule(_localctx, 100, CypherParser::RuleKU_PropertyDefinitionAfterConstraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1136);
    kU_ColumnDefinition();
    setState(1139);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      setState(1137);
      match(CypherParser::SP);
      setState(1138);
      kU_Default();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeConstraintContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeConstraintContext::KU_CreateNodeConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::PRIMARY() {
  return getToken(CypherParser::PRIMARY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeConstraintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_CreateNodeConstraintContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_CreateNodeConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeConstraint;
}


CypherParser::KU_CreateNodeConstraintContext* CypherParser::kU_CreateNodeConstraint() {
  KU_CreateNodeConstraintContext *_localctx = _tracker.createInstance<KU_CreateNodeConstraintContext>(_ctx, getState());
  enterRule(_localctx, 102, CypherParser::RuleKU_CreateNodeConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1141);
    match(CypherParser::PRIMARY);
    setState(1142);
    match(CypherParser::SP);
    setState(1143);
    match(CypherParser::KEY);
    setState(1145);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1144);
      match(CypherParser::SP);
    }
    setState(1147);
    match(CypherParser::T__1);
    setState(1149);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1148);
      match(CypherParser::SP);
    }
    setState(1151);
    oC_PropertyKeyName();
    setState(1153);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1152);
      match(CypherParser::SP);
    }
    setState(1155);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionWithConstraintContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionWithConstraintContext::KU_PropertyDefinitionWithConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_ColumnDefinitionContext* CypherParser::KU_PropertyDefinitionWithConstraintContext::kU_ColumnDefinition() {
  return getRuleContext<CypherParser::KU_ColumnDefinitionContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionWithConstraintContext::PRIMARY() {
  return getToken(CypherParser::PRIMARY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionWithConstraintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionWithConstraintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionWithConstraintContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

CypherParser::KU_DefaultContext* CypherParser::KU_PropertyDefinitionWithConstraintContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionWithConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitionWithConstraint;
}


CypherParser::KU_PropertyDefinitionWithConstraintContext* CypherParser::kU_PropertyDefinitionWithConstraint() {
  KU_PropertyDefinitionWithConstraintContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionWithConstraintContext>(_ctx, getState());
  enterRule(_localctx, 104, CypherParser::RuleKU_PropertyDefinitionWithConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1157);
    kU_ColumnDefinition();
    setState(1160);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      setState(1158);
      match(CypherParser::SP);
      setState(1159);
      kU_Default();
      break;
    }

    default:
      break;
    }
    setState(1163);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1162);
      match(CypherParser::SP);
    }
    setState(1165);
    match(CypherParser::PRIMARY);
    setState(1166);
    match(CypherParser::SP);
    setState(1167);
    match(CypherParser::KEY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsWithConstraintContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsWithConstraintContext::KU_PropertyDefinitionsWithConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_PropertyDefinitionWithConstraintContext* CypherParser::KU_PropertyDefinitionsWithConstraintContext::kU_PropertyDefinitionWithConstraint() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionWithConstraintContext>(0);
}

std::vector<CypherParser::KU_PropertyDefinitionBeforeConstraintContext *> CypherParser::KU_PropertyDefinitionsWithConstraintContext::kU_PropertyDefinitionBeforeConstraint() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionBeforeConstraintContext>();
}

CypherParser::KU_PropertyDefinitionBeforeConstraintContext* CypherParser::KU_PropertyDefinitionsWithConstraintContext::kU_PropertyDefinitionBeforeConstraint(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionBeforeConstraintContext>(i);
}

std::vector<CypherParser::KU_PropertyDefinitionAfterConstraintContext *> CypherParser::KU_PropertyDefinitionsWithConstraintContext::kU_PropertyDefinitionAfterConstraint() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionAfterConstraintContext>();
}

CypherParser::KU_PropertyDefinitionAfterConstraintContext* CypherParser::KU_PropertyDefinitionsWithConstraintContext::kU_PropertyDefinitionAfterConstraint(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionAfterConstraintContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsWithConstraintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsWithConstraintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsWithConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitionsWithConstraint;
}


CypherParser::KU_PropertyDefinitionsWithConstraintContext* CypherParser::kU_PropertyDefinitionsWithConstraint() {
  KU_PropertyDefinitionsWithConstraintContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsWithConstraintContext>(_ctx, getState());
  enterRule(_localctx, 106, CypherParser::RuleKU_PropertyDefinitionsWithConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1176);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1169);
        kU_PropertyDefinitionBeforeConstraint();
        setState(1170);
        match(CypherParser::T__2);
        setState(1172);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1171);
          match(CypherParser::SP);
        } 
      }
      setState(1178);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx);
    }
    setState(1179);
    kU_PropertyDefinitionWithConstraint();
    setState(1190);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1181);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1180);
          match(CypherParser::SP);
        }
        setState(1183);
        match(CypherParser::T__2);
        setState(1185);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1184);
          match(CypherParser::SP);
        }
        setState(1187);
        kU_PropertyDefinitionAfterConstraint(); 
      }
      setState(1192);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DataTypeContext ------------------------------------------------------------------

CypherParser::KU_DataTypeContext::KU_DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DataTypeContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

CypherParser::KU_ColumnDefinitionsContext* CypherParser::KU_DataTypeContext::kU_ColumnDefinitions() {
  return getRuleContext<CypherParser::KU_ColumnDefinitionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DataTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::KU_DataTypeContext *> CypherParser::KU_DataTypeContext::kU_DataType() {
  return getRuleContexts<CypherParser::KU_DataTypeContext>();
}

CypherParser::KU_DataTypeContext* CypherParser::KU_DataTypeContext::kU_DataType(size_t i) {
  return getRuleContext<CypherParser::KU_DataTypeContext>(i);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::DECIMAL() {
  return getToken(CypherParser::DECIMAL, 0);
}

std::vector<CypherParser::OC_IntegerLiteralContext *> CypherParser::KU_DataTypeContext::oC_IntegerLiteral() {
  return getRuleContexts<CypherParser::OC_IntegerLiteralContext>();
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_DataTypeContext::oC_IntegerLiteral(size_t i) {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(i);
}

CypherParser::KU_ListIdentifiersContext* CypherParser::KU_DataTypeContext::kU_ListIdentifiers() {
  return getRuleContext<CypherParser::KU_ListIdentifiersContext>(0);
}


size_t CypherParser::KU_DataTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_DataType;
}



CypherParser::KU_DataTypeContext* CypherParser::kU_DataType() {
   return kU_DataType(0);
}

CypherParser::KU_DataTypeContext* CypherParser::kU_DataType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_DataTypeContext *_localctx = _tracker.createInstance<KU_DataTypeContext>(_ctx, parentState);
  CypherParser::KU_DataTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 108;
  enterRecursionRule(_localctx, 108, CypherParser::RuleKU_DataType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1267);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx)) {
    case 1: {
      setState(1194);
      oC_SymbolicName();
      break;
    }

    case 2: {
      setState(1195);
      match(CypherParser::UNION);
      setState(1197);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1196);
        match(CypherParser::SP);
      }
      setState(1199);
      match(CypherParser::T__1);
      setState(1201);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1200);
        match(CypherParser::SP);
      }
      setState(1203);
      kU_ColumnDefinitions();
      setState(1205);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1204);
        match(CypherParser::SP);
      }
      setState(1207);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      setState(1209);
      oC_SymbolicName();
      setState(1211);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1210);
        match(CypherParser::SP);
      }
      setState(1213);
      match(CypherParser::T__1);
      setState(1215);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1214);
        match(CypherParser::SP);
      }
      setState(1217);
      kU_ColumnDefinitions();
      setState(1219);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1218);
        match(CypherParser::SP);
      }
      setState(1221);
      match(CypherParser::T__3);
      break;
    }

    case 4: {
      setState(1223);
      oC_SymbolicName();
      setState(1225);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1224);
        match(CypherParser::SP);
      }
      setState(1227);
      match(CypherParser::T__1);
      setState(1229);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1228);
        match(CypherParser::SP);
      }
      setState(1231);
      kU_DataType(0);
      setState(1233);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1232);
        match(CypherParser::SP);
      }
      setState(1235);
      match(CypherParser::T__2);
      setState(1237);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1236);
        match(CypherParser::SP);
      }
      setState(1239);
      kU_DataType(0);
      setState(1241);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1240);
        match(CypherParser::SP);
      }
      setState(1243);
      match(CypherParser::T__3);
      break;
    }

    case 5: {
      setState(1245);
      match(CypherParser::DECIMAL);
      setState(1247);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1246);
        match(CypherParser::SP);
      }
      setState(1249);
      match(CypherParser::T__1);
      setState(1251);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1250);
        match(CypherParser::SP);
      }
      setState(1253);
      oC_IntegerLiteral();
      setState(1255);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1254);
        match(CypherParser::SP);
      }
      setState(1257);
      match(CypherParser::T__2);
      setState(1259);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1258);
        match(CypherParser::SP);
      }
      setState(1261);
      oC_IntegerLiteral();
      setState(1263);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1262);
        match(CypherParser::SP);
      }
      setState(1265);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1273);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<KU_DataTypeContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleKU_DataType);
        setState(1269);

        if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
        setState(1270);
        kU_ListIdentifiers(); 
      }
      setState(1275);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- KU_ListIdentifiersContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifiersContext::KU_ListIdentifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ListIdentifierContext *> CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier() {
  return getRuleContexts<CypherParser::KU_ListIdentifierContext>();
}

CypherParser::KU_ListIdentifierContext* CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier(size_t i) {
  return getRuleContext<CypherParser::KU_ListIdentifierContext>(i);
}


size_t CypherParser::KU_ListIdentifiersContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifiers;
}


CypherParser::KU_ListIdentifiersContext* CypherParser::kU_ListIdentifiers() {
  KU_ListIdentifiersContext *_localctx = _tracker.createInstance<KU_ListIdentifiersContext>(_ctx, getState());
  enterRule(_localctx, 110, CypherParser::RuleKU_ListIdentifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1276);
    kU_ListIdentifier();
    setState(1280);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1277);
        kU_ListIdentifier(); 
      }
      setState(1282);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListIdentifierContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifierContext::KU_ListIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_ListIdentifierContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::KU_ListIdentifierContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifier;
}


CypherParser::KU_ListIdentifierContext* CypherParser::kU_ListIdentifier() {
  KU_ListIdentifierContext *_localctx = _tracker.createInstance<KU_ListIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 112, CypherParser::RuleKU_ListIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1283);
    match(CypherParser::T__6);
    setState(1285);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DecimalInteger) {
      setState(1284);
      oC_IntegerLiteral();
    }
    setState(1287);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnyCypherOptionContext ------------------------------------------------------------------

CypherParser::OC_AnyCypherOptionContext::OC_AnyCypherOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExplainContext* CypherParser::OC_AnyCypherOptionContext::oC_Explain() {
  return getRuleContext<CypherParser::OC_ExplainContext>(0);
}

CypherParser::OC_ProfileContext* CypherParser::OC_AnyCypherOptionContext::oC_Profile() {
  return getRuleContext<CypherParser::OC_ProfileContext>(0);
}


size_t CypherParser::OC_AnyCypherOptionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnyCypherOption;
}


CypherParser::OC_AnyCypherOptionContext* CypherParser::oC_AnyCypherOption() {
  OC_AnyCypherOptionContext *_localctx = _tracker.createInstance<OC_AnyCypherOptionContext>(_ctx, getState());
  enterRule(_localctx, 114, CypherParser::RuleOC_AnyCypherOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1291);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::EXPLAIN: {
        enterOuterAlt(_localctx, 1);
        setState(1289);
        oC_Explain();
        break;
      }

      case CypherParser::PROFILE: {
        enterOuterAlt(_localctx, 2);
        setState(1290);
        oC_Profile();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplainContext ------------------------------------------------------------------

CypherParser::OC_ExplainContext::OC_ExplainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExplainContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}


size_t CypherParser::OC_ExplainContext::getRuleIndex() const {
  return CypherParser::RuleOC_Explain;
}


CypherParser::OC_ExplainContext* CypherParser::oC_Explain() {
  OC_ExplainContext *_localctx = _tracker.createInstance<OC_ExplainContext>(_ctx, getState());
  enterRule(_localctx, 116, CypherParser::RuleOC_Explain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1293);
    match(CypherParser::EXPLAIN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProfileContext ------------------------------------------------------------------

CypherParser::OC_ProfileContext::OC_ProfileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProfileContext::PROFILE() {
  return getToken(CypherParser::PROFILE, 0);
}


size_t CypherParser::OC_ProfileContext::getRuleIndex() const {
  return CypherParser::RuleOC_Profile;
}


CypherParser::OC_ProfileContext* CypherParser::oC_Profile() {
  OC_ProfileContext *_localctx = _tracker.createInstance<OC_ProfileContext>(_ctx, getState());
  enterRule(_localctx, 118, CypherParser::RuleOC_Profile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1295);
    match(CypherParser::PROFILE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_TransactionContext ------------------------------------------------------------------

CypherParser::KU_TransactionContext::KU_TransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_TransactionContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_TransactionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ONLY() {
  return getToken(CypherParser::ONLY, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::CHECKPOINT() {
  return getToken(CypherParser::CHECKPOINT, 0);
}


size_t CypherParser::KU_TransactionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Transaction;
}


CypherParser::KU_TransactionContext* CypherParser::kU_Transaction() {
  KU_TransactionContext *_localctx = _tracker.createInstance<KU_TransactionContext>(_ctx, getState());
  enterRule(_localctx, 120, CypherParser::RuleKU_Transaction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1310);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1297);
      match(CypherParser::BEGIN);
      setState(1298);
      match(CypherParser::SP);
      setState(1299);
      match(CypherParser::TRANSACTION);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1300);
      match(CypherParser::BEGIN);
      setState(1301);
      match(CypherParser::SP);
      setState(1302);
      match(CypherParser::TRANSACTION);
      setState(1303);
      match(CypherParser::SP);
      setState(1304);
      match(CypherParser::READ);
      setState(1305);
      match(CypherParser::SP);
      setState(1306);
      match(CypherParser::ONLY);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1307);
      match(CypherParser::COMMIT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1308);
      match(CypherParser::ROLLBACK);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1309);
      match(CypherParser::CHECKPOINT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExtensionContext ------------------------------------------------------------------

CypherParser::KU_ExtensionContext::KU_ExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LoadExtensionContext* CypherParser::KU_ExtensionContext::kU_LoadExtension() {
  return getRuleContext<CypherParser::KU_LoadExtensionContext>(0);
}

CypherParser::KU_InstallExtensionContext* CypherParser::KU_ExtensionContext::kU_InstallExtension() {
  return getRuleContext<CypherParser::KU_InstallExtensionContext>(0);
}


size_t CypherParser::KU_ExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Extension;
}


CypherParser::KU_ExtensionContext* CypherParser::kU_Extension() {
  KU_ExtensionContext *_localctx = _tracker.createInstance<KU_ExtensionContext>(_ctx, getState());
  enterRule(_localctx, 122, CypherParser::RuleKU_Extension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1314);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 1);
        setState(1312);
        kU_LoadExtension();
        break;
      }

      case CypherParser::INSTALL: {
        enterOuterAlt(_localctx, 2);
        setState(1313);
        kU_InstallExtension();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadExtensionContext ------------------------------------------------------------------

CypherParser::KU_LoadExtensionContext::KU_LoadExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadExtensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_LoadExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_LoadExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadExtension;
}


CypherParser::KU_LoadExtensionContext* CypherParser::kU_LoadExtension() {
  KU_LoadExtensionContext *_localctx = _tracker.createInstance<KU_LoadExtensionContext>(_ctx, getState());
  enterRule(_localctx, 124, CypherParser::RuleKU_LoadExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1316);
    match(CypherParser::LOAD);
    setState(1317);
    match(CypherParser::SP);
    setState(1318);
    match(CypherParser::EXTENSION);
    setState(1319);
    match(CypherParser::SP);
    setState(1322);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::StringLiteral: {
        setState(1320);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1321);
        oC_Variable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InstallExtensionContext ------------------------------------------------------------------

CypherParser::KU_InstallExtensionContext::KU_InstallExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::INSTALL() {
  return getToken(CypherParser::INSTALL, 0);
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_InstallExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_InstallExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_InstallExtension;
}


CypherParser::KU_InstallExtensionContext* CypherParser::kU_InstallExtension() {
  KU_InstallExtensionContext *_localctx = _tracker.createInstance<KU_InstallExtensionContext>(_ctx, getState());
  enterRule(_localctx, 126, CypherParser::RuleKU_InstallExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1324);
    match(CypherParser::INSTALL);
    setState(1325);
    match(CypherParser::SP);
    setState(1326);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

CypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RegularQueryContext* CypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<CypherParser::OC_RegularQueryContext>(0);
}

CypherParser::KU_ProjectGraphContext* CypherParser::OC_QueryContext::kU_ProjectGraph() {
  return getRuleContext<CypherParser::KU_ProjectGraphContext>(0);
}

tree::TerminalNode* CypherParser::OC_QueryContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_QueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_Query;
}


CypherParser::OC_QueryContext* CypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
  enterRule(_localctx, 128, CypherParser::RuleOC_Query);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1332);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
    case 1: {
      setState(1328);
      kU_ProjectGraph();
      setState(1330);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1329);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(1334);
    oC_RegularQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ProjectGraphContext ------------------------------------------------------------------

CypherParser::KU_ProjectGraphContext::KU_ProjectGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ProjectGraphContext::PROJECT() {
  return getToken(CypherParser::PROJECT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ProjectGraphContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ProjectGraphContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ProjectGraphContext::GRAPH() {
  return getToken(CypherParser::GRAPH, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ProjectGraphContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_GraphProjectionTableItemsContext* CypherParser::KU_ProjectGraphContext::kU_GraphProjectionTableItems() {
  return getRuleContext<CypherParser::KU_GraphProjectionTableItemsContext>(0);
}


size_t CypherParser::KU_ProjectGraphContext::getRuleIndex() const {
  return CypherParser::RuleKU_ProjectGraph;
}


CypherParser::KU_ProjectGraphContext* CypherParser::kU_ProjectGraph() {
  KU_ProjectGraphContext *_localctx = _tracker.createInstance<KU_ProjectGraphContext>(_ctx, getState());
  enterRule(_localctx, 130, CypherParser::RuleKU_ProjectGraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1336);
    match(CypherParser::PROJECT);
    setState(1337);
    match(CypherParser::SP);
    setState(1338);
    match(CypherParser::GRAPH);
    setState(1339);
    match(CypherParser::SP);
    setState(1340);
    oC_SchemaName();
    setState(1342);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1341);
      match(CypherParser::SP);
    }
    setState(1344);
    match(CypherParser::T__1);
    setState(1346);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1345);
      match(CypherParser::SP);
    }
    setState(1348);
    kU_GraphProjectionTableItems();
    setState(1350);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1349);
      match(CypherParser::SP);
    }
    setState(1352);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_GraphProjectionTableItemsContext ------------------------------------------------------------------

CypherParser::KU_GraphProjectionTableItemsContext::KU_GraphProjectionTableItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_GraphProjectionTableItemContext *> CypherParser::KU_GraphProjectionTableItemsContext::kU_GraphProjectionTableItem() {
  return getRuleContexts<CypherParser::KU_GraphProjectionTableItemContext>();
}

CypherParser::KU_GraphProjectionTableItemContext* CypherParser::KU_GraphProjectionTableItemsContext::kU_GraphProjectionTableItem(size_t i) {
  return getRuleContext<CypherParser::KU_GraphProjectionTableItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_GraphProjectionTableItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_GraphProjectionTableItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_GraphProjectionTableItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_GraphProjectionTableItems;
}


CypherParser::KU_GraphProjectionTableItemsContext* CypherParser::kU_GraphProjectionTableItems() {
  KU_GraphProjectionTableItemsContext *_localctx = _tracker.createInstance<KU_GraphProjectionTableItemsContext>(_ctx, getState());
  enterRule(_localctx, 132, CypherParser::RuleKU_GraphProjectionTableItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1354);
    kU_GraphProjectionTableItem();
    setState(1365);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1356);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1355);
          match(CypherParser::SP);
        }
        setState(1358);
        match(CypherParser::T__2);
        setState(1360);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1359);
          match(CypherParser::SP);
        }
        setState(1362);
        kU_GraphProjectionTableItem(); 
      }
      setState(1367);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

CypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}

std::vector<CypherParser::OC_UnionContext *> CypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<CypherParser::OC_UnionContext>();
}

CypherParser::OC_UnionContext* CypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<CypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RegularQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_ReturnContext *> CypherParser::OC_RegularQueryContext::oC_Return() {
  return getRuleContexts<CypherParser::OC_ReturnContext>();
}

CypherParser::OC_ReturnContext* CypherParser::OC_RegularQueryContext::oC_Return(size_t i) {
  return getRuleContext<CypherParser::OC_ReturnContext>(i);
}


size_t CypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularQuery;
}


CypherParser::OC_RegularQueryContext* CypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
  enterRule(_localctx, 134, CypherParser::RuleOC_RegularQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1389);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1368);
      oC_SingleQuery();
      setState(1375);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1370);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1369);
            match(CypherParser::SP);
          }
          setState(1372);
          oC_Union(); 
        }
        setState(1377);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1382); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1378);
                oC_Return();
                setState(1380);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1379);
                  match(CypherParser::SP);
                }
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1384); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1386);
      oC_SingleQuery();
       notifyReturnNotAtEnd(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

CypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnionContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnionContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}


size_t CypherParser::OC_UnionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Union;
}


CypherParser::OC_UnionContext* CypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
  enterRule(_localctx, 136, CypherParser::RuleOC_Union);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1403);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1391);
      match(CypherParser::UNION);
      setState(1392);
      match(CypherParser::SP);
      setState(1393);
      match(CypherParser::ALL);
      setState(1395);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1394);
        match(CypherParser::SP);
      }
      setState(1397);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1398);
      match(CypherParser::UNION);
      setState(1400);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1399);
        match(CypherParser::SP);
      }
      setState(1402);
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

CypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

CypherParser::OC_MultiPartQueryContext* CypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<CypherParser::OC_MultiPartQueryContext>(0);
}


size_t CypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SingleQuery;
}


CypherParser::OC_SingleQueryContext* CypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 138, CypherParser::RuleOC_SingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1407);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1405);
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1406);
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

CypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ReturnContext* CypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<CypherParser::OC_ReturnContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}


size_t CypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SinglePartQuery;
}


CypherParser::OC_SinglePartQueryContext* CypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
  enterRule(_localctx, 140, CypherParser::RuleOC_SinglePartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1454);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1415);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::CALL || ((((_la - 102) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 102)) & 549756354565) != 0)) {
        setState(1409);
        oC_ReadingClause();
        setState(1411);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1410);
          match(CypherParser::SP);
        }
        setState(1417);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1418);
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1425);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::CALL || ((((_la - 102) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 102)) & 549756354565) != 0)) {
        setState(1419);
        oC_ReadingClause();
        setState(1421);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1420);
          match(CypherParser::SP);
        }
        setState(1427);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1428);
      oC_UpdatingClause();
      setState(1435);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1430);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1429);
            match(CypherParser::SP);
          }
          setState(1432);
          oC_UpdatingClause(); 
        }
        setState(1437);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx);
      }
      setState(1442);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx)) {
      case 1: {
        setState(1439);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1438);
          match(CypherParser::SP);
        }
        setState(1441);
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1448); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1444);
        oC_ReadingClause();
        setState(1446);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
        case 1: {
          setState(1445);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(1450); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == CypherParser::CALL || ((((_la - 102) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 102)) & 549756354565) != 0));
       notifyQueryNotConcludeWithReturn(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

CypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<CypherParser::KU_QueryPartContext *> CypherParser::OC_MultiPartQueryContext::kU_QueryPart() {
  return getRuleContexts<CypherParser::KU_QueryPartContext>();
}

CypherParser::KU_QueryPartContext* CypherParser::OC_MultiPartQueryContext::kU_QueryPart(size_t i) {
  return getRuleContext<CypherParser::KU_QueryPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiPartQuery;
}


CypherParser::OC_MultiPartQueryContext* CypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
  enterRule(_localctx, 142, CypherParser::RuleOC_MultiPartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1460); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1456);
              kU_QueryPart();
              setState(1458);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(1457);
                match(CypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1462); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1464);
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_QueryPartContext ------------------------------------------------------------------

CypherParser::KU_QueryPartContext::KU_QueryPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_WithContext* CypherParser::KU_QueryPartContext::oC_With() {
  return getRuleContext<CypherParser::OC_WithContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::KU_QueryPartContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::KU_QueryPartContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::KU_QueryPartContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::KU_QueryPartContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_QueryPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_QueryPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_QueryPartContext::getRuleIndex() const {
  return CypherParser::RuleKU_QueryPart;
}


CypherParser::KU_QueryPartContext* CypherParser::kU_QueryPart() {
  KU_QueryPartContext *_localctx = _tracker.createInstance<KU_QueryPartContext>(_ctx, getState());
  enterRule(_localctx, 144, CypherParser::RuleKU_QueryPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1472);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::CALL || ((((_la - 102) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 102)) & 549756354565) != 0)) {
      setState(1466);
      oC_ReadingClause();
      setState(1468);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1467);
        match(CypherParser::SP);
      }
      setState(1474);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1481);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 4611686293305295137) != 0)) {
      setState(1475);
      oC_UpdatingClause();
      setState(1477);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1476);
        match(CypherParser::SP);
      }
      setState(1483);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1484);
    oC_With();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

CypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_CreateContext* CypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<CypherParser::OC_CreateContext>(0);
}

CypherParser::OC_MergeContext* CypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<CypherParser::OC_MergeContext>(0);
}

CypherParser::OC_SetContext* CypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

CypherParser::OC_DeleteContext* CypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<CypherParser::OC_DeleteContext>(0);
}


size_t CypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpdatingClause;
}


CypherParser::OC_UpdatingClauseContext* CypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
  enterRule(_localctx, 146, CypherParser::RuleOC_UpdatingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1490);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
        setState(1486);
        oC_Create();
        break;
      }

      case CypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
        setState(1487);
        oC_Merge();
        break;
      }

      case CypherParser::SET: {
        enterOuterAlt(_localctx, 3);
        setState(1488);
        oC_Set();
        break;
      }

      case CypherParser::DELETE:
      case CypherParser::DETACH: {
        enterOuterAlt(_localctx, 4);
        setState(1489);
        oC_Delete();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

CypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_MatchContext* CypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<CypherParser::OC_MatchContext>(0);
}

CypherParser::OC_UnwindContext* CypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<CypherParser::OC_UnwindContext>(0);
}

CypherParser::KU_InQueryCallContext* CypherParser::OC_ReadingClauseContext::kU_InQueryCall() {
  return getRuleContext<CypherParser::KU_InQueryCallContext>(0);
}

CypherParser::KU_LoadFromContext* CypherParser::OC_ReadingClauseContext::kU_LoadFrom() {
  return getRuleContext<CypherParser::KU_LoadFromContext>(0);
}


size_t CypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_ReadingClause;
}


CypherParser::OC_ReadingClauseContext* CypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 148, CypherParser::RuleOC_ReadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1496);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::MATCH:
      case CypherParser::OPTIONAL: {
        enterOuterAlt(_localctx, 1);
        setState(1492);
        oC_Match();
        break;
      }

      case CypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
        setState(1493);
        oC_Unwind();
        break;
      }

      case CypherParser::CALL:
      case CypherParser::PROJECT: {
        enterOuterAlt(_localctx, 3);
        setState(1494);
        kU_InQueryCall();
        break;
      }

      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 4);
        setState(1495);
        kU_LoadFrom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadFromContext ------------------------------------------------------------------

CypherParser::KU_LoadFromContext::KU_LoadFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_LoadFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::HEADERS() {
  return getToken(CypherParser::HEADERS, 0);
}

CypherParser::KU_ColumnDefinitionsContext* CypherParser::KU_LoadFromContext::kU_ColumnDefinitions() {
  return getRuleContext<CypherParser::KU_ColumnDefinitionsContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_LoadFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_LoadFromContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_LoadFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadFrom;
}


CypherParser::KU_LoadFromContext* CypherParser::kU_LoadFrom() {
  KU_LoadFromContext *_localctx = _tracker.createInstance<KU_LoadFromContext>(_ctx, getState());
  enterRule(_localctx, 150, CypherParser::RuleKU_LoadFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1498);
    match(CypherParser::LOAD);
    setState(1516);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx)) {
    case 1: {
      setState(1499);
      match(CypherParser::SP);
      setState(1500);
      match(CypherParser::WITH);
      setState(1501);
      match(CypherParser::SP);
      setState(1502);
      match(CypherParser::HEADERS);
      setState(1504);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1503);
        match(CypherParser::SP);
      }
      setState(1506);
      match(CypherParser::T__1);
      setState(1508);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1507);
        match(CypherParser::SP);
      }
      setState(1510);
      kU_ColumnDefinitions();
      setState(1512);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1511);
        match(CypherParser::SP);
      }
      setState(1514);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    setState(1518);
    match(CypherParser::SP);
    setState(1519);
    match(CypherParser::FROM);
    setState(1520);
    match(CypherParser::SP);
    setState(1521);
    kU_ScanSource();
    setState(1526);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx)) {
    case 1: {
      setState(1523);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1522);
        match(CypherParser::SP);
      }
      setState(1525);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
    setState(1532);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
    case 1: {
      setState(1529);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1528);
        match(CypherParser::SP);
      }
      setState(1531);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InQueryCallContext ------------------------------------------------------------------

CypherParser::KU_InQueryCallContext::KU_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_InQueryCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::KU_InQueryCallContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::KU_ProjectGraphContext* CypherParser::KU_InQueryCallContext::kU_ProjectGraph() {
  return getRuleContext<CypherParser::KU_ProjectGraphContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_InQueryCallContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_InQueryCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_InQueryCall;
}


CypherParser::KU_InQueryCallContext* CypherParser::kU_InQueryCall() {
  KU_InQueryCallContext *_localctx = _tracker.createInstance<KU_InQueryCallContext>(_ctx, getState());
  enterRule(_localctx, 152, CypherParser::RuleKU_InQueryCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1538);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::PROJECT) {
      setState(1534);
      kU_ProjectGraph();
      setState(1536);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1535);
        match(CypherParser::SP);
      }
    }
    setState(1540);
    match(CypherParser::CALL);
    setState(1541);
    match(CypherParser::SP);
    setState(1542);
    oC_FunctionInvocation();
    setState(1547);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx)) {
    case 1: {
      setState(1544);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1543);
        match(CypherParser::SP);
      }
      setState(1546);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_GraphProjectionTableItemContext ------------------------------------------------------------------

CypherParser::KU_GraphProjectionTableItemContext::KU_GraphProjectionTableItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_GraphProjectionTableItemContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_GraphProjectionColumnItemsContext* CypherParser::KU_GraphProjectionTableItemContext::kU_GraphProjectionColumnItems() {
  return getRuleContext<CypherParser::KU_GraphProjectionColumnItemsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_GraphProjectionTableItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_GraphProjectionTableItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_GraphProjectionTableItemContext::getRuleIndex() const {
  return CypherParser::RuleKU_GraphProjectionTableItem;
}


CypherParser::KU_GraphProjectionTableItemContext* CypherParser::kU_GraphProjectionTableItem() {
  KU_GraphProjectionTableItemContext *_localctx = _tracker.createInstance<KU_GraphProjectionTableItemContext>(_ctx, getState());
  enterRule(_localctx, 154, CypherParser::RuleKU_GraphProjectionTableItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1549);
    oC_SchemaName();
    setState(1563);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx)) {
    case 1: {
      setState(1551);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1550);
        match(CypherParser::SP);
      }
      setState(1553);
      match(CypherParser::T__8);
      setState(1555);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1554);
        match(CypherParser::SP);
      }
      setState(1557);
      kU_GraphProjectionColumnItems();
      setState(1559);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1558);
        match(CypherParser::SP);
      }
      setState(1561);
      match(CypherParser::T__9);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_GraphProjectionColumnItemsContext ------------------------------------------------------------------

CypherParser::KU_GraphProjectionColumnItemsContext::KU_GraphProjectionColumnItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_GraphProjectionColumnItemContext *> CypherParser::KU_GraphProjectionColumnItemsContext::kU_GraphProjectionColumnItem() {
  return getRuleContexts<CypherParser::KU_GraphProjectionColumnItemContext>();
}

CypherParser::KU_GraphProjectionColumnItemContext* CypherParser::KU_GraphProjectionColumnItemsContext::kU_GraphProjectionColumnItem(size_t i) {
  return getRuleContext<CypherParser::KU_GraphProjectionColumnItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_GraphProjectionColumnItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_GraphProjectionColumnItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_GraphProjectionColumnItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_GraphProjectionColumnItems;
}


CypherParser::KU_GraphProjectionColumnItemsContext* CypherParser::kU_GraphProjectionColumnItems() {
  KU_GraphProjectionColumnItemsContext *_localctx = _tracker.createInstance<KU_GraphProjectionColumnItemsContext>(_ctx, getState());
  enterRule(_localctx, 156, CypherParser::RuleKU_GraphProjectionColumnItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1565);
    kU_GraphProjectionColumnItem();
    setState(1576);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1567);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1566);
          match(CypherParser::SP);
        }
        setState(1569);
        match(CypherParser::T__2);
        setState(1571);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1570);
          match(CypherParser::SP);
        }
        setState(1573);
        kU_GraphProjectionColumnItem(); 
      }
      setState(1578);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_GraphProjectionColumnItemContext ------------------------------------------------------------------

CypherParser::KU_GraphProjectionColumnItemContext::KU_GraphProjectionColumnItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_GraphProjectionColumnItemContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_GraphProjectionColumnItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_GraphProjectionColumnItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::KU_DefaultContext* CypherParser::KU_GraphProjectionColumnItemContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_GraphProjectionColumnItemContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_GraphProjectionColumnItemContext::getRuleIndex() const {
  return CypherParser::RuleKU_GraphProjectionColumnItem;
}


CypherParser::KU_GraphProjectionColumnItemContext* CypherParser::kU_GraphProjectionColumnItem() {
  KU_GraphProjectionColumnItemContext *_localctx = _tracker.createInstance<KU_GraphProjectionColumnItemContext>(_ctx, getState());
  enterRule(_localctx, 158, CypherParser::RuleKU_GraphProjectionColumnItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1579);
    oC_PropertyKeyName();
    setState(1582);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx)) {
    case 1: {
      setState(1580);
      match(CypherParser::SP);
      setState(1581);
      kU_Default();
      break;
    }

    default:
      break;
    }
    setState(1586);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 223, _ctx)) {
    case 1: {
      setState(1584);
      match(CypherParser::SP);
      setState(1585);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

CypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MatchContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_MatchContext::OPTIONAL() {
  return getToken(CypherParser::OPTIONAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MatchContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_HintContext* CypherParser::OC_MatchContext::kU_Hint() {
  return getRuleContext<CypherParser::KU_HintContext>(0);
}


size_t CypherParser::OC_MatchContext::getRuleIndex() const {
  return CypherParser::RuleOC_Match;
}


CypherParser::OC_MatchContext* CypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
  enterRule(_localctx, 160, CypherParser::RuleOC_Match);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1590);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::OPTIONAL) {
      setState(1588);
      match(CypherParser::OPTIONAL);
      setState(1589);
      match(CypherParser::SP);
    }
    setState(1592);
    match(CypherParser::MATCH);
    setState(1594);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1593);
      match(CypherParser::SP);
    }
    setState(1596);
    oC_Pattern();
    setState(1599);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx)) {
    case 1: {
      setState(1597);
      match(CypherParser::SP);
      setState(1598);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(1603);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx)) {
    case 1: {
      setState(1601);
      match(CypherParser::SP);
      setState(1602);
      kU_Hint();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_HintContext ------------------------------------------------------------------

CypherParser::KU_HintContext::KU_HintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_HintContext::HINT() {
  return getToken(CypherParser::HINT, 0);
}

tree::TerminalNode* CypherParser::KU_HintContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_JoinNodeContext* CypherParser::KU_HintContext::kU_JoinNode() {
  return getRuleContext<CypherParser::KU_JoinNodeContext>(0);
}


size_t CypherParser::KU_HintContext::getRuleIndex() const {
  return CypherParser::RuleKU_Hint;
}


CypherParser::KU_HintContext* CypherParser::kU_Hint() {
  KU_HintContext *_localctx = _tracker.createInstance<KU_HintContext>(_ctx, getState());
  enterRule(_localctx, 162, CypherParser::RuleKU_Hint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1605);
    match(CypherParser::HINT);
    setState(1606);
    match(CypherParser::SP);
    setState(1607);
    kU_JoinNode(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_JoinNodeContext ------------------------------------------------------------------

CypherParser::KU_JoinNodeContext::KU_JoinNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_JoinNodeContext *> CypherParser::KU_JoinNodeContext::kU_JoinNode() {
  return getRuleContexts<CypherParser::KU_JoinNodeContext>();
}

CypherParser::KU_JoinNodeContext* CypherParser::KU_JoinNodeContext::kU_JoinNode(size_t i) {
  return getRuleContext<CypherParser::KU_JoinNodeContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_JoinNodeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_JoinNodeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_JoinNodeContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_JoinNodeContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_JoinNodeContext::JOIN() {
  return getToken(CypherParser::JOIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_JoinNodeContext::MULTI_JOIN() {
  return getTokens(CypherParser::MULTI_JOIN);
}

tree::TerminalNode* CypherParser::KU_JoinNodeContext::MULTI_JOIN(size_t i) {
  return getToken(CypherParser::MULTI_JOIN, i);
}


size_t CypherParser::KU_JoinNodeContext::getRuleIndex() const {
  return CypherParser::RuleKU_JoinNode;
}



CypherParser::KU_JoinNodeContext* CypherParser::kU_JoinNode() {
   return kU_JoinNode(0);
}

CypherParser::KU_JoinNodeContext* CypherParser::kU_JoinNode(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_JoinNodeContext *_localctx = _tracker.createInstance<KU_JoinNodeContext>(_ctx, parentState);
  CypherParser::KU_JoinNodeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 164;
  enterRecursionRule(_localctx, 164, CypherParser::RuleKU_JoinNode, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1621);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__1: {
        setState(1610);
        match(CypherParser::T__1);
        setState(1612);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1611);
          match(CypherParser::SP);
        }
        setState(1614);
        kU_JoinNode(0);
        setState(1616);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1615);
          match(CypherParser::SP);
        }
        setState(1618);
        match(CypherParser::T__3);
        break;
      }

      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1620);
        oC_SchemaName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(1639);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1637);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<KU_JoinNodeContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleKU_JoinNode);
          setState(1623);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(1624);
          match(CypherParser::SP);
          setState(1625);
          match(CypherParser::JOIN);
          setState(1626);
          match(CypherParser::SP);
          setState(1627);
          kU_JoinNode(5);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<KU_JoinNodeContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleKU_JoinNode);
          setState(1628);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1633); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(1629);
                    match(CypherParser::SP);
                    setState(1630);
                    match(CypherParser::MULTI_JOIN);
                    setState(1631);
                    match(CypherParser::SP);
                    setState(1632);
                    oC_SchemaName();
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(1635); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        default:
          break;
        } 
      }
      setState(1641);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

CypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnwindContext::UNWIND() {
  return getToken(CypherParser::UNWIND, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnwindContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_UnwindContext::getRuleIndex() const {
  return CypherParser::RuleOC_Unwind;
}


CypherParser::OC_UnwindContext* CypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
  enterRule(_localctx, 166, CypherParser::RuleOC_Unwind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1642);
    match(CypherParser::UNWIND);
    setState(1644);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1643);
      match(CypherParser::SP);
    }
    setState(1646);
    oC_Expression();
    setState(1647);
    match(CypherParser::SP);
    setState(1648);
    match(CypherParser::AS);
    setState(1649);
    match(CypherParser::SP);
    setState(1650);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

CypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CreateContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_CreateContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_CreateContext::getRuleIndex() const {
  return CypherParser::RuleOC_Create;
}


CypherParser::OC_CreateContext* CypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
  enterRule(_localctx, 168, CypherParser::RuleOC_Create);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1652);
    match(CypherParser::CREATE);
    setState(1654);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1653);
      match(CypherParser::SP);
    }
    setState(1656);
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

CypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MergeContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_MergeActionContext *> CypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<CypherParser::OC_MergeActionContext>();
}

CypherParser::OC_MergeActionContext* CypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<CypherParser::OC_MergeActionContext>(i);
}


size_t CypherParser::OC_MergeContext::getRuleIndex() const {
  return CypherParser::RuleOC_Merge;
}


CypherParser::OC_MergeContext* CypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
  enterRule(_localctx, 170, CypherParser::RuleOC_Merge);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1658);
    match(CypherParser::MERGE);
    setState(1660);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1659);
      match(CypherParser::SP);
    }
    setState(1662);
    oC_Pattern();
    setState(1667);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1663);
        match(CypherParser::SP);
        setState(1664);
        oC_MergeAction(); 
      }
      setState(1669);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

CypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::ON() {
  return getToken(CypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeActionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_SetContext* CypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}


size_t CypherParser::OC_MergeActionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MergeAction;
}


CypherParser::OC_MergeActionContext* CypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
  enterRule(_localctx, 172, CypherParser::RuleOC_MergeAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1680);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1670);
      match(CypherParser::ON);
      setState(1671);
      match(CypherParser::SP);
      setState(1672);
      match(CypherParser::MATCH);
      setState(1673);
      match(CypherParser::SP);
      setState(1674);
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1675);
      match(CypherParser::ON);
      setState(1676);
      match(CypherParser::SP);
      setState(1677);
      match(CypherParser::CREATE);
      setState(1678);
      match(CypherParser::SP);
      setState(1679);
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

CypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SetContext::SET() {
  return getToken(CypherParser::SET, 0);
}

std::vector<CypherParser::OC_SetItemContext *> CypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<CypherParser::OC_SetItemContext>();
}

CypherParser::OC_SetItemContext* CypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<CypherParser::OC_SetItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetContext::getRuleIndex() const {
  return CypherParser::RuleOC_Set;
}


CypherParser::OC_SetContext* CypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
  enterRule(_localctx, 174, CypherParser::RuleOC_Set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1682);
    match(CypherParser::SET);
    setState(1684);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1683);
      match(CypherParser::SP);
    }
    setState(1686);
    oC_SetItem();
    setState(1697);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 242, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1688);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1687);
          match(CypherParser::SP);
        }
        setState(1690);
        match(CypherParser::T__2);
        setState(1692);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1691);
          match(CypherParser::SP);
        }
        setState(1694);
        oC_SetItem(); 
      }
      setState(1699);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 242, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

CypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyExpressionContext* CypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<CypherParser::OC_PropertyExpressionContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SetItem;
}


CypherParser::OC_SetItemContext* CypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
  enterRule(_localctx, 176, CypherParser::RuleOC_SetItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1700);
    oC_PropertyExpression();
    setState(1702);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1701);
      match(CypherParser::SP);
    }
    setState(1704);
    match(CypherParser::T__5);
    setState(1706);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1705);
      match(CypherParser::SP);
    }
    setState(1708);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

CypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_DeleteContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_DeleteContext::getRuleIndex() const {
  return CypherParser::RuleOC_Delete;
}


CypherParser::OC_DeleteContext* CypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
  enterRule(_localctx, 178, CypherParser::RuleOC_Delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1712);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DETACH) {
      setState(1710);
      match(CypherParser::DETACH);
      setState(1711);
      match(CypherParser::SP);
    }
    setState(1714);
    match(CypherParser::DELETE);
    setState(1716);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1715);
      match(CypherParser::SP);
    }
    setState(1718);
    oC_Expression();
    setState(1729);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 249, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1720);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1719);
          match(CypherParser::SP);
        }
        setState(1722);
        match(CypherParser::T__2);
        setState(1724);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1723);
          match(CypherParser::SP);
        }
        setState(1726);
        oC_Expression(); 
      }
      setState(1731);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 249, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

CypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_WithContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_WithContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_WithContext::getRuleIndex() const {
  return CypherParser::RuleOC_With;
}


CypherParser::OC_WithContext* CypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
  enterRule(_localctx, 180, CypherParser::RuleOC_With);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1732);
    match(CypherParser::WITH);
    setState(1733);
    oC_ProjectionBody();
    setState(1738);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx)) {
    case 1: {
      setState(1735);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1734);
        match(CypherParser::SP);
      }
      setState(1737);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

CypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ReturnContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_ReturnContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}


size_t CypherParser::OC_ReturnContext::getRuleIndex() const {
  return CypherParser::RuleOC_Return;
}


CypherParser::OC_ReturnContext* CypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
  enterRule(_localctx, 182, CypherParser::RuleOC_Return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1740);
    match(CypherParser::RETURN);
    setState(1741);
    oC_ProjectionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionBodyContext ------------------------------------------------------------------

CypherParser::OC_ProjectionBodyContext::OC_ProjectionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionBodyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::OC_ProjectionBodyContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

CypherParser::OC_OrderContext* CypherParser::OC_ProjectionBodyContext::oC_Order() {
  return getRuleContext<CypherParser::OC_OrderContext>(0);
}

CypherParser::OC_SkipContext* CypherParser::OC_ProjectionBodyContext::oC_Skip() {
  return getRuleContext<CypherParser::OC_SkipContext>(0);
}

CypherParser::OC_LimitContext* CypherParser::OC_ProjectionBodyContext::oC_Limit() {
  return getRuleContext<CypherParser::OC_LimitContext>(0);
}


size_t CypherParser::OC_ProjectionBodyContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionBody;
}


CypherParser::OC_ProjectionBodyContext* CypherParser::oC_ProjectionBody() {
  OC_ProjectionBodyContext *_localctx = _tracker.createInstance<OC_ProjectionBodyContext>(_ctx, getState());
  enterRule(_localctx, 184, CypherParser::RuleOC_ProjectionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1747);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 253, _ctx)) {
    case 1: {
      setState(1744);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1743);
        match(CypherParser::SP);
      }
      setState(1746);
      match(CypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(1749);
    match(CypherParser::SP);
    setState(1750);
    oC_ProjectionItems();
    setState(1753);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx)) {
    case 1: {
      setState(1751);
      match(CypherParser::SP);
      setState(1752);
      oC_Order();
      break;
    }

    default:
      break;
    }
    setState(1757);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx)) {
    case 1: {
      setState(1755);
      match(CypherParser::SP);
      setState(1756);
      oC_Skip();
      break;
    }

    default:
      break;
    }
    setState(1761);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx)) {
    case 1: {
      setState(1759);
      match(CypherParser::SP);
      setState(1760);
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemsContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemsContext::OC_ProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<CypherParser::OC_ProjectionItemContext *> CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem() {
  return getRuleContexts<CypherParser::OC_ProjectionItemContext>();
}

CypherParser::OC_ProjectionItemContext* CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem(size_t i) {
  return getRuleContext<CypherParser::OC_ProjectionItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItems;
}


CypherParser::OC_ProjectionItemsContext* CypherParser::oC_ProjectionItems() {
  OC_ProjectionItemsContext *_localctx = _tracker.createInstance<OC_ProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 186, CypherParser::RuleOC_ProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1791);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1763);
        match(CypherParser::STAR);
        setState(1774);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1765);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1764);
              match(CypherParser::SP);
            }
            setState(1767);
            match(CypherParser::T__2);
            setState(1769);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1768);
              match(CypherParser::SP);
            }
            setState(1771);
            oC_ProjectionItem(); 
          }
          setState(1776);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx);
        }
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__6:
      case CypherParser::T__8:
      case CypherParser::T__25:
      case CypherParser::ANY:
      case CypherParser::ADD:
      case CypherParser::ALL:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CASE:
      case CypherParser::CAST:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXISTS:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::FALSE:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::NOT:
      case CypherParser::NONE:
      case CypherParser::NULL_:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TRUE:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::SINGLE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::MINUS:
      case CypherParser::StringLiteral:
      case CypherParser::DecimalInteger:
      case CypherParser::HexLetter:
      case CypherParser::RegularDecimalReal:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(1777);
        oC_ProjectionItem();
        setState(1788);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 262, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1779);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1778);
              match(CypherParser::SP);
            }
            setState(1781);
            match(CypherParser::T__2);
            setState(1783);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1782);
              match(CypherParser::SP);
            }
            setState(1785);
            oC_ProjectionItem(); 
          }
          setState(1790);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 262, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemContext::OC_ProjectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ProjectionItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_ProjectionItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_ProjectionItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItem;
}


CypherParser::OC_ProjectionItemContext* CypherParser::oC_ProjectionItem() {
  OC_ProjectionItemContext *_localctx = _tracker.createInstance<OC_ProjectionItemContext>(_ctx, getState());
  enterRule(_localctx, 188, CypherParser::RuleOC_ProjectionItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1800);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 264, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1793);
      oC_Expression();
      setState(1794);
      match(CypherParser::SP);
      setState(1795);
      match(CypherParser::AS);
      setState(1796);
      match(CypherParser::SP);
      setState(1797);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1799);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

CypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_OrderContext::ORDER() {
  return getToken(CypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrderContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_OrderContext::BY() {
  return getToken(CypherParser::BY, 0);
}

std::vector<CypherParser::OC_SortItemContext *> CypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<CypherParser::OC_SortItemContext>();
}

CypherParser::OC_SortItemContext* CypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<CypherParser::OC_SortItemContext>(i);
}


size_t CypherParser::OC_OrderContext::getRuleIndex() const {
  return CypherParser::RuleOC_Order;
}


CypherParser::OC_OrderContext* CypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
  enterRule(_localctx, 190, CypherParser::RuleOC_Order);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1802);
    match(CypherParser::ORDER);
    setState(1803);
    match(CypherParser::SP);
    setState(1804);
    match(CypherParser::BY);
    setState(1805);
    match(CypherParser::SP);
    setState(1806);
    oC_SortItem();
    setState(1814);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(1807);
      match(CypherParser::T__2);
      setState(1809);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1808);
        match(CypherParser::SP);
      }
      setState(1811);
      oC_SortItem();
      setState(1816);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

CypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SkipContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::OC_SkipContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_SkipContext::getRuleIndex() const {
  return CypherParser::RuleOC_Skip;
}


CypherParser::OC_SkipContext* CypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
  enterRule(_localctx, 192, CypherParser::RuleOC_Skip);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1817);
    match(CypherParser::L_SKIP);
    setState(1818);
    match(CypherParser::SP);
    setState(1819);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

CypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LimitContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::OC_LimitContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_LimitContext::getRuleIndex() const {
  return CypherParser::RuleOC_Limit;
}


CypherParser::OC_LimitContext* CypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
  enterRule(_localctx, 194, CypherParser::RuleOC_Limit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1821);
    match(CypherParser::LIMIT);
    setState(1822);
    match(CypherParser::SP);
    setState(1823);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

CypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(CypherParser::ASCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASC() {
  return getToken(CypherParser::ASC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(CypherParser::DESCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESC() {
  return getToken(CypherParser::DESC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_SortItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SortItem;
}


CypherParser::OC_SortItemContext* CypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
  enterRule(_localctx, 196, CypherParser::RuleOC_SortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1825);
    oC_Expression();
    setState(1830);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx)) {
    case 1: {
      setState(1827);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1826);
        match(CypherParser::SP);
      }
      setState(1829);
      _la = _input->LA(1);
      if (!(((((_la - 52) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 52)) & 12582915) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

CypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WhereContext::WHERE() {
  return getToken(CypherParser::WHERE, 0);
}

tree::TerminalNode* CypherParser::OC_WhereContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_WhereContext::getRuleIndex() const {
  return CypherParser::RuleOC_Where;
}


CypherParser::OC_WhereContext* CypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
  enterRule(_localctx, 198, CypherParser::RuleOC_Where);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1832);
    match(CypherParser::WHERE);
    setState(1833);
    match(CypherParser::SP);
    setState(1834);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

CypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PatternPartContext *> CypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<CypherParser::OC_PatternPartContext>();
}

CypherParser::OC_PatternPartContext* CypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<CypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_Pattern;
}


CypherParser::OC_PatternContext* CypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
  enterRule(_localctx, 200, CypherParser::RuleOC_Pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1836);
    oC_PatternPart();
    setState(1847);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 271, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1838);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1837);
          match(CypherParser::SP);
        }
        setState(1840);
        match(CypherParser::T__2);
        setState(1842);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1841);
          match(CypherParser::SP);
        }
        setState(1844);
        oC_PatternPart(); 
      }
      setState(1849);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 271, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

CypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_AnonymousPatternPartContext* CypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<CypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternPart;
}


CypherParser::OC_PatternPartContext* CypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
  enterRule(_localctx, 202, CypherParser::RuleOC_PatternPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1861);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1850);
        oC_Variable();
        setState(1852);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1851);
          match(CypherParser::SP);
        }
        setState(1854);
        match(CypherParser::T__5);
        setState(1856);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1855);
          match(CypherParser::SP);
        }
        setState(1858);
        oC_AnonymousPatternPart();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(1860);
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

CypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PatternElementContext* CypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnonymousPatternPart;
}


CypherParser::OC_AnonymousPatternPartContext* CypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
  enterRule(_localctx, 204, CypherParser::RuleOC_AnonymousPatternPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1863);
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

CypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternElementContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PatternElementContext* CypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_PatternElementContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElement;
}


CypherParser::OC_PatternElementContext* CypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 206, CypherParser::RuleOC_PatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1879);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1865);
      oC_NodePattern();
      setState(1872);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1867);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1866);
            match(CypherParser::SP);
          }
          setState(1869);
          oC_PatternElementChain(); 
        }
        setState(1874);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1875);
      match(CypherParser::T__1);
      setState(1876);
      oC_PatternElement();
      setState(1877);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

CypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodePatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_NodePatternContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_NodePatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodePattern;
}


CypherParser::OC_NodePatternContext* CypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 208, CypherParser::RuleOC_NodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1881);
    match(CypherParser::T__1);
    setState(1883);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1882);
      match(CypherParser::SP);
    }
    setState(1889);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & -2383877064657885291) != 0) || ((((_la - 121) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 121)) & 316935604865917) != 0)) {
      setState(1885);
      oC_Variable();
      setState(1887);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1886);
        match(CypherParser::SP);
      }
    }
    setState(1895);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1891);
      oC_NodeLabels();
      setState(1893);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1892);
        match(CypherParser::SP);
      }
    }
    setState(1901);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1897);
      kU_Properties();
      setState(1899);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1898);
        match(CypherParser::SP);
      }
    }
    setState(1903);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

CypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RelationshipPatternContext* CypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<CypherParser::OC_RelationshipPatternContext>(0);
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_PatternElementChainContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElementChain;
}


CypherParser::OC_PatternElementChainContext* CypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
  enterRule(_localctx, 210, CypherParser::RuleOC_PatternElementChain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1905);
    oC_RelationshipPattern();
    setState(1907);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1906);
      match(CypherParser::SP);
    }
    setState(1909);
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

CypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LeftArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<CypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<CypherParser::OC_DashContext *> CypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<CypherParser::OC_DashContext>();
}

CypherParser::OC_DashContext* CypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<CypherParser::OC_DashContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_RelationshipDetailContext* CypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<CypherParser::OC_RelationshipDetailContext>(0);
}

CypherParser::OC_RightArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<CypherParser::OC_RightArrowHeadContext>(0);
}


size_t CypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipPattern;
}


CypherParser::OC_RelationshipPatternContext* CypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
  enterRule(_localctx, 212, CypherParser::RuleOC_RelationshipPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1955);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 297, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1911);
      oC_LeftArrowHead();
      setState(1913);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1912);
        match(CypherParser::SP);
      }
      setState(1915);
      oC_Dash();
      setState(1917);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 287, _ctx)) {
      case 1: {
        setState(1916);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1920);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1919);
        oC_RelationshipDetail();
      }
      setState(1923);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1922);
        match(CypherParser::SP);
      }
      setState(1925);
      oC_Dash();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1927);
      oC_Dash();
      setState(1929);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 290, _ctx)) {
      case 1: {
        setState(1928);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1932);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1931);
        oC_RelationshipDetail();
      }
      setState(1935);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1934);
        match(CypherParser::SP);
      }
      setState(1937);
      oC_Dash();
      setState(1939);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1938);
        match(CypherParser::SP);
      }
      setState(1941);
      oC_RightArrowHead();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1943);
      oC_Dash();
      setState(1945);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 294, _ctx)) {
      case 1: {
        setState(1944);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1948);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1947);
        oC_RelationshipDetail();
      }
      setState(1951);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1950);
        match(CypherParser::SP);
      }
      setState(1953);
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

CypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_RelationshipTypesContext* CypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<CypherParser::OC_RelationshipTypesContext>(0);
}

CypherParser::OC_RangeLiteralContext* CypherParser::OC_RelationshipDetailContext::oC_RangeLiteral() {
  return getRuleContext<CypherParser::OC_RangeLiteralContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_RelationshipDetailContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipDetail;
}


CypherParser::OC_RelationshipDetailContext* CypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
  enterRule(_localctx, 214, CypherParser::RuleOC_RelationshipDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1957);
    match(CypherParser::T__6);
    setState(1959);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1958);
      match(CypherParser::SP);
    }
    setState(1965);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & -2383877064657885291) != 0) || ((((_la - 121) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 121)) & 316935604865917) != 0)) {
      setState(1961);
      oC_Variable();
      setState(1963);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1962);
        match(CypherParser::SP);
      }
    }
    setState(1971);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1967);
      oC_RelationshipTypes();
      setState(1969);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1968);
        match(CypherParser::SP);
      }
    }
    setState(1977);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::STAR) {
      setState(1973);
      oC_RangeLiteral();
      setState(1975);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1974);
        match(CypherParser::SP);
      }
    }
    setState(1983);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1979);
      kU_Properties();
      setState(1981);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1980);
        match(CypherParser::SP);
      }
    }
    setState(1985);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertiesContext ------------------------------------------------------------------

CypherParser::KU_PropertiesContext::KU_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_PropertiesContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertiesContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::KU_PropertiesContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::KU_PropertiesContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::KU_PropertiesContext::getRuleIndex() const {
  return CypherParser::RuleKU_Properties;
}


CypherParser::KU_PropertiesContext* CypherParser::kU_Properties() {
  KU_PropertiesContext *_localctx = _tracker.createInstance<KU_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 216, CypherParser::RuleKU_Properties);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1987);
    match(CypherParser::T__8);
    setState(1989);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1988);
      match(CypherParser::SP);
    }
    setState(2024);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & -2383877064657885291) != 0) || ((((_la - 121) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 121)) & 316935604865917) != 0)) {
      setState(1991);
      oC_PropertyKeyName();
      setState(1993);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1992);
        match(CypherParser::SP);
      }
      setState(1995);
      match(CypherParser::COLON);
      setState(1997);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1996);
        match(CypherParser::SP);
      }
      setState(1999);
      oC_Expression();
      setState(2001);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2000);
        match(CypherParser::SP);
      }
      setState(2021);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(2003);
        match(CypherParser::T__2);
        setState(2005);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2004);
          match(CypherParser::SP);
        }
        setState(2007);
        oC_PropertyKeyName();
        setState(2009);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2008);
          match(CypherParser::SP);
        }
        setState(2011);
        match(CypherParser::COLON);
        setState(2013);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2012);
          match(CypherParser::SP);
        }
        setState(2015);
        oC_Expression();
        setState(2017);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2016);
          match(CypherParser::SP);
        }
        setState(2023);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2026);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

CypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_RelTypeNameContext *> CypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<CypherParser::OC_RelTypeNameContext>();
}

CypherParser::OC_RelTypeNameContext* CypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<CypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipTypes;
}


CypherParser::OC_RelationshipTypesContext* CypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
  enterRule(_localctx, 218, CypherParser::RuleOC_RelationshipTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2028);
    match(CypherParser::COLON);
    setState(2030);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2029);
      match(CypherParser::SP);
    }
    setState(2032);
    oC_RelTypeName();
    setState(2046);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2034);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2033);
          match(CypherParser::SP);
        }
        setState(2036);
        match(CypherParser::T__10);
        setState(2038);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::COLON) {
          setState(2037);
          match(CypherParser::COLON);
        }
        setState(2041);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2040);
          match(CypherParser::SP);
        }
        setState(2043);
        oC_RelTypeName(); 
      }
      setState(2048);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NodeLabelContext *> CypherParser::OC_NodeLabelsContext::oC_NodeLabel() {
  return getRuleContexts<CypherParser::OC_NodeLabelContext>();
}

CypherParser::OC_NodeLabelContext* CypherParser::OC_NodeLabelsContext::oC_NodeLabel(size_t i) {
  return getRuleContext<CypherParser::OC_NodeLabelContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabels;
}


CypherParser::OC_NodeLabelsContext* CypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
  enterRule(_localctx, 220, CypherParser::RuleOC_NodeLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2049);
    oC_NodeLabel();
    setState(2056);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2051);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2050);
          match(CypherParser::SP);
        }
        setState(2053);
        oC_NodeLabel(); 
      }
      setState(2058);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelContext::OC_NodeLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LabelNameContext* CypherParser::OC_NodeLabelContext::oC_LabelName() {
  return getRuleContext<CypherParser::OC_LabelNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_NodeLabelContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabel;
}


CypherParser::OC_NodeLabelContext* CypherParser::oC_NodeLabel() {
  OC_NodeLabelContext *_localctx = _tracker.createInstance<OC_NodeLabelContext>(_ctx, getState());
  enterRule(_localctx, 222, CypherParser::RuleOC_NodeLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2059);
    match(CypherParser::COLON);
    setState(2061);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2060);
      match(CypherParser::SP);
    }
    setState(2063);
    oC_LabelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

CypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SHORTEST() {
  return getToken(CypherParser::SHORTEST, 0);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::OC_RangeLiteralContext::kU_RecursiveRelationshipComprehension() {
  return getRuleContext<CypherParser::KU_RecursiveRelationshipComprehensionContext>(0);
}

CypherParser::OC_LowerBoundContext* CypherParser::OC_RangeLiteralContext::oC_LowerBound() {
  return getRuleContext<CypherParser::OC_LowerBoundContext>(0);
}

CypherParser::OC_UpperBoundContext* CypherParser::OC_RangeLiteralContext::oC_UpperBound() {
  return getRuleContext<CypherParser::OC_UpperBoundContext>(0);
}


size_t CypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_RangeLiteral;
}


CypherParser::OC_RangeLiteralContext* CypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 224, CypherParser::RuleOC_RangeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2065);
    match(CypherParser::STAR);
    setState(2067);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx)) {
    case 1: {
      setState(2066);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2073);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(2069);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::ALL: {
        setState(2070);
        match(CypherParser::ALL);
        setState(2071);
        match(CypherParser::SP);
        setState(2072);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__7:
      case CypherParser::T__8:
      case CypherParser::T__11:
      case CypherParser::DecimalInteger:
      case CypherParser::SP: {
        break;
      }

    default:
      break;
    }
    setState(2076);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx)) {
    case 1: {
      setState(2075);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2092);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 332, _ctx)) {
    case 1: {
      setState(2079);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(2078);
        oC_LowerBound();
      }
      setState(2082);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2081);
        match(CypherParser::SP);
      }
      setState(2084);
      match(CypherParser::T__11);
      setState(2086);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx)) {
      case 1: {
        setState(2085);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(2089);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(2088);
        oC_UpperBound();
      }
      break;
    }

    case 2: {
      setState(2091);
      oC_IntegerLiteral();
      break;
    }

    default:
      break;
    }
    setState(2098);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx)) {
    case 1: {
      setState(2095);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2094);
        match(CypherParser::SP);
      }
      setState(2097);
      kU_RecursiveRelationshipComprehension();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RecursiveRelationshipComprehensionContext ------------------------------------------------------------------

CypherParser::KU_RecursiveRelationshipComprehensionContext::KU_RecursiveRelationshipComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_VariableContext *> CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable() {
  return getRuleContexts<CypherParser::OC_VariableContext>();
}

CypherParser::OC_VariableContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable(size_t i) {
  return getRuleContext<CypherParser::OC_VariableContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RecursiveRelationshipComprehensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RecursiveRelationshipComprehensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateRelProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateRelProjectionItemsContext>(0);
}

CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateNodeProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateNodeProjectionItemsContext>(0);
}


size_t CypherParser::KU_RecursiveRelationshipComprehensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RecursiveRelationshipComprehension;
}


CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::kU_RecursiveRelationshipComprehension() {
  KU_RecursiveRelationshipComprehensionContext *_localctx = _tracker.createInstance<KU_RecursiveRelationshipComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 226, CypherParser::RuleKU_RecursiveRelationshipComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2100);
    match(CypherParser::T__1);
    setState(2102);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2101);
      match(CypherParser::SP);
    }
    setState(2104);
    oC_Variable();
    setState(2106);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2105);
      match(CypherParser::SP);
    }
    setState(2108);
    match(CypherParser::T__2);
    setState(2110);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2109);
      match(CypherParser::SP);
    }
    setState(2112);
    oC_Variable();
    setState(2124);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx)) {
    case 1: {
      setState(2114);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2113);
        match(CypherParser::SP);
      }
      setState(2116);
      match(CypherParser::T__10);
      setState(2118);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2117);
        match(CypherParser::SP);
      }
      setState(2120);
      oC_Where();
      setState(2122);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 340, _ctx)) {
      case 1: {
        setState(2121);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    setState(2145);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__10 || _la == CypherParser::SP) {
      setState(2127);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2126);
        match(CypherParser::SP);
      }
      setState(2129);
      match(CypherParser::T__10);
      setState(2131);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2130);
        match(CypherParser::SP);
      }
      setState(2133);
      kU_IntermediateRelProjectionItems();
      setState(2135);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2134);
        match(CypherParser::SP);
      }
      setState(2137);
      match(CypherParser::T__2);
      setState(2139);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2138);
        match(CypherParser::SP);
      }
      setState(2141);
      kU_IntermediateNodeProjectionItems();
      setState(2143);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2142);
        match(CypherParser::SP);
      }
    }
    setState(2147);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateNodeProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateNodeProjectionItemsContext::KU_IntermediateNodeProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateNodeProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateNodeProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateNodeProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateNodeProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateNodeProjectionItems;
}


CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::kU_IntermediateNodeProjectionItems() {
  KU_IntermediateNodeProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateNodeProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 228, CypherParser::RuleKU_IntermediateNodeProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2149);
    match(CypherParser::T__8);
    setState(2151);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx)) {
    case 1: {
      setState(2150);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2154);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2320550076679716220) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 9007753110927321399) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 1307439671051) != 0)) {
      setState(2153);
      oC_ProjectionItems();
    }
    setState(2157);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2156);
      match(CypherParser::SP);
    }
    setState(2159);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateRelProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateRelProjectionItemsContext::KU_IntermediateRelProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateRelProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateRelProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateRelProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateRelProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateRelProjectionItems;
}


CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::kU_IntermediateRelProjectionItems() {
  KU_IntermediateRelProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateRelProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 230, CypherParser::RuleKU_IntermediateRelProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2161);
    match(CypherParser::T__8);
    setState(2163);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 351, _ctx)) {
    case 1: {
      setState(2162);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2166);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2320550076679716220) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 9007753110927321399) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 1307439671051) != 0)) {
      setState(2165);
      oC_ProjectionItems();
    }
    setState(2169);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2168);
      match(CypherParser::SP);
    }
    setState(2171);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LowerBoundContext ------------------------------------------------------------------

CypherParser::OC_LowerBoundContext::OC_LowerBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LowerBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_LowerBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_LowerBound;
}


CypherParser::OC_LowerBoundContext* CypherParser::oC_LowerBound() {
  OC_LowerBoundContext *_localctx = _tracker.createInstance<OC_LowerBoundContext>(_ctx, getState());
  enterRule(_localctx, 232, CypherParser::RuleOC_LowerBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2173);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpperBoundContext ------------------------------------------------------------------

CypherParser::OC_UpperBoundContext::OC_UpperBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UpperBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_UpperBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpperBound;
}


CypherParser::OC_UpperBoundContext* CypherParser::oC_UpperBound() {
  OC_UpperBoundContext *_localctx = _tracker.createInstance<OC_UpperBoundContext>(_ctx, getState());
  enterRule(_localctx, 234, CypherParser::RuleOC_UpperBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2175);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

CypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_LabelNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_LabelName;
}


CypherParser::OC_LabelNameContext* CypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 236, CypherParser::RuleOC_LabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2177);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

CypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelTypeName;
}


CypherParser::OC_RelTypeNameContext* CypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 238, CypherParser::RuleOC_RelTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2179);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

CypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_OrExpressionContext* CypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<CypherParser::OC_OrExpressionContext>(0);
}


size_t CypherParser::OC_ExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Expression;
}


CypherParser::OC_ExpressionContext* CypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 240, CypherParser::RuleOC_Expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2181);
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

CypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_XorExpressionContext *> CypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<CypherParser::OC_XorExpressionContext>();
}

CypherParser::OC_XorExpressionContext* CypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::OR() {
  return getTokens(CypherParser::OR);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(CypherParser::OR, i);
}


size_t CypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_OrExpression;
}


CypherParser::OC_OrExpressionContext* CypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 242, CypherParser::RuleOC_OrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2183);
    oC_XorExpression();
    setState(2190);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 354, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2184);
        match(CypherParser::SP);
        setState(2185);
        match(CypherParser::OR);
        setState(2186);
        match(CypherParser::SP);
        setState(2187);
        oC_XorExpression(); 
      }
      setState(2192);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 354, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

CypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AndExpressionContext *> CypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<CypherParser::OC_AndExpressionContext>();
}

CypherParser::OC_AndExpressionContext* CypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(CypherParser::XOR);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(CypherParser::XOR, i);
}


size_t CypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_XorExpression;
}


CypherParser::OC_XorExpressionContext* CypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 244, CypherParser::RuleOC_XorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2193);
    oC_AndExpression();
    setState(2200);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 355, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2194);
        match(CypherParser::SP);
        setState(2195);
        match(CypherParser::XOR);
        setState(2196);
        match(CypherParser::SP);
        setState(2197);
        oC_AndExpression(); 
      }
      setState(2202);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 355, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

CypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NotExpressionContext *> CypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<CypherParser::OC_NotExpressionContext>();
}

CypherParser::OC_NotExpressionContext* CypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<CypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::AND() {
  return getTokens(CypherParser::AND);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(CypherParser::AND, i);
}


size_t CypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AndExpression;
}


CypherParser::OC_AndExpressionContext* CypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 246, CypherParser::RuleOC_AndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2203);
    oC_NotExpression();
    setState(2210);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 356, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2204);
        match(CypherParser::SP);
        setState(2205);
        match(CypherParser::AND);
        setState(2206);
        match(CypherParser::SP);
        setState(2207);
        oC_NotExpression(); 
      }
      setState(2212);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 356, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

CypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ComparisonExpressionContext* CypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<CypherParser::OC_ComparisonExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::NOT() {
  return getTokens(CypherParser::NOT);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::NOT(size_t i) {
  return getToken(CypherParser::NOT, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NotExpression;
}


CypherParser::OC_NotExpressionContext* CypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
  enterRule(_localctx, 248, CypherParser::RuleOC_NotExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2219);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::NOT) {
      setState(2213);
      match(CypherParser::NOT);
      setState(2215);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2214);
        match(CypherParser::SP);
      }
      setState(2221);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2222);
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

CypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseOrOperatorExpressionContext *> CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseOrOperatorExpressionContext>();
}

CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseOrOperatorExpressionContext>(i);
}

std::vector<CypherParser::KU_ComparisonOperatorContext *> CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator() {
  return getRuleContexts<CypherParser::KU_ComparisonOperatorContext>();
}

CypherParser::KU_ComparisonOperatorContext* CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator(size_t i) {
  return getRuleContext<CypherParser::KU_ComparisonOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::INVALID_NOT_EQUAL() {
  return getToken(CypherParser::INVALID_NOT_EQUAL, 0);
}


size_t CypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ComparisonExpression;
}


CypherParser::OC_ComparisonExpressionContext* CypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 250, CypherParser::RuleOC_ComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2272);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 369, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2224);
      kU_BitwiseOrOperatorExpression();
      setState(2234);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 361, _ctx)) {
      case 1: {
        setState(2226);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2225);
          match(CypherParser::SP);
        }
        setState(2228);
        kU_ComparisonOperator();
        setState(2230);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2229);
          match(CypherParser::SP);
        }
        setState(2232);
        kU_BitwiseOrOperatorExpression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2236);
      kU_BitwiseOrOperatorExpression();

      setState(2238);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2237);
        match(CypherParser::SP);
      }
      setState(2240);
      antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken = match(CypherParser::INVALID_NOT_EQUAL);
      setState(2242);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2241);
        match(CypherParser::SP);
      }
      setState(2244);
      kU_BitwiseOrOperatorExpression();
       notifyInvalidNotEqualOperator(antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken); 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2248);
      kU_BitwiseOrOperatorExpression();
      setState(2250);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2249);
        match(CypherParser::SP);
      }
      setState(2252);
      kU_ComparisonOperator();
      setState(2254);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2253);
        match(CypherParser::SP);
      }
      setState(2256);
      kU_BitwiseOrOperatorExpression();
      setState(2266); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2258);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2257);
                  match(CypherParser::SP);
                }
                setState(2260);
                kU_ComparisonOperator();
                setState(2262);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2261);
                  match(CypherParser::SP);
                }
                setState(2264);
                kU_BitwiseOrOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2268); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
       notifyNonBinaryComparison(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ComparisonOperatorContext ------------------------------------------------------------------

CypherParser::KU_ComparisonOperatorContext::KU_ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_ComparisonOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_ComparisonOperator;
}


CypherParser::KU_ComparisonOperatorContext* CypherParser::kU_ComparisonOperator() {
  KU_ComparisonOperatorContext *_localctx = _tracker.createInstance<KU_ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 252, CypherParser::RuleKU_ComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2274);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 254016) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseOrOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseOrOperatorExpressionContext::KU_BitwiseOrOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseAndOperatorExpressionContext *> CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseAndOperatorExpressionContext>();
}

CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseAndOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseOrOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseOrOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseOrOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseOrOperatorExpression;
}


CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::kU_BitwiseOrOperatorExpression() {
  KU_BitwiseOrOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseOrOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 254, CypherParser::RuleKU_BitwiseOrOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2276);
    kU_BitwiseAndOperatorExpression();
    setState(2287);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 372, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2278);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2277);
          match(CypherParser::SP);
        }
        setState(2280);
        match(CypherParser::T__10);
        setState(2282);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2281);
          match(CypherParser::SP);
        }
        setState(2284);
        kU_BitwiseAndOperatorExpression(); 
      }
      setState(2289);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 372, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseAndOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseAndOperatorExpressionContext::KU_BitwiseAndOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitShiftOperatorExpressionContext *> CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorExpressionContext>();
}

CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseAndOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseAndOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseAndOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseAndOperatorExpression;
}


CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::kU_BitwiseAndOperatorExpression() {
  KU_BitwiseAndOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseAndOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 256, CypherParser::RuleKU_BitwiseAndOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2290);
    kU_BitShiftOperatorExpression();
    setState(2301);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 375, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2292);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2291);
          match(CypherParser::SP);
        }
        setState(2294);
        match(CypherParser::T__17);
        setState(2296);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2295);
          match(CypherParser::SP);
        }
        setState(2298);
        kU_BitShiftOperatorExpression(); 
      }
      setState(2303);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 375, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorExpressionContext::KU_BitShiftOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AddOrSubtractExpressionContext *> CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContexts<CypherParser::OC_AddOrSubtractExpressionContext>();
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AddOrSubtractExpressionContext>(i);
}

std::vector<CypherParser::KU_BitShiftOperatorContext *> CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorContext>();
}

CypherParser::KU_BitShiftOperatorContext* CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitShiftOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitShiftOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitShiftOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperatorExpression;
}


CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::kU_BitShiftOperatorExpression() {
  KU_BitShiftOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 258, CypherParser::RuleKU_BitShiftOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2304);
    oC_AddOrSubtractExpression();
    setState(2316);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 378, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2306);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2305);
          match(CypherParser::SP);
        }
        setState(2308);
        kU_BitShiftOperator();
        setState(2310);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2309);
          match(CypherParser::SP);
        }
        setState(2312);
        oC_AddOrSubtractExpression(); 
      }
      setState(2318);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 378, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorContext::KU_BitShiftOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_BitShiftOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperator;
}


CypherParser::KU_BitShiftOperatorContext* CypherParser::kU_BitShiftOperator() {
  KU_BitShiftOperatorContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorContext>(_ctx, getState());
  enterRule(_localctx, 260, CypherParser::RuleKU_BitShiftOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2319);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__18

    || _la == CypherParser::T__19)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

CypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_MultiplyDivideModuloExpressionContext *> CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<CypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<CypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<CypherParser::KU_AddOrSubtractOperatorContext *> CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator() {
  return getRuleContexts<CypherParser::KU_AddOrSubtractOperatorContext>();
}

CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator(size_t i) {
  return getRuleContext<CypherParser::KU_AddOrSubtractOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AddOrSubtractExpression;
}


CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 262, CypherParser::RuleOC_AddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2321);
    oC_MultiplyDivideModuloExpression();
    setState(2333);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 381, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2323);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2322);
          match(CypherParser::SP);
        }
        setState(2325);
        kU_AddOrSubtractOperator();
        setState(2327);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2326);
          match(CypherParser::SP);
        }
        setState(2329);
        oC_MultiplyDivideModuloExpression(); 
      }
      setState(2335);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 381, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddOrSubtractOperatorContext ------------------------------------------------------------------

CypherParser::KU_AddOrSubtractOperatorContext::KU_AddOrSubtractOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddOrSubtractOperatorContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_AddOrSubtractOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddOrSubtractOperator;
}


CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::kU_AddOrSubtractOperator() {
  KU_AddOrSubtractOperatorContext *_localctx = _tracker.createInstance<KU_AddOrSubtractOperatorContext>(_ctx, getState());
  enterRule(_localctx, 264, CypherParser::RuleKU_AddOrSubtractOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2336);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__20 || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

CypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PowerOfExpressionContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<CypherParser::OC_PowerOfExpressionContext>();
}

CypherParser::OC_PowerOfExpressionContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<CypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<CypherParser::KU_MultiplyDivideModuloOperatorContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator() {
  return getRuleContexts<CypherParser::KU_MultiplyDivideModuloOperatorContext>();
}

CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator(size_t i) {
  return getRuleContext<CypherParser::KU_MultiplyDivideModuloOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiplyDivideModuloExpression;
}


CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
  enterRule(_localctx, 266, CypherParser::RuleOC_MultiplyDivideModuloExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2338);
    oC_PowerOfExpression();
    setState(2350);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 384, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2340);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2339);
          match(CypherParser::SP);
        }
        setState(2342);
        kU_MultiplyDivideModuloOperator();
        setState(2344);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2343);
          match(CypherParser::SP);
        }
        setState(2346);
        oC_PowerOfExpression(); 
      }
      setState(2352);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 384, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MultiplyDivideModuloOperatorContext ------------------------------------------------------------------

CypherParser::KU_MultiplyDivideModuloOperatorContext::KU_MultiplyDivideModuloOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MultiplyDivideModuloOperatorContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}


size_t CypherParser::KU_MultiplyDivideModuloOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_MultiplyDivideModuloOperator;
}


CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::kU_MultiplyDivideModuloOperator() {
  KU_MultiplyDivideModuloOperatorContext *_localctx = _tracker.createInstance<KU_MultiplyDivideModuloOperatorContext>(_ctx, getState());
  enterRule(_localctx, 268, CypherParser::RuleKU_MultiplyDivideModuloOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2353);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__21

    || _la == CypherParser::T__22 || _la == CypherParser::STAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

CypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext *> CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression() {
  return getRuleContexts<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>();
}

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression(size_t i) {
  return getRuleContext<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PowerOfExpression;
}


CypherParser::OC_PowerOfExpressionContext* CypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
  enterRule(_localctx, 270, CypherParser::RuleOC_PowerOfExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2355);
    oC_UnaryAddSubtractOrFactorialExpression();
    setState(2366);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 387, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2357);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2356);
          match(CypherParser::SP);
        }
        setState(2359);
        match(CypherParser::T__23);
        setState(2361);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2360);
          match(CypherParser::SP);
        }
        setState(2363);
        oC_UnaryAddSubtractOrFactorialExpression(); 
      }
      setState(2368);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 387, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddSubtractOrFactorialExpressionContext ------------------------------------------------------------------

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::OC_UnaryAddSubtractOrFactorialExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::oC_StringListNullOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringListNullOperatorExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS() {
  return getTokens(CypherParser::MINUS);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS(size_t i) {
  return getToken(CypherParser::MINUS, i);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::FACTORIAL() {
  return getToken(CypherParser::FACTORIAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression;
}


CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::oC_UnaryAddSubtractOrFactorialExpression() {
  OC_UnaryAddSubtractOrFactorialExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddSubtractOrFactorialExpressionContext>(_ctx, getState());
  enterRule(_localctx, 272, CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2375);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::MINUS) {
      setState(2369);
      match(CypherParser::MINUS);
      setState(2371);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2370);
        match(CypherParser::SP);
      }
      setState(2377);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2378);
    oC_StringListNullOperatorExpression();
    setState(2383);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 391, _ctx)) {
    case 1: {
      setState(2380);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2379);
        match(CypherParser::SP);
      }
      setState(2382);
      match(CypherParser::FACTORIAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringListNullOperatorExpressionContext::OC_StringListNullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_StringOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringOperatorExpressionContext>(0);
}

CypherParser::OC_NullOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression() {
  return getRuleContext<CypherParser::OC_NullOperatorExpressionContext>(0);
}

std::vector<CypherParser::OC_ListOperatorExpressionContext *> CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<CypherParser::OC_ListOperatorExpressionContext>();
}

CypherParser::OC_ListOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_ListOperatorExpressionContext>(i);
}


size_t CypherParser::OC_StringListNullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringListNullOperatorExpression;
}


CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::oC_StringListNullOperatorExpression() {
  OC_StringListNullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 274, CypherParser::RuleOC_StringListNullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2385);
    oC_PropertyOrLabelsExpression();
    setState(2393);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 393, _ctx)) {
    case 1: {
      setState(2386);
      oC_StringOperatorExpression();
      break;
    }

    case 2: {
      setState(2388); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2387);
                oC_ListOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2390); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 392, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 3: {
      setState(2392);
      oC_NullOperatorExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::IN() {
  return getToken(CypherParser::IN, 0);
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_ListOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}


size_t CypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListOperatorExpression;
}


CypherParser::OC_ListOperatorExpressionContext* CypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 276, CypherParser::RuleOC_ListOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2414);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 397, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2395);
      match(CypherParser::SP);
      setState(2396);
      match(CypherParser::IN);
      setState(2398);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2397);
        match(CypherParser::SP);
      }
      setState(2400);
      oC_PropertyOrLabelsExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2401);
      match(CypherParser::T__6);
      setState(2402);
      oC_Expression();
      setState(2403);
      match(CypherParser::T__7);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2405);
      match(CypherParser::T__6);
      setState(2407);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -2320550076679716220) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 9007753110927321399) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 1307437573899) != 0)) {
        setState(2406);
        oC_Expression();
      }
      setState(2409);
      match(CypherParser::COLON);
      setState(2411);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -2320550076679716220) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 9007753110927321399) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 1307437573899) != 0)) {
        setState(2410);
        oC_Expression();
      }
      setState(2413);
      match(CypherParser::T__7);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringOperatorExpressionContext::OC_StringOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_RegularExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_RegularExpression() {
  return getRuleContext<CypherParser::OC_RegularExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_StringOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::STARTS() {
  return getToken(CypherParser::STARTS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::ENDS() {
  return getToken(CypherParser::ENDS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}


size_t CypherParser::OC_StringOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringOperatorExpression;
}


CypherParser::OC_StringOperatorExpressionContext* CypherParser::oC_StringOperatorExpression() {
  OC_StringOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 278, CypherParser::RuleOC_StringOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2427);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 398, _ctx)) {
    case 1: {
      setState(2416);
      oC_RegularExpression();
      break;
    }

    case 2: {
      setState(2417);
      match(CypherParser::SP);
      setState(2418);
      match(CypherParser::STARTS);
      setState(2419);
      match(CypherParser::SP);
      setState(2420);
      match(CypherParser::WITH);
      break;
    }

    case 3: {
      setState(2421);
      match(CypherParser::SP);
      setState(2422);
      match(CypherParser::ENDS);
      setState(2423);
      match(CypherParser::SP);
      setState(2424);
      match(CypherParser::WITH);
      break;
    }

    case 4: {
      setState(2425);
      match(CypherParser::SP);
      setState(2426);
      match(CypherParser::CONTAINS);
      break;
    }

    default:
      break;
    }
    setState(2430);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2429);
      match(CypherParser::SP);
    }
    setState(2432);
    oC_PropertyOrLabelsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularExpressionContext ------------------------------------------------------------------

CypherParser::OC_RegularExpressionContext::OC_RegularExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RegularExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_RegularExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularExpression;
}


CypherParser::OC_RegularExpressionContext* CypherParser::oC_RegularExpression() {
  OC_RegularExpressionContext *_localctx = _tracker.createInstance<OC_RegularExpressionContext>(_ctx, getState());
  enterRule(_localctx, 280, CypherParser::RuleOC_RegularExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2435);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2434);
      match(CypherParser::SP);
    }
    setState(2437);
    match(CypherParser::T__24);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_NullOperatorExpressionContext::OC_NullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NullOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}


size_t CypherParser::OC_NullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NullOperatorExpression;
}


CypherParser::OC_NullOperatorExpressionContext* CypherParser::oC_NullOperatorExpression() {
  OC_NullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 282, CypherParser::RuleOC_NullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2449);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 401, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2439);
      match(CypherParser::SP);
      setState(2440);
      match(CypherParser::IS);
      setState(2441);
      match(CypherParser::SP);
      setState(2442);
      match(CypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2443);
      match(CypherParser::SP);
      setState(2444);
      match(CypherParser::IS);
      setState(2445);
      match(CypherParser::SP);
      setState(2446);
      match(CypherParser::NOT);
      setState(2447);
      match(CypherParser::SP);
      setState(2448);
      match(CypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyOrLabelsExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyOrLabelsExpressionContext::OC_PropertyOrLabelsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

std::vector<CypherParser::OC_PropertyLookupContext *> CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<CypherParser::OC_PropertyLookupContext>();
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PropertyOrLabelsExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PropertyOrLabelsExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PropertyOrLabelsExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyOrLabelsExpression;
}


CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::oC_PropertyOrLabelsExpression() {
  OC_PropertyOrLabelsExpressionContext *_localctx = _tracker.createInstance<OC_PropertyOrLabelsExpressionContext>(_ctx, getState());
  enterRule(_localctx, 284, CypherParser::RuleOC_PropertyOrLabelsExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2451);
    oC_Atom();
    setState(2458);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 403, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2453);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2452);
          match(CypherParser::SP);
        }
        setState(2455);
        oC_PropertyLookup(); 
      }
      setState(2460);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 403, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

CypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LiteralContext* CypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

CypherParser::OC_ParameterContext* CypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<CypherParser::OC_ParameterContext>(0);
}

CypherParser::OC_CaseExpressionContext* CypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<CypherParser::OC_CaseExpressionContext>(0);
}

CypherParser::OC_ParenthesizedExpressionContext* CypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<CypherParser::OC_ParenthesizedExpressionContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_PathPatternsContext* CypherParser::OC_AtomContext::oC_PathPatterns() {
  return getRuleContext<CypherParser::OC_PathPatternsContext>(0);
}

CypherParser::OC_ExistSubqueryContext* CypherParser::OC_AtomContext::oC_ExistSubquery() {
  return getRuleContext<CypherParser::OC_ExistSubqueryContext>(0);
}

CypherParser::KU_CountSubqueryContext* CypherParser::OC_AtomContext::kU_CountSubquery() {
  return getRuleContext<CypherParser::KU_CountSubqueryContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_QuantifierContext* CypherParser::OC_AtomContext::oC_Quantifier() {
  return getRuleContext<CypherParser::OC_QuantifierContext>(0);
}


size_t CypherParser::OC_AtomContext::getRuleIndex() const {
  return CypherParser::RuleOC_Atom;
}


CypherParser::OC_AtomContext* CypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
  enterRule(_localctx, 286, CypherParser::RuleOC_Atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2471);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 404, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2461);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2462);
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2463);
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2464);
      oC_ParenthesizedExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2465);
      oC_FunctionInvocation();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2466);
      oC_PathPatterns();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2467);
      oC_ExistSubquery();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2468);
      kU_CountSubquery();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2469);
      oC_Variable();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2470);
      oC_Quantifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QuantifierContext ------------------------------------------------------------------

CypherParser::OC_QuantifierContext::OC_QuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_FilterExpressionContext* CypherParser::OC_QuantifierContext::oC_FilterExpression() {
  return getRuleContext<CypherParser::OC_FilterExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_QuantifierContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::ANY() {
  return getToken(CypherParser::ANY, 0);
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::NONE() {
  return getToken(CypherParser::NONE, 0);
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::SINGLE() {
  return getToken(CypherParser::SINGLE, 0);
}


size_t CypherParser::OC_QuantifierContext::getRuleIndex() const {
  return CypherParser::RuleOC_Quantifier;
}


CypherParser::OC_QuantifierContext* CypherParser::oC_Quantifier() {
  OC_QuantifierContext *_localctx = _tracker.createInstance<OC_QuantifierContext>(_ctx, getState());
  enterRule(_localctx, 288, CypherParser::RuleOC_Quantifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2529);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ALL: {
        enterOuterAlt(_localctx, 1);
        setState(2473);
        match(CypherParser::ALL);
        setState(2475);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2474);
          match(CypherParser::SP);
        }
        setState(2477);
        match(CypherParser::T__1);
        setState(2479);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2478);
          match(CypherParser::SP);
        }
        setState(2481);
        oC_FilterExpression();
        setState(2483);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2482);
          match(CypherParser::SP);
        }
        setState(2485);
        match(CypherParser::T__3);
        break;
      }

      case CypherParser::ANY: {
        enterOuterAlt(_localctx, 2);
        setState(2487);
        match(CypherParser::ANY);
        setState(2489);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2488);
          match(CypherParser::SP);
        }
        setState(2491);
        match(CypherParser::T__1);
        setState(2493);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2492);
          match(CypherParser::SP);
        }
        setState(2495);
        oC_FilterExpression();
        setState(2497);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2496);
          match(CypherParser::SP);
        }
        setState(2499);
        match(CypherParser::T__3);
        break;
      }

      case CypherParser::NONE: {
        enterOuterAlt(_localctx, 3);
        setState(2501);
        match(CypherParser::NONE);
        setState(2503);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2502);
          match(CypherParser::SP);
        }
        setState(2505);
        match(CypherParser::T__1);
        setState(2507);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2506);
          match(CypherParser::SP);
        }
        setState(2509);
        oC_FilterExpression();
        setState(2511);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2510);
          match(CypherParser::SP);
        }
        setState(2513);
        match(CypherParser::T__3);
        break;
      }

      case CypherParser::SINGLE: {
        enterOuterAlt(_localctx, 4);
        setState(2515);
        match(CypherParser::SINGLE);
        setState(2517);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2516);
          match(CypherParser::SP);
        }
        setState(2519);
        match(CypherParser::T__1);
        setState(2521);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2520);
          match(CypherParser::SP);
        }
        setState(2523);
        oC_FilterExpression();
        setState(2525);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2524);
          match(CypherParser::SP);
        }
        setState(2527);
        match(CypherParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FilterExpressionContext ------------------------------------------------------------------

CypherParser::OC_FilterExpressionContext::OC_FilterExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IdInCollContext* CypherParser::OC_FilterExpressionContext::oC_IdInColl() {
  return getRuleContext<CypherParser::OC_IdInCollContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_FilterExpressionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_FilterExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_FilterExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_FilterExpression;
}


CypherParser::OC_FilterExpressionContext* CypherParser::oC_FilterExpression() {
  OC_FilterExpressionContext *_localctx = _tracker.createInstance<OC_FilterExpressionContext>(_ctx, getState());
  enterRule(_localctx, 290, CypherParser::RuleOC_FilterExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2531);
    oC_IdInColl();
    setState(2536);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 419, _ctx)) {
    case 1: {
      setState(2533);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2532);
        match(CypherParser::SP);
      }
      setState(2535);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IdInCollContext ------------------------------------------------------------------

CypherParser::OC_IdInCollContext::OC_IdInCollContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_IdInCollContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_IdInCollContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_IdInCollContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_IdInCollContext::IN() {
  return getToken(CypherParser::IN, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_IdInCollContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_IdInCollContext::getRuleIndex() const {
  return CypherParser::RuleOC_IdInColl;
}


CypherParser::OC_IdInCollContext* CypherParser::oC_IdInColl() {
  OC_IdInCollContext *_localctx = _tracker.createInstance<OC_IdInCollContext>(_ctx, getState());
  enterRule(_localctx, 292, CypherParser::RuleOC_IdInColl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2538);
    oC_Variable();
    setState(2539);
    match(CypherParser::SP);
    setState(2540);
    match(CypherParser::IN);
    setState(2541);
    match(CypherParser::SP);
    setState(2542);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

CypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NumberLiteralContext* CypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<CypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_BooleanLiteralContext* CypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<CypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

CypherParser::OC_ListLiteralContext* CypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<CypherParser::OC_ListLiteralContext>(0);
}

CypherParser::KU_StructLiteralContext* CypherParser::OC_LiteralContext::kU_StructLiteral() {
  return getRuleContext<CypherParser::KU_StructLiteralContext>(0);
}


size_t CypherParser::OC_LiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_Literal;
}


CypherParser::OC_LiteralContext* CypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
  enterRule(_localctx, 294, CypherParser::RuleOC_Literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2550);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::DecimalInteger:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2544);
        oC_NumberLiteral();
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(2545);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::FALSE:
      case CypherParser::TRUE: {
        enterOuterAlt(_localctx, 3);
        setState(2546);
        oC_BooleanLiteral();
        break;
      }

      case CypherParser::NULL_: {
        enterOuterAlt(_localctx, 4);
        setState(2547);
        match(CypherParser::NULL_);
        break;
      }

      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 5);
        setState(2548);
        oC_ListLiteral();
        break;
      }

      case CypherParser::T__8: {
        enterOuterAlt(_localctx, 6);
        setState(2549);
        kU_StructLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

CypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::TRUE() {
  return getToken(CypherParser::TRUE, 0);
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::FALSE() {
  return getToken(CypherParser::FALSE, 0);
}


size_t CypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_BooleanLiteral;
}


CypherParser::OC_BooleanLiteralContext* CypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 296, CypherParser::RuleOC_BooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2552);
    _la = _input->LA(1);
    if (!(_la == CypherParser::FALSE

    || _la == CypherParser::TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

CypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<CypherParser::KU_ListEntryContext *> CypherParser::OC_ListLiteralContext::kU_ListEntry() {
  return getRuleContexts<CypherParser::KU_ListEntryContext>();
}

CypherParser::KU_ListEntryContext* CypherParser::OC_ListLiteralContext::kU_ListEntry(size_t i) {
  return getRuleContext<CypherParser::KU_ListEntryContext>(i);
}


size_t CypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListLiteral;
}


CypherParser::OC_ListLiteralContext* CypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 298, CypherParser::RuleOC_ListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2554);
    match(CypherParser::T__6);
    setState(2556);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2555);
      match(CypherParser::SP);
    }
    setState(2571);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2320550076679716220) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 9007753110927321399) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 1307437573899) != 0)) {
      setState(2558);
      oC_Expression();
      setState(2560);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2559);
        match(CypherParser::SP);
      }
      setState(2568);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(2562);
        kU_ListEntry();
        setState(2564);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2563);
          match(CypherParser::SP);
        }
        setState(2570);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2573);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListEntryContext ------------------------------------------------------------------

CypherParser::KU_ListEntryContext::KU_ListEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ListEntryContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListEntryContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_ListEntryContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListEntry;
}


CypherParser::KU_ListEntryContext* CypherParser::kU_ListEntry() {
  KU_ListEntryContext *_localctx = _tracker.createInstance<KU_ListEntryContext>(_ctx, getState());
  enterRule(_localctx, 300, CypherParser::RuleKU_ListEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2575);
    match(CypherParser::T__2);
    setState(2577);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 426, _ctx)) {
    case 1: {
      setState(2576);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2580);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2320550076679716220) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 9007753110927321399) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 1307437573899) != 0)) {
      setState(2579);
      oC_Expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructLiteralContext ------------------------------------------------------------------

CypherParser::KU_StructLiteralContext::KU_StructLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_StructFieldContext *> CypherParser::KU_StructLiteralContext::kU_StructField() {
  return getRuleContexts<CypherParser::KU_StructFieldContext>();
}

CypherParser::KU_StructFieldContext* CypherParser::KU_StructLiteralContext::kU_StructField(size_t i) {
  return getRuleContext<CypherParser::KU_StructFieldContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructLiteralContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructLiteral;
}


CypherParser::KU_StructLiteralContext* CypherParser::kU_StructLiteral() {
  KU_StructLiteralContext *_localctx = _tracker.createInstance<KU_StructLiteralContext>(_ctx, getState());
  enterRule(_localctx, 302, CypherParser::RuleKU_StructLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2582);
    match(CypherParser::T__8);
    setState(2584);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2583);
      match(CypherParser::SP);
    }
    setState(2586);
    kU_StructField();
    setState(2588);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2587);
      match(CypherParser::SP);
    }
    setState(2600);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(2590);
      match(CypherParser::T__2);
      setState(2592);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2591);
        match(CypherParser::SP);
      }
      setState(2594);
      kU_StructField();
      setState(2596);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2595);
        match(CypherParser::SP);
      }
      setState(2602);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2603);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructFieldContext ------------------------------------------------------------------

CypherParser::KU_StructFieldContext::KU_StructFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StructFieldContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StructFieldContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructFieldContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructFieldContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructField;
}


CypherParser::KU_StructFieldContext* CypherParser::kU_StructField() {
  KU_StructFieldContext *_localctx = _tracker.createInstance<KU_StructFieldContext>(_ctx, getState());
  enterRule(_localctx, 304, CypherParser::RuleKU_StructField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2607);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2605);
        oC_SymbolicName();
        break;
      }

      case CypherParser::StringLiteral: {
        setState(2606);
        match(CypherParser::StringLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2610);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2609);
      match(CypherParser::SP);
    }
    setState(2612);
    match(CypherParser::COLON);
    setState(2614);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2613);
      match(CypherParser::SP);
    }
    setState(2616);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

CypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ParenthesizedExpression;
}


CypherParser::OC_ParenthesizedExpressionContext* CypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 306, CypherParser::RuleOC_ParenthesizedExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2618);
    match(CypherParser::T__1);
    setState(2620);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2619);
      match(CypherParser::SP);
    }
    setState(2622);
    oC_Expression();
    setState(2624);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2623);
      match(CypherParser::SP);
    }
    setState(2626);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

CypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::CAST() {
  return getToken(CypherParser::CAST, 0);
}

std::vector<CypherParser::KU_FunctionParameterContext *> CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter() {
  return getRuleContexts<CypherParser::KU_FunctionParameterContext>();
}

CypherParser::KU_FunctionParameterContext* CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter(size_t i) {
  return getRuleContext<CypherParser::KU_FunctionParameterContext>(i);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::OC_FunctionInvocationContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

CypherParser::OC_FunctionNameContext* CypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}


size_t CypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionInvocation;
}


CypherParser::OC_FunctionInvocationContext* CypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
  enterRule(_localctx, 308, CypherParser::RuleOC_FunctionInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2705);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 457, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2628);
      match(CypherParser::COUNT);
      setState(2630);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2629);
        match(CypherParser::SP);
      }
      setState(2632);
      match(CypherParser::T__1);
      setState(2634);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2633);
        match(CypherParser::SP);
      }
      setState(2636);
      match(CypherParser::STAR);
      setState(2638);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2637);
        match(CypherParser::SP);
      }
      setState(2640);
      match(CypherParser::T__3);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2641);
      match(CypherParser::CAST);
      setState(2643);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2642);
        match(CypherParser::SP);
      }
      setState(2645);
      match(CypherParser::T__1);
      setState(2647);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2646);
        match(CypherParser::SP);
      }
      setState(2649);
      kU_FunctionParameter();
      setState(2651);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2650);
        match(CypherParser::SP);
      }
      setState(2663);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CypherParser::AS: {
          setState(2653);
          match(CypherParser::AS);
          setState(2655);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2654);
            match(CypherParser::SP);
          }
          setState(2657);
          kU_DataType(0);
          break;
        }

        case CypherParser::T__2: {
          setState(2658);
          match(CypherParser::T__2);
          setState(2660);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2659);
            match(CypherParser::SP);
          }
          setState(2662);
          kU_FunctionParameter();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2666);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2665);
        match(CypherParser::SP);
      }
      setState(2668);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2670);
      oC_FunctionName();
      setState(2672);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2671);
        match(CypherParser::SP);
      }
      setState(2674);
      match(CypherParser::T__1);
      setState(2676);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2675);
        match(CypherParser::SP);
      }
      setState(2682);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DISTINCT) {
        setState(2678);
        match(CypherParser::DISTINCT);
        setState(2680);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2679);
          match(CypherParser::SP);
        }
      }
      setState(2701);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -2320550076679716220) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 9007753110927321399) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 1307437573899) != 0)) {
        setState(2684);
        kU_FunctionParameter();
        setState(2686);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2685);
          match(CypherParser::SP);
        }
        setState(2698);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2) {
          setState(2688);
          match(CypherParser::T__2);
          setState(2690);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2689);
            match(CypherParser::SP);
          }
          setState(2692);
          kU_FunctionParameter();
          setState(2694);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2693);
            match(CypherParser::SP);
          }
          setState(2700);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(2703);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

CypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionName;
}


CypherParser::OC_FunctionNameContext* CypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 310, CypherParser::RuleOC_FunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2707);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FunctionParameterContext ------------------------------------------------------------------

CypherParser::KU_FunctionParameterContext::KU_FunctionParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_FunctionParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_FunctionParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FunctionParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::KU_LambdaParameterContext* CypherParser::KU_FunctionParameterContext::kU_LambdaParameter() {
  return getRuleContext<CypherParser::KU_LambdaParameterContext>(0);
}


size_t CypherParser::KU_FunctionParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_FunctionParameter;
}


CypherParser::KU_FunctionParameterContext* CypherParser::kU_FunctionParameter() {
  KU_FunctionParameterContext *_localctx = _tracker.createInstance<KU_FunctionParameterContext>(_ctx, getState());
  enterRule(_localctx, 312, CypherParser::RuleKU_FunctionParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2722);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 461, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2718);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 460, _ctx)) {
      case 1: {
        setState(2709);
        oC_SymbolicName();
        setState(2711);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2710);
          match(CypherParser::SP);
        }
        setState(2713);
        match(CypherParser::COLON);
        setState(2714);
        match(CypherParser::T__5);
        setState(2716);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2715);
          match(CypherParser::SP);
        }
        break;
      }

      default:
        break;
      }
      setState(2720);
      oC_Expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2721);
      kU_LambdaParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LambdaParameterContext ------------------------------------------------------------------

CypherParser::KU_LambdaParameterContext::KU_LambdaParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LambdaVarsContext* CypherParser::KU_LambdaParameterContext::kU_LambdaVars() {
  return getRuleContext<CypherParser::KU_LambdaVarsContext>(0);
}

tree::TerminalNode* CypherParser::KU_LambdaParameterContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_LambdaParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LambdaParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LambdaParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_LambdaParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_LambdaParameter;
}


CypherParser::KU_LambdaParameterContext* CypherParser::kU_LambdaParameter() {
  KU_LambdaParameterContext *_localctx = _tracker.createInstance<KU_LambdaParameterContext>(_ctx, getState());
  enterRule(_localctx, 314, CypherParser::RuleKU_LambdaParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2724);
    kU_LambdaVars();
    setState(2726);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2725);
      match(CypherParser::SP);
    }
    setState(2728);
    match(CypherParser::MINUS);
    setState(2729);
    match(CypherParser::T__15);
    setState(2731);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2730);
      match(CypherParser::SP);
    }
    setState(2733);
    oC_Expression();
    setState(2735);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 464, _ctx)) {
    case 1: {
      setState(2734);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LambdaVarsContext ------------------------------------------------------------------

CypherParser::KU_LambdaVarsContext::KU_LambdaVarsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_LambdaVarsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_LambdaVarsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LambdaVarsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LambdaVarsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_LambdaVarsContext::getRuleIndex() const {
  return CypherParser::RuleKU_LambdaVars;
}


CypherParser::KU_LambdaVarsContext* CypherParser::kU_LambdaVars() {
  KU_LambdaVarsContext *_localctx = _tracker.createInstance<KU_LambdaVarsContext>(_ctx, getState());
  enterRule(_localctx, 316, CypherParser::RuleKU_LambdaVars);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2761);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(2737);
        oC_SymbolicName();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(2738);
        match(CypherParser::T__1);
        setState(2740);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2739);
          match(CypherParser::SP);
        }
        setState(2742);
        oC_SymbolicName();
        setState(2744);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2743);
          match(CypherParser::SP);
        }
        setState(2756);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2) {
          setState(2746);
          match(CypherParser::T__2);
          setState(2748);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2747);
            match(CypherParser::SP);
          }
          setState(2750);
          oC_SymbolicName();
          setState(2752);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2751);
            match(CypherParser::SP);
          }
          setState(2758);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2759);
        match(CypherParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PathPatternsContext ------------------------------------------------------------------

CypherParser::OC_PathPatternsContext::OC_PathPatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PathPatternsContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PathPatternsContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PathPatternsContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PathPatternsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PathPatternsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PathPatternsContext::getRuleIndex() const {
  return CypherParser::RuleOC_PathPatterns;
}


CypherParser::OC_PathPatternsContext* CypherParser::oC_PathPatterns() {
  OC_PathPatternsContext *_localctx = _tracker.createInstance<OC_PathPatternsContext>(_ctx, getState());
  enterRule(_localctx, 318, CypherParser::RuleOC_PathPatterns);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2763);
    oC_NodePattern();
    setState(2768); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2765);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(2764);
                match(CypherParser::SP);
              }
              setState(2767);
              oC_PatternElementChain();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2770); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 472, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExistSubqueryContext ------------------------------------------------------------------

CypherParser::OC_ExistSubqueryContext::OC_ExistSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_ExistSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExistSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_ExistSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_ExistSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_ExistSubquery;
}


CypherParser::OC_ExistSubqueryContext* CypherParser::oC_ExistSubquery() {
  OC_ExistSubqueryContext *_localctx = _tracker.createInstance<OC_ExistSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 320, CypherParser::RuleOC_ExistSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2772);
    match(CypherParser::EXISTS);
    setState(2774);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2773);
      match(CypherParser::SP);
    }
    setState(2776);
    match(CypherParser::T__8);
    setState(2778);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2777);
      match(CypherParser::SP);
    }
    setState(2780);
    match(CypherParser::MATCH);
    setState(2782);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2781);
      match(CypherParser::SP);
    }
    setState(2784);
    oC_Pattern();
    setState(2789);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 477, _ctx)) {
    case 1: {
      setState(2786);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2785);
        match(CypherParser::SP);
      }
      setState(2788);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2792);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2791);
      match(CypherParser::SP);
    }
    setState(2794);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CountSubqueryContext ------------------------------------------------------------------

CypherParser::KU_CountSubqueryContext::KU_CountSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::KU_CountSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CountSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_CountSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_CountSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleKU_CountSubquery;
}


CypherParser::KU_CountSubqueryContext* CypherParser::kU_CountSubquery() {
  KU_CountSubqueryContext *_localctx = _tracker.createInstance<KU_CountSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 322, CypherParser::RuleKU_CountSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2796);
    match(CypherParser::COUNT);
    setState(2798);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2797);
      match(CypherParser::SP);
    }
    setState(2800);
    match(CypherParser::T__8);
    setState(2802);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2801);
      match(CypherParser::SP);
    }
    setState(2804);
    match(CypherParser::MATCH);
    setState(2806);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2805);
      match(CypherParser::SP);
    }
    setState(2808);
    oC_Pattern();
    setState(2813);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 483, _ctx)) {
    case 1: {
      setState(2810);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2809);
        match(CypherParser::SP);
      }
      setState(2812);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2816);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2815);
      match(CypherParser::SP);
    }
    setState(2818);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

CypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyLookup;
}


CypherParser::OC_PropertyLookupContext* CypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
  enterRule(_localctx, 324, CypherParser::RuleOC_PropertyLookup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2820);
    match(CypherParser::T__4);
    setState(2822);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2821);
      match(CypherParser::SP);
    }
    setState(2826);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2824);
        oC_PropertyKeyName();
        break;
      }

      case CypherParser::STAR: {
        setState(2825);
        match(CypherParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

CypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(CypherParser::ELSE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(CypherParser::CASE, 0);
}

std::vector<CypherParser::OC_CaseAlternativeContext *> CypherParser::OC_CaseExpressionContext::oC_CaseAlternative() {
  return getRuleContexts<CypherParser::OC_CaseAlternativeContext>();
}

CypherParser::OC_CaseAlternativeContext* CypherParser::OC_CaseExpressionContext::oC_CaseAlternative(size_t i) {
  return getRuleContext<CypherParser::OC_CaseAlternativeContext>(i);
}


size_t CypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseExpression;
}


CypherParser::OC_CaseExpressionContext* CypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 326, CypherParser::RuleOC_CaseExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2850);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 492, _ctx)) {
    case 1: {
      setState(2828);
      match(CypherParser::CASE);
      setState(2833); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2830);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2829);
                  match(CypherParser::SP);
                }
                setState(2832);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2835); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 488, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(2837);
      match(CypherParser::CASE);
      setState(2839);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2838);
        match(CypherParser::SP);
      }
      setState(2841);
      oC_Expression();
      setState(2846); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2843);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2842);
                  match(CypherParser::SP);
                }
                setState(2845);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2848); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 491, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
    setState(2860);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 495, _ctx)) {
    case 1: {
      setState(2853);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2852);
        match(CypherParser::SP);
      }
      setState(2855);
      match(CypherParser::ELSE);
      setState(2857);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2856);
        match(CypherParser::SP);
      }
      setState(2859);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(2863);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2862);
      match(CypherParser::SP);
    }
    setState(2865);
    match(CypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativeContext ------------------------------------------------------------------

CypherParser::OC_CaseAlternativeContext::OC_CaseAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::WHEN() {
  return getToken(CypherParser::WHEN, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseAlternativeContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseAlternativeContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::THEN() {
  return getToken(CypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseAlternativeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CaseAlternativeContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseAlternative;
}


CypherParser::OC_CaseAlternativeContext* CypherParser::oC_CaseAlternative() {
  OC_CaseAlternativeContext *_localctx = _tracker.createInstance<OC_CaseAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 328, CypherParser::RuleOC_CaseAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2867);
    match(CypherParser::WHEN);
    setState(2869);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2868);
      match(CypherParser::SP);
    }
    setState(2871);
    oC_Expression();
    setState(2873);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2872);
      match(CypherParser::SP);
    }
    setState(2875);
    match(CypherParser::THEN);
    setState(2877);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2876);
      match(CypherParser::SP);
    }
    setState(2879);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

CypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_VariableContext::getRuleIndex() const {
  return CypherParser::RuleOC_Variable;
}


CypherParser::OC_VariableContext* CypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
  enterRule(_localctx, 330, CypherParser::RuleOC_Variable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2881);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

CypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_DoubleLiteralContext* CypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<CypherParser::OC_DoubleLiteralContext>(0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_NumberLiteral;
}


CypherParser::OC_NumberLiteralContext* CypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 332, CypherParser::RuleOC_NumberLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2885);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2883);
        oC_DoubleLiteral();
        break;
      }

      case CypherParser::DecimalInteger: {
        enterOuterAlt(_localctx, 2);
        setState(2884);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

CypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_ParameterContext::getRuleIndex() const {
  return CypherParser::RuleOC_Parameter;
}


CypherParser::OC_ParameterContext* CypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
  enterRule(_localctx, 334, CypherParser::RuleOC_Parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2887);
    match(CypherParser::T__25);
    setState(2890);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2888);
        oC_SymbolicName();
        break;
      }

      case CypherParser::DecimalInteger: {
        setState(2889);
        match(CypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyExpression;
}


CypherParser::OC_PropertyExpressionContext* CypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 336, CypherParser::RuleOC_PropertyExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2892);
    oC_Atom();
    setState(2894);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2893);
      match(CypherParser::SP);
    }
    setState(2896);
    oC_PropertyLookup();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

CypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyKeyName;
}


CypherParser::OC_PropertyKeyNameContext* CypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
  enterRule(_localctx, 338, CypherParser::RuleOC_PropertyKeyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2898);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

CypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_IntegerLiteral;
}


CypherParser::OC_IntegerLiteralContext* CypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 340, CypherParser::RuleOC_IntegerLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2900);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

CypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(CypherParser::RegularDecimalReal, 0);
}


size_t CypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_DoubleLiteral;
}


CypherParser::OC_DoubleLiteralContext* CypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 342, CypherParser::RuleOC_DoubleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2902);
    match(CypherParser::RegularDecimalReal);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

CypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SchemaName;
}


CypherParser::OC_SchemaNameContext* CypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 344, CypherParser::RuleOC_SchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2904);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

CypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(CypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(CypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(CypherParser::HexLetter, 0);
}

CypherParser::KU_NonReservedKeywordsContext* CypherParser::OC_SymbolicNameContext::kU_NonReservedKeywords() {
  return getRuleContext<CypherParser::KU_NonReservedKeywordsContext>(0);
}


size_t CypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SymbolicName;
}


CypherParser::OC_SymbolicNameContext* CypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
  enterRule(_localctx, 346, CypherParser::RuleOC_SymbolicName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2911);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::UnescapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(2906);
        match(CypherParser::UnescapedSymbolicName);
        break;
      }

      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(2907);
        antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken = match(CypherParser::EscapedSymbolicName);
        if ((antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken != nullptr ? antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken->getText() : "") == "``") { notifyEmptyToken(antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken); }
        break;
      }

      case CypherParser::HexLetter: {
        enterOuterAlt(_localctx, 3);
        setState(2909);
        match(CypherParser::HexLetter);
        break;
      }

      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP: {
        enterOuterAlt(_localctx, 4);
        setState(2910);
        kU_NonReservedKeywords();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_NonReservedKeywordsContext ------------------------------------------------------------------

CypherParser::KU_NonReservedKeywordsContext::KU_NonReservedKeywordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMENT() {
  return getToken(CypherParser::COMMENT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::AS() {
  return getToken(CypherParser::AS, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ATTACH() {
  return getToken(CypherParser::ATTACH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CHECKPOINT() {
  return getToken(CypherParser::CHECKPOINT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DECIMAL() {
  return getToken(CypherParser::DECIMAL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::GRAPH() {
  return getToken(CypherParser::GRAPH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IF() {
  return getToken(CypherParser::IF, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::PROJECT() {
  return getToken(CypherParser::PROJECT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::SET() {
  return getToken(CypherParser::SET, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::START() {
  return getToken(CypherParser::START, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::TYPE() {
  return getToken(CypherParser::TYPE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::WRITE() {
  return getToken(CypherParser::WRITE, 0);
}


size_t CypherParser::KU_NonReservedKeywordsContext::getRuleIndex() const {
  return CypherParser::RuleKU_NonReservedKeywords;
}


CypherParser::KU_NonReservedKeywordsContext* CypherParser::kU_NonReservedKeywords() {
  KU_NonReservedKeywordsContext *_localctx = _tracker.createInstance<KU_NonReservedKeywordsContext>(_ctx, getState());
  enterRule(_localctx, 348, CypherParser::RuleKU_NonReservedKeywords);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2913);
    _la = _input->LA(1);
    if (!(((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & -2383877064657885291) != 0) || ((((_la - 121) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 121)) & 1378159485) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_LeftArrowHead;
}


CypherParser::OC_LeftArrowHeadContext* CypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 350, CypherParser::RuleOC_LeftArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2915);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2013282304) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_RightArrowHead;
}


CypherParser::OC_RightArrowHeadContext* CypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 352, CypherParser::RuleOC_RightArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2917);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 32212320256) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

CypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DashContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::OC_DashContext::getRuleIndex() const {
  return CypherParser::RuleOC_Dash;
}


CypherParser::OC_DashContext* CypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
  enterRule(_localctx, 354, CypherParser::RuleOC_Dash);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2919);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 70334384439296) != 0) || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CypherParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 54: return kU_DataTypeSempred(antlrcpp::downCast<KU_DataTypeContext *>(context), predicateIndex);
    case 82: return kU_JoinNodeSempred(antlrcpp::downCast<KU_JoinNodeContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_DataTypeSempred(KU_DataTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 5);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_JoinNodeSempred(KU_JoinNodeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 4);
    case 2: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

void CypherParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cypherParserInitialize();
#else
  ::antlr4::internal::call_once(cypherParserOnceFlag, cypherParserInitialize);
#endif
}
