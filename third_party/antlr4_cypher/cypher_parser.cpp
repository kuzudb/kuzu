
// Generated from Cypher.g4 by ANTLR 4.13.1



#include "cypher_parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct CypherParserStaticData final {
  CypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CypherParserStaticData(const CypherParserStaticData&) = delete;
  CypherParserStaticData(CypherParserStaticData&&) = delete;
  CypherParserStaticData& operator=(const CypherParserStaticData&) = delete;
  CypherParserStaticData& operator=(CypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cypherParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CypherParserStaticData *cypherParserStaticData = nullptr;

void cypherParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cypherParserStaticData != nullptr) {
    return;
  }
#else
  assert(cypherParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CypherParserStaticData>(
    std::vector<std::string>{
      "ku_Statements", "oC_Cypher", "oC_Statement", "kU_CopyFrom", "kU_ColumnNames", 
      "kU_ScanSource", "kU_CopyFromByColumn", "kU_CopyTO", "kU_ExportDatabase", 
      "kU_ImportDatabase", "kU_AttachDatabase", "kU_Option", "kU_Options", 
      "kU_DetachDatabase", "kU_UseDatabase", "kU_StandaloneCall", "kU_CommentOn", 
      "kU_CreateMacro", "kU_PositionalArgs", "kU_DefaultArg", "kU_FilePaths", 
      "kU_ParsingOptions", "kU_CreateNodeTable", "kU_CreateRelTable", "kU_CreateRelTableGroup", 
      "kU_RelTableConnection", "kU_CreateRdfGraph", "kU_CreateSequence", 
      "kU_SequenceOptions", "kU_IncrementBy", "kU_MinValue", "kU_MaxValue", 
      "kU_StartWith", "kU_Cycle", "kU_Drop", "kU_AlterTable", "kU_AlterOptions", 
      "kU_AddProperty", "kU_DropProperty", "kU_RenameTable", "kU_RenameProperty", 
      "kU_PropertyDefinitions", "kU_PropertyDefinition", "kU_CreateNodeConstraint", 
      "kU_DataType", "kU_ListIdentifiers", "kU_ListIdentifier", "oC_AnyCypherOption", 
      "oC_Explain", "oC_Profile", "kU_Transaction", "kU_Extension", "kU_LoadExtension", 
      "kU_InstallExtension", "oC_Query", "oC_RegularQuery", "oC_Union", 
      "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", "kU_QueryPart", 
      "oC_UpdatingClause", "oC_ReadingClause", "kU_LoadFrom", "kU_InQueryCall", 
      "oC_Match", "oC_Unwind", "oC_Create", "oC_Merge", "oC_MergeAction", 
      "oC_Set", "oC_SetItem", "oC_Delete", "oC_With", "oC_Return", "oC_ProjectionBody", 
      "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", "oC_Skip", 
      "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", "oC_PatternPart", 
      "oC_AnonymousPatternPart", "oC_PatternElement", "oC_NodePattern", 
      "oC_PatternElementChain", "oC_RelationshipPattern", "oC_RelationshipDetail", 
      "kU_Properties", "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
      "oC_RangeLiteral", "kU_RecursiveRelationshipComprehension", "kU_IntermediateNodeProjectionItems", 
      "kU_IntermediateRelProjectionItems", "oC_LowerBound", "oC_UpperBound", 
      "oC_LabelName", "oC_RelTypeName", "oC_Expression", "oC_OrExpression", 
      "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression", 
      "kU_ComparisonOperator", "kU_BitwiseOrOperatorExpression", "kU_BitwiseAndOperatorExpression", 
      "kU_BitShiftOperatorExpression", "kU_BitShiftOperator", "oC_AddOrSubtractExpression", 
      "kU_AddOrSubtractOperator", "oC_MultiplyDivideModuloExpression", "kU_MultiplyDivideModuloOperator", 
      "oC_PowerOfExpression", "oC_UnaryAddSubtractOrFactorialExpression", 
      "oC_StringListNullOperatorExpression", "oC_ListOperatorExpression", 
      "oC_StringOperatorExpression", "oC_RegularExpression", "oC_NullOperatorExpression", 
      "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Literal", "oC_BooleanLiteral", 
      "oC_ListLiteral", "kU_ListEntry", "kU_StructLiteral", "kU_StructField", 
      "oC_ParenthesizedExpression", "oC_FunctionInvocation", "oC_FunctionName", 
      "kU_FunctionParameter", "oC_PathPatterns", "oC_ExistSubquery", "kU_CountSubquery", 
      "oC_PropertyLookup", "oC_CaseExpression", "oC_CaseAlternative", "oC_Variable", 
      "oC_NumberLiteral", "oC_Parameter", "oC_PropertyExpression", "oC_PropertyKeyName", 
      "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_SchemaName", "oC_SymbolicName", 
      "kU_NonReservedKeywords", "oC_LeftArrowHead", "oC_RightArrowHead", 
      "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "'('", "','", "')'", "'.'", "'='", "'['", "']'", "'{'", 
      "'}'", "'|'", "'..'", "'<>'", "'<'", "'<='", "'>'", "'>='", "'&'", 
      "'>>'", "'<<'", "'+'", "'/'", "'%'", "'^'", "'=~'", "'$'", "'\\u27E8'", 
      "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", "'\\uFE65'", 
      "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", 
      "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", "'\\uFF0D'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "'*'", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "'!='", "'-'", "'!'", 
      "':'", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "ATTACH", "DBTYPE", 
      "USE", "CALL", "COMMENT_", "MACRO", "GLOB", "COPY", "FROM", "COLUMN", 
      "EXPORT", "IMPORT", "DATABASE", "NODE", "TABLE", "GROUP", "RDFGRAPH", 
      "SEQUENCE", "INCREMENT", "MINVALUE", "MAXVALUE", "START", "NO", "CYCLE", 
      "DROP", "ALTER", "DEFAULT", "RENAME", "ADD", "PRIMARY", "KEY", "REL", 
      "TO", "DECIMAL", "EXPLAIN", "PROFILE", "BEGIN", "TRANSACTION", "READ", 
      "ONLY", "WRITE", "COMMIT", "COMMIT_SKIP_CHECKPOINT", "ROLLBACK", "ROLLBACK_SKIP_CHECKPOINT", 
      "INSTALL", "EXTENSION", "UNION", "ALL", "LOAD", "HEADERS", "OPTIONAL", 
      "MATCH", "UNWIND", "CREATE", "MERGE", "ON", "SET", "DETACH", "DELETE", 
      "WITH", "RETURN", "DISTINCT", "STAR", "AS", "ORDER", "BY", "L_SKIP", 
      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", "WHERE", "SHORTEST", 
      "OR", "XOR", "AND", "NOT", "INVALID_NOT_EQUAL", "MINUS", "FACTORIAL", 
      "COLON", "IN", "STARTS", "ENDS", "CONTAINS", "IS", "NULL_", "TRUE", 
      "FALSE", "COUNT", "EXISTS", "CASE", "ELSE", "END", "WHEN", "THEN", 
      "StringLiteral", "EscapedChar", "DecimalInteger", "HexLetter", "HexDigit", 
      "Digit", "NonZeroDigit", "NonZeroOctDigit", "ZeroDigit", "RegularDecimalReal", 
      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", 
      "SP", "WHITESPACE", "Comment", "Unknown"
    }
  );
  static const int32_t serializedATNSegment[] = {
<<<<<<< HEAD
  	4,1,161,2454,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
=======
  	4,1,160,2437,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,1,0,1,0,3,0,315,8,0,1,0,1,0,
  	3,0,319,8,0,1,0,5,0,322,8,0,10,0,12,0,325,9,0,1,0,3,0,328,8,0,1,0,1,0,
  	1,1,3,1,333,8,1,1,1,3,1,336,8,1,1,1,1,1,3,1,340,8,1,1,1,3,1,343,8,1,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
  	1,2,1,2,1,2,3,2,366,8,2,1,3,1,3,1,3,1,3,3,3,372,8,3,1,3,1,3,3,3,376,8,
  	3,1,3,3,3,379,8,3,1,3,1,3,1,3,1,3,3,3,385,8,3,1,3,3,3,388,8,3,1,4,1,4,
  	3,4,392,8,4,1,4,1,4,3,4,396,8,4,1,4,1,4,3,4,400,8,4,1,4,5,4,403,8,4,10,
  	4,12,4,406,9,4,1,4,3,4,409,8,4,1,4,1,4,1,5,1,5,1,5,3,5,416,8,5,1,5,1,
  	5,3,5,420,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,428,8,5,1,5,1,5,3,5,432,8,5,
  	1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,442,8,6,1,6,1,6,3,6,446,8,6,1,6,1,
  	6,3,6,450,8,6,1,6,5,6,453,8,6,10,6,12,6,456,9,6,1,6,1,6,1,6,1,6,1,6,1,
  	6,1,7,1,7,1,7,1,7,3,7,468,8,7,1,7,1,7,3,7,472,8,7,1,7,1,7,1,7,1,7,1,7,
  	1,7,3,7,480,8,7,1,7,3,7,483,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,491,8,8,1,
  	8,3,8,494,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
  	10,3,10,509,8,10,1,10,1,10,1,10,3,10,514,8,10,1,10,1,10,1,10,1,10,3,10,
  	520,8,10,1,10,1,10,3,10,524,8,10,1,10,3,10,527,8,10,1,10,3,10,530,8,10,
  	1,10,1,10,1,11,1,11,3,11,536,8,11,1,11,1,11,3,11,540,8,11,1,11,1,11,1,
  	12,1,12,3,12,546,8,12,1,12,1,12,3,12,550,8,12,1,12,5,12,553,8,12,10,12,
  	12,12,556,9,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
  	1,15,3,15,570,8,15,1,15,1,15,3,15,574,8,15,1,15,1,15,1,16,1,16,1,16,1,
  	16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,
  	17,3,17,596,8,17,1,17,1,17,3,17,600,8,17,1,17,3,17,603,8,17,1,17,3,17,
  	606,8,17,1,17,3,17,609,8,17,1,17,3,17,612,8,17,1,17,1,17,3,17,616,8,17,
  	1,17,5,17,619,8,17,10,17,12,17,622,9,17,1,17,3,17,625,8,17,1,17,1,17,
  	1,17,1,17,1,17,1,17,1,18,1,18,3,18,635,8,18,1,18,1,18,3,18,639,8,18,1,
  	18,5,18,642,8,18,10,18,12,18,645,9,18,1,19,1,19,3,19,649,8,19,1,19,1,
  	19,1,19,3,19,654,8,19,1,19,1,19,1,20,1,20,3,20,660,8,20,1,20,1,20,3,20,
  	664,8,20,1,20,1,20,3,20,668,8,20,1,20,5,20,671,8,20,10,20,12,20,674,9,
  	20,1,20,1,20,1,20,1,20,3,20,680,8,20,1,20,1,20,3,20,684,8,20,1,20,1,20,
  	3,20,688,8,20,1,20,3,20,691,8,20,1,21,1,21,3,21,695,8,21,1,21,1,21,3,
  	21,699,8,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,711,
  	8,22,1,22,1,22,3,22,715,8,22,1,22,1,22,3,22,719,8,22,1,22,1,22,3,22,723,
  	8,22,1,22,1,22,1,22,3,22,728,8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,3,23,740,8,23,1,23,1,23,3,23,744,8,23,1,23,1,23,3,23,748,
  	8,23,1,23,1,23,3,23,752,8,23,1,23,1,23,3,23,756,8,23,3,23,758,8,23,1,
  	23,1,23,3,23,762,8,23,1,23,1,23,3,23,766,8,23,3,23,768,8,23,1,23,1,23,
  	1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,782,8,24,1,24,
  	1,24,3,24,786,8,24,1,24,1,24,3,24,790,8,24,1,24,1,24,3,24,794,8,24,1,
  	24,4,24,797,8,24,11,24,12,24,798,1,24,3,24,802,8,24,1,24,1,24,3,24,806,
  	8,24,1,24,1,24,3,24,810,8,24,3,24,812,8,24,1,24,1,24,3,24,816,8,24,1,
  	24,1,24,3,24,820,8,24,3,24,822,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,5,27,847,8,27,10,27,12,27,850,9,27,1,28,1,28,1,28,1,28,1,28,
  	3,28,857,8,28,1,29,1,29,1,29,1,29,3,29,863,8,29,1,29,3,29,866,8,29,1,
  	29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,3,30,876,8,30,1,30,3,30,879,8,30,
  	1,31,1,31,1,31,1,31,1,31,1,31,3,31,887,8,31,1,31,3,31,890,8,31,1,32,1,
  	32,1,32,1,32,3,32,896,8,32,1,32,3,32,899,8,32,1,32,1,32,1,33,1,33,3,33,
  	905,8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,
  	1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,3,36,927,8,36,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,3,37,938,8,37,1,38,1,38,1,38,1,38,1,39,
  	1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,
  	1,41,3,41,960,8,41,1,41,1,41,3,41,964,8,41,1,41,5,41,967,8,41,10,41,12,
<<<<<<< HEAD
  	41,970,9,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,3,43,980,8,43,1,43,
  	1,43,3,43,984,8,43,1,43,1,43,3,43,988,8,43,1,43,1,43,1,44,1,44,1,44,1,
  	44,3,44,996,8,44,1,44,1,44,3,44,1000,8,44,1,44,1,44,3,44,1004,8,44,1,
  	44,1,44,1,44,1,44,3,44,1010,8,44,1,44,1,44,3,44,1014,8,44,1,44,1,44,3,
  	44,1018,8,44,1,44,1,44,1,44,1,44,3,44,1024,8,44,1,44,1,44,3,44,1028,8,
  	44,1,44,1,44,3,44,1032,8,44,1,44,1,44,3,44,1036,8,44,1,44,1,44,3,44,1040,
  	8,44,1,44,1,44,1,44,1,44,3,44,1046,8,44,1,44,1,44,3,44,1050,8,44,1,44,
  	1,44,3,44,1054,8,44,1,44,1,44,3,44,1058,8,44,1,44,1,44,3,44,1062,8,44,
  	1,44,1,44,3,44,1066,8,44,1,44,1,44,5,44,1070,8,44,10,44,12,44,1073,9,
  	44,1,45,1,45,5,45,1077,8,45,10,45,12,45,1080,9,45,1,46,1,46,3,46,1084,
  	8,46,1,46,1,46,1,47,1,47,3,47,1090,8,47,1,48,1,48,1,49,1,49,1,50,1,50,
  	1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1110,
  	8,50,1,51,1,51,3,51,1114,8,51,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1122,
  	8,52,1,53,1,53,1,53,1,53,1,54,1,54,1,55,1,55,3,55,1132,8,55,1,55,5,55,
  	1135,8,55,10,55,12,55,1138,9,55,1,55,1,55,3,55,1142,8,55,4,55,1144,8,
  	55,11,55,12,55,1145,1,55,1,55,1,55,3,55,1151,8,55,1,56,1,56,1,56,1,56,
  	3,56,1157,8,56,1,56,1,56,1,56,3,56,1162,8,56,1,56,3,56,1165,8,56,1,57,
  	1,57,3,57,1169,8,57,1,58,1,58,3,58,1173,8,58,5,58,1175,8,58,10,58,12,
  	58,1178,9,58,1,58,1,58,1,58,3,58,1183,8,58,5,58,1185,8,58,10,58,12,58,
  	1188,9,58,1,58,1,58,3,58,1192,8,58,1,58,5,58,1195,8,58,10,58,12,58,1198,
  	9,58,1,58,3,58,1201,8,58,1,58,3,58,1204,8,58,1,58,1,58,3,58,1208,8,58,
  	4,58,1210,8,58,11,58,12,58,1211,1,58,1,58,3,58,1216,8,58,1,59,1,59,3,
  	59,1220,8,59,4,59,1222,8,59,11,59,12,59,1223,1,59,1,59,1,60,1,60,3,60,
  	1230,8,60,5,60,1232,8,60,10,60,12,60,1235,9,60,1,60,1,60,3,60,1239,8,
  	60,5,60,1241,8,60,10,60,12,60,1244,9,60,1,60,1,60,1,61,1,61,1,61,1,61,
  	3,61,1252,8,61,1,62,1,62,1,62,1,62,3,62,1258,8,62,1,63,1,63,1,63,1,63,
  	1,63,1,63,3,63,1266,8,63,1,63,1,63,3,63,1270,8,63,1,63,1,63,3,63,1274,
  	8,63,1,63,1,63,3,63,1278,8,63,1,63,1,63,1,63,1,63,1,63,3,63,1285,8,63,
  	1,63,3,63,1288,8,63,1,63,3,63,1291,8,63,1,63,3,63,1294,8,63,1,64,1,64,
  	1,64,1,64,3,64,1300,8,64,1,64,3,64,1303,8,64,1,65,1,65,3,65,1307,8,65,
  	1,65,1,65,3,65,1311,8,65,1,65,1,65,3,65,1315,8,65,1,65,3,65,1318,8,65,
  	1,66,1,66,3,66,1322,8,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,3,67,
  	1332,8,67,1,67,1,67,1,68,1,68,3,68,1338,8,68,1,68,1,68,1,68,5,68,1343,
  	8,68,10,68,12,68,1346,9,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,
  	69,1,69,3,69,1358,8,69,1,70,1,70,3,70,1362,8,70,1,70,1,70,3,70,1366,8,
  	70,1,70,1,70,3,70,1370,8,70,1,70,5,70,1373,8,70,10,70,12,70,1376,9,70,
  	1,71,1,71,3,71,1380,8,71,1,71,1,71,3,71,1384,8,71,1,71,1,71,1,72,1,72,
  	3,72,1390,8,72,1,72,1,72,3,72,1394,8,72,1,72,1,72,3,72,1398,8,72,1,72,
  	1,72,3,72,1402,8,72,1,72,5,72,1405,8,72,10,72,12,72,1408,9,72,1,73,1,
  	73,1,73,3,73,1413,8,73,1,73,3,73,1416,8,73,1,74,1,74,1,74,1,75,3,75,1422,
  	8,75,1,75,3,75,1425,8,75,1,75,1,75,1,75,1,75,3,75,1431,8,75,1,75,1,75,
  	3,75,1435,8,75,1,75,1,75,3,75,1439,8,75,1,76,1,76,3,76,1443,8,76,1,76,
  	1,76,3,76,1447,8,76,1,76,5,76,1450,8,76,10,76,12,76,1453,9,76,1,76,1,
  	76,3,76,1457,8,76,1,76,1,76,3,76,1461,8,76,1,76,5,76,1464,8,76,10,76,
  	12,76,1467,9,76,3,76,1469,8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,
  	1478,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1487,8,78,1,78,5,78,
  	1490,8,78,10,78,12,78,1493,9,78,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,
  	80,1,81,1,81,3,81,1505,8,81,1,81,3,81,1508,8,81,1,82,1,82,1,82,1,82,1,
  	83,1,83,3,83,1516,8,83,1,83,1,83,3,83,1520,8,83,1,83,5,83,1523,8,83,10,
  	83,12,83,1526,9,83,1,84,1,84,3,84,1530,8,84,1,84,1,84,3,84,1534,8,84,
  	1,84,1,84,1,84,3,84,1539,8,84,1,85,1,85,1,86,1,86,3,86,1545,8,86,1,86,
  	5,86,1548,8,86,10,86,12,86,1551,9,86,1,86,1,86,1,86,1,86,3,86,1557,8,
  	86,1,87,1,87,3,87,1561,8,87,1,87,1,87,3,87,1565,8,87,3,87,1567,8,87,1,
  	87,1,87,3,87,1571,8,87,3,87,1573,8,87,1,87,1,87,3,87,1577,8,87,3,87,1579,
  	8,87,1,87,1,87,1,88,1,88,3,88,1585,8,88,1,88,1,88,1,89,1,89,3,89,1591,
  	8,89,1,89,1,89,3,89,1595,8,89,1,89,3,89,1598,8,89,1,89,3,89,1601,8,89,
  	1,89,1,89,1,89,1,89,3,89,1607,8,89,1,89,3,89,1610,8,89,1,89,3,89,1613,
  	8,89,1,89,1,89,3,89,1617,8,89,1,89,1,89,1,89,1,89,3,89,1623,8,89,1,89,
  	3,89,1626,8,89,1,89,3,89,1629,8,89,1,89,1,89,3,89,1633,8,89,1,90,1,90,
  	3,90,1637,8,90,1,90,1,90,3,90,1641,8,90,3,90,1643,8,90,1,90,1,90,3,90,
  	1647,8,90,3,90,1649,8,90,1,90,1,90,3,90,1653,8,90,3,90,1655,8,90,1,90,
  	1,90,3,90,1659,8,90,3,90,1661,8,90,1,90,1,90,1,91,1,91,3,91,1667,8,91,
  	1,91,1,91,3,91,1671,8,91,1,91,1,91,3,91,1675,8,91,1,91,1,91,3,91,1679,
  	8,91,1,91,1,91,3,91,1683,8,91,1,91,1,91,3,91,1687,8,91,1,91,1,91,3,91,
  	1691,8,91,1,91,1,91,3,91,1695,8,91,5,91,1697,8,91,10,91,12,91,1700,9,
  	91,3,91,1702,8,91,1,91,1,91,1,92,1,92,3,92,1708,8,92,1,92,1,92,3,92,1712,
  	8,92,1,92,1,92,3,92,1716,8,92,1,92,3,92,1719,8,92,1,92,5,92,1722,8,92,
  	10,92,12,92,1725,9,92,1,93,1,93,3,93,1729,8,93,1,93,5,93,1732,8,93,10,
  	93,12,93,1735,9,93,1,94,1,94,3,94,1739,8,94,1,94,1,94,1,95,1,95,3,95,
  	1745,8,95,1,95,1,95,1,95,1,95,3,95,1751,8,95,1,95,3,95,1754,8,95,1,95,
  	3,95,1757,8,95,1,95,3,95,1760,8,95,1,95,1,95,3,95,1764,8,95,1,95,3,95,
  	1767,8,95,1,95,3,95,1770,8,95,1,95,3,95,1773,8,95,1,95,3,95,1776,8,95,
  	1,96,1,96,3,96,1780,8,96,1,96,1,96,3,96,1784,8,96,1,96,1,96,3,96,1788,
  	8,96,1,96,1,96,3,96,1792,8,96,1,96,1,96,3,96,1796,8,96,1,96,3,96,1799,
  	8,96,1,96,3,96,1802,8,96,1,96,1,96,3,96,1806,8,96,1,96,1,96,3,96,1810,
  	8,96,1,96,1,96,3,96,1814,8,96,1,96,1,96,3,96,1818,8,96,3,96,1820,8,96,
  	1,96,1,96,1,97,1,97,3,97,1826,8,97,1,97,3,97,1829,8,97,1,97,3,97,1832,
  	8,97,1,97,1,97,1,98,1,98,3,98,1838,8,98,1,98,3,98,1841,8,98,1,98,3,98,
  	1844,8,98,1,98,1,98,1,99,1,99,1,100,1,100,1,101,1,101,1,102,1,102,1,103,
  	1,103,1,104,1,104,1,104,1,104,1,104,5,104,1863,8,104,10,104,12,104,1866,
  	9,104,1,105,1,105,1,105,1,105,1,105,5,105,1873,8,105,10,105,12,105,1876,
  	9,105,1,106,1,106,1,106,1,106,1,106,5,106,1883,8,106,10,106,12,106,1886,
  	9,106,1,107,1,107,3,107,1890,8,107,5,107,1892,8,107,10,107,12,107,1895,
  	9,107,1,107,1,107,1,108,1,108,3,108,1901,8,108,1,108,1,108,3,108,1905,
  	8,108,1,108,1,108,3,108,1909,8,108,1,108,1,108,3,108,1913,8,108,1,108,
  	1,108,3,108,1917,8,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,1925,
  	8,108,1,108,1,108,3,108,1929,8,108,1,108,1,108,3,108,1933,8,108,1,108,
  	1,108,3,108,1937,8,108,1,108,1,108,4,108,1941,8,108,11,108,12,108,1942,
  	1,108,1,108,3,108,1947,8,108,1,109,1,109,1,110,1,110,3,110,1953,8,110,
  	1,110,1,110,3,110,1957,8,110,1,110,5,110,1960,8,110,10,110,12,110,1963,
  	9,110,1,111,1,111,3,111,1967,8,111,1,111,1,111,3,111,1971,8,111,1,111,
  	5,111,1974,8,111,10,111,12,111,1977,9,111,1,112,1,112,3,112,1981,8,112,
  	1,112,1,112,3,112,1985,8,112,1,112,1,112,5,112,1989,8,112,10,112,12,112,
  	1992,9,112,1,113,1,113,1,114,1,114,3,114,1998,8,114,1,114,1,114,3,114,
  	2002,8,114,1,114,1,114,5,114,2006,8,114,10,114,12,114,2009,9,114,1,115,
  	1,115,1,116,1,116,3,116,2015,8,116,1,116,1,116,3,116,2019,8,116,1,116,
  	1,116,5,116,2023,8,116,10,116,12,116,2026,9,116,1,117,1,117,1,118,1,118,
  	3,118,2032,8,118,1,118,1,118,3,118,2036,8,118,1,118,5,118,2039,8,118,
  	10,118,12,118,2042,9,118,1,119,1,119,3,119,2046,8,119,5,119,2048,8,119,
  	10,119,12,119,2051,9,119,1,119,1,119,3,119,2055,8,119,1,119,3,119,2058,
  	8,119,1,120,1,120,1,120,4,120,2063,8,120,11,120,12,120,2064,1,120,3,120,
  	2068,8,120,1,121,1,121,1,121,3,121,2073,8,121,1,121,1,121,1,121,1,121,
  	1,121,1,121,1,121,3,121,2082,8,121,1,121,1,121,3,121,2086,8,121,1,121,
  	3,121,2089,8,121,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
  	1,122,1,122,3,122,2102,8,122,1,122,3,122,2105,8,122,1,122,1,122,1,123,
  	3,123,2110,8,123,1,123,1,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
  	1,124,1,124,1,124,3,124,2124,8,124,1,125,1,125,3,125,2128,8,125,1,125,
  	5,125,2131,8,125,10,125,12,125,2134,9,125,1,126,1,126,1,126,1,126,1,126,
  	1,126,1,126,1,126,1,126,3,126,2145,8,126,1,127,1,127,1,127,1,127,1,127,
  	1,127,3,127,2153,8,127,1,128,1,128,1,129,1,129,3,129,2159,8,129,1,129,
  	1,129,3,129,2163,8,129,1,129,1,129,3,129,2167,8,129,5,129,2169,8,129,
  	10,129,12,129,2172,9,129,3,129,2174,8,129,1,129,1,129,1,130,1,130,3,130,
  	2180,8,130,1,130,3,130,2183,8,130,1,131,1,131,3,131,2187,8,131,1,131,
  	1,131,3,131,2191,8,131,1,131,1,131,3,131,2195,8,131,1,131,1,131,3,131,
  	2199,8,131,5,131,2201,8,131,10,131,12,131,2204,9,131,1,131,1,131,1,132,
  	1,132,3,132,2210,8,132,1,132,3,132,2213,8,132,1,132,1,132,3,132,2217,
  	8,132,1,132,1,132,1,133,1,133,3,133,2223,8,133,1,133,1,133,3,133,2227,
  	8,133,1,133,1,133,1,134,1,134,3,134,2233,8,134,1,134,1,134,3,134,2237,
  	8,134,1,134,1,134,3,134,2241,8,134,1,134,1,134,1,134,3,134,2246,8,134,
  	1,134,1,134,3,134,2250,8,134,1,134,1,134,3,134,2254,8,134,3,134,2256,
  	8,134,1,134,1,134,3,134,2260,8,134,1,134,1,134,3,134,2264,8,134,1,134,
  	1,134,3,134,2268,8,134,5,134,2270,8,134,10,134,12,134,2273,9,134,3,134,
  	2275,8,134,1,134,1,134,3,134,2279,8,134,1,135,1,135,1,136,1,136,3,136,
  	2285,8,136,1,136,1,136,1,136,3,136,2290,8,136,3,136,2292,8,136,1,136,
  	1,136,1,137,1,137,3,137,2298,8,137,1,137,4,137,2301,8,137,11,137,12,137,
  	2302,1,138,1,138,3,138,2307,8,138,1,138,1,138,3,138,2311,8,138,1,138,
  	1,138,3,138,2315,8,138,1,138,1,138,3,138,2319,8,138,1,138,3,138,2322,
  	8,138,1,138,3,138,2325,8,138,1,138,1,138,1,139,1,139,3,139,2331,8,139,
  	1,139,1,139,3,139,2335,8,139,1,139,1,139,3,139,2339,8,139,1,139,1,139,
  	3,139,2343,8,139,1,139,3,139,2346,8,139,1,139,3,139,2349,8,139,1,139,
  	1,139,1,140,1,140,3,140,2355,8,140,1,140,1,140,3,140,2359,8,140,1,141,
  	1,141,3,141,2363,8,141,1,141,4,141,2366,8,141,11,141,12,141,2367,1,141,
  	1,141,3,141,2372,8,141,1,141,1,141,3,141,2376,8,141,1,141,4,141,2379,
  	8,141,11,141,12,141,2380,3,141,2383,8,141,1,141,3,141,2386,8,141,1,141,
  	1,141,3,141,2390,8,141,1,141,3,141,2393,8,141,1,141,3,141,2396,8,141,
  	1,141,1,141,1,142,1,142,3,142,2402,8,142,1,142,1,142,3,142,2406,8,142,
  	1,142,1,142,3,142,2410,8,142,1,142,1,142,1,143,1,143,1,144,1,144,3,144,
  	2418,8,144,1,145,1,145,1,145,3,145,2423,8,145,1,146,1,146,3,146,2427,
  	8,146,1,146,1,146,1,147,1,147,1,148,1,148,1,149,1,149,1,150,1,150,1,151,
  	1,151,1,151,1,151,1,151,3,151,2444,8,151,1,152,1,152,1,153,1,153,1,154,
  	1,154,1,155,1,155,1,155,0,1,88,156,0,2,4,6,8,10,12,14,16,18,20,22,24,
  	26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
  	72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
  	114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
  	150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
  	186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
  	222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,
  	258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
  	294,296,298,300,302,304,306,308,310,0,11,2,0,60,60,62,63,1,0,115,118,
  	2,0,6,6,13,17,1,0,19,20,2,0,21,21,126,126,2,0,22,23,109,109,1,0,135,136,
  	11,0,48,48,50,50,56,59,63,69,77,77,79,79,82,82,129,129,132,132,137,137,
  	141,141,2,0,14,14,27,30,2,0,16,16,31,34,2,0,35,45,126,126,2776,0,312,
  	1,0,0,0,2,332,1,0,0,0,4,365,1,0,0,0,6,367,1,0,0,0,8,389,1,0,0,0,10,431,
  	1,0,0,0,12,433,1,0,0,0,14,463,1,0,0,0,16,484,1,0,0,0,18,495,1,0,0,0,20,
  	501,1,0,0,0,22,533,1,0,0,0,24,543,1,0,0,0,26,557,1,0,0,0,28,561,1,0,0,
  	0,30,565,1,0,0,0,32,577,1,0,0,0,34,589,1,0,0,0,36,632,1,0,0,0,38,646,
  	1,0,0,0,40,690,1,0,0,0,42,692,1,0,0,0,44,702,1,0,0,0,46,731,1,0,0,0,48,
  	771,1,0,0,0,50,825,1,0,0,0,52,833,1,0,0,0,54,839,1,0,0,0,56,856,1,0,0,
  	0,58,858,1,0,0,0,60,878,1,0,0,0,62,889,1,0,0,0,64,891,1,0,0,0,66,904,
  	1,0,0,0,68,908,1,0,0,0,70,914,1,0,0,0,72,926,1,0,0,0,74,928,1,0,0,0,76,
  	939,1,0,0,0,78,943,1,0,0,0,80,949,1,0,0,0,82,957,1,0,0,0,84,971,1,0,0,
  	0,86,975,1,0,0,0,88,1065,1,0,0,0,90,1074,1,0,0,0,92,1081,1,0,0,0,94,1089,
  	1,0,0,0,96,1091,1,0,0,0,98,1093,1,0,0,0,100,1109,1,0,0,0,102,1113,1,0,
  	0,0,104,1115,1,0,0,0,106,1123,1,0,0,0,108,1127,1,0,0,0,110,1150,1,0,0,
  	0,112,1164,1,0,0,0,114,1168,1,0,0,0,116,1215,1,0,0,0,118,1221,1,0,0,0,
  	120,1233,1,0,0,0,122,1251,1,0,0,0,124,1257,1,0,0,0,126,1259,1,0,0,0,128,
  	1295,1,0,0,0,130,1306,1,0,0,0,132,1319,1,0,0,0,134,1329,1,0,0,0,136,1335,
  	1,0,0,0,138,1357,1,0,0,0,140,1359,1,0,0,0,142,1377,1,0,0,0,144,1389,1,
  	0,0,0,146,1409,1,0,0,0,148,1417,1,0,0,0,150,1424,1,0,0,0,152,1468,1,0,
  	0,0,154,1477,1,0,0,0,156,1479,1,0,0,0,158,1494,1,0,0,0,160,1498,1,0,0,
  	0,162,1502,1,0,0,0,164,1509,1,0,0,0,166,1513,1,0,0,0,168,1538,1,0,0,0,
  	170,1540,1,0,0,0,172,1556,1,0,0,0,174,1558,1,0,0,0,176,1582,1,0,0,0,178,
  	1632,1,0,0,0,180,1634,1,0,0,0,182,1664,1,0,0,0,184,1705,1,0,0,0,186,1726,
  	1,0,0,0,188,1736,1,0,0,0,190,1742,1,0,0,0,192,1777,1,0,0,0,194,1823,1,
  	0,0,0,196,1835,1,0,0,0,198,1847,1,0,0,0,200,1849,1,0,0,0,202,1851,1,0,
  	0,0,204,1853,1,0,0,0,206,1855,1,0,0,0,208,1857,1,0,0,0,210,1867,1,0,0,
  	0,212,1877,1,0,0,0,214,1893,1,0,0,0,216,1946,1,0,0,0,218,1948,1,0,0,0,
  	220,1950,1,0,0,0,222,1964,1,0,0,0,224,1978,1,0,0,0,226,1993,1,0,0,0,228,
  	1995,1,0,0,0,230,2010,1,0,0,0,232,2012,1,0,0,0,234,2027,1,0,0,0,236,2029,
  	1,0,0,0,238,2049,1,0,0,0,240,2059,1,0,0,0,242,2088,1,0,0,0,244,2101,1,
  	0,0,0,246,2109,1,0,0,0,248,2123,1,0,0,0,250,2125,1,0,0,0,252,2144,1,0,
  	0,0,254,2152,1,0,0,0,256,2154,1,0,0,0,258,2156,1,0,0,0,260,2177,1,0,0,
  	0,262,2184,1,0,0,0,264,2209,1,0,0,0,266,2220,1,0,0,0,268,2278,1,0,0,0,
  	270,2280,1,0,0,0,272,2291,1,0,0,0,274,2295,1,0,0,0,276,2304,1,0,0,0,278,
  	2328,1,0,0,0,280,2352,1,0,0,0,282,2382,1,0,0,0,284,2399,1,0,0,0,286,2413,
  	1,0,0,0,288,2417,1,0,0,0,290,2419,1,0,0,0,292,2424,1,0,0,0,294,2430,1,
  	0,0,0,296,2432,1,0,0,0,298,2434,1,0,0,0,300,2436,1,0,0,0,302,2443,1,0,
  	0,0,304,2445,1,0,0,0,306,2447,1,0,0,0,308,2449,1,0,0,0,310,2451,1,0,0,
  	0,312,323,3,2,1,0,313,315,5,158,0,0,314,313,1,0,0,0,314,315,1,0,0,0,315,
  	316,1,0,0,0,316,318,5,1,0,0,317,319,5,158,0,0,318,317,1,0,0,0,318,319,
  	1,0,0,0,319,320,1,0,0,0,320,322,3,2,1,0,321,314,1,0,0,0,322,325,1,0,0,
  	0,323,321,1,0,0,0,323,324,1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,326,
  	328,5,158,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,330,
  	5,0,0,1,330,1,1,0,0,0,331,333,3,94,47,0,332,331,1,0,0,0,332,333,1,0,0,
  	0,333,335,1,0,0,0,334,336,5,158,0,0,335,334,1,0,0,0,335,336,1,0,0,0,336,
  	337,1,0,0,0,337,342,3,4,2,0,338,340,5,158,0,0,339,338,1,0,0,0,339,340,
  	1,0,0,0,340,341,1,0,0,0,341,343,5,1,0,0,342,339,1,0,0,0,342,343,1,0,0,
  	0,343,3,1,0,0,0,344,366,3,108,54,0,345,366,3,44,22,0,346,366,3,46,23,
  	0,347,366,3,48,24,0,348,366,3,52,26,0,349,366,3,54,27,0,350,366,3,68,
  	34,0,351,366,3,70,35,0,352,366,3,6,3,0,353,366,3,12,6,0,354,366,3,14,
  	7,0,355,366,3,30,15,0,356,366,3,34,17,0,357,366,3,32,16,0,358,366,3,100,
  	50,0,359,366,3,102,51,0,360,366,3,16,8,0,361,366,3,18,9,0,362,366,3,20,
  	10,0,363,366,3,26,13,0,364,366,3,28,14,0,365,344,1,0,0,0,365,345,1,0,
  	0,0,365,346,1,0,0,0,365,347,1,0,0,0,365,348,1,0,0,0,365,349,1,0,0,0,365,
  	350,1,0,0,0,365,351,1,0,0,0,365,352,1,0,0,0,365,353,1,0,0,0,365,354,1,
  	0,0,0,365,355,1,0,0,0,365,356,1,0,0,0,365,357,1,0,0,0,365,358,1,0,0,0,
  	365,359,1,0,0,0,365,360,1,0,0,0,365,361,1,0,0,0,365,362,1,0,0,0,365,363,
  	1,0,0,0,365,364,1,0,0,0,366,5,1,0,0,0,367,368,5,53,0,0,368,369,5,158,
  	0,0,369,378,3,300,150,0,370,372,5,158,0,0,371,370,1,0,0,0,371,372,1,0,
  	0,0,372,373,1,0,0,0,373,375,3,8,4,0,374,376,5,158,0,0,375,374,1,0,0,0,
  	375,376,1,0,0,0,376,379,1,0,0,0,377,379,5,158,0,0,378,371,1,0,0,0,378,
  	377,1,0,0,0,379,380,1,0,0,0,380,381,5,54,0,0,381,382,5,158,0,0,382,387,
  	3,10,5,0,383,385,5,158,0,0,384,383,1,0,0,0,384,385,1,0,0,0,385,386,1,
  	0,0,0,386,388,3,42,21,0,387,384,1,0,0,0,387,388,1,0,0,0,388,7,1,0,0,0,
  	389,391,5,2,0,0,390,392,5,158,0,0,391,390,1,0,0,0,391,392,1,0,0,0,392,
  	393,1,0,0,0,393,404,3,300,150,0,394,396,5,158,0,0,395,394,1,0,0,0,395,
  	396,1,0,0,0,396,397,1,0,0,0,397,399,5,3,0,0,398,400,5,158,0,0,399,398,
  	1,0,0,0,399,400,1,0,0,0,400,401,1,0,0,0,401,403,3,300,150,0,402,395,1,
  	0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,408,1,0,0,0,
  	406,404,1,0,0,0,407,409,5,158,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,
  	410,1,0,0,0,410,411,5,4,0,0,411,9,1,0,0,0,412,432,3,40,20,0,413,415,5,
  	2,0,0,414,416,5,158,0,0,415,414,1,0,0,0,415,416,1,0,0,0,416,417,1,0,0,
  	0,417,419,3,108,54,0,418,420,5,158,0,0,419,418,1,0,0,0,419,420,1,0,0,
  	0,420,421,1,0,0,0,421,422,5,4,0,0,422,432,1,0,0,0,423,432,3,286,143,0,
  	424,425,3,286,143,0,425,427,5,5,0,0,426,428,5,158,0,0,427,426,1,0,0,0,
  	427,428,1,0,0,0,428,429,1,0,0,0,429,430,3,300,150,0,430,432,1,0,0,0,431,
  	412,1,0,0,0,431,413,1,0,0,0,431,423,1,0,0,0,431,424,1,0,0,0,432,11,1,
  	0,0,0,433,434,5,53,0,0,434,435,5,158,0,0,435,436,3,300,150,0,436,437,
  	5,158,0,0,437,438,5,54,0,0,438,439,5,158,0,0,439,441,5,2,0,0,440,442,
  	5,158,0,0,441,440,1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,454,5,144,
  	0,0,444,446,5,158,0,0,445,444,1,0,0,0,445,446,1,0,0,0,446,447,1,0,0,0,
  	447,449,5,3,0,0,448,450,5,158,0,0,449,448,1,0,0,0,449,450,1,0,0,0,450,
  	451,1,0,0,0,451,453,5,144,0,0,452,445,1,0,0,0,453,456,1,0,0,0,454,452,
  	1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,454,1,0,0,0,457,458,5,4,0,
  	0,458,459,5,158,0,0,459,460,5,112,0,0,460,461,5,158,0,0,461,462,5,55,
  	0,0,462,13,1,0,0,0,463,464,5,53,0,0,464,465,5,158,0,0,465,467,5,2,0,0,
  	466,468,5,158,0,0,467,466,1,0,0,0,467,468,1,0,0,0,468,469,1,0,0,0,469,
  	471,3,108,54,0,470,472,5,158,0,0,471,470,1,0,0,0,471,472,1,0,0,0,472,
  	473,1,0,0,0,473,474,5,4,0,0,474,475,5,158,0,0,475,476,5,78,0,0,476,477,
  	5,158,0,0,477,482,5,144,0,0,478,480,5,158,0,0,479,478,1,0,0,0,479,480,
  	1,0,0,0,480,481,1,0,0,0,481,483,3,42,21,0,482,479,1,0,0,0,482,483,1,0,
  	0,0,483,15,1,0,0,0,484,485,5,56,0,0,485,486,5,158,0,0,486,487,5,58,0,
  	0,487,488,5,158,0,0,488,493,5,144,0,0,489,491,5,158,0,0,490,489,1,0,0,
  	0,490,491,1,0,0,0,491,492,1,0,0,0,492,494,3,42,21,0,493,490,1,0,0,0,493,
  	494,1,0,0,0,494,17,1,0,0,0,495,496,5,57,0,0,496,497,5,158,0,0,497,498,
  	5,58,0,0,498,499,5,158,0,0,499,500,5,144,0,0,500,19,1,0,0,0,501,502,5,
  	46,0,0,502,503,5,158,0,0,503,508,5,144,0,0,504,505,5,158,0,0,505,506,
  	5,110,0,0,506,507,5,158,0,0,507,509,3,300,150,0,508,504,1,0,0,0,508,509,
  	1,0,0,0,509,510,1,0,0,0,510,511,5,158,0,0,511,513,5,2,0,0,512,514,5,158,
  	0,0,513,512,1,0,0,0,513,514,1,0,0,0,514,515,1,0,0,0,515,516,5,47,0,0,
  	516,517,5,158,0,0,517,526,3,302,151,0,518,520,5,158,0,0,519,518,1,0,0,
  	0,519,520,1,0,0,0,520,521,1,0,0,0,521,523,5,3,0,0,522,524,5,158,0,0,523,
  	522,1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,527,3,24,12,0,526,519,
  	1,0,0,0,526,527,1,0,0,0,527,529,1,0,0,0,528,530,5,158,0,0,529,528,1,0,
  	0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,532,5,4,0,0,532,21,1,0,0,0,533,
  	535,3,302,151,0,534,536,5,158,0,0,535,534,1,0,0,0,535,536,1,0,0,0,536,
  	537,1,0,0,0,537,539,5,6,0,0,538,540,5,158,0,0,539,538,1,0,0,0,539,540,
  	1,0,0,0,540,541,1,0,0,0,541,542,3,254,127,0,542,23,1,0,0,0,543,554,3,
  	22,11,0,544,546,5,158,0,0,545,544,1,0,0,0,545,546,1,0,0,0,546,547,1,0,
  	0,0,547,549,5,3,0,0,548,550,5,158,0,0,549,548,1,0,0,0,549,550,1,0,0,0,
  	550,551,1,0,0,0,551,553,3,22,11,0,552,545,1,0,0,0,553,556,1,0,0,0,554,
  	552,1,0,0,0,554,555,1,0,0,0,555,25,1,0,0,0,556,554,1,0,0,0,557,558,5,
  	104,0,0,558,559,5,158,0,0,559,560,3,300,150,0,560,27,1,0,0,0,561,562,
  	5,48,0,0,562,563,5,158,0,0,563,564,3,300,150,0,564,29,1,0,0,0,565,566,
  	5,49,0,0,566,567,5,158,0,0,567,569,3,302,151,0,568,570,5,158,0,0,569,
  	568,1,0,0,0,569,570,1,0,0,0,570,571,1,0,0,0,571,573,5,6,0,0,572,574,5,
  	158,0,0,573,572,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,576,3,206,
  	103,0,576,31,1,0,0,0,577,578,5,50,0,0,578,579,5,158,0,0,579,580,5,102,
  	0,0,580,581,5,158,0,0,581,582,5,60,0,0,582,583,5,158,0,0,583,584,3,300,
  	150,0,584,585,5,158,0,0,585,586,5,133,0,0,586,587,5,158,0,0,587,588,5,
  	144,0,0,588,33,1,0,0,0,589,590,5,100,0,0,590,591,5,158,0,0,591,592,5,
  	51,0,0,592,593,5,158,0,0,593,595,3,270,135,0,594,596,5,158,0,0,595,594,
  	1,0,0,0,595,596,1,0,0,0,596,597,1,0,0,0,597,599,5,2,0,0,598,600,5,158,
  	0,0,599,598,1,0,0,0,599,600,1,0,0,0,600,602,1,0,0,0,601,603,3,36,18,0,
  	602,601,1,0,0,0,602,603,1,0,0,0,603,605,1,0,0,0,604,606,5,158,0,0,605,
  	604,1,0,0,0,605,606,1,0,0,0,606,608,1,0,0,0,607,609,3,38,19,0,608,607,
  	1,0,0,0,608,609,1,0,0,0,609,620,1,0,0,0,610,612,5,158,0,0,611,610,1,0,
  	0,0,611,612,1,0,0,0,612,613,1,0,0,0,613,615,5,3,0,0,614,616,5,158,0,0,
  	615,614,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,619,3,38,19,0,618,
  	611,1,0,0,0,619,622,1,0,0,0,620,618,1,0,0,0,620,621,1,0,0,0,621,624,1,
  	0,0,0,622,620,1,0,0,0,623,625,5,158,0,0,624,623,1,0,0,0,624,625,1,0,0,
  	0,625,626,1,0,0,0,626,627,5,4,0,0,627,628,5,158,0,0,628,629,5,110,0,0,
  	629,630,5,158,0,0,630,631,3,206,103,0,631,35,1,0,0,0,632,643,3,302,151,
  	0,633,635,5,158,0,0,634,633,1,0,0,0,634,635,1,0,0,0,635,636,1,0,0,0,636,
  	638,5,3,0,0,637,639,5,158,0,0,638,637,1,0,0,0,638,639,1,0,0,0,639,640,
  	1,0,0,0,640,642,3,302,151,0,641,634,1,0,0,0,642,645,1,0,0,0,643,641,1,
  	0,0,0,643,644,1,0,0,0,644,37,1,0,0,0,645,643,1,0,0,0,646,648,3,302,151,
  	0,647,649,5,158,0,0,648,647,1,0,0,0,648,649,1,0,0,0,649,650,1,0,0,0,650,
  	651,5,128,0,0,651,653,5,6,0,0,652,654,5,158,0,0,653,652,1,0,0,0,653,654,
  	1,0,0,0,654,655,1,0,0,0,655,656,3,254,127,0,656,39,1,0,0,0,657,659,5,
  	7,0,0,658,660,5,158,0,0,659,658,1,0,0,0,659,660,1,0,0,0,660,661,1,0,0,
  	0,661,672,5,144,0,0,662,664,5,158,0,0,663,662,1,0,0,0,663,664,1,0,0,0,
  	664,665,1,0,0,0,665,667,5,3,0,0,666,668,5,158,0,0,667,666,1,0,0,0,667,
  	668,1,0,0,0,668,669,1,0,0,0,669,671,5,144,0,0,670,663,1,0,0,0,671,674,
  	1,0,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,675,1,0,0,0,674,672,1,0,0,
  	0,675,691,5,8,0,0,676,691,5,144,0,0,677,679,5,52,0,0,678,680,5,158,0,
  	0,679,678,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,683,5,2,0,0,682,
  	684,5,158,0,0,683,682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,687,
  	5,144,0,0,686,688,5,158,0,0,687,686,1,0,0,0,687,688,1,0,0,0,688,689,1,
  	0,0,0,689,691,5,4,0,0,690,657,1,0,0,0,690,676,1,0,0,0,690,677,1,0,0,0,
  	691,41,1,0,0,0,692,694,5,2,0,0,693,695,5,158,0,0,694,693,1,0,0,0,694,
  	695,1,0,0,0,695,696,1,0,0,0,696,698,3,24,12,0,697,699,5,158,0,0,698,697,
  	1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,701,5,4,0,0,701,43,1,0,0,
  	0,702,703,5,100,0,0,703,704,5,158,0,0,704,705,5,59,0,0,705,706,5,158,
  	0,0,706,707,5,60,0,0,707,708,5,158,0,0,708,710,3,300,150,0,709,711,5,
  	158,0,0,710,709,1,0,0,0,710,711,1,0,0,0,711,712,1,0,0,0,712,714,5,2,0,
  	0,713,715,5,158,0,0,714,713,1,0,0,0,714,715,1,0,0,0,715,716,1,0,0,0,716,
  	718,3,82,41,0,717,719,5,158,0,0,718,717,1,0,0,0,718,719,1,0,0,0,719,720,
  	1,0,0,0,720,722,5,3,0,0,721,723,5,158,0,0,722,721,1,0,0,0,722,723,1,0,
  	0,0,723,724,1,0,0,0,724,725,3,86,43,0,725,727,1,0,0,0,726,728,5,158,0,
  	0,727,726,1,0,0,0,727,728,1,0,0,0,728,729,1,0,0,0,729,730,5,4,0,0,730,
  	45,1,0,0,0,731,732,5,100,0,0,732,733,5,158,0,0,733,734,5,77,0,0,734,735,
  	5,158,0,0,735,736,5,60,0,0,736,737,5,158,0,0,737,739,3,300,150,0,738,
  	740,5,158,0,0,739,738,1,0,0,0,739,740,1,0,0,0,740,741,1,0,0,0,741,743,
  	5,2,0,0,742,744,5,158,0,0,743,742,1,0,0,0,743,744,1,0,0,0,744,745,1,0,
  	0,0,745,747,3,50,25,0,746,748,5,158,0,0,747,746,1,0,0,0,747,748,1,0,0,
  	0,748,757,1,0,0,0,749,751,5,3,0,0,750,752,5,158,0,0,751,750,1,0,0,0,751,
  	752,1,0,0,0,752,753,1,0,0,0,753,755,3,82,41,0,754,756,5,158,0,0,755,754,
  	1,0,0,0,755,756,1,0,0,0,756,758,1,0,0,0,757,749,1,0,0,0,757,758,1,0,0,
  	0,758,767,1,0,0,0,759,761,5,3,0,0,760,762,5,158,0,0,761,760,1,0,0,0,761,
  	762,1,0,0,0,762,763,1,0,0,0,763,765,3,302,151,0,764,766,5,158,0,0,765,
  	764,1,0,0,0,765,766,1,0,0,0,766,768,1,0,0,0,767,759,1,0,0,0,767,768,1,
  	0,0,0,768,769,1,0,0,0,769,770,5,4,0,0,770,47,1,0,0,0,771,772,5,100,0,
  	0,772,773,5,158,0,0,773,774,5,77,0,0,774,775,5,158,0,0,775,776,5,60,0,
  	0,776,777,5,158,0,0,777,778,5,61,0,0,778,779,5,158,0,0,779,781,3,300,
  	150,0,780,782,5,158,0,0,781,780,1,0,0,0,781,782,1,0,0,0,782,783,1,0,0,
  	0,783,785,5,2,0,0,784,786,5,158,0,0,785,784,1,0,0,0,785,786,1,0,0,0,786,
  	787,1,0,0,0,787,789,3,50,25,0,788,790,5,158,0,0,789,788,1,0,0,0,789,790,
  	1,0,0,0,790,796,1,0,0,0,791,793,5,3,0,0,792,794,5,158,0,0,793,792,1,0,
  	0,0,793,794,1,0,0,0,794,795,1,0,0,0,795,797,3,50,25,0,796,791,1,0,0,0,
  	797,798,1,0,0,0,798,796,1,0,0,0,798,799,1,0,0,0,799,801,1,0,0,0,800,802,
  	5,158,0,0,801,800,1,0,0,0,801,802,1,0,0,0,802,811,1,0,0,0,803,805,5,3,
  	0,0,804,806,5,158,0,0,805,804,1,0,0,0,805,806,1,0,0,0,806,807,1,0,0,0,
  	807,809,3,82,41,0,808,810,5,158,0,0,809,808,1,0,0,0,809,810,1,0,0,0,810,
  	812,1,0,0,0,811,803,1,0,0,0,811,812,1,0,0,0,812,821,1,0,0,0,813,815,5,
  	3,0,0,814,816,5,158,0,0,815,814,1,0,0,0,815,816,1,0,0,0,816,817,1,0,0,
  	0,817,819,3,302,151,0,818,820,5,158,0,0,819,818,1,0,0,0,819,820,1,0,0,
  	0,820,822,1,0,0,0,821,813,1,0,0,0,821,822,1,0,0,0,822,823,1,0,0,0,823,
  	824,5,4,0,0,824,49,1,0,0,0,825,826,5,54,0,0,826,827,5,158,0,0,827,828,
  	3,300,150,0,828,829,5,158,0,0,829,830,5,78,0,0,830,831,5,158,0,0,831,
  	832,3,300,150,0,832,51,1,0,0,0,833,834,5,100,0,0,834,835,5,158,0,0,835,
  	836,5,62,0,0,836,837,5,158,0,0,837,838,3,300,150,0,838,53,1,0,0,0,839,
  	840,5,100,0,0,840,841,5,158,0,0,841,842,5,63,0,0,842,843,5,158,0,0,843,
  	848,3,300,150,0,844,845,5,158,0,0,845,847,3,56,28,0,846,844,1,0,0,0,847,
  	850,1,0,0,0,848,846,1,0,0,0,848,849,1,0,0,0,849,55,1,0,0,0,850,848,1,
  	0,0,0,851,857,3,58,29,0,852,857,3,60,30,0,853,857,3,62,31,0,854,857,3,
  	64,32,0,855,857,3,66,33,0,856,851,1,0,0,0,856,852,1,0,0,0,856,853,1,0,
  	0,0,856,854,1,0,0,0,856,855,1,0,0,0,857,57,1,0,0,0,858,859,5,64,0,0,859,
  	862,5,158,0,0,860,861,5,112,0,0,861,863,5,158,0,0,862,860,1,0,0,0,862,
  	863,1,0,0,0,863,865,1,0,0,0,864,866,5,126,0,0,865,864,1,0,0,0,865,866,
  	1,0,0,0,866,867,1,0,0,0,867,868,3,296,148,0,868,59,1,0,0,0,869,870,5,
  	68,0,0,870,871,5,158,0,0,871,879,5,65,0,0,872,873,5,65,0,0,873,875,5,
  	158,0,0,874,876,5,126,0,0,875,874,1,0,0,0,875,876,1,0,0,0,876,877,1,0,
  	0,0,877,879,3,296,148,0,878,869,1,0,0,0,878,872,1,0,0,0,879,61,1,0,0,
  	0,880,881,5,68,0,0,881,882,5,158,0,0,882,890,5,66,0,0,883,884,5,66,0,
  	0,884,886,5,158,0,0,885,887,5,126,0,0,886,885,1,0,0,0,886,887,1,0,0,0,
  	887,888,1,0,0,0,888,890,3,296,148,0,889,880,1,0,0,0,889,883,1,0,0,0,890,
  	63,1,0,0,0,891,892,5,67,0,0,892,895,5,158,0,0,893,894,5,106,0,0,894,896,
  	5,158,0,0,895,893,1,0,0,0,895,896,1,0,0,0,896,898,1,0,0,0,897,899,5,126,
  	0,0,898,897,1,0,0,0,898,899,1,0,0,0,899,900,1,0,0,0,900,901,3,296,148,
  	0,901,65,1,0,0,0,902,903,5,68,0,0,903,905,5,158,0,0,904,902,1,0,0,0,904,
  	905,1,0,0,0,905,906,1,0,0,0,906,907,5,69,0,0,907,67,1,0,0,0,908,909,5,
  	70,0,0,909,910,5,158,0,0,910,911,7,0,0,0,911,912,5,158,0,0,912,913,3,
  	300,150,0,913,69,1,0,0,0,914,915,5,71,0,0,915,916,5,158,0,0,916,917,5,
  	60,0,0,917,918,5,158,0,0,918,919,3,300,150,0,919,920,5,158,0,0,920,921,
  	3,72,36,0,921,71,1,0,0,0,922,927,3,74,37,0,923,927,3,76,38,0,924,927,
  	3,78,39,0,925,927,3,80,40,0,926,922,1,0,0,0,926,923,1,0,0,0,926,924,1,
  	0,0,0,926,925,1,0,0,0,927,73,1,0,0,0,928,929,5,74,0,0,929,930,5,158,0,
  	0,930,931,3,294,147,0,931,932,5,158,0,0,932,937,3,88,44,0,933,934,5,158,
  	0,0,934,935,5,72,0,0,935,936,5,158,0,0,936,938,3,206,103,0,937,933,1,
  	0,0,0,937,938,1,0,0,0,938,75,1,0,0,0,939,940,5,70,0,0,940,941,5,158,0,
  	0,941,942,3,294,147,0,942,77,1,0,0,0,943,944,5,73,0,0,944,945,5,158,0,
  	0,945,946,5,78,0,0,946,947,5,158,0,0,947,948,3,300,150,0,948,79,1,0,0,
  	0,949,950,5,73,0,0,950,951,5,158,0,0,951,952,3,294,147,0,952,953,5,158,
  	0,0,953,954,5,78,0,0,954,955,5,158,0,0,955,956,3,294,147,0,956,81,1,0,
  	0,0,957,968,3,84,42,0,958,960,5,158,0,0,959,958,1,0,0,0,959,960,1,0,0,
  	0,960,961,1,0,0,0,961,963,5,3,0,0,962,964,5,158,0,0,963,962,1,0,0,0,963,
  	964,1,0,0,0,964,965,1,0,0,0,965,967,3,84,42,0,966,959,1,0,0,0,967,970,
  	1,0,0,0,968,966,1,0,0,0,968,969,1,0,0,0,969,83,1,0,0,0,970,968,1,0,0,
  	0,971,972,3,294,147,0,972,973,5,158,0,0,973,974,3,88,44,0,974,85,1,0,
  	0,0,975,976,5,75,0,0,976,977,5,158,0,0,977,979,5,76,0,0,978,980,5,158,
  	0,0,979,978,1,0,0,0,979,980,1,0,0,0,980,981,1,0,0,0,981,983,5,2,0,0,982,
  	984,5,158,0,0,983,982,1,0,0,0,983,984,1,0,0,0,984,985,1,0,0,0,985,987,
  	3,294,147,0,986,988,5,158,0,0,987,986,1,0,0,0,987,988,1,0,0,0,988,989,
  	1,0,0,0,989,990,5,4,0,0,990,87,1,0,0,0,991,992,6,44,-1,0,992,1066,3,302,
  	151,0,993,995,5,93,0,0,994,996,5,158,0,0,995,994,1,0,0,0,995,996,1,0,
  	0,0,996,997,1,0,0,0,997,999,5,2,0,0,998,1000,5,158,0,0,999,998,1,0,0,
  	0,999,1000,1,0,0,0,1000,1001,1,0,0,0,1001,1003,3,82,41,0,1002,1004,5,
  	158,0,0,1003,1002,1,0,0,0,1003,1004,1,0,0,0,1004,1005,1,0,0,0,1005,1006,
  	5,4,0,0,1006,1066,1,0,0,0,1007,1009,3,302,151,0,1008,1010,5,158,0,0,1009,
  	1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,1011,1013,5,2,0,0,1012,
  	1014,5,158,0,0,1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,1015,1,0,0,0,
  	1015,1017,3,82,41,0,1016,1018,5,158,0,0,1017,1016,1,0,0,0,1017,1018,1,
  	0,0,0,1018,1019,1,0,0,0,1019,1020,5,4,0,0,1020,1066,1,0,0,0,1021,1023,
  	3,302,151,0,1022,1024,5,158,0,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,
  	1025,1,0,0,0,1025,1027,5,2,0,0,1026,1028,5,158,0,0,1027,1026,1,0,0,0,
  	1027,1028,1,0,0,0,1028,1029,1,0,0,0,1029,1031,3,88,44,0,1030,1032,5,158,
  	0,0,1031,1030,1,0,0,0,1031,1032,1,0,0,0,1032,1033,1,0,0,0,1033,1035,5,
<<<<<<< HEAD
  	3,0,0,1034,1036,5,158,0,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,1037,
  	1,0,0,0,1037,1039,3,88,44,0,1038,1040,5,158,0,0,1039,1038,1,0,0,0,1039,
  	1040,1,0,0,0,1040,1041,1,0,0,0,1041,1042,5,4,0,0,1042,1066,1,0,0,0,1043,
  	1045,5,79,0,0,1044,1046,5,158,0,0,1045,1044,1,0,0,0,1045,1046,1,0,0,0,
  	1046,1047,1,0,0,0,1047,1049,5,2,0,0,1048,1050,5,158,0,0,1049,1048,1,0,
  	0,0,1049,1050,1,0,0,0,1050,1051,1,0,0,0,1051,1053,3,296,148,0,1052,1054,
  	5,158,0,0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,1055,1,0,0,0,1055,
  	1057,5,3,0,0,1056,1058,5,158,0,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,
  	1058,1059,1,0,0,0,1059,1061,3,296,148,0,1060,1062,5,158,0,0,1061,1060,
  	1,0,0,0,1061,1062,1,0,0,0,1062,1063,1,0,0,0,1063,1064,5,4,0,0,1064,1066,
  	1,0,0,0,1065,991,1,0,0,0,1065,993,1,0,0,0,1065,1007,1,0,0,0,1065,1021,
  	1,0,0,0,1065,1043,1,0,0,0,1066,1071,1,0,0,0,1067,1068,10,5,0,0,1068,1070,
  	3,90,45,0,1069,1067,1,0,0,0,1070,1073,1,0,0,0,1071,1069,1,0,0,0,1071,
  	1072,1,0,0,0,1072,89,1,0,0,0,1073,1071,1,0,0,0,1074,1078,3,92,46,0,1075,
  	1077,3,92,46,0,1076,1075,1,0,0,0,1077,1080,1,0,0,0,1078,1076,1,0,0,0,
  	1078,1079,1,0,0,0,1079,91,1,0,0,0,1080,1078,1,0,0,0,1081,1083,5,7,0,0,
  	1082,1084,3,296,148,0,1083,1082,1,0,0,0,1083,1084,1,0,0,0,1084,1085,1,
  	0,0,0,1085,1086,5,8,0,0,1086,93,1,0,0,0,1087,1090,3,96,48,0,1088,1090,
  	3,98,49,0,1089,1087,1,0,0,0,1089,1088,1,0,0,0,1090,95,1,0,0,0,1091,1092,
  	5,80,0,0,1092,97,1,0,0,0,1093,1094,5,81,0,0,1094,99,1,0,0,0,1095,1096,
  	5,82,0,0,1096,1097,5,158,0,0,1097,1110,5,83,0,0,1098,1099,5,82,0,0,1099,
  	1100,5,158,0,0,1100,1101,5,83,0,0,1101,1102,5,158,0,0,1102,1103,5,84,
  	0,0,1103,1104,5,158,0,0,1104,1110,5,85,0,0,1105,1110,5,87,0,0,1106,1110,
  	5,88,0,0,1107,1110,5,89,0,0,1108,1110,5,90,0,0,1109,1095,1,0,0,0,1109,
  	1098,1,0,0,0,1109,1105,1,0,0,0,1109,1106,1,0,0,0,1109,1107,1,0,0,0,1109,
  	1108,1,0,0,0,1110,101,1,0,0,0,1111,1114,3,104,52,0,1112,1114,3,106,53,
  	0,1113,1111,1,0,0,0,1113,1112,1,0,0,0,1114,103,1,0,0,0,1115,1116,5,95,
  	0,0,1116,1117,5,158,0,0,1117,1118,5,92,0,0,1118,1121,5,158,0,0,1119,1122,
  	5,144,0,0,1120,1122,3,286,143,0,1121,1119,1,0,0,0,1121,1120,1,0,0,0,1122,
  	105,1,0,0,0,1123,1124,5,91,0,0,1124,1125,5,158,0,0,1125,1126,3,286,143,
  	0,1126,107,1,0,0,0,1127,1128,3,110,55,0,1128,109,1,0,0,0,1129,1136,3,
  	114,57,0,1130,1132,5,158,0,0,1131,1130,1,0,0,0,1131,1132,1,0,0,0,1132,
  	1133,1,0,0,0,1133,1135,3,112,56,0,1134,1131,1,0,0,0,1135,1138,1,0,0,0,
  	1136,1134,1,0,0,0,1136,1137,1,0,0,0,1137,1151,1,0,0,0,1138,1136,1,0,0,
  	0,1139,1141,3,148,74,0,1140,1142,5,158,0,0,1141,1140,1,0,0,0,1141,1142,
  	1,0,0,0,1142,1144,1,0,0,0,1143,1139,1,0,0,0,1144,1145,1,0,0,0,1145,1143,
  	1,0,0,0,1145,1146,1,0,0,0,1146,1147,1,0,0,0,1147,1148,3,114,57,0,1148,
  	1149,6,55,-1,0,1149,1151,1,0,0,0,1150,1129,1,0,0,0,1150,1143,1,0,0,0,
  	1151,111,1,0,0,0,1152,1153,5,93,0,0,1153,1154,5,158,0,0,1154,1156,5,94,
  	0,0,1155,1157,5,158,0,0,1156,1155,1,0,0,0,1156,1157,1,0,0,0,1157,1158,
  	1,0,0,0,1158,1165,3,114,57,0,1159,1161,5,93,0,0,1160,1162,5,158,0,0,1161,
  	1160,1,0,0,0,1161,1162,1,0,0,0,1162,1163,1,0,0,0,1163,1165,3,114,57,0,
  	1164,1152,1,0,0,0,1164,1159,1,0,0,0,1165,113,1,0,0,0,1166,1169,3,116,
  	58,0,1167,1169,3,118,59,0,1168,1166,1,0,0,0,1168,1167,1,0,0,0,1169,115,
  	1,0,0,0,1170,1172,3,124,62,0,1171,1173,5,158,0,0,1172,1171,1,0,0,0,1172,
  	1173,1,0,0,0,1173,1175,1,0,0,0,1174,1170,1,0,0,0,1175,1178,1,0,0,0,1176,
  	1174,1,0,0,0,1176,1177,1,0,0,0,1177,1179,1,0,0,0,1178,1176,1,0,0,0,1179,
  	1216,3,148,74,0,1180,1182,3,124,62,0,1181,1183,5,158,0,0,1182,1181,1,
  	0,0,0,1182,1183,1,0,0,0,1183,1185,1,0,0,0,1184,1180,1,0,0,0,1185,1188,
  	1,0,0,0,1186,1184,1,0,0,0,1186,1187,1,0,0,0,1187,1189,1,0,0,0,1188,1186,
  	1,0,0,0,1189,1196,3,122,61,0,1190,1192,5,158,0,0,1191,1190,1,0,0,0,1191,
  	1192,1,0,0,0,1192,1193,1,0,0,0,1193,1195,3,122,61,0,1194,1191,1,0,0,0,
  	1195,1198,1,0,0,0,1196,1194,1,0,0,0,1196,1197,1,0,0,0,1197,1203,1,0,0,
  	0,1198,1196,1,0,0,0,1199,1201,5,158,0,0,1200,1199,1,0,0,0,1200,1201,1,
  	0,0,0,1201,1202,1,0,0,0,1202,1204,3,148,74,0,1203,1200,1,0,0,0,1203,1204,
  	1,0,0,0,1204,1216,1,0,0,0,1205,1207,3,124,62,0,1206,1208,5,158,0,0,1207,
  	1206,1,0,0,0,1207,1208,1,0,0,0,1208,1210,1,0,0,0,1209,1205,1,0,0,0,1210,
  	1211,1,0,0,0,1211,1209,1,0,0,0,1211,1212,1,0,0,0,1212,1213,1,0,0,0,1213,
  	1214,6,58,-1,0,1214,1216,1,0,0,0,1215,1176,1,0,0,0,1215,1186,1,0,0,0,
  	1215,1209,1,0,0,0,1216,117,1,0,0,0,1217,1219,3,120,60,0,1218,1220,5,158,
  	0,0,1219,1218,1,0,0,0,1219,1220,1,0,0,0,1220,1222,1,0,0,0,1221,1217,1,
  	0,0,0,1222,1223,1,0,0,0,1223,1221,1,0,0,0,1223,1224,1,0,0,0,1224,1225,
  	1,0,0,0,1225,1226,3,116,58,0,1226,119,1,0,0,0,1227,1229,3,124,62,0,1228,
  	1230,5,158,0,0,1229,1228,1,0,0,0,1229,1230,1,0,0,0,1230,1232,1,0,0,0,
  	1231,1227,1,0,0,0,1232,1235,1,0,0,0,1233,1231,1,0,0,0,1233,1234,1,0,0,
  	0,1234,1242,1,0,0,0,1235,1233,1,0,0,0,1236,1238,3,122,61,0,1237,1239,
  	5,158,0,0,1238,1237,1,0,0,0,1238,1239,1,0,0,0,1239,1241,1,0,0,0,1240,
  	1236,1,0,0,0,1241,1244,1,0,0,0,1242,1240,1,0,0,0,1242,1243,1,0,0,0,1243,
  	1245,1,0,0,0,1244,1242,1,0,0,0,1245,1246,3,146,73,0,1246,121,1,0,0,0,
  	1247,1252,3,134,67,0,1248,1252,3,136,68,0,1249,1252,3,140,70,0,1250,1252,
  	3,144,72,0,1251,1247,1,0,0,0,1251,1248,1,0,0,0,1251,1249,1,0,0,0,1251,
  	1250,1,0,0,0,1252,123,1,0,0,0,1253,1258,3,130,65,0,1254,1258,3,132,66,
  	0,1255,1258,3,128,64,0,1256,1258,3,126,63,0,1257,1253,1,0,0,0,1257,1254,
  	1,0,0,0,1257,1255,1,0,0,0,1257,1256,1,0,0,0,1258,125,1,0,0,0,1259,1277,
  	5,95,0,0,1260,1261,5,158,0,0,1261,1262,5,106,0,0,1262,1263,5,158,0,0,
  	1263,1265,5,96,0,0,1264,1266,5,158,0,0,1265,1264,1,0,0,0,1265,1266,1,
  	0,0,0,1266,1267,1,0,0,0,1267,1269,5,2,0,0,1268,1270,5,158,0,0,1269,1268,
  	1,0,0,0,1269,1270,1,0,0,0,1270,1271,1,0,0,0,1271,1273,3,82,41,0,1272,
  	1274,5,158,0,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,1275,1,0,0,0,
  	1275,1276,5,4,0,0,1276,1278,1,0,0,0,1277,1260,1,0,0,0,1277,1278,1,0,0,
  	0,1278,1279,1,0,0,0,1279,1280,5,158,0,0,1280,1281,5,54,0,0,1281,1282,
  	5,158,0,0,1282,1287,3,10,5,0,1283,1285,5,158,0,0,1284,1283,1,0,0,0,1284,
  	1285,1,0,0,0,1285,1286,1,0,0,0,1286,1288,3,42,21,0,1287,1284,1,0,0,0,
  	1287,1288,1,0,0,0,1288,1293,1,0,0,0,1289,1291,5,158,0,0,1290,1289,1,0,
  	0,0,1290,1291,1,0,0,0,1291,1292,1,0,0,0,1292,1294,3,164,82,0,1293,1290,
  	1,0,0,0,1293,1294,1,0,0,0,1294,127,1,0,0,0,1295,1296,5,49,0,0,1296,1297,
  	5,158,0,0,1297,1302,3,268,134,0,1298,1300,5,158,0,0,1299,1298,1,0,0,0,
  	1299,1300,1,0,0,0,1300,1301,1,0,0,0,1301,1303,3,164,82,0,1302,1299,1,
  	0,0,0,1302,1303,1,0,0,0,1303,129,1,0,0,0,1304,1305,5,97,0,0,1305,1307,
  	5,158,0,0,1306,1304,1,0,0,0,1306,1307,1,0,0,0,1307,1308,1,0,0,0,1308,
  	1310,5,98,0,0,1309,1311,5,158,0,0,1310,1309,1,0,0,0,1310,1311,1,0,0,0,
  	1311,1312,1,0,0,0,1312,1317,3,166,83,0,1313,1315,5,158,0,0,1314,1313,
  	1,0,0,0,1314,1315,1,0,0,0,1315,1316,1,0,0,0,1316,1318,3,164,82,0,1317,
  	1314,1,0,0,0,1317,1318,1,0,0,0,1318,131,1,0,0,0,1319,1321,5,99,0,0,1320,
  	1322,5,158,0,0,1321,1320,1,0,0,0,1321,1322,1,0,0,0,1322,1323,1,0,0,0,
  	1323,1324,3,206,103,0,1324,1325,5,158,0,0,1325,1326,5,110,0,0,1326,1327,
  	5,158,0,0,1327,1328,3,286,143,0,1328,133,1,0,0,0,1329,1331,5,100,0,0,
  	1330,1332,5,158,0,0,1331,1330,1,0,0,0,1331,1332,1,0,0,0,1332,1333,1,0,
  	0,0,1333,1334,3,166,83,0,1334,135,1,0,0,0,1335,1337,5,101,0,0,1336,1338,
  	5,158,0,0,1337,1336,1,0,0,0,1337,1338,1,0,0,0,1338,1339,1,0,0,0,1339,
  	1344,3,166,83,0,1340,1341,5,158,0,0,1341,1343,3,138,69,0,1342,1340,1,
  	0,0,0,1343,1346,1,0,0,0,1344,1342,1,0,0,0,1344,1345,1,0,0,0,1345,137,
  	1,0,0,0,1346,1344,1,0,0,0,1347,1348,5,102,0,0,1348,1349,5,158,0,0,1349,
  	1350,5,98,0,0,1350,1351,5,158,0,0,1351,1358,3,140,70,0,1352,1353,5,102,
  	0,0,1353,1354,5,158,0,0,1354,1355,5,100,0,0,1355,1356,5,158,0,0,1356,
  	1358,3,140,70,0,1357,1347,1,0,0,0,1357,1352,1,0,0,0,1358,139,1,0,0,0,
  	1359,1361,5,103,0,0,1360,1362,5,158,0,0,1361,1360,1,0,0,0,1361,1362,1,
  	0,0,0,1362,1363,1,0,0,0,1363,1374,3,142,71,0,1364,1366,5,158,0,0,1365,
  	1364,1,0,0,0,1365,1366,1,0,0,0,1366,1367,1,0,0,0,1367,1369,5,3,0,0,1368,
  	1370,5,158,0,0,1369,1368,1,0,0,0,1369,1370,1,0,0,0,1370,1371,1,0,0,0,
  	1371,1373,3,142,71,0,1372,1365,1,0,0,0,1373,1376,1,0,0,0,1374,1372,1,
  	0,0,0,1374,1375,1,0,0,0,1375,141,1,0,0,0,1376,1374,1,0,0,0,1377,1379,
  	3,292,146,0,1378,1380,5,158,0,0,1379,1378,1,0,0,0,1379,1380,1,0,0,0,1380,
  	1381,1,0,0,0,1381,1383,5,6,0,0,1382,1384,5,158,0,0,1383,1382,1,0,0,0,
  	1383,1384,1,0,0,0,1384,1385,1,0,0,0,1385,1386,3,206,103,0,1386,143,1,
  	0,0,0,1387,1388,5,104,0,0,1388,1390,5,158,0,0,1389,1387,1,0,0,0,1389,
  	1390,1,0,0,0,1390,1391,1,0,0,0,1391,1393,5,105,0,0,1392,1394,5,158,0,
  	0,1393,1392,1,0,0,0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,1406,3,206,
  	103,0,1396,1398,5,158,0,0,1397,1396,1,0,0,0,1397,1398,1,0,0,0,1398,1399,
  	1,0,0,0,1399,1401,5,3,0,0,1400,1402,5,158,0,0,1401,1400,1,0,0,0,1401,
  	1402,1,0,0,0,1402,1403,1,0,0,0,1403,1405,3,206,103,0,1404,1397,1,0,0,
  	0,1405,1408,1,0,0,0,1406,1404,1,0,0,0,1406,1407,1,0,0,0,1407,145,1,0,
  	0,0,1408,1406,1,0,0,0,1409,1410,5,106,0,0,1410,1415,3,150,75,0,1411,1413,
  	5,158,0,0,1412,1411,1,0,0,0,1412,1413,1,0,0,0,1413,1414,1,0,0,0,1414,
  	1416,3,164,82,0,1415,1412,1,0,0,0,1415,1416,1,0,0,0,1416,147,1,0,0,0,
  	1417,1418,5,107,0,0,1418,1419,3,150,75,0,1419,149,1,0,0,0,1420,1422,5,
  	158,0,0,1421,1420,1,0,0,0,1421,1422,1,0,0,0,1422,1423,1,0,0,0,1423,1425,
  	5,108,0,0,1424,1421,1,0,0,0,1424,1425,1,0,0,0,1425,1426,1,0,0,0,1426,
  	1427,5,158,0,0,1427,1430,3,152,76,0,1428,1429,5,158,0,0,1429,1431,3,156,
  	78,0,1430,1428,1,0,0,0,1430,1431,1,0,0,0,1431,1434,1,0,0,0,1432,1433,
  	5,158,0,0,1433,1435,3,158,79,0,1434,1432,1,0,0,0,1434,1435,1,0,0,0,1435,
  	1438,1,0,0,0,1436,1437,5,158,0,0,1437,1439,3,160,80,0,1438,1436,1,0,0,
  	0,1438,1439,1,0,0,0,1439,151,1,0,0,0,1440,1451,5,109,0,0,1441,1443,5,
  	158,0,0,1442,1441,1,0,0,0,1442,1443,1,0,0,0,1443,1444,1,0,0,0,1444,1446,
  	5,3,0,0,1445,1447,5,158,0,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,1447,
  	1448,1,0,0,0,1448,1450,3,154,77,0,1449,1442,1,0,0,0,1450,1453,1,0,0,0,
  	1451,1449,1,0,0,0,1451,1452,1,0,0,0,1452,1469,1,0,0,0,1453,1451,1,0,0,
  	0,1454,1465,3,154,77,0,1455,1457,5,158,0,0,1456,1455,1,0,0,0,1456,1457,
  	1,0,0,0,1457,1458,1,0,0,0,1458,1460,5,3,0,0,1459,1461,5,158,0,0,1460,
  	1459,1,0,0,0,1460,1461,1,0,0,0,1461,1462,1,0,0,0,1462,1464,3,154,77,0,
  	1463,1456,1,0,0,0,1464,1467,1,0,0,0,1465,1463,1,0,0,0,1465,1466,1,0,0,
  	0,1466,1469,1,0,0,0,1467,1465,1,0,0,0,1468,1440,1,0,0,0,1468,1454,1,0,
  	0,0,1469,153,1,0,0,0,1470,1471,3,206,103,0,1471,1472,5,158,0,0,1472,1473,
  	5,110,0,0,1473,1474,5,158,0,0,1474,1475,3,286,143,0,1475,1478,1,0,0,0,
  	1476,1478,3,206,103,0,1477,1470,1,0,0,0,1477,1476,1,0,0,0,1478,155,1,
  	0,0,0,1479,1480,5,111,0,0,1480,1481,5,158,0,0,1481,1482,5,112,0,0,1482,
  	1483,5,158,0,0,1483,1491,3,162,81,0,1484,1486,5,3,0,0,1485,1487,5,158,
  	0,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1488,1,0,0,0,1488,1490,3,
  	162,81,0,1489,1484,1,0,0,0,1490,1493,1,0,0,0,1491,1489,1,0,0,0,1491,1492,
  	1,0,0,0,1492,157,1,0,0,0,1493,1491,1,0,0,0,1494,1495,5,113,0,0,1495,1496,
  	5,158,0,0,1496,1497,3,206,103,0,1497,159,1,0,0,0,1498,1499,5,114,0,0,
  	1499,1500,5,158,0,0,1500,1501,3,206,103,0,1501,161,1,0,0,0,1502,1507,
  	3,206,103,0,1503,1505,5,158,0,0,1504,1503,1,0,0,0,1504,1505,1,0,0,0,1505,
  	1506,1,0,0,0,1506,1508,7,1,0,0,1507,1504,1,0,0,0,1507,1508,1,0,0,0,1508,
  	163,1,0,0,0,1509,1510,5,119,0,0,1510,1511,5,158,0,0,1511,1512,3,206,103,
  	0,1512,165,1,0,0,0,1513,1524,3,168,84,0,1514,1516,5,158,0,0,1515,1514,
  	1,0,0,0,1515,1516,1,0,0,0,1516,1517,1,0,0,0,1517,1519,5,3,0,0,1518,1520,
  	5,158,0,0,1519,1518,1,0,0,0,1519,1520,1,0,0,0,1520,1521,1,0,0,0,1521,
  	1523,3,168,84,0,1522,1515,1,0,0,0,1523,1526,1,0,0,0,1524,1522,1,0,0,0,
  	1524,1525,1,0,0,0,1525,167,1,0,0,0,1526,1524,1,0,0,0,1527,1529,3,286,
  	143,0,1528,1530,5,158,0,0,1529,1528,1,0,0,0,1529,1530,1,0,0,0,1530,1531,
  	1,0,0,0,1531,1533,5,6,0,0,1532,1534,5,158,0,0,1533,1532,1,0,0,0,1533,
  	1534,1,0,0,0,1534,1535,1,0,0,0,1535,1536,3,170,85,0,1536,1539,1,0,0,0,
  	1537,1539,3,170,85,0,1538,1527,1,0,0,0,1538,1537,1,0,0,0,1539,169,1,0,
  	0,0,1540,1541,3,172,86,0,1541,171,1,0,0,0,1542,1549,3,174,87,0,1543,1545,
  	5,158,0,0,1544,1543,1,0,0,0,1544,1545,1,0,0,0,1545,1546,1,0,0,0,1546,
  	1548,3,176,88,0,1547,1544,1,0,0,0,1548,1551,1,0,0,0,1549,1547,1,0,0,0,
  	1549,1550,1,0,0,0,1550,1557,1,0,0,0,1551,1549,1,0,0,0,1552,1553,5,2,0,
  	0,1553,1554,3,172,86,0,1554,1555,5,4,0,0,1555,1557,1,0,0,0,1556,1542,
  	1,0,0,0,1556,1552,1,0,0,0,1557,173,1,0,0,0,1558,1560,5,2,0,0,1559,1561,
  	5,158,0,0,1560,1559,1,0,0,0,1560,1561,1,0,0,0,1561,1566,1,0,0,0,1562,
  	1564,3,286,143,0,1563,1565,5,158,0,0,1564,1563,1,0,0,0,1564,1565,1,0,
  	0,0,1565,1567,1,0,0,0,1566,1562,1,0,0,0,1566,1567,1,0,0,0,1567,1572,1,
  	0,0,0,1568,1570,3,186,93,0,1569,1571,5,158,0,0,1570,1569,1,0,0,0,1570,
  	1571,1,0,0,0,1571,1573,1,0,0,0,1572,1568,1,0,0,0,1572,1573,1,0,0,0,1573,
  	1578,1,0,0,0,1574,1576,3,182,91,0,1575,1577,5,158,0,0,1576,1575,1,0,0,
  	0,1576,1577,1,0,0,0,1577,1579,1,0,0,0,1578,1574,1,0,0,0,1578,1579,1,0,
  	0,0,1579,1580,1,0,0,0,1580,1581,5,4,0,0,1581,175,1,0,0,0,1582,1584,3,
  	178,89,0,1583,1585,5,158,0,0,1584,1583,1,0,0,0,1584,1585,1,0,0,0,1585,
  	1586,1,0,0,0,1586,1587,3,174,87,0,1587,177,1,0,0,0,1588,1590,3,306,153,
  	0,1589,1591,5,158,0,0,1590,1589,1,0,0,0,1590,1591,1,0,0,0,1591,1592,1,
  	0,0,0,1592,1594,3,310,155,0,1593,1595,5,158,0,0,1594,1593,1,0,0,0,1594,
  	1595,1,0,0,0,1595,1597,1,0,0,0,1596,1598,3,180,90,0,1597,1596,1,0,0,0,
  	1597,1598,1,0,0,0,1598,1600,1,0,0,0,1599,1601,5,158,0,0,1600,1599,1,0,
  	0,0,1600,1601,1,0,0,0,1601,1602,1,0,0,0,1602,1603,3,310,155,0,1603,1633,
  	1,0,0,0,1604,1606,3,310,155,0,1605,1607,5,158,0,0,1606,1605,1,0,0,0,1606,
  	1607,1,0,0,0,1607,1609,1,0,0,0,1608,1610,3,180,90,0,1609,1608,1,0,0,0,
  	1609,1610,1,0,0,0,1610,1612,1,0,0,0,1611,1613,5,158,0,0,1612,1611,1,0,
  	0,0,1612,1613,1,0,0,0,1613,1614,1,0,0,0,1614,1616,3,310,155,0,1615,1617,
  	5,158,0,0,1616,1615,1,0,0,0,1616,1617,1,0,0,0,1617,1618,1,0,0,0,1618,
  	1619,3,308,154,0,1619,1633,1,0,0,0,1620,1622,3,310,155,0,1621,1623,5,
  	158,0,0,1622,1621,1,0,0,0,1622,1623,1,0,0,0,1623,1625,1,0,0,0,1624,1626,
  	3,180,90,0,1625,1624,1,0,0,0,1625,1626,1,0,0,0,1626,1628,1,0,0,0,1627,
  	1629,5,158,0,0,1628,1627,1,0,0,0,1628,1629,1,0,0,0,1629,1630,1,0,0,0,
  	1630,1631,3,310,155,0,1631,1633,1,0,0,0,1632,1588,1,0,0,0,1632,1604,1,
  	0,0,0,1632,1620,1,0,0,0,1633,179,1,0,0,0,1634,1636,5,7,0,0,1635,1637,
  	5,158,0,0,1636,1635,1,0,0,0,1636,1637,1,0,0,0,1637,1642,1,0,0,0,1638,
  	1640,3,286,143,0,1639,1641,5,158,0,0,1640,1639,1,0,0,0,1640,1641,1,0,
  	0,0,1641,1643,1,0,0,0,1642,1638,1,0,0,0,1642,1643,1,0,0,0,1643,1648,1,
  	0,0,0,1644,1646,3,184,92,0,1645,1647,5,158,0,0,1646,1645,1,0,0,0,1646,
  	1647,1,0,0,0,1647,1649,1,0,0,0,1648,1644,1,0,0,0,1648,1649,1,0,0,0,1649,
  	1654,1,0,0,0,1650,1652,3,190,95,0,1651,1653,5,158,0,0,1652,1651,1,0,0,
  	0,1652,1653,1,0,0,0,1653,1655,1,0,0,0,1654,1650,1,0,0,0,1654,1655,1,0,
  	0,0,1655,1660,1,0,0,0,1656,1658,3,182,91,0,1657,1659,5,158,0,0,1658,1657,
  	1,0,0,0,1658,1659,1,0,0,0,1659,1661,1,0,0,0,1660,1656,1,0,0,0,1660,1661,
  	1,0,0,0,1661,1662,1,0,0,0,1662,1663,5,8,0,0,1663,181,1,0,0,0,1664,1666,
  	5,9,0,0,1665,1667,5,158,0,0,1666,1665,1,0,0,0,1666,1667,1,0,0,0,1667,
  	1701,1,0,0,0,1668,1670,3,294,147,0,1669,1671,5,158,0,0,1670,1669,1,0,
  	0,0,1670,1671,1,0,0,0,1671,1672,1,0,0,0,1672,1674,5,128,0,0,1673,1675,
  	5,158,0,0,1674,1673,1,0,0,0,1674,1675,1,0,0,0,1675,1676,1,0,0,0,1676,
  	1678,3,206,103,0,1677,1679,5,158,0,0,1678,1677,1,0,0,0,1678,1679,1,0,
  	0,0,1679,1698,1,0,0,0,1680,1682,5,3,0,0,1681,1683,5,158,0,0,1682,1681,
  	1,0,0,0,1682,1683,1,0,0,0,1683,1684,1,0,0,0,1684,1686,3,294,147,0,1685,
  	1687,5,158,0,0,1686,1685,1,0,0,0,1686,1687,1,0,0,0,1687,1688,1,0,0,0,
  	1688,1690,5,128,0,0,1689,1691,5,158,0,0,1690,1689,1,0,0,0,1690,1691,1,
  	0,0,0,1691,1692,1,0,0,0,1692,1694,3,206,103,0,1693,1695,5,158,0,0,1694,
  	1693,1,0,0,0,1694,1695,1,0,0,0,1695,1697,1,0,0,0,1696,1680,1,0,0,0,1697,
  	1700,1,0,0,0,1698,1696,1,0,0,0,1698,1699,1,0,0,0,1699,1702,1,0,0,0,1700,
  	1698,1,0,0,0,1701,1668,1,0,0,0,1701,1702,1,0,0,0,1702,1703,1,0,0,0,1703,
  	1704,5,10,0,0,1704,183,1,0,0,0,1705,1707,5,128,0,0,1706,1708,5,158,0,
  	0,1707,1706,1,0,0,0,1707,1708,1,0,0,0,1708,1709,1,0,0,0,1709,1723,3,204,
  	102,0,1710,1712,5,158,0,0,1711,1710,1,0,0,0,1711,1712,1,0,0,0,1712,1713,
  	1,0,0,0,1713,1715,5,11,0,0,1714,1716,5,128,0,0,1715,1714,1,0,0,0,1715,
  	1716,1,0,0,0,1716,1718,1,0,0,0,1717,1719,5,158,0,0,1718,1717,1,0,0,0,
  	1718,1719,1,0,0,0,1719,1720,1,0,0,0,1720,1722,3,204,102,0,1721,1711,1,
  	0,0,0,1722,1725,1,0,0,0,1723,1721,1,0,0,0,1723,1724,1,0,0,0,1724,185,
  	1,0,0,0,1725,1723,1,0,0,0,1726,1733,3,188,94,0,1727,1729,5,158,0,0,1728,
  	1727,1,0,0,0,1728,1729,1,0,0,0,1729,1730,1,0,0,0,1730,1732,3,188,94,0,
  	1731,1728,1,0,0,0,1732,1735,1,0,0,0,1733,1731,1,0,0,0,1733,1734,1,0,0,
  	0,1734,187,1,0,0,0,1735,1733,1,0,0,0,1736,1738,5,128,0,0,1737,1739,5,
  	158,0,0,1738,1737,1,0,0,0,1738,1739,1,0,0,0,1739,1740,1,0,0,0,1740,1741,
  	3,202,101,0,1741,189,1,0,0,0,1742,1744,5,109,0,0,1743,1745,5,158,0,0,
  	1744,1743,1,0,0,0,1744,1745,1,0,0,0,1745,1750,1,0,0,0,1746,1751,5,120,
  	0,0,1747,1748,5,94,0,0,1748,1749,5,158,0,0,1749,1751,5,120,0,0,1750,1746,
  	1,0,0,0,1750,1747,1,0,0,0,1750,1751,1,0,0,0,1751,1753,1,0,0,0,1752,1754,
  	5,158,0,0,1753,1752,1,0,0,0,1753,1754,1,0,0,0,1754,1769,1,0,0,0,1755,
  	1757,3,198,99,0,1756,1755,1,0,0,0,1756,1757,1,0,0,0,1757,1759,1,0,0,0,
  	1758,1760,5,158,0,0,1759,1758,1,0,0,0,1759,1760,1,0,0,0,1760,1761,1,0,
  	0,0,1761,1763,5,12,0,0,1762,1764,5,158,0,0,1763,1762,1,0,0,0,1763,1764,
  	1,0,0,0,1764,1766,1,0,0,0,1765,1767,3,200,100,0,1766,1765,1,0,0,0,1766,
  	1767,1,0,0,0,1767,1770,1,0,0,0,1768,1770,3,296,148,0,1769,1756,1,0,0,
  	0,1769,1768,1,0,0,0,1769,1770,1,0,0,0,1770,1775,1,0,0,0,1771,1773,5,158,
  	0,0,1772,1771,1,0,0,0,1772,1773,1,0,0,0,1773,1774,1,0,0,0,1774,1776,3,
  	192,96,0,1775,1772,1,0,0,0,1775,1776,1,0,0,0,1776,191,1,0,0,0,1777,1779,
  	5,2,0,0,1778,1780,5,158,0,0,1779,1778,1,0,0,0,1779,1780,1,0,0,0,1780,
  	1781,1,0,0,0,1781,1783,3,286,143,0,1782,1784,5,158,0,0,1783,1782,1,0,
  	0,0,1783,1784,1,0,0,0,1784,1785,1,0,0,0,1785,1787,5,3,0,0,1786,1788,5,
  	158,0,0,1787,1786,1,0,0,0,1787,1788,1,0,0,0,1788,1789,1,0,0,0,1789,1798,
  	3,286,143,0,1790,1792,5,158,0,0,1791,1790,1,0,0,0,1791,1792,1,0,0,0,1792,
  	1793,1,0,0,0,1793,1795,5,11,0,0,1794,1796,5,158,0,0,1795,1794,1,0,0,0,
  	1795,1796,1,0,0,0,1796,1797,1,0,0,0,1797,1799,3,164,82,0,1798,1791,1,
  	0,0,0,1798,1799,1,0,0,0,1799,1819,1,0,0,0,1800,1802,5,158,0,0,1801,1800,
  	1,0,0,0,1801,1802,1,0,0,0,1802,1803,1,0,0,0,1803,1805,5,11,0,0,1804,1806,
  	5,158,0,0,1805,1804,1,0,0,0,1805,1806,1,0,0,0,1806,1807,1,0,0,0,1807,
  	1809,3,196,98,0,1808,1810,5,158,0,0,1809,1808,1,0,0,0,1809,1810,1,0,0,
  	0,1810,1811,1,0,0,0,1811,1813,5,3,0,0,1812,1814,5,158,0,0,1813,1812,1,
  	0,0,0,1813,1814,1,0,0,0,1814,1815,1,0,0,0,1815,1817,3,194,97,0,1816,1818,
  	5,158,0,0,1817,1816,1,0,0,0,1817,1818,1,0,0,0,1818,1820,1,0,0,0,1819,
  	1801,1,0,0,0,1819,1820,1,0,0,0,1820,1821,1,0,0,0,1821,1822,5,4,0,0,1822,
  	193,1,0,0,0,1823,1825,5,9,0,0,1824,1826,5,158,0,0,1825,1824,1,0,0,0,1825,
  	1826,1,0,0,0,1826,1828,1,0,0,0,1827,1829,3,152,76,0,1828,1827,1,0,0,0,
  	1828,1829,1,0,0,0,1829,1831,1,0,0,0,1830,1832,5,158,0,0,1831,1830,1,0,
  	0,0,1831,1832,1,0,0,0,1832,1833,1,0,0,0,1833,1834,5,10,0,0,1834,195,1,
  	0,0,0,1835,1837,5,9,0,0,1836,1838,5,158,0,0,1837,1836,1,0,0,0,1837,1838,
  	1,0,0,0,1838,1840,1,0,0,0,1839,1841,3,152,76,0,1840,1839,1,0,0,0,1840,
  	1841,1,0,0,0,1841,1843,1,0,0,0,1842,1844,5,158,0,0,1843,1842,1,0,0,0,
  	1843,1844,1,0,0,0,1844,1845,1,0,0,0,1845,1846,5,10,0,0,1846,197,1,0,0,
  	0,1847,1848,5,146,0,0,1848,199,1,0,0,0,1849,1850,5,146,0,0,1850,201,1,
  	0,0,0,1851,1852,3,300,150,0,1852,203,1,0,0,0,1853,1854,3,300,150,0,1854,
  	205,1,0,0,0,1855,1856,3,208,104,0,1856,207,1,0,0,0,1857,1864,3,210,105,
  	0,1858,1859,5,158,0,0,1859,1860,5,121,0,0,1860,1861,5,158,0,0,1861,1863,
  	3,210,105,0,1862,1858,1,0,0,0,1863,1866,1,0,0,0,1864,1862,1,0,0,0,1864,
  	1865,1,0,0,0,1865,209,1,0,0,0,1866,1864,1,0,0,0,1867,1874,3,212,106,0,
  	1868,1869,5,158,0,0,1869,1870,5,122,0,0,1870,1871,5,158,0,0,1871,1873,
  	3,212,106,0,1872,1868,1,0,0,0,1873,1876,1,0,0,0,1874,1872,1,0,0,0,1874,
  	1875,1,0,0,0,1875,211,1,0,0,0,1876,1874,1,0,0,0,1877,1884,3,214,107,0,
  	1878,1879,5,158,0,0,1879,1880,5,123,0,0,1880,1881,5,158,0,0,1881,1883,
  	3,214,107,0,1882,1878,1,0,0,0,1883,1886,1,0,0,0,1884,1882,1,0,0,0,1884,
  	1885,1,0,0,0,1885,213,1,0,0,0,1886,1884,1,0,0,0,1887,1889,5,124,0,0,1888,
  	1890,5,158,0,0,1889,1888,1,0,0,0,1889,1890,1,0,0,0,1890,1892,1,0,0,0,
  	1891,1887,1,0,0,0,1892,1895,1,0,0,0,1893,1891,1,0,0,0,1893,1894,1,0,0,
  	0,1894,1896,1,0,0,0,1895,1893,1,0,0,0,1896,1897,3,216,108,0,1897,215,
  	1,0,0,0,1898,1908,3,220,110,0,1899,1901,5,158,0,0,1900,1899,1,0,0,0,1900,
  	1901,1,0,0,0,1901,1902,1,0,0,0,1902,1904,3,218,109,0,1903,1905,5,158,
  	0,0,1904,1903,1,0,0,0,1904,1905,1,0,0,0,1905,1906,1,0,0,0,1906,1907,3,
  	220,110,0,1907,1909,1,0,0,0,1908,1900,1,0,0,0,1908,1909,1,0,0,0,1909,
  	1947,1,0,0,0,1910,1912,3,220,110,0,1911,1913,5,158,0,0,1912,1911,1,0,
  	0,0,1912,1913,1,0,0,0,1913,1914,1,0,0,0,1914,1916,5,125,0,0,1915,1917,
  	5,158,0,0,1916,1915,1,0,0,0,1916,1917,1,0,0,0,1917,1918,1,0,0,0,1918,
  	1919,3,220,110,0,1919,1920,1,0,0,0,1920,1921,6,108,-1,0,1921,1947,1,0,
  	0,0,1922,1924,3,220,110,0,1923,1925,5,158,0,0,1924,1923,1,0,0,0,1924,
  	1925,1,0,0,0,1925,1926,1,0,0,0,1926,1928,3,218,109,0,1927,1929,5,158,
  	0,0,1928,1927,1,0,0,0,1928,1929,1,0,0,0,1929,1930,1,0,0,0,1930,1940,3,
  	220,110,0,1931,1933,5,158,0,0,1932,1931,1,0,0,0,1932,1933,1,0,0,0,1933,
  	1934,1,0,0,0,1934,1936,3,218,109,0,1935,1937,5,158,0,0,1936,1935,1,0,
  	0,0,1936,1937,1,0,0,0,1937,1938,1,0,0,0,1938,1939,3,220,110,0,1939,1941,
  	1,0,0,0,1940,1932,1,0,0,0,1941,1942,1,0,0,0,1942,1940,1,0,0,0,1942,1943,
  	1,0,0,0,1943,1944,1,0,0,0,1944,1945,6,108,-1,0,1945,1947,1,0,0,0,1946,
  	1898,1,0,0,0,1946,1910,1,0,0,0,1946,1922,1,0,0,0,1947,217,1,0,0,0,1948,
  	1949,7,2,0,0,1949,219,1,0,0,0,1950,1961,3,222,111,0,1951,1953,5,158,0,
  	0,1952,1951,1,0,0,0,1952,1953,1,0,0,0,1953,1954,1,0,0,0,1954,1956,5,11,
  	0,0,1955,1957,5,158,0,0,1956,1955,1,0,0,0,1956,1957,1,0,0,0,1957,1958,
  	1,0,0,0,1958,1960,3,222,111,0,1959,1952,1,0,0,0,1960,1963,1,0,0,0,1961,
  	1959,1,0,0,0,1961,1962,1,0,0,0,1962,221,1,0,0,0,1963,1961,1,0,0,0,1964,
  	1975,3,224,112,0,1965,1967,5,158,0,0,1966,1965,1,0,0,0,1966,1967,1,0,
  	0,0,1967,1968,1,0,0,0,1968,1970,5,18,0,0,1969,1971,5,158,0,0,1970,1969,
  	1,0,0,0,1970,1971,1,0,0,0,1971,1972,1,0,0,0,1972,1974,3,224,112,0,1973,
  	1966,1,0,0,0,1974,1977,1,0,0,0,1975,1973,1,0,0,0,1975,1976,1,0,0,0,1976,
  	223,1,0,0,0,1977,1975,1,0,0,0,1978,1990,3,228,114,0,1979,1981,5,158,0,
  	0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,1982,1,0,0,0,1982,1984,3,226,
  	113,0,1983,1985,5,158,0,0,1984,1983,1,0,0,0,1984,1985,1,0,0,0,1985,1986,
  	1,0,0,0,1986,1987,3,228,114,0,1987,1989,1,0,0,0,1988,1980,1,0,0,0,1989,
  	1992,1,0,0,0,1990,1988,1,0,0,0,1990,1991,1,0,0,0,1991,225,1,0,0,0,1992,
  	1990,1,0,0,0,1993,1994,7,3,0,0,1994,227,1,0,0,0,1995,2007,3,232,116,0,
  	1996,1998,5,158,0,0,1997,1996,1,0,0,0,1997,1998,1,0,0,0,1998,1999,1,0,
  	0,0,1999,2001,3,230,115,0,2000,2002,5,158,0,0,2001,2000,1,0,0,0,2001,
  	2002,1,0,0,0,2002,2003,1,0,0,0,2003,2004,3,232,116,0,2004,2006,1,0,0,
  	0,2005,1997,1,0,0,0,2006,2009,1,0,0,0,2007,2005,1,0,0,0,2007,2008,1,0,
  	0,0,2008,229,1,0,0,0,2009,2007,1,0,0,0,2010,2011,7,4,0,0,2011,231,1,0,
  	0,0,2012,2024,3,236,118,0,2013,2015,5,158,0,0,2014,2013,1,0,0,0,2014,
  	2015,1,0,0,0,2015,2016,1,0,0,0,2016,2018,3,234,117,0,2017,2019,5,158,
  	0,0,2018,2017,1,0,0,0,2018,2019,1,0,0,0,2019,2020,1,0,0,0,2020,2021,3,
  	236,118,0,2021,2023,1,0,0,0,2022,2014,1,0,0,0,2023,2026,1,0,0,0,2024,
  	2022,1,0,0,0,2024,2025,1,0,0,0,2025,233,1,0,0,0,2026,2024,1,0,0,0,2027,
  	2028,7,5,0,0,2028,235,1,0,0,0,2029,2040,3,238,119,0,2030,2032,5,158,0,
  	0,2031,2030,1,0,0,0,2031,2032,1,0,0,0,2032,2033,1,0,0,0,2033,2035,5,24,
  	0,0,2034,2036,5,158,0,0,2035,2034,1,0,0,0,2035,2036,1,0,0,0,2036,2037,
  	1,0,0,0,2037,2039,3,238,119,0,2038,2031,1,0,0,0,2039,2042,1,0,0,0,2040,
  	2038,1,0,0,0,2040,2041,1,0,0,0,2041,237,1,0,0,0,2042,2040,1,0,0,0,2043,
  	2045,5,126,0,0,2044,2046,5,158,0,0,2045,2044,1,0,0,0,2045,2046,1,0,0,
  	0,2046,2048,1,0,0,0,2047,2043,1,0,0,0,2048,2051,1,0,0,0,2049,2047,1,0,
  	0,0,2049,2050,1,0,0,0,2050,2052,1,0,0,0,2051,2049,1,0,0,0,2052,2057,3,
  	240,120,0,2053,2055,5,158,0,0,2054,2053,1,0,0,0,2054,2055,1,0,0,0,2055,
  	2056,1,0,0,0,2056,2058,5,127,0,0,2057,2054,1,0,0,0,2057,2058,1,0,0,0,
  	2058,239,1,0,0,0,2059,2067,3,250,125,0,2060,2068,3,244,122,0,2061,2063,
  	3,242,121,0,2062,2061,1,0,0,0,2063,2064,1,0,0,0,2064,2062,1,0,0,0,2064,
  	2065,1,0,0,0,2065,2068,1,0,0,0,2066,2068,3,248,124,0,2067,2060,1,0,0,
  	0,2067,2062,1,0,0,0,2067,2066,1,0,0,0,2067,2068,1,0,0,0,2068,241,1,0,
  	0,0,2069,2070,5,158,0,0,2070,2072,5,129,0,0,2071,2073,5,158,0,0,2072,
  	2071,1,0,0,0,2072,2073,1,0,0,0,2073,2074,1,0,0,0,2074,2089,3,250,125,
  	0,2075,2076,5,7,0,0,2076,2077,3,206,103,0,2077,2078,5,8,0,0,2078,2089,
  	1,0,0,0,2079,2081,5,7,0,0,2080,2082,3,206,103,0,2081,2080,1,0,0,0,2081,
  	2082,1,0,0,0,2082,2083,1,0,0,0,2083,2085,5,128,0,0,2084,2086,3,206,103,
  	0,2085,2084,1,0,0,0,2085,2086,1,0,0,0,2086,2087,1,0,0,0,2087,2089,5,8,
  	0,0,2088,2069,1,0,0,0,2088,2075,1,0,0,0,2088,2079,1,0,0,0,2089,243,1,
  	0,0,0,2090,2102,3,246,123,0,2091,2092,5,158,0,0,2092,2093,5,130,0,0,2093,
  	2094,5,158,0,0,2094,2102,5,106,0,0,2095,2096,5,158,0,0,2096,2097,5,131,
  	0,0,2097,2098,5,158,0,0,2098,2102,5,106,0,0,2099,2100,5,158,0,0,2100,
  	2102,5,132,0,0,2101,2090,1,0,0,0,2101,2091,1,0,0,0,2101,2095,1,0,0,0,
  	2101,2099,1,0,0,0,2102,2104,1,0,0,0,2103,2105,5,158,0,0,2104,2103,1,0,
  	0,0,2104,2105,1,0,0,0,2105,2106,1,0,0,0,2106,2107,3,250,125,0,2107,245,
  	1,0,0,0,2108,2110,5,158,0,0,2109,2108,1,0,0,0,2109,2110,1,0,0,0,2110,
  	2111,1,0,0,0,2111,2112,5,25,0,0,2112,247,1,0,0,0,2113,2114,5,158,0,0,
  	2114,2115,5,133,0,0,2115,2116,5,158,0,0,2116,2124,5,134,0,0,2117,2118,
  	5,158,0,0,2118,2119,5,133,0,0,2119,2120,5,158,0,0,2120,2121,5,124,0,0,
  	2121,2122,5,158,0,0,2122,2124,5,134,0,0,2123,2113,1,0,0,0,2123,2117,1,
  	0,0,0,2124,249,1,0,0,0,2125,2132,3,252,126,0,2126,2128,5,158,0,0,2127,
  	2126,1,0,0,0,2127,2128,1,0,0,0,2128,2129,1,0,0,0,2129,2131,3,280,140,
  	0,2130,2127,1,0,0,0,2131,2134,1,0,0,0,2132,2130,1,0,0,0,2132,2133,1,0,
  	0,0,2133,251,1,0,0,0,2134,2132,1,0,0,0,2135,2145,3,254,127,0,2136,2145,
  	3,290,145,0,2137,2145,3,282,141,0,2138,2145,3,266,133,0,2139,2145,3,268,
  	134,0,2140,2145,3,274,137,0,2141,2145,3,276,138,0,2142,2145,3,278,139,
  	0,2143,2145,3,286,143,0,2144,2135,1,0,0,0,2144,2136,1,0,0,0,2144,2137,
  	1,0,0,0,2144,2138,1,0,0,0,2144,2139,1,0,0,0,2144,2140,1,0,0,0,2144,2141,
  	1,0,0,0,2144,2142,1,0,0,0,2144,2143,1,0,0,0,2145,253,1,0,0,0,2146,2153,
  	3,288,144,0,2147,2153,5,144,0,0,2148,2153,3,256,128,0,2149,2153,5,134,
  	0,0,2150,2153,3,258,129,0,2151,2153,3,262,131,0,2152,2146,1,0,0,0,2152,
  	2147,1,0,0,0,2152,2148,1,0,0,0,2152,2149,1,0,0,0,2152,2150,1,0,0,0,2152,
  	2151,1,0,0,0,2153,255,1,0,0,0,2154,2155,7,6,0,0,2155,257,1,0,0,0,2156,
  	2158,5,7,0,0,2157,2159,5,158,0,0,2158,2157,1,0,0,0,2158,2159,1,0,0,0,
  	2159,2173,1,0,0,0,2160,2162,3,206,103,0,2161,2163,5,158,0,0,2162,2161,
  	1,0,0,0,2162,2163,1,0,0,0,2163,2170,1,0,0,0,2164,2166,3,260,130,0,2165,
  	2167,5,158,0,0,2166,2165,1,0,0,0,2166,2167,1,0,0,0,2167,2169,1,0,0,0,
  	2168,2164,1,0,0,0,2169,2172,1,0,0,0,2170,2168,1,0,0,0,2170,2171,1,0,0,
  	0,2171,2174,1,0,0,0,2172,2170,1,0,0,0,2173,2160,1,0,0,0,2173,2174,1,0,
  	0,0,2174,2175,1,0,0,0,2175,2176,5,8,0,0,2176,259,1,0,0,0,2177,2179,5,
  	3,0,0,2178,2180,5,158,0,0,2179,2178,1,0,0,0,2179,2180,1,0,0,0,2180,2182,
  	1,0,0,0,2181,2183,3,206,103,0,2182,2181,1,0,0,0,2182,2183,1,0,0,0,2183,
  	261,1,0,0,0,2184,2186,5,9,0,0,2185,2187,5,158,0,0,2186,2185,1,0,0,0,2186,
  	2187,1,0,0,0,2187,2188,1,0,0,0,2188,2190,3,264,132,0,2189,2191,5,158,
  	0,0,2190,2189,1,0,0,0,2190,2191,1,0,0,0,2191,2202,1,0,0,0,2192,2194,5,
  	3,0,0,2193,2195,5,158,0,0,2194,2193,1,0,0,0,2194,2195,1,0,0,0,2195,2196,
  	1,0,0,0,2196,2198,3,264,132,0,2197,2199,5,158,0,0,2198,2197,1,0,0,0,2198,
  	2199,1,0,0,0,2199,2201,1,0,0,0,2200,2192,1,0,0,0,2201,2204,1,0,0,0,2202,
  	2200,1,0,0,0,2202,2203,1,0,0,0,2203,2205,1,0,0,0,2204,2202,1,0,0,0,2205,
  	2206,5,10,0,0,2206,263,1,0,0,0,2207,2210,3,302,151,0,2208,2210,5,144,
  	0,0,2209,2207,1,0,0,0,2209,2208,1,0,0,0,2210,2212,1,0,0,0,2211,2213,5,
  	158,0,0,2212,2211,1,0,0,0,2212,2213,1,0,0,0,2213,2214,1,0,0,0,2214,2216,
  	5,128,0,0,2215,2217,5,158,0,0,2216,2215,1,0,0,0,2216,2217,1,0,0,0,2217,
  	2218,1,0,0,0,2218,2219,3,206,103,0,2219,265,1,0,0,0,2220,2222,5,2,0,0,
  	2221,2223,5,158,0,0,2222,2221,1,0,0,0,2222,2223,1,0,0,0,2223,2224,1,0,
  	0,0,2224,2226,3,206,103,0,2225,2227,5,158,0,0,2226,2225,1,0,0,0,2226,
  	2227,1,0,0,0,2227,2228,1,0,0,0,2228,2229,5,4,0,0,2229,267,1,0,0,0,2230,
  	2232,5,137,0,0,2231,2233,5,158,0,0,2232,2231,1,0,0,0,2232,2233,1,0,0,
  	0,2233,2234,1,0,0,0,2234,2236,5,2,0,0,2235,2237,5,158,0,0,2236,2235,1,
  	0,0,0,2236,2237,1,0,0,0,2237,2238,1,0,0,0,2238,2240,5,109,0,0,2239,2241,
  	5,158,0,0,2240,2239,1,0,0,0,2240,2241,1,0,0,0,2241,2242,1,0,0,0,2242,
  	2279,5,4,0,0,2243,2245,3,270,135,0,2244,2246,5,158,0,0,2245,2244,1,0,
  	0,0,2245,2246,1,0,0,0,2246,2247,1,0,0,0,2247,2249,5,2,0,0,2248,2250,5,
  	158,0,0,2249,2248,1,0,0,0,2249,2250,1,0,0,0,2250,2255,1,0,0,0,2251,2253,
  	5,108,0,0,2252,2254,5,158,0,0,2253,2252,1,0,0,0,2253,2254,1,0,0,0,2254,
  	2256,1,0,0,0,2255,2251,1,0,0,0,2255,2256,1,0,0,0,2256,2274,1,0,0,0,2257,
  	2259,3,272,136,0,2258,2260,5,158,0,0,2259,2258,1,0,0,0,2259,2260,1,0,
  	0,0,2260,2271,1,0,0,0,2261,2263,5,3,0,0,2262,2264,5,158,0,0,2263,2262,
  	1,0,0,0,2263,2264,1,0,0,0,2264,2265,1,0,0,0,2265,2267,3,272,136,0,2266,
  	2268,5,158,0,0,2267,2266,1,0,0,0,2267,2268,1,0,0,0,2268,2270,1,0,0,0,
  	2269,2261,1,0,0,0,2270,2273,1,0,0,0,2271,2269,1,0,0,0,2271,2272,1,0,0,
  	0,2272,2275,1,0,0,0,2273,2271,1,0,0,0,2274,2257,1,0,0,0,2274,2275,1,0,
  	0,0,2275,2276,1,0,0,0,2276,2277,5,4,0,0,2277,2279,1,0,0,0,2278,2230,1,
  	0,0,0,2278,2243,1,0,0,0,2279,269,1,0,0,0,2280,2281,3,302,151,0,2281,271,
  	1,0,0,0,2282,2284,3,302,151,0,2283,2285,5,158,0,0,2284,2283,1,0,0,0,2284,
  	2285,1,0,0,0,2285,2286,1,0,0,0,2286,2287,5,128,0,0,2287,2289,5,6,0,0,
  	2288,2290,5,158,0,0,2289,2288,1,0,0,0,2289,2290,1,0,0,0,2290,2292,1,0,
  	0,0,2291,2282,1,0,0,0,2291,2292,1,0,0,0,2292,2293,1,0,0,0,2293,2294,3,
  	206,103,0,2294,273,1,0,0,0,2295,2300,3,174,87,0,2296,2298,5,158,0,0,2297,
  	2296,1,0,0,0,2297,2298,1,0,0,0,2298,2299,1,0,0,0,2299,2301,3,176,88,0,
  	2300,2297,1,0,0,0,2301,2302,1,0,0,0,2302,2300,1,0,0,0,2302,2303,1,0,0,
  	0,2303,275,1,0,0,0,2304,2306,5,138,0,0,2305,2307,5,158,0,0,2306,2305,
  	1,0,0,0,2306,2307,1,0,0,0,2307,2308,1,0,0,0,2308,2310,5,9,0,0,2309,2311,
  	5,158,0,0,2310,2309,1,0,0,0,2310,2311,1,0,0,0,2311,2312,1,0,0,0,2312,
  	2314,5,98,0,0,2313,2315,5,158,0,0,2314,2313,1,0,0,0,2314,2315,1,0,0,0,
  	2315,2316,1,0,0,0,2316,2321,3,166,83,0,2317,2319,5,158,0,0,2318,2317,
  	1,0,0,0,2318,2319,1,0,0,0,2319,2320,1,0,0,0,2320,2322,3,164,82,0,2321,
  	2318,1,0,0,0,2321,2322,1,0,0,0,2322,2324,1,0,0,0,2323,2325,5,158,0,0,
  	2324,2323,1,0,0,0,2324,2325,1,0,0,0,2325,2326,1,0,0,0,2326,2327,5,10,
  	0,0,2327,277,1,0,0,0,2328,2330,5,137,0,0,2329,2331,5,158,0,0,2330,2329,
  	1,0,0,0,2330,2331,1,0,0,0,2331,2332,1,0,0,0,2332,2334,5,9,0,0,2333,2335,
  	5,158,0,0,2334,2333,1,0,0,0,2334,2335,1,0,0,0,2335,2336,1,0,0,0,2336,
  	2338,5,98,0,0,2337,2339,5,158,0,0,2338,2337,1,0,0,0,2338,2339,1,0,0,0,
  	2339,2340,1,0,0,0,2340,2345,3,166,83,0,2341,2343,5,158,0,0,2342,2341,
  	1,0,0,0,2342,2343,1,0,0,0,2343,2344,1,0,0,0,2344,2346,3,164,82,0,2345,
  	2342,1,0,0,0,2345,2346,1,0,0,0,2346,2348,1,0,0,0,2347,2349,5,158,0,0,
  	2348,2347,1,0,0,0,2348,2349,1,0,0,0,2349,2350,1,0,0,0,2350,2351,5,10,
  	0,0,2351,279,1,0,0,0,2352,2354,5,5,0,0,2353,2355,5,158,0,0,2354,2353,
  	1,0,0,0,2354,2355,1,0,0,0,2355,2358,1,0,0,0,2356,2359,3,294,147,0,2357,
  	2359,5,109,0,0,2358,2356,1,0,0,0,2358,2357,1,0,0,0,2359,281,1,0,0,0,2360,
  	2365,5,139,0,0,2361,2363,5,158,0,0,2362,2361,1,0,0,0,2362,2363,1,0,0,
  	0,2363,2364,1,0,0,0,2364,2366,3,284,142,0,2365,2362,1,0,0,0,2366,2367,
  	1,0,0,0,2367,2365,1,0,0,0,2367,2368,1,0,0,0,2368,2383,1,0,0,0,2369,2371,
  	5,139,0,0,2370,2372,5,158,0,0,2371,2370,1,0,0,0,2371,2372,1,0,0,0,2372,
  	2373,1,0,0,0,2373,2378,3,206,103,0,2374,2376,5,158,0,0,2375,2374,1,0,
  	0,0,2375,2376,1,0,0,0,2376,2377,1,0,0,0,2377,2379,3,284,142,0,2378,2375,
  	1,0,0,0,2379,2380,1,0,0,0,2380,2378,1,0,0,0,2380,2381,1,0,0,0,2381,2383,
  	1,0,0,0,2382,2360,1,0,0,0,2382,2369,1,0,0,0,2383,2392,1,0,0,0,2384,2386,
  	5,158,0,0,2385,2384,1,0,0,0,2385,2386,1,0,0,0,2386,2387,1,0,0,0,2387,
  	2389,5,140,0,0,2388,2390,5,158,0,0,2389,2388,1,0,0,0,2389,2390,1,0,0,
  	0,2390,2391,1,0,0,0,2391,2393,3,206,103,0,2392,2385,1,0,0,0,2392,2393,
  	1,0,0,0,2393,2395,1,0,0,0,2394,2396,5,158,0,0,2395,2394,1,0,0,0,2395,
  	2396,1,0,0,0,2396,2397,1,0,0,0,2397,2398,5,141,0,0,2398,283,1,0,0,0,2399,
  	2401,5,142,0,0,2400,2402,5,158,0,0,2401,2400,1,0,0,0,2401,2402,1,0,0,
  	0,2402,2403,1,0,0,0,2403,2405,3,206,103,0,2404,2406,5,158,0,0,2405,2404,
  	1,0,0,0,2405,2406,1,0,0,0,2406,2407,1,0,0,0,2407,2409,5,143,0,0,2408,
  	2410,5,158,0,0,2409,2408,1,0,0,0,2409,2410,1,0,0,0,2410,2411,1,0,0,0,
  	2411,2412,3,206,103,0,2412,285,1,0,0,0,2413,2414,3,302,151,0,2414,287,
  	1,0,0,0,2415,2418,3,298,149,0,2416,2418,3,296,148,0,2417,2415,1,0,0,0,
  	2417,2416,1,0,0,0,2418,289,1,0,0,0,2419,2422,5,26,0,0,2420,2423,3,302,
  	151,0,2421,2423,5,146,0,0,2422,2420,1,0,0,0,2422,2421,1,0,0,0,2423,291,
  	1,0,0,0,2424,2426,3,252,126,0,2425,2427,5,158,0,0,2426,2425,1,0,0,0,2426,
  	2427,1,0,0,0,2427,2428,1,0,0,0,2428,2429,3,280,140,0,2429,293,1,0,0,0,
  	2430,2431,3,300,150,0,2431,295,1,0,0,0,2432,2433,5,146,0,0,2433,297,1,
  	0,0,0,2434,2435,5,153,0,0,2435,299,1,0,0,0,2436,2437,3,302,151,0,2437,
  	301,1,0,0,0,2438,2444,5,154,0,0,2439,2440,5,157,0,0,2440,2444,6,151,-1,
  	0,2441,2444,5,147,0,0,2442,2444,3,304,152,0,2443,2438,1,0,0,0,2443,2439,
  	1,0,0,0,2443,2441,1,0,0,0,2443,2442,1,0,0,0,2444,303,1,0,0,0,2445,2446,
  	7,7,0,0,2446,305,1,0,0,0,2447,2448,7,8,0,0,2448,307,1,0,0,0,2449,2450,
  	7,9,0,0,2450,309,1,0,0,0,2451,2452,7,10,0,0,2452,311,1,0,0,0,418,314,
  	318,323,327,332,335,339,342,365,371,375,378,384,387,391,395,399,404,408,
  	415,419,427,431,441,445,449,454,467,471,479,482,490,493,508,513,519,523,
  	526,529,535,539,545,549,554,569,573,595,599,602,605,608,611,615,620,624,
  	634,638,643,648,653,659,663,667,672,679,683,687,690,694,698,710,714,718,
  	722,727,739,743,747,751,755,757,761,765,767,781,785,789,793,798,801,805,
  	809,811,815,819,821,848,856,862,865,875,878,886,889,895,898,904,926,937,
  	959,963,968,979,983,987,995,999,1003,1009,1013,1017,1023,1027,1031,1035,
  	1039,1045,1049,1053,1057,1061,1065,1071,1078,1083,1089,1109,1113,1121,
  	1131,1136,1141,1145,1150,1156,1161,1164,1168,1172,1176,1182,1186,1191,
  	1196,1200,1203,1207,1211,1215,1219,1223,1229,1233,1238,1242,1251,1257,
  	1265,1269,1273,1277,1284,1287,1290,1293,1299,1302,1306,1310,1314,1317,
  	1321,1331,1337,1344,1357,1361,1365,1369,1374,1379,1383,1389,1393,1397,
  	1401,1406,1412,1415,1421,1424,1430,1434,1438,1442,1446,1451,1456,1460,
  	1465,1468,1477,1486,1491,1504,1507,1515,1519,1524,1529,1533,1538,1544,
  	1549,1556,1560,1564,1566,1570,1572,1576,1578,1584,1590,1594,1597,1600,
  	1606,1609,1612,1616,1622,1625,1628,1632,1636,1640,1642,1646,1648,1652,
  	1654,1658,1660,1666,1670,1674,1678,1682,1686,1690,1694,1698,1701,1707,
  	1711,1715,1718,1723,1728,1733,1738,1744,1750,1753,1756,1759,1763,1766,
  	1769,1772,1775,1779,1783,1787,1791,1795,1798,1801,1805,1809,1813,1817,
  	1819,1825,1828,1831,1837,1840,1843,1864,1874,1884,1889,1893,1900,1904,
  	1908,1912,1916,1924,1928,1932,1936,1942,1946,1952,1956,1961,1966,1970,
  	1975,1980,1984,1990,1997,2001,2007,2014,2018,2024,2031,2035,2040,2045,
  	2049,2054,2057,2064,2067,2072,2081,2085,2088,2101,2104,2109,2123,2127,
  	2132,2144,2152,2158,2162,2166,2170,2173,2179,2182,2186,2190,2194,2198,
  	2202,2209,2212,2216,2222,2226,2232,2236,2240,2245,2249,2253,2255,2259,
  	2263,2267,2271,2274,2278,2284,2289,2291,2297,2302,2306,2310,2314,2318,
  	2321,2324,2330,2334,2338,2342,2345,2348,2354,2358,2362,2367,2371,2375,
  	2380,2382,2385,2389,2392,2395,2401,2405,2409,2417,2422,2426,2443
=======
  	3,0,0,1034,1036,5,157,0,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,1037,
  	1,0,0,0,1037,1039,3,88,44,0,1038,1040,5,157,0,0,1039,1038,1,0,0,0,1039,
  	1040,1,0,0,0,1040,1041,1,0,0,0,1041,1042,5,4,0,0,1042,1044,1,0,0,0,1043,
  	991,1,0,0,0,1043,993,1,0,0,0,1043,1007,1,0,0,0,1043,1021,1,0,0,0,1044,
  	1049,1,0,0,0,1045,1046,10,4,0,0,1046,1048,3,90,45,0,1047,1045,1,0,0,0,
  	1048,1051,1,0,0,0,1049,1047,1,0,0,0,1049,1050,1,0,0,0,1050,89,1,0,0,0,
  	1051,1049,1,0,0,0,1052,1056,3,92,46,0,1053,1055,3,92,46,0,1054,1053,1,
  	0,0,0,1055,1058,1,0,0,0,1056,1054,1,0,0,0,1056,1057,1,0,0,0,1057,91,1,
  	0,0,0,1058,1056,1,0,0,0,1059,1061,5,7,0,0,1060,1062,3,296,148,0,1061,
  	1060,1,0,0,0,1061,1062,1,0,0,0,1062,1063,1,0,0,0,1063,1064,5,8,0,0,1064,
  	93,1,0,0,0,1065,1068,3,96,48,0,1066,1068,3,98,49,0,1067,1065,1,0,0,0,
  	1067,1066,1,0,0,0,1068,95,1,0,0,0,1069,1070,5,79,0,0,1070,97,1,0,0,0,
  	1071,1072,5,80,0,0,1072,99,1,0,0,0,1073,1074,5,81,0,0,1074,1075,5,157,
  	0,0,1075,1088,5,82,0,0,1076,1077,5,81,0,0,1077,1078,5,157,0,0,1078,1079,
  	5,82,0,0,1079,1080,5,157,0,0,1080,1081,5,83,0,0,1081,1082,5,157,0,0,1082,
  	1088,5,84,0,0,1083,1088,5,86,0,0,1084,1088,5,87,0,0,1085,1088,5,88,0,
  	0,1086,1088,5,89,0,0,1087,1073,1,0,0,0,1087,1076,1,0,0,0,1087,1083,1,
  	0,0,0,1087,1084,1,0,0,0,1087,1085,1,0,0,0,1087,1086,1,0,0,0,1088,101,
  	1,0,0,0,1089,1092,3,104,52,0,1090,1092,3,106,53,0,1091,1089,1,0,0,0,1091,
  	1090,1,0,0,0,1092,103,1,0,0,0,1093,1094,5,94,0,0,1094,1095,5,157,0,0,
  	1095,1096,5,91,0,0,1096,1099,5,157,0,0,1097,1100,5,143,0,0,1098,1100,
  	3,286,143,0,1099,1097,1,0,0,0,1099,1098,1,0,0,0,1100,105,1,0,0,0,1101,
  	1102,5,90,0,0,1102,1103,5,157,0,0,1103,1104,3,286,143,0,1104,107,1,0,
  	0,0,1105,1106,3,110,55,0,1106,109,1,0,0,0,1107,1114,3,114,57,0,1108,1110,
  	5,157,0,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,1110,1111,1,0,0,0,1111,
  	1113,3,112,56,0,1112,1109,1,0,0,0,1113,1116,1,0,0,0,1114,1112,1,0,0,0,
  	1114,1115,1,0,0,0,1115,1129,1,0,0,0,1116,1114,1,0,0,0,1117,1119,3,148,
  	74,0,1118,1120,5,157,0,0,1119,1118,1,0,0,0,1119,1120,1,0,0,0,1120,1122,
  	1,0,0,0,1121,1117,1,0,0,0,1122,1123,1,0,0,0,1123,1121,1,0,0,0,1123,1124,
  	1,0,0,0,1124,1125,1,0,0,0,1125,1126,3,114,57,0,1126,1127,6,55,-1,0,1127,
  	1129,1,0,0,0,1128,1107,1,0,0,0,1128,1121,1,0,0,0,1129,111,1,0,0,0,1130,
  	1131,5,92,0,0,1131,1132,5,157,0,0,1132,1134,5,93,0,0,1133,1135,5,157,
  	0,0,1134,1133,1,0,0,0,1134,1135,1,0,0,0,1135,1136,1,0,0,0,1136,1143,3,
  	114,57,0,1137,1139,5,92,0,0,1138,1140,5,157,0,0,1139,1138,1,0,0,0,1139,
  	1140,1,0,0,0,1140,1141,1,0,0,0,1141,1143,3,114,57,0,1142,1130,1,0,0,0,
  	1142,1137,1,0,0,0,1143,113,1,0,0,0,1144,1147,3,116,58,0,1145,1147,3,118,
  	59,0,1146,1144,1,0,0,0,1146,1145,1,0,0,0,1147,115,1,0,0,0,1148,1150,3,
  	124,62,0,1149,1151,5,157,0,0,1150,1149,1,0,0,0,1150,1151,1,0,0,0,1151,
  	1153,1,0,0,0,1152,1148,1,0,0,0,1153,1156,1,0,0,0,1154,1152,1,0,0,0,1154,
  	1155,1,0,0,0,1155,1157,1,0,0,0,1156,1154,1,0,0,0,1157,1194,3,148,74,0,
  	1158,1160,3,124,62,0,1159,1161,5,157,0,0,1160,1159,1,0,0,0,1160,1161,
  	1,0,0,0,1161,1163,1,0,0,0,1162,1158,1,0,0,0,1163,1166,1,0,0,0,1164,1162,
  	1,0,0,0,1164,1165,1,0,0,0,1165,1167,1,0,0,0,1166,1164,1,0,0,0,1167,1174,
  	3,122,61,0,1168,1170,5,157,0,0,1169,1168,1,0,0,0,1169,1170,1,0,0,0,1170,
  	1171,1,0,0,0,1171,1173,3,122,61,0,1172,1169,1,0,0,0,1173,1176,1,0,0,0,
  	1174,1172,1,0,0,0,1174,1175,1,0,0,0,1175,1181,1,0,0,0,1176,1174,1,0,0,
  	0,1177,1179,5,157,0,0,1178,1177,1,0,0,0,1178,1179,1,0,0,0,1179,1180,1,
  	0,0,0,1180,1182,3,148,74,0,1181,1178,1,0,0,0,1181,1182,1,0,0,0,1182,1194,
  	1,0,0,0,1183,1185,3,124,62,0,1184,1186,5,157,0,0,1185,1184,1,0,0,0,1185,
  	1186,1,0,0,0,1186,1188,1,0,0,0,1187,1183,1,0,0,0,1188,1189,1,0,0,0,1189,
  	1187,1,0,0,0,1189,1190,1,0,0,0,1190,1191,1,0,0,0,1191,1192,6,58,-1,0,
  	1192,1194,1,0,0,0,1193,1154,1,0,0,0,1193,1164,1,0,0,0,1193,1187,1,0,0,
  	0,1194,117,1,0,0,0,1195,1197,3,120,60,0,1196,1198,5,157,0,0,1197,1196,
  	1,0,0,0,1197,1198,1,0,0,0,1198,1200,1,0,0,0,1199,1195,1,0,0,0,1200,1201,
  	1,0,0,0,1201,1199,1,0,0,0,1201,1202,1,0,0,0,1202,1203,1,0,0,0,1203,1204,
  	3,116,58,0,1204,119,1,0,0,0,1205,1207,3,124,62,0,1206,1208,5,157,0,0,
  	1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1210,1,0,0,0,1209,1205,1,0,0,
  	0,1210,1213,1,0,0,0,1211,1209,1,0,0,0,1211,1212,1,0,0,0,1212,1220,1,0,
  	0,0,1213,1211,1,0,0,0,1214,1216,3,122,61,0,1215,1217,5,157,0,0,1216,1215,
  	1,0,0,0,1216,1217,1,0,0,0,1217,1219,1,0,0,0,1218,1214,1,0,0,0,1219,1222,
  	1,0,0,0,1220,1218,1,0,0,0,1220,1221,1,0,0,0,1221,1223,1,0,0,0,1222,1220,
  	1,0,0,0,1223,1224,3,146,73,0,1224,121,1,0,0,0,1225,1230,3,134,67,0,1226,
  	1230,3,136,68,0,1227,1230,3,140,70,0,1228,1230,3,144,72,0,1229,1225,1,
  	0,0,0,1229,1226,1,0,0,0,1229,1227,1,0,0,0,1229,1228,1,0,0,0,1230,123,
  	1,0,0,0,1231,1236,3,130,65,0,1232,1236,3,132,66,0,1233,1236,3,128,64,
  	0,1234,1236,3,126,63,0,1235,1231,1,0,0,0,1235,1232,1,0,0,0,1235,1233,
  	1,0,0,0,1235,1234,1,0,0,0,1236,125,1,0,0,0,1237,1255,5,94,0,0,1238,1239,
  	5,157,0,0,1239,1240,5,105,0,0,1240,1241,5,157,0,0,1241,1243,5,95,0,0,
  	1242,1244,5,157,0,0,1243,1242,1,0,0,0,1243,1244,1,0,0,0,1244,1245,1,0,
  	0,0,1245,1247,5,2,0,0,1246,1248,5,157,0,0,1247,1246,1,0,0,0,1247,1248,
  	1,0,0,0,1248,1249,1,0,0,0,1249,1251,3,82,41,0,1250,1252,5,157,0,0,1251,
  	1250,1,0,0,0,1251,1252,1,0,0,0,1252,1253,1,0,0,0,1253,1254,5,4,0,0,1254,
  	1256,1,0,0,0,1255,1238,1,0,0,0,1255,1256,1,0,0,0,1256,1257,1,0,0,0,1257,
  	1258,5,157,0,0,1258,1259,5,54,0,0,1259,1260,5,157,0,0,1260,1265,3,10,
  	5,0,1261,1263,5,157,0,0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,1264,
  	1,0,0,0,1264,1266,3,42,21,0,1265,1262,1,0,0,0,1265,1266,1,0,0,0,1266,
  	1271,1,0,0,0,1267,1269,5,157,0,0,1268,1267,1,0,0,0,1268,1269,1,0,0,0,
  	1269,1270,1,0,0,0,1270,1272,3,164,82,0,1271,1268,1,0,0,0,1271,1272,1,
  	0,0,0,1272,127,1,0,0,0,1273,1274,5,49,0,0,1274,1275,5,157,0,0,1275,1280,
  	3,268,134,0,1276,1278,5,157,0,0,1277,1276,1,0,0,0,1277,1278,1,0,0,0,1278,
  	1279,1,0,0,0,1279,1281,3,164,82,0,1280,1277,1,0,0,0,1280,1281,1,0,0,0,
  	1281,129,1,0,0,0,1282,1283,5,96,0,0,1283,1285,5,157,0,0,1284,1282,1,0,
  	0,0,1284,1285,1,0,0,0,1285,1286,1,0,0,0,1286,1288,5,97,0,0,1287,1289,
  	5,157,0,0,1288,1287,1,0,0,0,1288,1289,1,0,0,0,1289,1290,1,0,0,0,1290,
  	1295,3,166,83,0,1291,1293,5,157,0,0,1292,1291,1,0,0,0,1292,1293,1,0,0,
  	0,1293,1294,1,0,0,0,1294,1296,3,164,82,0,1295,1292,1,0,0,0,1295,1296,
  	1,0,0,0,1296,131,1,0,0,0,1297,1299,5,98,0,0,1298,1300,5,157,0,0,1299,
  	1298,1,0,0,0,1299,1300,1,0,0,0,1300,1301,1,0,0,0,1301,1302,3,206,103,
  	0,1302,1303,5,157,0,0,1303,1304,5,109,0,0,1304,1305,5,157,0,0,1305,1306,
  	3,286,143,0,1306,133,1,0,0,0,1307,1309,5,99,0,0,1308,1310,5,157,0,0,1309,
  	1308,1,0,0,0,1309,1310,1,0,0,0,1310,1311,1,0,0,0,1311,1312,3,166,83,0,
  	1312,135,1,0,0,0,1313,1315,5,100,0,0,1314,1316,5,157,0,0,1315,1314,1,
  	0,0,0,1315,1316,1,0,0,0,1316,1317,1,0,0,0,1317,1322,3,166,83,0,1318,1319,
  	5,157,0,0,1319,1321,3,138,69,0,1320,1318,1,0,0,0,1321,1324,1,0,0,0,1322,
  	1320,1,0,0,0,1322,1323,1,0,0,0,1323,137,1,0,0,0,1324,1322,1,0,0,0,1325,
  	1326,5,101,0,0,1326,1327,5,157,0,0,1327,1328,5,97,0,0,1328,1329,5,157,
  	0,0,1329,1336,3,140,70,0,1330,1331,5,101,0,0,1331,1332,5,157,0,0,1332,
  	1333,5,99,0,0,1333,1334,5,157,0,0,1334,1336,3,140,70,0,1335,1325,1,0,
  	0,0,1335,1330,1,0,0,0,1336,139,1,0,0,0,1337,1339,5,102,0,0,1338,1340,
  	5,157,0,0,1339,1338,1,0,0,0,1339,1340,1,0,0,0,1340,1341,1,0,0,0,1341,
  	1352,3,142,71,0,1342,1344,5,157,0,0,1343,1342,1,0,0,0,1343,1344,1,0,0,
  	0,1344,1345,1,0,0,0,1345,1347,5,3,0,0,1346,1348,5,157,0,0,1347,1346,1,
  	0,0,0,1347,1348,1,0,0,0,1348,1349,1,0,0,0,1349,1351,3,142,71,0,1350,1343,
  	1,0,0,0,1351,1354,1,0,0,0,1352,1350,1,0,0,0,1352,1353,1,0,0,0,1353,141,
  	1,0,0,0,1354,1352,1,0,0,0,1355,1357,3,292,146,0,1356,1358,5,157,0,0,1357,
  	1356,1,0,0,0,1357,1358,1,0,0,0,1358,1359,1,0,0,0,1359,1361,5,6,0,0,1360,
  	1362,5,157,0,0,1361,1360,1,0,0,0,1361,1362,1,0,0,0,1362,1363,1,0,0,0,
  	1363,1364,3,206,103,0,1364,143,1,0,0,0,1365,1366,5,103,0,0,1366,1368,
  	5,157,0,0,1367,1365,1,0,0,0,1367,1368,1,0,0,0,1368,1369,1,0,0,0,1369,
  	1371,5,104,0,0,1370,1372,5,157,0,0,1371,1370,1,0,0,0,1371,1372,1,0,0,
  	0,1372,1373,1,0,0,0,1373,1384,3,206,103,0,1374,1376,5,157,0,0,1375,1374,
  	1,0,0,0,1375,1376,1,0,0,0,1376,1377,1,0,0,0,1377,1379,5,3,0,0,1378,1380,
  	5,157,0,0,1379,1378,1,0,0,0,1379,1380,1,0,0,0,1380,1381,1,0,0,0,1381,
  	1383,3,206,103,0,1382,1375,1,0,0,0,1383,1386,1,0,0,0,1384,1382,1,0,0,
  	0,1384,1385,1,0,0,0,1385,145,1,0,0,0,1386,1384,1,0,0,0,1387,1388,5,105,
  	0,0,1388,1393,3,150,75,0,1389,1391,5,157,0,0,1390,1389,1,0,0,0,1390,1391,
  	1,0,0,0,1391,1392,1,0,0,0,1392,1394,3,164,82,0,1393,1390,1,0,0,0,1393,
  	1394,1,0,0,0,1394,147,1,0,0,0,1395,1396,5,106,0,0,1396,1397,3,150,75,
  	0,1397,149,1,0,0,0,1398,1400,5,157,0,0,1399,1398,1,0,0,0,1399,1400,1,
  	0,0,0,1400,1401,1,0,0,0,1401,1403,5,107,0,0,1402,1399,1,0,0,0,1402,1403,
  	1,0,0,0,1403,1404,1,0,0,0,1404,1405,5,157,0,0,1405,1408,3,152,76,0,1406,
  	1407,5,157,0,0,1407,1409,3,156,78,0,1408,1406,1,0,0,0,1408,1409,1,0,0,
  	0,1409,1412,1,0,0,0,1410,1411,5,157,0,0,1411,1413,3,158,79,0,1412,1410,
  	1,0,0,0,1412,1413,1,0,0,0,1413,1416,1,0,0,0,1414,1415,5,157,0,0,1415,
  	1417,3,160,80,0,1416,1414,1,0,0,0,1416,1417,1,0,0,0,1417,151,1,0,0,0,
  	1418,1429,5,108,0,0,1419,1421,5,157,0,0,1420,1419,1,0,0,0,1420,1421,1,
  	0,0,0,1421,1422,1,0,0,0,1422,1424,5,3,0,0,1423,1425,5,157,0,0,1424,1423,
  	1,0,0,0,1424,1425,1,0,0,0,1425,1426,1,0,0,0,1426,1428,3,154,77,0,1427,
  	1420,1,0,0,0,1428,1431,1,0,0,0,1429,1427,1,0,0,0,1429,1430,1,0,0,0,1430,
  	1447,1,0,0,0,1431,1429,1,0,0,0,1432,1443,3,154,77,0,1433,1435,5,157,0,
  	0,1434,1433,1,0,0,0,1434,1435,1,0,0,0,1435,1436,1,0,0,0,1436,1438,5,3,
  	0,0,1437,1439,5,157,0,0,1438,1437,1,0,0,0,1438,1439,1,0,0,0,1439,1440,
  	1,0,0,0,1440,1442,3,154,77,0,1441,1434,1,0,0,0,1442,1445,1,0,0,0,1443,
  	1441,1,0,0,0,1443,1444,1,0,0,0,1444,1447,1,0,0,0,1445,1443,1,0,0,0,1446,
  	1418,1,0,0,0,1446,1432,1,0,0,0,1447,153,1,0,0,0,1448,1449,3,206,103,0,
  	1449,1450,5,157,0,0,1450,1451,5,109,0,0,1451,1452,5,157,0,0,1452,1453,
  	3,286,143,0,1453,1456,1,0,0,0,1454,1456,3,206,103,0,1455,1448,1,0,0,0,
  	1455,1454,1,0,0,0,1456,155,1,0,0,0,1457,1458,5,110,0,0,1458,1459,5,157,
  	0,0,1459,1460,5,111,0,0,1460,1461,5,157,0,0,1461,1469,3,162,81,0,1462,
  	1464,5,3,0,0,1463,1465,5,157,0,0,1464,1463,1,0,0,0,1464,1465,1,0,0,0,
  	1465,1466,1,0,0,0,1466,1468,3,162,81,0,1467,1462,1,0,0,0,1468,1471,1,
  	0,0,0,1469,1467,1,0,0,0,1469,1470,1,0,0,0,1470,157,1,0,0,0,1471,1469,
  	1,0,0,0,1472,1473,5,112,0,0,1473,1474,5,157,0,0,1474,1475,3,206,103,0,
  	1475,159,1,0,0,0,1476,1477,5,113,0,0,1477,1478,5,157,0,0,1478,1479,3,
  	206,103,0,1479,161,1,0,0,0,1480,1485,3,206,103,0,1481,1483,5,157,0,0,
  	1482,1481,1,0,0,0,1482,1483,1,0,0,0,1483,1484,1,0,0,0,1484,1486,7,1,0,
  	0,1485,1482,1,0,0,0,1485,1486,1,0,0,0,1486,163,1,0,0,0,1487,1488,5,118,
  	0,0,1488,1489,5,157,0,0,1489,1490,3,206,103,0,1490,165,1,0,0,0,1491,1502,
  	3,168,84,0,1492,1494,5,157,0,0,1493,1492,1,0,0,0,1493,1494,1,0,0,0,1494,
  	1495,1,0,0,0,1495,1497,5,3,0,0,1496,1498,5,157,0,0,1497,1496,1,0,0,0,
  	1497,1498,1,0,0,0,1498,1499,1,0,0,0,1499,1501,3,168,84,0,1500,1493,1,
  	0,0,0,1501,1504,1,0,0,0,1502,1500,1,0,0,0,1502,1503,1,0,0,0,1503,167,
  	1,0,0,0,1504,1502,1,0,0,0,1505,1507,3,286,143,0,1506,1508,5,157,0,0,1507,
  	1506,1,0,0,0,1507,1508,1,0,0,0,1508,1509,1,0,0,0,1509,1511,5,6,0,0,1510,
  	1512,5,157,0,0,1511,1510,1,0,0,0,1511,1512,1,0,0,0,1512,1513,1,0,0,0,
  	1513,1514,3,170,85,0,1514,1517,1,0,0,0,1515,1517,3,170,85,0,1516,1505,
  	1,0,0,0,1516,1515,1,0,0,0,1517,169,1,0,0,0,1518,1519,3,172,86,0,1519,
  	171,1,0,0,0,1520,1527,3,174,87,0,1521,1523,5,157,0,0,1522,1521,1,0,0,
  	0,1522,1523,1,0,0,0,1523,1524,1,0,0,0,1524,1526,3,176,88,0,1525,1522,
  	1,0,0,0,1526,1529,1,0,0,0,1527,1525,1,0,0,0,1527,1528,1,0,0,0,1528,1535,
  	1,0,0,0,1529,1527,1,0,0,0,1530,1531,5,2,0,0,1531,1532,3,172,86,0,1532,
  	1533,5,4,0,0,1533,1535,1,0,0,0,1534,1520,1,0,0,0,1534,1530,1,0,0,0,1535,
  	173,1,0,0,0,1536,1538,5,2,0,0,1537,1539,5,157,0,0,1538,1537,1,0,0,0,1538,
  	1539,1,0,0,0,1539,1544,1,0,0,0,1540,1542,3,286,143,0,1541,1543,5,157,
  	0,0,1542,1541,1,0,0,0,1542,1543,1,0,0,0,1543,1545,1,0,0,0,1544,1540,1,
  	0,0,0,1544,1545,1,0,0,0,1545,1550,1,0,0,0,1546,1548,3,186,93,0,1547,1549,
  	5,157,0,0,1548,1547,1,0,0,0,1548,1549,1,0,0,0,1549,1551,1,0,0,0,1550,
  	1546,1,0,0,0,1550,1551,1,0,0,0,1551,1556,1,0,0,0,1552,1554,3,182,91,0,
  	1553,1555,5,157,0,0,1554,1553,1,0,0,0,1554,1555,1,0,0,0,1555,1557,1,0,
  	0,0,1556,1552,1,0,0,0,1556,1557,1,0,0,0,1557,1558,1,0,0,0,1558,1559,5,
  	4,0,0,1559,175,1,0,0,0,1560,1562,3,178,89,0,1561,1563,5,157,0,0,1562,
  	1561,1,0,0,0,1562,1563,1,0,0,0,1563,1564,1,0,0,0,1564,1565,3,174,87,0,
  	1565,177,1,0,0,0,1566,1568,3,306,153,0,1567,1569,5,157,0,0,1568,1567,
  	1,0,0,0,1568,1569,1,0,0,0,1569,1570,1,0,0,0,1570,1572,3,310,155,0,1571,
  	1573,5,157,0,0,1572,1571,1,0,0,0,1572,1573,1,0,0,0,1573,1575,1,0,0,0,
  	1574,1576,3,180,90,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,1578,1,
  	0,0,0,1577,1579,5,157,0,0,1578,1577,1,0,0,0,1578,1579,1,0,0,0,1579,1580,
  	1,0,0,0,1580,1581,3,310,155,0,1581,1611,1,0,0,0,1582,1584,3,310,155,0,
  	1583,1585,5,157,0,0,1584,1583,1,0,0,0,1584,1585,1,0,0,0,1585,1587,1,0,
  	0,0,1586,1588,3,180,90,0,1587,1586,1,0,0,0,1587,1588,1,0,0,0,1588,1590,
  	1,0,0,0,1589,1591,5,157,0,0,1590,1589,1,0,0,0,1590,1591,1,0,0,0,1591,
  	1592,1,0,0,0,1592,1594,3,310,155,0,1593,1595,5,157,0,0,1594,1593,1,0,
  	0,0,1594,1595,1,0,0,0,1595,1596,1,0,0,0,1596,1597,3,308,154,0,1597,1611,
  	1,0,0,0,1598,1600,3,310,155,0,1599,1601,5,157,0,0,1600,1599,1,0,0,0,1600,
  	1601,1,0,0,0,1601,1603,1,0,0,0,1602,1604,3,180,90,0,1603,1602,1,0,0,0,
  	1603,1604,1,0,0,0,1604,1606,1,0,0,0,1605,1607,5,157,0,0,1606,1605,1,0,
  	0,0,1606,1607,1,0,0,0,1607,1608,1,0,0,0,1608,1609,3,310,155,0,1609,1611,
  	1,0,0,0,1610,1566,1,0,0,0,1610,1582,1,0,0,0,1610,1598,1,0,0,0,1611,179,
  	1,0,0,0,1612,1614,5,7,0,0,1613,1615,5,157,0,0,1614,1613,1,0,0,0,1614,
  	1615,1,0,0,0,1615,1620,1,0,0,0,1616,1618,3,286,143,0,1617,1619,5,157,
  	0,0,1618,1617,1,0,0,0,1618,1619,1,0,0,0,1619,1621,1,0,0,0,1620,1616,1,
  	0,0,0,1620,1621,1,0,0,0,1621,1626,1,0,0,0,1622,1624,3,184,92,0,1623,1625,
  	5,157,0,0,1624,1623,1,0,0,0,1624,1625,1,0,0,0,1625,1627,1,0,0,0,1626,
  	1622,1,0,0,0,1626,1627,1,0,0,0,1627,1632,1,0,0,0,1628,1630,3,190,95,0,
  	1629,1631,5,157,0,0,1630,1629,1,0,0,0,1630,1631,1,0,0,0,1631,1633,1,0,
  	0,0,1632,1628,1,0,0,0,1632,1633,1,0,0,0,1633,1638,1,0,0,0,1634,1636,3,
  	182,91,0,1635,1637,5,157,0,0,1636,1635,1,0,0,0,1636,1637,1,0,0,0,1637,
  	1639,1,0,0,0,1638,1634,1,0,0,0,1638,1639,1,0,0,0,1639,1640,1,0,0,0,1640,
  	1641,5,8,0,0,1641,181,1,0,0,0,1642,1644,5,9,0,0,1643,1645,5,157,0,0,1644,
  	1643,1,0,0,0,1644,1645,1,0,0,0,1645,1679,1,0,0,0,1646,1648,3,294,147,
  	0,1647,1649,5,157,0,0,1648,1647,1,0,0,0,1648,1649,1,0,0,0,1649,1650,1,
  	0,0,0,1650,1652,5,127,0,0,1651,1653,5,157,0,0,1652,1651,1,0,0,0,1652,
  	1653,1,0,0,0,1653,1654,1,0,0,0,1654,1656,3,206,103,0,1655,1657,5,157,
  	0,0,1656,1655,1,0,0,0,1656,1657,1,0,0,0,1657,1676,1,0,0,0,1658,1660,5,
  	3,0,0,1659,1661,5,157,0,0,1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,1662,
  	1,0,0,0,1662,1664,3,294,147,0,1663,1665,5,157,0,0,1664,1663,1,0,0,0,1664,
  	1665,1,0,0,0,1665,1666,1,0,0,0,1666,1668,5,127,0,0,1667,1669,5,157,0,
  	0,1668,1667,1,0,0,0,1668,1669,1,0,0,0,1669,1670,1,0,0,0,1670,1672,3,206,
  	103,0,1671,1673,5,157,0,0,1672,1671,1,0,0,0,1672,1673,1,0,0,0,1673,1675,
  	1,0,0,0,1674,1658,1,0,0,0,1675,1678,1,0,0,0,1676,1674,1,0,0,0,1676,1677,
  	1,0,0,0,1677,1680,1,0,0,0,1678,1676,1,0,0,0,1679,1646,1,0,0,0,1679,1680,
  	1,0,0,0,1680,1681,1,0,0,0,1681,1682,5,10,0,0,1682,183,1,0,0,0,1683,1685,
  	5,127,0,0,1684,1686,5,157,0,0,1685,1684,1,0,0,0,1685,1686,1,0,0,0,1686,
  	1687,1,0,0,0,1687,1701,3,204,102,0,1688,1690,5,157,0,0,1689,1688,1,0,
  	0,0,1689,1690,1,0,0,0,1690,1691,1,0,0,0,1691,1693,5,11,0,0,1692,1694,
  	5,127,0,0,1693,1692,1,0,0,0,1693,1694,1,0,0,0,1694,1696,1,0,0,0,1695,
  	1697,5,157,0,0,1696,1695,1,0,0,0,1696,1697,1,0,0,0,1697,1698,1,0,0,0,
  	1698,1700,3,204,102,0,1699,1689,1,0,0,0,1700,1703,1,0,0,0,1701,1699,1,
  	0,0,0,1701,1702,1,0,0,0,1702,185,1,0,0,0,1703,1701,1,0,0,0,1704,1711,
  	3,188,94,0,1705,1707,5,157,0,0,1706,1705,1,0,0,0,1706,1707,1,0,0,0,1707,
  	1708,1,0,0,0,1708,1710,3,188,94,0,1709,1706,1,0,0,0,1710,1713,1,0,0,0,
  	1711,1709,1,0,0,0,1711,1712,1,0,0,0,1712,187,1,0,0,0,1713,1711,1,0,0,
  	0,1714,1716,5,127,0,0,1715,1717,5,157,0,0,1716,1715,1,0,0,0,1716,1717,
  	1,0,0,0,1717,1718,1,0,0,0,1718,1719,3,202,101,0,1719,189,1,0,0,0,1720,
  	1722,5,108,0,0,1721,1723,5,157,0,0,1722,1721,1,0,0,0,1722,1723,1,0,0,
  	0,1723,1728,1,0,0,0,1724,1729,5,119,0,0,1725,1726,5,93,0,0,1726,1727,
  	5,157,0,0,1727,1729,5,119,0,0,1728,1724,1,0,0,0,1728,1725,1,0,0,0,1728,
  	1729,1,0,0,0,1729,1731,1,0,0,0,1730,1732,5,157,0,0,1731,1730,1,0,0,0,
  	1731,1732,1,0,0,0,1732,1747,1,0,0,0,1733,1735,3,198,99,0,1734,1733,1,
  	0,0,0,1734,1735,1,0,0,0,1735,1737,1,0,0,0,1736,1738,5,157,0,0,1737,1736,
  	1,0,0,0,1737,1738,1,0,0,0,1738,1739,1,0,0,0,1739,1741,5,12,0,0,1740,1742,
  	5,157,0,0,1741,1740,1,0,0,0,1741,1742,1,0,0,0,1742,1744,1,0,0,0,1743,
  	1745,3,200,100,0,1744,1743,1,0,0,0,1744,1745,1,0,0,0,1745,1748,1,0,0,
  	0,1746,1748,3,296,148,0,1747,1734,1,0,0,0,1747,1746,1,0,0,0,1747,1748,
  	1,0,0,0,1748,1753,1,0,0,0,1749,1751,5,157,0,0,1750,1749,1,0,0,0,1750,
  	1751,1,0,0,0,1751,1752,1,0,0,0,1752,1754,3,192,96,0,1753,1750,1,0,0,0,
  	1753,1754,1,0,0,0,1754,191,1,0,0,0,1755,1757,5,2,0,0,1756,1758,5,157,
  	0,0,1757,1756,1,0,0,0,1757,1758,1,0,0,0,1758,1759,1,0,0,0,1759,1761,3,
  	286,143,0,1760,1762,5,157,0,0,1761,1760,1,0,0,0,1761,1762,1,0,0,0,1762,
  	1763,1,0,0,0,1763,1765,5,3,0,0,1764,1766,5,157,0,0,1765,1764,1,0,0,0,
  	1765,1766,1,0,0,0,1766,1767,1,0,0,0,1767,1776,3,286,143,0,1768,1770,5,
  	157,0,0,1769,1768,1,0,0,0,1769,1770,1,0,0,0,1770,1771,1,0,0,0,1771,1773,
  	5,11,0,0,1772,1774,5,157,0,0,1773,1772,1,0,0,0,1773,1774,1,0,0,0,1774,
  	1775,1,0,0,0,1775,1777,3,164,82,0,1776,1769,1,0,0,0,1776,1777,1,0,0,0,
  	1777,1797,1,0,0,0,1778,1780,5,157,0,0,1779,1778,1,0,0,0,1779,1780,1,0,
  	0,0,1780,1781,1,0,0,0,1781,1783,5,11,0,0,1782,1784,5,157,0,0,1783,1782,
  	1,0,0,0,1783,1784,1,0,0,0,1784,1785,1,0,0,0,1785,1787,3,196,98,0,1786,
  	1788,5,157,0,0,1787,1786,1,0,0,0,1787,1788,1,0,0,0,1788,1789,1,0,0,0,
  	1789,1791,5,3,0,0,1790,1792,5,157,0,0,1791,1790,1,0,0,0,1791,1792,1,0,
  	0,0,1792,1793,1,0,0,0,1793,1795,3,194,97,0,1794,1796,5,157,0,0,1795,1794,
  	1,0,0,0,1795,1796,1,0,0,0,1796,1798,1,0,0,0,1797,1779,1,0,0,0,1797,1798,
  	1,0,0,0,1798,1799,1,0,0,0,1799,1800,5,4,0,0,1800,193,1,0,0,0,1801,1803,
  	5,9,0,0,1802,1804,5,157,0,0,1803,1802,1,0,0,0,1803,1804,1,0,0,0,1804,
  	1806,1,0,0,0,1805,1807,3,152,76,0,1806,1805,1,0,0,0,1806,1807,1,0,0,0,
  	1807,1809,1,0,0,0,1808,1810,5,157,0,0,1809,1808,1,0,0,0,1809,1810,1,0,
  	0,0,1810,1811,1,0,0,0,1811,1812,5,10,0,0,1812,195,1,0,0,0,1813,1815,5,
  	9,0,0,1814,1816,5,157,0,0,1815,1814,1,0,0,0,1815,1816,1,0,0,0,1816,1818,
  	1,0,0,0,1817,1819,3,152,76,0,1818,1817,1,0,0,0,1818,1819,1,0,0,0,1819,
  	1821,1,0,0,0,1820,1822,5,157,0,0,1821,1820,1,0,0,0,1821,1822,1,0,0,0,
  	1822,1823,1,0,0,0,1823,1824,5,10,0,0,1824,197,1,0,0,0,1825,1826,5,145,
  	0,0,1826,199,1,0,0,0,1827,1828,5,145,0,0,1828,201,1,0,0,0,1829,1830,3,
  	300,150,0,1830,203,1,0,0,0,1831,1832,3,300,150,0,1832,205,1,0,0,0,1833,
  	1834,3,208,104,0,1834,207,1,0,0,0,1835,1842,3,210,105,0,1836,1837,5,157,
  	0,0,1837,1838,5,120,0,0,1838,1839,5,157,0,0,1839,1841,3,210,105,0,1840,
  	1836,1,0,0,0,1841,1844,1,0,0,0,1842,1840,1,0,0,0,1842,1843,1,0,0,0,1843,
  	209,1,0,0,0,1844,1842,1,0,0,0,1845,1852,3,212,106,0,1846,1847,5,157,0,
  	0,1847,1848,5,121,0,0,1848,1849,5,157,0,0,1849,1851,3,212,106,0,1850,
  	1846,1,0,0,0,1851,1854,1,0,0,0,1852,1850,1,0,0,0,1852,1853,1,0,0,0,1853,
  	211,1,0,0,0,1854,1852,1,0,0,0,1855,1862,3,214,107,0,1856,1857,5,157,0,
  	0,1857,1858,5,122,0,0,1858,1859,5,157,0,0,1859,1861,3,214,107,0,1860,
  	1856,1,0,0,0,1861,1864,1,0,0,0,1862,1860,1,0,0,0,1862,1863,1,0,0,0,1863,
  	213,1,0,0,0,1864,1862,1,0,0,0,1865,1867,5,123,0,0,1866,1868,5,157,0,0,
  	1867,1866,1,0,0,0,1867,1868,1,0,0,0,1868,1870,1,0,0,0,1869,1865,1,0,0,
  	0,1870,1873,1,0,0,0,1871,1869,1,0,0,0,1871,1872,1,0,0,0,1872,1874,1,0,
  	0,0,1873,1871,1,0,0,0,1874,1875,3,216,108,0,1875,215,1,0,0,0,1876,1886,
  	3,220,110,0,1877,1879,5,157,0,0,1878,1877,1,0,0,0,1878,1879,1,0,0,0,1879,
  	1880,1,0,0,0,1880,1882,3,218,109,0,1881,1883,5,157,0,0,1882,1881,1,0,
  	0,0,1882,1883,1,0,0,0,1883,1884,1,0,0,0,1884,1885,3,220,110,0,1885,1887,
  	1,0,0,0,1886,1878,1,0,0,0,1886,1887,1,0,0,0,1887,1925,1,0,0,0,1888,1890,
  	3,220,110,0,1889,1891,5,157,0,0,1890,1889,1,0,0,0,1890,1891,1,0,0,0,1891,
  	1892,1,0,0,0,1892,1894,5,124,0,0,1893,1895,5,157,0,0,1894,1893,1,0,0,
  	0,1894,1895,1,0,0,0,1895,1896,1,0,0,0,1896,1897,3,220,110,0,1897,1898,
  	1,0,0,0,1898,1899,6,108,-1,0,1899,1925,1,0,0,0,1900,1902,3,220,110,0,
  	1901,1903,5,157,0,0,1902,1901,1,0,0,0,1902,1903,1,0,0,0,1903,1904,1,0,
  	0,0,1904,1906,3,218,109,0,1905,1907,5,157,0,0,1906,1905,1,0,0,0,1906,
  	1907,1,0,0,0,1907,1908,1,0,0,0,1908,1918,3,220,110,0,1909,1911,5,157,
  	0,0,1910,1909,1,0,0,0,1910,1911,1,0,0,0,1911,1912,1,0,0,0,1912,1914,3,
  	218,109,0,1913,1915,5,157,0,0,1914,1913,1,0,0,0,1914,1915,1,0,0,0,1915,
  	1916,1,0,0,0,1916,1917,3,220,110,0,1917,1919,1,0,0,0,1918,1910,1,0,0,
  	0,1919,1920,1,0,0,0,1920,1918,1,0,0,0,1920,1921,1,0,0,0,1921,1922,1,0,
  	0,0,1922,1923,6,108,-1,0,1923,1925,1,0,0,0,1924,1876,1,0,0,0,1924,1888,
  	1,0,0,0,1924,1900,1,0,0,0,1925,217,1,0,0,0,1926,1927,7,2,0,0,1927,219,
  	1,0,0,0,1928,1939,3,222,111,0,1929,1931,5,157,0,0,1930,1929,1,0,0,0,1930,
  	1931,1,0,0,0,1931,1932,1,0,0,0,1932,1934,5,11,0,0,1933,1935,5,157,0,0,
  	1934,1933,1,0,0,0,1934,1935,1,0,0,0,1935,1936,1,0,0,0,1936,1938,3,222,
  	111,0,1937,1930,1,0,0,0,1938,1941,1,0,0,0,1939,1937,1,0,0,0,1939,1940,
  	1,0,0,0,1940,221,1,0,0,0,1941,1939,1,0,0,0,1942,1953,3,224,112,0,1943,
  	1945,5,157,0,0,1944,1943,1,0,0,0,1944,1945,1,0,0,0,1945,1946,1,0,0,0,
  	1946,1948,5,18,0,0,1947,1949,5,157,0,0,1948,1947,1,0,0,0,1948,1949,1,
  	0,0,0,1949,1950,1,0,0,0,1950,1952,3,224,112,0,1951,1944,1,0,0,0,1952,
  	1955,1,0,0,0,1953,1951,1,0,0,0,1953,1954,1,0,0,0,1954,223,1,0,0,0,1955,
  	1953,1,0,0,0,1956,1968,3,228,114,0,1957,1959,5,157,0,0,1958,1957,1,0,
  	0,0,1958,1959,1,0,0,0,1959,1960,1,0,0,0,1960,1962,3,226,113,0,1961,1963,
  	5,157,0,0,1962,1961,1,0,0,0,1962,1963,1,0,0,0,1963,1964,1,0,0,0,1964,
  	1965,3,228,114,0,1965,1967,1,0,0,0,1966,1958,1,0,0,0,1967,1970,1,0,0,
  	0,1968,1966,1,0,0,0,1968,1969,1,0,0,0,1969,225,1,0,0,0,1970,1968,1,0,
  	0,0,1971,1972,7,3,0,0,1972,227,1,0,0,0,1973,1985,3,232,116,0,1974,1976,
  	5,157,0,0,1975,1974,1,0,0,0,1975,1976,1,0,0,0,1976,1977,1,0,0,0,1977,
  	1979,3,230,115,0,1978,1980,5,157,0,0,1979,1978,1,0,0,0,1979,1980,1,0,
  	0,0,1980,1981,1,0,0,0,1981,1982,3,232,116,0,1982,1984,1,0,0,0,1983,1975,
  	1,0,0,0,1984,1987,1,0,0,0,1985,1983,1,0,0,0,1985,1986,1,0,0,0,1986,229,
  	1,0,0,0,1987,1985,1,0,0,0,1988,1989,7,4,0,0,1989,231,1,0,0,0,1990,2002,
  	3,236,118,0,1991,1993,5,157,0,0,1992,1991,1,0,0,0,1992,1993,1,0,0,0,1993,
  	1994,1,0,0,0,1994,1996,3,234,117,0,1995,1997,5,157,0,0,1996,1995,1,0,
  	0,0,1996,1997,1,0,0,0,1997,1998,1,0,0,0,1998,1999,3,236,118,0,1999,2001,
  	1,0,0,0,2000,1992,1,0,0,0,2001,2004,1,0,0,0,2002,2000,1,0,0,0,2002,2003,
  	1,0,0,0,2003,233,1,0,0,0,2004,2002,1,0,0,0,2005,2006,7,5,0,0,2006,235,
  	1,0,0,0,2007,2018,3,238,119,0,2008,2010,5,157,0,0,2009,2008,1,0,0,0,2009,
  	2010,1,0,0,0,2010,2011,1,0,0,0,2011,2013,5,24,0,0,2012,2014,5,157,0,0,
  	2013,2012,1,0,0,0,2013,2014,1,0,0,0,2014,2015,1,0,0,0,2015,2017,3,238,
  	119,0,2016,2009,1,0,0,0,2017,2020,1,0,0,0,2018,2016,1,0,0,0,2018,2019,
  	1,0,0,0,2019,237,1,0,0,0,2020,2018,1,0,0,0,2021,2023,5,125,0,0,2022,2024,
  	5,157,0,0,2023,2022,1,0,0,0,2023,2024,1,0,0,0,2024,2026,1,0,0,0,2025,
  	2021,1,0,0,0,2026,2029,1,0,0,0,2027,2025,1,0,0,0,2027,2028,1,0,0,0,2028,
  	2030,1,0,0,0,2029,2027,1,0,0,0,2030,2035,3,240,120,0,2031,2033,5,157,
  	0,0,2032,2031,1,0,0,0,2032,2033,1,0,0,0,2033,2034,1,0,0,0,2034,2036,5,
  	126,0,0,2035,2032,1,0,0,0,2035,2036,1,0,0,0,2036,239,1,0,0,0,2037,2045,
  	3,250,125,0,2038,2046,3,244,122,0,2039,2041,3,242,121,0,2040,2039,1,0,
  	0,0,2041,2042,1,0,0,0,2042,2040,1,0,0,0,2042,2043,1,0,0,0,2043,2046,1,
  	0,0,0,2044,2046,3,248,124,0,2045,2038,1,0,0,0,2045,2040,1,0,0,0,2045,
  	2044,1,0,0,0,2045,2046,1,0,0,0,2046,241,1,0,0,0,2047,2048,5,157,0,0,2048,
  	2050,5,128,0,0,2049,2051,5,157,0,0,2050,2049,1,0,0,0,2050,2051,1,0,0,
  	0,2051,2052,1,0,0,0,2052,2067,3,250,125,0,2053,2054,5,7,0,0,2054,2055,
  	3,206,103,0,2055,2056,5,8,0,0,2056,2067,1,0,0,0,2057,2059,5,7,0,0,2058,
  	2060,3,206,103,0,2059,2058,1,0,0,0,2059,2060,1,0,0,0,2060,2061,1,0,0,
  	0,2061,2063,5,127,0,0,2062,2064,3,206,103,0,2063,2062,1,0,0,0,2063,2064,
  	1,0,0,0,2064,2065,1,0,0,0,2065,2067,5,8,0,0,2066,2047,1,0,0,0,2066,2053,
  	1,0,0,0,2066,2057,1,0,0,0,2067,243,1,0,0,0,2068,2080,3,246,123,0,2069,
  	2070,5,157,0,0,2070,2071,5,129,0,0,2071,2072,5,157,0,0,2072,2080,5,105,
  	0,0,2073,2074,5,157,0,0,2074,2075,5,130,0,0,2075,2076,5,157,0,0,2076,
  	2080,5,105,0,0,2077,2078,5,157,0,0,2078,2080,5,131,0,0,2079,2068,1,0,
  	0,0,2079,2069,1,0,0,0,2079,2073,1,0,0,0,2079,2077,1,0,0,0,2080,2082,1,
  	0,0,0,2081,2083,5,157,0,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2084,
  	1,0,0,0,2084,2085,3,250,125,0,2085,245,1,0,0,0,2086,2088,5,157,0,0,2087,
  	2086,1,0,0,0,2087,2088,1,0,0,0,2088,2089,1,0,0,0,2089,2090,5,25,0,0,2090,
  	247,1,0,0,0,2091,2092,5,157,0,0,2092,2093,5,132,0,0,2093,2094,5,157,0,
  	0,2094,2102,5,133,0,0,2095,2096,5,157,0,0,2096,2097,5,132,0,0,2097,2098,
  	5,157,0,0,2098,2099,5,123,0,0,2099,2100,5,157,0,0,2100,2102,5,133,0,0,
  	2101,2091,1,0,0,0,2101,2095,1,0,0,0,2102,249,1,0,0,0,2103,2110,3,252,
  	126,0,2104,2106,5,157,0,0,2105,2104,1,0,0,0,2105,2106,1,0,0,0,2106,2107,
  	1,0,0,0,2107,2109,3,280,140,0,2108,2105,1,0,0,0,2109,2112,1,0,0,0,2110,
  	2108,1,0,0,0,2110,2111,1,0,0,0,2111,251,1,0,0,0,2112,2110,1,0,0,0,2113,
  	2123,3,254,127,0,2114,2123,3,290,145,0,2115,2123,3,282,141,0,2116,2123,
  	3,266,133,0,2117,2123,3,268,134,0,2118,2123,3,274,137,0,2119,2123,3,276,
  	138,0,2120,2123,3,278,139,0,2121,2123,3,286,143,0,2122,2113,1,0,0,0,2122,
  	2114,1,0,0,0,2122,2115,1,0,0,0,2122,2116,1,0,0,0,2122,2117,1,0,0,0,2122,
  	2118,1,0,0,0,2122,2119,1,0,0,0,2122,2120,1,0,0,0,2122,2121,1,0,0,0,2123,
  	253,1,0,0,0,2124,2131,3,288,144,0,2125,2131,5,143,0,0,2126,2131,3,256,
  	128,0,2127,2131,5,133,0,0,2128,2131,3,258,129,0,2129,2131,3,262,131,0,
  	2130,2124,1,0,0,0,2130,2125,1,0,0,0,2130,2126,1,0,0,0,2130,2127,1,0,0,
  	0,2130,2128,1,0,0,0,2130,2129,1,0,0,0,2131,255,1,0,0,0,2132,2133,7,6,
  	0,0,2133,257,1,0,0,0,2134,2136,5,7,0,0,2135,2137,5,157,0,0,2136,2135,
  	1,0,0,0,2136,2137,1,0,0,0,2137,2151,1,0,0,0,2138,2140,3,206,103,0,2139,
  	2141,5,157,0,0,2140,2139,1,0,0,0,2140,2141,1,0,0,0,2141,2148,1,0,0,0,
  	2142,2144,3,260,130,0,2143,2145,5,157,0,0,2144,2143,1,0,0,0,2144,2145,
  	1,0,0,0,2145,2147,1,0,0,0,2146,2142,1,0,0,0,2147,2150,1,0,0,0,2148,2146,
  	1,0,0,0,2148,2149,1,0,0,0,2149,2152,1,0,0,0,2150,2148,1,0,0,0,2151,2138,
  	1,0,0,0,2151,2152,1,0,0,0,2152,2153,1,0,0,0,2153,2154,5,8,0,0,2154,259,
  	1,0,0,0,2155,2157,5,3,0,0,2156,2158,5,157,0,0,2157,2156,1,0,0,0,2157,
  	2158,1,0,0,0,2158,2160,1,0,0,0,2159,2161,3,206,103,0,2160,2159,1,0,0,
  	0,2160,2161,1,0,0,0,2161,261,1,0,0,0,2162,2164,5,9,0,0,2163,2165,5,157,
  	0,0,2164,2163,1,0,0,0,2164,2165,1,0,0,0,2165,2166,1,0,0,0,2166,2168,3,
  	264,132,0,2167,2169,5,157,0,0,2168,2167,1,0,0,0,2168,2169,1,0,0,0,2169,
  	2180,1,0,0,0,2170,2172,5,3,0,0,2171,2173,5,157,0,0,2172,2171,1,0,0,0,
  	2172,2173,1,0,0,0,2173,2174,1,0,0,0,2174,2176,3,264,132,0,2175,2177,5,
  	157,0,0,2176,2175,1,0,0,0,2176,2177,1,0,0,0,2177,2179,1,0,0,0,2178,2170,
  	1,0,0,0,2179,2182,1,0,0,0,2180,2178,1,0,0,0,2180,2181,1,0,0,0,2181,2183,
  	1,0,0,0,2182,2180,1,0,0,0,2183,2184,5,10,0,0,2184,263,1,0,0,0,2185,2188,
  	3,302,151,0,2186,2188,5,143,0,0,2187,2185,1,0,0,0,2187,2186,1,0,0,0,2188,
  	2190,1,0,0,0,2189,2191,5,157,0,0,2190,2189,1,0,0,0,2190,2191,1,0,0,0,
  	2191,2192,1,0,0,0,2192,2194,5,127,0,0,2193,2195,5,157,0,0,2194,2193,1,
  	0,0,0,2194,2195,1,0,0,0,2195,2196,1,0,0,0,2196,2197,3,206,103,0,2197,
  	265,1,0,0,0,2198,2200,5,2,0,0,2199,2201,5,157,0,0,2200,2199,1,0,0,0,2200,
  	2201,1,0,0,0,2201,2202,1,0,0,0,2202,2204,3,206,103,0,2203,2205,5,157,
  	0,0,2204,2203,1,0,0,0,2204,2205,1,0,0,0,2205,2206,1,0,0,0,2206,2207,5,
  	4,0,0,2207,267,1,0,0,0,2208,2210,5,136,0,0,2209,2211,5,157,0,0,2210,2209,
  	1,0,0,0,2210,2211,1,0,0,0,2211,2212,1,0,0,0,2212,2214,5,2,0,0,2213,2215,
  	5,157,0,0,2214,2213,1,0,0,0,2214,2215,1,0,0,0,2215,2216,1,0,0,0,2216,
  	2218,5,108,0,0,2217,2219,5,157,0,0,2218,2217,1,0,0,0,2218,2219,1,0,0,
  	0,2219,2220,1,0,0,0,2220,2257,5,4,0,0,2221,2223,3,270,135,0,2222,2224,
  	5,157,0,0,2223,2222,1,0,0,0,2223,2224,1,0,0,0,2224,2225,1,0,0,0,2225,
  	2227,5,2,0,0,2226,2228,5,157,0,0,2227,2226,1,0,0,0,2227,2228,1,0,0,0,
  	2228,2233,1,0,0,0,2229,2231,5,107,0,0,2230,2232,5,157,0,0,2231,2230,1,
  	0,0,0,2231,2232,1,0,0,0,2232,2234,1,0,0,0,2233,2229,1,0,0,0,2233,2234,
  	1,0,0,0,2234,2252,1,0,0,0,2235,2237,3,272,136,0,2236,2238,5,157,0,0,2237,
  	2236,1,0,0,0,2237,2238,1,0,0,0,2238,2249,1,0,0,0,2239,2241,5,3,0,0,2240,
  	2242,5,157,0,0,2241,2240,1,0,0,0,2241,2242,1,0,0,0,2242,2243,1,0,0,0,
  	2243,2245,3,272,136,0,2244,2246,5,157,0,0,2245,2244,1,0,0,0,2245,2246,
  	1,0,0,0,2246,2248,1,0,0,0,2247,2239,1,0,0,0,2248,2251,1,0,0,0,2249,2247,
  	1,0,0,0,2249,2250,1,0,0,0,2250,2253,1,0,0,0,2251,2249,1,0,0,0,2252,2235,
  	1,0,0,0,2252,2253,1,0,0,0,2253,2254,1,0,0,0,2254,2255,5,4,0,0,2255,2257,
  	1,0,0,0,2256,2208,1,0,0,0,2256,2221,1,0,0,0,2257,269,1,0,0,0,2258,2259,
  	3,302,151,0,2259,271,1,0,0,0,2260,2262,3,302,151,0,2261,2263,5,157,0,
  	0,2262,2261,1,0,0,0,2262,2263,1,0,0,0,2263,2264,1,0,0,0,2264,2265,5,127,
  	0,0,2265,2267,5,6,0,0,2266,2268,5,157,0,0,2267,2266,1,0,0,0,2267,2268,
  	1,0,0,0,2268,2270,1,0,0,0,2269,2260,1,0,0,0,2269,2270,1,0,0,0,2270,2271,
  	1,0,0,0,2271,2272,3,206,103,0,2272,273,1,0,0,0,2273,2278,3,174,87,0,2274,
  	2276,5,157,0,0,2275,2274,1,0,0,0,2275,2276,1,0,0,0,2276,2277,1,0,0,0,
  	2277,2279,3,176,88,0,2278,2275,1,0,0,0,2279,2280,1,0,0,0,2280,2278,1,
  	0,0,0,2280,2281,1,0,0,0,2281,275,1,0,0,0,2282,2284,5,137,0,0,2283,2285,
  	5,157,0,0,2284,2283,1,0,0,0,2284,2285,1,0,0,0,2285,2286,1,0,0,0,2286,
  	2288,5,9,0,0,2287,2289,5,157,0,0,2288,2287,1,0,0,0,2288,2289,1,0,0,0,
  	2289,2290,1,0,0,0,2290,2292,5,97,0,0,2291,2293,5,157,0,0,2292,2291,1,
  	0,0,0,2292,2293,1,0,0,0,2293,2294,1,0,0,0,2294,2299,3,166,83,0,2295,2297,
  	5,157,0,0,2296,2295,1,0,0,0,2296,2297,1,0,0,0,2297,2298,1,0,0,0,2298,
  	2300,3,164,82,0,2299,2296,1,0,0,0,2299,2300,1,0,0,0,2300,2302,1,0,0,0,
  	2301,2303,5,157,0,0,2302,2301,1,0,0,0,2302,2303,1,0,0,0,2303,2304,1,0,
  	0,0,2304,2305,5,10,0,0,2305,277,1,0,0,0,2306,2308,5,136,0,0,2307,2309,
  	5,157,0,0,2308,2307,1,0,0,0,2308,2309,1,0,0,0,2309,2310,1,0,0,0,2310,
  	2312,5,9,0,0,2311,2313,5,157,0,0,2312,2311,1,0,0,0,2312,2313,1,0,0,0,
  	2313,2314,1,0,0,0,2314,2316,5,97,0,0,2315,2317,5,157,0,0,2316,2315,1,
  	0,0,0,2316,2317,1,0,0,0,2317,2318,1,0,0,0,2318,2323,3,166,83,0,2319,2321,
  	5,157,0,0,2320,2319,1,0,0,0,2320,2321,1,0,0,0,2321,2322,1,0,0,0,2322,
  	2324,3,164,82,0,2323,2320,1,0,0,0,2323,2324,1,0,0,0,2324,2326,1,0,0,0,
  	2325,2327,5,157,0,0,2326,2325,1,0,0,0,2326,2327,1,0,0,0,2327,2328,1,0,
  	0,0,2328,2329,5,10,0,0,2329,279,1,0,0,0,2330,2332,5,5,0,0,2331,2333,5,
  	157,0,0,2332,2331,1,0,0,0,2332,2333,1,0,0,0,2333,2336,1,0,0,0,2334,2337,
  	3,294,147,0,2335,2337,5,108,0,0,2336,2334,1,0,0,0,2336,2335,1,0,0,0,2337,
  	281,1,0,0,0,2338,2343,5,138,0,0,2339,2341,5,157,0,0,2340,2339,1,0,0,0,
  	2340,2341,1,0,0,0,2341,2342,1,0,0,0,2342,2344,3,284,142,0,2343,2340,1,
  	0,0,0,2344,2345,1,0,0,0,2345,2343,1,0,0,0,2345,2346,1,0,0,0,2346,2361,
  	1,0,0,0,2347,2349,5,138,0,0,2348,2350,5,157,0,0,2349,2348,1,0,0,0,2349,
  	2350,1,0,0,0,2350,2351,1,0,0,0,2351,2356,3,206,103,0,2352,2354,5,157,
  	0,0,2353,2352,1,0,0,0,2353,2354,1,0,0,0,2354,2355,1,0,0,0,2355,2357,3,
  	284,142,0,2356,2353,1,0,0,0,2357,2358,1,0,0,0,2358,2356,1,0,0,0,2358,
  	2359,1,0,0,0,2359,2361,1,0,0,0,2360,2338,1,0,0,0,2360,2347,1,0,0,0,2361,
  	2370,1,0,0,0,2362,2364,5,157,0,0,2363,2362,1,0,0,0,2363,2364,1,0,0,0,
  	2364,2365,1,0,0,0,2365,2367,5,139,0,0,2366,2368,5,157,0,0,2367,2366,1,
  	0,0,0,2367,2368,1,0,0,0,2368,2369,1,0,0,0,2369,2371,3,206,103,0,2370,
  	2363,1,0,0,0,2370,2371,1,0,0,0,2371,2373,1,0,0,0,2372,2374,5,157,0,0,
  	2373,2372,1,0,0,0,2373,2374,1,0,0,0,2374,2375,1,0,0,0,2375,2376,5,140,
  	0,0,2376,283,1,0,0,0,2377,2379,5,141,0,0,2378,2380,5,157,0,0,2379,2378,
  	1,0,0,0,2379,2380,1,0,0,0,2380,2381,1,0,0,0,2381,2383,3,206,103,0,2382,
  	2384,5,157,0,0,2383,2382,1,0,0,0,2383,2384,1,0,0,0,2384,2385,1,0,0,0,
  	2385,2387,5,142,0,0,2386,2388,5,157,0,0,2387,2386,1,0,0,0,2387,2388,1,
  	0,0,0,2388,2389,1,0,0,0,2389,2390,3,206,103,0,2390,285,1,0,0,0,2391,2392,
  	3,302,151,0,2392,287,1,0,0,0,2393,2396,3,298,149,0,2394,2396,3,296,148,
  	0,2395,2393,1,0,0,0,2395,2394,1,0,0,0,2396,289,1,0,0,0,2397,2400,5,26,
  	0,0,2398,2401,3,302,151,0,2399,2401,5,145,0,0,2400,2398,1,0,0,0,2400,
  	2399,1,0,0,0,2401,291,1,0,0,0,2402,2404,3,252,126,0,2403,2405,5,157,0,
  	0,2404,2403,1,0,0,0,2404,2405,1,0,0,0,2405,2406,1,0,0,0,2406,2407,3,280,
  	140,0,2407,293,1,0,0,0,2408,2409,3,300,150,0,2409,295,1,0,0,0,2410,2411,
  	5,145,0,0,2411,297,1,0,0,0,2412,2413,5,152,0,0,2413,299,1,0,0,0,2414,
  	2415,3,302,151,0,2415,301,1,0,0,0,2416,2422,5,153,0,0,2417,2418,5,156,
  	0,0,2418,2422,6,151,-1,0,2419,2422,5,146,0,0,2420,2422,3,304,152,0,2421,
  	2416,1,0,0,0,2421,2417,1,0,0,0,2421,2419,1,0,0,0,2421,2420,1,0,0,0,2422,
  	303,1,0,0,0,2423,2424,7,7,0,0,2424,305,1,0,0,0,2425,2426,7,8,0,0,2426,
  	307,1,0,0,0,2427,2428,7,9,0,0,2428,309,1,0,0,0,2429,2430,7,10,0,0,2430,
  	311,1,0,0,0,413,314,318,323,327,332,335,339,342,365,371,375,378,384,387,
=======
  	41,970,9,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,979,8,42,1,43,1,43,
  	1,43,1,43,3,43,985,8,43,1,43,1,43,3,43,989,8,43,1,43,1,43,3,43,993,8,
  	43,1,43,1,43,1,44,1,44,1,44,1,44,3,44,1001,8,44,1,44,1,44,3,44,1005,8,
  	44,1,44,1,44,3,44,1009,8,44,1,44,1,44,1,44,1,44,3,44,1015,8,44,1,44,1,
  	44,3,44,1019,8,44,1,44,1,44,3,44,1023,8,44,1,44,1,44,1,44,1,44,3,44,1029,
  	8,44,1,44,1,44,3,44,1033,8,44,1,44,1,44,3,44,1037,8,44,1,44,1,44,3,44,
  	1041,8,44,1,44,1,44,3,44,1045,8,44,1,44,1,44,3,44,1049,8,44,1,44,1,44,
  	5,44,1053,8,44,10,44,12,44,1056,9,44,1,45,1,45,5,45,1060,8,45,10,45,12,
  	45,1063,9,45,1,46,1,46,3,46,1067,8,46,1,46,1,46,1,47,1,47,3,47,1073,8,
  	47,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
  	50,1,50,1,50,1,50,1,50,3,50,1093,8,50,1,51,1,51,3,51,1097,8,51,1,52,1,
  	52,1,52,1,52,1,52,1,52,3,52,1105,8,52,1,53,1,53,1,53,1,53,1,54,1,54,1,
  	55,1,55,3,55,1115,8,55,1,55,5,55,1118,8,55,10,55,12,55,1121,9,55,1,55,
  	1,55,3,55,1125,8,55,4,55,1127,8,55,11,55,12,55,1128,1,55,1,55,1,55,3,
  	55,1134,8,55,1,56,1,56,1,56,1,56,3,56,1140,8,56,1,56,1,56,1,56,3,56,1145,
  	8,56,1,56,3,56,1148,8,56,1,57,1,57,3,57,1152,8,57,1,58,1,58,3,58,1156,
  	8,58,5,58,1158,8,58,10,58,12,58,1161,9,58,1,58,1,58,1,58,3,58,1166,8,
  	58,5,58,1168,8,58,10,58,12,58,1171,9,58,1,58,1,58,3,58,1175,8,58,1,58,
  	5,58,1178,8,58,10,58,12,58,1181,9,58,1,58,3,58,1184,8,58,1,58,3,58,1187,
  	8,58,1,58,1,58,3,58,1191,8,58,4,58,1193,8,58,11,58,12,58,1194,1,58,1,
  	58,3,58,1199,8,58,1,59,1,59,3,59,1203,8,59,4,59,1205,8,59,11,59,12,59,
  	1206,1,59,1,59,1,60,1,60,3,60,1213,8,60,5,60,1215,8,60,10,60,12,60,1218,
  	9,60,1,60,1,60,3,60,1222,8,60,5,60,1224,8,60,10,60,12,60,1227,9,60,1,
  	60,1,60,1,61,1,61,1,61,1,61,3,61,1235,8,61,1,62,1,62,1,62,1,62,3,62,1241,
  	8,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1249,8,63,1,63,1,63,3,63,1253,
  	8,63,1,63,1,63,3,63,1257,8,63,1,63,1,63,3,63,1261,8,63,1,63,1,63,1,63,
  	1,63,1,63,3,63,1268,8,63,1,63,3,63,1271,8,63,1,63,3,63,1274,8,63,1,63,
  	3,63,1277,8,63,1,64,1,64,1,64,1,64,3,64,1283,8,64,1,64,3,64,1286,8,64,
  	1,65,1,65,3,65,1290,8,65,1,65,1,65,3,65,1294,8,65,1,65,1,65,3,65,1298,
  	8,65,1,65,3,65,1301,8,65,1,66,1,66,3,66,1305,8,66,1,66,1,66,1,66,1,66,
  	1,66,1,66,1,67,1,67,3,67,1315,8,67,1,67,1,67,1,68,1,68,3,68,1321,8,68,
  	1,68,1,68,1,68,5,68,1326,8,68,10,68,12,68,1329,9,68,1,69,1,69,1,69,1,
  	69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1341,8,69,1,70,1,70,3,70,1345,8,
  	70,1,70,1,70,3,70,1349,8,70,1,70,1,70,3,70,1353,8,70,1,70,5,70,1356,8,
  	70,10,70,12,70,1359,9,70,1,71,1,71,3,71,1363,8,71,1,71,1,71,3,71,1367,
  	8,71,1,71,1,71,1,72,1,72,3,72,1373,8,72,1,72,1,72,3,72,1377,8,72,1,72,
  	1,72,3,72,1381,8,72,1,72,1,72,3,72,1385,8,72,1,72,5,72,1388,8,72,10,72,
  	12,72,1391,9,72,1,73,1,73,1,73,3,73,1396,8,73,1,73,3,73,1399,8,73,1,74,
  	1,74,1,74,1,75,3,75,1405,8,75,1,75,3,75,1408,8,75,1,75,1,75,1,75,1,75,
  	3,75,1414,8,75,1,75,1,75,3,75,1418,8,75,1,75,1,75,3,75,1422,8,75,1,76,
  	1,76,3,76,1426,8,76,1,76,1,76,3,76,1430,8,76,1,76,5,76,1433,8,76,10,76,
  	12,76,1436,9,76,1,76,1,76,3,76,1440,8,76,1,76,1,76,3,76,1444,8,76,1,76,
  	5,76,1447,8,76,10,76,12,76,1450,9,76,3,76,1452,8,76,1,77,1,77,1,77,1,
  	77,1,77,1,77,1,77,3,77,1461,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,
  	78,1470,8,78,1,78,5,78,1473,8,78,10,78,12,78,1476,9,78,1,79,1,79,1,79,
  	1,79,1,80,1,80,1,80,1,80,1,81,1,81,3,81,1488,8,81,1,81,3,81,1491,8,81,
  	1,82,1,82,1,82,1,82,1,83,1,83,3,83,1499,8,83,1,83,1,83,3,83,1503,8,83,
  	1,83,5,83,1506,8,83,10,83,12,83,1509,9,83,1,84,1,84,3,84,1513,8,84,1,
  	84,1,84,3,84,1517,8,84,1,84,1,84,1,84,3,84,1522,8,84,1,85,1,85,1,86,1,
  	86,3,86,1528,8,86,1,86,5,86,1531,8,86,10,86,12,86,1534,9,86,1,86,1,86,
  	1,86,1,86,3,86,1540,8,86,1,87,1,87,3,87,1544,8,87,1,87,1,87,3,87,1548,
  	8,87,3,87,1550,8,87,1,87,1,87,3,87,1554,8,87,3,87,1556,8,87,1,87,1,87,
  	3,87,1560,8,87,3,87,1562,8,87,1,87,1,87,1,88,1,88,3,88,1568,8,88,1,88,
  	1,88,1,89,1,89,3,89,1574,8,89,1,89,1,89,3,89,1578,8,89,1,89,3,89,1581,
  	8,89,1,89,3,89,1584,8,89,1,89,1,89,1,89,1,89,3,89,1590,8,89,1,89,3,89,
  	1593,8,89,1,89,3,89,1596,8,89,1,89,1,89,3,89,1600,8,89,1,89,1,89,1,89,
  	1,89,3,89,1606,8,89,1,89,3,89,1609,8,89,1,89,3,89,1612,8,89,1,89,1,89,
  	3,89,1616,8,89,1,90,1,90,3,90,1620,8,90,1,90,1,90,3,90,1624,8,90,3,90,
  	1626,8,90,1,90,1,90,3,90,1630,8,90,3,90,1632,8,90,1,90,1,90,3,90,1636,
  	8,90,3,90,1638,8,90,1,90,1,90,3,90,1642,8,90,3,90,1644,8,90,1,90,1,90,
  	1,91,1,91,3,91,1650,8,91,1,91,1,91,3,91,1654,8,91,1,91,1,91,3,91,1658,
  	8,91,1,91,1,91,3,91,1662,8,91,1,91,1,91,3,91,1666,8,91,1,91,1,91,3,91,
  	1670,8,91,1,91,1,91,3,91,1674,8,91,1,91,1,91,3,91,1678,8,91,5,91,1680,
  	8,91,10,91,12,91,1683,9,91,3,91,1685,8,91,1,91,1,91,1,92,1,92,3,92,1691,
  	8,92,1,92,1,92,3,92,1695,8,92,1,92,1,92,3,92,1699,8,92,1,92,3,92,1702,
  	8,92,1,92,5,92,1705,8,92,10,92,12,92,1708,9,92,1,93,1,93,3,93,1712,8,
  	93,1,93,5,93,1715,8,93,10,93,12,93,1718,9,93,1,94,1,94,3,94,1722,8,94,
  	1,94,1,94,1,95,1,95,3,95,1728,8,95,1,95,1,95,1,95,1,95,3,95,1734,8,95,
  	1,95,3,95,1737,8,95,1,95,3,95,1740,8,95,1,95,3,95,1743,8,95,1,95,1,95,
  	3,95,1747,8,95,1,95,3,95,1750,8,95,1,95,3,95,1753,8,95,1,95,3,95,1756,
  	8,95,1,95,3,95,1759,8,95,1,96,1,96,3,96,1763,8,96,1,96,1,96,3,96,1767,
  	8,96,1,96,1,96,3,96,1771,8,96,1,96,1,96,3,96,1775,8,96,1,96,1,96,3,96,
  	1779,8,96,1,96,3,96,1782,8,96,1,96,3,96,1785,8,96,1,96,1,96,3,96,1789,
  	8,96,1,96,1,96,3,96,1793,8,96,1,96,1,96,3,96,1797,8,96,1,96,1,96,3,96,
  	1801,8,96,3,96,1803,8,96,1,96,1,96,1,97,1,97,3,97,1809,8,97,1,97,3,97,
  	1812,8,97,1,97,3,97,1815,8,97,1,97,1,97,1,98,1,98,3,98,1821,8,98,1,98,
  	3,98,1824,8,98,1,98,3,98,1827,8,98,1,98,1,98,1,99,1,99,1,100,1,100,1,
  	101,1,101,1,102,1,102,1,103,1,103,1,104,1,104,1,104,1,104,1,104,5,104,
  	1846,8,104,10,104,12,104,1849,9,104,1,105,1,105,1,105,1,105,1,105,5,105,
  	1856,8,105,10,105,12,105,1859,9,105,1,106,1,106,1,106,1,106,1,106,5,106,
  	1866,8,106,10,106,12,106,1869,9,106,1,107,1,107,3,107,1873,8,107,5,107,
  	1875,8,107,10,107,12,107,1878,9,107,1,107,1,107,1,108,1,108,3,108,1884,
  	8,108,1,108,1,108,3,108,1888,8,108,1,108,1,108,3,108,1892,8,108,1,108,
  	1,108,3,108,1896,8,108,1,108,1,108,3,108,1900,8,108,1,108,1,108,1,108,
  	1,108,1,108,1,108,3,108,1908,8,108,1,108,1,108,3,108,1912,8,108,1,108,
  	1,108,3,108,1916,8,108,1,108,1,108,3,108,1920,8,108,1,108,1,108,4,108,
  	1924,8,108,11,108,12,108,1925,1,108,1,108,3,108,1930,8,108,1,109,1,109,
  	1,110,1,110,3,110,1936,8,110,1,110,1,110,3,110,1940,8,110,1,110,5,110,
  	1943,8,110,10,110,12,110,1946,9,110,1,111,1,111,3,111,1950,8,111,1,111,
  	1,111,3,111,1954,8,111,1,111,5,111,1957,8,111,10,111,12,111,1960,9,111,
  	1,112,1,112,3,112,1964,8,112,1,112,1,112,3,112,1968,8,112,1,112,1,112,
  	5,112,1972,8,112,10,112,12,112,1975,9,112,1,113,1,113,1,114,1,114,3,114,
  	1981,8,114,1,114,1,114,3,114,1985,8,114,1,114,1,114,5,114,1989,8,114,
  	10,114,12,114,1992,9,114,1,115,1,115,1,116,1,116,3,116,1998,8,116,1,116,
  	1,116,3,116,2002,8,116,1,116,1,116,5,116,2006,8,116,10,116,12,116,2009,
  	9,116,1,117,1,117,1,118,1,118,3,118,2015,8,118,1,118,1,118,3,118,2019,
  	8,118,1,118,5,118,2022,8,118,10,118,12,118,2025,9,118,1,119,1,119,3,119,
  	2029,8,119,5,119,2031,8,119,10,119,12,119,2034,9,119,1,119,1,119,3,119,
  	2038,8,119,1,119,3,119,2041,8,119,1,120,1,120,1,120,4,120,2046,8,120,
  	11,120,12,120,2047,1,120,3,120,2051,8,120,1,121,1,121,1,121,3,121,2056,
  	8,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,2065,8,121,1,121,
  	1,121,3,121,2069,8,121,1,121,3,121,2072,8,121,1,122,1,122,1,122,1,122,
  	1,122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,2085,8,122,1,122,3,122,
  	2088,8,122,1,122,1,122,1,123,3,123,2093,8,123,1,123,1,123,1,124,1,124,
  	1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,2107,8,124,1,125,
  	1,125,3,125,2111,8,125,1,125,5,125,2114,8,125,10,125,12,125,2117,9,125,
  	1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,3,126,2128,8,126,
  	1,127,1,127,1,127,1,127,1,127,1,127,3,127,2136,8,127,1,128,1,128,1,129,
  	1,129,3,129,2142,8,129,1,129,1,129,3,129,2146,8,129,1,129,1,129,3,129,
  	2150,8,129,5,129,2152,8,129,10,129,12,129,2155,9,129,3,129,2157,8,129,
  	1,129,1,129,1,130,1,130,3,130,2163,8,130,1,130,3,130,2166,8,130,1,131,
  	1,131,3,131,2170,8,131,1,131,1,131,3,131,2174,8,131,1,131,1,131,3,131,
  	2178,8,131,1,131,1,131,3,131,2182,8,131,5,131,2184,8,131,10,131,12,131,
  	2187,9,131,1,131,1,131,1,132,1,132,3,132,2193,8,132,1,132,3,132,2196,
  	8,132,1,132,1,132,3,132,2200,8,132,1,132,1,132,1,133,1,133,3,133,2206,
  	8,133,1,133,1,133,3,133,2210,8,133,1,133,1,133,1,134,1,134,3,134,2216,
  	8,134,1,134,1,134,3,134,2220,8,134,1,134,1,134,3,134,2224,8,134,1,134,
  	1,134,1,134,3,134,2229,8,134,1,134,1,134,3,134,2233,8,134,1,134,1,134,
  	3,134,2237,8,134,3,134,2239,8,134,1,134,1,134,3,134,2243,8,134,1,134,
  	1,134,3,134,2247,8,134,1,134,1,134,3,134,2251,8,134,5,134,2253,8,134,
  	10,134,12,134,2256,9,134,3,134,2258,8,134,1,134,1,134,3,134,2262,8,134,
  	1,135,1,135,1,136,1,136,3,136,2268,8,136,1,136,1,136,1,136,3,136,2273,
  	8,136,3,136,2275,8,136,1,136,1,136,1,137,1,137,3,137,2281,8,137,1,137,
  	4,137,2284,8,137,11,137,12,137,2285,1,138,1,138,3,138,2290,8,138,1,138,
  	1,138,3,138,2294,8,138,1,138,1,138,3,138,2298,8,138,1,138,1,138,3,138,
  	2302,8,138,1,138,3,138,2305,8,138,1,138,3,138,2308,8,138,1,138,1,138,
  	1,139,1,139,3,139,2314,8,139,1,139,1,139,3,139,2318,8,139,1,139,1,139,
  	3,139,2322,8,139,1,139,1,139,3,139,2326,8,139,1,139,3,139,2329,8,139,
  	1,139,3,139,2332,8,139,1,139,1,139,1,140,1,140,3,140,2338,8,140,1,140,
  	1,140,3,140,2342,8,140,1,141,1,141,3,141,2346,8,141,1,141,4,141,2349,
  	8,141,11,141,12,141,2350,1,141,1,141,3,141,2355,8,141,1,141,1,141,3,141,
  	2359,8,141,1,141,4,141,2362,8,141,11,141,12,141,2363,3,141,2366,8,141,
  	1,141,3,141,2369,8,141,1,141,1,141,3,141,2373,8,141,1,141,3,141,2376,
  	8,141,1,141,3,141,2379,8,141,1,141,1,141,1,142,1,142,3,142,2385,8,142,
  	1,142,1,142,3,142,2389,8,142,1,142,1,142,3,142,2393,8,142,1,142,1,142,
  	1,143,1,143,1,144,1,144,3,144,2401,8,144,1,145,1,145,1,145,3,145,2406,
  	8,145,1,146,1,146,3,146,2410,8,146,1,146,1,146,1,147,1,147,1,148,1,148,
  	1,149,1,149,1,150,1,150,1,151,1,151,1,151,1,151,1,151,3,151,2427,8,151,
  	1,152,1,152,1,153,1,153,1,154,1,154,1,155,1,155,1,155,0,1,88,156,0,2,
  	4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
  	52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
  	98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
  	134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
  	170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,
  	206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,
  	242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,
  	278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,0,
  	11,2,0,60,60,62,63,1,0,114,117,2,0,6,6,13,17,1,0,19,20,2,0,21,21,125,
  	125,2,0,22,23,108,108,1,0,134,135,9,0,48,48,50,50,56,59,63,69,77,77,81,
  	81,128,128,136,136,140,140,2,0,14,14,27,30,2,0,16,16,31,34,2,0,35,45,
  	125,125,2754,0,312,1,0,0,0,2,332,1,0,0,0,4,365,1,0,0,0,6,367,1,0,0,0,
  	8,389,1,0,0,0,10,431,1,0,0,0,12,433,1,0,0,0,14,463,1,0,0,0,16,484,1,0,
  	0,0,18,495,1,0,0,0,20,501,1,0,0,0,22,533,1,0,0,0,24,543,1,0,0,0,26,557,
  	1,0,0,0,28,561,1,0,0,0,30,565,1,0,0,0,32,577,1,0,0,0,34,589,1,0,0,0,36,
  	632,1,0,0,0,38,646,1,0,0,0,40,690,1,0,0,0,42,692,1,0,0,0,44,702,1,0,0,
  	0,46,731,1,0,0,0,48,771,1,0,0,0,50,825,1,0,0,0,52,833,1,0,0,0,54,839,
  	1,0,0,0,56,856,1,0,0,0,58,858,1,0,0,0,60,878,1,0,0,0,62,889,1,0,0,0,64,
  	891,1,0,0,0,66,904,1,0,0,0,68,908,1,0,0,0,70,914,1,0,0,0,72,926,1,0,0,
  	0,74,928,1,0,0,0,76,939,1,0,0,0,78,943,1,0,0,0,80,949,1,0,0,0,82,957,
  	1,0,0,0,84,971,1,0,0,0,86,980,1,0,0,0,88,1048,1,0,0,0,90,1057,1,0,0,0,
  	92,1064,1,0,0,0,94,1072,1,0,0,0,96,1074,1,0,0,0,98,1076,1,0,0,0,100,1092,
  	1,0,0,0,102,1096,1,0,0,0,104,1098,1,0,0,0,106,1106,1,0,0,0,108,1110,1,
  	0,0,0,110,1133,1,0,0,0,112,1147,1,0,0,0,114,1151,1,0,0,0,116,1198,1,0,
  	0,0,118,1204,1,0,0,0,120,1216,1,0,0,0,122,1234,1,0,0,0,124,1240,1,0,0,
  	0,126,1242,1,0,0,0,128,1278,1,0,0,0,130,1289,1,0,0,0,132,1302,1,0,0,0,
  	134,1312,1,0,0,0,136,1318,1,0,0,0,138,1340,1,0,0,0,140,1342,1,0,0,0,142,
  	1360,1,0,0,0,144,1372,1,0,0,0,146,1392,1,0,0,0,148,1400,1,0,0,0,150,1407,
  	1,0,0,0,152,1451,1,0,0,0,154,1460,1,0,0,0,156,1462,1,0,0,0,158,1477,1,
  	0,0,0,160,1481,1,0,0,0,162,1485,1,0,0,0,164,1492,1,0,0,0,166,1496,1,0,
  	0,0,168,1521,1,0,0,0,170,1523,1,0,0,0,172,1539,1,0,0,0,174,1541,1,0,0,
  	0,176,1565,1,0,0,0,178,1615,1,0,0,0,180,1617,1,0,0,0,182,1647,1,0,0,0,
  	184,1688,1,0,0,0,186,1709,1,0,0,0,188,1719,1,0,0,0,190,1725,1,0,0,0,192,
  	1760,1,0,0,0,194,1806,1,0,0,0,196,1818,1,0,0,0,198,1830,1,0,0,0,200,1832,
  	1,0,0,0,202,1834,1,0,0,0,204,1836,1,0,0,0,206,1838,1,0,0,0,208,1840,1,
  	0,0,0,210,1850,1,0,0,0,212,1860,1,0,0,0,214,1876,1,0,0,0,216,1929,1,0,
  	0,0,218,1931,1,0,0,0,220,1933,1,0,0,0,222,1947,1,0,0,0,224,1961,1,0,0,
  	0,226,1976,1,0,0,0,228,1978,1,0,0,0,230,1993,1,0,0,0,232,1995,1,0,0,0,
  	234,2010,1,0,0,0,236,2012,1,0,0,0,238,2032,1,0,0,0,240,2042,1,0,0,0,242,
  	2071,1,0,0,0,244,2084,1,0,0,0,246,2092,1,0,0,0,248,2106,1,0,0,0,250,2108,
  	1,0,0,0,252,2127,1,0,0,0,254,2135,1,0,0,0,256,2137,1,0,0,0,258,2139,1,
  	0,0,0,260,2160,1,0,0,0,262,2167,1,0,0,0,264,2192,1,0,0,0,266,2203,1,0,
  	0,0,268,2261,1,0,0,0,270,2263,1,0,0,0,272,2274,1,0,0,0,274,2278,1,0,0,
  	0,276,2287,1,0,0,0,278,2311,1,0,0,0,280,2335,1,0,0,0,282,2365,1,0,0,0,
  	284,2382,1,0,0,0,286,2396,1,0,0,0,288,2400,1,0,0,0,290,2402,1,0,0,0,292,
  	2407,1,0,0,0,294,2413,1,0,0,0,296,2415,1,0,0,0,298,2417,1,0,0,0,300,2419,
  	1,0,0,0,302,2426,1,0,0,0,304,2428,1,0,0,0,306,2430,1,0,0,0,308,2432,1,
  	0,0,0,310,2434,1,0,0,0,312,323,3,2,1,0,313,315,5,157,0,0,314,313,1,0,
  	0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,318,5,1,0,0,317,319,5,157,0,0,
  	318,317,1,0,0,0,318,319,1,0,0,0,319,320,1,0,0,0,320,322,3,2,1,0,321,314,
  	1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,327,1,0,0,
  	0,325,323,1,0,0,0,326,328,5,157,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,
  	329,1,0,0,0,329,330,5,0,0,1,330,1,1,0,0,0,331,333,3,94,47,0,332,331,1,
  	0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,336,5,157,0,0,335,334,1,0,0,
  	0,335,336,1,0,0,0,336,337,1,0,0,0,337,342,3,4,2,0,338,340,5,157,0,0,339,
  	338,1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,0,341,343,5,1,0,0,342,339,1,
  	0,0,0,342,343,1,0,0,0,343,3,1,0,0,0,344,366,3,108,54,0,345,366,3,44,22,
  	0,346,366,3,46,23,0,347,366,3,48,24,0,348,366,3,52,26,0,349,366,3,54,
  	27,0,350,366,3,68,34,0,351,366,3,70,35,0,352,366,3,6,3,0,353,366,3,12,
  	6,0,354,366,3,14,7,0,355,366,3,30,15,0,356,366,3,34,17,0,357,366,3,32,
  	16,0,358,366,3,100,50,0,359,366,3,102,51,0,360,366,3,16,8,0,361,366,3,
  	18,9,0,362,366,3,20,10,0,363,366,3,26,13,0,364,366,3,28,14,0,365,344,
  	1,0,0,0,365,345,1,0,0,0,365,346,1,0,0,0,365,347,1,0,0,0,365,348,1,0,0,
  	0,365,349,1,0,0,0,365,350,1,0,0,0,365,351,1,0,0,0,365,352,1,0,0,0,365,
  	353,1,0,0,0,365,354,1,0,0,0,365,355,1,0,0,0,365,356,1,0,0,0,365,357,1,
  	0,0,0,365,358,1,0,0,0,365,359,1,0,0,0,365,360,1,0,0,0,365,361,1,0,0,0,
  	365,362,1,0,0,0,365,363,1,0,0,0,365,364,1,0,0,0,366,5,1,0,0,0,367,368,
  	5,53,0,0,368,369,5,157,0,0,369,378,3,300,150,0,370,372,5,157,0,0,371,
  	370,1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,375,3,8,4,0,374,376,5,
  	157,0,0,375,374,1,0,0,0,375,376,1,0,0,0,376,379,1,0,0,0,377,379,5,157,
  	0,0,378,371,1,0,0,0,378,377,1,0,0,0,379,380,1,0,0,0,380,381,5,54,0,0,
  	381,382,5,157,0,0,382,387,3,10,5,0,383,385,5,157,0,0,384,383,1,0,0,0,
  	384,385,1,0,0,0,385,386,1,0,0,0,386,388,3,42,21,0,387,384,1,0,0,0,387,
  	388,1,0,0,0,388,7,1,0,0,0,389,391,5,2,0,0,390,392,5,157,0,0,391,390,1,
  	0,0,0,391,392,1,0,0,0,392,393,1,0,0,0,393,404,3,300,150,0,394,396,5,157,
  	0,0,395,394,1,0,0,0,395,396,1,0,0,0,396,397,1,0,0,0,397,399,5,3,0,0,398,
  	400,5,157,0,0,399,398,1,0,0,0,399,400,1,0,0,0,400,401,1,0,0,0,401,403,
  	3,300,150,0,402,395,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,1,
  	0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,407,409,5,157,0,0,408,407,1,0,0,
  	0,408,409,1,0,0,0,409,410,1,0,0,0,410,411,5,4,0,0,411,9,1,0,0,0,412,432,
  	3,40,20,0,413,415,5,2,0,0,414,416,5,157,0,0,415,414,1,0,0,0,415,416,1,
  	0,0,0,416,417,1,0,0,0,417,419,3,108,54,0,418,420,5,157,0,0,419,418,1,
  	0,0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,422,5,4,0,0,422,432,1,0,0,0,
  	423,432,3,286,143,0,424,425,3,286,143,0,425,427,5,5,0,0,426,428,5,157,
  	0,0,427,426,1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,430,3,300,150,
  	0,430,432,1,0,0,0,431,412,1,0,0,0,431,413,1,0,0,0,431,423,1,0,0,0,431,
  	424,1,0,0,0,432,11,1,0,0,0,433,434,5,53,0,0,434,435,5,157,0,0,435,436,
  	3,300,150,0,436,437,5,157,0,0,437,438,5,54,0,0,438,439,5,157,0,0,439,
  	441,5,2,0,0,440,442,5,157,0,0,441,440,1,0,0,0,441,442,1,0,0,0,442,443,
  	1,0,0,0,443,454,5,143,0,0,444,446,5,157,0,0,445,444,1,0,0,0,445,446,1,
  	0,0,0,446,447,1,0,0,0,447,449,5,3,0,0,448,450,5,157,0,0,449,448,1,0,0,
  	0,449,450,1,0,0,0,450,451,1,0,0,0,451,453,5,143,0,0,452,445,1,0,0,0,453,
  	456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,454,1,
  	0,0,0,457,458,5,4,0,0,458,459,5,157,0,0,459,460,5,111,0,0,460,461,5,157,
  	0,0,461,462,5,55,0,0,462,13,1,0,0,0,463,464,5,53,0,0,464,465,5,157,0,
  	0,465,467,5,2,0,0,466,468,5,157,0,0,467,466,1,0,0,0,467,468,1,0,0,0,468,
  	469,1,0,0,0,469,471,3,108,54,0,470,472,5,157,0,0,471,470,1,0,0,0,471,
  	472,1,0,0,0,472,473,1,0,0,0,473,474,5,4,0,0,474,475,5,157,0,0,475,476,
  	5,78,0,0,476,477,5,157,0,0,477,482,5,143,0,0,478,480,5,157,0,0,479,478,
  	1,0,0,0,479,480,1,0,0,0,480,481,1,0,0,0,481,483,3,42,21,0,482,479,1,0,
  	0,0,482,483,1,0,0,0,483,15,1,0,0,0,484,485,5,56,0,0,485,486,5,157,0,0,
  	486,487,5,58,0,0,487,488,5,157,0,0,488,493,5,143,0,0,489,491,5,157,0,
  	0,490,489,1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,494,3,42,21,0,493,
  	490,1,0,0,0,493,494,1,0,0,0,494,17,1,0,0,0,495,496,5,57,0,0,496,497,5,
  	157,0,0,497,498,5,58,0,0,498,499,5,157,0,0,499,500,5,143,0,0,500,19,1,
  	0,0,0,501,502,5,46,0,0,502,503,5,157,0,0,503,508,5,143,0,0,504,505,5,
  	157,0,0,505,506,5,109,0,0,506,507,5,157,0,0,507,509,3,300,150,0,508,504,
  	1,0,0,0,508,509,1,0,0,0,509,510,1,0,0,0,510,511,5,157,0,0,511,513,5,2,
  	0,0,512,514,5,157,0,0,513,512,1,0,0,0,513,514,1,0,0,0,514,515,1,0,0,0,
  	515,516,5,47,0,0,516,517,5,157,0,0,517,526,3,302,151,0,518,520,5,157,
  	0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,521,523,5,3,0,0,522,
  	524,5,157,0,0,523,522,1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,527,
  	3,24,12,0,526,519,1,0,0,0,526,527,1,0,0,0,527,529,1,0,0,0,528,530,5,157,
  	0,0,529,528,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,532,5,4,0,0,532,
  	21,1,0,0,0,533,535,3,302,151,0,534,536,5,157,0,0,535,534,1,0,0,0,535,
  	536,1,0,0,0,536,537,1,0,0,0,537,539,5,6,0,0,538,540,5,157,0,0,539,538,
  	1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,542,3,254,127,0,542,23,1,
  	0,0,0,543,554,3,22,11,0,544,546,5,157,0,0,545,544,1,0,0,0,545,546,1,0,
  	0,0,546,547,1,0,0,0,547,549,5,3,0,0,548,550,5,157,0,0,549,548,1,0,0,0,
  	549,550,1,0,0,0,550,551,1,0,0,0,551,553,3,22,11,0,552,545,1,0,0,0,553,
  	556,1,0,0,0,554,552,1,0,0,0,554,555,1,0,0,0,555,25,1,0,0,0,556,554,1,
  	0,0,0,557,558,5,103,0,0,558,559,5,157,0,0,559,560,3,300,150,0,560,27,
  	1,0,0,0,561,562,5,48,0,0,562,563,5,157,0,0,563,564,3,300,150,0,564,29,
  	1,0,0,0,565,566,5,49,0,0,566,567,5,157,0,0,567,569,3,302,151,0,568,570,
  	5,157,0,0,569,568,1,0,0,0,569,570,1,0,0,0,570,571,1,0,0,0,571,573,5,6,
  	0,0,572,574,5,157,0,0,573,572,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,
  	575,576,3,206,103,0,576,31,1,0,0,0,577,578,5,50,0,0,578,579,5,157,0,0,
  	579,580,5,101,0,0,580,581,5,157,0,0,581,582,5,60,0,0,582,583,5,157,0,
  	0,583,584,3,300,150,0,584,585,5,157,0,0,585,586,5,132,0,0,586,587,5,157,
  	0,0,587,588,5,143,0,0,588,33,1,0,0,0,589,590,5,99,0,0,590,591,5,157,0,
  	0,591,592,5,51,0,0,592,593,5,157,0,0,593,595,3,270,135,0,594,596,5,157,
  	0,0,595,594,1,0,0,0,595,596,1,0,0,0,596,597,1,0,0,0,597,599,5,2,0,0,598,
  	600,5,157,0,0,599,598,1,0,0,0,599,600,1,0,0,0,600,602,1,0,0,0,601,603,
  	3,36,18,0,602,601,1,0,0,0,602,603,1,0,0,0,603,605,1,0,0,0,604,606,5,157,
  	0,0,605,604,1,0,0,0,605,606,1,0,0,0,606,608,1,0,0,0,607,609,3,38,19,0,
  	608,607,1,0,0,0,608,609,1,0,0,0,609,620,1,0,0,0,610,612,5,157,0,0,611,
  	610,1,0,0,0,611,612,1,0,0,0,612,613,1,0,0,0,613,615,5,3,0,0,614,616,5,
  	157,0,0,615,614,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,619,3,38,
  	19,0,618,611,1,0,0,0,619,622,1,0,0,0,620,618,1,0,0,0,620,621,1,0,0,0,
  	621,624,1,0,0,0,622,620,1,0,0,0,623,625,5,157,0,0,624,623,1,0,0,0,624,
  	625,1,0,0,0,625,626,1,0,0,0,626,627,5,4,0,0,627,628,5,157,0,0,628,629,
  	5,109,0,0,629,630,5,157,0,0,630,631,3,206,103,0,631,35,1,0,0,0,632,643,
  	3,302,151,0,633,635,5,157,0,0,634,633,1,0,0,0,634,635,1,0,0,0,635,636,
  	1,0,0,0,636,638,5,3,0,0,637,639,5,157,0,0,638,637,1,0,0,0,638,639,1,0,
  	0,0,639,640,1,0,0,0,640,642,3,302,151,0,641,634,1,0,0,0,642,645,1,0,0,
  	0,643,641,1,0,0,0,643,644,1,0,0,0,644,37,1,0,0,0,645,643,1,0,0,0,646,
  	648,3,302,151,0,647,649,5,157,0,0,648,647,1,0,0,0,648,649,1,0,0,0,649,
  	650,1,0,0,0,650,651,5,127,0,0,651,653,5,6,0,0,652,654,5,157,0,0,653,652,
  	1,0,0,0,653,654,1,0,0,0,654,655,1,0,0,0,655,656,3,254,127,0,656,39,1,
  	0,0,0,657,659,5,7,0,0,658,660,5,157,0,0,659,658,1,0,0,0,659,660,1,0,0,
  	0,660,661,1,0,0,0,661,672,5,143,0,0,662,664,5,157,0,0,663,662,1,0,0,0,
  	663,664,1,0,0,0,664,665,1,0,0,0,665,667,5,3,0,0,666,668,5,157,0,0,667,
  	666,1,0,0,0,667,668,1,0,0,0,668,669,1,0,0,0,669,671,5,143,0,0,670,663,
  	1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,675,1,0,0,
  	0,674,672,1,0,0,0,675,691,5,8,0,0,676,691,5,143,0,0,677,679,5,52,0,0,
  	678,680,5,157,0,0,679,678,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,
  	683,5,2,0,0,682,684,5,157,0,0,683,682,1,0,0,0,683,684,1,0,0,0,684,685,
  	1,0,0,0,685,687,5,143,0,0,686,688,5,157,0,0,687,686,1,0,0,0,687,688,1,
  	0,0,0,688,689,1,0,0,0,689,691,5,4,0,0,690,657,1,0,0,0,690,676,1,0,0,0,
  	690,677,1,0,0,0,691,41,1,0,0,0,692,694,5,2,0,0,693,695,5,157,0,0,694,
  	693,1,0,0,0,694,695,1,0,0,0,695,696,1,0,0,0,696,698,3,24,12,0,697,699,
  	5,157,0,0,698,697,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,701,5,4,
  	0,0,701,43,1,0,0,0,702,703,5,99,0,0,703,704,5,157,0,0,704,705,5,59,0,
  	0,705,706,5,157,0,0,706,707,5,60,0,0,707,708,5,157,0,0,708,710,3,300,
  	150,0,709,711,5,157,0,0,710,709,1,0,0,0,710,711,1,0,0,0,711,712,1,0,0,
  	0,712,714,5,2,0,0,713,715,5,157,0,0,714,713,1,0,0,0,714,715,1,0,0,0,715,
  	716,1,0,0,0,716,718,3,82,41,0,717,719,5,157,0,0,718,717,1,0,0,0,718,719,
  	1,0,0,0,719,720,1,0,0,0,720,722,5,3,0,0,721,723,5,157,0,0,722,721,1,0,
  	0,0,722,723,1,0,0,0,723,724,1,0,0,0,724,725,3,86,43,0,725,727,1,0,0,0,
  	726,728,5,157,0,0,727,726,1,0,0,0,727,728,1,0,0,0,728,729,1,0,0,0,729,
  	730,5,4,0,0,730,45,1,0,0,0,731,732,5,99,0,0,732,733,5,157,0,0,733,734,
  	5,77,0,0,734,735,5,157,0,0,735,736,5,60,0,0,736,737,5,157,0,0,737,739,
  	3,300,150,0,738,740,5,157,0,0,739,738,1,0,0,0,739,740,1,0,0,0,740,741,
  	1,0,0,0,741,743,5,2,0,0,742,744,5,157,0,0,743,742,1,0,0,0,743,744,1,0,
  	0,0,744,745,1,0,0,0,745,747,3,50,25,0,746,748,5,157,0,0,747,746,1,0,0,
  	0,747,748,1,0,0,0,748,757,1,0,0,0,749,751,5,3,0,0,750,752,5,157,0,0,751,
  	750,1,0,0,0,751,752,1,0,0,0,752,753,1,0,0,0,753,755,3,82,41,0,754,756,
  	5,157,0,0,755,754,1,0,0,0,755,756,1,0,0,0,756,758,1,0,0,0,757,749,1,0,
  	0,0,757,758,1,0,0,0,758,767,1,0,0,0,759,761,5,3,0,0,760,762,5,157,0,0,
  	761,760,1,0,0,0,761,762,1,0,0,0,762,763,1,0,0,0,763,765,3,302,151,0,764,
  	766,5,157,0,0,765,764,1,0,0,0,765,766,1,0,0,0,766,768,1,0,0,0,767,759,
  	1,0,0,0,767,768,1,0,0,0,768,769,1,0,0,0,769,770,5,4,0,0,770,47,1,0,0,
  	0,771,772,5,99,0,0,772,773,5,157,0,0,773,774,5,77,0,0,774,775,5,157,0,
  	0,775,776,5,60,0,0,776,777,5,157,0,0,777,778,5,61,0,0,778,779,5,157,0,
  	0,779,781,3,300,150,0,780,782,5,157,0,0,781,780,1,0,0,0,781,782,1,0,0,
  	0,782,783,1,0,0,0,783,785,5,2,0,0,784,786,5,157,0,0,785,784,1,0,0,0,785,
  	786,1,0,0,0,786,787,1,0,0,0,787,789,3,50,25,0,788,790,5,157,0,0,789,788,
  	1,0,0,0,789,790,1,0,0,0,790,796,1,0,0,0,791,793,5,3,0,0,792,794,5,157,
  	0,0,793,792,1,0,0,0,793,794,1,0,0,0,794,795,1,0,0,0,795,797,3,50,25,0,
  	796,791,1,0,0,0,797,798,1,0,0,0,798,796,1,0,0,0,798,799,1,0,0,0,799,801,
  	1,0,0,0,800,802,5,157,0,0,801,800,1,0,0,0,801,802,1,0,0,0,802,811,1,0,
  	0,0,803,805,5,3,0,0,804,806,5,157,0,0,805,804,1,0,0,0,805,806,1,0,0,0,
  	806,807,1,0,0,0,807,809,3,82,41,0,808,810,5,157,0,0,809,808,1,0,0,0,809,
  	810,1,0,0,0,810,812,1,0,0,0,811,803,1,0,0,0,811,812,1,0,0,0,812,821,1,
  	0,0,0,813,815,5,3,0,0,814,816,5,157,0,0,815,814,1,0,0,0,815,816,1,0,0,
  	0,816,817,1,0,0,0,817,819,3,302,151,0,818,820,5,157,0,0,819,818,1,0,0,
  	0,819,820,1,0,0,0,820,822,1,0,0,0,821,813,1,0,0,0,821,822,1,0,0,0,822,
  	823,1,0,0,0,823,824,5,4,0,0,824,49,1,0,0,0,825,826,5,54,0,0,826,827,5,
  	157,0,0,827,828,3,300,150,0,828,829,5,157,0,0,829,830,5,78,0,0,830,831,
  	5,157,0,0,831,832,3,300,150,0,832,51,1,0,0,0,833,834,5,99,0,0,834,835,
  	5,157,0,0,835,836,5,62,0,0,836,837,5,157,0,0,837,838,3,300,150,0,838,
  	53,1,0,0,0,839,840,5,99,0,0,840,841,5,157,0,0,841,842,5,63,0,0,842,843,
  	5,157,0,0,843,848,3,300,150,0,844,845,5,157,0,0,845,847,3,56,28,0,846,
  	844,1,0,0,0,847,850,1,0,0,0,848,846,1,0,0,0,848,849,1,0,0,0,849,55,1,
  	0,0,0,850,848,1,0,0,0,851,857,3,58,29,0,852,857,3,60,30,0,853,857,3,62,
  	31,0,854,857,3,64,32,0,855,857,3,66,33,0,856,851,1,0,0,0,856,852,1,0,
  	0,0,856,853,1,0,0,0,856,854,1,0,0,0,856,855,1,0,0,0,857,57,1,0,0,0,858,
  	859,5,64,0,0,859,862,5,157,0,0,860,861,5,111,0,0,861,863,5,157,0,0,862,
  	860,1,0,0,0,862,863,1,0,0,0,863,865,1,0,0,0,864,866,5,125,0,0,865,864,
  	1,0,0,0,865,866,1,0,0,0,866,867,1,0,0,0,867,868,3,296,148,0,868,59,1,
  	0,0,0,869,870,5,68,0,0,870,871,5,157,0,0,871,879,5,65,0,0,872,873,5,65,
  	0,0,873,875,5,157,0,0,874,876,5,125,0,0,875,874,1,0,0,0,875,876,1,0,0,
  	0,876,877,1,0,0,0,877,879,3,296,148,0,878,869,1,0,0,0,878,872,1,0,0,0,
  	879,61,1,0,0,0,880,881,5,68,0,0,881,882,5,157,0,0,882,890,5,66,0,0,883,
  	884,5,66,0,0,884,886,5,157,0,0,885,887,5,125,0,0,886,885,1,0,0,0,886,
  	887,1,0,0,0,887,888,1,0,0,0,888,890,3,296,148,0,889,880,1,0,0,0,889,883,
  	1,0,0,0,890,63,1,0,0,0,891,892,5,67,0,0,892,895,5,157,0,0,893,894,5,105,
  	0,0,894,896,5,157,0,0,895,893,1,0,0,0,895,896,1,0,0,0,896,898,1,0,0,0,
  	897,899,5,125,0,0,898,897,1,0,0,0,898,899,1,0,0,0,899,900,1,0,0,0,900,
  	901,3,296,148,0,901,65,1,0,0,0,902,903,5,68,0,0,903,905,5,157,0,0,904,
  	902,1,0,0,0,904,905,1,0,0,0,905,906,1,0,0,0,906,907,5,69,0,0,907,67,1,
  	0,0,0,908,909,5,70,0,0,909,910,5,157,0,0,910,911,7,0,0,0,911,912,5,157,
  	0,0,912,913,3,300,150,0,913,69,1,0,0,0,914,915,5,71,0,0,915,916,5,157,
  	0,0,916,917,5,60,0,0,917,918,5,157,0,0,918,919,3,300,150,0,919,920,5,
  	157,0,0,920,921,3,72,36,0,921,71,1,0,0,0,922,927,3,74,37,0,923,927,3,
  	76,38,0,924,927,3,78,39,0,925,927,3,80,40,0,926,922,1,0,0,0,926,923,1,
  	0,0,0,926,924,1,0,0,0,926,925,1,0,0,0,927,73,1,0,0,0,928,929,5,74,0,0,
  	929,930,5,157,0,0,930,931,3,294,147,0,931,932,5,157,0,0,932,937,3,88,
  	44,0,933,934,5,157,0,0,934,935,5,72,0,0,935,936,5,157,0,0,936,938,3,206,
  	103,0,937,933,1,0,0,0,937,938,1,0,0,0,938,75,1,0,0,0,939,940,5,70,0,0,
  	940,941,5,157,0,0,941,942,3,294,147,0,942,77,1,0,0,0,943,944,5,73,0,0,
  	944,945,5,157,0,0,945,946,5,78,0,0,946,947,5,157,0,0,947,948,3,300,150,
  	0,948,79,1,0,0,0,949,950,5,73,0,0,950,951,5,157,0,0,951,952,3,294,147,
  	0,952,953,5,157,0,0,953,954,5,78,0,0,954,955,5,157,0,0,955,956,3,294,
  	147,0,956,81,1,0,0,0,957,968,3,84,42,0,958,960,5,157,0,0,959,958,1,0,
  	0,0,959,960,1,0,0,0,960,961,1,0,0,0,961,963,5,3,0,0,962,964,5,157,0,0,
  	963,962,1,0,0,0,963,964,1,0,0,0,964,965,1,0,0,0,965,967,3,84,42,0,966,
  	959,1,0,0,0,967,970,1,0,0,0,968,966,1,0,0,0,968,969,1,0,0,0,969,83,1,
  	0,0,0,970,968,1,0,0,0,971,972,3,294,147,0,972,973,5,157,0,0,973,978,3,
  	88,44,0,974,975,5,157,0,0,975,976,5,72,0,0,976,977,5,157,0,0,977,979,
  	3,206,103,0,978,974,1,0,0,0,978,979,1,0,0,0,979,85,1,0,0,0,980,981,5,
  	75,0,0,981,982,5,157,0,0,982,984,5,76,0,0,983,985,5,157,0,0,984,983,1,
  	0,0,0,984,985,1,0,0,0,985,986,1,0,0,0,986,988,5,2,0,0,987,989,5,157,0,
  	0,988,987,1,0,0,0,988,989,1,0,0,0,989,990,1,0,0,0,990,992,3,294,147,0,
  	991,993,5,157,0,0,992,991,1,0,0,0,992,993,1,0,0,0,993,994,1,0,0,0,994,
  	995,5,4,0,0,995,87,1,0,0,0,996,997,6,44,-1,0,997,1049,3,302,151,0,998,
  	1000,5,92,0,0,999,1001,5,157,0,0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,
  	1002,1,0,0,0,1002,1004,5,2,0,0,1003,1005,5,157,0,0,1004,1003,1,0,0,0,
  	1004,1005,1,0,0,0,1005,1006,1,0,0,0,1006,1008,3,82,41,0,1007,1009,5,157,
  	0,0,1008,1007,1,0,0,0,1008,1009,1,0,0,0,1009,1010,1,0,0,0,1010,1011,5,
  	4,0,0,1011,1049,1,0,0,0,1012,1014,3,302,151,0,1013,1015,5,157,0,0,1014,
  	1013,1,0,0,0,1014,1015,1,0,0,0,1015,1016,1,0,0,0,1016,1018,5,2,0,0,1017,
  	1019,5,157,0,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,1020,1,0,0,0,
  	1020,1022,3,82,41,0,1021,1023,5,157,0,0,1022,1021,1,0,0,0,1022,1023,1,
  	0,0,0,1023,1024,1,0,0,0,1024,1025,5,4,0,0,1025,1049,1,0,0,0,1026,1028,
  	3,302,151,0,1027,1029,5,157,0,0,1028,1027,1,0,0,0,1028,1029,1,0,0,0,1029,
  	1030,1,0,0,0,1030,1032,5,2,0,0,1031,1033,5,157,0,0,1032,1031,1,0,0,0,
  	1032,1033,1,0,0,0,1033,1034,1,0,0,0,1034,1036,3,88,44,0,1035,1037,5,157,
  	0,0,1036,1035,1,0,0,0,1036,1037,1,0,0,0,1037,1038,1,0,0,0,1038,1040,5,
  	3,0,0,1039,1041,5,157,0,0,1040,1039,1,0,0,0,1040,1041,1,0,0,0,1041,1042,
  	1,0,0,0,1042,1044,3,88,44,0,1043,1045,5,157,0,0,1044,1043,1,0,0,0,1044,
  	1045,1,0,0,0,1045,1046,1,0,0,0,1046,1047,5,4,0,0,1047,1049,1,0,0,0,1048,
  	996,1,0,0,0,1048,998,1,0,0,0,1048,1012,1,0,0,0,1048,1026,1,0,0,0,1049,
  	1054,1,0,0,0,1050,1051,10,4,0,0,1051,1053,3,90,45,0,1052,1050,1,0,0,0,
  	1053,1056,1,0,0,0,1054,1052,1,0,0,0,1054,1055,1,0,0,0,1055,89,1,0,0,0,
  	1056,1054,1,0,0,0,1057,1061,3,92,46,0,1058,1060,3,92,46,0,1059,1058,1,
  	0,0,0,1060,1063,1,0,0,0,1061,1059,1,0,0,0,1061,1062,1,0,0,0,1062,91,1,
  	0,0,0,1063,1061,1,0,0,0,1064,1066,5,7,0,0,1065,1067,3,296,148,0,1066,
  	1065,1,0,0,0,1066,1067,1,0,0,0,1067,1068,1,0,0,0,1068,1069,5,8,0,0,1069,
  	93,1,0,0,0,1070,1073,3,96,48,0,1071,1073,3,98,49,0,1072,1070,1,0,0,0,
  	1072,1071,1,0,0,0,1073,95,1,0,0,0,1074,1075,5,79,0,0,1075,97,1,0,0,0,
  	1076,1077,5,80,0,0,1077,99,1,0,0,0,1078,1079,5,81,0,0,1079,1080,5,157,
  	0,0,1080,1093,5,82,0,0,1081,1082,5,81,0,0,1082,1083,5,157,0,0,1083,1084,
  	5,82,0,0,1084,1085,5,157,0,0,1085,1086,5,83,0,0,1086,1087,5,157,0,0,1087,
  	1093,5,84,0,0,1088,1093,5,86,0,0,1089,1093,5,87,0,0,1090,1093,5,88,0,
  	0,1091,1093,5,89,0,0,1092,1078,1,0,0,0,1092,1081,1,0,0,0,1092,1088,1,
  	0,0,0,1092,1089,1,0,0,0,1092,1090,1,0,0,0,1092,1091,1,0,0,0,1093,101,
  	1,0,0,0,1094,1097,3,104,52,0,1095,1097,3,106,53,0,1096,1094,1,0,0,0,1096,
  	1095,1,0,0,0,1097,103,1,0,0,0,1098,1099,5,94,0,0,1099,1100,5,157,0,0,
  	1100,1101,5,91,0,0,1101,1104,5,157,0,0,1102,1105,5,143,0,0,1103,1105,
  	3,286,143,0,1104,1102,1,0,0,0,1104,1103,1,0,0,0,1105,105,1,0,0,0,1106,
  	1107,5,90,0,0,1107,1108,5,157,0,0,1108,1109,3,286,143,0,1109,107,1,0,
  	0,0,1110,1111,3,110,55,0,1111,109,1,0,0,0,1112,1119,3,114,57,0,1113,1115,
  	5,157,0,0,1114,1113,1,0,0,0,1114,1115,1,0,0,0,1115,1116,1,0,0,0,1116,
  	1118,3,112,56,0,1117,1114,1,0,0,0,1118,1121,1,0,0,0,1119,1117,1,0,0,0,
  	1119,1120,1,0,0,0,1120,1134,1,0,0,0,1121,1119,1,0,0,0,1122,1124,3,148,
  	74,0,1123,1125,5,157,0,0,1124,1123,1,0,0,0,1124,1125,1,0,0,0,1125,1127,
  	1,0,0,0,1126,1122,1,0,0,0,1127,1128,1,0,0,0,1128,1126,1,0,0,0,1128,1129,
  	1,0,0,0,1129,1130,1,0,0,0,1130,1131,3,114,57,0,1131,1132,6,55,-1,0,1132,
  	1134,1,0,0,0,1133,1112,1,0,0,0,1133,1126,1,0,0,0,1134,111,1,0,0,0,1135,
  	1136,5,92,0,0,1136,1137,5,157,0,0,1137,1139,5,93,0,0,1138,1140,5,157,
  	0,0,1139,1138,1,0,0,0,1139,1140,1,0,0,0,1140,1141,1,0,0,0,1141,1148,3,
  	114,57,0,1142,1144,5,92,0,0,1143,1145,5,157,0,0,1144,1143,1,0,0,0,1144,
  	1145,1,0,0,0,1145,1146,1,0,0,0,1146,1148,3,114,57,0,1147,1135,1,0,0,0,
  	1147,1142,1,0,0,0,1148,113,1,0,0,0,1149,1152,3,116,58,0,1150,1152,3,118,
  	59,0,1151,1149,1,0,0,0,1151,1150,1,0,0,0,1152,115,1,0,0,0,1153,1155,3,
  	124,62,0,1154,1156,5,157,0,0,1155,1154,1,0,0,0,1155,1156,1,0,0,0,1156,
  	1158,1,0,0,0,1157,1153,1,0,0,0,1158,1161,1,0,0,0,1159,1157,1,0,0,0,1159,
  	1160,1,0,0,0,1160,1162,1,0,0,0,1161,1159,1,0,0,0,1162,1199,3,148,74,0,
  	1163,1165,3,124,62,0,1164,1166,5,157,0,0,1165,1164,1,0,0,0,1165,1166,
  	1,0,0,0,1166,1168,1,0,0,0,1167,1163,1,0,0,0,1168,1171,1,0,0,0,1169,1167,
  	1,0,0,0,1169,1170,1,0,0,0,1170,1172,1,0,0,0,1171,1169,1,0,0,0,1172,1179,
  	3,122,61,0,1173,1175,5,157,0,0,1174,1173,1,0,0,0,1174,1175,1,0,0,0,1175,
  	1176,1,0,0,0,1176,1178,3,122,61,0,1177,1174,1,0,0,0,1178,1181,1,0,0,0,
  	1179,1177,1,0,0,0,1179,1180,1,0,0,0,1180,1186,1,0,0,0,1181,1179,1,0,0,
  	0,1182,1184,5,157,0,0,1183,1182,1,0,0,0,1183,1184,1,0,0,0,1184,1185,1,
  	0,0,0,1185,1187,3,148,74,0,1186,1183,1,0,0,0,1186,1187,1,0,0,0,1187,1199,
  	1,0,0,0,1188,1190,3,124,62,0,1189,1191,5,157,0,0,1190,1189,1,0,0,0,1190,
  	1191,1,0,0,0,1191,1193,1,0,0,0,1192,1188,1,0,0,0,1193,1194,1,0,0,0,1194,
  	1192,1,0,0,0,1194,1195,1,0,0,0,1195,1196,1,0,0,0,1196,1197,6,58,-1,0,
  	1197,1199,1,0,0,0,1198,1159,1,0,0,0,1198,1169,1,0,0,0,1198,1192,1,0,0,
  	0,1199,117,1,0,0,0,1200,1202,3,120,60,0,1201,1203,5,157,0,0,1202,1201,
  	1,0,0,0,1202,1203,1,0,0,0,1203,1205,1,0,0,0,1204,1200,1,0,0,0,1205,1206,
  	1,0,0,0,1206,1204,1,0,0,0,1206,1207,1,0,0,0,1207,1208,1,0,0,0,1208,1209,
  	3,116,58,0,1209,119,1,0,0,0,1210,1212,3,124,62,0,1211,1213,5,157,0,0,
  	1212,1211,1,0,0,0,1212,1213,1,0,0,0,1213,1215,1,0,0,0,1214,1210,1,0,0,
  	0,1215,1218,1,0,0,0,1216,1214,1,0,0,0,1216,1217,1,0,0,0,1217,1225,1,0,
  	0,0,1218,1216,1,0,0,0,1219,1221,3,122,61,0,1220,1222,5,157,0,0,1221,1220,
  	1,0,0,0,1221,1222,1,0,0,0,1222,1224,1,0,0,0,1223,1219,1,0,0,0,1224,1227,
  	1,0,0,0,1225,1223,1,0,0,0,1225,1226,1,0,0,0,1226,1228,1,0,0,0,1227,1225,
  	1,0,0,0,1228,1229,3,146,73,0,1229,121,1,0,0,0,1230,1235,3,134,67,0,1231,
  	1235,3,136,68,0,1232,1235,3,140,70,0,1233,1235,3,144,72,0,1234,1230,1,
  	0,0,0,1234,1231,1,0,0,0,1234,1232,1,0,0,0,1234,1233,1,0,0,0,1235,123,
  	1,0,0,0,1236,1241,3,130,65,0,1237,1241,3,132,66,0,1238,1241,3,128,64,
  	0,1239,1241,3,126,63,0,1240,1236,1,0,0,0,1240,1237,1,0,0,0,1240,1238,
  	1,0,0,0,1240,1239,1,0,0,0,1241,125,1,0,0,0,1242,1260,5,94,0,0,1243,1244,
  	5,157,0,0,1244,1245,5,105,0,0,1245,1246,5,157,0,0,1246,1248,5,95,0,0,
  	1247,1249,5,157,0,0,1248,1247,1,0,0,0,1248,1249,1,0,0,0,1249,1250,1,0,
  	0,0,1250,1252,5,2,0,0,1251,1253,5,157,0,0,1252,1251,1,0,0,0,1252,1253,
  	1,0,0,0,1253,1254,1,0,0,0,1254,1256,3,82,41,0,1255,1257,5,157,0,0,1256,
  	1255,1,0,0,0,1256,1257,1,0,0,0,1257,1258,1,0,0,0,1258,1259,5,4,0,0,1259,
  	1261,1,0,0,0,1260,1243,1,0,0,0,1260,1261,1,0,0,0,1261,1262,1,0,0,0,1262,
  	1263,5,157,0,0,1263,1264,5,54,0,0,1264,1265,5,157,0,0,1265,1270,3,10,
  	5,0,1266,1268,5,157,0,0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,1269,
  	1,0,0,0,1269,1271,3,42,21,0,1270,1267,1,0,0,0,1270,1271,1,0,0,0,1271,
  	1276,1,0,0,0,1272,1274,5,157,0,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,
  	1274,1275,1,0,0,0,1275,1277,3,164,82,0,1276,1273,1,0,0,0,1276,1277,1,
  	0,0,0,1277,127,1,0,0,0,1278,1279,5,49,0,0,1279,1280,5,157,0,0,1280,1285,
  	3,268,134,0,1281,1283,5,157,0,0,1282,1281,1,0,0,0,1282,1283,1,0,0,0,1283,
  	1284,1,0,0,0,1284,1286,3,164,82,0,1285,1282,1,0,0,0,1285,1286,1,0,0,0,
  	1286,129,1,0,0,0,1287,1288,5,96,0,0,1288,1290,5,157,0,0,1289,1287,1,0,
  	0,0,1289,1290,1,0,0,0,1290,1291,1,0,0,0,1291,1293,5,97,0,0,1292,1294,
  	5,157,0,0,1293,1292,1,0,0,0,1293,1294,1,0,0,0,1294,1295,1,0,0,0,1295,
  	1300,3,166,83,0,1296,1298,5,157,0,0,1297,1296,1,0,0,0,1297,1298,1,0,0,
  	0,1298,1299,1,0,0,0,1299,1301,3,164,82,0,1300,1297,1,0,0,0,1300,1301,
  	1,0,0,0,1301,131,1,0,0,0,1302,1304,5,98,0,0,1303,1305,5,157,0,0,1304,
  	1303,1,0,0,0,1304,1305,1,0,0,0,1305,1306,1,0,0,0,1306,1307,3,206,103,
  	0,1307,1308,5,157,0,0,1308,1309,5,109,0,0,1309,1310,5,157,0,0,1310,1311,
  	3,286,143,0,1311,133,1,0,0,0,1312,1314,5,99,0,0,1313,1315,5,157,0,0,1314,
  	1313,1,0,0,0,1314,1315,1,0,0,0,1315,1316,1,0,0,0,1316,1317,3,166,83,0,
  	1317,135,1,0,0,0,1318,1320,5,100,0,0,1319,1321,5,157,0,0,1320,1319,1,
  	0,0,0,1320,1321,1,0,0,0,1321,1322,1,0,0,0,1322,1327,3,166,83,0,1323,1324,
  	5,157,0,0,1324,1326,3,138,69,0,1325,1323,1,0,0,0,1326,1329,1,0,0,0,1327,
  	1325,1,0,0,0,1327,1328,1,0,0,0,1328,137,1,0,0,0,1329,1327,1,0,0,0,1330,
  	1331,5,101,0,0,1331,1332,5,157,0,0,1332,1333,5,97,0,0,1333,1334,5,157,
  	0,0,1334,1341,3,140,70,0,1335,1336,5,101,0,0,1336,1337,5,157,0,0,1337,
  	1338,5,99,0,0,1338,1339,5,157,0,0,1339,1341,3,140,70,0,1340,1330,1,0,
  	0,0,1340,1335,1,0,0,0,1341,139,1,0,0,0,1342,1344,5,102,0,0,1343,1345,
  	5,157,0,0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,1346,1,0,0,0,1346,
  	1357,3,142,71,0,1347,1349,5,157,0,0,1348,1347,1,0,0,0,1348,1349,1,0,0,
  	0,1349,1350,1,0,0,0,1350,1352,5,3,0,0,1351,1353,5,157,0,0,1352,1351,1,
  	0,0,0,1352,1353,1,0,0,0,1353,1354,1,0,0,0,1354,1356,3,142,71,0,1355,1348,
  	1,0,0,0,1356,1359,1,0,0,0,1357,1355,1,0,0,0,1357,1358,1,0,0,0,1358,141,
  	1,0,0,0,1359,1357,1,0,0,0,1360,1362,3,292,146,0,1361,1363,5,157,0,0,1362,
  	1361,1,0,0,0,1362,1363,1,0,0,0,1363,1364,1,0,0,0,1364,1366,5,6,0,0,1365,
  	1367,5,157,0,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,1368,1,0,0,0,
  	1368,1369,3,206,103,0,1369,143,1,0,0,0,1370,1371,5,103,0,0,1371,1373,
  	5,157,0,0,1372,1370,1,0,0,0,1372,1373,1,0,0,0,1373,1374,1,0,0,0,1374,
  	1376,5,104,0,0,1375,1377,5,157,0,0,1376,1375,1,0,0,0,1376,1377,1,0,0,
  	0,1377,1378,1,0,0,0,1378,1389,3,206,103,0,1379,1381,5,157,0,0,1380,1379,
  	1,0,0,0,1380,1381,1,0,0,0,1381,1382,1,0,0,0,1382,1384,5,3,0,0,1383,1385,
  	5,157,0,0,1384,1383,1,0,0,0,1384,1385,1,0,0,0,1385,1386,1,0,0,0,1386,
  	1388,3,206,103,0,1387,1380,1,0,0,0,1388,1391,1,0,0,0,1389,1387,1,0,0,
  	0,1389,1390,1,0,0,0,1390,145,1,0,0,0,1391,1389,1,0,0,0,1392,1393,5,105,
  	0,0,1393,1398,3,150,75,0,1394,1396,5,157,0,0,1395,1394,1,0,0,0,1395,1396,
  	1,0,0,0,1396,1397,1,0,0,0,1397,1399,3,164,82,0,1398,1395,1,0,0,0,1398,
  	1399,1,0,0,0,1399,147,1,0,0,0,1400,1401,5,106,0,0,1401,1402,3,150,75,
  	0,1402,149,1,0,0,0,1403,1405,5,157,0,0,1404,1403,1,0,0,0,1404,1405,1,
  	0,0,0,1405,1406,1,0,0,0,1406,1408,5,107,0,0,1407,1404,1,0,0,0,1407,1408,
  	1,0,0,0,1408,1409,1,0,0,0,1409,1410,5,157,0,0,1410,1413,3,152,76,0,1411,
  	1412,5,157,0,0,1412,1414,3,156,78,0,1413,1411,1,0,0,0,1413,1414,1,0,0,
  	0,1414,1417,1,0,0,0,1415,1416,5,157,0,0,1416,1418,3,158,79,0,1417,1415,
  	1,0,0,0,1417,1418,1,0,0,0,1418,1421,1,0,0,0,1419,1420,5,157,0,0,1420,
  	1422,3,160,80,0,1421,1419,1,0,0,0,1421,1422,1,0,0,0,1422,151,1,0,0,0,
  	1423,1434,5,108,0,0,1424,1426,5,157,0,0,1425,1424,1,0,0,0,1425,1426,1,
  	0,0,0,1426,1427,1,0,0,0,1427,1429,5,3,0,0,1428,1430,5,157,0,0,1429,1428,
  	1,0,0,0,1429,1430,1,0,0,0,1430,1431,1,0,0,0,1431,1433,3,154,77,0,1432,
  	1425,1,0,0,0,1433,1436,1,0,0,0,1434,1432,1,0,0,0,1434,1435,1,0,0,0,1435,
  	1452,1,0,0,0,1436,1434,1,0,0,0,1437,1448,3,154,77,0,1438,1440,5,157,0,
  	0,1439,1438,1,0,0,0,1439,1440,1,0,0,0,1440,1441,1,0,0,0,1441,1443,5,3,
  	0,0,1442,1444,5,157,0,0,1443,1442,1,0,0,0,1443,1444,1,0,0,0,1444,1445,
  	1,0,0,0,1445,1447,3,154,77,0,1446,1439,1,0,0,0,1447,1450,1,0,0,0,1448,
  	1446,1,0,0,0,1448,1449,1,0,0,0,1449,1452,1,0,0,0,1450,1448,1,0,0,0,1451,
  	1423,1,0,0,0,1451,1437,1,0,0,0,1452,153,1,0,0,0,1453,1454,3,206,103,0,
  	1454,1455,5,157,0,0,1455,1456,5,109,0,0,1456,1457,5,157,0,0,1457,1458,
  	3,286,143,0,1458,1461,1,0,0,0,1459,1461,3,206,103,0,1460,1453,1,0,0,0,
  	1460,1459,1,0,0,0,1461,155,1,0,0,0,1462,1463,5,110,0,0,1463,1464,5,157,
  	0,0,1464,1465,5,111,0,0,1465,1466,5,157,0,0,1466,1474,3,162,81,0,1467,
  	1469,5,3,0,0,1468,1470,5,157,0,0,1469,1468,1,0,0,0,1469,1470,1,0,0,0,
  	1470,1471,1,0,0,0,1471,1473,3,162,81,0,1472,1467,1,0,0,0,1473,1476,1,
  	0,0,0,1474,1472,1,0,0,0,1474,1475,1,0,0,0,1475,157,1,0,0,0,1476,1474,
  	1,0,0,0,1477,1478,5,112,0,0,1478,1479,5,157,0,0,1479,1480,3,206,103,0,
  	1480,159,1,0,0,0,1481,1482,5,113,0,0,1482,1483,5,157,0,0,1483,1484,3,
  	206,103,0,1484,161,1,0,0,0,1485,1490,3,206,103,0,1486,1488,5,157,0,0,
  	1487,1486,1,0,0,0,1487,1488,1,0,0,0,1488,1489,1,0,0,0,1489,1491,7,1,0,
  	0,1490,1487,1,0,0,0,1490,1491,1,0,0,0,1491,163,1,0,0,0,1492,1493,5,118,
  	0,0,1493,1494,5,157,0,0,1494,1495,3,206,103,0,1495,165,1,0,0,0,1496,1507,
  	3,168,84,0,1497,1499,5,157,0,0,1498,1497,1,0,0,0,1498,1499,1,0,0,0,1499,
  	1500,1,0,0,0,1500,1502,5,3,0,0,1501,1503,5,157,0,0,1502,1501,1,0,0,0,
  	1502,1503,1,0,0,0,1503,1504,1,0,0,0,1504,1506,3,168,84,0,1505,1498,1,
  	0,0,0,1506,1509,1,0,0,0,1507,1505,1,0,0,0,1507,1508,1,0,0,0,1508,167,
  	1,0,0,0,1509,1507,1,0,0,0,1510,1512,3,286,143,0,1511,1513,5,157,0,0,1512,
  	1511,1,0,0,0,1512,1513,1,0,0,0,1513,1514,1,0,0,0,1514,1516,5,6,0,0,1515,
  	1517,5,157,0,0,1516,1515,1,0,0,0,1516,1517,1,0,0,0,1517,1518,1,0,0,0,
  	1518,1519,3,170,85,0,1519,1522,1,0,0,0,1520,1522,3,170,85,0,1521,1510,
  	1,0,0,0,1521,1520,1,0,0,0,1522,169,1,0,0,0,1523,1524,3,172,86,0,1524,
  	171,1,0,0,0,1525,1532,3,174,87,0,1526,1528,5,157,0,0,1527,1526,1,0,0,
  	0,1527,1528,1,0,0,0,1528,1529,1,0,0,0,1529,1531,3,176,88,0,1530,1527,
  	1,0,0,0,1531,1534,1,0,0,0,1532,1530,1,0,0,0,1532,1533,1,0,0,0,1533,1540,
  	1,0,0,0,1534,1532,1,0,0,0,1535,1536,5,2,0,0,1536,1537,3,172,86,0,1537,
  	1538,5,4,0,0,1538,1540,1,0,0,0,1539,1525,1,0,0,0,1539,1535,1,0,0,0,1540,
  	173,1,0,0,0,1541,1543,5,2,0,0,1542,1544,5,157,0,0,1543,1542,1,0,0,0,1543,
  	1544,1,0,0,0,1544,1549,1,0,0,0,1545,1547,3,286,143,0,1546,1548,5,157,
  	0,0,1547,1546,1,0,0,0,1547,1548,1,0,0,0,1548,1550,1,0,0,0,1549,1545,1,
  	0,0,0,1549,1550,1,0,0,0,1550,1555,1,0,0,0,1551,1553,3,186,93,0,1552,1554,
  	5,157,0,0,1553,1552,1,0,0,0,1553,1554,1,0,0,0,1554,1556,1,0,0,0,1555,
  	1551,1,0,0,0,1555,1556,1,0,0,0,1556,1561,1,0,0,0,1557,1559,3,182,91,0,
  	1558,1560,5,157,0,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,1560,1562,1,0,
  	0,0,1561,1557,1,0,0,0,1561,1562,1,0,0,0,1562,1563,1,0,0,0,1563,1564,5,
  	4,0,0,1564,175,1,0,0,0,1565,1567,3,178,89,0,1566,1568,5,157,0,0,1567,
  	1566,1,0,0,0,1567,1568,1,0,0,0,1568,1569,1,0,0,0,1569,1570,3,174,87,0,
  	1570,177,1,0,0,0,1571,1573,3,306,153,0,1572,1574,5,157,0,0,1573,1572,
  	1,0,0,0,1573,1574,1,0,0,0,1574,1575,1,0,0,0,1575,1577,3,310,155,0,1576,
  	1578,5,157,0,0,1577,1576,1,0,0,0,1577,1578,1,0,0,0,1578,1580,1,0,0,0,
  	1579,1581,3,180,90,0,1580,1579,1,0,0,0,1580,1581,1,0,0,0,1581,1583,1,
  	0,0,0,1582,1584,5,157,0,0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,1585,
  	1,0,0,0,1585,1586,3,310,155,0,1586,1616,1,0,0,0,1587,1589,3,310,155,0,
  	1588,1590,5,157,0,0,1589,1588,1,0,0,0,1589,1590,1,0,0,0,1590,1592,1,0,
  	0,0,1591,1593,3,180,90,0,1592,1591,1,0,0,0,1592,1593,1,0,0,0,1593,1595,
  	1,0,0,0,1594,1596,5,157,0,0,1595,1594,1,0,0,0,1595,1596,1,0,0,0,1596,
  	1597,1,0,0,0,1597,1599,3,310,155,0,1598,1600,5,157,0,0,1599,1598,1,0,
  	0,0,1599,1600,1,0,0,0,1600,1601,1,0,0,0,1601,1602,3,308,154,0,1602,1616,
  	1,0,0,0,1603,1605,3,310,155,0,1604,1606,5,157,0,0,1605,1604,1,0,0,0,1605,
  	1606,1,0,0,0,1606,1608,1,0,0,0,1607,1609,3,180,90,0,1608,1607,1,0,0,0,
  	1608,1609,1,0,0,0,1609,1611,1,0,0,0,1610,1612,5,157,0,0,1611,1610,1,0,
  	0,0,1611,1612,1,0,0,0,1612,1613,1,0,0,0,1613,1614,3,310,155,0,1614,1616,
  	1,0,0,0,1615,1571,1,0,0,0,1615,1587,1,0,0,0,1615,1603,1,0,0,0,1616,179,
  	1,0,0,0,1617,1619,5,7,0,0,1618,1620,5,157,0,0,1619,1618,1,0,0,0,1619,
  	1620,1,0,0,0,1620,1625,1,0,0,0,1621,1623,3,286,143,0,1622,1624,5,157,
  	0,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,1624,1626,1,0,0,0,1625,1621,1,
  	0,0,0,1625,1626,1,0,0,0,1626,1631,1,0,0,0,1627,1629,3,184,92,0,1628,1630,
  	5,157,0,0,1629,1628,1,0,0,0,1629,1630,1,0,0,0,1630,1632,1,0,0,0,1631,
  	1627,1,0,0,0,1631,1632,1,0,0,0,1632,1637,1,0,0,0,1633,1635,3,190,95,0,
  	1634,1636,5,157,0,0,1635,1634,1,0,0,0,1635,1636,1,0,0,0,1636,1638,1,0,
  	0,0,1637,1633,1,0,0,0,1637,1638,1,0,0,0,1638,1643,1,0,0,0,1639,1641,3,
  	182,91,0,1640,1642,5,157,0,0,1641,1640,1,0,0,0,1641,1642,1,0,0,0,1642,
  	1644,1,0,0,0,1643,1639,1,0,0,0,1643,1644,1,0,0,0,1644,1645,1,0,0,0,1645,
  	1646,5,8,0,0,1646,181,1,0,0,0,1647,1649,5,9,0,0,1648,1650,5,157,0,0,1649,
  	1648,1,0,0,0,1649,1650,1,0,0,0,1650,1684,1,0,0,0,1651,1653,3,294,147,
  	0,1652,1654,5,157,0,0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,1655,1,
  	0,0,0,1655,1657,5,127,0,0,1656,1658,5,157,0,0,1657,1656,1,0,0,0,1657,
  	1658,1,0,0,0,1658,1659,1,0,0,0,1659,1661,3,206,103,0,1660,1662,5,157,
  	0,0,1661,1660,1,0,0,0,1661,1662,1,0,0,0,1662,1681,1,0,0,0,1663,1665,5,
  	3,0,0,1664,1666,5,157,0,0,1665,1664,1,0,0,0,1665,1666,1,0,0,0,1666,1667,
  	1,0,0,0,1667,1669,3,294,147,0,1668,1670,5,157,0,0,1669,1668,1,0,0,0,1669,
  	1670,1,0,0,0,1670,1671,1,0,0,0,1671,1673,5,127,0,0,1672,1674,5,157,0,
  	0,1673,1672,1,0,0,0,1673,1674,1,0,0,0,1674,1675,1,0,0,0,1675,1677,3,206,
  	103,0,1676,1678,5,157,0,0,1677,1676,1,0,0,0,1677,1678,1,0,0,0,1678,1680,
  	1,0,0,0,1679,1663,1,0,0,0,1680,1683,1,0,0,0,1681,1679,1,0,0,0,1681,1682,
  	1,0,0,0,1682,1685,1,0,0,0,1683,1681,1,0,0,0,1684,1651,1,0,0,0,1684,1685,
  	1,0,0,0,1685,1686,1,0,0,0,1686,1687,5,10,0,0,1687,183,1,0,0,0,1688,1690,
  	5,127,0,0,1689,1691,5,157,0,0,1690,1689,1,0,0,0,1690,1691,1,0,0,0,1691,
  	1692,1,0,0,0,1692,1706,3,204,102,0,1693,1695,5,157,0,0,1694,1693,1,0,
  	0,0,1694,1695,1,0,0,0,1695,1696,1,0,0,0,1696,1698,5,11,0,0,1697,1699,
  	5,127,0,0,1698,1697,1,0,0,0,1698,1699,1,0,0,0,1699,1701,1,0,0,0,1700,
  	1702,5,157,0,0,1701,1700,1,0,0,0,1701,1702,1,0,0,0,1702,1703,1,0,0,0,
  	1703,1705,3,204,102,0,1704,1694,1,0,0,0,1705,1708,1,0,0,0,1706,1704,1,
  	0,0,0,1706,1707,1,0,0,0,1707,185,1,0,0,0,1708,1706,1,0,0,0,1709,1716,
  	3,188,94,0,1710,1712,5,157,0,0,1711,1710,1,0,0,0,1711,1712,1,0,0,0,1712,
  	1713,1,0,0,0,1713,1715,3,188,94,0,1714,1711,1,0,0,0,1715,1718,1,0,0,0,
  	1716,1714,1,0,0,0,1716,1717,1,0,0,0,1717,187,1,0,0,0,1718,1716,1,0,0,
  	0,1719,1721,5,127,0,0,1720,1722,5,157,0,0,1721,1720,1,0,0,0,1721,1722,
  	1,0,0,0,1722,1723,1,0,0,0,1723,1724,3,202,101,0,1724,189,1,0,0,0,1725,
  	1727,5,108,0,0,1726,1728,5,157,0,0,1727,1726,1,0,0,0,1727,1728,1,0,0,
  	0,1728,1733,1,0,0,0,1729,1734,5,119,0,0,1730,1731,5,93,0,0,1731,1732,
  	5,157,0,0,1732,1734,5,119,0,0,1733,1729,1,0,0,0,1733,1730,1,0,0,0,1733,
  	1734,1,0,0,0,1734,1736,1,0,0,0,1735,1737,5,157,0,0,1736,1735,1,0,0,0,
  	1736,1737,1,0,0,0,1737,1752,1,0,0,0,1738,1740,3,198,99,0,1739,1738,1,
  	0,0,0,1739,1740,1,0,0,0,1740,1742,1,0,0,0,1741,1743,5,157,0,0,1742,1741,
  	1,0,0,0,1742,1743,1,0,0,0,1743,1744,1,0,0,0,1744,1746,5,12,0,0,1745,1747,
  	5,157,0,0,1746,1745,1,0,0,0,1746,1747,1,0,0,0,1747,1749,1,0,0,0,1748,
  	1750,3,200,100,0,1749,1748,1,0,0,0,1749,1750,1,0,0,0,1750,1753,1,0,0,
  	0,1751,1753,3,296,148,0,1752,1739,1,0,0,0,1752,1751,1,0,0,0,1752,1753,
  	1,0,0,0,1753,1758,1,0,0,0,1754,1756,5,157,0,0,1755,1754,1,0,0,0,1755,
  	1756,1,0,0,0,1756,1757,1,0,0,0,1757,1759,3,192,96,0,1758,1755,1,0,0,0,
  	1758,1759,1,0,0,0,1759,191,1,0,0,0,1760,1762,5,2,0,0,1761,1763,5,157,
  	0,0,1762,1761,1,0,0,0,1762,1763,1,0,0,0,1763,1764,1,0,0,0,1764,1766,3,
  	286,143,0,1765,1767,5,157,0,0,1766,1765,1,0,0,0,1766,1767,1,0,0,0,1767,
  	1768,1,0,0,0,1768,1770,5,3,0,0,1769,1771,5,157,0,0,1770,1769,1,0,0,0,
  	1770,1771,1,0,0,0,1771,1772,1,0,0,0,1772,1781,3,286,143,0,1773,1775,5,
  	157,0,0,1774,1773,1,0,0,0,1774,1775,1,0,0,0,1775,1776,1,0,0,0,1776,1778,
  	5,11,0,0,1777,1779,5,157,0,0,1778,1777,1,0,0,0,1778,1779,1,0,0,0,1779,
  	1780,1,0,0,0,1780,1782,3,164,82,0,1781,1774,1,0,0,0,1781,1782,1,0,0,0,
  	1782,1802,1,0,0,0,1783,1785,5,157,0,0,1784,1783,1,0,0,0,1784,1785,1,0,
  	0,0,1785,1786,1,0,0,0,1786,1788,5,11,0,0,1787,1789,5,157,0,0,1788,1787,
  	1,0,0,0,1788,1789,1,0,0,0,1789,1790,1,0,0,0,1790,1792,3,196,98,0,1791,
  	1793,5,157,0,0,1792,1791,1,0,0,0,1792,1793,1,0,0,0,1793,1794,1,0,0,0,
  	1794,1796,5,3,0,0,1795,1797,5,157,0,0,1796,1795,1,0,0,0,1796,1797,1,0,
  	0,0,1797,1798,1,0,0,0,1798,1800,3,194,97,0,1799,1801,5,157,0,0,1800,1799,
  	1,0,0,0,1800,1801,1,0,0,0,1801,1803,1,0,0,0,1802,1784,1,0,0,0,1802,1803,
  	1,0,0,0,1803,1804,1,0,0,0,1804,1805,5,4,0,0,1805,193,1,0,0,0,1806,1808,
  	5,9,0,0,1807,1809,5,157,0,0,1808,1807,1,0,0,0,1808,1809,1,0,0,0,1809,
  	1811,1,0,0,0,1810,1812,3,152,76,0,1811,1810,1,0,0,0,1811,1812,1,0,0,0,
  	1812,1814,1,0,0,0,1813,1815,5,157,0,0,1814,1813,1,0,0,0,1814,1815,1,0,
  	0,0,1815,1816,1,0,0,0,1816,1817,5,10,0,0,1817,195,1,0,0,0,1818,1820,5,
  	9,0,0,1819,1821,5,157,0,0,1820,1819,1,0,0,0,1820,1821,1,0,0,0,1821,1823,
  	1,0,0,0,1822,1824,3,152,76,0,1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,
  	1826,1,0,0,0,1825,1827,5,157,0,0,1826,1825,1,0,0,0,1826,1827,1,0,0,0,
  	1827,1828,1,0,0,0,1828,1829,5,10,0,0,1829,197,1,0,0,0,1830,1831,5,145,
  	0,0,1831,199,1,0,0,0,1832,1833,5,145,0,0,1833,201,1,0,0,0,1834,1835,3,
  	300,150,0,1835,203,1,0,0,0,1836,1837,3,300,150,0,1837,205,1,0,0,0,1838,
  	1839,3,208,104,0,1839,207,1,0,0,0,1840,1847,3,210,105,0,1841,1842,5,157,
  	0,0,1842,1843,5,120,0,0,1843,1844,5,157,0,0,1844,1846,3,210,105,0,1845,
  	1841,1,0,0,0,1846,1849,1,0,0,0,1847,1845,1,0,0,0,1847,1848,1,0,0,0,1848,
  	209,1,0,0,0,1849,1847,1,0,0,0,1850,1857,3,212,106,0,1851,1852,5,157,0,
  	0,1852,1853,5,121,0,0,1853,1854,5,157,0,0,1854,1856,3,212,106,0,1855,
  	1851,1,0,0,0,1856,1859,1,0,0,0,1857,1855,1,0,0,0,1857,1858,1,0,0,0,1858,
  	211,1,0,0,0,1859,1857,1,0,0,0,1860,1867,3,214,107,0,1861,1862,5,157,0,
  	0,1862,1863,5,122,0,0,1863,1864,5,157,0,0,1864,1866,3,214,107,0,1865,
  	1861,1,0,0,0,1866,1869,1,0,0,0,1867,1865,1,0,0,0,1867,1868,1,0,0,0,1868,
  	213,1,0,0,0,1869,1867,1,0,0,0,1870,1872,5,123,0,0,1871,1873,5,157,0,0,
  	1872,1871,1,0,0,0,1872,1873,1,0,0,0,1873,1875,1,0,0,0,1874,1870,1,0,0,
  	0,1875,1878,1,0,0,0,1876,1874,1,0,0,0,1876,1877,1,0,0,0,1877,1879,1,0,
  	0,0,1878,1876,1,0,0,0,1879,1880,3,216,108,0,1880,215,1,0,0,0,1881,1891,
  	3,220,110,0,1882,1884,5,157,0,0,1883,1882,1,0,0,0,1883,1884,1,0,0,0,1884,
  	1885,1,0,0,0,1885,1887,3,218,109,0,1886,1888,5,157,0,0,1887,1886,1,0,
  	0,0,1887,1888,1,0,0,0,1888,1889,1,0,0,0,1889,1890,3,220,110,0,1890,1892,
  	1,0,0,0,1891,1883,1,0,0,0,1891,1892,1,0,0,0,1892,1930,1,0,0,0,1893,1895,
  	3,220,110,0,1894,1896,5,157,0,0,1895,1894,1,0,0,0,1895,1896,1,0,0,0,1896,
  	1897,1,0,0,0,1897,1899,5,124,0,0,1898,1900,5,157,0,0,1899,1898,1,0,0,
  	0,1899,1900,1,0,0,0,1900,1901,1,0,0,0,1901,1902,3,220,110,0,1902,1903,
  	1,0,0,0,1903,1904,6,108,-1,0,1904,1930,1,0,0,0,1905,1907,3,220,110,0,
  	1906,1908,5,157,0,0,1907,1906,1,0,0,0,1907,1908,1,0,0,0,1908,1909,1,0,
  	0,0,1909,1911,3,218,109,0,1910,1912,5,157,0,0,1911,1910,1,0,0,0,1911,
  	1912,1,0,0,0,1912,1913,1,0,0,0,1913,1923,3,220,110,0,1914,1916,5,157,
  	0,0,1915,1914,1,0,0,0,1915,1916,1,0,0,0,1916,1917,1,0,0,0,1917,1919,3,
  	218,109,0,1918,1920,5,157,0,0,1919,1918,1,0,0,0,1919,1920,1,0,0,0,1920,
  	1921,1,0,0,0,1921,1922,3,220,110,0,1922,1924,1,0,0,0,1923,1915,1,0,0,
  	0,1924,1925,1,0,0,0,1925,1923,1,0,0,0,1925,1926,1,0,0,0,1926,1927,1,0,
  	0,0,1927,1928,6,108,-1,0,1928,1930,1,0,0,0,1929,1881,1,0,0,0,1929,1893,
  	1,0,0,0,1929,1905,1,0,0,0,1930,217,1,0,0,0,1931,1932,7,2,0,0,1932,219,
  	1,0,0,0,1933,1944,3,222,111,0,1934,1936,5,157,0,0,1935,1934,1,0,0,0,1935,
  	1936,1,0,0,0,1936,1937,1,0,0,0,1937,1939,5,11,0,0,1938,1940,5,157,0,0,
  	1939,1938,1,0,0,0,1939,1940,1,0,0,0,1940,1941,1,0,0,0,1941,1943,3,222,
  	111,0,1942,1935,1,0,0,0,1943,1946,1,0,0,0,1944,1942,1,0,0,0,1944,1945,
  	1,0,0,0,1945,221,1,0,0,0,1946,1944,1,0,0,0,1947,1958,3,224,112,0,1948,
  	1950,5,157,0,0,1949,1948,1,0,0,0,1949,1950,1,0,0,0,1950,1951,1,0,0,0,
  	1951,1953,5,18,0,0,1952,1954,5,157,0,0,1953,1952,1,0,0,0,1953,1954,1,
  	0,0,0,1954,1955,1,0,0,0,1955,1957,3,224,112,0,1956,1949,1,0,0,0,1957,
  	1960,1,0,0,0,1958,1956,1,0,0,0,1958,1959,1,0,0,0,1959,223,1,0,0,0,1960,
  	1958,1,0,0,0,1961,1973,3,228,114,0,1962,1964,5,157,0,0,1963,1962,1,0,
  	0,0,1963,1964,1,0,0,0,1964,1965,1,0,0,0,1965,1967,3,226,113,0,1966,1968,
  	5,157,0,0,1967,1966,1,0,0,0,1967,1968,1,0,0,0,1968,1969,1,0,0,0,1969,
  	1970,3,228,114,0,1970,1972,1,0,0,0,1971,1963,1,0,0,0,1972,1975,1,0,0,
  	0,1973,1971,1,0,0,0,1973,1974,1,0,0,0,1974,225,1,0,0,0,1975,1973,1,0,
  	0,0,1976,1977,7,3,0,0,1977,227,1,0,0,0,1978,1990,3,232,116,0,1979,1981,
  	5,157,0,0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,1982,1,0,0,0,1982,
  	1984,3,230,115,0,1983,1985,5,157,0,0,1984,1983,1,0,0,0,1984,1985,1,0,
  	0,0,1985,1986,1,0,0,0,1986,1987,3,232,116,0,1987,1989,1,0,0,0,1988,1980,
  	1,0,0,0,1989,1992,1,0,0,0,1990,1988,1,0,0,0,1990,1991,1,0,0,0,1991,229,
  	1,0,0,0,1992,1990,1,0,0,0,1993,1994,7,4,0,0,1994,231,1,0,0,0,1995,2007,
  	3,236,118,0,1996,1998,5,157,0,0,1997,1996,1,0,0,0,1997,1998,1,0,0,0,1998,
  	1999,1,0,0,0,1999,2001,3,234,117,0,2000,2002,5,157,0,0,2001,2000,1,0,
  	0,0,2001,2002,1,0,0,0,2002,2003,1,0,0,0,2003,2004,3,236,118,0,2004,2006,
  	1,0,0,0,2005,1997,1,0,0,0,2006,2009,1,0,0,0,2007,2005,1,0,0,0,2007,2008,
  	1,0,0,0,2008,233,1,0,0,0,2009,2007,1,0,0,0,2010,2011,7,5,0,0,2011,235,
  	1,0,0,0,2012,2023,3,238,119,0,2013,2015,5,157,0,0,2014,2013,1,0,0,0,2014,
  	2015,1,0,0,0,2015,2016,1,0,0,0,2016,2018,5,24,0,0,2017,2019,5,157,0,0,
  	2018,2017,1,0,0,0,2018,2019,1,0,0,0,2019,2020,1,0,0,0,2020,2022,3,238,
  	119,0,2021,2014,1,0,0,0,2022,2025,1,0,0,0,2023,2021,1,0,0,0,2023,2024,
  	1,0,0,0,2024,237,1,0,0,0,2025,2023,1,0,0,0,2026,2028,5,125,0,0,2027,2029,
  	5,157,0,0,2028,2027,1,0,0,0,2028,2029,1,0,0,0,2029,2031,1,0,0,0,2030,
  	2026,1,0,0,0,2031,2034,1,0,0,0,2032,2030,1,0,0,0,2032,2033,1,0,0,0,2033,
  	2035,1,0,0,0,2034,2032,1,0,0,0,2035,2040,3,240,120,0,2036,2038,5,157,
  	0,0,2037,2036,1,0,0,0,2037,2038,1,0,0,0,2038,2039,1,0,0,0,2039,2041,5,
  	126,0,0,2040,2037,1,0,0,0,2040,2041,1,0,0,0,2041,239,1,0,0,0,2042,2050,
  	3,250,125,0,2043,2051,3,244,122,0,2044,2046,3,242,121,0,2045,2044,1,0,
  	0,0,2046,2047,1,0,0,0,2047,2045,1,0,0,0,2047,2048,1,0,0,0,2048,2051,1,
  	0,0,0,2049,2051,3,248,124,0,2050,2043,1,0,0,0,2050,2045,1,0,0,0,2050,
  	2049,1,0,0,0,2050,2051,1,0,0,0,2051,241,1,0,0,0,2052,2053,5,157,0,0,2053,
  	2055,5,128,0,0,2054,2056,5,157,0,0,2055,2054,1,0,0,0,2055,2056,1,0,0,
  	0,2056,2057,1,0,0,0,2057,2072,3,250,125,0,2058,2059,5,7,0,0,2059,2060,
  	3,206,103,0,2060,2061,5,8,0,0,2061,2072,1,0,0,0,2062,2064,5,7,0,0,2063,
  	2065,3,206,103,0,2064,2063,1,0,0,0,2064,2065,1,0,0,0,2065,2066,1,0,0,
  	0,2066,2068,5,127,0,0,2067,2069,3,206,103,0,2068,2067,1,0,0,0,2068,2069,
  	1,0,0,0,2069,2070,1,0,0,0,2070,2072,5,8,0,0,2071,2052,1,0,0,0,2071,2058,
  	1,0,0,0,2071,2062,1,0,0,0,2072,243,1,0,0,0,2073,2085,3,246,123,0,2074,
  	2075,5,157,0,0,2075,2076,5,129,0,0,2076,2077,5,157,0,0,2077,2085,5,105,
  	0,0,2078,2079,5,157,0,0,2079,2080,5,130,0,0,2080,2081,5,157,0,0,2081,
  	2085,5,105,0,0,2082,2083,5,157,0,0,2083,2085,5,131,0,0,2084,2073,1,0,
  	0,0,2084,2074,1,0,0,0,2084,2078,1,0,0,0,2084,2082,1,0,0,0,2085,2087,1,
  	0,0,0,2086,2088,5,157,0,0,2087,2086,1,0,0,0,2087,2088,1,0,0,0,2088,2089,
  	1,0,0,0,2089,2090,3,250,125,0,2090,245,1,0,0,0,2091,2093,5,157,0,0,2092,
  	2091,1,0,0,0,2092,2093,1,0,0,0,2093,2094,1,0,0,0,2094,2095,5,25,0,0,2095,
  	247,1,0,0,0,2096,2097,5,157,0,0,2097,2098,5,132,0,0,2098,2099,5,157,0,
  	0,2099,2107,5,133,0,0,2100,2101,5,157,0,0,2101,2102,5,132,0,0,2102,2103,
  	5,157,0,0,2103,2104,5,123,0,0,2104,2105,5,157,0,0,2105,2107,5,133,0,0,
  	2106,2096,1,0,0,0,2106,2100,1,0,0,0,2107,249,1,0,0,0,2108,2115,3,252,
  	126,0,2109,2111,5,157,0,0,2110,2109,1,0,0,0,2110,2111,1,0,0,0,2111,2112,
  	1,0,0,0,2112,2114,3,280,140,0,2113,2110,1,0,0,0,2114,2117,1,0,0,0,2115,
  	2113,1,0,0,0,2115,2116,1,0,0,0,2116,251,1,0,0,0,2117,2115,1,0,0,0,2118,
  	2128,3,254,127,0,2119,2128,3,290,145,0,2120,2128,3,282,141,0,2121,2128,
  	3,266,133,0,2122,2128,3,268,134,0,2123,2128,3,274,137,0,2124,2128,3,276,
  	138,0,2125,2128,3,278,139,0,2126,2128,3,286,143,0,2127,2118,1,0,0,0,2127,
  	2119,1,0,0,0,2127,2120,1,0,0,0,2127,2121,1,0,0,0,2127,2122,1,0,0,0,2127,
  	2123,1,0,0,0,2127,2124,1,0,0,0,2127,2125,1,0,0,0,2127,2126,1,0,0,0,2128,
  	253,1,0,0,0,2129,2136,3,288,144,0,2130,2136,5,143,0,0,2131,2136,3,256,
  	128,0,2132,2136,5,133,0,0,2133,2136,3,258,129,0,2134,2136,3,262,131,0,
  	2135,2129,1,0,0,0,2135,2130,1,0,0,0,2135,2131,1,0,0,0,2135,2132,1,0,0,
  	0,2135,2133,1,0,0,0,2135,2134,1,0,0,0,2136,255,1,0,0,0,2137,2138,7,6,
  	0,0,2138,257,1,0,0,0,2139,2141,5,7,0,0,2140,2142,5,157,0,0,2141,2140,
  	1,0,0,0,2141,2142,1,0,0,0,2142,2156,1,0,0,0,2143,2145,3,206,103,0,2144,
  	2146,5,157,0,0,2145,2144,1,0,0,0,2145,2146,1,0,0,0,2146,2153,1,0,0,0,
  	2147,2149,3,260,130,0,2148,2150,5,157,0,0,2149,2148,1,0,0,0,2149,2150,
  	1,0,0,0,2150,2152,1,0,0,0,2151,2147,1,0,0,0,2152,2155,1,0,0,0,2153,2151,
  	1,0,0,0,2153,2154,1,0,0,0,2154,2157,1,0,0,0,2155,2153,1,0,0,0,2156,2143,
  	1,0,0,0,2156,2157,1,0,0,0,2157,2158,1,0,0,0,2158,2159,5,8,0,0,2159,259,
  	1,0,0,0,2160,2162,5,3,0,0,2161,2163,5,157,0,0,2162,2161,1,0,0,0,2162,
  	2163,1,0,0,0,2163,2165,1,0,0,0,2164,2166,3,206,103,0,2165,2164,1,0,0,
  	0,2165,2166,1,0,0,0,2166,261,1,0,0,0,2167,2169,5,9,0,0,2168,2170,5,157,
  	0,0,2169,2168,1,0,0,0,2169,2170,1,0,0,0,2170,2171,1,0,0,0,2171,2173,3,
  	264,132,0,2172,2174,5,157,0,0,2173,2172,1,0,0,0,2173,2174,1,0,0,0,2174,
  	2185,1,0,0,0,2175,2177,5,3,0,0,2176,2178,5,157,0,0,2177,2176,1,0,0,0,
  	2177,2178,1,0,0,0,2178,2179,1,0,0,0,2179,2181,3,264,132,0,2180,2182,5,
  	157,0,0,2181,2180,1,0,0,0,2181,2182,1,0,0,0,2182,2184,1,0,0,0,2183,2175,
  	1,0,0,0,2184,2187,1,0,0,0,2185,2183,1,0,0,0,2185,2186,1,0,0,0,2186,2188,
  	1,0,0,0,2187,2185,1,0,0,0,2188,2189,5,10,0,0,2189,263,1,0,0,0,2190,2193,
  	3,302,151,0,2191,2193,5,143,0,0,2192,2190,1,0,0,0,2192,2191,1,0,0,0,2193,
  	2195,1,0,0,0,2194,2196,5,157,0,0,2195,2194,1,0,0,0,2195,2196,1,0,0,0,
  	2196,2197,1,0,0,0,2197,2199,5,127,0,0,2198,2200,5,157,0,0,2199,2198,1,
  	0,0,0,2199,2200,1,0,0,0,2200,2201,1,0,0,0,2201,2202,3,206,103,0,2202,
  	265,1,0,0,0,2203,2205,5,2,0,0,2204,2206,5,157,0,0,2205,2204,1,0,0,0,2205,
  	2206,1,0,0,0,2206,2207,1,0,0,0,2207,2209,3,206,103,0,2208,2210,5,157,
  	0,0,2209,2208,1,0,0,0,2209,2210,1,0,0,0,2210,2211,1,0,0,0,2211,2212,5,
  	4,0,0,2212,267,1,0,0,0,2213,2215,5,136,0,0,2214,2216,5,157,0,0,2215,2214,
  	1,0,0,0,2215,2216,1,0,0,0,2216,2217,1,0,0,0,2217,2219,5,2,0,0,2218,2220,
  	5,157,0,0,2219,2218,1,0,0,0,2219,2220,1,0,0,0,2220,2221,1,0,0,0,2221,
  	2223,5,108,0,0,2222,2224,5,157,0,0,2223,2222,1,0,0,0,2223,2224,1,0,0,
  	0,2224,2225,1,0,0,0,2225,2262,5,4,0,0,2226,2228,3,270,135,0,2227,2229,
  	5,157,0,0,2228,2227,1,0,0,0,2228,2229,1,0,0,0,2229,2230,1,0,0,0,2230,
  	2232,5,2,0,0,2231,2233,5,157,0,0,2232,2231,1,0,0,0,2232,2233,1,0,0,0,
  	2233,2238,1,0,0,0,2234,2236,5,107,0,0,2235,2237,5,157,0,0,2236,2235,1,
  	0,0,0,2236,2237,1,0,0,0,2237,2239,1,0,0,0,2238,2234,1,0,0,0,2238,2239,
  	1,0,0,0,2239,2257,1,0,0,0,2240,2242,3,272,136,0,2241,2243,5,157,0,0,2242,
  	2241,1,0,0,0,2242,2243,1,0,0,0,2243,2254,1,0,0,0,2244,2246,5,3,0,0,2245,
  	2247,5,157,0,0,2246,2245,1,0,0,0,2246,2247,1,0,0,0,2247,2248,1,0,0,0,
  	2248,2250,3,272,136,0,2249,2251,5,157,0,0,2250,2249,1,0,0,0,2250,2251,
  	1,0,0,0,2251,2253,1,0,0,0,2252,2244,1,0,0,0,2253,2256,1,0,0,0,2254,2252,
  	1,0,0,0,2254,2255,1,0,0,0,2255,2258,1,0,0,0,2256,2254,1,0,0,0,2257,2240,
  	1,0,0,0,2257,2258,1,0,0,0,2258,2259,1,0,0,0,2259,2260,5,4,0,0,2260,2262,
  	1,0,0,0,2261,2213,1,0,0,0,2261,2226,1,0,0,0,2262,269,1,0,0,0,2263,2264,
  	3,302,151,0,2264,271,1,0,0,0,2265,2267,3,302,151,0,2266,2268,5,157,0,
  	0,2267,2266,1,0,0,0,2267,2268,1,0,0,0,2268,2269,1,0,0,0,2269,2270,5,127,
  	0,0,2270,2272,5,6,0,0,2271,2273,5,157,0,0,2272,2271,1,0,0,0,2272,2273,
  	1,0,0,0,2273,2275,1,0,0,0,2274,2265,1,0,0,0,2274,2275,1,0,0,0,2275,2276,
  	1,0,0,0,2276,2277,3,206,103,0,2277,273,1,0,0,0,2278,2283,3,174,87,0,2279,
  	2281,5,157,0,0,2280,2279,1,0,0,0,2280,2281,1,0,0,0,2281,2282,1,0,0,0,
  	2282,2284,3,176,88,0,2283,2280,1,0,0,0,2284,2285,1,0,0,0,2285,2283,1,
  	0,0,0,2285,2286,1,0,0,0,2286,275,1,0,0,0,2287,2289,5,137,0,0,2288,2290,
  	5,157,0,0,2289,2288,1,0,0,0,2289,2290,1,0,0,0,2290,2291,1,0,0,0,2291,
  	2293,5,9,0,0,2292,2294,5,157,0,0,2293,2292,1,0,0,0,2293,2294,1,0,0,0,
  	2294,2295,1,0,0,0,2295,2297,5,97,0,0,2296,2298,5,157,0,0,2297,2296,1,
  	0,0,0,2297,2298,1,0,0,0,2298,2299,1,0,0,0,2299,2304,3,166,83,0,2300,2302,
  	5,157,0,0,2301,2300,1,0,0,0,2301,2302,1,0,0,0,2302,2303,1,0,0,0,2303,
  	2305,3,164,82,0,2304,2301,1,0,0,0,2304,2305,1,0,0,0,2305,2307,1,0,0,0,
  	2306,2308,5,157,0,0,2307,2306,1,0,0,0,2307,2308,1,0,0,0,2308,2309,1,0,
  	0,0,2309,2310,5,10,0,0,2310,277,1,0,0,0,2311,2313,5,136,0,0,2312,2314,
  	5,157,0,0,2313,2312,1,0,0,0,2313,2314,1,0,0,0,2314,2315,1,0,0,0,2315,
  	2317,5,9,0,0,2316,2318,5,157,0,0,2317,2316,1,0,0,0,2317,2318,1,0,0,0,
  	2318,2319,1,0,0,0,2319,2321,5,97,0,0,2320,2322,5,157,0,0,2321,2320,1,
  	0,0,0,2321,2322,1,0,0,0,2322,2323,1,0,0,0,2323,2328,3,166,83,0,2324,2326,
  	5,157,0,0,2325,2324,1,0,0,0,2325,2326,1,0,0,0,2326,2327,1,0,0,0,2327,
  	2329,3,164,82,0,2328,2325,1,0,0,0,2328,2329,1,0,0,0,2329,2331,1,0,0,0,
  	2330,2332,5,157,0,0,2331,2330,1,0,0,0,2331,2332,1,0,0,0,2332,2333,1,0,
  	0,0,2333,2334,5,10,0,0,2334,279,1,0,0,0,2335,2337,5,5,0,0,2336,2338,5,
  	157,0,0,2337,2336,1,0,0,0,2337,2338,1,0,0,0,2338,2341,1,0,0,0,2339,2342,
  	3,294,147,0,2340,2342,5,108,0,0,2341,2339,1,0,0,0,2341,2340,1,0,0,0,2342,
  	281,1,0,0,0,2343,2348,5,138,0,0,2344,2346,5,157,0,0,2345,2344,1,0,0,0,
  	2345,2346,1,0,0,0,2346,2347,1,0,0,0,2347,2349,3,284,142,0,2348,2345,1,
  	0,0,0,2349,2350,1,0,0,0,2350,2348,1,0,0,0,2350,2351,1,0,0,0,2351,2366,
  	1,0,0,0,2352,2354,5,138,0,0,2353,2355,5,157,0,0,2354,2353,1,0,0,0,2354,
  	2355,1,0,0,0,2355,2356,1,0,0,0,2356,2361,3,206,103,0,2357,2359,5,157,
  	0,0,2358,2357,1,0,0,0,2358,2359,1,0,0,0,2359,2360,1,0,0,0,2360,2362,3,
  	284,142,0,2361,2358,1,0,0,0,2362,2363,1,0,0,0,2363,2361,1,0,0,0,2363,
  	2364,1,0,0,0,2364,2366,1,0,0,0,2365,2343,1,0,0,0,2365,2352,1,0,0,0,2366,
  	2375,1,0,0,0,2367,2369,5,157,0,0,2368,2367,1,0,0,0,2368,2369,1,0,0,0,
  	2369,2370,1,0,0,0,2370,2372,5,139,0,0,2371,2373,5,157,0,0,2372,2371,1,
  	0,0,0,2372,2373,1,0,0,0,2373,2374,1,0,0,0,2374,2376,3,206,103,0,2375,
  	2368,1,0,0,0,2375,2376,1,0,0,0,2376,2378,1,0,0,0,2377,2379,5,157,0,0,
  	2378,2377,1,0,0,0,2378,2379,1,0,0,0,2379,2380,1,0,0,0,2380,2381,5,140,
  	0,0,2381,283,1,0,0,0,2382,2384,5,141,0,0,2383,2385,5,157,0,0,2384,2383,
  	1,0,0,0,2384,2385,1,0,0,0,2385,2386,1,0,0,0,2386,2388,3,206,103,0,2387,
  	2389,5,157,0,0,2388,2387,1,0,0,0,2388,2389,1,0,0,0,2389,2390,1,0,0,0,
  	2390,2392,5,142,0,0,2391,2393,5,157,0,0,2392,2391,1,0,0,0,2392,2393,1,
  	0,0,0,2393,2394,1,0,0,0,2394,2395,3,206,103,0,2395,285,1,0,0,0,2396,2397,
  	3,302,151,0,2397,287,1,0,0,0,2398,2401,3,298,149,0,2399,2401,3,296,148,
  	0,2400,2398,1,0,0,0,2400,2399,1,0,0,0,2401,289,1,0,0,0,2402,2405,5,26,
  	0,0,2403,2406,3,302,151,0,2404,2406,5,145,0,0,2405,2403,1,0,0,0,2405,
  	2404,1,0,0,0,2406,291,1,0,0,0,2407,2409,3,252,126,0,2408,2410,5,157,0,
  	0,2409,2408,1,0,0,0,2409,2410,1,0,0,0,2410,2411,1,0,0,0,2411,2412,3,280,
  	140,0,2412,293,1,0,0,0,2413,2414,3,300,150,0,2414,295,1,0,0,0,2415,2416,
  	5,145,0,0,2416,297,1,0,0,0,2417,2418,5,152,0,0,2418,299,1,0,0,0,2419,
  	2420,3,302,151,0,2420,301,1,0,0,0,2421,2427,5,153,0,0,2422,2423,5,156,
  	0,0,2423,2427,6,151,-1,0,2424,2427,5,146,0,0,2425,2427,3,304,152,0,2426,
  	2421,1,0,0,0,2426,2422,1,0,0,0,2426,2424,1,0,0,0,2426,2425,1,0,0,0,2427,
  	303,1,0,0,0,2428,2429,7,7,0,0,2429,305,1,0,0,0,2430,2431,7,8,0,0,2431,
  	307,1,0,0,0,2432,2433,7,9,0,0,2433,309,1,0,0,0,2434,2435,7,10,0,0,2435,
  	311,1,0,0,0,414,314,318,323,327,332,335,339,342,365,371,375,378,384,387,
>>>>>>> cacacb962 (Support basic default values in creates and alter; squash for rebase)
  	391,395,399,404,408,415,419,427,431,441,445,449,454,467,471,479,482,490,
  	493,508,513,519,523,526,529,535,539,545,549,554,569,573,595,599,602,605,
  	608,611,615,620,624,634,638,643,648,653,659,663,667,672,679,683,687,690,
  	694,698,710,714,718,722,727,739,743,747,751,755,757,761,765,767,781,785,
  	789,793,798,801,805,809,811,815,819,821,848,856,862,865,875,878,886,889,
  	895,898,904,926,937,959,963,968,978,984,988,992,1000,1004,1008,1014,1018,
  	1022,1028,1032,1036,1040,1044,1048,1054,1061,1066,1072,1092,1096,1104,
  	1114,1119,1124,1128,1133,1139,1144,1147,1151,1155,1159,1165,1169,1174,
  	1179,1183,1186,1190,1194,1198,1202,1206,1212,1216,1221,1225,1234,1240,
  	1248,1252,1256,1260,1267,1270,1273,1276,1282,1285,1289,1293,1297,1300,
  	1304,1314,1320,1327,1340,1344,1348,1352,1357,1362,1366,1372,1376,1380,
  	1384,1389,1395,1398,1404,1407,1413,1417,1421,1425,1429,1434,1439,1443,
  	1448,1451,1460,1469,1474,1487,1490,1498,1502,1507,1512,1516,1521,1527,
  	1532,1539,1543,1547,1549,1553,1555,1559,1561,1567,1573,1577,1580,1583,
  	1589,1592,1595,1599,1605,1608,1611,1615,1619,1623,1625,1629,1631,1635,
  	1637,1641,1643,1649,1653,1657,1661,1665,1669,1673,1677,1681,1684,1690,
  	1694,1698,1701,1706,1711,1716,1721,1727,1733,1736,1739,1742,1746,1749,
  	1752,1755,1758,1762,1766,1770,1774,1778,1781,1784,1788,1792,1796,1800,
  	1802,1808,1811,1814,1820,1823,1826,1847,1857,1867,1872,1876,1883,1887,
  	1891,1895,1899,1907,1911,1915,1919,1925,1929,1935,1939,1944,1949,1953,
  	1958,1963,1967,1973,1980,1984,1990,1997,2001,2007,2014,2018,2023,2028,
  	2032,2037,2040,2047,2050,2055,2064,2068,2071,2084,2087,2092,2106,2110,
  	2115,2127,2135,2141,2145,2149,2153,2156,2162,2165,2169,2173,2177,2181,
  	2185,2192,2195,2199,2205,2209,2215,2219,2223,2228,2232,2236,2238,2242,
  	2246,2250,2254,2257,2261,2267,2272,2274,2280,2285,2289,2293,2297,2301,
  	2304,2307,2313,2317,2321,2325,2328,2331,2337,2341,2345,2350,2354,2358,
  	2363,2365,2368,2372,2375,2378,2384,2388,2392,2400,2405,2409,2426
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cypherParserStaticData = staticData.release();
}

}

CypherParser::CypherParser(TokenStream *input) : CypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CypherParser::CypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  CypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *cypherParserStaticData->atn, cypherParserStaticData->decisionToDFA, cypherParserStaticData->sharedContextCache, options);
}

CypherParser::~CypherParser() {
  delete _interpreter;
}

const atn::ATN& CypherParser::getATN() const {
  return *cypherParserStaticData->atn;
}

std::string CypherParser::getGrammarFileName() const {
  return "Cypher.g4";
}

const std::vector<std::string>& CypherParser::getRuleNames() const {
  return cypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& CypherParser::getVocabulary() const {
  return cypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CypherParser::getSerializedATN() const {
  return cypherParserStaticData->serializedATN;
}


//----------------- Ku_StatementsContext ------------------------------------------------------------------

CypherParser::Ku_StatementsContext::Ku_StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_CypherContext *> CypherParser::Ku_StatementsContext::oC_Cypher() {
  return getRuleContexts<CypherParser::OC_CypherContext>();
}

CypherParser::OC_CypherContext* CypherParser::Ku_StatementsContext::oC_Cypher(size_t i) {
  return getRuleContext<CypherParser::OC_CypherContext>(i);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::EOF() {
  return getToken(CypherParser::EOF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::Ku_StatementsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::Ku_StatementsContext::getRuleIndex() const {
  return CypherParser::RuleKu_Statements;
}


CypherParser::Ku_StatementsContext* CypherParser::ku_Statements() {
  Ku_StatementsContext *_localctx = _tracker.createInstance<Ku_StatementsContext>(_ctx, getState());
  enterRule(_localctx, 0, CypherParser::RuleKu_Statements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(312);
    oC_Cypher();
    setState(323);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(314);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(313);
          match(CypherParser::SP);
        }
        setState(316);
        match(CypherParser::T__0);
        setState(318);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
        case 1: {
          setState(317);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(320);
        oC_Cypher(); 
      }
      setState(325);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    }
    setState(327);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(326);
      match(CypherParser::SP);
    }
    setState(329);
    match(CypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CypherContext ------------------------------------------------------------------

CypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StatementContext* CypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<CypherParser::OC_StatementContext>(0);
}

CypherParser::OC_AnyCypherOptionContext* CypherParser::OC_CypherContext::oC_AnyCypherOption() {
  return getRuleContext<CypherParser::OC_AnyCypherOptionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CypherContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CypherContext::getRuleIndex() const {
  return CypherParser::RuleOC_Cypher;
}


CypherParser::OC_CypherContext* CypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 2, CypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(332);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::EXPLAIN

    || _la == CypherParser::PROFILE) {
      setState(331);
      oC_AnyCypherOption();
    }
    setState(335);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(334);
      match(CypherParser::SP);
    }

    setState(337);
    oC_Statement();
    setState(342);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(339);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(338);
        match(CypherParser::SP);
      }
      setState(341);
      match(CypherParser::T__0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

CypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_QueryContext* CypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

CypherParser::KU_CreateNodeTableContext* CypherParser::OC_StatementContext::kU_CreateNodeTable() {
  return getRuleContext<CypherParser::KU_CreateNodeTableContext>(0);
}

CypherParser::KU_CreateRelTableContext* CypherParser::OC_StatementContext::kU_CreateRelTable() {
  return getRuleContext<CypherParser::KU_CreateRelTableContext>(0);
}

CypherParser::KU_CreateRelTableGroupContext* CypherParser::OC_StatementContext::kU_CreateRelTableGroup() {
  return getRuleContext<CypherParser::KU_CreateRelTableGroupContext>(0);
}

CypherParser::KU_CreateRdfGraphContext* CypherParser::OC_StatementContext::kU_CreateRdfGraph() {
  return getRuleContext<CypherParser::KU_CreateRdfGraphContext>(0);
}

CypherParser::KU_CreateSequenceContext* CypherParser::OC_StatementContext::kU_CreateSequence() {
  return getRuleContext<CypherParser::KU_CreateSequenceContext>(0);
}

CypherParser::KU_DropContext* CypherParser::OC_StatementContext::kU_Drop() {
  return getRuleContext<CypherParser::KU_DropContext>(0);
}

CypherParser::KU_AlterTableContext* CypherParser::OC_StatementContext::kU_AlterTable() {
  return getRuleContext<CypherParser::KU_AlterTableContext>(0);
}

CypherParser::KU_CopyFromContext* CypherParser::OC_StatementContext::kU_CopyFrom() {
  return getRuleContext<CypherParser::KU_CopyFromContext>(0);
}

CypherParser::KU_CopyFromByColumnContext* CypherParser::OC_StatementContext::kU_CopyFromByColumn() {
  return getRuleContext<CypherParser::KU_CopyFromByColumnContext>(0);
}

CypherParser::KU_CopyTOContext* CypherParser::OC_StatementContext::kU_CopyTO() {
  return getRuleContext<CypherParser::KU_CopyTOContext>(0);
}

CypherParser::KU_StandaloneCallContext* CypherParser::OC_StatementContext::kU_StandaloneCall() {
  return getRuleContext<CypherParser::KU_StandaloneCallContext>(0);
}

CypherParser::KU_CreateMacroContext* CypherParser::OC_StatementContext::kU_CreateMacro() {
  return getRuleContext<CypherParser::KU_CreateMacroContext>(0);
}

CypherParser::KU_CommentOnContext* CypherParser::OC_StatementContext::kU_CommentOn() {
  return getRuleContext<CypherParser::KU_CommentOnContext>(0);
}

CypherParser::KU_TransactionContext* CypherParser::OC_StatementContext::kU_Transaction() {
  return getRuleContext<CypherParser::KU_TransactionContext>(0);
}

CypherParser::KU_ExtensionContext* CypherParser::OC_StatementContext::kU_Extension() {
  return getRuleContext<CypherParser::KU_ExtensionContext>(0);
}

CypherParser::KU_ExportDatabaseContext* CypherParser::OC_StatementContext::kU_ExportDatabase() {
  return getRuleContext<CypherParser::KU_ExportDatabaseContext>(0);
}

CypherParser::KU_ImportDatabaseContext* CypherParser::OC_StatementContext::kU_ImportDatabase() {
  return getRuleContext<CypherParser::KU_ImportDatabaseContext>(0);
}

CypherParser::KU_AttachDatabaseContext* CypherParser::OC_StatementContext::kU_AttachDatabase() {
  return getRuleContext<CypherParser::KU_AttachDatabaseContext>(0);
}

CypherParser::KU_DetachDatabaseContext* CypherParser::OC_StatementContext::kU_DetachDatabase() {
  return getRuleContext<CypherParser::KU_DetachDatabaseContext>(0);
}

CypherParser::KU_UseDatabaseContext* CypherParser::OC_StatementContext::kU_UseDatabase() {
  return getRuleContext<CypherParser::KU_UseDatabaseContext>(0);
}


size_t CypherParser::OC_StatementContext::getRuleIndex() const {
  return CypherParser::RuleOC_Statement;
}


CypherParser::OC_StatementContext* CypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, CypherParser::RuleOC_Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(365);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(344);
      oC_Query();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(345);
      kU_CreateNodeTable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(346);
      kU_CreateRelTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(347);
      kU_CreateRelTableGroup();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(348);
      kU_CreateRdfGraph();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(349);
      kU_CreateSequence();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(350);
      kU_Drop();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(351);
      kU_AlterTable();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(352);
      kU_CopyFrom();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(353);
      kU_CopyFromByColumn();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(354);
      kU_CopyTO();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(355);
      kU_StandaloneCall();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(356);
      kU_CreateMacro();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(357);
      kU_CommentOn();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(358);
      kU_Transaction();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(359);
      kU_Extension();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(360);
      kU_ExportDatabase();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(361);
      kU_ImportDatabase();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(362);
      kU_AttachDatabase();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(363);
      kU_DetachDatabase();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(364);
      kU_UseDatabase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromContext ------------------------------------------------------------------

CypherParser::KU_CopyFromContext::KU_CopyFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_CopyFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::KU_ColumnNamesContext* CypherParser::KU_CopyFromContext::kU_ColumnNames() {
  return getRuleContext<CypherParser::KU_ColumnNamesContext>(0);
}


size_t CypherParser::KU_CopyFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFrom;
}


CypherParser::KU_CopyFromContext* CypherParser::kU_CopyFrom() {
  KU_CopyFromContext *_localctx = _tracker.createInstance<KU_CopyFromContext>(_ctx, getState());
  enterRule(_localctx, 6, CypherParser::RuleKU_CopyFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(367);
    match(CypherParser::COPY);
    setState(368);
    match(CypherParser::SP);
    setState(369);
    oC_SchemaName();
    setState(378);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(371);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(370);
        match(CypherParser::SP);
      }
      setState(373);
      kU_ColumnNames();
      setState(375);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(374);
        match(CypherParser::SP);
      }
      break;
    }

    case 2: {
      setState(377);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(380);
    match(CypherParser::FROM);
    setState(381);
    match(CypherParser::SP);
    setState(382);
    kU_ScanSource();
    setState(387);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      setState(384);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(383);
        match(CypherParser::SP);
      }
      setState(386);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnNamesContext ------------------------------------------------------------------

CypherParser::KU_ColumnNamesContext::KU_ColumnNamesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_ColumnNamesContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ColumnNamesContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ColumnNamesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ColumnNamesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ColumnNamesContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnNames;
}


CypherParser::KU_ColumnNamesContext* CypherParser::kU_ColumnNames() {
  KU_ColumnNamesContext *_localctx = _tracker.createInstance<KU_ColumnNamesContext>(_ctx, getState());
  enterRule(_localctx, 8, CypherParser::RuleKU_ColumnNames);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(389);
    match(CypherParser::T__1);
    setState(391);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(390);
      match(CypherParser::SP);
    }
    setState(393);
    oC_SchemaName();
    setState(404);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(395);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(394);
          match(CypherParser::SP);
        }
        setState(397);
        match(CypherParser::T__2);
        setState(399);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(398);
          match(CypherParser::SP);
        }
        setState(401);
        oC_SchemaName(); 
      }
      setState(406);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    }
    setState(408);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(407);
      match(CypherParser::SP);
    }
    setState(410);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ScanSourceContext ------------------------------------------------------------------

CypherParser::KU_ScanSourceContext::KU_ScanSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_FilePathsContext* CypherParser::KU_ScanSourceContext::kU_FilePaths() {
  return getRuleContext<CypherParser::KU_FilePathsContext>(0);
}

CypherParser::OC_QueryContext* CypherParser::KU_ScanSourceContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ScanSourceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ScanSourceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::KU_ScanSourceContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ScanSourceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_ScanSourceContext::getRuleIndex() const {
  return CypherParser::RuleKU_ScanSource;
}


CypherParser::KU_ScanSourceContext* CypherParser::kU_ScanSource() {
  KU_ScanSourceContext *_localctx = _tracker.createInstance<KU_ScanSourceContext>(_ctx, getState());
  enterRule(_localctx, 10, CypherParser::RuleKU_ScanSource);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(431);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(412);
      kU_FilePaths();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(413);
      match(CypherParser::T__1);
      setState(415);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(414);
        match(CypherParser::SP);
      }
      setState(417);
      oC_Query();
      setState(419);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(418);
        match(CypherParser::SP);
      }
      setState(421);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(423);
      oC_Variable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(424);
      oC_Variable();
      setState(425);
      match(CypherParser::T__4);
      setState(427);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(426);
        match(CypherParser::SP);
      }
      setState(429);
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromByColumnContext ------------------------------------------------------------------

CypherParser::KU_CopyFromByColumnContext::KU_CopyFromByColumnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromByColumnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COLUMN() {
  return getToken(CypherParser::COLUMN, 0);
}


size_t CypherParser::KU_CopyFromByColumnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFromByColumn;
}


CypherParser::KU_CopyFromByColumnContext* CypherParser::kU_CopyFromByColumn() {
  KU_CopyFromByColumnContext *_localctx = _tracker.createInstance<KU_CopyFromByColumnContext>(_ctx, getState());
  enterRule(_localctx, 12, CypherParser::RuleKU_CopyFromByColumn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(433);
    match(CypherParser::COPY);
    setState(434);
    match(CypherParser::SP);
    setState(435);
    oC_SchemaName();
    setState(436);
    match(CypherParser::SP);
    setState(437);
    match(CypherParser::FROM);
    setState(438);
    match(CypherParser::SP);
    setState(439);
    match(CypherParser::T__1);
    setState(441);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(440);
      match(CypherParser::SP);
    }
    setState(443);
    match(CypherParser::StringLiteral);
    setState(454);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
      setState(445);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(444);
        match(CypherParser::SP);
      }
      setState(447);
      match(CypherParser::T__2);
      setState(449);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(448);
        match(CypherParser::SP);
      }
      setState(451);
      match(CypherParser::StringLiteral);
      setState(456);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(457);
    match(CypherParser::T__3);
    setState(458);
    match(CypherParser::SP);
    setState(459);
    match(CypherParser::BY);
    setState(460);
    match(CypherParser::SP);
    setState(461);
    match(CypherParser::COLUMN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyTOContext ------------------------------------------------------------------

CypherParser::KU_CopyTOContext::KU_CopyTOContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyTOContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_QueryContext* CypherParser::KU_CopyTOContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::TO() {
  return getToken(CypherParser::TO, 0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyTOContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_CopyTOContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyTO;
}


CypherParser::KU_CopyTOContext* CypherParser::kU_CopyTO() {
  KU_CopyTOContext *_localctx = _tracker.createInstance<KU_CopyTOContext>(_ctx, getState());
  enterRule(_localctx, 14, CypherParser::RuleKU_CopyTO);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(463);
    match(CypherParser::COPY);
    setState(464);
    match(CypherParser::SP);
    setState(465);
    match(CypherParser::T__1);
    setState(467);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(466);
      match(CypherParser::SP);
    }
    setState(469);
    oC_Query();
    setState(471);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(470);
      match(CypherParser::SP);
    }
    setState(473);
    match(CypherParser::T__3);
    setState(474);
    match(CypherParser::SP);
    setState(475);
    match(CypherParser::TO);
    setState(476);
    match(CypherParser::SP);
    setState(477);
    match(CypherParser::StringLiteral);
    setState(482);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      setState(479);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(478);
        match(CypherParser::SP);
      }
      setState(481);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ExportDatabaseContext::KU_ExportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ExportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_ExportDatabaseContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_ExportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ExportDatabase;
}


CypherParser::KU_ExportDatabaseContext* CypherParser::kU_ExportDatabase() {
  KU_ExportDatabaseContext *_localctx = _tracker.createInstance<KU_ExportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 16, CypherParser::RuleKU_ExportDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(484);
    match(CypherParser::EXPORT);
    setState(485);
    match(CypherParser::SP);
    setState(486);
    match(CypherParser::DATABASE);
    setState(487);
    match(CypherParser::SP);
    setState(488);
    match(CypherParser::StringLiteral);
    setState(493);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      setState(490);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(489);
        match(CypherParser::SP);
      }
      setState(492);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ImportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ImportDatabaseContext::KU_ImportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ImportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_ImportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ImportDatabase;
}


CypherParser::KU_ImportDatabaseContext* CypherParser::kU_ImportDatabase() {
  KU_ImportDatabaseContext *_localctx = _tracker.createInstance<KU_ImportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 18, CypherParser::RuleKU_ImportDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(495);
    match(CypherParser::IMPORT);
    setState(496);
    match(CypherParser::SP);
    setState(497);
    match(CypherParser::DATABASE);
    setState(498);
    match(CypherParser::SP);
    setState(499);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AttachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_AttachDatabaseContext::KU_AttachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::ATTACH() {
  return getToken(CypherParser::ATTACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AttachDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::DBTYPE() {
  return getToken(CypherParser::DBTYPE, 0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_AttachDatabaseContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AttachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_AttachDatabaseContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}


size_t CypherParser::KU_AttachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_AttachDatabase;
}


CypherParser::KU_AttachDatabaseContext* CypherParser::kU_AttachDatabase() {
  KU_AttachDatabaseContext *_localctx = _tracker.createInstance<KU_AttachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 20, CypherParser::RuleKU_AttachDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(501);
    match(CypherParser::ATTACH);
    setState(502);
    match(CypherParser::SP);
    setState(503);
    match(CypherParser::StringLiteral);
    setState(508);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(504);
      match(CypherParser::SP);
      setState(505);
      match(CypherParser::AS);
      setState(506);
      match(CypherParser::SP);
      setState(507);
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
    setState(510);
    match(CypherParser::SP);
    setState(511);
    match(CypherParser::T__1);
    setState(513);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(512);
      match(CypherParser::SP);
    }
    setState(515);
    match(CypherParser::DBTYPE);
    setState(516);
    match(CypherParser::SP);
    setState(517);
    oC_SymbolicName();
    setState(526);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      setState(519);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(518);
        match(CypherParser::SP);
      }
      setState(521);
      match(CypherParser::T__2);
      setState(523);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(522);
        match(CypherParser::SP);
      }
      setState(525);
      kU_Options();
      break;
    }

    default:
      break;
    }
    setState(529);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(528);
      match(CypherParser::SP);
    }
    setState(531);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionContext ------------------------------------------------------------------

CypherParser::KU_OptionContext::KU_OptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_OptionContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_OptionContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Option;
}


CypherParser::KU_OptionContext* CypherParser::kU_Option() {
  KU_OptionContext *_localctx = _tracker.createInstance<KU_OptionContext>(_ctx, getState());
  enterRule(_localctx, 22, CypherParser::RuleKU_Option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(533);
    oC_SymbolicName();
    setState(535);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(534);
      match(CypherParser::SP);
    }
    setState(537);
    match(CypherParser::T__5);
    setState(539);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(538);
      match(CypherParser::SP);
    }
    setState(541);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionsContext ------------------------------------------------------------------

CypherParser::KU_OptionsContext::KU_OptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_OptionContext *> CypherParser::KU_OptionsContext::kU_Option() {
  return getRuleContexts<CypherParser::KU_OptionContext>();
}

CypherParser::KU_OptionContext* CypherParser::KU_OptionsContext::kU_Option(size_t i) {
  return getRuleContext<CypherParser::KU_OptionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_Options;
}


CypherParser::KU_OptionsContext* CypherParser::kU_Options() {
  KU_OptionsContext *_localctx = _tracker.createInstance<KU_OptionsContext>(_ctx, getState());
  enterRule(_localctx, 24, CypherParser::RuleKU_Options);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(543);
    kU_Option();
    setState(554);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(545);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(544);
          match(CypherParser::SP);
        }
        setState(547);
        match(CypherParser::T__2);
        setState(549);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(548);
          match(CypherParser::SP);
        }
        setState(551);
        kU_Option(); 
      }
      setState(556);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DetachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_DetachDatabaseContext::KU_DetachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DetachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_DetachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_DetachDatabase;
}


CypherParser::KU_DetachDatabaseContext* CypherParser::kU_DetachDatabase() {
  KU_DetachDatabaseContext *_localctx = _tracker.createInstance<KU_DetachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 26, CypherParser::RuleKU_DetachDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(557);
    match(CypherParser::DETACH);
    setState(558);
    match(CypherParser::SP);
    setState(559);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_UseDatabaseContext ------------------------------------------------------------------

CypherParser::KU_UseDatabaseContext::KU_UseDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_UseDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_UseDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_UseDatabase;
}


CypherParser::KU_UseDatabaseContext* CypherParser::kU_UseDatabase() {
  KU_UseDatabaseContext *_localctx = _tracker.createInstance<KU_UseDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 28, CypherParser::RuleKU_UseDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(561);
    match(CypherParser::USE);
    setState(562);
    match(CypherParser::SP);
    setState(563);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StandaloneCallContext ------------------------------------------------------------------

CypherParser::KU_StandaloneCallContext::KU_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StandaloneCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StandaloneCallContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StandaloneCallContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_StandaloneCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_StandaloneCall;
}


CypherParser::KU_StandaloneCallContext* CypherParser::kU_StandaloneCall() {
  KU_StandaloneCallContext *_localctx = _tracker.createInstance<KU_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 30, CypherParser::RuleKU_StandaloneCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(565);
    match(CypherParser::CALL);
    setState(566);
    match(CypherParser::SP);
    setState(567);
    oC_SymbolicName();
    setState(569);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(568);
      match(CypherParser::SP);
    }
    setState(571);
    match(CypherParser::T__5);
    setState(573);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(572);
      match(CypherParser::SP);
    }
    setState(575);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CommentOnContext ------------------------------------------------------------------

CypherParser::KU_CommentOnContext::KU_CommentOnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::COMMENT_() {
  return getToken(CypherParser::COMMENT_, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CommentOnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::ON() {
  return getToken(CypherParser::ON, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CommentOnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_CommentOnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CommentOn;
}


CypherParser::KU_CommentOnContext* CypherParser::kU_CommentOn() {
  KU_CommentOnContext *_localctx = _tracker.createInstance<KU_CommentOnContext>(_ctx, getState());
  enterRule(_localctx, 32, CypherParser::RuleKU_CommentOn);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(577);
    match(CypherParser::COMMENT_);
    setState(578);
    match(CypherParser::SP);
    setState(579);
    match(CypherParser::ON);
    setState(580);
    match(CypherParser::SP);
    setState(581);
    match(CypherParser::TABLE);
    setState(582);
    match(CypherParser::SP);
    setState(583);
    oC_SchemaName();
    setState(584);
    match(CypherParser::SP);
    setState(585);
    match(CypherParser::IS);
    setState(586);
    match(CypherParser::SP);
    setState(587);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateMacroContext ------------------------------------------------------------------

CypherParser::KU_CreateMacroContext::KU_CreateMacroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateMacroContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::MACRO() {
  return getToken(CypherParser::MACRO, 0);
}

CypherParser::OC_FunctionNameContext* CypherParser::KU_CreateMacroContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_CreateMacroContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::KU_PositionalArgsContext* CypherParser::KU_CreateMacroContext::kU_PositionalArgs() {
  return getRuleContext<CypherParser::KU_PositionalArgsContext>(0);
}

std::vector<CypherParser::KU_DefaultArgContext *> CypherParser::KU_CreateMacroContext::kU_DefaultArg() {
  return getRuleContexts<CypherParser::KU_DefaultArgContext>();
}

CypherParser::KU_DefaultArgContext* CypherParser::KU_CreateMacroContext::kU_DefaultArg(size_t i) {
  return getRuleContext<CypherParser::KU_DefaultArgContext>(i);
}


size_t CypherParser::KU_CreateMacroContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateMacro;
}


CypherParser::KU_CreateMacroContext* CypherParser::kU_CreateMacro() {
  KU_CreateMacroContext *_localctx = _tracker.createInstance<KU_CreateMacroContext>(_ctx, getState());
  enterRule(_localctx, 34, CypherParser::RuleKU_CreateMacro);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(589);
    match(CypherParser::CREATE);
    setState(590);
    match(CypherParser::SP);
    setState(591);
    match(CypherParser::MACRO);
    setState(592);
    match(CypherParser::SP);
    setState(593);
    oC_FunctionName();
    setState(595);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(594);
      match(CypherParser::SP);
    }
    setState(597);
    match(CypherParser::T__1);
    setState(599);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      setState(598);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(602);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      setState(601);
      kU_PositionalArgs();
      break;
    }

    default:
      break;
    }
    setState(605);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      setState(604);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(608);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & 19868389125) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 302256393) != 0)) {
      setState(607);
      kU_DefaultArg();
    }
    setState(620);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(611);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(610);
          match(CypherParser::SP);
        }
        setState(613);
        match(CypherParser::T__2);
        setState(615);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(614);
          match(CypherParser::SP);
        }
        setState(617);
        kU_DefaultArg(); 
      }
      setState(622);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    }
    setState(624);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(623);
      match(CypherParser::SP);
    }
    setState(626);
    match(CypherParser::T__3);
    setState(627);
    match(CypherParser::SP);
    setState(628);
    match(CypherParser::AS);
    setState(629);
    match(CypherParser::SP);
    setState(630);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PositionalArgsContext ------------------------------------------------------------------

CypherParser::KU_PositionalArgsContext::KU_PositionalArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_PositionalArgsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_PositionalArgsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PositionalArgsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PositionalArgsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PositionalArgsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PositionalArgs;
}


CypherParser::KU_PositionalArgsContext* CypherParser::kU_PositionalArgs() {
  KU_PositionalArgsContext *_localctx = _tracker.createInstance<KU_PositionalArgsContext>(_ctx, getState());
  enterRule(_localctx, 36, CypherParser::RuleKU_PositionalArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(632);
    oC_SymbolicName();
    setState(643);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(634);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(633);
          match(CypherParser::SP);
        }
        setState(636);
        match(CypherParser::T__2);
        setState(638);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(637);
          match(CypherParser::SP);
        }
        setState(640);
        oC_SymbolicName(); 
      }
      setState(645);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultArgContext ------------------------------------------------------------------

CypherParser::KU_DefaultArgContext::KU_DefaultArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DefaultArgContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_DefaultArgContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DefaultArgContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_DefaultArgContext::getRuleIndex() const {
  return CypherParser::RuleKU_DefaultArg;
}


CypherParser::KU_DefaultArgContext* CypherParser::kU_DefaultArg() {
  KU_DefaultArgContext *_localctx = _tracker.createInstance<KU_DefaultArgContext>(_ctx, getState());
  enterRule(_localctx, 38, CypherParser::RuleKU_DefaultArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(646);
    oC_SymbolicName();
    setState(648);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(647);
      match(CypherParser::SP);
    }
    setState(650);
    match(CypherParser::COLON);
    setState(651);
    match(CypherParser::T__5);
    setState(653);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(652);
      match(CypherParser::SP);
    }
    setState(655);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FilePathsContext ------------------------------------------------------------------

CypherParser::KU_FilePathsContext::KU_FilePathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::GLOB() {
  return getToken(CypherParser::GLOB, 0);
}


size_t CypherParser::KU_FilePathsContext::getRuleIndex() const {
  return CypherParser::RuleKU_FilePaths;
}


CypherParser::KU_FilePathsContext* CypherParser::kU_FilePaths() {
  KU_FilePathsContext *_localctx = _tracker.createInstance<KU_FilePathsContext>(_ctx, getState());
  enterRule(_localctx, 40, CypherParser::RuleKU_FilePaths);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(690);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 1);
        setState(657);
        match(CypherParser::T__6);
        setState(659);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(658);
          match(CypherParser::SP);
        }
        setState(661);
        match(CypherParser::StringLiteral);
        setState(672);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
          setState(663);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(662);
            match(CypherParser::SP);
          }
          setState(665);
          match(CypherParser::T__2);
          setState(667);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(666);
            match(CypherParser::SP);
          }
          setState(669);
          match(CypherParser::StringLiteral);
          setState(674);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(675);
        match(CypherParser::T__7);
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(676);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::GLOB: {
        enterOuterAlt(_localctx, 3);
        setState(677);
        match(CypherParser::GLOB);
        setState(679);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(678);
          match(CypherParser::SP);
        }
        setState(681);
        match(CypherParser::T__1);
        setState(683);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(682);
          match(CypherParser::SP);
        }
        setState(685);
        match(CypherParser::StringLiteral);
        setState(687);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(686);
          match(CypherParser::SP);
        }
        setState(689);
        match(CypherParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ParsingOptionsContext ------------------------------------------------------------------

CypherParser::KU_ParsingOptionsContext::KU_ParsingOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_OptionsContext* CypherParser::KU_ParsingOptionsContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ParsingOptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ParsingOptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ParsingOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_ParsingOptions;
}


CypherParser::KU_ParsingOptionsContext* CypherParser::kU_ParsingOptions() {
  KU_ParsingOptionsContext *_localctx = _tracker.createInstance<KU_ParsingOptionsContext>(_ctx, getState());
  enterRule(_localctx, 42, CypherParser::RuleKU_ParsingOptions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(692);
    match(CypherParser::T__1);
    setState(694);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(693);
      match(CypherParser::SP);
    }
    setState(696);
    kU_Options();
    setState(698);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(697);
      match(CypherParser::SP);
    }
    setState(700);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeTableContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeTableContext::KU_CreateNodeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateNodeTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateNodeTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_CreateNodeConstraintContext* CypherParser::KU_CreateNodeTableContext::kU_CreateNodeConstraint() {
  return getRuleContext<CypherParser::KU_CreateNodeConstraintContext>(0);
}


size_t CypherParser::KU_CreateNodeTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeTable;
}


CypherParser::KU_CreateNodeTableContext* CypherParser::kU_CreateNodeTable() {
  KU_CreateNodeTableContext *_localctx = _tracker.createInstance<KU_CreateNodeTableContext>(_ctx, getState());
  enterRule(_localctx, 44, CypherParser::RuleKU_CreateNodeTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(702);
    match(CypherParser::CREATE);
    setState(703);
    match(CypherParser::SP);
    setState(704);
    match(CypherParser::NODE);
    setState(705);
    match(CypherParser::SP);
    setState(706);
    match(CypherParser::TABLE);
    setState(707);
    match(CypherParser::SP);
    setState(708);
    oC_SchemaName();
    setState(710);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(709);
      match(CypherParser::SP);
    }
    setState(712);
    match(CypherParser::T__1);
    setState(714);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(713);
      match(CypherParser::SP);
    }
    setState(716);
    kU_PropertyDefinitions();
    setState(718);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(717);
      match(CypherParser::SP);
    }

    setState(720);
    match(CypherParser::T__2);
    setState(722);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(721);
      match(CypherParser::SP);
    }
    setState(724);
    kU_CreateNodeConstraint();
    setState(727);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(726);
      match(CypherParser::SP);
    }
    setState(729);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableContext::KU_CreateRelTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableContext::kU_RelTableConnection() {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTable;
}


CypherParser::KU_CreateRelTableContext* CypherParser::kU_CreateRelTable() {
  KU_CreateRelTableContext *_localctx = _tracker.createInstance<KU_CreateRelTableContext>(_ctx, getState());
  enterRule(_localctx, 46, CypherParser::RuleKU_CreateRelTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(731);
    match(CypherParser::CREATE);
    setState(732);
    match(CypherParser::SP);
    setState(733);
    match(CypherParser::REL);
    setState(734);
    match(CypherParser::SP);
    setState(735);
    match(CypherParser::TABLE);
    setState(736);
    match(CypherParser::SP);
    setState(737);
    oC_SchemaName();
    setState(739);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(738);
      match(CypherParser::SP);
    }
    setState(741);
    match(CypherParser::T__1);
    setState(743);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(742);
      match(CypherParser::SP);
    }
    setState(745);
    kU_RelTableConnection();
    setState(747);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(746);
      match(CypherParser::SP);
    }
    setState(757);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      setState(749);
      match(CypherParser::T__2);
      setState(751);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(750);
        match(CypherParser::SP);
      }
      setState(753);
      kU_PropertyDefinitions();
      setState(755);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(754);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(767);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
      setState(759);
      match(CypherParser::T__2);
      setState(761);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(760);
        match(CypherParser::SP);
      }
      setState(763);
      oC_SymbolicName();
      setState(765);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(764);
        match(CypherParser::SP);
      }
    }
    setState(769);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableGroupContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableGroupContext::KU_CreateRelTableGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableGroupContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::GROUP() {
  return getToken(CypherParser::GROUP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

std::vector<CypherParser::KU_RelTableConnectionContext *> CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection() {
  return getRuleContexts<CypherParser::KU_RelTableConnectionContext>();
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection(size_t i) {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(i);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableGroupContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableGroupContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTableGroup;
}


CypherParser::KU_CreateRelTableGroupContext* CypherParser::kU_CreateRelTableGroup() {
  KU_CreateRelTableGroupContext *_localctx = _tracker.createInstance<KU_CreateRelTableGroupContext>(_ctx, getState());
  enterRule(_localctx, 48, CypherParser::RuleKU_CreateRelTableGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(771);
    match(CypherParser::CREATE);
    setState(772);
    match(CypherParser::SP);
    setState(773);
    match(CypherParser::REL);
    setState(774);
    match(CypherParser::SP);
    setState(775);
    match(CypherParser::TABLE);
    setState(776);
    match(CypherParser::SP);
    setState(777);
    match(CypherParser::GROUP);
    setState(778);
    match(CypherParser::SP);
    setState(779);
    oC_SchemaName();
    setState(781);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(780);
      match(CypherParser::SP);
    }
    setState(783);
    match(CypherParser::T__1);
    setState(785);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(784);
      match(CypherParser::SP);
    }
    setState(787);
    kU_RelTableConnection();
    setState(789);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(788);
      match(CypherParser::SP);
    }
    setState(796); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(791);
              match(CypherParser::T__2);
              setState(793);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(792);
                match(CypherParser::SP);
              }
              setState(795);
              kU_RelTableConnection();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(798); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(801);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(800);
      match(CypherParser::SP);
    }
    setState(811);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
      setState(803);
      match(CypherParser::T__2);
      setState(805);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(804);
        match(CypherParser::SP);
      }
      setState(807);
      kU_PropertyDefinitions();
      setState(809);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(808);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(821);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
      setState(813);
      match(CypherParser::T__2);
      setState(815);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(814);
        match(CypherParser::SP);
      }
      setState(817);
      oC_SymbolicName();
      setState(819);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(818);
        match(CypherParser::SP);
      }
    }
    setState(823);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RelTableConnectionContext ------------------------------------------------------------------

CypherParser::KU_RelTableConnectionContext::KU_RelTableConnectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RelTableConnectionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_RelTableConnectionContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RelTableConnectionContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RelTableConnectionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RelTableConnection;
}


CypherParser::KU_RelTableConnectionContext* CypherParser::kU_RelTableConnection() {
  KU_RelTableConnectionContext *_localctx = _tracker.createInstance<KU_RelTableConnectionContext>(_ctx, getState());
  enterRule(_localctx, 50, CypherParser::RuleKU_RelTableConnection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(825);
    match(CypherParser::FROM);
    setState(826);
    match(CypherParser::SP);
    setState(827);
    oC_SchemaName();
    setState(828);
    match(CypherParser::SP);
    setState(829);
    match(CypherParser::TO);
    setState(830);
    match(CypherParser::SP);
    setState(831);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRdfGraphContext ------------------------------------------------------------------

CypherParser::KU_CreateRdfGraphContext::KU_CreateRdfGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRdfGraphContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRdfGraphContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_CreateRdfGraphContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRdfGraph;
}


CypherParser::KU_CreateRdfGraphContext* CypherParser::kU_CreateRdfGraph() {
  KU_CreateRdfGraphContext *_localctx = _tracker.createInstance<KU_CreateRdfGraphContext>(_ctx, getState());
  enterRule(_localctx, 52, CypherParser::RuleKU_CreateRdfGraph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(833);
    match(CypherParser::CREATE);
    setState(834);
    match(CypherParser::SP);
    setState(835);
    match(CypherParser::RDFGRAPH);
    setState(836);
    match(CypherParser::SP);
    setState(837);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateSequenceContext ------------------------------------------------------------------

CypherParser::KU_CreateSequenceContext::KU_CreateSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateSequenceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateSequenceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

std::vector<CypherParser::KU_SequenceOptionsContext *> CypherParser::KU_CreateSequenceContext::kU_SequenceOptions() {
  return getRuleContexts<CypherParser::KU_SequenceOptionsContext>();
}

CypherParser::KU_SequenceOptionsContext* CypherParser::KU_CreateSequenceContext::kU_SequenceOptions(size_t i) {
  return getRuleContext<CypherParser::KU_SequenceOptionsContext>(i);
}


size_t CypherParser::KU_CreateSequenceContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateSequence;
}


CypherParser::KU_CreateSequenceContext* CypherParser::kU_CreateSequence() {
  KU_CreateSequenceContext *_localctx = _tracker.createInstance<KU_CreateSequenceContext>(_ctx, getState());
  enterRule(_localctx, 54, CypherParser::RuleKU_CreateSequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(839);
    match(CypherParser::CREATE);
    setState(840);
    match(CypherParser::SP);
    setState(841);
    match(CypherParser::SEQUENCE);
    setState(842);
    match(CypherParser::SP);
    setState(843);
    oC_SchemaName();
    setState(848);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(844);
        match(CypherParser::SP);
        setState(845);
        kU_SequenceOptions(); 
      }
      setState(850);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_SequenceOptionsContext ------------------------------------------------------------------

CypherParser::KU_SequenceOptionsContext::KU_SequenceOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_IncrementByContext* CypherParser::KU_SequenceOptionsContext::kU_IncrementBy() {
  return getRuleContext<CypherParser::KU_IncrementByContext>(0);
}

CypherParser::KU_MinValueContext* CypherParser::KU_SequenceOptionsContext::kU_MinValue() {
  return getRuleContext<CypherParser::KU_MinValueContext>(0);
}

CypherParser::KU_MaxValueContext* CypherParser::KU_SequenceOptionsContext::kU_MaxValue() {
  return getRuleContext<CypherParser::KU_MaxValueContext>(0);
}

CypherParser::KU_StartWithContext* CypherParser::KU_SequenceOptionsContext::kU_StartWith() {
  return getRuleContext<CypherParser::KU_StartWithContext>(0);
}

CypherParser::KU_CycleContext* CypherParser::KU_SequenceOptionsContext::kU_Cycle() {
  return getRuleContext<CypherParser::KU_CycleContext>(0);
}


size_t CypherParser::KU_SequenceOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_SequenceOptions;
}


CypherParser::KU_SequenceOptionsContext* CypherParser::kU_SequenceOptions() {
  KU_SequenceOptionsContext *_localctx = _tracker.createInstance<KU_SequenceOptionsContext>(_ctx, getState());
  enterRule(_localctx, 56, CypherParser::RuleKU_SequenceOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(856);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(851);
      kU_IncrementBy();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(852);
      kU_MinValue();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(853);
      kU_MaxValue();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(854);
      kU_StartWith();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(855);
      kU_Cycle();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IncrementByContext ------------------------------------------------------------------

CypherParser::KU_IncrementByContext::KU_IncrementByContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_IncrementByContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_IncrementByContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_IncrementByContext::getRuleIndex() const {
  return CypherParser::RuleKU_IncrementBy;
}


CypherParser::KU_IncrementByContext* CypherParser::kU_IncrementBy() {
  KU_IncrementByContext *_localctx = _tracker.createInstance<KU_IncrementByContext>(_ctx, getState());
  enterRule(_localctx, 58, CypherParser::RuleKU_IncrementBy);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(858);
    match(CypherParser::INCREMENT);
    setState(859);
    match(CypherParser::SP);
    setState(862);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::BY) {
      setState(860);
      match(CypherParser::BY);
      setState(861);
      match(CypherParser::SP);
    }
    setState(865);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(864);
      match(CypherParser::MINUS);
    }
    setState(867);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MinValueContext ------------------------------------------------------------------

CypherParser::KU_MinValueContext::KU_MinValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MinValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MinValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MinValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MinValue;
}


CypherParser::KU_MinValueContext* CypherParser::kU_MinValue() {
  KU_MinValueContext *_localctx = _tracker.createInstance<KU_MinValueContext>(_ctx, getState());
  enterRule(_localctx, 60, CypherParser::RuleKU_MinValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(878);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(869);
        match(CypherParser::NO);
        setState(870);
        match(CypherParser::SP);
        setState(871);
        match(CypherParser::MINVALUE);
        break;
      }

      case CypherParser::MINVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(872);
        match(CypherParser::MINVALUE);
        setState(873);
        match(CypherParser::SP);
        setState(875);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(874);
          match(CypherParser::MINUS);
        }
        setState(877);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MaxValueContext ------------------------------------------------------------------

CypherParser::KU_MaxValueContext::KU_MaxValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MaxValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MaxValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MaxValue;
}


CypherParser::KU_MaxValueContext* CypherParser::kU_MaxValue() {
  KU_MaxValueContext *_localctx = _tracker.createInstance<KU_MaxValueContext>(_ctx, getState());
  enterRule(_localctx, 62, CypherParser::RuleKU_MaxValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(889);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(880);
        match(CypherParser::NO);
        setState(881);
        match(CypherParser::SP);
        setState(882);
        match(CypherParser::MAXVALUE);
        break;
      }

      case CypherParser::MAXVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(883);
        match(CypherParser::MAXVALUE);
        setState(884);
        match(CypherParser::SP);
        setState(886);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(885);
          match(CypherParser::MINUS);
        }
        setState(888);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StartWithContext ------------------------------------------------------------------

CypherParser::KU_StartWithContext::KU_StartWithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StartWithContext::START() {
  return getToken(CypherParser::START, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StartWithContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_StartWithContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_StartWithContext::getRuleIndex() const {
  return CypherParser::RuleKU_StartWith;
}


CypherParser::KU_StartWithContext* CypherParser::kU_StartWith() {
  KU_StartWithContext *_localctx = _tracker.createInstance<KU_StartWithContext>(_ctx, getState());
  enterRule(_localctx, 64, CypherParser::RuleKU_StartWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(891);
    match(CypherParser::START);
    setState(892);
    match(CypherParser::SP);
    setState(895);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::WITH) {
      setState(893);
      match(CypherParser::WITH);
      setState(894);
      match(CypherParser::SP);
    }
    setState(898);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(897);
      match(CypherParser::MINUS);
    }
    setState(900);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CycleContext ------------------------------------------------------------------

CypherParser::KU_CycleContext::KU_CycleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CycleContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::KU_CycleContext::getRuleIndex() const {
  return CypherParser::RuleKU_Cycle;
}


CypherParser::KU_CycleContext* CypherParser::kU_Cycle() {
  KU_CycleContext *_localctx = _tracker.createInstance<KU_CycleContext>(_ctx, getState());
  enterRule(_localctx, 66, CypherParser::RuleKU_Cycle);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(904);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::NO) {
      setState(902);
      match(CypherParser::NO);
      setState(903);
      match(CypherParser::SP);
    }
    setState(906);
    match(CypherParser::CYCLE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropContext ------------------------------------------------------------------

CypherParser::KU_DropContext::KU_DropContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DropContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DropContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DropContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DropContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_DropContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}

tree::TerminalNode* CypherParser::KU_DropContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}


size_t CypherParser::KU_DropContext::getRuleIndex() const {
  return CypherParser::RuleKU_Drop;
}


CypherParser::KU_DropContext* CypherParser::kU_Drop() {
  KU_DropContext *_localctx = _tracker.createInstance<KU_DropContext>(_ctx, getState());
  enterRule(_localctx, 68, CypherParser::RuleKU_Drop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(908);
    match(CypherParser::DROP);
    setState(909);
    match(CypherParser::SP);
    setState(910);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -3458764513820540928) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(911);
    match(CypherParser::SP);
    setState(912);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterTableContext ------------------------------------------------------------------

CypherParser::KU_AlterTableContext::KU_AlterTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AlterTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AlterTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_AlterOptionsContext* CypherParser::KU_AlterTableContext::kU_AlterOptions() {
  return getRuleContext<CypherParser::KU_AlterOptionsContext>(0);
}


size_t CypherParser::KU_AlterTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterTable;
}


CypherParser::KU_AlterTableContext* CypherParser::kU_AlterTable() {
  KU_AlterTableContext *_localctx = _tracker.createInstance<KU_AlterTableContext>(_ctx, getState());
  enterRule(_localctx, 70, CypherParser::RuleKU_AlterTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(914);
    match(CypherParser::ALTER);
    setState(915);
    match(CypherParser::SP);
    setState(916);
    match(CypherParser::TABLE);
    setState(917);
    match(CypherParser::SP);
    setState(918);
    oC_SchemaName();
    setState(919);
    match(CypherParser::SP);
    setState(920);
    kU_AlterOptions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterOptionsContext ------------------------------------------------------------------

CypherParser::KU_AlterOptionsContext::KU_AlterOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_AddPropertyContext* CypherParser::KU_AlterOptionsContext::kU_AddProperty() {
  return getRuleContext<CypherParser::KU_AddPropertyContext>(0);
}

CypherParser::KU_DropPropertyContext* CypherParser::KU_AlterOptionsContext::kU_DropProperty() {
  return getRuleContext<CypherParser::KU_DropPropertyContext>(0);
}

CypherParser::KU_RenameTableContext* CypherParser::KU_AlterOptionsContext::kU_RenameTable() {
  return getRuleContext<CypherParser::KU_RenameTableContext>(0);
}

CypherParser::KU_RenamePropertyContext* CypherParser::KU_AlterOptionsContext::kU_RenameProperty() {
  return getRuleContext<CypherParser::KU_RenamePropertyContext>(0);
}


size_t CypherParser::KU_AlterOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterOptions;
}


CypherParser::KU_AlterOptionsContext* CypherParser::kU_AlterOptions() {
  KU_AlterOptionsContext *_localctx = _tracker.createInstance<KU_AlterOptionsContext>(_ctx, getState());
  enterRule(_localctx, 72, CypherParser::RuleKU_AlterOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(926);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(922);
      kU_AddProperty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(923);
      kU_DropProperty();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(924);
      kU_RenameTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(925);
      kU_RenameProperty();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddPropertyContext ------------------------------------------------------------------

CypherParser::KU_AddPropertyContext::KU_AddPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AddPropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_AddPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_AddPropertyContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::DEFAULT() {
  return getToken(CypherParser::DEFAULT, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_AddPropertyContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_AddPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddProperty;
}


CypherParser::KU_AddPropertyContext* CypherParser::kU_AddProperty() {
  KU_AddPropertyContext *_localctx = _tracker.createInstance<KU_AddPropertyContext>(_ctx, getState());
  enterRule(_localctx, 74, CypherParser::RuleKU_AddProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(928);
    match(CypherParser::ADD);
    setState(929);
    match(CypherParser::SP);
    setState(930);
    oC_PropertyKeyName();
    setState(931);
    match(CypherParser::SP);
    setState(932);
    kU_DataType(0);
    setState(937);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
    case 1: {
      setState(933);
      match(CypherParser::SP);
      setState(934);
      match(CypherParser::DEFAULT);
      setState(935);
      match(CypherParser::SP);
      setState(936);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropPropertyContext ------------------------------------------------------------------

CypherParser::KU_DropPropertyContext::KU_DropPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_DropPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_DropPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropProperty;
}


CypherParser::KU_DropPropertyContext* CypherParser::kU_DropProperty() {
  KU_DropPropertyContext *_localctx = _tracker.createInstance<KU_DropPropertyContext>(_ctx, getState());
  enterRule(_localctx, 76, CypherParser::RuleKU_DropProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(939);
    match(CypherParser::DROP);
    setState(940);
    match(CypherParser::SP);
    setState(941);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenameTableContext ------------------------------------------------------------------

CypherParser::KU_RenameTableContext::KU_RenameTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenameTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::TO() {
  return getToken(CypherParser::TO, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RenameTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_RenameTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameTable;
}


CypherParser::KU_RenameTableContext* CypherParser::kU_RenameTable() {
  KU_RenameTableContext *_localctx = _tracker.createInstance<KU_RenameTableContext>(_ctx, getState());
  enterRule(_localctx, 78, CypherParser::RuleKU_RenameTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(943);
    match(CypherParser::RENAME);
    setState(944);
    match(CypherParser::SP);
    setState(945);
    match(CypherParser::TO);
    setState(946);
    match(CypherParser::SP);
    setState(947);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenamePropertyContext ------------------------------------------------------------------

CypherParser::KU_RenamePropertyContext::KU_RenamePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenamePropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RenamePropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameProperty;
}


CypherParser::KU_RenamePropertyContext* CypherParser::kU_RenameProperty() {
  KU_RenamePropertyContext *_localctx = _tracker.createInstance<KU_RenamePropertyContext>(_ctx, getState());
  enterRule(_localctx, 80, CypherParser::RuleKU_RenameProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(949);
    match(CypherParser::RENAME);
    setState(950);
    match(CypherParser::SP);
    setState(951);
    oC_PropertyKeyName();
    setState(952);
    match(CypherParser::SP);
    setState(953);
    match(CypherParser::TO);
    setState(954);
    match(CypherParser::SP);
    setState(955);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsContext::KU_PropertyDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionContext *> CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionContext>();
}

CypherParser::KU_PropertyDefinitionContext* CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitions;
}


CypherParser::KU_PropertyDefinitionsContext* CypherParser::kU_PropertyDefinitions() {
  KU_PropertyDefinitionsContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 82, CypherParser::RuleKU_PropertyDefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(957);
    kU_PropertyDefinition();
    setState(968);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(959);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(958);
          match(CypherParser::SP);
        }
        setState(961);
        match(CypherParser::T__2);
        setState(963);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(962);
          match(CypherParser::SP);
        }
        setState(965);
        kU_PropertyDefinition(); 
      }
      setState(970);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionContext::KU_PropertyDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertyDefinitionContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_PropertyDefinitionContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::DEFAULT() {
  return getToken(CypherParser::DEFAULT, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_PropertyDefinitionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinition;
}


CypherParser::KU_PropertyDefinitionContext* CypherParser::kU_PropertyDefinition() {
  KU_PropertyDefinitionContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 84, CypherParser::RuleKU_PropertyDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(971);
    oC_PropertyKeyName();
    setState(972);
    match(CypherParser::SP);
    setState(973);
    kU_DataType(0);
    setState(978);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
    case 1: {
      setState(974);
      match(CypherParser::SP);
      setState(975);
      match(CypherParser::DEFAULT);
      setState(976);
      match(CypherParser::SP);
      setState(977);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeConstraintContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeConstraintContext::KU_CreateNodeConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::PRIMARY() {
  return getToken(CypherParser::PRIMARY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeConstraintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_CreateNodeConstraintContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_CreateNodeConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeConstraint;
}


CypherParser::KU_CreateNodeConstraintContext* CypherParser::kU_CreateNodeConstraint() {
  KU_CreateNodeConstraintContext *_localctx = _tracker.createInstance<KU_CreateNodeConstraintContext>(_ctx, getState());
  enterRule(_localctx, 86, CypherParser::RuleKU_CreateNodeConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(980);
    match(CypherParser::PRIMARY);
    setState(981);
    match(CypherParser::SP);
    setState(982);
    match(CypherParser::KEY);
    setState(984);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(983);
      match(CypherParser::SP);
    }
    setState(986);
    match(CypherParser::T__1);
    setState(988);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(987);
      match(CypherParser::SP);
    }
    setState(990);
    oC_PropertyKeyName();
    setState(992);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(991);
      match(CypherParser::SP);
    }
    setState(994);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DataTypeContext ------------------------------------------------------------------

CypherParser::KU_DataTypeContext::KU_DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DataTypeContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_DataTypeContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DataTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::KU_DataTypeContext *> CypherParser::KU_DataTypeContext::kU_DataType() {
  return getRuleContexts<CypherParser::KU_DataTypeContext>();
}

CypherParser::KU_DataTypeContext* CypherParser::KU_DataTypeContext::kU_DataType(size_t i) {
  return getRuleContext<CypherParser::KU_DataTypeContext>(i);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::DECIMAL() {
  return getToken(CypherParser::DECIMAL, 0);
}

std::vector<CypherParser::OC_IntegerLiteralContext *> CypherParser::KU_DataTypeContext::oC_IntegerLiteral() {
  return getRuleContexts<CypherParser::OC_IntegerLiteralContext>();
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_DataTypeContext::oC_IntegerLiteral(size_t i) {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(i);
}

CypherParser::KU_ListIdentifiersContext* CypherParser::KU_DataTypeContext::kU_ListIdentifiers() {
  return getRuleContext<CypherParser::KU_ListIdentifiersContext>(0);
}


size_t CypherParser::KU_DataTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_DataType;
}



CypherParser::KU_DataTypeContext* CypherParser::kU_DataType() {
   return kU_DataType(0);
}

CypherParser::KU_DataTypeContext* CypherParser::kU_DataType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_DataTypeContext *_localctx = _tracker.createInstance<KU_DataTypeContext>(_ctx, parentState);
  CypherParser::KU_DataTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 88;
  enterRecursionRule(_localctx, 88, CypherParser::RuleKU_DataType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1065);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
=======
    setState(1048);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    case 1: {
      setState(997);
      oC_SymbolicName();
      break;
    }

    case 2: {
      setState(998);
      match(CypherParser::UNION);
      setState(1000);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(999);
        match(CypherParser::SP);
      }
      setState(1002);
      match(CypherParser::T__1);
      setState(1004);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1003);
        match(CypherParser::SP);
      }
      setState(1006);
      kU_PropertyDefinitions();
      setState(1008);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1007);
        match(CypherParser::SP);
      }
      setState(1010);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      setState(1012);
      oC_SymbolicName();
      setState(1014);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1013);
        match(CypherParser::SP);
      }
      setState(1016);
      match(CypherParser::T__1);
      setState(1018);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1017);
        match(CypherParser::SP);
      }
      setState(1020);
      kU_PropertyDefinitions();
      setState(1022);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1021);
        match(CypherParser::SP);
      }
      setState(1024);
      match(CypherParser::T__3);
      break;
    }

    case 4: {
      setState(1026);
      oC_SymbolicName();
      setState(1028);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1027);
        match(CypherParser::SP);
      }
      setState(1030);
      match(CypherParser::T__1);
      setState(1032);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1031);
        match(CypherParser::SP);
      }
      setState(1034);
      kU_DataType(0);
      setState(1036);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1035);
        match(CypherParser::SP);
      }
      setState(1038);
      match(CypherParser::T__2);
      setState(1040);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1039);
        match(CypherParser::SP);
      }
      setState(1042);
      kU_DataType(0);
      setState(1044);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1043);
        match(CypherParser::SP);
      }
      setState(1046);
      match(CypherParser::T__3);
      break;
    }

    case 5: {
      setState(1043);
      match(CypherParser::DECIMAL);
      setState(1045);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1044);
        match(CypherParser::SP);
      }
      setState(1047);
      match(CypherParser::T__1);
      setState(1049);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1048);
        match(CypherParser::SP);
      }
      setState(1051);
      oC_IntegerLiteral();
      setState(1053);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1052);
        match(CypherParser::SP);
      }
      setState(1055);
      match(CypherParser::T__2);
      setState(1057);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1056);
        match(CypherParser::SP);
      }
      setState(1059);
      oC_IntegerLiteral();
      setState(1061);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1060);
        match(CypherParser::SP);
      }
      setState(1063);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
<<<<<<< HEAD
    setState(1071);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
=======
    setState(1054);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<KU_DataTypeContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleKU_DataType);
<<<<<<< HEAD
        setState(1067);

        if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
        setState(1068);
        kU_ListIdentifiers(); 
      }
      setState(1073);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
=======
        setState(1050);

        if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
        setState(1051);
        kU_ListIdentifiers(); 
      }
      setState(1056);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- KU_ListIdentifiersContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifiersContext::KU_ListIdentifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ListIdentifierContext *> CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier() {
  return getRuleContexts<CypherParser::KU_ListIdentifierContext>();
}

CypherParser::KU_ListIdentifierContext* CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier(size_t i) {
  return getRuleContext<CypherParser::KU_ListIdentifierContext>(i);
}


size_t CypherParser::KU_ListIdentifiersContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifiers;
}


CypherParser::KU_ListIdentifiersContext* CypherParser::kU_ListIdentifiers() {
  KU_ListIdentifiersContext *_localctx = _tracker.createInstance<KU_ListIdentifiersContext>(_ctx, getState());
  enterRule(_localctx, 90, CypherParser::RuleKU_ListIdentifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1074);
    kU_ListIdentifier();
    setState(1078);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1075);
        kU_ListIdentifier(); 
      }
      setState(1080);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx);
=======
    setState(1057);
    kU_ListIdentifier();
    setState(1061);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1058);
        kU_ListIdentifier(); 
      }
      setState(1063);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListIdentifierContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifierContext::KU_ListIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_ListIdentifierContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::KU_ListIdentifierContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifier;
}


CypherParser::KU_ListIdentifierContext* CypherParser::kU_ListIdentifier() {
  KU_ListIdentifierContext *_localctx = _tracker.createInstance<KU_ListIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 92, CypherParser::RuleKU_ListIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1081);
    match(CypherParser::T__6);
    setState(1083);
=======
    setState(1064);
    match(CypherParser::T__6);
    setState(1066);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DecimalInteger) {
<<<<<<< HEAD
      setState(1082);
      oC_IntegerLiteral();
    }
    setState(1085);
=======
      setState(1065);
      oC_IntegerLiteral();
    }
    setState(1068);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnyCypherOptionContext ------------------------------------------------------------------

CypherParser::OC_AnyCypherOptionContext::OC_AnyCypherOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExplainContext* CypherParser::OC_AnyCypherOptionContext::oC_Explain() {
  return getRuleContext<CypherParser::OC_ExplainContext>(0);
}

CypherParser::OC_ProfileContext* CypherParser::OC_AnyCypherOptionContext::oC_Profile() {
  return getRuleContext<CypherParser::OC_ProfileContext>(0);
}


size_t CypherParser::OC_AnyCypherOptionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnyCypherOption;
}


CypherParser::OC_AnyCypherOptionContext* CypherParser::oC_AnyCypherOption() {
  OC_AnyCypherOptionContext *_localctx = _tracker.createInstance<OC_AnyCypherOptionContext>(_ctx, getState());
  enterRule(_localctx, 94, CypherParser::RuleOC_AnyCypherOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(1089);
=======
    setState(1072);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::EXPLAIN: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
        setState(1087);
=======
        setState(1070);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_Explain();
        break;
      }

      case CypherParser::PROFILE: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
        setState(1088);
=======
        setState(1071);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_Profile();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplainContext ------------------------------------------------------------------

CypherParser::OC_ExplainContext::OC_ExplainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExplainContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}


size_t CypherParser::OC_ExplainContext::getRuleIndex() const {
  return CypherParser::RuleOC_Explain;
}


CypherParser::OC_ExplainContext* CypherParser::oC_Explain() {
  OC_ExplainContext *_localctx = _tracker.createInstance<OC_ExplainContext>(_ctx, getState());
  enterRule(_localctx, 96, CypherParser::RuleOC_Explain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1091);
=======
    setState(1074);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::EXPLAIN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProfileContext ------------------------------------------------------------------

CypherParser::OC_ProfileContext::OC_ProfileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProfileContext::PROFILE() {
  return getToken(CypherParser::PROFILE, 0);
}


size_t CypherParser::OC_ProfileContext::getRuleIndex() const {
  return CypherParser::RuleOC_Profile;
}


CypherParser::OC_ProfileContext* CypherParser::oC_Profile() {
  OC_ProfileContext *_localctx = _tracker.createInstance<OC_ProfileContext>(_ctx, getState());
  enterRule(_localctx, 98, CypherParser::RuleOC_Profile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1093);
=======
    setState(1076);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::PROFILE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_TransactionContext ------------------------------------------------------------------

CypherParser::KU_TransactionContext::KU_TransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_TransactionContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_TransactionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ONLY() {
  return getToken(CypherParser::ONLY, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT_SKIP_CHECKPOINT() {
  return getToken(CypherParser::COMMIT_SKIP_CHECKPOINT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK_SKIP_CHECKPOINT() {
  return getToken(CypherParser::ROLLBACK_SKIP_CHECKPOINT, 0);
}


size_t CypherParser::KU_TransactionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Transaction;
}


CypherParser::KU_TransactionContext* CypherParser::kU_Transaction() {
  KU_TransactionContext *_localctx = _tracker.createInstance<KU_TransactionContext>(_ctx, getState());
  enterRule(_localctx, 100, CypherParser::RuleKU_Transaction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(1109);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1095);
      match(CypherParser::BEGIN);
      setState(1096);
      match(CypherParser::SP);
      setState(1097);
=======
    setState(1092);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1078);
      match(CypherParser::BEGIN);
      setState(1079);
      match(CypherParser::SP);
      setState(1080);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::TRANSACTION);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
      setState(1098);
      match(CypherParser::BEGIN);
      setState(1099);
      match(CypherParser::SP);
      setState(1100);
      match(CypherParser::TRANSACTION);
      setState(1101);
      match(CypherParser::SP);
      setState(1102);
      match(CypherParser::READ);
      setState(1103);
      match(CypherParser::SP);
      setState(1104);
=======
      setState(1081);
      match(CypherParser::BEGIN);
      setState(1082);
      match(CypherParser::SP);
      setState(1083);
      match(CypherParser::TRANSACTION);
      setState(1084);
      match(CypherParser::SP);
      setState(1085);
      match(CypherParser::READ);
      setState(1086);
      match(CypherParser::SP);
      setState(1087);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::ONLY);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
      setState(1105);
=======
      setState(1088);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::COMMIT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
<<<<<<< HEAD
      setState(1106);
=======
      setState(1089);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::COMMIT_SKIP_CHECKPOINT);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
<<<<<<< HEAD
      setState(1107);
=======
      setState(1090);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::ROLLBACK);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
<<<<<<< HEAD
      setState(1108);
=======
      setState(1091);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::ROLLBACK_SKIP_CHECKPOINT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExtensionContext ------------------------------------------------------------------

CypherParser::KU_ExtensionContext::KU_ExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LoadExtensionContext* CypherParser::KU_ExtensionContext::kU_LoadExtension() {
  return getRuleContext<CypherParser::KU_LoadExtensionContext>(0);
}

CypherParser::KU_InstallExtensionContext* CypherParser::KU_ExtensionContext::kU_InstallExtension() {
  return getRuleContext<CypherParser::KU_InstallExtensionContext>(0);
}


size_t CypherParser::KU_ExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Extension;
}


CypherParser::KU_ExtensionContext* CypherParser::kU_Extension() {
  KU_ExtensionContext *_localctx = _tracker.createInstance<KU_ExtensionContext>(_ctx, getState());
  enterRule(_localctx, 102, CypherParser::RuleKU_Extension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(1113);
=======
    setState(1096);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
        setState(1111);
=======
        setState(1094);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        kU_LoadExtension();
        break;
      }

      case CypherParser::INSTALL: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
        setState(1112);
=======
        setState(1095);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        kU_InstallExtension();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadExtensionContext ------------------------------------------------------------------

CypherParser::KU_LoadExtensionContext::KU_LoadExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadExtensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_LoadExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_LoadExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadExtension;
}


CypherParser::KU_LoadExtensionContext* CypherParser::kU_LoadExtension() {
  KU_LoadExtensionContext *_localctx = _tracker.createInstance<KU_LoadExtensionContext>(_ctx, getState());
  enterRule(_localctx, 104, CypherParser::RuleKU_LoadExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1115);
    match(CypherParser::LOAD);
    setState(1116);
    match(CypherParser::SP);
    setState(1117);
    match(CypherParser::EXTENSION);
    setState(1118);
    match(CypherParser::SP);
    setState(1121);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::StringLiteral: {
        setState(1119);
=======
    setState(1098);
    match(CypherParser::LOAD);
    setState(1099);
    match(CypherParser::SP);
    setState(1100);
    match(CypherParser::EXTENSION);
    setState(1101);
    match(CypherParser::SP);
    setState(1104);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::StringLiteral: {
        setState(1102);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
<<<<<<< HEAD
        setState(1120);
=======
        setState(1103);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_Variable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InstallExtensionContext ------------------------------------------------------------------

CypherParser::KU_InstallExtensionContext::KU_InstallExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::INSTALL() {
  return getToken(CypherParser::INSTALL, 0);
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_InstallExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_InstallExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_InstallExtension;
}


CypherParser::KU_InstallExtensionContext* CypherParser::kU_InstallExtension() {
  KU_InstallExtensionContext *_localctx = _tracker.createInstance<KU_InstallExtensionContext>(_ctx, getState());
  enterRule(_localctx, 106, CypherParser::RuleKU_InstallExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1123);
    match(CypherParser::INSTALL);
    setState(1124);
    match(CypherParser::SP);
    setState(1125);
=======
    setState(1106);
    match(CypherParser::INSTALL);
    setState(1107);
    match(CypherParser::SP);
    setState(1108);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

CypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RegularQueryContext* CypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<CypherParser::OC_RegularQueryContext>(0);
}


size_t CypherParser::OC_QueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_Query;
}


CypherParser::OC_QueryContext* CypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
  enterRule(_localctx, 108, CypherParser::RuleOC_Query);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1127);
=======
    setState(1110);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_RegularQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

CypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}

std::vector<CypherParser::OC_UnionContext *> CypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<CypherParser::OC_UnionContext>();
}

CypherParser::OC_UnionContext* CypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<CypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RegularQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_ReturnContext *> CypherParser::OC_RegularQueryContext::oC_Return() {
  return getRuleContexts<CypherParser::OC_ReturnContext>();
}

CypherParser::OC_ReturnContext* CypherParser::OC_RegularQueryContext::oC_Return(size_t i) {
  return getRuleContext<CypherParser::OC_ReturnContext>(i);
}


size_t CypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularQuery;
}


CypherParser::OC_RegularQueryContext* CypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
  enterRule(_localctx, 110, CypherParser::RuleOC_RegularQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
<<<<<<< HEAD
    setState(1150);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1129);
      oC_SingleQuery();
      setState(1136);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1131);
=======
    setState(1133);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1112);
      oC_SingleQuery();
      setState(1119);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1114);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
<<<<<<< HEAD
            setState(1130);
            match(CypherParser::SP);
          }
          setState(1133);
          oC_Union(); 
        }
        setState(1138);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx);
=======
            setState(1113);
            match(CypherParser::SP);
          }
          setState(1116);
          oC_Union(); 
        }
        setState(1121);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
      setState(1143); 
=======
      setState(1126); 
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
<<<<<<< HEAD
                setState(1139);
                oC_Return();
                setState(1141);
=======
                setState(1122);
                oC_Return();
                setState(1124);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
<<<<<<< HEAD
                  setState(1140);
=======
                  setState(1123);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
                  match(CypherParser::SP);
                }
                break;
              }

        default:
          throw NoViableAltException(this);
        }
<<<<<<< HEAD
        setState(1145); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1147);
=======
        setState(1128); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1130);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_SingleQuery();
       notifyReturnNotAtEnd(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

CypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnionContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnionContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}


size_t CypherParser::OC_UnionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Union;
}


CypherParser::OC_UnionContext* CypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
  enterRule(_localctx, 112, CypherParser::RuleOC_Union);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(1164);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1152);
      match(CypherParser::UNION);
      setState(1153);
      match(CypherParser::SP);
      setState(1154);
      match(CypherParser::ALL);
      setState(1156);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1155);
        match(CypherParser::SP);
      }
      setState(1158);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1159);
      match(CypherParser::UNION);
      setState(1161);
=======
    setState(1147);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1135);
      match(CypherParser::UNION);
      setState(1136);
      match(CypherParser::SP);
      setState(1137);
      match(CypherParser::ALL);
      setState(1139);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1160);
        match(CypherParser::SP);
      }
      setState(1163);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1142);
      match(CypherParser::UNION);
      setState(1144);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1143);
        match(CypherParser::SP);
      }
      setState(1146);
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

CypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

CypherParser::OC_MultiPartQueryContext* CypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<CypherParser::OC_MultiPartQueryContext>(0);
}


size_t CypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SingleQuery;
}


CypherParser::OC_SingleQueryContext* CypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 114, CypherParser::RuleOC_SingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(1168);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1166);
=======
    setState(1151);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1149);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
      setState(1167);
=======
      setState(1150);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

CypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ReturnContext* CypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<CypherParser::OC_ReturnContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}


size_t CypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SinglePartQuery;
}


CypherParser::OC_SinglePartQueryContext* CypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
  enterRule(_localctx, 116, CypherParser::RuleOC_SinglePartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
<<<<<<< HEAD
    setState(1215);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1176);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 49) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 49)) & 2040693581152257) != 0)) {
        setState(1170);
        oC_ReadingClause();
        setState(1172);
=======
    setState(1198);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1159);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 49) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 49)) & 1020346790576129) != 0)) {
        setState(1153);
        oC_ReadingClause();
        setState(1155);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1171);
          match(CypherParser::SP);
        }
        setState(1178);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1179);
=======
          setState(1154);
          match(CypherParser::SP);
        }
        setState(1161);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1162);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
      setState(1186);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 49) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 49)) & 2040693581152257) != 0)) {
        setState(1180);
        oC_ReadingClause();
        setState(1182);
=======
      setState(1169);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 49) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 49)) & 1020346790576129) != 0)) {
        setState(1163);
        oC_ReadingClause();
        setState(1165);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1181);
          match(CypherParser::SP);
        }
        setState(1188);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1189);
      oC_UpdatingClause();
      setState(1196);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1191);
=======
          setState(1164);
          match(CypherParser::SP);
        }
        setState(1171);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1172);
      oC_UpdatingClause();
      setState(1179);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1174);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
<<<<<<< HEAD
            setState(1190);
            match(CypherParser::SP);
          }
          setState(1193);
          oC_UpdatingClause(); 
        }
        setState(1198);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
      }
      setState(1203);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
      case 1: {
        setState(1200);
=======
            setState(1173);
            match(CypherParser::SP);
          }
          setState(1176);
          oC_UpdatingClause(); 
        }
        setState(1181);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx);
      }
      setState(1186);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx)) {
      case 1: {
        setState(1183);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1199);
          match(CypherParser::SP);
        }
        setState(1202);
=======
          setState(1182);
          match(CypherParser::SP);
        }
        setState(1185);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
      setState(1209); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1205);
        oC_ReadingClause();
        setState(1207);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx)) {
        case 1: {
          setState(1206);
=======
      setState(1192); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1188);
        oC_ReadingClause();
        setState(1190);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
        case 1: {
          setState(1189);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
<<<<<<< HEAD
        setState(1211); 
=======
        setState(1194); 
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (((((_la - 49) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 49)) & 2040693581152257) != 0));
       notifyQueryNotConcludeWithReturn(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

CypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<CypherParser::KU_QueryPartContext *> CypherParser::OC_MultiPartQueryContext::kU_QueryPart() {
  return getRuleContexts<CypherParser::KU_QueryPartContext>();
}

CypherParser::KU_QueryPartContext* CypherParser::OC_MultiPartQueryContext::kU_QueryPart(size_t i) {
  return getRuleContext<CypherParser::KU_QueryPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiPartQuery;
}


CypherParser::OC_MultiPartQueryContext* CypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
  enterRule(_localctx, 118, CypherParser::RuleOC_MultiPartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1221); 
=======
    setState(1204); 
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
<<<<<<< HEAD
              setState(1217);
              kU_QueryPart();
              setState(1219);
=======
              setState(1200);
              kU_QueryPart();
              setState(1202);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
<<<<<<< HEAD
                setState(1218);
=======
                setState(1201);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
                match(CypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
<<<<<<< HEAD
      setState(1223); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1225);
=======
      setState(1206); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1208);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_QueryPartContext ------------------------------------------------------------------

CypherParser::KU_QueryPartContext::KU_QueryPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_WithContext* CypherParser::KU_QueryPartContext::oC_With() {
  return getRuleContext<CypherParser::OC_WithContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::KU_QueryPartContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::KU_QueryPartContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::KU_QueryPartContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::KU_QueryPartContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_QueryPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_QueryPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_QueryPartContext::getRuleIndex() const {
  return CypherParser::RuleKU_QueryPart;
}


CypherParser::KU_QueryPartContext* CypherParser::kU_QueryPart() {
  KU_QueryPartContext *_localctx = _tracker.createInstance<KU_QueryPartContext>(_ctx, getState());
  enterRule(_localctx, 120, CypherParser::RuleKU_QueryPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1233);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 49) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 49)) & 2040693581152257) != 0)) {
      setState(1227);
      oC_ReadingClause();
      setState(1229);
=======
    setState(1216);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 49) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 49)) & 1020346790576129) != 0)) {
      setState(1210);
      oC_ReadingClause();
      setState(1212);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1228);
        match(CypherParser::SP);
      }
      setState(1235);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1242);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 100) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 100)) & 59) != 0)) {
      setState(1236);
      oC_UpdatingClause();
      setState(1238);
=======
        setState(1211);
        match(CypherParser::SP);
      }
      setState(1218);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1225);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 99) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 99)) & 59) != 0)) {
      setState(1219);
      oC_UpdatingClause();
      setState(1221);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1237);
        match(CypherParser::SP);
      }
      setState(1244);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1245);
=======
        setState(1220);
        match(CypherParser::SP);
      }
      setState(1227);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1228);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_With();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

CypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_CreateContext* CypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<CypherParser::OC_CreateContext>(0);
}

CypherParser::OC_MergeContext* CypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<CypherParser::OC_MergeContext>(0);
}

CypherParser::OC_SetContext* CypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

CypherParser::OC_DeleteContext* CypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<CypherParser::OC_DeleteContext>(0);
}


size_t CypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpdatingClause;
}


CypherParser::OC_UpdatingClauseContext* CypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
  enterRule(_localctx, 122, CypherParser::RuleOC_UpdatingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(1251);
=======
    setState(1234);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
        setState(1247);
=======
        setState(1230);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_Create();
        break;
      }

      case CypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
        setState(1248);
=======
        setState(1231);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_Merge();
        break;
      }

      case CypherParser::SET: {
        enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
        setState(1249);
=======
        setState(1232);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_Set();
        break;
      }

      case CypherParser::DETACH:
      case CypherParser::DELETE: {
        enterOuterAlt(_localctx, 4);
<<<<<<< HEAD
        setState(1250);
=======
        setState(1233);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_Delete();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

CypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_MatchContext* CypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<CypherParser::OC_MatchContext>(0);
}

CypherParser::OC_UnwindContext* CypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<CypherParser::OC_UnwindContext>(0);
}

CypherParser::KU_InQueryCallContext* CypherParser::OC_ReadingClauseContext::kU_InQueryCall() {
  return getRuleContext<CypherParser::KU_InQueryCallContext>(0);
}

CypherParser::KU_LoadFromContext* CypherParser::OC_ReadingClauseContext::kU_LoadFrom() {
  return getRuleContext<CypherParser::KU_LoadFromContext>(0);
}


size_t CypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_ReadingClause;
}


CypherParser::OC_ReadingClauseContext* CypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 124, CypherParser::RuleOC_ReadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(1257);
=======
    setState(1240);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::OPTIONAL:
      case CypherParser::MATCH: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
        setState(1253);
=======
        setState(1236);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_Match();
        break;
      }

      case CypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
        setState(1254);
=======
        setState(1237);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_Unwind();
        break;
      }

      case CypherParser::CALL: {
        enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
        setState(1255);
=======
        setState(1238);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        kU_InQueryCall();
        break;
      }

      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 4);
<<<<<<< HEAD
        setState(1256);
=======
        setState(1239);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        kU_LoadFrom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadFromContext ------------------------------------------------------------------

CypherParser::KU_LoadFromContext::KU_LoadFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_LoadFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::HEADERS() {
  return getToken(CypherParser::HEADERS, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_LoadFromContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_LoadFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_LoadFromContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_LoadFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadFrom;
}


CypherParser::KU_LoadFromContext* CypherParser::kU_LoadFrom() {
  KU_LoadFromContext *_localctx = _tracker.createInstance<KU_LoadFromContext>(_ctx, getState());
  enterRule(_localctx, 126, CypherParser::RuleKU_LoadFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1259);
    match(CypherParser::LOAD);
    setState(1277);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      setState(1260);
      match(CypherParser::SP);
      setState(1261);
      match(CypherParser::WITH);
      setState(1262);
      match(CypherParser::SP);
      setState(1263);
      match(CypherParser::HEADERS);
      setState(1265);
=======
    setState(1242);
    match(CypherParser::LOAD);
    setState(1260);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx)) {
    case 1: {
      setState(1243);
      match(CypherParser::SP);
      setState(1244);
      match(CypherParser::WITH);
      setState(1245);
      match(CypherParser::SP);
      setState(1246);
      match(CypherParser::HEADERS);
      setState(1248);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1264);
        match(CypherParser::SP);
      }
      setState(1267);
      match(CypherParser::T__1);
      setState(1269);
=======
        setState(1247);
        match(CypherParser::SP);
      }
      setState(1250);
      match(CypherParser::T__1);
      setState(1252);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1268);
        match(CypherParser::SP);
      }
      setState(1271);
      kU_PropertyDefinitions();
      setState(1273);
=======
        setState(1251);
        match(CypherParser::SP);
      }
      setState(1254);
      kU_PropertyDefinitions();
      setState(1256);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1272);
        match(CypherParser::SP);
      }
      setState(1275);
=======
        setState(1255);
        match(CypherParser::SP);
      }
      setState(1258);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(1279);
    match(CypherParser::SP);
    setState(1280);
    match(CypherParser::FROM);
    setState(1281);
    match(CypherParser::SP);
    setState(1282);
    kU_ScanSource();
    setState(1287);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
    case 1: {
      setState(1284);
=======
    setState(1262);
    match(CypherParser::SP);
    setState(1263);
    match(CypherParser::FROM);
    setState(1264);
    match(CypherParser::SP);
    setState(1265);
    kU_ScanSource();
    setState(1270);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
    case 1: {
      setState(1267);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1283);
        match(CypherParser::SP);
      }
      setState(1286);
=======
        setState(1266);
        match(CypherParser::SP);
      }
      setState(1269);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(1293);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx)) {
    case 1: {
      setState(1290);
=======
    setState(1276);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      setState(1273);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1289);
        match(CypherParser::SP);
      }
      setState(1292);
=======
        setState(1272);
        match(CypherParser::SP);
      }
      setState(1275);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InQueryCallContext ------------------------------------------------------------------

CypherParser::KU_InQueryCallContext::KU_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_InQueryCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::KU_InQueryCallContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_InQueryCallContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_InQueryCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_InQueryCall;
}


CypherParser::KU_InQueryCallContext* CypherParser::kU_InQueryCall() {
  KU_InQueryCallContext *_localctx = _tracker.createInstance<KU_InQueryCallContext>(_ctx, getState());
  enterRule(_localctx, 128, CypherParser::RuleKU_InQueryCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1295);
    match(CypherParser::CALL);
    setState(1296);
    match(CypherParser::SP);
    setState(1297);
    oC_FunctionInvocation();
    setState(1302);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
    case 1: {
      setState(1299);
=======
    setState(1278);
    match(CypherParser::CALL);
    setState(1279);
    match(CypherParser::SP);
    setState(1280);
    oC_FunctionInvocation();
    setState(1285);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
    case 1: {
      setState(1282);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1298);
        match(CypherParser::SP);
      }
      setState(1301);
=======
        setState(1281);
        match(CypherParser::SP);
      }
      setState(1284);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

CypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MatchContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_MatchContext::OPTIONAL() {
  return getToken(CypherParser::OPTIONAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MatchContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_MatchContext::getRuleIndex() const {
  return CypherParser::RuleOC_Match;
}


CypherParser::OC_MatchContext* CypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
  enterRule(_localctx, 130, CypherParser::RuleOC_Match);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1306);
=======
    setState(1289);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::OPTIONAL) {
<<<<<<< HEAD
      setState(1304);
      match(CypherParser::OPTIONAL);
      setState(1305);
      match(CypherParser::SP);
    }
    setState(1308);
    match(CypherParser::MATCH);
    setState(1310);
=======
      setState(1287);
      match(CypherParser::OPTIONAL);
      setState(1288);
      match(CypherParser::SP);
    }
    setState(1291);
    match(CypherParser::MATCH);
    setState(1293);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1309);
      match(CypherParser::SP);
    }
    setState(1312);
    oC_Pattern();
    setState(1317);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx)) {
    case 1: {
      setState(1314);
=======
      setState(1292);
      match(CypherParser::SP);
    }
    setState(1295);
    oC_Pattern();
    setState(1300);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
    case 1: {
      setState(1297);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1313);
        match(CypherParser::SP);
      }
      setState(1316);
=======
        setState(1296);
        match(CypherParser::SP);
      }
      setState(1299);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

CypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnwindContext::UNWIND() {
  return getToken(CypherParser::UNWIND, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnwindContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_UnwindContext::getRuleIndex() const {
  return CypherParser::RuleOC_Unwind;
}


CypherParser::OC_UnwindContext* CypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
  enterRule(_localctx, 132, CypherParser::RuleOC_Unwind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1319);
    match(CypherParser::UNWIND);
    setState(1321);
=======
    setState(1302);
    match(CypherParser::UNWIND);
    setState(1304);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1320);
      match(CypherParser::SP);
    }
    setState(1323);
    oC_Expression();
    setState(1324);
    match(CypherParser::SP);
    setState(1325);
    match(CypherParser::AS);
    setState(1326);
    match(CypherParser::SP);
    setState(1327);
=======
      setState(1303);
      match(CypherParser::SP);
    }
    setState(1306);
    oC_Expression();
    setState(1307);
    match(CypherParser::SP);
    setState(1308);
    match(CypherParser::AS);
    setState(1309);
    match(CypherParser::SP);
    setState(1310);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

CypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CreateContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_CreateContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_CreateContext::getRuleIndex() const {
  return CypherParser::RuleOC_Create;
}


CypherParser::OC_CreateContext* CypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
  enterRule(_localctx, 134, CypherParser::RuleOC_Create);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1329);
    match(CypherParser::CREATE);
    setState(1331);
=======
    setState(1312);
    match(CypherParser::CREATE);
    setState(1314);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1330);
      match(CypherParser::SP);
    }
    setState(1333);
=======
      setState(1313);
      match(CypherParser::SP);
    }
    setState(1316);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

CypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MergeContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_MergeActionContext *> CypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<CypherParser::OC_MergeActionContext>();
}

CypherParser::OC_MergeActionContext* CypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<CypherParser::OC_MergeActionContext>(i);
}


size_t CypherParser::OC_MergeContext::getRuleIndex() const {
  return CypherParser::RuleOC_Merge;
}


CypherParser::OC_MergeContext* CypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
  enterRule(_localctx, 136, CypherParser::RuleOC_Merge);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1335);
    match(CypherParser::MERGE);
    setState(1337);
=======
    setState(1318);
    match(CypherParser::MERGE);
    setState(1320);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1336);
      match(CypherParser::SP);
    }
    setState(1339);
    oC_Pattern();
    setState(1344);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1340);
        match(CypherParser::SP);
        setState(1341);
        oC_MergeAction(); 
      }
      setState(1346);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx);
=======
      setState(1319);
      match(CypherParser::SP);
    }
    setState(1322);
    oC_Pattern();
    setState(1327);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1323);
        match(CypherParser::SP);
        setState(1324);
        oC_MergeAction(); 
      }
      setState(1329);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

CypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::ON() {
  return getToken(CypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeActionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_SetContext* CypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}


size_t CypherParser::OC_MergeActionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MergeAction;
}


CypherParser::OC_MergeActionContext* CypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
  enterRule(_localctx, 138, CypherParser::RuleOC_MergeAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(1357);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1347);
      match(CypherParser::ON);
      setState(1348);
      match(CypherParser::SP);
      setState(1349);
      match(CypherParser::MATCH);
      setState(1350);
      match(CypherParser::SP);
      setState(1351);
=======
    setState(1340);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1330);
      match(CypherParser::ON);
      setState(1331);
      match(CypherParser::SP);
      setState(1332);
      match(CypherParser::MATCH);
      setState(1333);
      match(CypherParser::SP);
      setState(1334);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
      setState(1352);
      match(CypherParser::ON);
      setState(1353);
      match(CypherParser::SP);
      setState(1354);
      match(CypherParser::CREATE);
      setState(1355);
      match(CypherParser::SP);
      setState(1356);
=======
      setState(1335);
      match(CypherParser::ON);
      setState(1336);
      match(CypherParser::SP);
      setState(1337);
      match(CypherParser::CREATE);
      setState(1338);
      match(CypherParser::SP);
      setState(1339);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

CypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SetContext::SET() {
  return getToken(CypherParser::SET, 0);
}

std::vector<CypherParser::OC_SetItemContext *> CypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<CypherParser::OC_SetItemContext>();
}

CypherParser::OC_SetItemContext* CypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<CypherParser::OC_SetItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetContext::getRuleIndex() const {
  return CypherParser::RuleOC_Set;
}


CypherParser::OC_SetContext* CypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
  enterRule(_localctx, 140, CypherParser::RuleOC_Set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1359);
    match(CypherParser::SET);
    setState(1361);
=======
    setState(1342);
    match(CypherParser::SET);
    setState(1344);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1360);
      match(CypherParser::SP);
    }
    setState(1363);
    oC_SetItem();
    setState(1374);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1365);
=======
      setState(1343);
      match(CypherParser::SP);
    }
    setState(1346);
    oC_SetItem();
    setState(1357);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1348);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1364);
          match(CypherParser::SP);
        }
        setState(1367);
        match(CypherParser::T__2);
        setState(1369);
=======
          setState(1347);
          match(CypherParser::SP);
        }
        setState(1350);
        match(CypherParser::T__2);
        setState(1352);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1368);
          match(CypherParser::SP);
        }
        setState(1371);
        oC_SetItem(); 
      }
      setState(1376);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx);
=======
          setState(1351);
          match(CypherParser::SP);
        }
        setState(1354);
        oC_SetItem(); 
      }
      setState(1359);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

CypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyExpressionContext* CypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<CypherParser::OC_PropertyExpressionContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SetItem;
}


CypherParser::OC_SetItemContext* CypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
  enterRule(_localctx, 142, CypherParser::RuleOC_SetItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1377);
    oC_PropertyExpression();
    setState(1379);
=======
    setState(1360);
    oC_PropertyExpression();
    setState(1362);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1378);
      match(CypherParser::SP);
    }
    setState(1381);
    match(CypherParser::T__5);
    setState(1383);
=======
      setState(1361);
      match(CypherParser::SP);
    }
    setState(1364);
    match(CypherParser::T__5);
    setState(1366);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1382);
      match(CypherParser::SP);
    }
    setState(1385);
=======
      setState(1365);
      match(CypherParser::SP);
    }
    setState(1368);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

CypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_DeleteContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_DeleteContext::getRuleIndex() const {
  return CypherParser::RuleOC_Delete;
}


CypherParser::OC_DeleteContext* CypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
  enterRule(_localctx, 144, CypherParser::RuleOC_Delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1389);
=======
    setState(1372);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DETACH) {
<<<<<<< HEAD
      setState(1387);
      match(CypherParser::DETACH);
      setState(1388);
      match(CypherParser::SP);
    }
    setState(1391);
    match(CypherParser::DELETE);
    setState(1393);
=======
      setState(1370);
      match(CypherParser::DETACH);
      setState(1371);
      match(CypherParser::SP);
    }
    setState(1374);
    match(CypherParser::DELETE);
    setState(1376);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1392);
      match(CypherParser::SP);
    }
    setState(1395);
    oC_Expression();
    setState(1406);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1397);
=======
      setState(1375);
      match(CypherParser::SP);
    }
    setState(1378);
    oC_Expression();
    setState(1389);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1380);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1396);
          match(CypherParser::SP);
        }
        setState(1399);
        match(CypherParser::T__2);
        setState(1401);
=======
          setState(1379);
          match(CypherParser::SP);
        }
        setState(1382);
        match(CypherParser::T__2);
        setState(1384);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1400);
          match(CypherParser::SP);
        }
        setState(1403);
        oC_Expression(); 
      }
      setState(1408);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx);
=======
          setState(1383);
          match(CypherParser::SP);
        }
        setState(1386);
        oC_Expression(); 
      }
      setState(1391);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

CypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_WithContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_WithContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_WithContext::getRuleIndex() const {
  return CypherParser::RuleOC_With;
}


CypherParser::OC_WithContext* CypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
  enterRule(_localctx, 146, CypherParser::RuleOC_With);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1409);
    match(CypherParser::WITH);
    setState(1410);
    oC_ProjectionBody();
    setState(1415);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx)) {
    case 1: {
      setState(1412);
=======
    setState(1392);
    match(CypherParser::WITH);
    setState(1393);
    oC_ProjectionBody();
    setState(1398);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
    case 1: {
      setState(1395);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1411);
        match(CypherParser::SP);
      }
      setState(1414);
=======
        setState(1394);
        match(CypherParser::SP);
      }
      setState(1397);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

CypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ReturnContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_ReturnContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}


size_t CypherParser::OC_ReturnContext::getRuleIndex() const {
  return CypherParser::RuleOC_Return;
}


CypherParser::OC_ReturnContext* CypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
  enterRule(_localctx, 148, CypherParser::RuleOC_Return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1417);
    match(CypherParser::RETURN);
    setState(1418);
=======
    setState(1400);
    match(CypherParser::RETURN);
    setState(1401);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_ProjectionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionBodyContext ------------------------------------------------------------------

CypherParser::OC_ProjectionBodyContext::OC_ProjectionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionBodyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::OC_ProjectionBodyContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

CypherParser::OC_OrderContext* CypherParser::OC_ProjectionBodyContext::oC_Order() {
  return getRuleContext<CypherParser::OC_OrderContext>(0);
}

CypherParser::OC_SkipContext* CypherParser::OC_ProjectionBodyContext::oC_Skip() {
  return getRuleContext<CypherParser::OC_SkipContext>(0);
}

CypherParser::OC_LimitContext* CypherParser::OC_ProjectionBodyContext::oC_Limit() {
  return getRuleContext<CypherParser::OC_LimitContext>(0);
}


size_t CypherParser::OC_ProjectionBodyContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionBody;
}


CypherParser::OC_ProjectionBodyContext* CypherParser::oC_ProjectionBody() {
  OC_ProjectionBodyContext *_localctx = _tracker.createInstance<OC_ProjectionBodyContext>(_ctx, getState());
  enterRule(_localctx, 150, CypherParser::RuleOC_ProjectionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1424);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx)) {
    case 1: {
      setState(1421);
=======
    setState(1407);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx)) {
    case 1: {
      setState(1404);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1420);
        match(CypherParser::SP);
      }
      setState(1423);
=======
        setState(1403);
        match(CypherParser::SP);
      }
      setState(1406);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(1426);
    match(CypherParser::SP);
    setState(1427);
    oC_ProjectionItems();
    setState(1430);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
    case 1: {
      setState(1428);
      match(CypherParser::SP);
      setState(1429);
=======
    setState(1409);
    match(CypherParser::SP);
    setState(1410);
    oC_ProjectionItems();
    setState(1413);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
    case 1: {
      setState(1411);
      match(CypherParser::SP);
      setState(1412);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Order();
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(1434);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
    case 1: {
      setState(1432);
      match(CypherParser::SP);
      setState(1433);
=======
    setState(1417);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx)) {
    case 1: {
      setState(1415);
      match(CypherParser::SP);
      setState(1416);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Skip();
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(1438);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx)) {
    case 1: {
      setState(1436);
      match(CypherParser::SP);
      setState(1437);
=======
    setState(1421);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      setState(1419);
      match(CypherParser::SP);
      setState(1420);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemsContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemsContext::OC_ProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<CypherParser::OC_ProjectionItemContext *> CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem() {
  return getRuleContexts<CypherParser::OC_ProjectionItemContext>();
}

CypherParser::OC_ProjectionItemContext* CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem(size_t i) {
  return getRuleContext<CypherParser::OC_ProjectionItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItems;
}


CypherParser::OC_ProjectionItemsContext* CypherParser::oC_ProjectionItems() {
  OC_ProjectionItemsContext *_localctx = _tracker.createInstance<OC_ProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 152, CypherParser::RuleOC_ProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
<<<<<<< HEAD
    setState(1468);
=======
    setState(1451);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::STAR: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
        setState(1440);
        match(CypherParser::STAR);
        setState(1451);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1442);
=======
        setState(1423);
        match(CypherParser::STAR);
        setState(1434);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1425);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
<<<<<<< HEAD
              setState(1441);
              match(CypherParser::SP);
            }
            setState(1444);
            match(CypherParser::T__2);
            setState(1446);
=======
              setState(1424);
              match(CypherParser::SP);
            }
            setState(1427);
            match(CypherParser::T__2);
            setState(1429);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
<<<<<<< HEAD
              setState(1445);
              match(CypherParser::SP);
            }
            setState(1448);
            oC_ProjectionItem(); 
          }
          setState(1453);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx);
=======
              setState(1428);
              match(CypherParser::SP);
            }
            setState(1431);
            oC_ProjectionItem(); 
          }
          setState(1436);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        }
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__6:
      case CypherParser::T__8:
      case CypherParser::T__25:
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::NOT:
      case CypherParser::MINUS:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::NULL_:
      case CypherParser::TRUE:
      case CypherParser::FALSE:
      case CypherParser::COUNT:
      case CypherParser::EXISTS:
      case CypherParser::CASE:
      case CypherParser::END:
      case CypherParser::StringLiteral:
      case CypherParser::DecimalInteger:
      case CypherParser::HexLetter:
      case CypherParser::RegularDecimalReal:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
        setState(1454);
        oC_ProjectionItem();
        setState(1465);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1456);
=======
        setState(1437);
        oC_ProjectionItem();
        setState(1448);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1439);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
<<<<<<< HEAD
              setState(1455);
              match(CypherParser::SP);
            }
            setState(1458);
            match(CypherParser::T__2);
            setState(1460);
=======
              setState(1438);
              match(CypherParser::SP);
            }
            setState(1441);
            match(CypherParser::T__2);
            setState(1443);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
<<<<<<< HEAD
              setState(1459);
              match(CypherParser::SP);
            }
            setState(1462);
            oC_ProjectionItem(); 
          }
          setState(1467);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx);
=======
              setState(1442);
              match(CypherParser::SP);
            }
            setState(1445);
            oC_ProjectionItem(); 
          }
          setState(1450);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemContext::OC_ProjectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ProjectionItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_ProjectionItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_ProjectionItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItem;
}


CypherParser::OC_ProjectionItemContext* CypherParser::oC_ProjectionItem() {
  OC_ProjectionItemContext *_localctx = _tracker.createInstance<OC_ProjectionItemContext>(_ctx, getState());
  enterRule(_localctx, 154, CypherParser::RuleOC_ProjectionItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(1477);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1470);
      oC_Expression();
      setState(1471);
      match(CypherParser::SP);
      setState(1472);
      match(CypherParser::AS);
      setState(1473);
      match(CypherParser::SP);
      setState(1474);
=======
    setState(1460);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1453);
      oC_Expression();
      setState(1454);
      match(CypherParser::SP);
      setState(1455);
      match(CypherParser::AS);
      setState(1456);
      match(CypherParser::SP);
      setState(1457);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
      setState(1476);
=======
      setState(1459);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

CypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_OrderContext::ORDER() {
  return getToken(CypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrderContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_OrderContext::BY() {
  return getToken(CypherParser::BY, 0);
}

std::vector<CypherParser::OC_SortItemContext *> CypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<CypherParser::OC_SortItemContext>();
}

CypherParser::OC_SortItemContext* CypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<CypherParser::OC_SortItemContext>(i);
}


size_t CypherParser::OC_OrderContext::getRuleIndex() const {
  return CypherParser::RuleOC_Order;
}


CypherParser::OC_OrderContext* CypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
  enterRule(_localctx, 156, CypherParser::RuleOC_Order);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1479);
    match(CypherParser::ORDER);
    setState(1480);
    match(CypherParser::SP);
    setState(1481);
    match(CypherParser::BY);
    setState(1482);
    match(CypherParser::SP);
    setState(1483);
    oC_SortItem();
    setState(1491);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(1484);
      match(CypherParser::T__2);
      setState(1486);
=======
    setState(1462);
    match(CypherParser::ORDER);
    setState(1463);
    match(CypherParser::SP);
    setState(1464);
    match(CypherParser::BY);
    setState(1465);
    match(CypherParser::SP);
    setState(1466);
    oC_SortItem();
    setState(1474);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(1467);
      match(CypherParser::T__2);
      setState(1469);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1485);
        match(CypherParser::SP);
      }
      setState(1488);
      oC_SortItem();
      setState(1493);
=======
        setState(1468);
        match(CypherParser::SP);
      }
      setState(1471);
      oC_SortItem();
      setState(1476);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

CypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SkipContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::OC_SkipContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_SkipContext::getRuleIndex() const {
  return CypherParser::RuleOC_Skip;
}


CypherParser::OC_SkipContext* CypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
  enterRule(_localctx, 158, CypherParser::RuleOC_Skip);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1494);
    match(CypherParser::L_SKIP);
    setState(1495);
    match(CypherParser::SP);
    setState(1496);
=======
    setState(1477);
    match(CypherParser::L_SKIP);
    setState(1478);
    match(CypherParser::SP);
    setState(1479);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

CypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LimitContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::OC_LimitContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_LimitContext::getRuleIndex() const {
  return CypherParser::RuleOC_Limit;
}


CypherParser::OC_LimitContext* CypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
  enterRule(_localctx, 160, CypherParser::RuleOC_Limit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1498);
    match(CypherParser::LIMIT);
    setState(1499);
    match(CypherParser::SP);
    setState(1500);
=======
    setState(1481);
    match(CypherParser::LIMIT);
    setState(1482);
    match(CypherParser::SP);
    setState(1483);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

CypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(CypherParser::ASCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASC() {
  return getToken(CypherParser::ASC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(CypherParser::DESCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESC() {
  return getToken(CypherParser::DESC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_SortItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SortItem;
}


CypherParser::OC_SortItemContext* CypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
  enterRule(_localctx, 162, CypherParser::RuleOC_SortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1502);
    oC_Expression();
    setState(1507);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx)) {
    case 1: {
      setState(1504);
=======
    setState(1485);
    oC_Expression();
    setState(1490);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
    case 1: {
      setState(1487);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1503);
        match(CypherParser::SP);
      }
      setState(1506);
=======
        setState(1486);
        match(CypherParser::SP);
      }
      setState(1489);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _la = _input->LA(1);
      if (!(((((_la - 115) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 115)) & 15) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

CypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WhereContext::WHERE() {
  return getToken(CypherParser::WHERE, 0);
}

tree::TerminalNode* CypherParser::OC_WhereContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_WhereContext::getRuleIndex() const {
  return CypherParser::RuleOC_Where;
}


CypherParser::OC_WhereContext* CypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
  enterRule(_localctx, 164, CypherParser::RuleOC_Where);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1509);
    match(CypherParser::WHERE);
    setState(1510);
    match(CypherParser::SP);
    setState(1511);
=======
    setState(1492);
    match(CypherParser::WHERE);
    setState(1493);
    match(CypherParser::SP);
    setState(1494);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

CypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PatternPartContext *> CypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<CypherParser::OC_PatternPartContext>();
}

CypherParser::OC_PatternPartContext* CypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<CypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_Pattern;
}


CypherParser::OC_PatternContext* CypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
  enterRule(_localctx, 166, CypherParser::RuleOC_Pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1513);
    oC_PatternPart();
    setState(1524);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1515);
=======
    setState(1496);
    oC_PatternPart();
    setState(1507);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1498);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1514);
          match(CypherParser::SP);
        }
        setState(1517);
        match(CypherParser::T__2);
        setState(1519);
=======
          setState(1497);
          match(CypherParser::SP);
        }
        setState(1500);
        match(CypherParser::T__2);
        setState(1502);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1518);
          match(CypherParser::SP);
        }
        setState(1521);
        oC_PatternPart(); 
      }
      setState(1526);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx);
=======
          setState(1501);
          match(CypherParser::SP);
        }
        setState(1504);
        oC_PatternPart(); 
      }
      setState(1509);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

CypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_AnonymousPatternPartContext* CypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<CypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternPart;
}


CypherParser::OC_PatternPartContext* CypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
  enterRule(_localctx, 168, CypherParser::RuleOC_PatternPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(1538);
=======
    setState(1521);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
        setState(1527);
        oC_Variable();
        setState(1529);
=======
        setState(1510);
        oC_Variable();
        setState(1512);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1528);
          match(CypherParser::SP);
        }
        setState(1531);
        match(CypherParser::T__5);
        setState(1533);
=======
          setState(1511);
          match(CypherParser::SP);
        }
        setState(1514);
        match(CypherParser::T__5);
        setState(1516);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1532);
          match(CypherParser::SP);
        }
        setState(1535);
=======
          setState(1515);
          match(CypherParser::SP);
        }
        setState(1518);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_AnonymousPatternPart();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
        setState(1537);
=======
        setState(1520);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

CypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PatternElementContext* CypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnonymousPatternPart;
}


CypherParser::OC_AnonymousPatternPartContext* CypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
  enterRule(_localctx, 170, CypherParser::RuleOC_AnonymousPatternPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1540);
=======
    setState(1523);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

CypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternElementContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PatternElementContext* CypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_PatternElementContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElement;
}


CypherParser::OC_PatternElementContext* CypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 172, CypherParser::RuleOC_PatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
<<<<<<< HEAD
    setState(1556);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1542);
      oC_NodePattern();
      setState(1549);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 223, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1544);
=======
    setState(1539);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1525);
      oC_NodePattern();
      setState(1532);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 219, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1527);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
<<<<<<< HEAD
            setState(1543);
            match(CypherParser::SP);
          }
          setState(1546);
          oC_PatternElementChain(); 
        }
        setState(1551);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 223, _ctx);
=======
            setState(1526);
            match(CypherParser::SP);
          }
          setState(1529);
          oC_PatternElementChain(); 
        }
        setState(1534);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 219, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
      setState(1552);
      match(CypherParser::T__1);
      setState(1553);
      oC_PatternElement();
      setState(1554);
=======
      setState(1535);
      match(CypherParser::T__1);
      setState(1536);
      oC_PatternElement();
      setState(1537);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

CypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodePatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_NodePatternContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_NodePatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodePattern;
}


CypherParser::OC_NodePatternContext* CypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 174, CypherParser::RuleOC_NodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1558);
    match(CypherParser::T__1);
    setState(1560);
=======
    setState(1541);
    match(CypherParser::T__1);
    setState(1543);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1559);
      match(CypherParser::SP);
    }
    setState(1566);
=======
      setState(1542);
      match(CypherParser::SP);
    }
    setState(1549);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
      ((1ULL << (_la - 48)) & 19868389125) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 302256393) != 0)) {
      setState(1562);
      oC_Variable();
      setState(1564);
=======
      ((1ULL << (_la - 48)) & 9130970885) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
      ((1ULL << (_la - 128)) & 302256393) != 0)) {
      setState(1540);
=======
      ((1ULL << (_la - 128)) & 302256385) != 0)) {
      setState(1545);
>>>>>>> cacacb962 (Support basic default values in creates and alter; squash for rebase)
      oC_Variable();
      setState(1547);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1563);
        match(CypherParser::SP);
      }
    }
    setState(1572);
=======
        setState(1546);
        match(CypherParser::SP);
      }
    }
    setState(1555);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
<<<<<<< HEAD
      setState(1568);
      oC_NodeLabels();
      setState(1570);
=======
      setState(1551);
      oC_NodeLabels();
      setState(1553);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1569);
        match(CypherParser::SP);
      }
    }
    setState(1578);
=======
        setState(1552);
        match(CypherParser::SP);
      }
    }
    setState(1561);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
<<<<<<< HEAD
      setState(1574);
      kU_Properties();
      setState(1576);
=======
      setState(1557);
      kU_Properties();
      setState(1559);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1575);
        match(CypherParser::SP);
      }
    }
    setState(1580);
=======
        setState(1558);
        match(CypherParser::SP);
      }
    }
    setState(1563);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

CypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RelationshipPatternContext* CypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<CypherParser::OC_RelationshipPatternContext>(0);
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_PatternElementChainContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElementChain;
}


CypherParser::OC_PatternElementChainContext* CypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
  enterRule(_localctx, 176, CypherParser::RuleOC_PatternElementChain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1582);
    oC_RelationshipPattern();
    setState(1584);
=======
    setState(1565);
    oC_RelationshipPattern();
    setState(1567);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1583);
      match(CypherParser::SP);
    }
    setState(1586);
=======
      setState(1566);
      match(CypherParser::SP);
    }
    setState(1569);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

CypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LeftArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<CypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<CypherParser::OC_DashContext *> CypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<CypherParser::OC_DashContext>();
}

CypherParser::OC_DashContext* CypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<CypherParser::OC_DashContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_RelationshipDetailContext* CypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<CypherParser::OC_RelationshipDetailContext>(0);
}

CypherParser::OC_RightArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<CypherParser::OC_RightArrowHeadContext>(0);
}


size_t CypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipPattern;
}


CypherParser::OC_RelationshipPatternContext* CypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
  enterRule(_localctx, 178, CypherParser::RuleOC_RelationshipPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(1632);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1588);
      oC_LeftArrowHead();
      setState(1590);
=======
    setState(1615);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1571);
      oC_LeftArrowHead();
      setState(1573);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1572);
        match(CypherParser::SP);
      }
      setState(1575);
      oC_Dash();
      setState(1577);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx)) {
      case 1: {
        setState(1576);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1580);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1579);
        oC_RelationshipDetail();
      }
      setState(1583);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1582);
        match(CypherParser::SP);
      }
      setState(1585);
      oC_Dash();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1587);
      oC_Dash();
      setState(1589);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx)) {
      case 1: {
        setState(1588);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1592);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1591);
        oC_RelationshipDetail();
      }
      setState(1595);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1594);
        match(CypherParser::SP);
      }
      setState(1597);
      oC_Dash();
      setState(1599);
      _errHandler->sync(this);

<<<<<<< HEAD
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 234, _ctx)) {
      case 1: {
        setState(1593);
=======
      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1598);
        match(CypherParser::SP);
      }
      setState(1601);
      oC_RightArrowHead();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1603);
      oC_Dash();
      setState(1605);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
      case 1: {
        setState(1604);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
<<<<<<< HEAD
      setState(1597);
=======
      setState(1608);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
<<<<<<< HEAD
        setState(1596);
        oC_RelationshipDetail();
      }
      setState(1600);
=======
        setState(1607);
        oC_RelationshipDetail();
      }
      setState(1611);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1599);
        match(CypherParser::SP);
      }
      setState(1602);
      oC_Dash();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1604);
      oC_Dash();
      setState(1606);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
      case 1: {
        setState(1605);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1609);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1608);
        oC_RelationshipDetail();
      }
      setState(1612);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1611);
        match(CypherParser::SP);
      }
      setState(1614);
      oC_Dash();
      setState(1616);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1615);
        match(CypherParser::SP);
      }
      setState(1618);
      oC_RightArrowHead();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1620);
      oC_Dash();
      setState(1622);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 241, _ctx)) {
      case 1: {
        setState(1621);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1625);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1624);
        oC_RelationshipDetail();
      }
      setState(1628);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1627);
        match(CypherParser::SP);
      }
      setState(1630);
=======
        setState(1610);
        match(CypherParser::SP);
      }
      setState(1613);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

CypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_RelationshipTypesContext* CypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<CypherParser::OC_RelationshipTypesContext>(0);
}

CypherParser::OC_RangeLiteralContext* CypherParser::OC_RelationshipDetailContext::oC_RangeLiteral() {
  return getRuleContext<CypherParser::OC_RangeLiteralContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_RelationshipDetailContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipDetail;
}


CypherParser::OC_RelationshipDetailContext* CypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
  enterRule(_localctx, 180, CypherParser::RuleOC_RelationshipDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1634);
    match(CypherParser::T__6);
    setState(1636);
=======
    setState(1617);
    match(CypherParser::T__6);
    setState(1619);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1635);
      match(CypherParser::SP);
    }
    setState(1642);
=======
      setState(1618);
      match(CypherParser::SP);
    }
    setState(1625);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
      ((1ULL << (_la - 48)) & 19868389125) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 302256393) != 0)) {
      setState(1638);
      oC_Variable();
      setState(1640);
=======
      ((1ULL << (_la - 48)) & 9130970885) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
      ((1ULL << (_la - 128)) & 302256393) != 0)) {
      setState(1616);
=======
      ((1ULL << (_la - 128)) & 302256385) != 0)) {
      setState(1621);
>>>>>>> cacacb962 (Support basic default values in creates and alter; squash for rebase)
      oC_Variable();
      setState(1623);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1639);
        match(CypherParser::SP);
      }
    }
    setState(1648);
=======
        setState(1622);
        match(CypherParser::SP);
      }
    }
    setState(1631);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
<<<<<<< HEAD
      setState(1644);
      oC_RelationshipTypes();
      setState(1646);
=======
      setState(1627);
      oC_RelationshipTypes();
      setState(1629);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1645);
        match(CypherParser::SP);
      }
    }
    setState(1654);
=======
        setState(1628);
        match(CypherParser::SP);
      }
    }
    setState(1637);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::STAR) {
<<<<<<< HEAD
      setState(1650);
      oC_RangeLiteral();
      setState(1652);
=======
      setState(1633);
      oC_RangeLiteral();
      setState(1635);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1651);
        match(CypherParser::SP);
      }
    }
    setState(1660);
=======
        setState(1634);
        match(CypherParser::SP);
      }
    }
    setState(1643);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
<<<<<<< HEAD
      setState(1656);
      kU_Properties();
      setState(1658);
=======
      setState(1639);
      kU_Properties();
      setState(1641);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1657);
        match(CypherParser::SP);
      }
    }
    setState(1662);
=======
        setState(1640);
        match(CypherParser::SP);
      }
    }
    setState(1645);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertiesContext ------------------------------------------------------------------

CypherParser::KU_PropertiesContext::KU_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_PropertiesContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertiesContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::KU_PropertiesContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::KU_PropertiesContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::KU_PropertiesContext::getRuleIndex() const {
  return CypherParser::RuleKU_Properties;
}


CypherParser::KU_PropertiesContext* CypherParser::kU_Properties() {
  KU_PropertiesContext *_localctx = _tracker.createInstance<KU_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 182, CypherParser::RuleKU_Properties);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1664);
    match(CypherParser::T__8);
    setState(1666);
=======
    setState(1647);
    match(CypherParser::T__8);
    setState(1649);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1665);
      match(CypherParser::SP);
    }
    setState(1701);
=======
      setState(1648);
      match(CypherParser::SP);
    }
    setState(1684);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
      ((1ULL << (_la - 48)) & 19868389125) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 302256393) != 0)) {
      setState(1668);
      oC_PropertyKeyName();
      setState(1670);
=======
      ((1ULL << (_la - 48)) & 9130970885) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
      ((1ULL << (_la - 128)) & 302256393) != 0)) {
      setState(1646);
=======
      ((1ULL << (_la - 128)) & 302256385) != 0)) {
      setState(1651);
>>>>>>> cacacb962 (Support basic default values in creates and alter; squash for rebase)
      oC_PropertyKeyName();
      setState(1653);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1669);
        match(CypherParser::SP);
      }
      setState(1672);
      match(CypherParser::COLON);
      setState(1674);
=======
        setState(1652);
        match(CypherParser::SP);
      }
      setState(1655);
      match(CypherParser::COLON);
      setState(1657);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1673);
        match(CypherParser::SP);
      }
      setState(1676);
      oC_Expression();
      setState(1678);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1677);
        match(CypherParser::SP);
      }
      setState(1698);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(1680);
        match(CypherParser::T__2);
        setState(1682);
=======
        setState(1656);
        match(CypherParser::SP);
      }
      setState(1659);
      oC_Expression();
      setState(1661);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1660);
        match(CypherParser::SP);
      }
      setState(1681);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(1663);
        match(CypherParser::T__2);
        setState(1665);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1681);
          match(CypherParser::SP);
        }
        setState(1684);
        oC_PropertyKeyName();
        setState(1686);
=======
          setState(1664);
          match(CypherParser::SP);
        }
        setState(1667);
        oC_PropertyKeyName();
        setState(1669);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1685);
          match(CypherParser::SP);
        }
        setState(1688);
        match(CypherParser::COLON);
        setState(1690);
=======
          setState(1668);
          match(CypherParser::SP);
        }
        setState(1671);
        match(CypherParser::COLON);
        setState(1673);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1689);
          match(CypherParser::SP);
        }
        setState(1692);
        oC_Expression();
        setState(1694);
=======
          setState(1672);
          match(CypherParser::SP);
        }
        setState(1675);
        oC_Expression();
        setState(1677);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1693);
          match(CypherParser::SP);
        }
        setState(1700);
=======
          setState(1676);
          match(CypherParser::SP);
        }
        setState(1683);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
<<<<<<< HEAD
    setState(1703);
=======
    setState(1686);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

CypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_RelTypeNameContext *> CypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<CypherParser::OC_RelTypeNameContext>();
}

CypherParser::OC_RelTypeNameContext* CypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<CypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipTypes;
}


CypherParser::OC_RelationshipTypesContext* CypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
  enterRule(_localctx, 184, CypherParser::RuleOC_RelationshipTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1705);
    match(CypherParser::COLON);
    setState(1707);
=======
    setState(1688);
    match(CypherParser::COLON);
    setState(1690);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1706);
      match(CypherParser::SP);
    }
    setState(1709);
    oC_RelTypeName();
    setState(1723);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1711);
=======
      setState(1689);
      match(CypherParser::SP);
    }
    setState(1692);
    oC_RelTypeName();
    setState(1706);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 264, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1694);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1710);
          match(CypherParser::SP);
        }
        setState(1713);
        match(CypherParser::T__10);
        setState(1715);
=======
          setState(1693);
          match(CypherParser::SP);
        }
        setState(1696);
        match(CypherParser::T__10);
        setState(1698);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::COLON) {
<<<<<<< HEAD
          setState(1714);
          match(CypherParser::COLON);
        }
        setState(1718);
=======
          setState(1697);
          match(CypherParser::COLON);
        }
        setState(1701);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1717);
          match(CypherParser::SP);
        }
        setState(1720);
        oC_RelTypeName(); 
      }
      setState(1725);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx);
=======
          setState(1700);
          match(CypherParser::SP);
        }
        setState(1703);
        oC_RelTypeName(); 
      }
      setState(1708);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 264, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NodeLabelContext *> CypherParser::OC_NodeLabelsContext::oC_NodeLabel() {
  return getRuleContexts<CypherParser::OC_NodeLabelContext>();
}

CypherParser::OC_NodeLabelContext* CypherParser::OC_NodeLabelsContext::oC_NodeLabel(size_t i) {
  return getRuleContext<CypherParser::OC_NodeLabelContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabels;
}


CypherParser::OC_NodeLabelsContext* CypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
  enterRule(_localctx, 186, CypherParser::RuleOC_NodeLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1726);
    oC_NodeLabel();
    setState(1733);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 270, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1728);
=======
    setState(1709);
    oC_NodeLabel();
    setState(1716);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 266, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1711);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1727);
          match(CypherParser::SP);
        }
        setState(1730);
        oC_NodeLabel(); 
      }
      setState(1735);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 270, _ctx);
=======
          setState(1710);
          match(CypherParser::SP);
        }
        setState(1713);
        oC_NodeLabel(); 
      }
      setState(1718);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 266, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelContext::OC_NodeLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LabelNameContext* CypherParser::OC_NodeLabelContext::oC_LabelName() {
  return getRuleContext<CypherParser::OC_LabelNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_NodeLabelContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabel;
}


CypherParser::OC_NodeLabelContext* CypherParser::oC_NodeLabel() {
  OC_NodeLabelContext *_localctx = _tracker.createInstance<OC_NodeLabelContext>(_ctx, getState());
  enterRule(_localctx, 188, CypherParser::RuleOC_NodeLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1736);
    match(CypherParser::COLON);
    setState(1738);
=======
    setState(1719);
    match(CypherParser::COLON);
    setState(1721);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1737);
      match(CypherParser::SP);
    }
    setState(1740);
=======
      setState(1720);
      match(CypherParser::SP);
    }
    setState(1723);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_LabelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

CypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SHORTEST() {
  return getToken(CypherParser::SHORTEST, 0);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::OC_RangeLiteralContext::kU_RecursiveRelationshipComprehension() {
  return getRuleContext<CypherParser::KU_RecursiveRelationshipComprehensionContext>(0);
}

CypherParser::OC_LowerBoundContext* CypherParser::OC_RangeLiteralContext::oC_LowerBound() {
  return getRuleContext<CypherParser::OC_LowerBoundContext>(0);
}

CypherParser::OC_UpperBoundContext* CypherParser::OC_RangeLiteralContext::oC_UpperBound() {
  return getRuleContext<CypherParser::OC_UpperBoundContext>(0);
}


size_t CypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_RangeLiteral;
}


CypherParser::OC_RangeLiteralContext* CypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 190, CypherParser::RuleOC_RangeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1742);
    match(CypherParser::STAR);
    setState(1744);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 272, _ctx)) {
    case 1: {
      setState(1743);
=======
    setState(1725);
    match(CypherParser::STAR);
    setState(1727);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx)) {
    case 1: {
      setState(1726);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(1750);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(1746);
=======
    setState(1733);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(1729);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::ALL: {
<<<<<<< HEAD
        setState(1747);
        match(CypherParser::ALL);
        setState(1748);
        match(CypherParser::SP);
        setState(1749);
=======
        setState(1730);
        match(CypherParser::ALL);
        setState(1731);
        match(CypherParser::SP);
        setState(1732);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__7:
      case CypherParser::T__8:
      case CypherParser::T__11:
      case CypherParser::DecimalInteger:
      case CypherParser::SP: {
        break;
      }

    default:
      break;
    }
<<<<<<< HEAD
    setState(1753);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 274, _ctx)) {
    case 1: {
      setState(1752);
=======
    setState(1736);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 270, _ctx)) {
    case 1: {
      setState(1735);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(1769);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx)) {
    case 1: {
      setState(1756);
=======
    setState(1752);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 275, _ctx)) {
    case 1: {
      setState(1739);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
<<<<<<< HEAD
        setState(1755);
        oC_LowerBound();
      }
      setState(1759);
=======
        setState(1738);
        oC_LowerBound();
      }
      setState(1742);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1758);
        match(CypherParser::SP);
      }
      setState(1761);
      match(CypherParser::T__11);
      setState(1763);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx)) {
      case 1: {
        setState(1762);
=======
        setState(1741);
        match(CypherParser::SP);
      }
      setState(1744);
      match(CypherParser::T__11);
      setState(1746);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 273, _ctx)) {
      case 1: {
        setState(1745);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
<<<<<<< HEAD
      setState(1766);
=======
      setState(1749);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
<<<<<<< HEAD
        setState(1765);
=======
        setState(1748);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_UpperBound();
      }
      break;
    }

    case 2: {
<<<<<<< HEAD
      setState(1768);
=======
      setState(1751);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_IntegerLiteral();
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(1775);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx)) {
    case 1: {
      setState(1772);
=======
    setState(1758);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx)) {
    case 1: {
      setState(1755);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1771);
        match(CypherParser::SP);
      }
      setState(1774);
=======
        setState(1754);
        match(CypherParser::SP);
      }
      setState(1757);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      kU_RecursiveRelationshipComprehension();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RecursiveRelationshipComprehensionContext ------------------------------------------------------------------

CypherParser::KU_RecursiveRelationshipComprehensionContext::KU_RecursiveRelationshipComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_VariableContext *> CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable() {
  return getRuleContexts<CypherParser::OC_VariableContext>();
}

CypherParser::OC_VariableContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable(size_t i) {
  return getRuleContext<CypherParser::OC_VariableContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RecursiveRelationshipComprehensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RecursiveRelationshipComprehensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateRelProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateRelProjectionItemsContext>(0);
}

CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateNodeProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateNodeProjectionItemsContext>(0);
}


size_t CypherParser::KU_RecursiveRelationshipComprehensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RecursiveRelationshipComprehension;
}


CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::kU_RecursiveRelationshipComprehension() {
  KU_RecursiveRelationshipComprehensionContext *_localctx = _tracker.createInstance<KU_RecursiveRelationshipComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 192, CypherParser::RuleKU_RecursiveRelationshipComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1777);
    match(CypherParser::T__1);
    setState(1779);
=======
    setState(1760);
    match(CypherParser::T__1);
    setState(1762);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1778);
      match(CypherParser::SP);
    }
    setState(1781);
    oC_Variable();
    setState(1783);
=======
      setState(1761);
      match(CypherParser::SP);
    }
    setState(1764);
    oC_Variable();
    setState(1766);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1782);
      match(CypherParser::SP);
    }
    setState(1785);
    match(CypherParser::T__2);
    setState(1787);
=======
      setState(1765);
      match(CypherParser::SP);
    }
    setState(1768);
    match(CypherParser::T__2);
    setState(1770);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1786);
      match(CypherParser::SP);
    }
    setState(1789);
    oC_Variable();
    setState(1798);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 287, _ctx)) {
    case 1: {
      setState(1791);
=======
      setState(1769);
      match(CypherParser::SP);
    }
    setState(1772);
    oC_Variable();
    setState(1781);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx)) {
    case 1: {
      setState(1774);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1773);
        match(CypherParser::SP);
      }
      setState(1776);
      match(CypherParser::T__10);
      setState(1778);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1777);
        match(CypherParser::SP);
      }
      setState(1780);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(1802);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__10 || _la == CypherParser::SP) {
      setState(1784);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1783);
        match(CypherParser::SP);
      }
      setState(1786);
      match(CypherParser::T__10);
      setState(1788);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1787);
        match(CypherParser::SP);
      }
      setState(1790);
      kU_IntermediateRelProjectionItems();
      setState(1792);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1791);
        match(CypherParser::SP);
      }
      setState(1794);
      match(CypherParser::T__2);
      setState(1796);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1795);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
      setState(1793);
      match(CypherParser::T__10);
      setState(1795);
=======
      setState(1798);
      kU_IntermediateNodeProjectionItems();
      setState(1800);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1799);
        match(CypherParser::SP);
      }
      setState(1797);
      oC_Where();
      break;
    }
<<<<<<< HEAD

    default:
      break;
    }
    setState(1819);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__10 || _la == CypherParser::SP) {
      setState(1801);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1800);
        match(CypherParser::SP);
      }
      setState(1803);
      match(CypherParser::T__10);
      setState(1805);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1804);
        match(CypherParser::SP);
      }
      setState(1807);
      kU_IntermediateRelProjectionItems();
      setState(1809);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1808);
        match(CypherParser::SP);
      }
      setState(1811);
      match(CypherParser::T__2);
      setState(1813);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1812);
        match(CypherParser::SP);
      }
      setState(1815);
      kU_IntermediateNodeProjectionItems();
      setState(1817);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1816);
        match(CypherParser::SP);
      }
    }
    setState(1821);
=======
    setState(1804);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateNodeProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateNodeProjectionItemsContext::KU_IntermediateNodeProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateNodeProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateNodeProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateNodeProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateNodeProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateNodeProjectionItems;
}


CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::kU_IntermediateNodeProjectionItems() {
  KU_IntermediateNodeProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateNodeProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 194, CypherParser::RuleKU_IntermediateNodeProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1823);
    match(CypherParser::T__8);
    setState(1825);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 294, _ctx)) {
    case 1: {
      setState(1824);
=======
    setState(1806);
    match(CypherParser::T__8);
    setState(1808);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 290, _ctx)) {
    case 1: {
      setState(1807);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(1828);
=======
    setState(1811);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8141100751335193980) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
      ((1ULL << (_la - 64)) & 5764642707406626879) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 319199209) != 0)) {
      setState(1827);
      oC_ProjectionItems();
    }
    setState(1831);
=======
      ((1ULL << (_la - 64)) & 2882321353703301183) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
      ((1ULL << (_la - 128)) & 319199209) != 0)) {
      setState(1805);
=======
      ((1ULL << (_la - 128)) & 319199201) != 0)) {
      setState(1810);
>>>>>>> cacacb962 (Support basic default values in creates and alter; squash for rebase)
      oC_ProjectionItems();
    }
    setState(1814);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1830);
      match(CypherParser::SP);
    }
    setState(1833);
=======
      setState(1813);
      match(CypherParser::SP);
    }
    setState(1816);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateRelProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateRelProjectionItemsContext::KU_IntermediateRelProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateRelProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateRelProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateRelProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateRelProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateRelProjectionItems;
}


CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::kU_IntermediateRelProjectionItems() {
  KU_IntermediateRelProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateRelProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 196, CypherParser::RuleKU_IntermediateRelProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1835);
    match(CypherParser::T__8);
    setState(1837);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 297, _ctx)) {
    case 1: {
      setState(1836);
=======
    setState(1818);
    match(CypherParser::T__8);
    setState(1820);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx)) {
    case 1: {
      setState(1819);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(1840);
=======
    setState(1823);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8141100751335193980) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
      ((1ULL << (_la - 64)) & 5764642707406626879) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 319199209) != 0)) {
      setState(1839);
      oC_ProjectionItems();
    }
    setState(1843);
=======
      ((1ULL << (_la - 64)) & 2882321353703301183) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
      ((1ULL << (_la - 128)) & 319199209) != 0)) {
      setState(1817);
=======
      ((1ULL << (_la - 128)) & 319199201) != 0)) {
      setState(1822);
>>>>>>> cacacb962 (Support basic default values in creates and alter; squash for rebase)
      oC_ProjectionItems();
    }
    setState(1826);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(1842);
      match(CypherParser::SP);
    }
    setState(1845);
=======
      setState(1825);
      match(CypherParser::SP);
    }
    setState(1828);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LowerBoundContext ------------------------------------------------------------------

CypherParser::OC_LowerBoundContext::OC_LowerBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LowerBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_LowerBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_LowerBound;
}


CypherParser::OC_LowerBoundContext* CypherParser::oC_LowerBound() {
  OC_LowerBoundContext *_localctx = _tracker.createInstance<OC_LowerBoundContext>(_ctx, getState());
  enterRule(_localctx, 198, CypherParser::RuleOC_LowerBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1847);
=======
    setState(1830);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpperBoundContext ------------------------------------------------------------------

CypherParser::OC_UpperBoundContext::OC_UpperBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UpperBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_UpperBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpperBound;
}


CypherParser::OC_UpperBoundContext* CypherParser::oC_UpperBound() {
  OC_UpperBoundContext *_localctx = _tracker.createInstance<OC_UpperBoundContext>(_ctx, getState());
  enterRule(_localctx, 200, CypherParser::RuleOC_UpperBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1849);
=======
    setState(1832);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

CypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_LabelNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_LabelName;
}


CypherParser::OC_LabelNameContext* CypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 202, CypherParser::RuleOC_LabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1851);
=======
    setState(1834);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

CypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelTypeName;
}


CypherParser::OC_RelTypeNameContext* CypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 204, CypherParser::RuleOC_RelTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1853);
=======
    setState(1836);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

CypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_OrExpressionContext* CypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<CypherParser::OC_OrExpressionContext>(0);
}


size_t CypherParser::OC_ExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Expression;
}


CypherParser::OC_ExpressionContext* CypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 206, CypherParser::RuleOC_Expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1855);
=======
    setState(1838);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

CypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_XorExpressionContext *> CypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<CypherParser::OC_XorExpressionContext>();
}

CypherParser::OC_XorExpressionContext* CypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::OR() {
  return getTokens(CypherParser::OR);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(CypherParser::OR, i);
}


size_t CypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_OrExpression;
}


CypherParser::OC_OrExpressionContext* CypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 208, CypherParser::RuleOC_OrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1857);
    oC_XorExpression();
    setState(1864);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 300, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1858);
        match(CypherParser::SP);
        setState(1859);
        match(CypherParser::OR);
        setState(1860);
        match(CypherParser::SP);
        setState(1861);
        oC_XorExpression(); 
      }
      setState(1866);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 300, _ctx);
=======
    setState(1840);
    oC_XorExpression();
    setState(1847);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1841);
        match(CypherParser::SP);
        setState(1842);
        match(CypherParser::OR);
        setState(1843);
        match(CypherParser::SP);
        setState(1844);
        oC_XorExpression(); 
      }
      setState(1849);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

CypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AndExpressionContext *> CypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<CypherParser::OC_AndExpressionContext>();
}

CypherParser::OC_AndExpressionContext* CypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(CypherParser::XOR);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(CypherParser::XOR, i);
}


size_t CypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_XorExpression;
}


CypherParser::OC_XorExpressionContext* CypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 210, CypherParser::RuleOC_XorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1867);
    oC_AndExpression();
    setState(1874);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1868);
        match(CypherParser::SP);
        setState(1869);
        match(CypherParser::XOR);
        setState(1870);
        match(CypherParser::SP);
        setState(1871);
        oC_AndExpression(); 
      }
      setState(1876);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx);
=======
    setState(1850);
    oC_AndExpression();
    setState(1857);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 297, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1851);
        match(CypherParser::SP);
        setState(1852);
        match(CypherParser::XOR);
        setState(1853);
        match(CypherParser::SP);
        setState(1854);
        oC_AndExpression(); 
      }
      setState(1859);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 297, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

CypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NotExpressionContext *> CypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<CypherParser::OC_NotExpressionContext>();
}

CypherParser::OC_NotExpressionContext* CypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<CypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::AND() {
  return getTokens(CypherParser::AND);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(CypherParser::AND, i);
}


size_t CypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AndExpression;
}


CypherParser::OC_AndExpressionContext* CypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 212, CypherParser::RuleOC_AndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1877);
    oC_NotExpression();
    setState(1884);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1878);
        match(CypherParser::SP);
        setState(1879);
        match(CypherParser::AND);
        setState(1880);
        match(CypherParser::SP);
        setState(1881);
        oC_NotExpression(); 
      }
      setState(1886);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx);
=======
    setState(1860);
    oC_NotExpression();
    setState(1867);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1861);
        match(CypherParser::SP);
        setState(1862);
        match(CypherParser::AND);
        setState(1863);
        match(CypherParser::SP);
        setState(1864);
        oC_NotExpression(); 
      }
      setState(1869);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

CypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ComparisonExpressionContext* CypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<CypherParser::OC_ComparisonExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::NOT() {
  return getTokens(CypherParser::NOT);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::NOT(size_t i) {
  return getToken(CypherParser::NOT, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NotExpression;
}


CypherParser::OC_NotExpressionContext* CypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
  enterRule(_localctx, 214, CypherParser::RuleOC_NotExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1893);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::NOT) {
      setState(1887);
      match(CypherParser::NOT);
      setState(1889);
=======
    setState(1876);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::NOT) {
      setState(1870);
      match(CypherParser::NOT);
      setState(1872);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1888);
        match(CypherParser::SP);
      }
      setState(1895);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1896);
=======
        setState(1871);
        match(CypherParser::SP);
      }
      setState(1878);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1879);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

CypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseOrOperatorExpressionContext *> CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseOrOperatorExpressionContext>();
}

CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseOrOperatorExpressionContext>(i);
}

std::vector<CypherParser::KU_ComparisonOperatorContext *> CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator() {
  return getRuleContexts<CypherParser::KU_ComparisonOperatorContext>();
}

CypherParser::KU_ComparisonOperatorContext* CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator(size_t i) {
  return getRuleContext<CypherParser::KU_ComparisonOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::INVALID_NOT_EQUAL() {
  return getToken(CypherParser::INVALID_NOT_EQUAL, 0);
}


size_t CypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ComparisonExpression;
}


CypherParser::OC_ComparisonExpressionContext* CypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 216, CypherParser::RuleOC_ComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
<<<<<<< HEAD
    setState(1946);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1898);
      kU_BitwiseOrOperatorExpression();
      setState(1908);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx)) {
      case 1: {
        setState(1900);
=======
    setState(1929);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1881);
      kU_BitwiseOrOperatorExpression();
      setState(1891);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 303, _ctx)) {
      case 1: {
        setState(1883);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1899);
          match(CypherParser::SP);
        }
        setState(1902);
        kU_ComparisonOperator();
        setState(1904);
=======
          setState(1882);
          match(CypherParser::SP);
        }
        setState(1885);
        kU_ComparisonOperator();
        setState(1887);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1903);
          match(CypherParser::SP);
        }
        setState(1906);
=======
          setState(1886);
          match(CypherParser::SP);
        }
        setState(1889);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        kU_BitwiseOrOperatorExpression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
      setState(1910);
      kU_BitwiseOrOperatorExpression();

      setState(1912);
=======
      setState(1893);
      kU_BitwiseOrOperatorExpression();

      setState(1895);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1911);
        match(CypherParser::SP);
      }
      setState(1914);
      antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken = match(CypherParser::INVALID_NOT_EQUAL);
      setState(1916);
=======
        setState(1894);
        match(CypherParser::SP);
      }
      setState(1897);
      antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken = match(CypherParser::INVALID_NOT_EQUAL);
      setState(1899);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1915);
        match(CypherParser::SP);
      }
      setState(1918);
=======
        setState(1898);
        match(CypherParser::SP);
      }
      setState(1901);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      kU_BitwiseOrOperatorExpression();
       notifyInvalidNotEqualOperator(antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken); 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
      setState(1922);
      kU_BitwiseOrOperatorExpression();
      setState(1924);
=======
      setState(1905);
      kU_BitwiseOrOperatorExpression();
      setState(1907);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1923);
        match(CypherParser::SP);
      }
      setState(1926);
      kU_ComparisonOperator();
      setState(1928);
=======
        setState(1906);
        match(CypherParser::SP);
      }
      setState(1909);
      kU_ComparisonOperator();
      setState(1911);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1927);
        match(CypherParser::SP);
      }
      setState(1930);
      kU_BitwiseOrOperatorExpression();
      setState(1940); 
=======
        setState(1910);
        match(CypherParser::SP);
      }
      setState(1913);
      kU_BitwiseOrOperatorExpression();
      setState(1923); 
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
<<<<<<< HEAD
                setState(1932);
=======
                setState(1915);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
<<<<<<< HEAD
                  setState(1931);
                  match(CypherParser::SP);
                }
                setState(1934);
                kU_ComparisonOperator();
                setState(1936);
=======
                  setState(1914);
                  match(CypherParser::SP);
                }
                setState(1917);
                kU_ComparisonOperator();
                setState(1919);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
<<<<<<< HEAD
                  setState(1935);
                  match(CypherParser::SP);
                }
                setState(1938);
=======
                  setState(1918);
                  match(CypherParser::SP);
                }
                setState(1921);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
                kU_BitwiseOrOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
<<<<<<< HEAD
        setState(1942); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx);
=======
        setState(1925); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
       notifyNonBinaryComparison(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ComparisonOperatorContext ------------------------------------------------------------------

CypherParser::KU_ComparisonOperatorContext::KU_ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_ComparisonOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_ComparisonOperator;
}


CypherParser::KU_ComparisonOperatorContext* CypherParser::kU_ComparisonOperator() {
  KU_ComparisonOperatorContext *_localctx = _tracker.createInstance<KU_ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 218, CypherParser::RuleKU_ComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1948);
=======
    setState(1931);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 254016) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseOrOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseOrOperatorExpressionContext::KU_BitwiseOrOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseAndOperatorExpressionContext *> CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseAndOperatorExpressionContext>();
}

CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseAndOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseOrOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseOrOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseOrOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseOrOperatorExpression;
}


CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::kU_BitwiseOrOperatorExpression() {
  KU_BitwiseOrOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseOrOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 220, CypherParser::RuleKU_BitwiseOrOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1950);
    kU_BitwiseAndOperatorExpression();
    setState(1961);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1952);
=======
    setState(1933);
    kU_BitwiseAndOperatorExpression();
    setState(1944);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1935);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1951);
          match(CypherParser::SP);
        }
        setState(1954);
        match(CypherParser::T__10);
        setState(1956);
=======
          setState(1934);
          match(CypherParser::SP);
        }
        setState(1937);
        match(CypherParser::T__10);
        setState(1939);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1955);
          match(CypherParser::SP);
        }
        setState(1958);
        kU_BitwiseAndOperatorExpression(); 
      }
      setState(1963);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx);
=======
          setState(1938);
          match(CypherParser::SP);
        }
        setState(1941);
        kU_BitwiseAndOperatorExpression(); 
      }
      setState(1946);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseAndOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseAndOperatorExpressionContext::KU_BitwiseAndOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitShiftOperatorExpressionContext *> CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorExpressionContext>();
}

CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseAndOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseAndOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseAndOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseAndOperatorExpression;
}


CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::kU_BitwiseAndOperatorExpression() {
  KU_BitwiseAndOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseAndOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 222, CypherParser::RuleKU_BitwiseAndOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1964);
    kU_BitShiftOperatorExpression();
    setState(1975);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1966);
=======
    setState(1947);
    kU_BitShiftOperatorExpression();
    setState(1958);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1949);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1965);
          match(CypherParser::SP);
        }
        setState(1968);
        match(CypherParser::T__17);
        setState(1970);
=======
          setState(1948);
          match(CypherParser::SP);
        }
        setState(1951);
        match(CypherParser::T__17);
        setState(1953);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1969);
          match(CypherParser::SP);
        }
        setState(1972);
        kU_BitShiftOperatorExpression(); 
      }
      setState(1977);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
=======
          setState(1952);
          match(CypherParser::SP);
        }
        setState(1955);
        kU_BitShiftOperatorExpression(); 
      }
      setState(1960);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorExpressionContext::KU_BitShiftOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AddOrSubtractExpressionContext *> CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContexts<CypherParser::OC_AddOrSubtractExpressionContext>();
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AddOrSubtractExpressionContext>(i);
}

std::vector<CypherParser::KU_BitShiftOperatorContext *> CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorContext>();
}

CypherParser::KU_BitShiftOperatorContext* CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitShiftOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitShiftOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitShiftOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperatorExpression;
}


CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::kU_BitShiftOperatorExpression() {
  KU_BitShiftOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 224, CypherParser::RuleKU_BitShiftOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1978);
    oC_AddOrSubtractExpression();
    setState(1990);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1980);
=======
    setState(1961);
    oC_AddOrSubtractExpression();
    setState(1973);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1963);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1979);
          match(CypherParser::SP);
        }
        setState(1982);
        kU_BitShiftOperator();
        setState(1984);
=======
          setState(1962);
          match(CypherParser::SP);
        }
        setState(1965);
        kU_BitShiftOperator();
        setState(1967);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1983);
          match(CypherParser::SP);
        }
        setState(1986);
        oC_AddOrSubtractExpression(); 
      }
      setState(1992);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx);
=======
          setState(1966);
          match(CypherParser::SP);
        }
        setState(1969);
        oC_AddOrSubtractExpression(); 
      }
      setState(1975);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorContext::KU_BitShiftOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_BitShiftOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperator;
}


CypherParser::KU_BitShiftOperatorContext* CypherParser::kU_BitShiftOperator() {
  KU_BitShiftOperatorContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorContext>(_ctx, getState());
  enterRule(_localctx, 226, CypherParser::RuleKU_BitShiftOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1993);
=======
    setState(1976);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__18

    || _la == CypherParser::T__19)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

CypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_MultiplyDivideModuloExpressionContext *> CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<CypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<CypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<CypherParser::KU_AddOrSubtractOperatorContext *> CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator() {
  return getRuleContexts<CypherParser::KU_AddOrSubtractOperatorContext>();
}

CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator(size_t i) {
  return getRuleContext<CypherParser::KU_AddOrSubtractOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AddOrSubtractExpression;
}


CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 228, CypherParser::RuleOC_AddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(1995);
    oC_MultiplyDivideModuloExpression();
    setState(2007);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1997);
=======
    setState(1978);
    oC_MultiplyDivideModuloExpression();
    setState(1990);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1980);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1996);
          match(CypherParser::SP);
        }
        setState(1999);
        kU_AddOrSubtractOperator();
        setState(2001);
=======
          setState(1979);
          match(CypherParser::SP);
        }
        setState(1982);
        kU_AddOrSubtractOperator();
        setState(1984);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(2000);
          match(CypherParser::SP);
        }
        setState(2003);
        oC_MultiplyDivideModuloExpression(); 
      }
      setState(2009);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx);
=======
          setState(1983);
          match(CypherParser::SP);
        }
        setState(1986);
        oC_MultiplyDivideModuloExpression(); 
      }
      setState(1992);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddOrSubtractOperatorContext ------------------------------------------------------------------

CypherParser::KU_AddOrSubtractOperatorContext::KU_AddOrSubtractOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddOrSubtractOperatorContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_AddOrSubtractOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddOrSubtractOperator;
}


CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::kU_AddOrSubtractOperator() {
  KU_AddOrSubtractOperatorContext *_localctx = _tracker.createInstance<KU_AddOrSubtractOperatorContext>(_ctx, getState());
  enterRule(_localctx, 230, CypherParser::RuleKU_AddOrSubtractOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2010);
=======
    setState(1993);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__20 || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

CypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PowerOfExpressionContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<CypherParser::OC_PowerOfExpressionContext>();
}

CypherParser::OC_PowerOfExpressionContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<CypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<CypherParser::KU_MultiplyDivideModuloOperatorContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator() {
  return getRuleContexts<CypherParser::KU_MultiplyDivideModuloOperatorContext>();
}

CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator(size_t i) {
  return getRuleContext<CypherParser::KU_MultiplyDivideModuloOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiplyDivideModuloExpression;
}


CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
  enterRule(_localctx, 232, CypherParser::RuleOC_MultiplyDivideModuloExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2012);
    oC_PowerOfExpression();
    setState(2024);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2014);
=======
    setState(1995);
    oC_PowerOfExpression();
    setState(2007);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1997);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(2013);
          match(CypherParser::SP);
        }
        setState(2016);
        kU_MultiplyDivideModuloOperator();
        setState(2018);
=======
          setState(1996);
          match(CypherParser::SP);
        }
        setState(1999);
        kU_MultiplyDivideModuloOperator();
        setState(2001);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(2017);
          match(CypherParser::SP);
        }
        setState(2020);
        oC_PowerOfExpression(); 
      }
      setState(2026);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx);
=======
          setState(2000);
          match(CypherParser::SP);
        }
        setState(2003);
        oC_PowerOfExpression(); 
      }
      setState(2009);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MultiplyDivideModuloOperatorContext ------------------------------------------------------------------

CypherParser::KU_MultiplyDivideModuloOperatorContext::KU_MultiplyDivideModuloOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MultiplyDivideModuloOperatorContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}


size_t CypherParser::KU_MultiplyDivideModuloOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_MultiplyDivideModuloOperator;
}


CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::kU_MultiplyDivideModuloOperator() {
  KU_MultiplyDivideModuloOperatorContext *_localctx = _tracker.createInstance<KU_MultiplyDivideModuloOperatorContext>(_ctx, getState());
  enterRule(_localctx, 234, CypherParser::RuleKU_MultiplyDivideModuloOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2027);
=======
    setState(2010);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__21

    || _la == CypherParser::T__22 || _la == CypherParser::STAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

CypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext *> CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression() {
  return getRuleContexts<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>();
}

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression(size_t i) {
  return getRuleContext<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PowerOfExpression;
}


CypherParser::OC_PowerOfExpressionContext* CypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
  enterRule(_localctx, 236, CypherParser::RuleOC_PowerOfExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2029);
    oC_UnaryAddSubtractOrFactorialExpression();
    setState(2040);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2031);
=======
    setState(2012);
    oC_UnaryAddSubtractOrFactorialExpression();
    setState(2023);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 329, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2014);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(2030);
          match(CypherParser::SP);
        }
        setState(2033);
        match(CypherParser::T__23);
        setState(2035);
=======
          setState(2013);
          match(CypherParser::SP);
        }
        setState(2016);
        match(CypherParser::T__23);
        setState(2018);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(2034);
          match(CypherParser::SP);
        }
        setState(2037);
        oC_UnaryAddSubtractOrFactorialExpression(); 
      }
      setState(2042);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx);
=======
          setState(2017);
          match(CypherParser::SP);
        }
        setState(2020);
        oC_UnaryAddSubtractOrFactorialExpression(); 
      }
      setState(2025);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 329, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddSubtractOrFactorialExpressionContext ------------------------------------------------------------------

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::OC_UnaryAddSubtractOrFactorialExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::oC_StringListNullOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringListNullOperatorExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS() {
  return getTokens(CypherParser::MINUS);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS(size_t i) {
  return getToken(CypherParser::MINUS, i);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::FACTORIAL() {
  return getToken(CypherParser::FACTORIAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression;
}


CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::oC_UnaryAddSubtractOrFactorialExpression() {
  OC_UnaryAddSubtractOrFactorialExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddSubtractOrFactorialExpressionContext>(_ctx, getState());
  enterRule(_localctx, 238, CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2049);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::MINUS) {
      setState(2043);
      match(CypherParser::MINUS);
      setState(2045);
=======
    setState(2032);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::MINUS) {
      setState(2026);
      match(CypherParser::MINUS);
      setState(2028);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(2044);
        match(CypherParser::SP);
      }
      setState(2051);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2052);
    oC_StringListNullOperatorExpression();
    setState(2057);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 337, _ctx)) {
    case 1: {
      setState(2054);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2053);
        match(CypherParser::SP);
      }
      setState(2056);
=======
        setState(2027);
        match(CypherParser::SP);
      }
      setState(2034);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2035);
    oC_StringListNullOperatorExpression();
    setState(2040);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx)) {
    case 1: {
      setState(2037);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2036);
        match(CypherParser::SP);
      }
      setState(2039);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::FACTORIAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringListNullOperatorExpressionContext::OC_StringListNullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_StringOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringOperatorExpressionContext>(0);
}

CypherParser::OC_NullOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression() {
  return getRuleContext<CypherParser::OC_NullOperatorExpressionContext>(0);
}

std::vector<CypherParser::OC_ListOperatorExpressionContext *> CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<CypherParser::OC_ListOperatorExpressionContext>();
}

CypherParser::OC_ListOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_ListOperatorExpressionContext>(i);
}


size_t CypherParser::OC_StringListNullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringListNullOperatorExpression;
}


CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::oC_StringListNullOperatorExpression() {
  OC_StringListNullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 240, CypherParser::RuleOC_StringListNullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2059);
    oC_PropertyOrLabelsExpression();
    setState(2067);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx)) {
    case 1: {
      setState(2060);
=======
    setState(2042);
    oC_PropertyOrLabelsExpression();
    setState(2050);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx)) {
    case 1: {
      setState(2043);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_StringOperatorExpression();
      break;
    }

    case 2: {
<<<<<<< HEAD
      setState(2062); 
=======
      setState(2045); 
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
<<<<<<< HEAD
                setState(2061);
=======
                setState(2044);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
                oC_ListOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
<<<<<<< HEAD
        setState(2064); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx);
=======
        setState(2047); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 3: {
<<<<<<< HEAD
      setState(2066);
=======
      setState(2049);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_NullOperatorExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::IN() {
  return getToken(CypherParser::IN, 0);
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_ListOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}


size_t CypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListOperatorExpression;
}


CypherParser::OC_ListOperatorExpressionContext* CypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 242, CypherParser::RuleOC_ListOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(2088);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 343, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2069);
      match(CypherParser::SP);
      setState(2070);
      match(CypherParser::IN);
      setState(2072);
=======
    setState(2071);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2052);
      match(CypherParser::SP);
      setState(2053);
      match(CypherParser::IN);
      setState(2055);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(2071);
        match(CypherParser::SP);
      }
      setState(2074);
=======
        setState(2054);
        match(CypherParser::SP);
      }
      setState(2057);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_PropertyOrLabelsExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
      setState(2075);
      match(CypherParser::T__6);
      setState(2076);
      oC_Expression();
      setState(2077);
=======
      setState(2058);
      match(CypherParser::T__6);
      setState(2059);
      oC_Expression();
      setState(2060);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::T__7);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
      setState(2079);
      match(CypherParser::T__6);
      setState(2081);
=======
      setState(2062);
      match(CypherParser::T__6);
      setState(2064);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -8141100751335193980) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
        ((1ULL << (_la - 64)) & 5764607523034538047) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 319199209) != 0)) {
        setState(2080);
        oC_Expression();
      }
      setState(2083);
      match(CypherParser::COLON);
      setState(2085);
=======
        ((1ULL << (_la - 64)) & 2882303761517256767) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
        ((1ULL << (_la - 128)) & 319199209) != 0)) {
        setState(2058);
=======
        ((1ULL << (_la - 128)) & 319199201) != 0)) {
        setState(2063);
>>>>>>> cacacb962 (Support basic default values in creates and alter; squash for rebase)
        oC_Expression();
      }
      setState(2066);
      match(CypherParser::COLON);
      setState(2068);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -8141100751335193980) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
        ((1ULL << (_la - 64)) & 5764607523034538047) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 319199209) != 0)) {
        setState(2084);
        oC_Expression();
      }
      setState(2087);
=======
        ((1ULL << (_la - 64)) & 2882303761517256767) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
        ((1ULL << (_la - 128)) & 319199209) != 0)) {
        setState(2062);
=======
        ((1ULL << (_la - 128)) & 319199201) != 0)) {
        setState(2067);
>>>>>>> cacacb962 (Support basic default values in creates and alter; squash for rebase)
        oC_Expression();
      }
      setState(2070);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::T__7);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringOperatorExpressionContext::OC_StringOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_RegularExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_RegularExpression() {
  return getRuleContext<CypherParser::OC_RegularExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_StringOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::STARTS() {
  return getToken(CypherParser::STARTS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::ENDS() {
  return getToken(CypherParser::ENDS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}


size_t CypherParser::OC_StringOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringOperatorExpression;
}


CypherParser::OC_StringOperatorExpressionContext* CypherParser::oC_StringOperatorExpression() {
  OC_StringOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 244, CypherParser::RuleOC_StringOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2101);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx)) {
    case 1: {
      setState(2090);
=======
    setState(2084);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 340, _ctx)) {
    case 1: {
      setState(2073);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_RegularExpression();
      break;
    }

    case 2: {
<<<<<<< HEAD
      setState(2091);
      match(CypherParser::SP);
      setState(2092);
      match(CypherParser::STARTS);
      setState(2093);
      match(CypherParser::SP);
      setState(2094);
=======
      setState(2074);
      match(CypherParser::SP);
      setState(2075);
      match(CypherParser::STARTS);
      setState(2076);
      match(CypherParser::SP);
      setState(2077);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::WITH);
      break;
    }

    case 3: {
<<<<<<< HEAD
      setState(2095);
      match(CypherParser::SP);
      setState(2096);
      match(CypherParser::ENDS);
      setState(2097);
      match(CypherParser::SP);
      setState(2098);
=======
      setState(2078);
      match(CypherParser::SP);
      setState(2079);
      match(CypherParser::ENDS);
      setState(2080);
      match(CypherParser::SP);
      setState(2081);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::WITH);
      break;
    }

    case 4: {
<<<<<<< HEAD
      setState(2099);
      match(CypherParser::SP);
      setState(2100);
=======
      setState(2082);
      match(CypherParser::SP);
      setState(2083);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::CONTAINS);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(2104);
=======
    setState(2087);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2103);
      match(CypherParser::SP);
    }
    setState(2106);
=======
      setState(2086);
      match(CypherParser::SP);
    }
    setState(2089);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_PropertyOrLabelsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularExpressionContext ------------------------------------------------------------------

CypherParser::OC_RegularExpressionContext::OC_RegularExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RegularExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_RegularExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularExpression;
}


CypherParser::OC_RegularExpressionContext* CypherParser::oC_RegularExpression() {
  OC_RegularExpressionContext *_localctx = _tracker.createInstance<OC_RegularExpressionContext>(_ctx, getState());
  enterRule(_localctx, 246, CypherParser::RuleOC_RegularExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2109);
=======
    setState(2092);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2108);
      match(CypherParser::SP);
    }
    setState(2111);
=======
      setState(2091);
      match(CypherParser::SP);
    }
    setState(2094);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::T__24);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_NullOperatorExpressionContext::OC_NullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NullOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}


size_t CypherParser::OC_NullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NullOperatorExpression;
}


CypherParser::OC_NullOperatorExpressionContext* CypherParser::oC_NullOperatorExpression() {
  OC_NullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 248, CypherParser::RuleOC_NullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(2123);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 347, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2113);
      match(CypherParser::SP);
      setState(2114);
      match(CypherParser::IS);
      setState(2115);
      match(CypherParser::SP);
      setState(2116);
=======
    setState(2106);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 343, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2096);
      match(CypherParser::SP);
      setState(2097);
      match(CypherParser::IS);
      setState(2098);
      match(CypherParser::SP);
      setState(2099);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
      setState(2117);
      match(CypherParser::SP);
      setState(2118);
      match(CypherParser::IS);
      setState(2119);
      match(CypherParser::SP);
      setState(2120);
      match(CypherParser::NOT);
      setState(2121);
      match(CypherParser::SP);
      setState(2122);
=======
      setState(2100);
      match(CypherParser::SP);
      setState(2101);
      match(CypherParser::IS);
      setState(2102);
      match(CypherParser::SP);
      setState(2103);
      match(CypherParser::NOT);
      setState(2104);
      match(CypherParser::SP);
      setState(2105);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyOrLabelsExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyOrLabelsExpressionContext::OC_PropertyOrLabelsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

std::vector<CypherParser::OC_PropertyLookupContext *> CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<CypherParser::OC_PropertyLookupContext>();
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PropertyOrLabelsExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PropertyOrLabelsExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PropertyOrLabelsExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyOrLabelsExpression;
}


CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::oC_PropertyOrLabelsExpression() {
  OC_PropertyOrLabelsExpressionContext *_localctx = _tracker.createInstance<OC_PropertyOrLabelsExpressionContext>(_ctx, getState());
  enterRule(_localctx, 250, CypherParser::RuleOC_PropertyOrLabelsExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2125);
    oC_Atom();
    setState(2132);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 349, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2127);
=======
    setState(2108);
    oC_Atom();
    setState(2115);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 345, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2110);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(2126);
          match(CypherParser::SP);
        }
        setState(2129);
        oC_PropertyLookup(); 
      }
      setState(2134);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 349, _ctx);
=======
          setState(2109);
          match(CypherParser::SP);
        }
        setState(2112);
        oC_PropertyLookup(); 
      }
      setState(2117);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 345, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

CypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LiteralContext* CypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

CypherParser::OC_ParameterContext* CypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<CypherParser::OC_ParameterContext>(0);
}

CypherParser::OC_CaseExpressionContext* CypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<CypherParser::OC_CaseExpressionContext>(0);
}

CypherParser::OC_ParenthesizedExpressionContext* CypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<CypherParser::OC_ParenthesizedExpressionContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_PathPatternsContext* CypherParser::OC_AtomContext::oC_PathPatterns() {
  return getRuleContext<CypherParser::OC_PathPatternsContext>(0);
}

CypherParser::OC_ExistSubqueryContext* CypherParser::OC_AtomContext::oC_ExistSubquery() {
  return getRuleContext<CypherParser::OC_ExistSubqueryContext>(0);
}

CypherParser::KU_CountSubqueryContext* CypherParser::OC_AtomContext::kU_CountSubquery() {
  return getRuleContext<CypherParser::KU_CountSubqueryContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_AtomContext::getRuleIndex() const {
  return CypherParser::RuleOC_Atom;
}


CypherParser::OC_AtomContext* CypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
  enterRule(_localctx, 252, CypherParser::RuleOC_Atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(2144);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 350, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2135);
=======
    setState(2127);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 346, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2118);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
      setState(2136);
=======
      setState(2119);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
      setState(2137);
=======
      setState(2120);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
<<<<<<< HEAD
      setState(2138);
=======
      setState(2121);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_ParenthesizedExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
<<<<<<< HEAD
      setState(2139);
=======
      setState(2122);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_FunctionInvocation();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
<<<<<<< HEAD
      setState(2140);
=======
      setState(2123);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_PathPatterns();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
<<<<<<< HEAD
      setState(2141);
=======
      setState(2124);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_ExistSubquery();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
<<<<<<< HEAD
      setState(2142);
=======
      setState(2125);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      kU_CountSubquery();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
<<<<<<< HEAD
      setState(2143);
=======
      setState(2126);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

CypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NumberLiteralContext* CypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<CypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_BooleanLiteralContext* CypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<CypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

CypherParser::OC_ListLiteralContext* CypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<CypherParser::OC_ListLiteralContext>(0);
}

CypherParser::KU_StructLiteralContext* CypherParser::OC_LiteralContext::kU_StructLiteral() {
  return getRuleContext<CypherParser::KU_StructLiteralContext>(0);
}


size_t CypherParser::OC_LiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_Literal;
}


CypherParser::OC_LiteralContext* CypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
  enterRule(_localctx, 254, CypherParser::RuleOC_Literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(2152);
=======
    setState(2135);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::DecimalInteger:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
        setState(2146);
=======
        setState(2129);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_NumberLiteral();
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
        setState(2147);
=======
        setState(2130);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::TRUE:
      case CypherParser::FALSE: {
        enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
        setState(2148);
=======
        setState(2131);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_BooleanLiteral();
        break;
      }

      case CypherParser::NULL_: {
        enterOuterAlt(_localctx, 4);
<<<<<<< HEAD
        setState(2149);
=======
        setState(2132);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        match(CypherParser::NULL_);
        break;
      }

      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 5);
<<<<<<< HEAD
        setState(2150);
=======
        setState(2133);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_ListLiteral();
        break;
      }

      case CypherParser::T__8: {
        enterOuterAlt(_localctx, 6);
<<<<<<< HEAD
        setState(2151);
=======
        setState(2134);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        kU_StructLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

CypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::TRUE() {
  return getToken(CypherParser::TRUE, 0);
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::FALSE() {
  return getToken(CypherParser::FALSE, 0);
}


size_t CypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_BooleanLiteral;
}


CypherParser::OC_BooleanLiteralContext* CypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 256, CypherParser::RuleOC_BooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2154);
=======
    setState(2137);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _la = _input->LA(1);
    if (!(_la == CypherParser::TRUE

    || _la == CypherParser::FALSE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

CypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<CypherParser::KU_ListEntryContext *> CypherParser::OC_ListLiteralContext::kU_ListEntry() {
  return getRuleContexts<CypherParser::KU_ListEntryContext>();
}

CypherParser::KU_ListEntryContext* CypherParser::OC_ListLiteralContext::kU_ListEntry(size_t i) {
  return getRuleContext<CypherParser::KU_ListEntryContext>(i);
}


size_t CypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListLiteral;
}


CypherParser::OC_ListLiteralContext* CypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 258, CypherParser::RuleOC_ListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2156);
    match(CypherParser::T__6);
    setState(2158);
=======
    setState(2139);
    match(CypherParser::T__6);
    setState(2141);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2157);
      match(CypherParser::SP);
    }
    setState(2173);
=======
      setState(2140);
      match(CypherParser::SP);
    }
    setState(2156);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8141100751335193980) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
      ((1ULL << (_la - 64)) & 5764607523034538047) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 319199209) != 0)) {
      setState(2160);
      oC_Expression();
      setState(2162);
=======
      ((1ULL << (_la - 64)) & 2882303761517256767) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
      ((1ULL << (_la - 128)) & 319199209) != 0)) {
      setState(2138);
=======
      ((1ULL << (_la - 128)) & 319199201) != 0)) {
      setState(2143);
>>>>>>> cacacb962 (Support basic default values in creates and alter; squash for rebase)
      oC_Expression();
      setState(2145);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(2161);
        match(CypherParser::SP);
      }
      setState(2170);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(2164);
        kU_ListEntry();
        setState(2166);
=======
        setState(2144);
        match(CypherParser::SP);
      }
      setState(2153);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(2147);
        kU_ListEntry();
        setState(2149);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(2165);
          match(CypherParser::SP);
        }
        setState(2172);
=======
          setState(2148);
          match(CypherParser::SP);
        }
        setState(2155);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
<<<<<<< HEAD
    setState(2175);
=======
    setState(2158);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListEntryContext ------------------------------------------------------------------

CypherParser::KU_ListEntryContext::KU_ListEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ListEntryContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListEntryContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_ListEntryContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListEntry;
}


CypherParser::KU_ListEntryContext* CypherParser::kU_ListEntry() {
  KU_ListEntryContext *_localctx = _tracker.createInstance<KU_ListEntryContext>(_ctx, getState());
  enterRule(_localctx, 260, CypherParser::RuleKU_ListEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2177);
    match(CypherParser::T__2);
    setState(2179);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 357, _ctx)) {
    case 1: {
      setState(2178);
=======
    setState(2160);
    match(CypherParser::T__2);
    setState(2162);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 353, _ctx)) {
    case 1: {
      setState(2161);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(2182);
=======
    setState(2165);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8141100751335193980) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
      ((1ULL << (_la - 64)) & 5764607523034538047) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 319199209) != 0)) {
      setState(2181);
=======
      ((1ULL << (_la - 64)) & 2882303761517256767) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
      ((1ULL << (_la - 128)) & 319199209) != 0)) {
      setState(2159);
=======
      ((1ULL << (_la - 128)) & 319199201) != 0)) {
      setState(2164);
>>>>>>> cacacb962 (Support basic default values in creates and alter; squash for rebase)
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructLiteralContext ------------------------------------------------------------------

CypherParser::KU_StructLiteralContext::KU_StructLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_StructFieldContext *> CypherParser::KU_StructLiteralContext::kU_StructField() {
  return getRuleContexts<CypherParser::KU_StructFieldContext>();
}

CypherParser::KU_StructFieldContext* CypherParser::KU_StructLiteralContext::kU_StructField(size_t i) {
  return getRuleContext<CypherParser::KU_StructFieldContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructLiteralContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructLiteral;
}


CypherParser::KU_StructLiteralContext* CypherParser::kU_StructLiteral() {
  KU_StructLiteralContext *_localctx = _tracker.createInstance<KU_StructLiteralContext>(_ctx, getState());
  enterRule(_localctx, 262, CypherParser::RuleKU_StructLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2184);
    match(CypherParser::T__8);
    setState(2186);
=======
    setState(2167);
    match(CypherParser::T__8);
    setState(2169);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2185);
      match(CypherParser::SP);
    }
    setState(2188);
    kU_StructField();
    setState(2190);
=======
      setState(2168);
      match(CypherParser::SP);
    }
    setState(2171);
    kU_StructField();
    setState(2173);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2189);
      match(CypherParser::SP);
    }
    setState(2202);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(2192);
      match(CypherParser::T__2);
      setState(2194);
=======
      setState(2172);
      match(CypherParser::SP);
    }
    setState(2185);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(2175);
      match(CypherParser::T__2);
      setState(2177);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(2193);
        match(CypherParser::SP);
      }
      setState(2196);
      kU_StructField();
      setState(2198);
=======
        setState(2176);
        match(CypherParser::SP);
      }
      setState(2179);
      kU_StructField();
      setState(2181);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(2197);
        match(CypherParser::SP);
      }
      setState(2204);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2205);
=======
        setState(2180);
        match(CypherParser::SP);
      }
      setState(2187);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2188);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructFieldContext ------------------------------------------------------------------

CypherParser::KU_StructFieldContext::KU_StructFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StructFieldContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StructFieldContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructFieldContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructFieldContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructField;
}


CypherParser::KU_StructFieldContext* CypherParser::kU_StructField() {
  KU_StructFieldContext *_localctx = _tracker.createInstance<KU_StructFieldContext>(_ctx, getState());
  enterRule(_localctx, 264, CypherParser::RuleKU_StructField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2209);
=======
    setState(2192);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
<<<<<<< HEAD
        setState(2207);
=======
        setState(2190);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_SymbolicName();
        break;
      }

      case CypherParser::StringLiteral: {
<<<<<<< HEAD
        setState(2208);
=======
        setState(2191);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        match(CypherParser::StringLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
<<<<<<< HEAD
    setState(2212);
=======
    setState(2195);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2211);
      match(CypherParser::SP);
    }
    setState(2214);
    match(CypherParser::COLON);
    setState(2216);
=======
      setState(2194);
      match(CypherParser::SP);
    }
    setState(2197);
    match(CypherParser::COLON);
    setState(2199);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2215);
      match(CypherParser::SP);
    }
    setState(2218);
=======
      setState(2198);
      match(CypherParser::SP);
    }
    setState(2201);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

CypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ParenthesizedExpression;
}


CypherParser::OC_ParenthesizedExpressionContext* CypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 266, CypherParser::RuleOC_ParenthesizedExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2220);
    match(CypherParser::T__1);
    setState(2222);
=======
    setState(2203);
    match(CypherParser::T__1);
    setState(2205);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2221);
      match(CypherParser::SP);
    }
    setState(2224);
    oC_Expression();
    setState(2226);
=======
      setState(2204);
      match(CypherParser::SP);
    }
    setState(2207);
    oC_Expression();
    setState(2209);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2225);
      match(CypherParser::SP);
    }
    setState(2228);
=======
      setState(2208);
      match(CypherParser::SP);
    }
    setState(2211);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

CypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionNameContext* CypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

std::vector<CypherParser::KU_FunctionParameterContext *> CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter() {
  return getRuleContexts<CypherParser::KU_FunctionParameterContext>();
}

CypherParser::KU_FunctionParameterContext* CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter(size_t i) {
  return getRuleContext<CypherParser::KU_FunctionParameterContext>(i);
}


size_t CypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionInvocation;
}


CypherParser::OC_FunctionInvocationContext* CypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
  enterRule(_localctx, 268, CypherParser::RuleOC_FunctionInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(2278);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 381, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2230);
      match(CypherParser::COUNT);
      setState(2232);
=======
    setState(2261);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 377, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2213);
      match(CypherParser::COUNT);
      setState(2215);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(2231);
        match(CypherParser::SP);
      }
      setState(2234);
      match(CypherParser::T__1);
      setState(2236);
=======
        setState(2214);
        match(CypherParser::SP);
      }
      setState(2217);
      match(CypherParser::T__1);
      setState(2219);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(2235);
        match(CypherParser::SP);
      }
      setState(2238);
      match(CypherParser::STAR);
      setState(2240);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2239);
        match(CypherParser::SP);
      }
      setState(2242);
      match(CypherParser::T__3);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2243);
      oC_FunctionName();
      setState(2245);
=======
        setState(2218);
        match(CypherParser::SP);
      }
      setState(2221);
      match(CypherParser::STAR);
      setState(2223);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2244);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
      setState(2247);
      match(CypherParser::T__1);
      setState(2249);
=======
      setState(2225);
      match(CypherParser::T__3);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2226);
      oC_FunctionName();
      setState(2228);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(2248);
        match(CypherParser::SP);
      }
      setState(2255);
=======
        setState(2227);
        match(CypherParser::SP);
      }
      setState(2230);
      match(CypherParser::T__1);
      setState(2232);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2231);
        match(CypherParser::SP);
      }
      setState(2238);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DISTINCT) {
<<<<<<< HEAD
        setState(2251);
        match(CypherParser::DISTINCT);
        setState(2253);
=======
        setState(2234);
        match(CypherParser::DISTINCT);
        setState(2236);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(2252);
          match(CypherParser::SP);
        }
      }
      setState(2274);
=======
          setState(2235);
          match(CypherParser::SP);
        }
      }
      setState(2257);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -8141100751335193980) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
        ((1ULL << (_la - 64)) & 5764607523034538047) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 319199209) != 0)) {
        setState(2257);
        kU_FunctionParameter();
        setState(2259);
=======
        ((1ULL << (_la - 64)) & 2882303761517256767) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
        ((1ULL << (_la - 128)) & 319199209) != 0)) {
        setState(2235);
=======
        ((1ULL << (_la - 128)) & 319199201) != 0)) {
        setState(2240);
>>>>>>> cacacb962 (Support basic default values in creates and alter; squash for rebase)
        kU_FunctionParameter();
        setState(2242);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(2258);
          match(CypherParser::SP);
        }
        setState(2271);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2) {
          setState(2261);
          match(CypherParser::T__2);
          setState(2263);
=======
          setState(2241);
          match(CypherParser::SP);
        }
        setState(2254);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2) {
          setState(2244);
          match(CypherParser::T__2);
          setState(2246);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
<<<<<<< HEAD
            setState(2262);
            match(CypherParser::SP);
          }
          setState(2265);
          kU_FunctionParameter();
          setState(2267);
=======
            setState(2245);
            match(CypherParser::SP);
          }
          setState(2248);
          kU_FunctionParameter();
          setState(2250);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
<<<<<<< HEAD
            setState(2266);
            match(CypherParser::SP);
          }
          setState(2273);
=======
            setState(2249);
            match(CypherParser::SP);
          }
          setState(2256);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
<<<<<<< HEAD
      setState(2276);
=======
      setState(2259);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

CypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionName;
}


CypherParser::OC_FunctionNameContext* CypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 270, CypherParser::RuleOC_FunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2280);
=======
    setState(2263);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FunctionParameterContext ------------------------------------------------------------------

CypherParser::KU_FunctionParameterContext::KU_FunctionParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_FunctionParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_FunctionParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FunctionParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_FunctionParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_FunctionParameter;
}


CypherParser::KU_FunctionParameterContext* CypherParser::kU_FunctionParameter() {
  KU_FunctionParameterContext *_localctx = _tracker.createInstance<KU_FunctionParameterContext>(_ctx, getState());
  enterRule(_localctx, 272, CypherParser::RuleKU_FunctionParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2291);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 384, _ctx)) {
    case 1: {
      setState(2282);
      oC_SymbolicName();
      setState(2284);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2283);
        match(CypherParser::SP);
      }
      setState(2286);
      match(CypherParser::COLON);
      setState(2287);
      match(CypherParser::T__5);
      setState(2289);
=======
    setState(2274);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 380, _ctx)) {
    case 1: {
      setState(2265);
      oC_SymbolicName();
      setState(2267);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2288);
        match(CypherParser::SP);
      }
      setState(2269);
      match(CypherParser::COLON);
      setState(2270);
      match(CypherParser::T__5);
      setState(2272);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2271);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(2293);
=======
    setState(2276);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PathPatternsContext ------------------------------------------------------------------

CypherParser::OC_PathPatternsContext::OC_PathPatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PathPatternsContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PathPatternsContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PathPatternsContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PathPatternsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PathPatternsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PathPatternsContext::getRuleIndex() const {
  return CypherParser::RuleOC_PathPatterns;
}


CypherParser::OC_PathPatternsContext* CypherParser::oC_PathPatterns() {
  OC_PathPatternsContext *_localctx = _tracker.createInstance<OC_PathPatternsContext>(_ctx, getState());
  enterRule(_localctx, 274, CypherParser::RuleOC_PathPatterns);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2295);
    oC_NodePattern();
    setState(2300); 
=======
    setState(2278);
    oC_NodePattern();
    setState(2283); 
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
<<<<<<< HEAD
              setState(2297);
=======
              setState(2280);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
<<<<<<< HEAD
                setState(2296);
                match(CypherParser::SP);
              }
              setState(2299);
=======
                setState(2279);
                match(CypherParser::SP);
              }
              setState(2282);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
              oC_PatternElementChain();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
<<<<<<< HEAD
      setState(2302); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 386, _ctx);
=======
      setState(2285); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 382, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExistSubqueryContext ------------------------------------------------------------------

CypherParser::OC_ExistSubqueryContext::OC_ExistSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_ExistSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExistSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_ExistSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_ExistSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_ExistSubquery;
}


CypherParser::OC_ExistSubqueryContext* CypherParser::oC_ExistSubquery() {
  OC_ExistSubqueryContext *_localctx = _tracker.createInstance<OC_ExistSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 276, CypherParser::RuleOC_ExistSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2304);
    match(CypherParser::EXISTS);
    setState(2306);
=======
    setState(2287);
    match(CypherParser::EXISTS);
    setState(2289);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2305);
      match(CypherParser::SP);
    }
    setState(2308);
    match(CypherParser::T__8);
    setState(2310);
=======
      setState(2288);
      match(CypherParser::SP);
    }
    setState(2291);
    match(CypherParser::T__8);
    setState(2293);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2309);
      match(CypherParser::SP);
    }
    setState(2312);
    match(CypherParser::MATCH);
    setState(2314);
=======
      setState(2292);
      match(CypherParser::SP);
    }
    setState(2295);
    match(CypherParser::MATCH);
    setState(2297);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2313);
      match(CypherParser::SP);
    }
    setState(2316);
    oC_Pattern();
    setState(2321);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 391, _ctx)) {
    case 1: {
      setState(2318);
=======
      setState(2296);
      match(CypherParser::SP);
    }
    setState(2299);
    oC_Pattern();
    setState(2304);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 387, _ctx)) {
    case 1: {
      setState(2301);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(2317);
        match(CypherParser::SP);
      }
      setState(2320);
=======
        setState(2300);
        match(CypherParser::SP);
      }
      setState(2303);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Where();
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(2324);
=======
    setState(2307);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2323);
      match(CypherParser::SP);
    }
    setState(2326);
=======
      setState(2306);
      match(CypherParser::SP);
    }
    setState(2309);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CountSubqueryContext ------------------------------------------------------------------

CypherParser::KU_CountSubqueryContext::KU_CountSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::KU_CountSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CountSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_CountSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_CountSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleKU_CountSubquery;
}


CypherParser::KU_CountSubqueryContext* CypherParser::kU_CountSubquery() {
  KU_CountSubqueryContext *_localctx = _tracker.createInstance<KU_CountSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 278, CypherParser::RuleKU_CountSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2328);
    match(CypherParser::COUNT);
    setState(2330);
=======
    setState(2311);
    match(CypherParser::COUNT);
    setState(2313);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2329);
      match(CypherParser::SP);
    }
    setState(2332);
    match(CypherParser::T__8);
    setState(2334);
=======
      setState(2312);
      match(CypherParser::SP);
    }
    setState(2315);
    match(CypherParser::T__8);
    setState(2317);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2333);
      match(CypherParser::SP);
    }
    setState(2336);
    match(CypherParser::MATCH);
    setState(2338);
=======
      setState(2316);
      match(CypherParser::SP);
    }
    setState(2319);
    match(CypherParser::MATCH);
    setState(2321);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2337);
      match(CypherParser::SP);
    }
    setState(2340);
    oC_Pattern();
    setState(2345);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 397, _ctx)) {
    case 1: {
      setState(2342);
=======
      setState(2320);
      match(CypherParser::SP);
    }
    setState(2323);
    oC_Pattern();
    setState(2328);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 393, _ctx)) {
    case 1: {
      setState(2325);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(2341);
        match(CypherParser::SP);
      }
      setState(2344);
=======
        setState(2324);
        match(CypherParser::SP);
      }
      setState(2327);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Where();
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(2348);
=======
    setState(2331);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2347);
      match(CypherParser::SP);
    }
    setState(2350);
=======
      setState(2330);
      match(CypherParser::SP);
    }
    setState(2333);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

CypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyLookup;
}


CypherParser::OC_PropertyLookupContext* CypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
  enterRule(_localctx, 280, CypherParser::RuleOC_PropertyLookup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2352);
    match(CypherParser::T__4);
    setState(2354);
=======
    setState(2335);
    match(CypherParser::T__4);
    setState(2337);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2353);
      match(CypherParser::SP);
    }
    setState(2358);
=======
      setState(2336);
      match(CypherParser::SP);
    }
    setState(2341);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
<<<<<<< HEAD
        setState(2356);
=======
        setState(2339);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_PropertyKeyName();
        break;
      }

      case CypherParser::STAR: {
<<<<<<< HEAD
        setState(2357);
=======
        setState(2340);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        match(CypherParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

CypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(CypherParser::ELSE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(CypherParser::CASE, 0);
}

std::vector<CypherParser::OC_CaseAlternativeContext *> CypherParser::OC_CaseExpressionContext::oC_CaseAlternative() {
  return getRuleContexts<CypherParser::OC_CaseAlternativeContext>();
}

CypherParser::OC_CaseAlternativeContext* CypherParser::OC_CaseExpressionContext::oC_CaseAlternative(size_t i) {
  return getRuleContext<CypherParser::OC_CaseAlternativeContext>(i);
}


size_t CypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseExpression;
}


CypherParser::OC_CaseExpressionContext* CypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 282, CypherParser::RuleOC_CaseExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2382);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 406, _ctx)) {
    case 1: {
      setState(2360);
      match(CypherParser::CASE);
      setState(2365); 
=======
    setState(2365);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 402, _ctx)) {
    case 1: {
      setState(2343);
      match(CypherParser::CASE);
      setState(2348); 
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
<<<<<<< HEAD
                setState(2362);
=======
                setState(2345);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
<<<<<<< HEAD
                  setState(2361);
                  match(CypherParser::SP);
                }
                setState(2364);
=======
                  setState(2344);
                  match(CypherParser::SP);
                }
                setState(2347);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
<<<<<<< HEAD
        setState(2367); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 402, _ctx);
=======
        setState(2350); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 398, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
<<<<<<< HEAD
      setState(2369);
      match(CypherParser::CASE);
      setState(2371);
=======
      setState(2352);
      match(CypherParser::CASE);
      setState(2354);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(2370);
        match(CypherParser::SP);
      }
      setState(2373);
      oC_Expression();
      setState(2378); 
=======
        setState(2353);
        match(CypherParser::SP);
      }
      setState(2356);
      oC_Expression();
      setState(2361); 
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
<<<<<<< HEAD
                setState(2375);
=======
                setState(2358);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
<<<<<<< HEAD
                  setState(2374);
                  match(CypherParser::SP);
                }
                setState(2377);
=======
                  setState(2357);
                  match(CypherParser::SP);
                }
                setState(2360);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
<<<<<<< HEAD
        setState(2380); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 405, _ctx);
=======
        setState(2363); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 401, _ctx);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(2392);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 409, _ctx)) {
    case 1: {
      setState(2385);
=======
    setState(2375);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 405, _ctx)) {
    case 1: {
      setState(2368);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(2384);
        match(CypherParser::SP);
      }
      setState(2387);
      match(CypherParser::ELSE);
      setState(2389);
=======
        setState(2367);
        match(CypherParser::SP);
      }
      setState(2370);
      match(CypherParser::ELSE);
      setState(2372);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(2388);
        match(CypherParser::SP);
      }
      setState(2391);
=======
        setState(2371);
        match(CypherParser::SP);
      }
      setState(2374);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
      oC_Expression();
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(2395);
=======
    setState(2378);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2394);
      match(CypherParser::SP);
    }
    setState(2397);
=======
      setState(2377);
      match(CypherParser::SP);
    }
    setState(2380);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativeContext ------------------------------------------------------------------

CypherParser::OC_CaseAlternativeContext::OC_CaseAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::WHEN() {
  return getToken(CypherParser::WHEN, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseAlternativeContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseAlternativeContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::THEN() {
  return getToken(CypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseAlternativeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CaseAlternativeContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseAlternative;
}


CypherParser::OC_CaseAlternativeContext* CypherParser::oC_CaseAlternative() {
  OC_CaseAlternativeContext *_localctx = _tracker.createInstance<OC_CaseAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 284, CypherParser::RuleOC_CaseAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2399);
    match(CypherParser::WHEN);
    setState(2401);
=======
    setState(2382);
    match(CypherParser::WHEN);
    setState(2384);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2400);
      match(CypherParser::SP);
    }
    setState(2403);
    oC_Expression();
    setState(2405);
=======
      setState(2383);
      match(CypherParser::SP);
    }
    setState(2386);
    oC_Expression();
    setState(2388);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2404);
      match(CypherParser::SP);
    }
    setState(2407);
    match(CypherParser::THEN);
    setState(2409);
=======
      setState(2387);
      match(CypherParser::SP);
    }
    setState(2390);
    match(CypherParser::THEN);
    setState(2392);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2408);
      match(CypherParser::SP);
    }
    setState(2411);
=======
      setState(2391);
      match(CypherParser::SP);
    }
    setState(2394);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

CypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_VariableContext::getRuleIndex() const {
  return CypherParser::RuleOC_Variable;
}


CypherParser::OC_VariableContext* CypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
  enterRule(_localctx, 286, CypherParser::RuleOC_Variable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2413);
=======
    setState(2396);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

CypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_DoubleLiteralContext* CypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<CypherParser::OC_DoubleLiteralContext>(0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_NumberLiteral;
}


CypherParser::OC_NumberLiteralContext* CypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 288, CypherParser::RuleOC_NumberLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(2417);
=======
    setState(2400);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
        setState(2415);
=======
        setState(2398);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_DoubleLiteral();
        break;
      }

      case CypherParser::DecimalInteger: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
        setState(2416);
=======
        setState(2399);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

CypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_ParameterContext::getRuleIndex() const {
  return CypherParser::RuleOC_Parameter;
}


CypherParser::OC_ParameterContext* CypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
  enterRule(_localctx, 290, CypherParser::RuleOC_Parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2419);
    match(CypherParser::T__25);
    setState(2422);
=======
    setState(2402);
    match(CypherParser::T__25);
    setState(2405);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
<<<<<<< HEAD
        setState(2420);
=======
        setState(2403);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        oC_SymbolicName();
        break;
      }

      case CypherParser::DecimalInteger: {
<<<<<<< HEAD
        setState(2421);
=======
        setState(2404);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        match(CypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyExpression;
}


CypherParser::OC_PropertyExpressionContext* CypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 292, CypherParser::RuleOC_PropertyExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2424);
    oC_Atom();
    setState(2426);
=======
    setState(2407);
    oC_Atom();
    setState(2409);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(2425);
      match(CypherParser::SP);
    }
    setState(2428);
=======
      setState(2408);
      match(CypherParser::SP);
    }
    setState(2411);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_PropertyLookup();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

CypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyKeyName;
}


CypherParser::OC_PropertyKeyNameContext* CypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
  enterRule(_localctx, 294, CypherParser::RuleOC_PropertyKeyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2430);
=======
    setState(2413);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

CypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_IntegerLiteral;
}


CypherParser::OC_IntegerLiteralContext* CypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 296, CypherParser::RuleOC_IntegerLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2432);
=======
    setState(2415);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

CypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(CypherParser::RegularDecimalReal, 0);
}


size_t CypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_DoubleLiteral;
}


CypherParser::OC_DoubleLiteralContext* CypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 298, CypherParser::RuleOC_DoubleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2434);
=======
    setState(2417);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    match(CypherParser::RegularDecimalReal);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

CypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SchemaName;
}


CypherParser::OC_SchemaNameContext* CypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 300, CypherParser::RuleOC_SchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2436);
=======
    setState(2419);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

CypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(CypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(CypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(CypherParser::HexLetter, 0);
}

CypherParser::KU_NonReservedKeywordsContext* CypherParser::OC_SymbolicNameContext::kU_NonReservedKeywords() {
  return getRuleContext<CypherParser::KU_NonReservedKeywordsContext>(0);
}


size_t CypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SymbolicName;
}


CypherParser::OC_SymbolicNameContext* CypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
  enterRule(_localctx, 302, CypherParser::RuleOC_SymbolicName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
    setState(2443);
=======
    setState(2426);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::UnescapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
        setState(2438);
=======
        setState(2421);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        match(CypherParser::UnescapedSymbolicName);
        break;
      }

      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
        setState(2439);
=======
        setState(2422);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken = match(CypherParser::EscapedSymbolicName);
        if ((antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken != nullptr ? antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken->getText() : "") == "``") { notifyEmptyToken(antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken); }
        break;
      }

      case CypherParser::HexLetter: {
        enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
        setState(2441);
=======
        setState(2424);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        match(CypherParser::HexLetter);
        break;
      }

      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END: {
        enterOuterAlt(_localctx, 4);
<<<<<<< HEAD
        setState(2442);
=======
        setState(2425);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
        kU_NonReservedKeywords();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_NonReservedKeywordsContext ------------------------------------------------------------------

CypherParser::KU_NonReservedKeywordsContext::KU_NonReservedKeywordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMENT_() {
  return getToken(CypherParser::COMMENT_, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IN() {
  return getToken(CypherParser::IN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::START() {
  return getToken(CypherParser::START, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DECIMAL() {
  return getToken(CypherParser::DECIMAL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}


size_t CypherParser::KU_NonReservedKeywordsContext::getRuleIndex() const {
  return CypherParser::RuleKU_NonReservedKeywords;
}


CypherParser::KU_NonReservedKeywordsContext* CypherParser::kU_NonReservedKeywords() {
  KU_NonReservedKeywordsContext *_localctx = _tracker.createInstance<KU_NonReservedKeywordsContext>(_ctx, getState());
  enterRule(_localctx, 304, CypherParser::RuleKU_NonReservedKeywords);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2445);
=======
    setState(2428);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _la = _input->LA(1);
    if (!(((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & 19868389125) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 4361) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_LeftArrowHead;
}


CypherParser::OC_LeftArrowHeadContext* CypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 306, CypherParser::RuleOC_LeftArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2447);
=======
    setState(2430);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2013282304) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_RightArrowHead;
}


CypherParser::OC_RightArrowHeadContext* CypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 308, CypherParser::RuleOC_RightArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2449);
=======
    setState(2432);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 32212320256) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

CypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DashContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::OC_DashContext::getRuleIndex() const {
  return CypherParser::RuleOC_Dash;
}


CypherParser::OC_DashContext* CypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
  enterRule(_localctx, 310, CypherParser::RuleOC_Dash);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
    setState(2451);
=======
    setState(2434);
>>>>>>> 68e182e49 (Support basic default values in creates and alter; squash for rebase)
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 70334384439296) != 0) || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CypherParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 44: return kU_DataTypeSempred(antlrcpp::downCast<KU_DataTypeContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_DataTypeSempred(KU_DataTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 5);

  default:
    break;
  }
  return true;
}

void CypherParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cypherParserInitialize();
#else
  ::antlr4::internal::call_once(cypherParserOnceFlag, cypherParserInitialize);
#endif
}
