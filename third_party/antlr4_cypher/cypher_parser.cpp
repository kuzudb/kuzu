
// Generated from Cypher.g4 by ANTLR 4.13.1



#include "cypher_parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct CypherParserStaticData final {
  CypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CypherParserStaticData(const CypherParserStaticData&) = delete;
  CypherParserStaticData(CypherParserStaticData&&) = delete;
  CypherParserStaticData& operator=(const CypherParserStaticData&) = delete;
  CypherParserStaticData& operator=(CypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cypherParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CypherParserStaticData *cypherParserStaticData = nullptr;

void cypherParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cypherParserStaticData != nullptr) {
    return;
  }
#else
  assert(cypherParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CypherParserStaticData>(
    std::vector<std::string>{
      "ku_Statements", "oC_Cypher", "oC_Statement", "kU_CopyFrom", "kU_ColumnNames", 
      "kU_ScanSource", "kU_CopyFromByColumn", "kU_CopyTO", "kU_ExportDatabase", 
<<<<<<< HEAD
      "kU_ImportDatabase", "kU_AttachDatabase", "kU_Option", "kU_Options", 
      "kU_DetachDatabase", "kU_UseDatabase", "kU_StandaloneCall", "kU_CommentOn", 
      "kU_CreateMacro", "kU_PositionalArgs", "kU_DefaultArg", "kU_FilePaths", 
      "kU_ParsingOptions", "kU_CreateNodeTable", "kU_CreateRelTable", "kU_CreateRelTableGroup", 
      "kU_RelTableConnection", "kU_CreateRdfGraph", "kU_DropTable", "kU_AlterTable", 
      "kU_AlterOptions", "kU_AddProperty", "kU_DropProperty", "kU_RenameTable", 
      "kU_RenameProperty", "kU_PropertyDefinitions", "kU_PropertyDefinition", 
      "kU_CreateNodeConstraint", "kU_DataType", "kU_ListIdentifiers", "kU_ListIdentifier", 
      "oC_AnyCypherOption", "oC_Explain", "oC_Profile", "kU_Transaction", 
      "kU_Extension", "kU_LoadExtension", "kU_InstallExtension", "oC_Query", 
      "oC_RegularQuery", "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", 
      "oC_MultiPartQuery", "kU_QueryPart", "oC_UpdatingClause", "oC_ReadingClause", 
      "kU_LoadFrom", "kU_InQueryCall", "oC_Match", "oC_Unwind", "oC_Create", 
      "oC_Merge", "oC_MergeAction", "oC_Set", "oC_SetItem", "oC_Delete", 
      "oC_With", "oC_Return", "oC_ProjectionBody", "oC_ProjectionItems", 
      "oC_ProjectionItem", "oC_Order", "oC_Skip", "oC_Limit", "oC_SortItem", 
      "oC_Where", "oC_Pattern", "oC_PatternPart", "oC_AnonymousPatternPart", 
      "oC_PatternElement", "oC_NodePattern", "oC_PatternElementChain", "oC_RelationshipPattern", 
      "oC_RelationshipDetail", "kU_Properties", "oC_RelationshipTypes", 
      "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "kU_RecursiveRelationshipComprehension", 
      "kU_IntermediateNodeProjectionItems", "kU_IntermediateRelProjectionItems", 
      "oC_LowerBound", "oC_UpperBound", "oC_LabelName", "oC_RelTypeName", 
      "oC_Expression", "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
      "oC_NotExpression", "oC_ComparisonExpression", "kU_ComparisonOperator", 
      "kU_BitwiseOrOperatorExpression", "kU_BitwiseAndOperatorExpression", 
=======
      "kU_ImportDatabase", "kU_AttachDatabase", "kU_DetachDatabase", "kU_UseDatabase", 
      "kU_StandaloneCall", "kU_CommentOn", "kU_CreateMacro", "kU_PositionalArgs", 
      "kU_DefaultArg", "kU_FilePaths", "kU_ParsingOptions", "kU_ParsingOption", 
      "kU_CreateNodeTable", "kU_CreateRelTable", "kU_CreateRelTableGroup", 
      "kU_RelTableConnection", "kU_CreateRdfGraph", "kU_CreateSequence", 
      "kU_SequenceOptions", "kU_IncrementBy", "kU_MinValue", "kU_MaxValue", 
      "kU_StartWith", "kU_Cycle", "kU_Drop", "kU_AlterTable", "kU_AlterOptions", 
      "kU_AddProperty", "kU_DropProperty", "kU_RenameTable", "kU_RenameProperty", 
      "kU_PropertyDefinitions", "kU_PropertyDefinition", "kU_CreateNodeConstraint", 
      "kU_DataType", "kU_ListIdentifiers", "kU_ListIdentifier", "oC_AnyCypherOption", 
      "oC_Explain", "oC_Profile", "kU_Transaction", "kU_Extension", "kU_LoadExtension", 
      "kU_InstallExtension", "oC_Query", "oC_RegularQuery", "oC_Union", 
      "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", "kU_QueryPart", 
      "oC_UpdatingClause", "oC_ReadingClause", "kU_LoadFrom", "kU_InQueryCall", 
      "oC_Match", "oC_Unwind", "oC_Create", "oC_Merge", "oC_MergeAction", 
      "oC_Set", "oC_SetItem", "oC_Delete", "oC_With", "oC_Return", "oC_ProjectionBody", 
      "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", "oC_Skip", 
      "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", "oC_PatternPart", 
      "oC_AnonymousPatternPart", "oC_PatternElement", "oC_NodePattern", 
      "oC_PatternElementChain", "oC_RelationshipPattern", "oC_RelationshipDetail", 
      "kU_Properties", "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
      "oC_RangeLiteral", "kU_RecursiveRelationshipComprehension", "kU_IntermediateNodeProjectionItems", 
      "kU_IntermediateRelProjectionItems", "oC_LowerBound", "oC_UpperBound", 
      "oC_LabelName", "oC_RelTypeName", "oC_Expression", "oC_OrExpression", 
      "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression", 
      "kU_ComparisonOperator", "kU_BitwiseOrOperatorExpression", "kU_BitwiseAndOperatorExpression", 
>>>>>>> 97f7ef93f (update parser for sequence)
      "kU_BitShiftOperatorExpression", "kU_BitShiftOperator", "oC_AddOrSubtractExpression", 
      "kU_AddOrSubtractOperator", "oC_MultiplyDivideModuloExpression", "kU_MultiplyDivideModuloOperator", 
      "oC_PowerOfExpression", "oC_UnaryAddSubtractOrFactorialExpression", 
      "oC_StringListNullOperatorExpression", "oC_ListOperatorExpression", 
      "oC_StringOperatorExpression", "oC_RegularExpression", "oC_NullOperatorExpression", 
      "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Literal", "oC_BooleanLiteral", 
      "oC_ListLiteral", "kU_ListEntry", "kU_StructLiteral", "kU_StructField", 
      "oC_ParenthesizedExpression", "oC_FunctionInvocation", "oC_FunctionName", 
      "kU_FunctionParameter", "oC_PathPatterns", "oC_ExistSubquery", "kU_CountSubquery", 
      "oC_PropertyLookup", "oC_CaseExpression", "oC_CaseAlternative", "oC_Variable", 
      "oC_NumberLiteral", "oC_Parameter", "oC_PropertyExpression", "oC_PropertyKeyName", 
      "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_SchemaName", "oC_SymbolicName", 
      "kU_NonReservedKeywords", "oC_LeftArrowHead", "oC_RightArrowHead", 
      "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "'('", "','", "')'", "'.'", "'='", "'['", "']'", "'{'", 
      "'}'", "'|'", "'..'", "'<>'", "'<'", "'<='", "'>'", "'>='", "'&'", 
      "'>>'", "'<<'", "'+'", "'/'", "'%'", "'^'", "'=~'", "'$'", "'\\u27E8'", 
      "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", "'\\uFE65'", 
      "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", 
      "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", "'\\uFF0D'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "'*'", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "'!='", "'-'", "'!'", 
      "':'", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "ATTACH", "DBTYPE", 
      "USE", "CALL", "COMMENT_", "MACRO", "GLOB", "COPY", "FROM", "COLUMN", 
      "EXPORT", "IMPORT", "DATABASE", "NODE", "TABLE", "GROUP", "RDFGRAPH", 
      "SEQUENCE", "INCREMENT", "MINVALUE", "MAXVALUE", "START", "NO", "CYCLE", 
      "DROP", "ALTER", "DEFAULT", "RENAME", "ADD", "PRIMARY", "KEY", "REL", 
      "TO", "EXPLAIN", "PROFILE", "BEGIN", "TRANSACTION", "READ", "ONLY", 
      "WRITE", "COMMIT", "COMMIT_SKIP_CHECKPOINT", "ROLLBACK", "ROLLBACK_SKIP_CHECKPOINT", 
      "INSTALL", "EXTENSION", "UNION", "ALL", "LOAD", "HEADERS", "OPTIONAL", 
      "MATCH", "UNWIND", "CREATE", "MERGE", "ON", "SET", "DETACH", "DELETE", 
      "WITH", "RETURN", "DISTINCT", "STAR", "AS", "ORDER", "BY", "L_SKIP", 
      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", "WHERE", "SHORTEST", 
      "OR", "XOR", "AND", "NOT", "INVALID_NOT_EQUAL", "MINUS", "FACTORIAL", 
      "COLON", "IN", "STARTS", "ENDS", "CONTAINS", "IS", "NULL_", "TRUE", 
      "FALSE", "COUNT", "EXISTS", "CASE", "ELSE", "END", "WHEN", "THEN", 
      "StringLiteral", "EscapedChar", "DecimalInteger", "HexLetter", "HexDigit", 
      "Digit", "NonZeroDigit", "NonZeroOctDigit", "ZeroDigit", "RegularDecimalReal", 
      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", 
      "SP", "WHITESPACE", "Comment", "Unknown"
    }
  );
  static const int32_t serializedATNSegment[] = {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
  	4,1,153,2348,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
=======
  	4,1,160,2396,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  	4,1,160,2411,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
  	4,1,160,2412,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
  	4,1,160,2424,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
>>>>>>> 6a075a2f7 (add basic tests for sequence)
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
<<<<<<< HEAD
  	7,146,2,147,7,147,2,148,7,148,1,0,1,0,3,0,301,8,0,1,0,1,0,3,0,305,8,0,
  	1,0,5,0,308,8,0,10,0,12,0,311,9,0,1,0,3,0,314,8,0,1,0,1,0,1,1,3,1,319,
  	8,1,1,1,3,1,322,8,1,1,1,1,1,3,1,326,8,1,1,1,3,1,329,8,1,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
  	351,8,2,1,3,1,3,1,3,1,3,3,3,357,8,3,1,3,1,3,3,3,361,8,3,1,3,3,3,364,8,
  	3,1,3,1,3,1,3,1,3,3,3,370,8,3,1,3,3,3,373,8,3,1,4,1,4,3,4,377,8,4,1,4,
  	1,4,3,4,381,8,4,1,4,1,4,3,4,385,8,4,1,4,5,4,388,8,4,10,4,12,4,391,9,4,
  	1,4,3,4,394,8,4,1,4,1,4,1,5,1,5,1,5,3,5,401,8,5,1,5,1,5,3,5,405,8,5,1,
  	5,1,5,1,5,1,5,1,5,1,5,3,5,413,8,5,1,5,1,5,3,5,417,8,5,1,6,1,6,1,6,1,6,
  	1,6,1,6,1,6,1,6,3,6,427,8,6,1,6,1,6,3,6,431,8,6,1,6,1,6,3,6,435,8,6,1,
  	6,5,6,438,8,6,10,6,12,6,441,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
  	7,3,7,453,8,7,1,7,1,7,3,7,457,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,465,8,7,
  	1,7,3,7,468,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,476,8,8,1,8,3,8,479,8,8,1,
  	9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,494,8,10,
  	1,10,1,10,1,10,3,10,499,8,10,1,10,1,10,1,10,1,10,3,10,505,8,10,1,10,1,
  	10,3,10,509,8,10,1,10,3,10,512,8,10,1,10,3,10,515,8,10,1,10,1,10,1,11,
  	1,11,3,11,521,8,11,1,11,1,11,3,11,525,8,11,1,11,1,11,1,12,1,12,3,12,531,
  	8,12,1,12,1,12,3,12,535,8,12,1,12,5,12,538,8,12,10,12,12,12,541,9,12,
  	1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,555,
  	8,15,1,15,1,15,3,15,559,8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
  	1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,581,
  	8,17,1,17,1,17,3,17,585,8,17,1,17,3,17,588,8,17,1,17,3,17,591,8,17,1,
  	17,3,17,594,8,17,1,17,3,17,597,8,17,1,17,1,17,3,17,601,8,17,1,17,5,17,
  	604,8,17,10,17,12,17,607,9,17,1,17,3,17,610,8,17,1,17,1,17,1,17,1,17,
  	1,17,1,17,1,18,1,18,3,18,620,8,18,1,18,1,18,3,18,624,8,18,1,18,5,18,627,
  	8,18,10,18,12,18,630,9,18,1,19,1,19,3,19,634,8,19,1,19,1,19,1,19,3,19,
  	639,8,19,1,19,1,19,1,20,1,20,3,20,645,8,20,1,20,1,20,3,20,649,8,20,1,
  	20,1,20,3,20,653,8,20,1,20,5,20,656,8,20,10,20,12,20,659,9,20,1,20,1,
  	20,1,20,1,20,3,20,665,8,20,1,20,1,20,3,20,669,8,20,1,20,1,20,3,20,673,
  	8,20,1,20,3,20,676,8,20,1,21,1,21,3,21,680,8,21,1,21,1,21,3,21,684,8,
  	21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,696,8,22,1,
  	22,1,22,3,22,700,8,22,1,22,1,22,3,22,704,8,22,1,22,1,22,3,22,708,8,22,
  	1,22,1,22,1,22,3,22,713,8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,3,23,725,8,23,1,23,1,23,3,23,729,8,23,1,23,1,23,3,23,733,8,
  	23,1,23,1,23,3,23,737,8,23,1,23,1,23,3,23,741,8,23,3,23,743,8,23,1,23,
  	1,23,3,23,747,8,23,1,23,1,23,3,23,751,8,23,3,23,753,8,23,1,23,1,23,1,
  	24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,767,8,24,1,24,1,
  	24,3,24,771,8,24,1,24,1,24,3,24,775,8,24,1,24,1,24,3,24,779,8,24,1,24,
  	4,24,782,8,24,11,24,12,24,783,1,24,3,24,787,8,24,1,24,1,24,3,24,791,8,
  	24,1,24,1,24,3,24,795,8,24,3,24,797,8,24,1,24,1,24,3,24,801,8,24,1,24,
  	1,24,3,24,805,8,24,3,24,807,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,
  	25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,
  	27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,3,29,843,
  	8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,854,8,30,1,31,
  	1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,34,1,34,3,34,876,8,34,1,34,1,34,3,34,880,8,34,1,34,5,
  	34,883,8,34,10,34,12,34,886,9,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,
  	36,3,36,896,8,36,1,36,1,36,3,36,900,8,36,1,36,1,36,3,36,904,8,36,1,36,
  	1,36,1,37,1,37,1,37,1,37,3,37,912,8,37,1,37,1,37,3,37,916,8,37,1,37,1,
  	37,3,37,920,8,37,1,37,1,37,1,37,1,37,3,37,926,8,37,1,37,1,37,3,37,930,
  	8,37,1,37,1,37,3,37,934,8,37,1,37,1,37,1,37,1,37,3,37,940,8,37,1,37,1,
  	37,3,37,944,8,37,1,37,1,37,3,37,948,8,37,1,37,1,37,3,37,952,8,37,1,37,
  	1,37,3,37,956,8,37,1,37,1,37,3,37,960,8,37,1,37,1,37,5,37,964,8,37,10,
  	37,12,37,967,9,37,1,38,1,38,5,38,971,8,38,10,38,12,38,974,9,38,1,39,1,
  	39,3,39,978,8,39,1,39,1,39,1,40,1,40,3,40,984,8,40,1,41,1,41,1,42,1,42,
  	1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
  	3,43,1004,8,43,1,44,1,44,3,44,1008,8,44,1,45,1,45,1,45,1,45,1,45,1,45,
  	3,45,1016,8,45,1,46,1,46,1,46,1,46,1,47,1,47,1,48,1,48,3,48,1026,8,48,
  	1,48,5,48,1029,8,48,10,48,12,48,1032,9,48,1,48,1,48,3,48,1036,8,48,4,
  	48,1038,8,48,11,48,12,48,1039,1,48,1,48,1,48,3,48,1045,8,48,1,49,1,49,
  	1,49,1,49,3,49,1051,8,49,1,49,1,49,1,49,3,49,1056,8,49,1,49,3,49,1059,
  	8,49,1,50,1,50,3,50,1063,8,50,1,51,1,51,3,51,1067,8,51,5,51,1069,8,51,
  	10,51,12,51,1072,9,51,1,51,1,51,1,51,3,51,1077,8,51,5,51,1079,8,51,10,
  	51,12,51,1082,9,51,1,51,1,51,3,51,1086,8,51,1,51,5,51,1089,8,51,10,51,
  	12,51,1092,9,51,1,51,3,51,1095,8,51,1,51,3,51,1098,8,51,1,51,1,51,3,51,
  	1102,8,51,4,51,1104,8,51,11,51,12,51,1105,1,51,1,51,3,51,1110,8,51,1,
  	52,1,52,3,52,1114,8,52,4,52,1116,8,52,11,52,12,52,1117,1,52,1,52,1,53,
  	1,53,3,53,1124,8,53,5,53,1126,8,53,10,53,12,53,1129,9,53,1,53,1,53,3,
  	53,1133,8,53,5,53,1135,8,53,10,53,12,53,1138,9,53,1,53,1,53,1,54,1,54,
  	1,54,1,54,3,54,1146,8,54,1,55,1,55,1,55,1,55,3,55,1152,8,55,1,56,1,56,
  	1,56,1,56,1,56,1,56,3,56,1160,8,56,1,56,1,56,3,56,1164,8,56,1,56,1,56,
  	3,56,1168,8,56,1,56,1,56,3,56,1172,8,56,1,56,1,56,1,56,1,56,1,56,3,56,
  	1179,8,56,1,56,3,56,1182,8,56,1,56,3,56,1185,8,56,1,56,3,56,1188,8,56,
  	1,57,1,57,1,57,1,57,3,57,1194,8,57,1,57,3,57,1197,8,57,1,58,1,58,3,58,
  	1201,8,58,1,58,1,58,3,58,1205,8,58,1,58,1,58,3,58,1209,8,58,1,58,3,58,
  	1212,8,58,1,59,1,59,3,59,1216,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,60,
  	1,60,3,60,1226,8,60,1,60,1,60,1,61,1,61,3,61,1232,8,61,1,61,1,61,1,61,
  	5,61,1237,8,61,10,61,12,61,1240,9,61,1,62,1,62,1,62,1,62,1,62,1,62,1,
  	62,1,62,1,62,1,62,3,62,1252,8,62,1,63,1,63,3,63,1256,8,63,1,63,1,63,3,
  	63,1260,8,63,1,63,1,63,3,63,1264,8,63,1,63,5,63,1267,8,63,10,63,12,63,
  	1270,9,63,1,64,1,64,3,64,1274,8,64,1,64,1,64,3,64,1278,8,64,1,64,1,64,
  	1,65,1,65,3,65,1284,8,65,1,65,1,65,3,65,1288,8,65,1,65,1,65,3,65,1292,
  	8,65,1,65,1,65,3,65,1296,8,65,1,65,5,65,1299,8,65,10,65,12,65,1302,9,
  	65,1,66,1,66,1,66,3,66,1307,8,66,1,66,3,66,1310,8,66,1,67,1,67,1,67,1,
  	68,3,68,1316,8,68,1,68,3,68,1319,8,68,1,68,1,68,1,68,1,68,3,68,1325,8,
  	68,1,68,1,68,3,68,1329,8,68,1,68,1,68,3,68,1333,8,68,1,69,1,69,3,69,1337,
  	8,69,1,69,1,69,3,69,1341,8,69,1,69,5,69,1344,8,69,10,69,12,69,1347,9,
  	69,1,69,1,69,3,69,1351,8,69,1,69,1,69,3,69,1355,8,69,1,69,5,69,1358,8,
  	69,10,69,12,69,1361,9,69,3,69,1363,8,69,1,70,1,70,1,70,1,70,1,70,1,70,
  	1,70,3,70,1372,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1381,8,71,
  	1,71,5,71,1384,8,71,10,71,12,71,1387,9,71,1,72,1,72,1,72,1,72,1,73,1,
  	73,1,73,1,73,1,74,1,74,3,74,1399,8,74,1,74,3,74,1402,8,74,1,75,1,75,1,
  	75,1,75,1,76,1,76,3,76,1410,8,76,1,76,1,76,3,76,1414,8,76,1,76,5,76,1417,
  	8,76,10,76,12,76,1420,9,76,1,77,1,77,3,77,1424,8,77,1,77,1,77,3,77,1428,
  	8,77,1,77,1,77,1,77,3,77,1433,8,77,1,78,1,78,1,79,1,79,3,79,1439,8,79,
  	1,79,5,79,1442,8,79,10,79,12,79,1445,9,79,1,79,1,79,1,79,1,79,3,79,1451,
  	8,79,1,80,1,80,3,80,1455,8,80,1,80,1,80,3,80,1459,8,80,3,80,1461,8,80,
  	1,80,1,80,3,80,1465,8,80,3,80,1467,8,80,1,80,1,80,3,80,1471,8,80,3,80,
  	1473,8,80,1,80,1,80,1,81,1,81,3,81,1479,8,81,1,81,1,81,1,82,1,82,3,82,
  	1485,8,82,1,82,1,82,3,82,1489,8,82,1,82,3,82,1492,8,82,1,82,3,82,1495,
  	8,82,1,82,1,82,1,82,1,82,3,82,1501,8,82,1,82,3,82,1504,8,82,1,82,3,82,
  	1507,8,82,1,82,1,82,3,82,1511,8,82,1,82,1,82,1,82,1,82,3,82,1517,8,82,
  	1,82,3,82,1520,8,82,1,82,3,82,1523,8,82,1,82,1,82,3,82,1527,8,82,1,83,
  	1,83,3,83,1531,8,83,1,83,1,83,3,83,1535,8,83,3,83,1537,8,83,1,83,1,83,
  	3,83,1541,8,83,3,83,1543,8,83,1,83,1,83,3,83,1547,8,83,3,83,1549,8,83,
  	1,83,1,83,3,83,1553,8,83,3,83,1555,8,83,1,83,1,83,1,84,1,84,3,84,1561,
  	8,84,1,84,1,84,3,84,1565,8,84,1,84,1,84,3,84,1569,8,84,1,84,1,84,3,84,
  	1573,8,84,1,84,1,84,3,84,1577,8,84,1,84,1,84,3,84,1581,8,84,1,84,1,84,
  	3,84,1585,8,84,1,84,1,84,3,84,1589,8,84,5,84,1591,8,84,10,84,12,84,1594,
  	9,84,3,84,1596,8,84,1,84,1,84,1,85,1,85,3,85,1602,8,85,1,85,1,85,3,85,
  	1606,8,85,1,85,1,85,3,85,1610,8,85,1,85,3,85,1613,8,85,1,85,5,85,1616,
  	8,85,10,85,12,85,1619,9,85,1,86,1,86,3,86,1623,8,86,1,86,5,86,1626,8,
  	86,10,86,12,86,1629,9,86,1,87,1,87,3,87,1633,8,87,1,87,1,87,1,88,1,88,
  	3,88,1639,8,88,1,88,1,88,1,88,1,88,3,88,1645,8,88,1,88,3,88,1648,8,88,
  	1,88,3,88,1651,8,88,1,88,3,88,1654,8,88,1,88,1,88,3,88,1658,8,88,1,88,
  	3,88,1661,8,88,1,88,3,88,1664,8,88,1,88,3,88,1667,8,88,1,88,3,88,1670,
  	8,88,1,89,1,89,3,89,1674,8,89,1,89,1,89,3,89,1678,8,89,1,89,1,89,3,89,
  	1682,8,89,1,89,1,89,3,89,1686,8,89,1,89,1,89,3,89,1690,8,89,1,89,3,89,
  	1693,8,89,1,89,3,89,1696,8,89,1,89,1,89,3,89,1700,8,89,1,89,1,89,3,89,
  	1704,8,89,1,89,1,89,3,89,1708,8,89,1,89,1,89,3,89,1712,8,89,3,89,1714,
  	8,89,1,89,1,89,1,90,1,90,3,90,1720,8,90,1,90,3,90,1723,8,90,1,90,3,90,
  	1726,8,90,1,90,1,90,1,91,1,91,3,91,1732,8,91,1,91,3,91,1735,8,91,1,91,
  	3,91,1738,8,91,1,91,1,91,1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,95,1,96,
  	1,96,1,97,1,97,1,97,1,97,1,97,5,97,1757,8,97,10,97,12,97,1760,9,97,1,
  	98,1,98,1,98,1,98,1,98,5,98,1767,8,98,10,98,12,98,1770,9,98,1,99,1,99,
  	1,99,1,99,1,99,5,99,1777,8,99,10,99,12,99,1780,9,99,1,100,1,100,3,100,
  	1784,8,100,5,100,1786,8,100,10,100,12,100,1789,9,100,1,100,1,100,1,101,
  	1,101,3,101,1795,8,101,1,101,1,101,3,101,1799,8,101,1,101,1,101,3,101,
  	1803,8,101,1,101,1,101,3,101,1807,8,101,1,101,1,101,3,101,1811,8,101,
  	1,101,1,101,1,101,1,101,1,101,1,101,3,101,1819,8,101,1,101,1,101,3,101,
  	1823,8,101,1,101,1,101,3,101,1827,8,101,1,101,1,101,3,101,1831,8,101,
  	1,101,1,101,4,101,1835,8,101,11,101,12,101,1836,1,101,1,101,3,101,1841,
  	8,101,1,102,1,102,1,103,1,103,3,103,1847,8,103,1,103,1,103,3,103,1851,
  	8,103,1,103,5,103,1854,8,103,10,103,12,103,1857,9,103,1,104,1,104,3,104,
  	1861,8,104,1,104,1,104,3,104,1865,8,104,1,104,5,104,1868,8,104,10,104,
  	12,104,1871,9,104,1,105,1,105,3,105,1875,8,105,1,105,1,105,3,105,1879,
  	8,105,1,105,1,105,5,105,1883,8,105,10,105,12,105,1886,9,105,1,106,1,106,
  	1,107,1,107,3,107,1892,8,107,1,107,1,107,3,107,1896,8,107,1,107,1,107,
  	5,107,1900,8,107,10,107,12,107,1903,9,107,1,108,1,108,1,109,1,109,3,109,
  	1909,8,109,1,109,1,109,3,109,1913,8,109,1,109,1,109,5,109,1917,8,109,
  	10,109,12,109,1920,9,109,1,110,1,110,1,111,1,111,3,111,1926,8,111,1,111,
  	1,111,3,111,1930,8,111,1,111,5,111,1933,8,111,10,111,12,111,1936,9,111,
  	1,112,1,112,3,112,1940,8,112,5,112,1942,8,112,10,112,12,112,1945,9,112,
  	1,112,1,112,3,112,1949,8,112,1,112,3,112,1952,8,112,1,113,1,113,1,113,
  	4,113,1957,8,113,11,113,12,113,1958,1,113,3,113,1962,8,113,1,114,1,114,
  	1,114,3,114,1967,8,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,
  	1976,8,114,1,114,1,114,3,114,1980,8,114,1,114,3,114,1983,8,114,1,115,
  	1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,1996,
  	8,115,1,115,3,115,1999,8,115,1,115,1,115,1,116,3,116,2004,8,116,1,116,
  	1,116,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,3,117,
  	2018,8,117,1,118,1,118,3,118,2022,8,118,1,118,5,118,2025,8,118,10,118,
  	12,118,2028,9,118,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
  	3,119,2039,8,119,1,120,1,120,1,120,1,120,1,120,1,120,3,120,2047,8,120,
  	1,121,1,121,1,122,1,122,3,122,2053,8,122,1,122,1,122,3,122,2057,8,122,
  	1,122,1,122,3,122,2061,8,122,5,122,2063,8,122,10,122,12,122,2066,9,122,
  	3,122,2068,8,122,1,122,1,122,1,123,1,123,3,123,2074,8,123,1,123,3,123,
  	2077,8,123,1,124,1,124,3,124,2081,8,124,1,124,1,124,3,124,2085,8,124,
  	1,124,1,124,3,124,2089,8,124,1,124,1,124,3,124,2093,8,124,5,124,2095,
  	8,124,10,124,12,124,2098,9,124,1,124,1,124,1,125,1,125,3,125,2104,8,125,
  	1,125,3,125,2107,8,125,1,125,1,125,3,125,2111,8,125,1,125,1,125,1,126,
  	1,126,3,126,2117,8,126,1,126,1,126,3,126,2121,8,126,1,126,1,126,1,127,
  	1,127,3,127,2127,8,127,1,127,1,127,3,127,2131,8,127,1,127,1,127,3,127,
  	2135,8,127,1,127,1,127,1,127,3,127,2140,8,127,1,127,1,127,3,127,2144,
  	8,127,1,127,1,127,3,127,2148,8,127,3,127,2150,8,127,1,127,1,127,3,127,
  	2154,8,127,1,127,1,127,3,127,2158,8,127,1,127,1,127,3,127,2162,8,127,
  	5,127,2164,8,127,10,127,12,127,2167,9,127,3,127,2169,8,127,1,127,1,127,
  	3,127,2173,8,127,1,128,1,128,1,129,1,129,3,129,2179,8,129,1,129,1,129,
  	1,129,3,129,2184,8,129,3,129,2186,8,129,1,129,1,129,1,130,1,130,3,130,
  	2192,8,130,1,130,4,130,2195,8,130,11,130,12,130,2196,1,131,1,131,3,131,
  	2201,8,131,1,131,1,131,3,131,2205,8,131,1,131,1,131,3,131,2209,8,131,
  	1,131,1,131,3,131,2213,8,131,1,131,3,131,2216,8,131,1,131,3,131,2219,
  	8,131,1,131,1,131,1,132,1,132,3,132,2225,8,132,1,132,1,132,3,132,2229,
  	8,132,1,132,1,132,3,132,2233,8,132,1,132,1,132,3,132,2237,8,132,1,132,
  	3,132,2240,8,132,1,132,3,132,2243,8,132,1,132,1,132,1,133,1,133,3,133,
  	2249,8,133,1,133,1,133,3,133,2253,8,133,1,134,1,134,3,134,2257,8,134,
  	1,134,4,134,2260,8,134,11,134,12,134,2261,1,134,1,134,3,134,2266,8,134,
  	1,134,1,134,3,134,2270,8,134,1,134,4,134,2273,8,134,11,134,12,134,2274,
  	3,134,2277,8,134,1,134,3,134,2280,8,134,1,134,1,134,3,134,2284,8,134,
  	1,134,3,134,2287,8,134,1,134,3,134,2290,8,134,1,134,1,134,1,135,1,135,
  	3,135,2296,8,135,1,135,1,135,3,135,2300,8,135,1,135,1,135,3,135,2304,
  	8,135,1,135,1,135,1,136,1,136,1,137,1,137,3,137,2312,8,137,1,138,1,138,
  	1,138,3,138,2317,8,138,1,139,1,139,3,139,2321,8,139,1,139,1,139,1,140,
  	1,140,1,141,1,141,1,142,1,142,1,143,1,143,1,144,1,144,1,144,1,144,1,144,
  	3,144,2338,8,144,1,145,1,145,1,146,1,146,1,147,1,147,1,148,1,148,1,148,
  	0,1,74,149,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
  	42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
  	88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
  	126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
  	162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
  	198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,
  	234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
  	270,272,274,276,278,280,282,284,286,288,290,292,294,296,0,11,2,0,60,60,
  	62,62,1,0,107,110,2,0,6,6,13,17,1,0,19,20,2,0,21,21,118,118,2,0,22,23,
  	101,101,1,0,127,128,8,0,48,48,50,50,56,59,70,70,74,74,121,121,129,129,
  	133,133,2,0,14,14,27,30,2,0,16,16,31,34,2,0,35,45,118,118,2656,0,298,
  	1,0,0,0,2,318,1,0,0,0,4,350,1,0,0,0,6,352,1,0,0,0,8,374,1,0,0,0,10,416,
  	1,0,0,0,12,418,1,0,0,0,14,448,1,0,0,0,16,469,1,0,0,0,18,480,1,0,0,0,20,
  	486,1,0,0,0,22,518,1,0,0,0,24,528,1,0,0,0,26,542,1,0,0,0,28,546,1,0,0,
  	0,30,550,1,0,0,0,32,562,1,0,0,0,34,574,1,0,0,0,36,617,1,0,0,0,38,631,
  	1,0,0,0,40,675,1,0,0,0,42,677,1,0,0,0,44,687,1,0,0,0,46,716,1,0,0,0,48,
  	756,1,0,0,0,50,810,1,0,0,0,52,818,1,0,0,0,54,824,1,0,0,0,56,830,1,0,0,
  	0,58,842,1,0,0,0,60,844,1,0,0,0,62,855,1,0,0,0,64,859,1,0,0,0,66,865,
  	1,0,0,0,68,873,1,0,0,0,70,887,1,0,0,0,72,891,1,0,0,0,74,959,1,0,0,0,76,
  	968,1,0,0,0,78,975,1,0,0,0,80,983,1,0,0,0,82,985,1,0,0,0,84,987,1,0,0,
  	0,86,1003,1,0,0,0,88,1007,1,0,0,0,90,1009,1,0,0,0,92,1017,1,0,0,0,94,
  	1021,1,0,0,0,96,1044,1,0,0,0,98,1058,1,0,0,0,100,1062,1,0,0,0,102,1109,
  	1,0,0,0,104,1115,1,0,0,0,106,1127,1,0,0,0,108,1145,1,0,0,0,110,1151,1,
  	0,0,0,112,1153,1,0,0,0,114,1189,1,0,0,0,116,1200,1,0,0,0,118,1213,1,0,
  	0,0,120,1223,1,0,0,0,122,1229,1,0,0,0,124,1251,1,0,0,0,126,1253,1,0,0,
  	0,128,1271,1,0,0,0,130,1283,1,0,0,0,132,1303,1,0,0,0,134,1311,1,0,0,0,
  	136,1318,1,0,0,0,138,1362,1,0,0,0,140,1371,1,0,0,0,142,1373,1,0,0,0,144,
  	1388,1,0,0,0,146,1392,1,0,0,0,148,1396,1,0,0,0,150,1403,1,0,0,0,152,1407,
  	1,0,0,0,154,1432,1,0,0,0,156,1434,1,0,0,0,158,1450,1,0,0,0,160,1452,1,
  	0,0,0,162,1476,1,0,0,0,164,1526,1,0,0,0,166,1528,1,0,0,0,168,1558,1,0,
  	0,0,170,1599,1,0,0,0,172,1620,1,0,0,0,174,1630,1,0,0,0,176,1636,1,0,0,
  	0,178,1671,1,0,0,0,180,1717,1,0,0,0,182,1729,1,0,0,0,184,1741,1,0,0,0,
  	186,1743,1,0,0,0,188,1745,1,0,0,0,190,1747,1,0,0,0,192,1749,1,0,0,0,194,
  	1751,1,0,0,0,196,1761,1,0,0,0,198,1771,1,0,0,0,200,1787,1,0,0,0,202,1840,
  	1,0,0,0,204,1842,1,0,0,0,206,1844,1,0,0,0,208,1858,1,0,0,0,210,1872,1,
  	0,0,0,212,1887,1,0,0,0,214,1889,1,0,0,0,216,1904,1,0,0,0,218,1906,1,0,
  	0,0,220,1921,1,0,0,0,222,1923,1,0,0,0,224,1943,1,0,0,0,226,1953,1,0,0,
  	0,228,1982,1,0,0,0,230,1995,1,0,0,0,232,2003,1,0,0,0,234,2017,1,0,0,0,
  	236,2019,1,0,0,0,238,2038,1,0,0,0,240,2046,1,0,0,0,242,2048,1,0,0,0,244,
  	2050,1,0,0,0,246,2071,1,0,0,0,248,2078,1,0,0,0,250,2103,1,0,0,0,252,2114,
  	1,0,0,0,254,2172,1,0,0,0,256,2174,1,0,0,0,258,2185,1,0,0,0,260,2189,1,
  	0,0,0,262,2198,1,0,0,0,264,2222,1,0,0,0,266,2246,1,0,0,0,268,2276,1,0,
  	0,0,270,2293,1,0,0,0,272,2307,1,0,0,0,274,2311,1,0,0,0,276,2313,1,0,0,
  	0,278,2318,1,0,0,0,280,2324,1,0,0,0,282,2326,1,0,0,0,284,2328,1,0,0,0,
  	286,2330,1,0,0,0,288,2337,1,0,0,0,290,2339,1,0,0,0,292,2341,1,0,0,0,294,
  	2343,1,0,0,0,296,2345,1,0,0,0,298,309,3,2,1,0,299,301,5,150,0,0,300,299,
  	1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,304,5,1,0,0,303,305,5,150,
  	0,0,304,303,1,0,0,0,304,305,1,0,0,0,305,306,1,0,0,0,306,308,3,2,1,0,307,
  	300,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,313,1,
  	0,0,0,311,309,1,0,0,0,312,314,5,150,0,0,313,312,1,0,0,0,313,314,1,0,0,
  	0,314,315,1,0,0,0,315,316,5,0,0,1,316,1,1,0,0,0,317,319,3,80,40,0,318,
  	317,1,0,0,0,318,319,1,0,0,0,319,321,1,0,0,0,320,322,5,150,0,0,321,320,
  	1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,328,3,4,2,0,324,326,5,150,
  	0,0,325,324,1,0,0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,329,5,1,0,0,328,
  	325,1,0,0,0,328,329,1,0,0,0,329,3,1,0,0,0,330,351,3,94,47,0,331,351,3,
  	44,22,0,332,351,3,46,23,0,333,351,3,48,24,0,334,351,3,52,26,0,335,351,
  	3,54,27,0,336,351,3,56,28,0,337,351,3,6,3,0,338,351,3,12,6,0,339,351,
  	3,14,7,0,340,351,3,30,15,0,341,351,3,34,17,0,342,351,3,32,16,0,343,351,
  	3,86,43,0,344,351,3,88,44,0,345,351,3,16,8,0,346,351,3,18,9,0,347,351,
  	3,20,10,0,348,351,3,26,13,0,349,351,3,28,14,0,350,330,1,0,0,0,350,331,
  	1,0,0,0,350,332,1,0,0,0,350,333,1,0,0,0,350,334,1,0,0,0,350,335,1,0,0,
  	0,350,336,1,0,0,0,350,337,1,0,0,0,350,338,1,0,0,0,350,339,1,0,0,0,350,
  	340,1,0,0,0,350,341,1,0,0,0,350,342,1,0,0,0,350,343,1,0,0,0,350,344,1,
  	0,0,0,350,345,1,0,0,0,350,346,1,0,0,0,350,347,1,0,0,0,350,348,1,0,0,0,
  	350,349,1,0,0,0,351,5,1,0,0,0,352,353,5,53,0,0,353,354,5,150,0,0,354,
  	363,3,286,143,0,355,357,5,150,0,0,356,355,1,0,0,0,356,357,1,0,0,0,357,
  	358,1,0,0,0,358,360,3,8,4,0,359,361,5,150,0,0,360,359,1,0,0,0,360,361,
  	1,0,0,0,361,364,1,0,0,0,362,364,5,150,0,0,363,356,1,0,0,0,363,362,1,0,
  	0,0,364,365,1,0,0,0,365,366,5,54,0,0,366,367,5,150,0,0,367,372,3,10,5,
  	0,368,370,5,150,0,0,369,368,1,0,0,0,369,370,1,0,0,0,370,371,1,0,0,0,371,
  	373,3,42,21,0,372,369,1,0,0,0,372,373,1,0,0,0,373,7,1,0,0,0,374,376,5,
  	2,0,0,375,377,5,150,0,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,
  	0,378,389,3,286,143,0,379,381,5,150,0,0,380,379,1,0,0,0,380,381,1,0,0,
  	0,381,382,1,0,0,0,382,384,5,3,0,0,383,385,5,150,0,0,384,383,1,0,0,0,384,
  	385,1,0,0,0,385,386,1,0,0,0,386,388,3,286,143,0,387,380,1,0,0,0,388,391,
  	1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,
  	0,392,394,5,150,0,0,393,392,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,
  	396,5,4,0,0,396,9,1,0,0,0,397,417,3,40,20,0,398,400,5,2,0,0,399,401,5,
  	150,0,0,400,399,1,0,0,0,400,401,1,0,0,0,401,402,1,0,0,0,402,404,3,94,
  	47,0,403,405,5,150,0,0,404,403,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,
  	0,406,407,5,4,0,0,407,417,1,0,0,0,408,417,3,272,136,0,409,410,3,272,136,
  	0,410,412,5,5,0,0,411,413,5,150,0,0,412,411,1,0,0,0,412,413,1,0,0,0,413,
  	414,1,0,0,0,414,415,3,286,143,0,415,417,1,0,0,0,416,397,1,0,0,0,416,398,
  	1,0,0,0,416,408,1,0,0,0,416,409,1,0,0,0,417,11,1,0,0,0,418,419,5,53,0,
  	0,419,420,5,150,0,0,420,421,3,286,143,0,421,422,5,150,0,0,422,423,5,54,
  	0,0,423,424,5,150,0,0,424,426,5,2,0,0,425,427,5,150,0,0,426,425,1,0,0,
  	0,426,427,1,0,0,0,427,428,1,0,0,0,428,439,5,136,0,0,429,431,5,150,0,0,
  	430,429,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,434,5,3,0,0,433,435,
  	5,150,0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,438,5,136,
  	0,0,437,430,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,
  	442,1,0,0,0,441,439,1,0,0,0,442,443,5,4,0,0,443,444,5,150,0,0,444,445,
  	5,104,0,0,445,446,5,150,0,0,446,447,5,55,0,0,447,13,1,0,0,0,448,449,5,
  	53,0,0,449,450,5,150,0,0,450,452,5,2,0,0,451,453,5,150,0,0,452,451,1,
  	0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,456,3,94,47,0,455,457,5,150,
  	0,0,456,455,1,0,0,0,456,457,1,0,0,0,457,458,1,0,0,0,458,459,5,4,0,0,459,
  	460,5,150,0,0,460,461,5,71,0,0,461,462,5,150,0,0,462,467,5,136,0,0,463,
  	465,5,150,0,0,464,463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,468,
  	3,42,21,0,467,464,1,0,0,0,467,468,1,0,0,0,468,15,1,0,0,0,469,470,5,56,
  	0,0,470,471,5,150,0,0,471,472,5,58,0,0,472,473,5,150,0,0,473,478,5,136,
  	0,0,474,476,5,150,0,0,475,474,1,0,0,0,475,476,1,0,0,0,476,477,1,0,0,0,
  	477,479,3,42,21,0,478,475,1,0,0,0,478,479,1,0,0,0,479,17,1,0,0,0,480,
  	481,5,57,0,0,481,482,5,150,0,0,482,483,5,58,0,0,483,484,5,150,0,0,484,
  	485,5,136,0,0,485,19,1,0,0,0,486,487,5,46,0,0,487,488,5,150,0,0,488,493,
  	5,136,0,0,489,490,5,150,0,0,490,491,5,102,0,0,491,492,5,150,0,0,492,494,
  	3,286,143,0,493,489,1,0,0,0,493,494,1,0,0,0,494,495,1,0,0,0,495,496,5,
  	150,0,0,496,498,5,2,0,0,497,499,5,150,0,0,498,497,1,0,0,0,498,499,1,0,
  	0,0,499,500,1,0,0,0,500,501,5,47,0,0,501,502,5,150,0,0,502,511,3,288,
  	144,0,503,505,5,150,0,0,504,503,1,0,0,0,504,505,1,0,0,0,505,506,1,0,0,
  	0,506,508,5,3,0,0,507,509,5,150,0,0,508,507,1,0,0,0,508,509,1,0,0,0,509,
  	510,1,0,0,0,510,512,3,24,12,0,511,504,1,0,0,0,511,512,1,0,0,0,512,514,
  	1,0,0,0,513,515,5,150,0,0,514,513,1,0,0,0,514,515,1,0,0,0,515,516,1,0,
  	0,0,516,517,5,4,0,0,517,21,1,0,0,0,518,520,3,288,144,0,519,521,5,150,
  	0,0,520,519,1,0,0,0,520,521,1,0,0,0,521,522,1,0,0,0,522,524,5,6,0,0,523,
  	525,5,150,0,0,524,523,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,526,527,
  	3,240,120,0,527,23,1,0,0,0,528,539,3,22,11,0,529,531,5,150,0,0,530,529,
  	1,0,0,0,530,531,1,0,0,0,531,532,1,0,0,0,532,534,5,3,0,0,533,535,5,150,
  	0,0,534,533,1,0,0,0,534,535,1,0,0,0,535,536,1,0,0,0,536,538,3,22,11,0,
  	537,530,1,0,0,0,538,541,1,0,0,0,539,537,1,0,0,0,539,540,1,0,0,0,540,25,
  	1,0,0,0,541,539,1,0,0,0,542,543,5,96,0,0,543,544,5,150,0,0,544,545,3,
  	286,143,0,545,27,1,0,0,0,546,547,5,48,0,0,547,548,5,150,0,0,548,549,3,
  	286,143,0,549,29,1,0,0,0,550,551,5,49,0,0,551,552,5,150,0,0,552,554,3,
  	288,144,0,553,555,5,150,0,0,554,553,1,0,0,0,554,555,1,0,0,0,555,556,1,
  	0,0,0,556,558,5,6,0,0,557,559,5,150,0,0,558,557,1,0,0,0,558,559,1,0,0,
  	0,559,560,1,0,0,0,560,561,3,192,96,0,561,31,1,0,0,0,562,563,5,50,0,0,
  	563,564,5,150,0,0,564,565,5,94,0,0,565,566,5,150,0,0,566,567,5,60,0,0,
  	567,568,5,150,0,0,568,569,3,286,143,0,569,570,5,150,0,0,570,571,5,125,
  	0,0,571,572,5,150,0,0,572,573,5,136,0,0,573,33,1,0,0,0,574,575,5,92,0,
  	0,575,576,5,150,0,0,576,577,5,51,0,0,577,578,5,150,0,0,578,580,3,256,
  	128,0,579,581,5,150,0,0,580,579,1,0,0,0,580,581,1,0,0,0,581,582,1,0,0,
  	0,582,584,5,2,0,0,583,585,5,150,0,0,584,583,1,0,0,0,584,585,1,0,0,0,585,
  	587,1,0,0,0,586,588,3,36,18,0,587,586,1,0,0,0,587,588,1,0,0,0,588,590,
  	1,0,0,0,589,591,5,150,0,0,590,589,1,0,0,0,590,591,1,0,0,0,591,593,1,0,
  	0,0,592,594,3,38,19,0,593,592,1,0,0,0,593,594,1,0,0,0,594,605,1,0,0,0,
  	595,597,5,150,0,0,596,595,1,0,0,0,596,597,1,0,0,0,597,598,1,0,0,0,598,
  	600,5,3,0,0,599,601,5,150,0,0,600,599,1,0,0,0,600,601,1,0,0,0,601,602,
  	1,0,0,0,602,604,3,38,19,0,603,596,1,0,0,0,604,607,1,0,0,0,605,603,1,0,
  	0,0,605,606,1,0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,608,610,5,150,0,0,
  	609,608,1,0,0,0,609,610,1,0,0,0,610,611,1,0,0,0,611,612,5,4,0,0,612,613,
  	5,150,0,0,613,614,5,102,0,0,614,615,5,150,0,0,615,616,3,192,96,0,616,
  	35,1,0,0,0,617,628,3,288,144,0,618,620,5,150,0,0,619,618,1,0,0,0,619,
  	620,1,0,0,0,620,621,1,0,0,0,621,623,5,3,0,0,622,624,5,150,0,0,623,622,
  	1,0,0,0,623,624,1,0,0,0,624,625,1,0,0,0,625,627,3,288,144,0,626,619,1,
  	0,0,0,627,630,1,0,0,0,628,626,1,0,0,0,628,629,1,0,0,0,629,37,1,0,0,0,
  	630,628,1,0,0,0,631,633,3,288,144,0,632,634,5,150,0,0,633,632,1,0,0,0,
  	633,634,1,0,0,0,634,635,1,0,0,0,635,636,5,120,0,0,636,638,5,6,0,0,637,
  	639,5,150,0,0,638,637,1,0,0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,641,
  	3,240,120,0,641,39,1,0,0,0,642,644,5,7,0,0,643,645,5,150,0,0,644,643,
  	1,0,0,0,644,645,1,0,0,0,645,646,1,0,0,0,646,657,5,136,0,0,647,649,5,150,
  	0,0,648,647,1,0,0,0,648,649,1,0,0,0,649,650,1,0,0,0,650,652,5,3,0,0,651,
  	653,5,150,0,0,652,651,1,0,0,0,652,653,1,0,0,0,653,654,1,0,0,0,654,656,
  	5,136,0,0,655,648,1,0,0,0,656,659,1,0,0,0,657,655,1,0,0,0,657,658,1,0,
  	0,0,658,660,1,0,0,0,659,657,1,0,0,0,660,676,5,8,0,0,661,676,5,136,0,0,
  	662,664,5,52,0,0,663,665,5,150,0,0,664,663,1,0,0,0,664,665,1,0,0,0,665,
  	666,1,0,0,0,666,668,5,2,0,0,667,669,5,150,0,0,668,667,1,0,0,0,668,669,
  	1,0,0,0,669,670,1,0,0,0,670,672,5,136,0,0,671,673,5,150,0,0,672,671,1,
  	0,0,0,672,673,1,0,0,0,673,674,1,0,0,0,674,676,5,4,0,0,675,642,1,0,0,0,
  	675,661,1,0,0,0,675,662,1,0,0,0,676,41,1,0,0,0,677,679,5,2,0,0,678,680,
  	5,150,0,0,679,678,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,683,3,24,
  	12,0,682,684,5,150,0,0,683,682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,
  	0,685,686,5,4,0,0,686,43,1,0,0,0,687,688,5,92,0,0,688,689,5,150,0,0,689,
  	690,5,59,0,0,690,691,5,150,0,0,691,692,5,60,0,0,692,693,5,150,0,0,693,
  	695,3,286,143,0,694,696,5,150,0,0,695,694,1,0,0,0,695,696,1,0,0,0,696,
  	697,1,0,0,0,697,699,5,2,0,0,698,700,5,150,0,0,699,698,1,0,0,0,699,700,
  	1,0,0,0,700,701,1,0,0,0,701,703,3,68,34,0,702,704,5,150,0,0,703,702,1,
  	0,0,0,703,704,1,0,0,0,704,705,1,0,0,0,705,707,5,3,0,0,706,708,5,150,0,
  	0,707,706,1,0,0,0,707,708,1,0,0,0,708,709,1,0,0,0,709,710,3,72,36,0,710,
  	712,1,0,0,0,711,713,5,150,0,0,712,711,1,0,0,0,712,713,1,0,0,0,713,714,
  	1,0,0,0,714,715,5,4,0,0,715,45,1,0,0,0,716,717,5,92,0,0,717,718,5,150,
  	0,0,718,719,5,70,0,0,719,720,5,150,0,0,720,721,5,60,0,0,721,722,5,150,
  	0,0,722,724,3,286,143,0,723,725,5,150,0,0,724,723,1,0,0,0,724,725,1,0,
  	0,0,725,726,1,0,0,0,726,728,5,2,0,0,727,729,5,150,0,0,728,727,1,0,0,0,
  	728,729,1,0,0,0,729,730,1,0,0,0,730,732,3,50,25,0,731,733,5,150,0,0,732,
  	731,1,0,0,0,732,733,1,0,0,0,733,742,1,0,0,0,734,736,5,3,0,0,735,737,5,
  	150,0,0,736,735,1,0,0,0,736,737,1,0,0,0,737,738,1,0,0,0,738,740,3,68,
  	34,0,739,741,5,150,0,0,740,739,1,0,0,0,740,741,1,0,0,0,741,743,1,0,0,
  	0,742,734,1,0,0,0,742,743,1,0,0,0,743,752,1,0,0,0,744,746,5,3,0,0,745,
  	747,5,150,0,0,746,745,1,0,0,0,746,747,1,0,0,0,747,748,1,0,0,0,748,750,
  	3,288,144,0,749,751,5,150,0,0,750,749,1,0,0,0,750,751,1,0,0,0,751,753,
  	1,0,0,0,752,744,1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,755,5,4,0,
  	0,755,47,1,0,0,0,756,757,5,92,0,0,757,758,5,150,0,0,758,759,5,70,0,0,
  	759,760,5,150,0,0,760,761,5,60,0,0,761,762,5,150,0,0,762,763,5,61,0,0,
  	763,764,5,150,0,0,764,766,3,286,143,0,765,767,5,150,0,0,766,765,1,0,0,
  	0,766,767,1,0,0,0,767,768,1,0,0,0,768,770,5,2,0,0,769,771,5,150,0,0,770,
  	769,1,0,0,0,770,771,1,0,0,0,771,772,1,0,0,0,772,774,3,50,25,0,773,775,
  	5,150,0,0,774,773,1,0,0,0,774,775,1,0,0,0,775,781,1,0,0,0,776,778,5,3,
  	0,0,777,779,5,150,0,0,778,777,1,0,0,0,778,779,1,0,0,0,779,780,1,0,0,0,
  	780,782,3,50,25,0,781,776,1,0,0,0,782,783,1,0,0,0,783,781,1,0,0,0,783,
  	784,1,0,0,0,784,786,1,0,0,0,785,787,5,150,0,0,786,785,1,0,0,0,786,787,
  	1,0,0,0,787,796,1,0,0,0,788,790,5,3,0,0,789,791,5,150,0,0,790,789,1,0,
  	0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,794,3,68,34,0,793,795,5,150,0,
  	0,794,793,1,0,0,0,794,795,1,0,0,0,795,797,1,0,0,0,796,788,1,0,0,0,796,
  	797,1,0,0,0,797,806,1,0,0,0,798,800,5,3,0,0,799,801,5,150,0,0,800,799,
  	1,0,0,0,800,801,1,0,0,0,801,802,1,0,0,0,802,804,3,288,144,0,803,805,5,
  	150,0,0,804,803,1,0,0,0,804,805,1,0,0,0,805,807,1,0,0,0,806,798,1,0,0,
  	0,806,807,1,0,0,0,807,808,1,0,0,0,808,809,5,4,0,0,809,49,1,0,0,0,810,
  	811,5,54,0,0,811,812,5,150,0,0,812,813,3,286,143,0,813,814,5,150,0,0,
  	814,815,5,71,0,0,815,816,5,150,0,0,816,817,3,286,143,0,817,51,1,0,0,0,
  	818,819,5,92,0,0,819,820,5,150,0,0,820,821,5,62,0,0,821,822,5,150,0,0,
  	822,823,3,286,143,0,823,53,1,0,0,0,824,825,5,63,0,0,825,826,5,150,0,0,
  	826,827,7,0,0,0,827,828,5,150,0,0,828,829,3,286,143,0,829,55,1,0,0,0,
  	830,831,5,64,0,0,831,832,5,150,0,0,832,833,5,60,0,0,833,834,5,150,0,0,
  	834,835,3,286,143,0,835,836,5,150,0,0,836,837,3,58,29,0,837,57,1,0,0,
  	0,838,843,3,60,30,0,839,843,3,62,31,0,840,843,3,64,32,0,841,843,3,66,
  	33,0,842,838,1,0,0,0,842,839,1,0,0,0,842,840,1,0,0,0,842,841,1,0,0,0,
  	843,59,1,0,0,0,844,845,5,67,0,0,845,846,5,150,0,0,846,847,3,280,140,0,
  	847,848,5,150,0,0,848,853,3,74,37,0,849,850,5,150,0,0,850,851,5,65,0,
  	0,851,852,5,150,0,0,852,854,3,192,96,0,853,849,1,0,0,0,853,854,1,0,0,
  	0,854,61,1,0,0,0,855,856,5,63,0,0,856,857,5,150,0,0,857,858,3,280,140,
  	0,858,63,1,0,0,0,859,860,5,66,0,0,860,861,5,150,0,0,861,862,5,71,0,0,
  	862,863,5,150,0,0,863,864,3,286,143,0,864,65,1,0,0,0,865,866,5,66,0,0,
  	866,867,5,150,0,0,867,868,3,280,140,0,868,869,5,150,0,0,869,870,5,71,
  	0,0,870,871,5,150,0,0,871,872,3,280,140,0,872,67,1,0,0,0,873,884,3,70,
  	35,0,874,876,5,150,0,0,875,874,1,0,0,0,875,876,1,0,0,0,876,877,1,0,0,
  	0,877,879,5,3,0,0,878,880,5,150,0,0,879,878,1,0,0,0,879,880,1,0,0,0,880,
  	881,1,0,0,0,881,883,3,70,35,0,882,875,1,0,0,0,883,886,1,0,0,0,884,882,
  	1,0,0,0,884,885,1,0,0,0,885,69,1,0,0,0,886,884,1,0,0,0,887,888,3,280,
  	140,0,888,889,5,150,0,0,889,890,3,74,37,0,890,71,1,0,0,0,891,892,5,68,
  	0,0,892,893,5,150,0,0,893,895,5,69,0,0,894,896,5,150,0,0,895,894,1,0,
  	0,0,895,896,1,0,0,0,896,897,1,0,0,0,897,899,5,2,0,0,898,900,5,150,0,0,
  	899,898,1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,903,3,280,140,0,902,
  	904,5,150,0,0,903,902,1,0,0,0,903,904,1,0,0,0,904,905,1,0,0,0,905,906,
  	5,4,0,0,906,73,1,0,0,0,907,908,6,37,-1,0,908,960,3,288,144,0,909,911,
  	5,85,0,0,910,912,5,150,0,0,911,910,1,0,0,0,911,912,1,0,0,0,912,913,1,
  	0,0,0,913,915,5,2,0,0,914,916,5,150,0,0,915,914,1,0,0,0,915,916,1,0,0,
  	0,916,917,1,0,0,0,917,919,3,68,34,0,918,920,5,150,0,0,919,918,1,0,0,0,
  	919,920,1,0,0,0,920,921,1,0,0,0,921,922,5,4,0,0,922,960,1,0,0,0,923,925,
  	3,288,144,0,924,926,5,150,0,0,925,924,1,0,0,0,925,926,1,0,0,0,926,927,
  	1,0,0,0,927,929,5,2,0,0,928,930,5,150,0,0,929,928,1,0,0,0,929,930,1,0,
  	0,0,930,931,1,0,0,0,931,933,3,68,34,0,932,934,5,150,0,0,933,932,1,0,0,
  	0,933,934,1,0,0,0,934,935,1,0,0,0,935,936,5,4,0,0,936,960,1,0,0,0,937,
  	939,3,288,144,0,938,940,5,150,0,0,939,938,1,0,0,0,939,940,1,0,0,0,940,
  	941,1,0,0,0,941,943,5,2,0,0,942,944,5,150,0,0,943,942,1,0,0,0,943,944,
  	1,0,0,0,944,945,1,0,0,0,945,947,3,74,37,0,946,948,5,150,0,0,947,946,1,
  	0,0,0,947,948,1,0,0,0,948,949,1,0,0,0,949,951,5,3,0,0,950,952,5,150,0,
  	0,951,950,1,0,0,0,951,952,1,0,0,0,952,953,1,0,0,0,953,955,3,74,37,0,954,
  	956,5,150,0,0,955,954,1,0,0,0,955,956,1,0,0,0,956,957,1,0,0,0,957,958,
  	5,4,0,0,958,960,1,0,0,0,959,907,1,0,0,0,959,909,1,0,0,0,959,923,1,0,0,
  	0,959,937,1,0,0,0,960,965,1,0,0,0,961,962,10,4,0,0,962,964,3,76,38,0,
  	963,961,1,0,0,0,964,967,1,0,0,0,965,963,1,0,0,0,965,966,1,0,0,0,966,75,
  	1,0,0,0,967,965,1,0,0,0,968,972,3,78,39,0,969,971,3,78,39,0,970,969,1,
  	0,0,0,971,974,1,0,0,0,972,970,1,0,0,0,972,973,1,0,0,0,973,77,1,0,0,0,
  	974,972,1,0,0,0,975,977,5,7,0,0,976,978,3,282,141,0,977,976,1,0,0,0,977,
  	978,1,0,0,0,978,979,1,0,0,0,979,980,5,8,0,0,980,79,1,0,0,0,981,984,3,
  	82,41,0,982,984,3,84,42,0,983,981,1,0,0,0,983,982,1,0,0,0,984,81,1,0,
  	0,0,985,986,5,72,0,0,986,83,1,0,0,0,987,988,5,73,0,0,988,85,1,0,0,0,989,
  	990,5,74,0,0,990,991,5,150,0,0,991,1004,5,75,0,0,992,993,5,74,0,0,993,
  	994,5,150,0,0,994,995,5,75,0,0,995,996,5,150,0,0,996,997,5,76,0,0,997,
  	998,5,150,0,0,998,1004,5,77,0,0,999,1004,5,79,0,0,1000,1004,5,80,0,0,
  	1001,1004,5,81,0,0,1002,1004,5,82,0,0,1003,989,1,0,0,0,1003,992,1,0,0,
  	0,1003,999,1,0,0,0,1003,1000,1,0,0,0,1003,1001,1,0,0,0,1003,1002,1,0,
  	0,0,1004,87,1,0,0,0,1005,1008,3,90,45,0,1006,1008,3,92,46,0,1007,1005,
  	1,0,0,0,1007,1006,1,0,0,0,1008,89,1,0,0,0,1009,1010,5,87,0,0,1010,1011,
  	5,150,0,0,1011,1012,5,84,0,0,1012,1015,5,150,0,0,1013,1016,5,136,0,0,
  	1014,1016,3,272,136,0,1015,1013,1,0,0,0,1015,1014,1,0,0,0,1016,91,1,0,
  	0,0,1017,1018,5,83,0,0,1018,1019,5,150,0,0,1019,1020,3,272,136,0,1020,
  	93,1,0,0,0,1021,1022,3,96,48,0,1022,95,1,0,0,0,1023,1030,3,100,50,0,1024,
  	1026,5,150,0,0,1025,1024,1,0,0,0,1025,1026,1,0,0,0,1026,1027,1,0,0,0,
  	1027,1029,3,98,49,0,1028,1025,1,0,0,0,1029,1032,1,0,0,0,1030,1028,1,0,
  	0,0,1030,1031,1,0,0,0,1031,1045,1,0,0,0,1032,1030,1,0,0,0,1033,1035,3,
  	134,67,0,1034,1036,5,150,0,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,
  	1038,1,0,0,0,1037,1033,1,0,0,0,1038,1039,1,0,0,0,1039,1037,1,0,0,0,1039,
  	1040,1,0,0,0,1040,1041,1,0,0,0,1041,1042,3,100,50,0,1042,1043,6,48,-1,
  	0,1043,1045,1,0,0,0,1044,1023,1,0,0,0,1044,1037,1,0,0,0,1045,97,1,0,0,
  	0,1046,1047,5,85,0,0,1047,1048,5,150,0,0,1048,1050,5,86,0,0,1049,1051,
  	5,150,0,0,1050,1049,1,0,0,0,1050,1051,1,0,0,0,1051,1052,1,0,0,0,1052,
  	1059,3,100,50,0,1053,1055,5,85,0,0,1054,1056,5,150,0,0,1055,1054,1,0,
  	0,0,1055,1056,1,0,0,0,1056,1057,1,0,0,0,1057,1059,3,100,50,0,1058,1046,
  	1,0,0,0,1058,1053,1,0,0,0,1059,99,1,0,0,0,1060,1063,3,102,51,0,1061,1063,
  	3,104,52,0,1062,1060,1,0,0,0,1062,1061,1,0,0,0,1063,101,1,0,0,0,1064,
  	1066,3,110,55,0,1065,1067,5,150,0,0,1066,1065,1,0,0,0,1066,1067,1,0,0,
  	0,1067,1069,1,0,0,0,1068,1064,1,0,0,0,1069,1072,1,0,0,0,1070,1068,1,0,
  	0,0,1070,1071,1,0,0,0,1071,1073,1,0,0,0,1072,1070,1,0,0,0,1073,1110,3,
  	134,67,0,1074,1076,3,110,55,0,1075,1077,5,150,0,0,1076,1075,1,0,0,0,1076,
  	1077,1,0,0,0,1077,1079,1,0,0,0,1078,1074,1,0,0,0,1079,1082,1,0,0,0,1080,
  	1078,1,0,0,0,1080,1081,1,0,0,0,1081,1083,1,0,0,0,1082,1080,1,0,0,0,1083,
  	1090,3,108,54,0,1084,1086,5,150,0,0,1085,1084,1,0,0,0,1085,1086,1,0,0,
  	0,1086,1087,1,0,0,0,1087,1089,3,108,54,0,1088,1085,1,0,0,0,1089,1092,
  	1,0,0,0,1090,1088,1,0,0,0,1090,1091,1,0,0,0,1091,1097,1,0,0,0,1092,1090,
  	1,0,0,0,1093,1095,5,150,0,0,1094,1093,1,0,0,0,1094,1095,1,0,0,0,1095,
  	1096,1,0,0,0,1096,1098,3,134,67,0,1097,1094,1,0,0,0,1097,1098,1,0,0,0,
  	1098,1110,1,0,0,0,1099,1101,3,110,55,0,1100,1102,5,150,0,0,1101,1100,
  	1,0,0,0,1101,1102,1,0,0,0,1102,1104,1,0,0,0,1103,1099,1,0,0,0,1104,1105,
  	1,0,0,0,1105,1103,1,0,0,0,1105,1106,1,0,0,0,1106,1107,1,0,0,0,1107,1108,
  	6,51,-1,0,1108,1110,1,0,0,0,1109,1070,1,0,0,0,1109,1080,1,0,0,0,1109,
  	1103,1,0,0,0,1110,103,1,0,0,0,1111,1113,3,106,53,0,1112,1114,5,150,0,
  	0,1113,1112,1,0,0,0,1113,1114,1,0,0,0,1114,1116,1,0,0,0,1115,1111,1,0,
  	0,0,1116,1117,1,0,0,0,1117,1115,1,0,0,0,1117,1118,1,0,0,0,1118,1119,1,
  	0,0,0,1119,1120,3,102,51,0,1120,105,1,0,0,0,1121,1123,3,110,55,0,1122,
  	1124,5,150,0,0,1123,1122,1,0,0,0,1123,1124,1,0,0,0,1124,1126,1,0,0,0,
  	1125,1121,1,0,0,0,1126,1129,1,0,0,0,1127,1125,1,0,0,0,1127,1128,1,0,0,
  	0,1128,1136,1,0,0,0,1129,1127,1,0,0,0,1130,1132,3,108,54,0,1131,1133,
  	5,150,0,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,1133,1135,1,0,0,0,1134,
  	1130,1,0,0,0,1135,1138,1,0,0,0,1136,1134,1,0,0,0,1136,1137,1,0,0,0,1137,
  	1139,1,0,0,0,1138,1136,1,0,0,0,1139,1140,3,132,66,0,1140,107,1,0,0,0,
  	1141,1146,3,120,60,0,1142,1146,3,122,61,0,1143,1146,3,126,63,0,1144,1146,
  	3,130,65,0,1145,1141,1,0,0,0,1145,1142,1,0,0,0,1145,1143,1,0,0,0,1145,
  	1144,1,0,0,0,1146,109,1,0,0,0,1147,1152,3,116,58,0,1148,1152,3,118,59,
  	0,1149,1152,3,114,57,0,1150,1152,3,112,56,0,1151,1147,1,0,0,0,1151,1148,
  	1,0,0,0,1151,1149,1,0,0,0,1151,1150,1,0,0,0,1152,111,1,0,0,0,1153,1171,
  	5,87,0,0,1154,1155,5,150,0,0,1155,1156,5,98,0,0,1156,1157,5,150,0,0,1157,
  	1159,5,88,0,0,1158,1160,5,150,0,0,1159,1158,1,0,0,0,1159,1160,1,0,0,0,
  	1160,1161,1,0,0,0,1161,1163,5,2,0,0,1162,1164,5,150,0,0,1163,1162,1,0,
  	0,0,1163,1164,1,0,0,0,1164,1165,1,0,0,0,1165,1167,3,68,34,0,1166,1168,
  	5,150,0,0,1167,1166,1,0,0,0,1167,1168,1,0,0,0,1168,1169,1,0,0,0,1169,
  	1170,5,4,0,0,1170,1172,1,0,0,0,1171,1154,1,0,0,0,1171,1172,1,0,0,0,1172,
  	1173,1,0,0,0,1173,1174,5,150,0,0,1174,1175,5,54,0,0,1175,1176,5,150,0,
  	0,1176,1181,3,10,5,0,1177,1179,5,150,0,0,1178,1177,1,0,0,0,1178,1179,
  	1,0,0,0,1179,1180,1,0,0,0,1180,1182,3,42,21,0,1181,1178,1,0,0,0,1181,
  	1182,1,0,0,0,1182,1187,1,0,0,0,1183,1185,5,150,0,0,1184,1183,1,0,0,0,
  	1184,1185,1,0,0,0,1185,1186,1,0,0,0,1186,1188,3,150,75,0,1187,1184,1,
  	0,0,0,1187,1188,1,0,0,0,1188,113,1,0,0,0,1189,1190,5,49,0,0,1190,1191,
  	5,150,0,0,1191,1196,3,254,127,0,1192,1194,5,150,0,0,1193,1192,1,0,0,0,
  	1193,1194,1,0,0,0,1194,1195,1,0,0,0,1195,1197,3,150,75,0,1196,1193,1,
  	0,0,0,1196,1197,1,0,0,0,1197,115,1,0,0,0,1198,1199,5,89,0,0,1199,1201,
  	5,150,0,0,1200,1198,1,0,0,0,1200,1201,1,0,0,0,1201,1202,1,0,0,0,1202,
  	1204,5,90,0,0,1203,1205,5,150,0,0,1204,1203,1,0,0,0,1204,1205,1,0,0,0,
  	1205,1206,1,0,0,0,1206,1211,3,152,76,0,1207,1209,5,150,0,0,1208,1207,
  	1,0,0,0,1208,1209,1,0,0,0,1209,1210,1,0,0,0,1210,1212,3,150,75,0,1211,
  	1208,1,0,0,0,1211,1212,1,0,0,0,1212,117,1,0,0,0,1213,1215,5,91,0,0,1214,
  	1216,5,150,0,0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,1217,1,0,0,0,
  	1217,1218,3,192,96,0,1218,1219,5,150,0,0,1219,1220,5,102,0,0,1220,1221,
  	5,150,0,0,1221,1222,3,272,136,0,1222,119,1,0,0,0,1223,1225,5,92,0,0,1224,
  	1226,5,150,0,0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,1227,1,0,0,0,
  	1227,1228,3,152,76,0,1228,121,1,0,0,0,1229,1231,5,93,0,0,1230,1232,5,
  	150,0,0,1231,1230,1,0,0,0,1231,1232,1,0,0,0,1232,1233,1,0,0,0,1233,1238,
  	3,152,76,0,1234,1235,5,150,0,0,1235,1237,3,124,62,0,1236,1234,1,0,0,0,
  	1237,1240,1,0,0,0,1238,1236,1,0,0,0,1238,1239,1,0,0,0,1239,123,1,0,0,
  	0,1240,1238,1,0,0,0,1241,1242,5,94,0,0,1242,1243,5,150,0,0,1243,1244,
  	5,90,0,0,1244,1245,5,150,0,0,1245,1252,3,126,63,0,1246,1247,5,94,0,0,
  	1247,1248,5,150,0,0,1248,1249,5,92,0,0,1249,1250,5,150,0,0,1250,1252,
  	3,126,63,0,1251,1241,1,0,0,0,1251,1246,1,0,0,0,1252,125,1,0,0,0,1253,
  	1255,5,95,0,0,1254,1256,5,150,0,0,1255,1254,1,0,0,0,1255,1256,1,0,0,0,
  	1256,1257,1,0,0,0,1257,1268,3,128,64,0,1258,1260,5,150,0,0,1259,1258,
  	1,0,0,0,1259,1260,1,0,0,0,1260,1261,1,0,0,0,1261,1263,5,3,0,0,1262,1264,
  	5,150,0,0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,1264,1265,1,0,0,0,1265,
  	1267,3,128,64,0,1266,1259,1,0,0,0,1267,1270,1,0,0,0,1268,1266,1,0,0,0,
  	1268,1269,1,0,0,0,1269,127,1,0,0,0,1270,1268,1,0,0,0,1271,1273,3,278,
  	139,0,1272,1274,5,150,0,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,1275,
  	1,0,0,0,1275,1277,5,6,0,0,1276,1278,5,150,0,0,1277,1276,1,0,0,0,1277,
  	1278,1,0,0,0,1278,1279,1,0,0,0,1279,1280,3,192,96,0,1280,129,1,0,0,0,
  	1281,1282,5,96,0,0,1282,1284,5,150,0,0,1283,1281,1,0,0,0,1283,1284,1,
  	0,0,0,1284,1285,1,0,0,0,1285,1287,5,97,0,0,1286,1288,5,150,0,0,1287,1286,
  	1,0,0,0,1287,1288,1,0,0,0,1288,1289,1,0,0,0,1289,1300,3,192,96,0,1290,
  	1292,5,150,0,0,1291,1290,1,0,0,0,1291,1292,1,0,0,0,1292,1293,1,0,0,0,
  	1293,1295,5,3,0,0,1294,1296,5,150,0,0,1295,1294,1,0,0,0,1295,1296,1,0,
  	0,0,1296,1297,1,0,0,0,1297,1299,3,192,96,0,1298,1291,1,0,0,0,1299,1302,
  	1,0,0,0,1300,1298,1,0,0,0,1300,1301,1,0,0,0,1301,131,1,0,0,0,1302,1300,
  	1,0,0,0,1303,1304,5,98,0,0,1304,1309,3,136,68,0,1305,1307,5,150,0,0,1306,
  	1305,1,0,0,0,1306,1307,1,0,0,0,1307,1308,1,0,0,0,1308,1310,3,150,75,0,
  	1309,1306,1,0,0,0,1309,1310,1,0,0,0,1310,133,1,0,0,0,1311,1312,5,99,0,
  	0,1312,1313,3,136,68,0,1313,135,1,0,0,0,1314,1316,5,150,0,0,1315,1314,
  	1,0,0,0,1315,1316,1,0,0,0,1316,1317,1,0,0,0,1317,1319,5,100,0,0,1318,
  	1315,1,0,0,0,1318,1319,1,0,0,0,1319,1320,1,0,0,0,1320,1321,5,150,0,0,
  	1321,1324,3,138,69,0,1322,1323,5,150,0,0,1323,1325,3,142,71,0,1324,1322,
  	1,0,0,0,1324,1325,1,0,0,0,1325,1328,1,0,0,0,1326,1327,5,150,0,0,1327,
  	1329,3,144,72,0,1328,1326,1,0,0,0,1328,1329,1,0,0,0,1329,1332,1,0,0,0,
  	1330,1331,5,150,0,0,1331,1333,3,146,73,0,1332,1330,1,0,0,0,1332,1333,
  	1,0,0,0,1333,137,1,0,0,0,1334,1345,5,101,0,0,1335,1337,5,150,0,0,1336,
  	1335,1,0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,0,0,1338,1340,5,3,0,0,1339,
  	1341,5,150,0,0,1340,1339,1,0,0,0,1340,1341,1,0,0,0,1341,1342,1,0,0,0,
  	1342,1344,3,140,70,0,1343,1336,1,0,0,0,1344,1347,1,0,0,0,1345,1343,1,
  	0,0,0,1345,1346,1,0,0,0,1346,1363,1,0,0,0,1347,1345,1,0,0,0,1348,1359,
  	3,140,70,0,1349,1351,5,150,0,0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,
  	1352,1,0,0,0,1352,1354,5,3,0,0,1353,1355,5,150,0,0,1354,1353,1,0,0,0,
  	1354,1355,1,0,0,0,1355,1356,1,0,0,0,1356,1358,3,140,70,0,1357,1350,1,
  	0,0,0,1358,1361,1,0,0,0,1359,1357,1,0,0,0,1359,1360,1,0,0,0,1360,1363,
  	1,0,0,0,1361,1359,1,0,0,0,1362,1334,1,0,0,0,1362,1348,1,0,0,0,1363,139,
  	1,0,0,0,1364,1365,3,192,96,0,1365,1366,5,150,0,0,1366,1367,5,102,0,0,
  	1367,1368,5,150,0,0,1368,1369,3,272,136,0,1369,1372,1,0,0,0,1370,1372,
  	3,192,96,0,1371,1364,1,0,0,0,1371,1370,1,0,0,0,1372,141,1,0,0,0,1373,
  	1374,5,103,0,0,1374,1375,5,150,0,0,1375,1376,5,104,0,0,1376,1377,5,150,
  	0,0,1377,1385,3,148,74,0,1378,1380,5,3,0,0,1379,1381,5,150,0,0,1380,1379,
  	1,0,0,0,1380,1381,1,0,0,0,1381,1382,1,0,0,0,1382,1384,3,148,74,0,1383,
  	1378,1,0,0,0,1384,1387,1,0,0,0,1385,1383,1,0,0,0,1385,1386,1,0,0,0,1386,
  	143,1,0,0,0,1387,1385,1,0,0,0,1388,1389,5,105,0,0,1389,1390,5,150,0,0,
  	1390,1391,3,192,96,0,1391,145,1,0,0,0,1392,1393,5,106,0,0,1393,1394,5,
  	150,0,0,1394,1395,3,192,96,0,1395,147,1,0,0,0,1396,1401,3,192,96,0,1397,
  	1399,5,150,0,0,1398,1397,1,0,0,0,1398,1399,1,0,0,0,1399,1400,1,0,0,0,
  	1400,1402,7,1,0,0,1401,1398,1,0,0,0,1401,1402,1,0,0,0,1402,149,1,0,0,
  	0,1403,1404,5,111,0,0,1404,1405,5,150,0,0,1405,1406,3,192,96,0,1406,151,
  	1,0,0,0,1407,1418,3,154,77,0,1408,1410,5,150,0,0,1409,1408,1,0,0,0,1409,
  	1410,1,0,0,0,1410,1411,1,0,0,0,1411,1413,5,3,0,0,1412,1414,5,150,0,0,
  	1413,1412,1,0,0,0,1413,1414,1,0,0,0,1414,1415,1,0,0,0,1415,1417,3,154,
  	77,0,1416,1409,1,0,0,0,1417,1420,1,0,0,0,1418,1416,1,0,0,0,1418,1419,
  	1,0,0,0,1419,153,1,0,0,0,1420,1418,1,0,0,0,1421,1423,3,272,136,0,1422,
  	1424,5,150,0,0,1423,1422,1,0,0,0,1423,1424,1,0,0,0,1424,1425,1,0,0,0,
  	1425,1427,5,6,0,0,1426,1428,5,150,0,0,1427,1426,1,0,0,0,1427,1428,1,0,
  	0,0,1428,1429,1,0,0,0,1429,1430,3,156,78,0,1430,1433,1,0,0,0,1431,1433,
  	3,156,78,0,1432,1421,1,0,0,0,1432,1431,1,0,0,0,1433,155,1,0,0,0,1434,
  	1435,3,158,79,0,1435,157,1,0,0,0,1436,1443,3,160,80,0,1437,1439,5,150,
  	0,0,1438,1437,1,0,0,0,1438,1439,1,0,0,0,1439,1440,1,0,0,0,1440,1442,3,
  	162,81,0,1441,1438,1,0,0,0,1442,1445,1,0,0,0,1443,1441,1,0,0,0,1443,1444,
  	1,0,0,0,1444,1451,1,0,0,0,1445,1443,1,0,0,0,1446,1447,5,2,0,0,1447,1448,
  	3,158,79,0,1448,1449,5,4,0,0,1449,1451,1,0,0,0,1450,1436,1,0,0,0,1450,
  	1446,1,0,0,0,1451,159,1,0,0,0,1452,1454,5,2,0,0,1453,1455,5,150,0,0,1454,
  	1453,1,0,0,0,1454,1455,1,0,0,0,1455,1460,1,0,0,0,1456,1458,3,272,136,
  	0,1457,1459,5,150,0,0,1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,1461,1,
  	0,0,0,1460,1456,1,0,0,0,1460,1461,1,0,0,0,1461,1466,1,0,0,0,1462,1464,
  	3,172,86,0,1463,1465,5,150,0,0,1464,1463,1,0,0,0,1464,1465,1,0,0,0,1465,
  	1467,1,0,0,0,1466,1462,1,0,0,0,1466,1467,1,0,0,0,1467,1472,1,0,0,0,1468,
  	1470,3,168,84,0,1469,1471,5,150,0,0,1470,1469,1,0,0,0,1470,1471,1,0,0,
  	0,1471,1473,1,0,0,0,1472,1468,1,0,0,0,1472,1473,1,0,0,0,1473,1474,1,0,
  	0,0,1474,1475,5,4,0,0,1475,161,1,0,0,0,1476,1478,3,164,82,0,1477,1479,
  	5,150,0,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,1479,1480,1,0,0,0,1480,
  	1481,3,160,80,0,1481,163,1,0,0,0,1482,1484,3,292,146,0,1483,1485,5,150,
  	0,0,1484,1483,1,0,0,0,1484,1485,1,0,0,0,1485,1486,1,0,0,0,1486,1488,3,
  	296,148,0,1487,1489,5,150,0,0,1488,1487,1,0,0,0,1488,1489,1,0,0,0,1489,
  	1491,1,0,0,0,1490,1492,3,166,83,0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,
  	1492,1494,1,0,0,0,1493,1495,5,150,0,0,1494,1493,1,0,0,0,1494,1495,1,0,
  	0,0,1495,1496,1,0,0,0,1496,1497,3,296,148,0,1497,1527,1,0,0,0,1498,1500,
  	3,296,148,0,1499,1501,5,150,0,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,
  	1503,1,0,0,0,1502,1504,3,166,83,0,1503,1502,1,0,0,0,1503,1504,1,0,0,0,
  	1504,1506,1,0,0,0,1505,1507,5,150,0,0,1506,1505,1,0,0,0,1506,1507,1,0,
  	0,0,1507,1508,1,0,0,0,1508,1510,3,296,148,0,1509,1511,5,150,0,0,1510,
  	1509,1,0,0,0,1510,1511,1,0,0,0,1511,1512,1,0,0,0,1512,1513,3,294,147,
  	0,1513,1527,1,0,0,0,1514,1516,3,296,148,0,1515,1517,5,150,0,0,1516,1515,
  	1,0,0,0,1516,1517,1,0,0,0,1517,1519,1,0,0,0,1518,1520,3,166,83,0,1519,
  	1518,1,0,0,0,1519,1520,1,0,0,0,1520,1522,1,0,0,0,1521,1523,5,150,0,0,
  	1522,1521,1,0,0,0,1522,1523,1,0,0,0,1523,1524,1,0,0,0,1524,1525,3,296,
  	148,0,1525,1527,1,0,0,0,1526,1482,1,0,0,0,1526,1498,1,0,0,0,1526,1514,
  	1,0,0,0,1527,165,1,0,0,0,1528,1530,5,7,0,0,1529,1531,5,150,0,0,1530,1529,
  	1,0,0,0,1530,1531,1,0,0,0,1531,1536,1,0,0,0,1532,1534,3,272,136,0,1533,
  	1535,5,150,0,0,1534,1533,1,0,0,0,1534,1535,1,0,0,0,1535,1537,1,0,0,0,
  	1536,1532,1,0,0,0,1536,1537,1,0,0,0,1537,1542,1,0,0,0,1538,1540,3,170,
  	85,0,1539,1541,5,150,0,0,1540,1539,1,0,0,0,1540,1541,1,0,0,0,1541,1543,
  	1,0,0,0,1542,1538,1,0,0,0,1542,1543,1,0,0,0,1543,1548,1,0,0,0,1544,1546,
  	3,176,88,0,1545,1547,5,150,0,0,1546,1545,1,0,0,0,1546,1547,1,0,0,0,1547,
  	1549,1,0,0,0,1548,1544,1,0,0,0,1548,1549,1,0,0,0,1549,1554,1,0,0,0,1550,
  	1552,3,168,84,0,1551,1553,5,150,0,0,1552,1551,1,0,0,0,1552,1553,1,0,0,
  	0,1553,1555,1,0,0,0,1554,1550,1,0,0,0,1554,1555,1,0,0,0,1555,1556,1,0,
  	0,0,1556,1557,5,8,0,0,1557,167,1,0,0,0,1558,1560,5,9,0,0,1559,1561,5,
  	150,0,0,1560,1559,1,0,0,0,1560,1561,1,0,0,0,1561,1595,1,0,0,0,1562,1564,
  	3,280,140,0,1563,1565,5,150,0,0,1564,1563,1,0,0,0,1564,1565,1,0,0,0,1565,
  	1566,1,0,0,0,1566,1568,5,120,0,0,1567,1569,5,150,0,0,1568,1567,1,0,0,
  	0,1568,1569,1,0,0,0,1569,1570,1,0,0,0,1570,1572,3,192,96,0,1571,1573,
  	5,150,0,0,1572,1571,1,0,0,0,1572,1573,1,0,0,0,1573,1592,1,0,0,0,1574,
  	1576,5,3,0,0,1575,1577,5,150,0,0,1576,1575,1,0,0,0,1576,1577,1,0,0,0,
  	1577,1578,1,0,0,0,1578,1580,3,280,140,0,1579,1581,5,150,0,0,1580,1579,
  	1,0,0,0,1580,1581,1,0,0,0,1581,1582,1,0,0,0,1582,1584,5,120,0,0,1583,
  	1585,5,150,0,0,1584,1583,1,0,0,0,1584,1585,1,0,0,0,1585,1586,1,0,0,0,
  	1586,1588,3,192,96,0,1587,1589,5,150,0,0,1588,1587,1,0,0,0,1588,1589,
  	1,0,0,0,1589,1591,1,0,0,0,1590,1574,1,0,0,0,1591,1594,1,0,0,0,1592,1590,
  	1,0,0,0,1592,1593,1,0,0,0,1593,1596,1,0,0,0,1594,1592,1,0,0,0,1595,1562,
  	1,0,0,0,1595,1596,1,0,0,0,1596,1597,1,0,0,0,1597,1598,5,10,0,0,1598,169,
  	1,0,0,0,1599,1601,5,120,0,0,1600,1602,5,150,0,0,1601,1600,1,0,0,0,1601,
  	1602,1,0,0,0,1602,1603,1,0,0,0,1603,1617,3,190,95,0,1604,1606,5,150,0,
  	0,1605,1604,1,0,0,0,1605,1606,1,0,0,0,1606,1607,1,0,0,0,1607,1609,5,11,
  	0,0,1608,1610,5,120,0,0,1609,1608,1,0,0,0,1609,1610,1,0,0,0,1610,1612,
  	1,0,0,0,1611,1613,5,150,0,0,1612,1611,1,0,0,0,1612,1613,1,0,0,0,1613,
  	1614,1,0,0,0,1614,1616,3,190,95,0,1615,1605,1,0,0,0,1616,1619,1,0,0,0,
  	1617,1615,1,0,0,0,1617,1618,1,0,0,0,1618,171,1,0,0,0,1619,1617,1,0,0,
  	0,1620,1627,3,174,87,0,1621,1623,5,150,0,0,1622,1621,1,0,0,0,1622,1623,
  	1,0,0,0,1623,1624,1,0,0,0,1624,1626,3,174,87,0,1625,1622,1,0,0,0,1626,
  	1629,1,0,0,0,1627,1625,1,0,0,0,1627,1628,1,0,0,0,1628,173,1,0,0,0,1629,
  	1627,1,0,0,0,1630,1632,5,120,0,0,1631,1633,5,150,0,0,1632,1631,1,0,0,
  	0,1632,1633,1,0,0,0,1633,1634,1,0,0,0,1634,1635,3,188,94,0,1635,175,1,
  	0,0,0,1636,1638,5,101,0,0,1637,1639,5,150,0,0,1638,1637,1,0,0,0,1638,
  	1639,1,0,0,0,1639,1644,1,0,0,0,1640,1645,5,112,0,0,1641,1642,5,86,0,0,
  	1642,1643,5,150,0,0,1643,1645,5,112,0,0,1644,1640,1,0,0,0,1644,1641,1,
  	0,0,0,1644,1645,1,0,0,0,1645,1647,1,0,0,0,1646,1648,5,150,0,0,1647,1646,
  	1,0,0,0,1647,1648,1,0,0,0,1648,1663,1,0,0,0,1649,1651,3,184,92,0,1650,
  	1649,1,0,0,0,1650,1651,1,0,0,0,1651,1653,1,0,0,0,1652,1654,5,150,0,0,
  	1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,1655,1,0,0,0,1655,1657,5,12,
  	0,0,1656,1658,5,150,0,0,1657,1656,1,0,0,0,1657,1658,1,0,0,0,1658,1660,
  	1,0,0,0,1659,1661,3,186,93,0,1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,
  	1664,1,0,0,0,1662,1664,3,282,141,0,1663,1650,1,0,0,0,1663,1662,1,0,0,
  	0,1663,1664,1,0,0,0,1664,1669,1,0,0,0,1665,1667,5,150,0,0,1666,1665,1,
  	0,0,0,1666,1667,1,0,0,0,1667,1668,1,0,0,0,1668,1670,3,178,89,0,1669,1666,
  	1,0,0,0,1669,1670,1,0,0,0,1670,177,1,0,0,0,1671,1673,5,2,0,0,1672,1674,
  	5,150,0,0,1673,1672,1,0,0,0,1673,1674,1,0,0,0,1674,1675,1,0,0,0,1675,
  	1677,3,272,136,0,1676,1678,5,150,0,0,1677,1676,1,0,0,0,1677,1678,1,0,
  	0,0,1678,1679,1,0,0,0,1679,1681,5,3,0,0,1680,1682,5,150,0,0,1681,1680,
  	1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,0,0,0,1683,1692,3,272,136,0,1684,
  	1686,5,150,0,0,1685,1684,1,0,0,0,1685,1686,1,0,0,0,1686,1687,1,0,0,0,
  	1687,1689,5,11,0,0,1688,1690,5,150,0,0,1689,1688,1,0,0,0,1689,1690,1,
  	0,0,0,1690,1691,1,0,0,0,1691,1693,3,150,75,0,1692,1685,1,0,0,0,1692,1693,
  	1,0,0,0,1693,1713,1,0,0,0,1694,1696,5,150,0,0,1695,1694,1,0,0,0,1695,
  	1696,1,0,0,0,1696,1697,1,0,0,0,1697,1699,5,11,0,0,1698,1700,5,150,0,0,
  	1699,1698,1,0,0,0,1699,1700,1,0,0,0,1700,1701,1,0,0,0,1701,1703,3,182,
  	91,0,1702,1704,5,150,0,0,1703,1702,1,0,0,0,1703,1704,1,0,0,0,1704,1705,
  	1,0,0,0,1705,1707,5,3,0,0,1706,1708,5,150,0,0,1707,1706,1,0,0,0,1707,
  	1708,1,0,0,0,1708,1709,1,0,0,0,1709,1711,3,180,90,0,1710,1712,5,150,0,
  	0,1711,1710,1,0,0,0,1711,1712,1,0,0,0,1712,1714,1,0,0,0,1713,1695,1,0,
  	0,0,1713,1714,1,0,0,0,1714,1715,1,0,0,0,1715,1716,5,4,0,0,1716,179,1,
  	0,0,0,1717,1719,5,9,0,0,1718,1720,5,150,0,0,1719,1718,1,0,0,0,1719,1720,
  	1,0,0,0,1720,1722,1,0,0,0,1721,1723,3,138,69,0,1722,1721,1,0,0,0,1722,
  	1723,1,0,0,0,1723,1725,1,0,0,0,1724,1726,5,150,0,0,1725,1724,1,0,0,0,
  	1725,1726,1,0,0,0,1726,1727,1,0,0,0,1727,1728,5,10,0,0,1728,181,1,0,0,
  	0,1729,1731,5,9,0,0,1730,1732,5,150,0,0,1731,1730,1,0,0,0,1731,1732,1,
  	0,0,0,1732,1734,1,0,0,0,1733,1735,3,138,69,0,1734,1733,1,0,0,0,1734,1735,
  	1,0,0,0,1735,1737,1,0,0,0,1736,1738,5,150,0,0,1737,1736,1,0,0,0,1737,
  	1738,1,0,0,0,1738,1739,1,0,0,0,1739,1740,5,10,0,0,1740,183,1,0,0,0,1741,
  	1742,5,138,0,0,1742,185,1,0,0,0,1743,1744,5,138,0,0,1744,187,1,0,0,0,
  	1745,1746,3,286,143,0,1746,189,1,0,0,0,1747,1748,3,286,143,0,1748,191,
  	1,0,0,0,1749,1750,3,194,97,0,1750,193,1,0,0,0,1751,1758,3,196,98,0,1752,
  	1753,5,150,0,0,1753,1754,5,113,0,0,1754,1755,5,150,0,0,1755,1757,3,196,
  	98,0,1756,1752,1,0,0,0,1757,1760,1,0,0,0,1758,1756,1,0,0,0,1758,1759,
  	1,0,0,0,1759,195,1,0,0,0,1760,1758,1,0,0,0,1761,1768,3,198,99,0,1762,
  	1763,5,150,0,0,1763,1764,5,114,0,0,1764,1765,5,150,0,0,1765,1767,3,198,
  	99,0,1766,1762,1,0,0,0,1767,1770,1,0,0,0,1768,1766,1,0,0,0,1768,1769,
  	1,0,0,0,1769,197,1,0,0,0,1770,1768,1,0,0,0,1771,1778,3,200,100,0,1772,
  	1773,5,150,0,0,1773,1774,5,115,0,0,1774,1775,5,150,0,0,1775,1777,3,200,
  	100,0,1776,1772,1,0,0,0,1777,1780,1,0,0,0,1778,1776,1,0,0,0,1778,1779,
  	1,0,0,0,1779,199,1,0,0,0,1780,1778,1,0,0,0,1781,1783,5,116,0,0,1782,1784,
  	5,150,0,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,1784,1786,1,0,0,0,1785,
  	1781,1,0,0,0,1786,1789,1,0,0,0,1787,1785,1,0,0,0,1787,1788,1,0,0,0,1788,
  	1790,1,0,0,0,1789,1787,1,0,0,0,1790,1791,3,202,101,0,1791,201,1,0,0,0,
  	1792,1802,3,206,103,0,1793,1795,5,150,0,0,1794,1793,1,0,0,0,1794,1795,
  	1,0,0,0,1795,1796,1,0,0,0,1796,1798,3,204,102,0,1797,1799,5,150,0,0,1798,
  	1797,1,0,0,0,1798,1799,1,0,0,0,1799,1800,1,0,0,0,1800,1801,3,206,103,
  	0,1801,1803,1,0,0,0,1802,1794,1,0,0,0,1802,1803,1,0,0,0,1803,1841,1,0,
  	0,0,1804,1806,3,206,103,0,1805,1807,5,150,0,0,1806,1805,1,0,0,0,1806,
  	1807,1,0,0,0,1807,1808,1,0,0,0,1808,1810,5,117,0,0,1809,1811,5,150,0,
  	0,1810,1809,1,0,0,0,1810,1811,1,0,0,0,1811,1812,1,0,0,0,1812,1813,3,206,
  	103,0,1813,1814,1,0,0,0,1814,1815,6,101,-1,0,1815,1841,1,0,0,0,1816,1818,
  	3,206,103,0,1817,1819,5,150,0,0,1818,1817,1,0,0,0,1818,1819,1,0,0,0,1819,
  	1820,1,0,0,0,1820,1822,3,204,102,0,1821,1823,5,150,0,0,1822,1821,1,0,
  	0,0,1822,1823,1,0,0,0,1823,1824,1,0,0,0,1824,1834,3,206,103,0,1825,1827,
  	5,150,0,0,1826,1825,1,0,0,0,1826,1827,1,0,0,0,1827,1828,1,0,0,0,1828,
  	1830,3,204,102,0,1829,1831,5,150,0,0,1830,1829,1,0,0,0,1830,1831,1,0,
  	0,0,1831,1832,1,0,0,0,1832,1833,3,206,103,0,1833,1835,1,0,0,0,1834,1826,
  	1,0,0,0,1835,1836,1,0,0,0,1836,1834,1,0,0,0,1836,1837,1,0,0,0,1837,1838,
  	1,0,0,0,1838,1839,6,101,-1,0,1839,1841,1,0,0,0,1840,1792,1,0,0,0,1840,
  	1804,1,0,0,0,1840,1816,1,0,0,0,1841,203,1,0,0,0,1842,1843,7,2,0,0,1843,
  	205,1,0,0,0,1844,1855,3,208,104,0,1845,1847,5,150,0,0,1846,1845,1,0,0,
  	0,1846,1847,1,0,0,0,1847,1848,1,0,0,0,1848,1850,5,11,0,0,1849,1851,5,
  	150,0,0,1850,1849,1,0,0,0,1850,1851,1,0,0,0,1851,1852,1,0,0,0,1852,1854,
  	3,208,104,0,1853,1846,1,0,0,0,1854,1857,1,0,0,0,1855,1853,1,0,0,0,1855,
  	1856,1,0,0,0,1856,207,1,0,0,0,1857,1855,1,0,0,0,1858,1869,3,210,105,0,
  	1859,1861,5,150,0,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,1862,1,0,
  	0,0,1862,1864,5,18,0,0,1863,1865,5,150,0,0,1864,1863,1,0,0,0,1864,1865,
  	1,0,0,0,1865,1866,1,0,0,0,1866,1868,3,210,105,0,1867,1860,1,0,0,0,1868,
  	1871,1,0,0,0,1869,1867,1,0,0,0,1869,1870,1,0,0,0,1870,209,1,0,0,0,1871,
  	1869,1,0,0,0,1872,1884,3,214,107,0,1873,1875,5,150,0,0,1874,1873,1,0,
  	0,0,1874,1875,1,0,0,0,1875,1876,1,0,0,0,1876,1878,3,212,106,0,1877,1879,
  	5,150,0,0,1878,1877,1,0,0,0,1878,1879,1,0,0,0,1879,1880,1,0,0,0,1880,
  	1881,3,214,107,0,1881,1883,1,0,0,0,1882,1874,1,0,0,0,1883,1886,1,0,0,
  	0,1884,1882,1,0,0,0,1884,1885,1,0,0,0,1885,211,1,0,0,0,1886,1884,1,0,
  	0,0,1887,1888,7,3,0,0,1888,213,1,0,0,0,1889,1901,3,218,109,0,1890,1892,
  	5,150,0,0,1891,1890,1,0,0,0,1891,1892,1,0,0,0,1892,1893,1,0,0,0,1893,
  	1895,3,216,108,0,1894,1896,5,150,0,0,1895,1894,1,0,0,0,1895,1896,1,0,
  	0,0,1896,1897,1,0,0,0,1897,1898,3,218,109,0,1898,1900,1,0,0,0,1899,1891,
  	1,0,0,0,1900,1903,1,0,0,0,1901,1899,1,0,0,0,1901,1902,1,0,0,0,1902,215,
  	1,0,0,0,1903,1901,1,0,0,0,1904,1905,7,4,0,0,1905,217,1,0,0,0,1906,1918,
  	3,222,111,0,1907,1909,5,150,0,0,1908,1907,1,0,0,0,1908,1909,1,0,0,0,1909,
  	1910,1,0,0,0,1910,1912,3,220,110,0,1911,1913,5,150,0,0,1912,1911,1,0,
  	0,0,1912,1913,1,0,0,0,1913,1914,1,0,0,0,1914,1915,3,222,111,0,1915,1917,
  	1,0,0,0,1916,1908,1,0,0,0,1917,1920,1,0,0,0,1918,1916,1,0,0,0,1918,1919,
  	1,0,0,0,1919,219,1,0,0,0,1920,1918,1,0,0,0,1921,1922,7,5,0,0,1922,221,
  	1,0,0,0,1923,1934,3,224,112,0,1924,1926,5,150,0,0,1925,1924,1,0,0,0,1925,
  	1926,1,0,0,0,1926,1927,1,0,0,0,1927,1929,5,24,0,0,1928,1930,5,150,0,0,
  	1929,1928,1,0,0,0,1929,1930,1,0,0,0,1930,1931,1,0,0,0,1931,1933,3,224,
  	112,0,1932,1925,1,0,0,0,1933,1936,1,0,0,0,1934,1932,1,0,0,0,1934,1935,
  	1,0,0,0,1935,223,1,0,0,0,1936,1934,1,0,0,0,1937,1939,5,118,0,0,1938,1940,
  	5,150,0,0,1939,1938,1,0,0,0,1939,1940,1,0,0,0,1940,1942,1,0,0,0,1941,
  	1937,1,0,0,0,1942,1945,1,0,0,0,1943,1941,1,0,0,0,1943,1944,1,0,0,0,1944,
  	1946,1,0,0,0,1945,1943,1,0,0,0,1946,1951,3,226,113,0,1947,1949,5,150,
  	0,0,1948,1947,1,0,0,0,1948,1949,1,0,0,0,1949,1950,1,0,0,0,1950,1952,5,
  	119,0,0,1951,1948,1,0,0,0,1951,1952,1,0,0,0,1952,225,1,0,0,0,1953,1961,
  	3,236,118,0,1954,1962,3,230,115,0,1955,1957,3,228,114,0,1956,1955,1,0,
  	0,0,1957,1958,1,0,0,0,1958,1956,1,0,0,0,1958,1959,1,0,0,0,1959,1962,1,
  	0,0,0,1960,1962,3,234,117,0,1961,1954,1,0,0,0,1961,1956,1,0,0,0,1961,
  	1960,1,0,0,0,1961,1962,1,0,0,0,1962,227,1,0,0,0,1963,1964,5,150,0,0,1964,
  	1966,5,121,0,0,1965,1967,5,150,0,0,1966,1965,1,0,0,0,1966,1967,1,0,0,
  	0,1967,1968,1,0,0,0,1968,1983,3,236,118,0,1969,1970,5,7,0,0,1970,1971,
  	3,192,96,0,1971,1972,5,8,0,0,1972,1983,1,0,0,0,1973,1975,5,7,0,0,1974,
  	1976,3,192,96,0,1975,1974,1,0,0,0,1975,1976,1,0,0,0,1976,1977,1,0,0,0,
  	1977,1979,5,120,0,0,1978,1980,3,192,96,0,1979,1978,1,0,0,0,1979,1980,
  	1,0,0,0,1980,1981,1,0,0,0,1981,1983,5,8,0,0,1982,1963,1,0,0,0,1982,1969,
  	1,0,0,0,1982,1973,1,0,0,0,1983,229,1,0,0,0,1984,1996,3,232,116,0,1985,
  	1986,5,150,0,0,1986,1987,5,122,0,0,1987,1988,5,150,0,0,1988,1996,5,98,
  	0,0,1989,1990,5,150,0,0,1990,1991,5,123,0,0,1991,1992,5,150,0,0,1992,
  	1996,5,98,0,0,1993,1994,5,150,0,0,1994,1996,5,124,0,0,1995,1984,1,0,0,
  	0,1995,1985,1,0,0,0,1995,1989,1,0,0,0,1995,1993,1,0,0,0,1996,1998,1,0,
  	0,0,1997,1999,5,150,0,0,1998,1997,1,0,0,0,1998,1999,1,0,0,0,1999,2000,
  	1,0,0,0,2000,2001,3,236,118,0,2001,231,1,0,0,0,2002,2004,5,150,0,0,2003,
  	2002,1,0,0,0,2003,2004,1,0,0,0,2004,2005,1,0,0,0,2005,2006,5,25,0,0,2006,
  	233,1,0,0,0,2007,2008,5,150,0,0,2008,2009,5,125,0,0,2009,2010,5,150,0,
  	0,2010,2018,5,126,0,0,2011,2012,5,150,0,0,2012,2013,5,125,0,0,2013,2014,
  	5,150,0,0,2014,2015,5,116,0,0,2015,2016,5,150,0,0,2016,2018,5,126,0,0,
  	2017,2007,1,0,0,0,2017,2011,1,0,0,0,2018,235,1,0,0,0,2019,2026,3,238,
  	119,0,2020,2022,5,150,0,0,2021,2020,1,0,0,0,2021,2022,1,0,0,0,2022,2023,
  	1,0,0,0,2023,2025,3,266,133,0,2024,2021,1,0,0,0,2025,2028,1,0,0,0,2026,
  	2024,1,0,0,0,2026,2027,1,0,0,0,2027,237,1,0,0,0,2028,2026,1,0,0,0,2029,
  	2039,3,240,120,0,2030,2039,3,276,138,0,2031,2039,3,268,134,0,2032,2039,
  	3,252,126,0,2033,2039,3,254,127,0,2034,2039,3,260,130,0,2035,2039,3,262,
  	131,0,2036,2039,3,264,132,0,2037,2039,3,272,136,0,2038,2029,1,0,0,0,2038,
  	2030,1,0,0,0,2038,2031,1,0,0,0,2038,2032,1,0,0,0,2038,2033,1,0,0,0,2038,
  	2034,1,0,0,0,2038,2035,1,0,0,0,2038,2036,1,0,0,0,2038,2037,1,0,0,0,2039,
  	239,1,0,0,0,2040,2047,3,274,137,0,2041,2047,5,136,0,0,2042,2047,3,242,
  	121,0,2043,2047,5,126,0,0,2044,2047,3,244,122,0,2045,2047,3,248,124,0,
  	2046,2040,1,0,0,0,2046,2041,1,0,0,0,2046,2042,1,0,0,0,2046,2043,1,0,0,
  	0,2046,2044,1,0,0,0,2046,2045,1,0,0,0,2047,241,1,0,0,0,2048,2049,7,6,
  	0,0,2049,243,1,0,0,0,2050,2052,5,7,0,0,2051,2053,5,150,0,0,2052,2051,
  	1,0,0,0,2052,2053,1,0,0,0,2053,2067,1,0,0,0,2054,2056,3,192,96,0,2055,
  	2057,5,150,0,0,2056,2055,1,0,0,0,2056,2057,1,0,0,0,2057,2064,1,0,0,0,
  	2058,2060,3,246,123,0,2059,2061,5,150,0,0,2060,2059,1,0,0,0,2060,2061,
  	1,0,0,0,2061,2063,1,0,0,0,2062,2058,1,0,0,0,2063,2066,1,0,0,0,2064,2062,
  	1,0,0,0,2064,2065,1,0,0,0,2065,2068,1,0,0,0,2066,2064,1,0,0,0,2067,2054,
  	1,0,0,0,2067,2068,1,0,0,0,2068,2069,1,0,0,0,2069,2070,5,8,0,0,2070,245,
  	1,0,0,0,2071,2073,5,3,0,0,2072,2074,5,150,0,0,2073,2072,1,0,0,0,2073,
  	2074,1,0,0,0,2074,2076,1,0,0,0,2075,2077,3,192,96,0,2076,2075,1,0,0,0,
  	2076,2077,1,0,0,0,2077,247,1,0,0,0,2078,2080,5,9,0,0,2079,2081,5,150,
  	0,0,2080,2079,1,0,0,0,2080,2081,1,0,0,0,2081,2082,1,0,0,0,2082,2084,3,
  	250,125,0,2083,2085,5,150,0,0,2084,2083,1,0,0,0,2084,2085,1,0,0,0,2085,
  	2096,1,0,0,0,2086,2088,5,3,0,0,2087,2089,5,150,0,0,2088,2087,1,0,0,0,
  	2088,2089,1,0,0,0,2089,2090,1,0,0,0,2090,2092,3,250,125,0,2091,2093,5,
  	150,0,0,2092,2091,1,0,0,0,2092,2093,1,0,0,0,2093,2095,1,0,0,0,2094,2086,
  	1,0,0,0,2095,2098,1,0,0,0,2096,2094,1,0,0,0,2096,2097,1,0,0,0,2097,2099,
  	1,0,0,0,2098,2096,1,0,0,0,2099,2100,5,10,0,0,2100,249,1,0,0,0,2101,2104,
  	3,288,144,0,2102,2104,5,136,0,0,2103,2101,1,0,0,0,2103,2102,1,0,0,0,2104,
  	2106,1,0,0,0,2105,2107,5,150,0,0,2106,2105,1,0,0,0,2106,2107,1,0,0,0,
  	2107,2108,1,0,0,0,2108,2110,5,120,0,0,2109,2111,5,150,0,0,2110,2109,1,
  	0,0,0,2110,2111,1,0,0,0,2111,2112,1,0,0,0,2112,2113,3,192,96,0,2113,251,
  	1,0,0,0,2114,2116,5,2,0,0,2115,2117,5,150,0,0,2116,2115,1,0,0,0,2116,
  	2117,1,0,0,0,2117,2118,1,0,0,0,2118,2120,3,192,96,0,2119,2121,5,150,0,
  	0,2120,2119,1,0,0,0,2120,2121,1,0,0,0,2121,2122,1,0,0,0,2122,2123,5,4,
  	0,0,2123,253,1,0,0,0,2124,2126,5,129,0,0,2125,2127,5,150,0,0,2126,2125,
  	1,0,0,0,2126,2127,1,0,0,0,2127,2128,1,0,0,0,2128,2130,5,2,0,0,2129,2131,
  	5,150,0,0,2130,2129,1,0,0,0,2130,2131,1,0,0,0,2131,2132,1,0,0,0,2132,
  	2134,5,101,0,0,2133,2135,5,150,0,0,2134,2133,1,0,0,0,2134,2135,1,0,0,
  	0,2135,2136,1,0,0,0,2136,2173,5,4,0,0,2137,2139,3,256,128,0,2138,2140,
  	5,150,0,0,2139,2138,1,0,0,0,2139,2140,1,0,0,0,2140,2141,1,0,0,0,2141,
  	2143,5,2,0,0,2142,2144,5,150,0,0,2143,2142,1,0,0,0,2143,2144,1,0,0,0,
  	2144,2149,1,0,0,0,2145,2147,5,100,0,0,2146,2148,5,150,0,0,2147,2146,1,
  	0,0,0,2147,2148,1,0,0,0,2148,2150,1,0,0,0,2149,2145,1,0,0,0,2149,2150,
  	1,0,0,0,2150,2168,1,0,0,0,2151,2153,3,258,129,0,2152,2154,5,150,0,0,2153,
  	2152,1,0,0,0,2153,2154,1,0,0,0,2154,2165,1,0,0,0,2155,2157,5,3,0,0,2156,
  	2158,5,150,0,0,2157,2156,1,0,0,0,2157,2158,1,0,0,0,2158,2159,1,0,0,0,
  	2159,2161,3,258,129,0,2160,2162,5,150,0,0,2161,2160,1,0,0,0,2161,2162,
  	1,0,0,0,2162,2164,1,0,0,0,2163,2155,1,0,0,0,2164,2167,1,0,0,0,2165,2163,
  	1,0,0,0,2165,2166,1,0,0,0,2166,2169,1,0,0,0,2167,2165,1,0,0,0,2168,2151,
  	1,0,0,0,2168,2169,1,0,0,0,2169,2170,1,0,0,0,2170,2171,5,4,0,0,2171,2173,
  	1,0,0,0,2172,2124,1,0,0,0,2172,2137,1,0,0,0,2173,255,1,0,0,0,2174,2175,
  	3,288,144,0,2175,257,1,0,0,0,2176,2178,3,288,144,0,2177,2179,5,150,0,
  	0,2178,2177,1,0,0,0,2178,2179,1,0,0,0,2179,2180,1,0,0,0,2180,2181,5,120,
  	0,0,2181,2183,5,6,0,0,2182,2184,5,150,0,0,2183,2182,1,0,0,0,2183,2184,
  	1,0,0,0,2184,2186,1,0,0,0,2185,2176,1,0,0,0,2185,2186,1,0,0,0,2186,2187,
  	1,0,0,0,2187,2188,3,192,96,0,2188,259,1,0,0,0,2189,2194,3,160,80,0,2190,
  	2192,5,150,0,0,2191,2190,1,0,0,0,2191,2192,1,0,0,0,2192,2193,1,0,0,0,
  	2193,2195,3,162,81,0,2194,2191,1,0,0,0,2195,2196,1,0,0,0,2196,2194,1,
  	0,0,0,2196,2197,1,0,0,0,2197,261,1,0,0,0,2198,2200,5,130,0,0,2199,2201,
  	5,150,0,0,2200,2199,1,0,0,0,2200,2201,1,0,0,0,2201,2202,1,0,0,0,2202,
  	2204,5,9,0,0,2203,2205,5,150,0,0,2204,2203,1,0,0,0,2204,2205,1,0,0,0,
  	2205,2206,1,0,0,0,2206,2208,5,90,0,0,2207,2209,5,150,0,0,2208,2207,1,
  	0,0,0,2208,2209,1,0,0,0,2209,2210,1,0,0,0,2210,2215,3,152,76,0,2211,2213,
  	5,150,0,0,2212,2211,1,0,0,0,2212,2213,1,0,0,0,2213,2214,1,0,0,0,2214,
  	2216,3,150,75,0,2215,2212,1,0,0,0,2215,2216,1,0,0,0,2216,2218,1,0,0,0,
  	2217,2219,5,150,0,0,2218,2217,1,0,0,0,2218,2219,1,0,0,0,2219,2220,1,0,
  	0,0,2220,2221,5,10,0,0,2221,263,1,0,0,0,2222,2224,5,129,0,0,2223,2225,
  	5,150,0,0,2224,2223,1,0,0,0,2224,2225,1,0,0,0,2225,2226,1,0,0,0,2226,
  	2228,5,9,0,0,2227,2229,5,150,0,0,2228,2227,1,0,0,0,2228,2229,1,0,0,0,
  	2229,2230,1,0,0,0,2230,2232,5,90,0,0,2231,2233,5,150,0,0,2232,2231,1,
  	0,0,0,2232,2233,1,0,0,0,2233,2234,1,0,0,0,2234,2239,3,152,76,0,2235,2237,
  	5,150,0,0,2236,2235,1,0,0,0,2236,2237,1,0,0,0,2237,2238,1,0,0,0,2238,
  	2240,3,150,75,0,2239,2236,1,0,0,0,2239,2240,1,0,0,0,2240,2242,1,0,0,0,
  	2241,2243,5,150,0,0,2242,2241,1,0,0,0,2242,2243,1,0,0,0,2243,2244,1,0,
  	0,0,2244,2245,5,10,0,0,2245,265,1,0,0,0,2246,2248,5,5,0,0,2247,2249,5,
  	150,0,0,2248,2247,1,0,0,0,2248,2249,1,0,0,0,2249,2252,1,0,0,0,2250,2253,
  	3,280,140,0,2251,2253,5,101,0,0,2252,2250,1,0,0,0,2252,2251,1,0,0,0,2253,
  	267,1,0,0,0,2254,2259,5,131,0,0,2255,2257,5,150,0,0,2256,2255,1,0,0,0,
  	2256,2257,1,0,0,0,2257,2258,1,0,0,0,2258,2260,3,270,135,0,2259,2256,1,
  	0,0,0,2260,2261,1,0,0,0,2261,2259,1,0,0,0,2261,2262,1,0,0,0,2262,2277,
  	1,0,0,0,2263,2265,5,131,0,0,2264,2266,5,150,0,0,2265,2264,1,0,0,0,2265,
  	2266,1,0,0,0,2266,2267,1,0,0,0,2267,2272,3,192,96,0,2268,2270,5,150,0,
  	0,2269,2268,1,0,0,0,2269,2270,1,0,0,0,2270,2271,1,0,0,0,2271,2273,3,270,
  	135,0,2272,2269,1,0,0,0,2273,2274,1,0,0,0,2274,2272,1,0,0,0,2274,2275,
  	1,0,0,0,2275,2277,1,0,0,0,2276,2254,1,0,0,0,2276,2263,1,0,0,0,2277,2286,
  	1,0,0,0,2278,2280,5,150,0,0,2279,2278,1,0,0,0,2279,2280,1,0,0,0,2280,
  	2281,1,0,0,0,2281,2283,5,132,0,0,2282,2284,5,150,0,0,2283,2282,1,0,0,
  	0,2283,2284,1,0,0,0,2284,2285,1,0,0,0,2285,2287,3,192,96,0,2286,2279,
  	1,0,0,0,2286,2287,1,0,0,0,2287,2289,1,0,0,0,2288,2290,5,150,0,0,2289,
  	2288,1,0,0,0,2289,2290,1,0,0,0,2290,2291,1,0,0,0,2291,2292,5,133,0,0,
  	2292,269,1,0,0,0,2293,2295,5,134,0,0,2294,2296,5,150,0,0,2295,2294,1,
  	0,0,0,2295,2296,1,0,0,0,2296,2297,1,0,0,0,2297,2299,3,192,96,0,2298,2300,
  	5,150,0,0,2299,2298,1,0,0,0,2299,2300,1,0,0,0,2300,2301,1,0,0,0,2301,
  	2303,5,135,0,0,2302,2304,5,150,0,0,2303,2302,1,0,0,0,2303,2304,1,0,0,
  	0,2304,2305,1,0,0,0,2305,2306,3,192,96,0,2306,271,1,0,0,0,2307,2308,3,
  	288,144,0,2308,273,1,0,0,0,2309,2312,3,284,142,0,2310,2312,3,282,141,
  	0,2311,2309,1,0,0,0,2311,2310,1,0,0,0,2312,275,1,0,0,0,2313,2316,5,26,
  	0,0,2314,2317,3,288,144,0,2315,2317,5,138,0,0,2316,2314,1,0,0,0,2316,
  	2315,1,0,0,0,2317,277,1,0,0,0,2318,2320,3,238,119,0,2319,2321,5,150,0,
  	0,2320,2319,1,0,0,0,2320,2321,1,0,0,0,2321,2322,1,0,0,0,2322,2323,3,266,
  	133,0,2323,279,1,0,0,0,2324,2325,3,286,143,0,2325,281,1,0,0,0,2326,2327,
  	5,138,0,0,2327,283,1,0,0,0,2328,2329,5,145,0,0,2329,285,1,0,0,0,2330,
  	2331,3,288,144,0,2331,287,1,0,0,0,2332,2338,5,146,0,0,2333,2334,5,149,
  	0,0,2334,2338,6,144,-1,0,2335,2338,5,139,0,0,2336,2338,3,290,145,0,2337,
  	2332,1,0,0,0,2337,2333,1,0,0,0,2337,2335,1,0,0,0,2337,2336,1,0,0,0,2338,
  	289,1,0,0,0,2339,2340,7,7,0,0,2340,291,1,0,0,0,2341,2342,7,8,0,0,2342,
  	293,1,0,0,0,2343,2344,7,9,0,0,2344,295,1,0,0,0,2345,2346,7,10,0,0,2346,
  	297,1,0,0,0,402,300,304,309,313,318,321,325,328,350,356,360,363,369,372,
  	376,380,384,389,393,400,404,412,416,426,430,434,439,452,456,464,467,475,
  	478,493,498,504,508,511,514,520,524,530,534,539,554,558,580,584,587,590,
  	593,596,600,605,609,619,623,628,633,638,644,648,652,657,664,668,672,675,
  	679,683,695,699,703,707,712,724,728,732,736,740,742,746,750,752,766,770,
  	774,778,783,786,790,794,796,800,804,806,842,853,875,879,884,895,899,903,
  	911,915,919,925,929,933,939,943,947,951,955,959,965,972,977,983,1003,
  	1007,1015,1025,1030,1035,1039,1044,1050,1055,1058,1062,1066,1070,1076,
  	1080,1085,1090,1094,1097,1101,1105,1109,1113,1117,1123,1127,1132,1136,
  	1145,1151,1159,1163,1167,1171,1178,1181,1184,1187,1193,1196,1200,1204,
  	1208,1211,1215,1225,1231,1238,1251,1255,1259,1263,1268,1273,1277,1283,
  	1287,1291,1295,1300,1306,1309,1315,1318,1324,1328,1332,1336,1340,1345,
  	1350,1354,1359,1362,1371,1380,1385,1398,1401,1409,1413,1418,1423,1427,
  	1432,1438,1443,1450,1454,1458,1460,1464,1466,1470,1472,1478,1484,1488,
  	1491,1494,1500,1503,1506,1510,1516,1519,1522,1526,1530,1534,1536,1540,
  	1542,1546,1548,1552,1554,1560,1564,1568,1572,1576,1580,1584,1588,1592,
  	1595,1601,1605,1609,1612,1617,1622,1627,1632,1638,1644,1647,1650,1653,
  	1657,1660,1663,1666,1669,1673,1677,1681,1685,1689,1692,1695,1699,1703,
  	1707,1711,1713,1719,1722,1725,1731,1734,1737,1758,1768,1778,1783,1787,
  	1794,1798,1802,1806,1810,1818,1822,1826,1830,1836,1840,1846,1850,1855,
  	1860,1864,1869,1874,1878,1884,1891,1895,1901,1908,1912,1918,1925,1929,
  	1934,1939,1943,1948,1951,1958,1961,1966,1975,1979,1982,1995,1998,2003,
  	2017,2021,2026,2038,2046,2052,2056,2060,2064,2067,2073,2076,2080,2084,
  	2088,2092,2096,2103,2106,2110,2116,2120,2126,2130,2134,2139,2143,2147,
  	2149,2153,2157,2161,2165,2168,2172,2178,2183,2185,2191,2196,2200,2204,
  	2208,2212,2215,2218,2224,2228,2232,2236,2239,2242,2248,2252,2256,2261,
  	2265,2269,2274,2276,2279,2283,2286,2289,2295,2299,2303,2311,2316,2320,
  	2337
=======
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
<<<<<<< HEAD
  	7,152,2,153,7,153,1,0,1,0,3,0,311,8,0,1,0,1,0,3,0,315,8,0,1,0,5,0,318,
  	8,0,10,0,12,0,321,9,0,1,0,3,0,324,8,0,1,0,1,0,1,1,3,1,329,8,1,1,1,3,1,
  	332,8,1,1,1,1,1,3,1,336,8,1,1,1,3,1,339,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,362,8,2,
  	1,3,1,3,1,3,1,3,3,3,368,8,3,1,3,1,3,3,3,372,8,3,1,3,3,3,375,8,3,1,3,1,
  	3,1,3,1,3,3,3,381,8,3,1,3,3,3,384,8,3,1,4,1,4,3,4,388,8,4,1,4,1,4,3,4,
  	392,8,4,1,4,1,4,3,4,396,8,4,1,4,5,4,399,8,4,10,4,12,4,402,9,4,1,4,3,4,
  	405,8,4,1,4,1,4,1,5,1,5,1,5,3,5,412,8,5,1,5,1,5,3,5,416,8,5,1,5,1,5,1,
  	5,1,5,1,5,1,5,3,5,424,8,5,1,5,1,5,3,5,428,8,5,1,6,1,6,1,6,1,6,1,6,1,6,
  	1,6,1,6,3,6,438,8,6,1,6,1,6,3,6,442,8,6,1,6,1,6,3,6,446,8,6,1,6,5,6,449,
  	8,6,10,6,12,6,452,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,3,7,464,
  	8,7,1,7,1,7,3,7,468,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,476,8,7,1,7,3,7,479,
  	8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,487,8,8,1,8,3,8,490,8,8,1,9,1,9,1,9,1,
  	9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,507,8,10,
  	1,10,3,10,510,8,10,1,10,1,10,3,10,514,8,10,1,10,1,10,1,10,1,10,3,10,520,
  	8,10,1,10,3,10,523,8,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,
  	1,13,1,13,1,13,3,13,537,8,13,1,13,1,13,3,13,541,8,13,1,13,1,13,1,14,1,
  	14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
  	15,1,15,1,15,3,15,563,8,15,1,15,1,15,3,15,567,8,15,1,15,3,15,570,8,15,
  	1,15,3,15,573,8,15,1,15,3,15,576,8,15,1,15,3,15,579,8,15,1,15,1,15,3,
  	15,583,8,15,1,15,5,15,586,8,15,10,15,12,15,589,9,15,1,15,3,15,592,8,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,3,16,602,8,16,1,16,1,16,3,16,
  	606,8,16,1,16,5,16,609,8,16,10,16,12,16,612,9,16,1,17,1,17,3,17,616,8,
  	17,1,17,1,17,1,17,3,17,621,8,17,1,17,1,17,1,18,1,18,3,18,627,8,18,1,18,
  	1,18,3,18,631,8,18,1,18,1,18,3,18,635,8,18,1,18,5,18,638,8,18,10,18,12,
  	18,641,9,18,1,18,1,18,1,18,1,18,3,18,647,8,18,1,18,1,18,3,18,651,8,18,
  	1,18,1,18,3,18,655,8,18,1,18,3,18,658,8,18,1,19,1,19,3,19,662,8,19,1,
  	19,1,19,3,19,666,8,19,1,19,1,19,3,19,670,8,19,1,19,5,19,673,8,19,10,19,
  	12,19,676,9,19,1,19,3,19,679,8,19,1,19,1,19,1,20,1,20,3,20,685,8,20,1,
  	20,1,20,3,20,689,8,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
  	21,3,21,701,8,21,1,21,1,21,3,21,705,8,21,1,21,1,21,3,21,709,8,21,1,21,
  	1,21,3,21,713,8,21,1,21,1,21,1,21,3,21,718,8,21,1,21,1,21,1,22,1,22,1,
  	22,1,22,1,22,1,22,1,22,1,22,3,22,730,8,22,1,22,1,22,3,22,734,8,22,1,22,
  	1,22,3,22,738,8,22,1,22,1,22,3,22,742,8,22,1,22,1,22,3,22,746,8,22,3,
  	22,748,8,22,1,22,1,22,3,22,752,8,22,1,22,1,22,3,22,756,8,22,3,22,758,
  	8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,
  	772,8,23,1,23,1,23,3,23,776,8,23,1,23,1,23,3,23,780,8,23,1,23,1,23,3,
  	23,784,8,23,1,23,4,23,787,8,23,11,23,12,23,788,1,23,3,23,792,8,23,1,23,
  	1,23,3,23,796,8,23,1,23,1,23,3,23,800,8,23,3,23,802,8,23,1,23,1,23,3,
  	23,806,8,23,1,23,1,23,3,23,810,8,23,3,23,812,8,23,1,23,1,23,1,24,1,24,
  	1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,
  	1,26,1,26,1,26,1,26,5,26,836,8,26,10,26,12,26,839,9,26,1,27,1,27,1,27,
  	1,27,3,27,845,8,27,1,28,1,28,1,28,1,28,3,28,851,8,28,1,28,1,28,1,29,1,
  	29,1,29,1,29,1,30,1,30,1,30,1,30,3,30,863,8,30,1,30,1,30,1,31,1,31,3,
  	31,869,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,
  	33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,3,34,891,8,34,1,35,1,35,1,
  	35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,902,8,35,1,36,1,36,1,36,1,36,1,
  	37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
  	39,1,39,3,39,924,8,39,1,39,1,39,3,39,928,8,39,1,39,5,39,931,8,39,10,39,
  	12,39,934,9,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,3,41,944,8,41,
  	1,41,1,41,3,41,948,8,41,1,41,1,41,3,41,952,8,41,1,41,1,41,1,42,1,42,1,
  	42,1,42,3,42,960,8,42,1,42,1,42,3,42,964,8,42,1,42,1,42,3,42,968,8,42,
  	1,42,1,42,1,42,1,42,3,42,974,8,42,1,42,1,42,3,42,978,8,42,1,42,1,42,3,
  	42,982,8,42,1,42,1,42,1,42,1,42,3,42,988,8,42,1,42,1,42,3,42,992,8,42,
  	1,42,1,42,3,42,996,8,42,1,42,1,42,3,42,1000,8,42,1,42,1,42,3,42,1004,
  	8,42,1,42,1,42,3,42,1008,8,42,1,42,1,42,5,42,1012,8,42,10,42,12,42,1015,
  	9,42,1,43,1,43,5,43,1019,8,43,10,43,12,43,1022,9,43,1,44,1,44,3,44,1026,
  	8,44,1,44,1,44,1,45,1,45,3,45,1032,8,45,1,46,1,46,1,47,1,47,1,48,1,48,
  	1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1052,
  	8,48,1,49,1,49,3,49,1056,8,49,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1064,
  	8,50,1,51,1,51,1,51,1,51,1,52,1,52,1,53,1,53,3,53,1074,8,53,1,53,5,53,
  	1077,8,53,10,53,12,53,1080,9,53,1,53,1,53,3,53,1084,8,53,4,53,1086,8,
  	53,11,53,12,53,1087,1,53,1,53,1,53,3,53,1093,8,53,1,54,1,54,1,54,1,54,
  	3,54,1099,8,54,1,54,1,54,1,54,3,54,1104,8,54,1,54,3,54,1107,8,54,1,55,
  	1,55,3,55,1111,8,55,1,56,1,56,3,56,1115,8,56,5,56,1117,8,56,10,56,12,
  	56,1120,9,56,1,56,1,56,1,56,3,56,1125,8,56,5,56,1127,8,56,10,56,12,56,
  	1130,9,56,1,56,1,56,3,56,1134,8,56,1,56,5,56,1137,8,56,10,56,12,56,1140,
  	9,56,1,56,3,56,1143,8,56,1,56,3,56,1146,8,56,1,56,1,56,3,56,1150,8,56,
  	4,56,1152,8,56,11,56,12,56,1153,1,56,1,56,3,56,1158,8,56,1,57,1,57,3,
  	57,1162,8,57,4,57,1164,8,57,11,57,12,57,1165,1,57,1,57,1,58,1,58,3,58,
  	1172,8,58,5,58,1174,8,58,10,58,12,58,1177,9,58,1,58,1,58,3,58,1181,8,
  	58,5,58,1183,8,58,10,58,12,58,1186,9,58,1,58,1,58,1,59,1,59,1,59,1,59,
  	3,59,1194,8,59,1,60,1,60,1,60,1,60,3,60,1200,8,60,1,61,1,61,1,61,1,61,
  	1,61,1,61,3,61,1208,8,61,1,61,1,61,3,61,1212,8,61,1,61,1,61,3,61,1216,
  	8,61,1,61,1,61,3,61,1220,8,61,1,61,1,61,1,61,1,61,1,61,3,61,1227,8,61,
  	1,61,3,61,1230,8,61,1,61,3,61,1233,8,61,1,61,3,61,1236,8,61,1,62,1,62,
  	1,62,1,62,3,62,1242,8,62,1,62,3,62,1245,8,62,1,63,1,63,3,63,1249,8,63,
  	1,63,1,63,3,63,1253,8,63,1,63,1,63,3,63,1257,8,63,1,63,3,63,1260,8,63,
  	1,64,1,64,3,64,1264,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,3,65,
  	1274,8,65,1,65,1,65,1,66,1,66,3,66,1280,8,66,1,66,1,66,1,66,5,66,1285,
  	8,66,10,66,12,66,1288,9,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,
  	67,1,67,3,67,1300,8,67,1,68,1,68,3,68,1304,8,68,1,68,1,68,3,68,1308,8,
  	68,1,68,1,68,3,68,1312,8,68,1,68,5,68,1315,8,68,10,68,12,68,1318,9,68,
  	1,69,1,69,3,69,1322,8,69,1,69,1,69,3,69,1326,8,69,1,69,1,69,1,70,1,70,
  	3,70,1332,8,70,1,70,1,70,3,70,1336,8,70,1,70,1,70,3,70,1340,8,70,1,70,
  	1,70,3,70,1344,8,70,1,70,5,70,1347,8,70,10,70,12,70,1350,9,70,1,71,1,
  	71,1,71,3,71,1355,8,71,1,71,3,71,1358,8,71,1,72,1,72,1,72,1,73,3,73,1364,
  	8,73,1,73,3,73,1367,8,73,1,73,1,73,1,73,1,73,3,73,1373,8,73,1,73,1,73,
  	3,73,1377,8,73,1,73,1,73,3,73,1381,8,73,1,74,1,74,3,74,1385,8,74,1,74,
  	1,74,3,74,1389,8,74,1,74,5,74,1392,8,74,10,74,12,74,1395,9,74,1,74,1,
  	74,3,74,1399,8,74,1,74,1,74,3,74,1403,8,74,1,74,5,74,1406,8,74,10,74,
  	12,74,1409,9,74,3,74,1411,8,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,
  	1420,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1429,8,76,1,76,5,76,
  	1432,8,76,10,76,12,76,1435,9,76,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,
  	78,1,79,1,79,3,79,1447,8,79,1,79,3,79,1450,8,79,1,80,1,80,1,80,1,80,1,
  	81,1,81,3,81,1458,8,81,1,81,1,81,3,81,1462,8,81,1,81,5,81,1465,8,81,10,
  	81,12,81,1468,9,81,1,82,1,82,3,82,1472,8,82,1,82,1,82,3,82,1476,8,82,
  	1,82,1,82,1,82,3,82,1481,8,82,1,83,1,83,1,84,1,84,3,84,1487,8,84,1,84,
  	5,84,1490,8,84,10,84,12,84,1493,9,84,1,84,1,84,1,84,1,84,3,84,1499,8,
  	84,1,85,1,85,3,85,1503,8,85,1,85,1,85,3,85,1507,8,85,3,85,1509,8,85,1,
  	85,1,85,3,85,1513,8,85,3,85,1515,8,85,1,85,1,85,3,85,1519,8,85,3,85,1521,
  	8,85,1,85,1,85,1,86,1,86,3,86,1527,8,86,1,86,1,86,1,87,1,87,3,87,1533,
  	8,87,1,87,1,87,3,87,1537,8,87,1,87,3,87,1540,8,87,1,87,3,87,1543,8,87,
  	1,87,1,87,1,87,1,87,3,87,1549,8,87,1,87,3,87,1552,8,87,1,87,3,87,1555,
  	8,87,1,87,1,87,3,87,1559,8,87,1,87,1,87,1,87,1,87,3,87,1565,8,87,1,87,
  	3,87,1568,8,87,1,87,3,87,1571,8,87,1,87,1,87,3,87,1575,8,87,1,88,1,88,
  	3,88,1579,8,88,1,88,1,88,3,88,1583,8,88,3,88,1585,8,88,1,88,1,88,3,88,
  	1589,8,88,3,88,1591,8,88,1,88,1,88,3,88,1595,8,88,3,88,1597,8,88,1,88,
  	1,88,3,88,1601,8,88,3,88,1603,8,88,1,88,1,88,1,89,1,89,3,89,1609,8,89,
  	1,89,1,89,3,89,1613,8,89,1,89,1,89,3,89,1617,8,89,1,89,1,89,3,89,1621,
  	8,89,1,89,1,89,3,89,1625,8,89,1,89,1,89,3,89,1629,8,89,1,89,1,89,3,89,
  	1633,8,89,1,89,1,89,3,89,1637,8,89,5,89,1639,8,89,10,89,12,89,1642,9,
  	89,3,89,1644,8,89,1,89,1,89,1,90,1,90,3,90,1650,8,90,1,90,1,90,3,90,1654,
  	8,90,1,90,1,90,3,90,1658,8,90,1,90,3,90,1661,8,90,1,90,5,90,1664,8,90,
  	10,90,12,90,1667,9,90,1,91,1,91,3,91,1671,8,91,1,91,5,91,1674,8,91,10,
  	91,12,91,1677,9,91,1,92,1,92,3,92,1681,8,92,1,92,1,92,1,93,1,93,3,93,
  	1687,8,93,1,93,1,93,1,93,1,93,3,93,1693,8,93,1,93,3,93,1696,8,93,1,93,
  	3,93,1699,8,93,1,93,3,93,1702,8,93,1,93,1,93,3,93,1706,8,93,1,93,3,93,
  	1709,8,93,1,93,3,93,1712,8,93,1,93,3,93,1715,8,93,1,93,3,93,1718,8,93,
  	1,94,1,94,3,94,1722,8,94,1,94,1,94,3,94,1726,8,94,1,94,1,94,3,94,1730,
  	8,94,1,94,1,94,3,94,1734,8,94,1,94,1,94,3,94,1738,8,94,1,94,3,94,1741,
  	8,94,1,94,3,94,1744,8,94,1,94,1,94,3,94,1748,8,94,1,94,1,94,3,94,1752,
  	8,94,1,94,1,94,3,94,1756,8,94,1,94,1,94,3,94,1760,8,94,3,94,1762,8,94,
  	1,94,1,94,1,95,1,95,3,95,1768,8,95,1,95,3,95,1771,8,95,1,95,3,95,1774,
  	8,95,1,95,1,95,1,96,1,96,3,96,1780,8,96,1,96,3,96,1783,8,96,1,96,3,96,
  	1786,8,96,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,100,1,100,1,101,1,
  	101,1,102,1,102,1,102,1,102,1,102,5,102,1805,8,102,10,102,12,102,1808,
  	9,102,1,103,1,103,1,103,1,103,1,103,5,103,1815,8,103,10,103,12,103,1818,
  	9,103,1,104,1,104,1,104,1,104,1,104,5,104,1825,8,104,10,104,12,104,1828,
  	9,104,1,105,1,105,3,105,1832,8,105,5,105,1834,8,105,10,105,12,105,1837,
  	9,105,1,105,1,105,1,106,1,106,3,106,1843,8,106,1,106,1,106,3,106,1847,
  	8,106,1,106,1,106,3,106,1851,8,106,1,106,1,106,3,106,1855,8,106,1,106,
  	1,106,3,106,1859,8,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,1867,
  	8,106,1,106,1,106,3,106,1871,8,106,1,106,1,106,3,106,1875,8,106,1,106,
  	1,106,3,106,1879,8,106,1,106,1,106,4,106,1883,8,106,11,106,12,106,1884,
  	1,106,1,106,3,106,1889,8,106,1,107,1,107,1,108,1,108,3,108,1895,8,108,
  	1,108,1,108,3,108,1899,8,108,1,108,5,108,1902,8,108,10,108,12,108,1905,
  	9,108,1,109,1,109,3,109,1909,8,109,1,109,1,109,3,109,1913,8,109,1,109,
  	5,109,1916,8,109,10,109,12,109,1919,9,109,1,110,1,110,3,110,1923,8,110,
  	1,110,1,110,3,110,1927,8,110,1,110,1,110,5,110,1931,8,110,10,110,12,110,
  	1934,9,110,1,111,1,111,1,112,1,112,3,112,1940,8,112,1,112,1,112,3,112,
  	1944,8,112,1,112,1,112,5,112,1948,8,112,10,112,12,112,1951,9,112,1,113,
  	1,113,1,114,1,114,3,114,1957,8,114,1,114,1,114,3,114,1961,8,114,1,114,
  	1,114,5,114,1965,8,114,10,114,12,114,1968,9,114,1,115,1,115,1,116,1,116,
  	3,116,1974,8,116,1,116,1,116,3,116,1978,8,116,1,116,5,116,1981,8,116,
  	10,116,12,116,1984,9,116,1,117,1,117,3,117,1988,8,117,5,117,1990,8,117,
  	10,117,12,117,1993,9,117,1,117,1,117,3,117,1997,8,117,1,117,3,117,2000,
  	8,117,1,118,1,118,1,118,4,118,2005,8,118,11,118,12,118,2006,1,118,3,118,
  	2010,8,118,1,119,1,119,1,119,3,119,2015,8,119,1,119,1,119,1,119,1,119,
  	1,119,1,119,1,119,3,119,2024,8,119,1,119,1,119,3,119,2028,8,119,1,119,
  	3,119,2031,8,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,
  	1,120,1,120,3,120,2044,8,120,1,120,3,120,2047,8,120,1,120,1,120,1,121,
  	3,121,2052,8,121,1,121,1,121,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
  	1,122,1,122,1,122,3,122,2066,8,122,1,123,1,123,3,123,2070,8,123,1,123,
  	5,123,2073,8,123,10,123,12,123,2076,9,123,1,124,1,124,1,124,1,124,1,124,
  	1,124,1,124,1,124,1,124,3,124,2087,8,124,1,125,1,125,1,125,1,125,1,125,
  	1,125,3,125,2095,8,125,1,126,1,126,1,127,1,127,3,127,2101,8,127,1,127,
  	1,127,3,127,2105,8,127,1,127,1,127,3,127,2109,8,127,5,127,2111,8,127,
  	10,127,12,127,2114,9,127,3,127,2116,8,127,1,127,1,127,1,128,1,128,3,128,
  	2122,8,128,1,128,3,128,2125,8,128,1,129,1,129,3,129,2129,8,129,1,129,
  	1,129,3,129,2133,8,129,1,129,1,129,3,129,2137,8,129,1,129,1,129,3,129,
  	2141,8,129,5,129,2143,8,129,10,129,12,129,2146,9,129,1,129,1,129,1,130,
  	1,130,3,130,2152,8,130,1,130,3,130,2155,8,130,1,130,1,130,3,130,2159,
  	8,130,1,130,1,130,1,131,1,131,3,131,2165,8,131,1,131,1,131,3,131,2169,
  	8,131,1,131,1,131,1,132,1,132,3,132,2175,8,132,1,132,1,132,3,132,2179,
  	8,132,1,132,1,132,3,132,2183,8,132,1,132,1,132,1,132,3,132,2188,8,132,
  	1,132,1,132,3,132,2192,8,132,1,132,1,132,3,132,2196,8,132,3,132,2198,
  	8,132,1,132,1,132,3,132,2202,8,132,1,132,1,132,3,132,2206,8,132,1,132,
  	1,132,3,132,2210,8,132,5,132,2212,8,132,10,132,12,132,2215,9,132,3,132,
  	2217,8,132,1,132,1,132,3,132,2221,8,132,1,133,1,133,1,134,1,134,3,134,
  	2227,8,134,1,134,1,134,1,134,3,134,2232,8,134,3,134,2234,8,134,1,134,
  	1,134,1,135,1,135,3,135,2240,8,135,1,135,4,135,2243,8,135,11,135,12,135,
  	2244,1,136,1,136,3,136,2249,8,136,1,136,1,136,3,136,2253,8,136,1,136,
  	1,136,3,136,2257,8,136,1,136,1,136,3,136,2261,8,136,1,136,3,136,2264,
  	8,136,1,136,3,136,2267,8,136,1,136,1,136,1,137,1,137,3,137,2273,8,137,
  	1,137,1,137,3,137,2277,8,137,1,137,1,137,3,137,2281,8,137,1,137,1,137,
  	3,137,2285,8,137,1,137,3,137,2288,8,137,1,137,3,137,2291,8,137,1,137,
  	1,137,1,138,1,138,3,138,2297,8,138,1,138,1,138,3,138,2301,8,138,1,139,
  	1,139,3,139,2305,8,139,1,139,4,139,2308,8,139,11,139,12,139,2309,1,139,
  	1,139,3,139,2314,8,139,1,139,1,139,3,139,2318,8,139,1,139,4,139,2321,
  	8,139,11,139,12,139,2322,3,139,2325,8,139,1,139,3,139,2328,8,139,1,139,
  	1,139,3,139,2332,8,139,1,139,3,139,2335,8,139,1,139,3,139,2338,8,139,
  	1,139,1,139,1,140,1,140,3,140,2344,8,140,1,140,1,140,3,140,2348,8,140,
  	1,140,1,140,3,140,2352,8,140,1,140,1,140,1,141,1,141,1,142,1,142,3,142,
  	2360,8,142,1,143,1,143,1,143,3,143,2365,8,143,1,144,1,144,3,144,2369,
  	8,144,1,144,1,144,1,145,1,145,1,146,1,146,1,147,1,147,1,148,1,148,1,149,
  	1,149,1,149,1,149,1,149,3,149,2386,8,149,1,150,1,150,1,151,1,151,1,152,
  	1,152,1,153,1,153,1,153,0,1,84,154,0,2,4,6,8,10,12,14,16,18,20,22,24,
  	26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
  	72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
  	114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
  	150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
  	186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
  	222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,
  	258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
  	294,296,298,300,302,304,306,0,12,1,0,65,66,2,0,60,60,62,62,1,0,114,117,
  	2,0,6,6,13,17,1,0,19,20,2,0,21,21,125,125,2,0,22,23,108,108,1,0,134,135,
  	8,0,48,48,50,50,56,59,77,77,81,81,128,128,136,136,140,140,2,0,14,14,27,
  	30,2,0,16,16,31,34,2,0,35,45,125,125,2706,0,308,1,0,0,0,2,328,1,0,0,0,
  	4,361,1,0,0,0,6,363,1,0,0,0,8,385,1,0,0,0,10,427,1,0,0,0,12,429,1,0,0,
  	0,14,459,1,0,0,0,16,480,1,0,0,0,18,491,1,0,0,0,20,497,1,0,0,0,22,524,
  	1,0,0,0,24,528,1,0,0,0,26,532,1,0,0,0,28,544,1,0,0,0,30,556,1,0,0,0,32,
  	599,1,0,0,0,34,613,1,0,0,0,36,657,1,0,0,0,38,659,1,0,0,0,40,682,1,0,0,
  	0,42,692,1,0,0,0,44,721,1,0,0,0,46,761,1,0,0,0,48,815,1,0,0,0,50,823,
  	1,0,0,0,52,829,1,0,0,0,54,844,1,0,0,0,56,846,1,0,0,0,58,854,1,0,0,0,60,
  	858,1,0,0,0,62,868,1,0,0,0,64,872,1,0,0,0,66,878,1,0,0,0,68,890,1,0,0,
  	0,70,892,1,0,0,0,72,903,1,0,0,0,74,907,1,0,0,0,76,913,1,0,0,0,78,921,
  	1,0,0,0,80,935,1,0,0,0,82,939,1,0,0,0,84,1007,1,0,0,0,86,1016,1,0,0,0,
  	88,1023,1,0,0,0,90,1031,1,0,0,0,92,1033,1,0,0,0,94,1035,1,0,0,0,96,1051,
  	1,0,0,0,98,1055,1,0,0,0,100,1057,1,0,0,0,102,1065,1,0,0,0,104,1069,1,
  	0,0,0,106,1092,1,0,0,0,108,1106,1,0,0,0,110,1110,1,0,0,0,112,1157,1,0,
  	0,0,114,1163,1,0,0,0,116,1175,1,0,0,0,118,1193,1,0,0,0,120,1199,1,0,0,
  	0,122,1201,1,0,0,0,124,1237,1,0,0,0,126,1248,1,0,0,0,128,1261,1,0,0,0,
  	130,1271,1,0,0,0,132,1277,1,0,0,0,134,1299,1,0,0,0,136,1301,1,0,0,0,138,
  	1319,1,0,0,0,140,1331,1,0,0,0,142,1351,1,0,0,0,144,1359,1,0,0,0,146,1366,
  	1,0,0,0,148,1410,1,0,0,0,150,1419,1,0,0,0,152,1421,1,0,0,0,154,1436,1,
  	0,0,0,156,1440,1,0,0,0,158,1444,1,0,0,0,160,1451,1,0,0,0,162,1455,1,0,
  	0,0,164,1480,1,0,0,0,166,1482,1,0,0,0,168,1498,1,0,0,0,170,1500,1,0,0,
  	0,172,1524,1,0,0,0,174,1574,1,0,0,0,176,1576,1,0,0,0,178,1606,1,0,0,0,
  	180,1647,1,0,0,0,182,1668,1,0,0,0,184,1678,1,0,0,0,186,1684,1,0,0,0,188,
  	1719,1,0,0,0,190,1765,1,0,0,0,192,1777,1,0,0,0,194,1789,1,0,0,0,196,1791,
  	1,0,0,0,198,1793,1,0,0,0,200,1795,1,0,0,0,202,1797,1,0,0,0,204,1799,1,
  	0,0,0,206,1809,1,0,0,0,208,1819,1,0,0,0,210,1835,1,0,0,0,212,1888,1,0,
  	0,0,214,1890,1,0,0,0,216,1892,1,0,0,0,218,1906,1,0,0,0,220,1920,1,0,0,
  	0,222,1935,1,0,0,0,224,1937,1,0,0,0,226,1952,1,0,0,0,228,1954,1,0,0,0,
  	230,1969,1,0,0,0,232,1971,1,0,0,0,234,1991,1,0,0,0,236,2001,1,0,0,0,238,
  	2030,1,0,0,0,240,2043,1,0,0,0,242,2051,1,0,0,0,244,2065,1,0,0,0,246,2067,
  	1,0,0,0,248,2086,1,0,0,0,250,2094,1,0,0,0,252,2096,1,0,0,0,254,2098,1,
  	0,0,0,256,2119,1,0,0,0,258,2126,1,0,0,0,260,2151,1,0,0,0,262,2162,1,0,
  	0,0,264,2220,1,0,0,0,266,2222,1,0,0,0,268,2233,1,0,0,0,270,2237,1,0,0,
  	0,272,2246,1,0,0,0,274,2270,1,0,0,0,276,2294,1,0,0,0,278,2324,1,0,0,0,
  	280,2341,1,0,0,0,282,2355,1,0,0,0,284,2359,1,0,0,0,286,2361,1,0,0,0,288,
  	2366,1,0,0,0,290,2372,1,0,0,0,292,2374,1,0,0,0,294,2376,1,0,0,0,296,2378,
  	1,0,0,0,298,2385,1,0,0,0,300,2387,1,0,0,0,302,2389,1,0,0,0,304,2391,1,
  	0,0,0,306,2393,1,0,0,0,308,319,3,2,1,0,309,311,5,157,0,0,310,309,1,0,
  	0,0,310,311,1,0,0,0,311,312,1,0,0,0,312,314,5,1,0,0,313,315,5,157,0,0,
  	314,313,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,318,3,2,1,0,317,310,
  	1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,323,1,0,0,
  	0,321,319,1,0,0,0,322,324,5,157,0,0,323,322,1,0,0,0,323,324,1,0,0,0,324,
  	325,1,0,0,0,325,326,5,0,0,1,326,1,1,0,0,0,327,329,3,90,45,0,328,327,1,
  	0,0,0,328,329,1,0,0,0,329,331,1,0,0,0,330,332,5,157,0,0,331,330,1,0,0,
  	0,331,332,1,0,0,0,332,333,1,0,0,0,333,338,3,4,2,0,334,336,5,157,0,0,335,
  	334,1,0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,339,5,1,0,0,338,335,1,
  	0,0,0,338,339,1,0,0,0,339,3,1,0,0,0,340,362,3,104,52,0,341,362,3,42,21,
  	0,342,362,3,44,22,0,343,362,3,46,23,0,344,362,3,50,25,0,345,362,3,52,
  	26,0,346,362,3,64,32,0,347,362,3,66,33,0,348,362,3,6,3,0,349,362,3,12,
  	6,0,350,362,3,14,7,0,351,362,3,26,13,0,352,362,3,30,15,0,353,362,3,28,
  	14,0,354,362,3,96,48,0,355,362,3,98,49,0,356,362,3,16,8,0,357,362,3,18,
  	9,0,358,362,3,20,10,0,359,362,3,22,11,0,360,362,3,24,12,0,361,340,1,0,
  	0,0,361,341,1,0,0,0,361,342,1,0,0,0,361,343,1,0,0,0,361,344,1,0,0,0,361,
  	345,1,0,0,0,361,346,1,0,0,0,361,347,1,0,0,0,361,348,1,0,0,0,361,349,1,
  	0,0,0,361,350,1,0,0,0,361,351,1,0,0,0,361,352,1,0,0,0,361,353,1,0,0,0,
  	361,354,1,0,0,0,361,355,1,0,0,0,361,356,1,0,0,0,361,357,1,0,0,0,361,358,
  	1,0,0,0,361,359,1,0,0,0,361,360,1,0,0,0,362,5,1,0,0,0,363,364,5,53,0,
  	0,364,365,5,157,0,0,365,374,3,296,148,0,366,368,5,157,0,0,367,366,1,0,
  	0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,371,3,8,4,0,370,372,5,157,0,0,
  	371,370,1,0,0,0,371,372,1,0,0,0,372,375,1,0,0,0,373,375,5,157,0,0,374,
  	367,1,0,0,0,374,373,1,0,0,0,375,376,1,0,0,0,376,377,5,54,0,0,377,378,
  	5,157,0,0,378,383,3,10,5,0,379,381,5,157,0,0,380,379,1,0,0,0,380,381,
  	1,0,0,0,381,382,1,0,0,0,382,384,3,38,19,0,383,380,1,0,0,0,383,384,1,0,
  	0,0,384,7,1,0,0,0,385,387,5,2,0,0,386,388,5,157,0,0,387,386,1,0,0,0,387,
  	388,1,0,0,0,388,389,1,0,0,0,389,400,3,296,148,0,390,392,5,157,0,0,391,
  	390,1,0,0,0,391,392,1,0,0,0,392,393,1,0,0,0,393,395,5,3,0,0,394,396,5,
  	157,0,0,395,394,1,0,0,0,395,396,1,0,0,0,396,397,1,0,0,0,397,399,3,296,
  	148,0,398,391,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,
  	401,404,1,0,0,0,402,400,1,0,0,0,403,405,5,157,0,0,404,403,1,0,0,0,404,
  	405,1,0,0,0,405,406,1,0,0,0,406,407,5,4,0,0,407,9,1,0,0,0,408,428,3,36,
  	18,0,409,411,5,2,0,0,410,412,5,157,0,0,411,410,1,0,0,0,411,412,1,0,0,
  	0,412,413,1,0,0,0,413,415,3,104,52,0,414,416,5,157,0,0,415,414,1,0,0,
  	0,415,416,1,0,0,0,416,417,1,0,0,0,417,418,5,4,0,0,418,428,1,0,0,0,419,
  	428,3,282,141,0,420,421,3,282,141,0,421,423,5,5,0,0,422,424,5,157,0,0,
  	423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,426,3,296,148,0,426,
  	428,1,0,0,0,427,408,1,0,0,0,427,409,1,0,0,0,427,419,1,0,0,0,427,420,1,
  	0,0,0,428,11,1,0,0,0,429,430,5,53,0,0,430,431,5,157,0,0,431,432,3,296,
  	148,0,432,433,5,157,0,0,433,434,5,54,0,0,434,435,5,157,0,0,435,437,5,
  	2,0,0,436,438,5,157,0,0,437,436,1,0,0,0,437,438,1,0,0,0,438,439,1,0,0,
  	0,439,450,5,143,0,0,440,442,5,157,0,0,441,440,1,0,0,0,441,442,1,0,0,0,
  	442,443,1,0,0,0,443,445,5,3,0,0,444,446,5,157,0,0,445,444,1,0,0,0,445,
  	446,1,0,0,0,446,447,1,0,0,0,447,449,5,143,0,0,448,441,1,0,0,0,449,452,
  	1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,453,1,0,0,0,452,450,1,0,0,
  	0,453,454,5,4,0,0,454,455,5,157,0,0,455,456,5,111,0,0,456,457,5,157,0,
  	0,457,458,5,55,0,0,458,13,1,0,0,0,459,460,5,53,0,0,460,461,5,157,0,0,
  	461,463,5,2,0,0,462,464,5,157,0,0,463,462,1,0,0,0,463,464,1,0,0,0,464,
  	465,1,0,0,0,465,467,3,104,52,0,466,468,5,157,0,0,467,466,1,0,0,0,467,
  	468,1,0,0,0,468,469,1,0,0,0,469,470,5,4,0,0,470,471,5,157,0,0,471,472,
  	5,78,0,0,472,473,5,157,0,0,473,478,5,143,0,0,474,476,5,157,0,0,475,474,
  	1,0,0,0,475,476,1,0,0,0,476,477,1,0,0,0,477,479,3,38,19,0,478,475,1,0,
  	0,0,478,479,1,0,0,0,479,15,1,0,0,0,480,481,5,56,0,0,481,482,5,157,0,0,
  	482,483,5,58,0,0,483,484,5,157,0,0,484,489,5,143,0,0,485,487,5,157,0,
  	0,486,485,1,0,0,0,486,487,1,0,0,0,487,488,1,0,0,0,488,490,3,38,19,0,489,
  	486,1,0,0,0,489,490,1,0,0,0,490,17,1,0,0,0,491,492,5,57,0,0,492,493,5,
  	157,0,0,493,494,5,58,0,0,494,495,5,157,0,0,495,496,5,143,0,0,496,19,1,
  	0,0,0,497,498,5,46,0,0,498,499,5,157,0,0,499,506,5,143,0,0,500,501,5,
  	157,0,0,501,502,5,109,0,0,502,503,5,157,0,0,503,504,3,296,148,0,504,505,
  	5,157,0,0,505,507,1,0,0,0,506,500,1,0,0,0,506,507,1,0,0,0,507,522,1,0,
  	0,0,508,510,5,157,0,0,509,508,1,0,0,0,509,510,1,0,0,0,510,511,1,0,0,0,
  	511,513,5,2,0,0,512,514,5,157,0,0,513,512,1,0,0,0,513,514,1,0,0,0,514,
  	515,1,0,0,0,515,516,5,47,0,0,516,517,5,157,0,0,517,519,5,143,0,0,518,
  	520,5,157,0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,521,523,
  	5,4,0,0,522,509,1,0,0,0,522,523,1,0,0,0,523,21,1,0,0,0,524,525,5,103,
  	0,0,525,526,5,157,0,0,526,527,3,296,148,0,527,23,1,0,0,0,528,529,5,48,
  	0,0,529,530,5,157,0,0,530,531,3,296,148,0,531,25,1,0,0,0,532,533,5,49,
  	0,0,533,534,5,157,0,0,534,536,3,298,149,0,535,537,5,157,0,0,536,535,1,
  	0,0,0,536,537,1,0,0,0,537,538,1,0,0,0,538,540,5,6,0,0,539,541,5,157,0,
  	0,540,539,1,0,0,0,540,541,1,0,0,0,541,542,1,0,0,0,542,543,3,202,101,0,
  	543,27,1,0,0,0,544,545,5,50,0,0,545,546,5,157,0,0,546,547,5,101,0,0,547,
  	548,5,157,0,0,548,549,5,60,0,0,549,550,5,157,0,0,550,551,3,296,148,0,
  	551,552,5,157,0,0,552,553,5,132,0,0,553,554,5,157,0,0,554,555,5,143,0,
  	0,555,29,1,0,0,0,556,557,5,99,0,0,557,558,5,157,0,0,558,559,5,51,0,0,
  	559,560,5,157,0,0,560,562,3,266,133,0,561,563,5,157,0,0,562,561,1,0,0,
  	0,562,563,1,0,0,0,563,564,1,0,0,0,564,566,5,2,0,0,565,567,5,157,0,0,566,
  	565,1,0,0,0,566,567,1,0,0,0,567,569,1,0,0,0,568,570,3,32,16,0,569,568,
  	1,0,0,0,569,570,1,0,0,0,570,572,1,0,0,0,571,573,5,157,0,0,572,571,1,0,
  	0,0,572,573,1,0,0,0,573,575,1,0,0,0,574,576,3,34,17,0,575,574,1,0,0,0,
  	575,576,1,0,0,0,576,587,1,0,0,0,577,579,5,157,0,0,578,577,1,0,0,0,578,
  	579,1,0,0,0,579,580,1,0,0,0,580,582,5,3,0,0,581,583,5,157,0,0,582,581,
  	1,0,0,0,582,583,1,0,0,0,583,584,1,0,0,0,584,586,3,34,17,0,585,578,1,0,
  	0,0,586,589,1,0,0,0,587,585,1,0,0,0,587,588,1,0,0,0,588,591,1,0,0,0,589,
  	587,1,0,0,0,590,592,5,157,0,0,591,590,1,0,0,0,591,592,1,0,0,0,592,593,
  	1,0,0,0,593,594,5,4,0,0,594,595,5,157,0,0,595,596,5,109,0,0,596,597,5,
  	157,0,0,597,598,3,202,101,0,598,31,1,0,0,0,599,610,3,298,149,0,600,602,
  	5,157,0,0,601,600,1,0,0,0,601,602,1,0,0,0,602,603,1,0,0,0,603,605,5,3,
  	0,0,604,606,5,157,0,0,605,604,1,0,0,0,605,606,1,0,0,0,606,607,1,0,0,0,
  	607,609,3,298,149,0,608,601,1,0,0,0,609,612,1,0,0,0,610,608,1,0,0,0,610,
  	611,1,0,0,0,611,33,1,0,0,0,612,610,1,0,0,0,613,615,3,298,149,0,614,616,
  	5,157,0,0,615,614,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,618,5,127,
  	0,0,618,620,5,6,0,0,619,621,5,157,0,0,620,619,1,0,0,0,620,621,1,0,0,0,
  	621,622,1,0,0,0,622,623,3,250,125,0,623,35,1,0,0,0,624,626,5,7,0,0,625,
  	627,5,157,0,0,626,625,1,0,0,0,626,627,1,0,0,0,627,628,1,0,0,0,628,639,
  	5,143,0,0,629,631,5,157,0,0,630,629,1,0,0,0,630,631,1,0,0,0,631,632,1,
  	0,0,0,632,634,5,3,0,0,633,635,5,157,0,0,634,633,1,0,0,0,634,635,1,0,0,
  	0,635,636,1,0,0,0,636,638,5,143,0,0,637,630,1,0,0,0,638,641,1,0,0,0,639,
  	637,1,0,0,0,639,640,1,0,0,0,640,642,1,0,0,0,641,639,1,0,0,0,642,658,5,
  	8,0,0,643,658,5,143,0,0,644,646,5,52,0,0,645,647,5,157,0,0,646,645,1,
  	0,0,0,646,647,1,0,0,0,647,648,1,0,0,0,648,650,5,2,0,0,649,651,5,157,0,
  	0,650,649,1,0,0,0,650,651,1,0,0,0,651,652,1,0,0,0,652,654,5,143,0,0,653,
  	655,5,157,0,0,654,653,1,0,0,0,654,655,1,0,0,0,655,656,1,0,0,0,656,658,
  	5,4,0,0,657,624,1,0,0,0,657,643,1,0,0,0,657,644,1,0,0,0,658,37,1,0,0,
  	0,659,661,5,2,0,0,660,662,5,157,0,0,661,660,1,0,0,0,661,662,1,0,0,0,662,
  	663,1,0,0,0,663,674,3,40,20,0,664,666,5,157,0,0,665,664,1,0,0,0,665,666,
  	1,0,0,0,666,667,1,0,0,0,667,669,5,3,0,0,668,670,5,157,0,0,669,668,1,0,
  	0,0,669,670,1,0,0,0,670,671,1,0,0,0,671,673,3,40,20,0,672,665,1,0,0,0,
  	673,676,1,0,0,0,674,672,1,0,0,0,674,675,1,0,0,0,675,678,1,0,0,0,676,674,
  	1,0,0,0,677,679,5,157,0,0,678,677,1,0,0,0,678,679,1,0,0,0,679,680,1,0,
  	0,0,680,681,5,4,0,0,681,39,1,0,0,0,682,684,3,298,149,0,683,685,5,157,
  	0,0,684,683,1,0,0,0,684,685,1,0,0,0,685,686,1,0,0,0,686,688,5,6,0,0,687,
  	689,5,157,0,0,688,687,1,0,0,0,688,689,1,0,0,0,689,690,1,0,0,0,690,691,
  	3,250,125,0,691,41,1,0,0,0,692,693,5,99,0,0,693,694,5,157,0,0,694,695,
  	5,59,0,0,695,696,5,157,0,0,696,697,5,60,0,0,697,698,5,157,0,0,698,700,
  	3,296,148,0,699,701,5,157,0,0,700,699,1,0,0,0,700,701,1,0,0,0,701,702,
  	1,0,0,0,702,704,5,2,0,0,703,705,5,157,0,0,704,703,1,0,0,0,704,705,1,0,
  	0,0,705,706,1,0,0,0,706,708,3,78,39,0,707,709,5,157,0,0,708,707,1,0,0,
  	0,708,709,1,0,0,0,709,710,1,0,0,0,710,712,5,3,0,0,711,713,5,157,0,0,712,
  	711,1,0,0,0,712,713,1,0,0,0,713,714,1,0,0,0,714,715,3,82,41,0,715,717,
  	1,0,0,0,716,718,5,157,0,0,717,716,1,0,0,0,717,718,1,0,0,0,718,719,1,0,
  	0,0,719,720,5,4,0,0,720,43,1,0,0,0,721,722,5,99,0,0,722,723,5,157,0,0,
  	723,724,5,77,0,0,724,725,5,157,0,0,725,726,5,60,0,0,726,727,5,157,0,0,
  	727,729,3,296,148,0,728,730,5,157,0,0,729,728,1,0,0,0,729,730,1,0,0,0,
  	730,731,1,0,0,0,731,733,5,2,0,0,732,734,5,157,0,0,733,732,1,0,0,0,733,
  	734,1,0,0,0,734,735,1,0,0,0,735,737,3,48,24,0,736,738,5,157,0,0,737,736,
  	1,0,0,0,737,738,1,0,0,0,738,747,1,0,0,0,739,741,5,3,0,0,740,742,5,157,
  	0,0,741,740,1,0,0,0,741,742,1,0,0,0,742,743,1,0,0,0,743,745,3,78,39,0,
  	744,746,5,157,0,0,745,744,1,0,0,0,745,746,1,0,0,0,746,748,1,0,0,0,747,
  	739,1,0,0,0,747,748,1,0,0,0,748,757,1,0,0,0,749,751,5,3,0,0,750,752,5,
  	157,0,0,751,750,1,0,0,0,751,752,1,0,0,0,752,753,1,0,0,0,753,755,3,298,
  	149,0,754,756,5,157,0,0,755,754,1,0,0,0,755,756,1,0,0,0,756,758,1,0,0,
  	0,757,749,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,0,759,760,5,4,0,0,760,
  	45,1,0,0,0,761,762,5,99,0,0,762,763,5,157,0,0,763,764,5,77,0,0,764,765,
  	5,157,0,0,765,766,5,60,0,0,766,767,5,157,0,0,767,768,5,61,0,0,768,769,
  	5,157,0,0,769,771,3,296,148,0,770,772,5,157,0,0,771,770,1,0,0,0,771,772,
  	1,0,0,0,772,773,1,0,0,0,773,775,5,2,0,0,774,776,5,157,0,0,775,774,1,0,
  	0,0,775,776,1,0,0,0,776,777,1,0,0,0,777,779,3,48,24,0,778,780,5,157,0,
  	0,779,778,1,0,0,0,779,780,1,0,0,0,780,786,1,0,0,0,781,783,5,3,0,0,782,
  	784,5,157,0,0,783,782,1,0,0,0,783,784,1,0,0,0,784,785,1,0,0,0,785,787,
  	3,48,24,0,786,781,1,0,0,0,787,788,1,0,0,0,788,786,1,0,0,0,788,789,1,0,
  	0,0,789,791,1,0,0,0,790,792,5,157,0,0,791,790,1,0,0,0,791,792,1,0,0,0,
  	792,801,1,0,0,0,793,795,5,3,0,0,794,796,5,157,0,0,795,794,1,0,0,0,795,
  	796,1,0,0,0,796,797,1,0,0,0,797,799,3,78,39,0,798,800,5,157,0,0,799,798,
  	1,0,0,0,799,800,1,0,0,0,800,802,1,0,0,0,801,793,1,0,0,0,801,802,1,0,0,
  	0,802,811,1,0,0,0,803,805,5,3,0,0,804,806,5,157,0,0,805,804,1,0,0,0,805,
  	806,1,0,0,0,806,807,1,0,0,0,807,809,3,298,149,0,808,810,5,157,0,0,809,
  	808,1,0,0,0,809,810,1,0,0,0,810,812,1,0,0,0,811,803,1,0,0,0,811,812,1,
  	0,0,0,812,813,1,0,0,0,813,814,5,4,0,0,814,47,1,0,0,0,815,816,5,54,0,0,
  	816,817,5,157,0,0,817,818,3,296,148,0,818,819,5,157,0,0,819,820,5,78,
  	0,0,820,821,5,157,0,0,821,822,3,296,148,0,822,49,1,0,0,0,823,824,5,99,
  	0,0,824,825,5,157,0,0,825,826,5,62,0,0,826,827,5,157,0,0,827,828,3,296,
  	148,0,828,51,1,0,0,0,829,830,5,99,0,0,830,831,5,157,0,0,831,832,5,63,
  	0,0,832,833,5,157,0,0,833,837,3,296,148,0,834,836,3,54,27,0,835,834,1,
  	0,0,0,836,839,1,0,0,0,837,835,1,0,0,0,837,838,1,0,0,0,838,53,1,0,0,0,
  	839,837,1,0,0,0,840,845,3,56,28,0,841,845,3,58,29,0,842,845,3,60,30,0,
  	843,845,3,62,31,0,844,840,1,0,0,0,844,841,1,0,0,0,844,842,1,0,0,0,844,
  	843,1,0,0,0,845,55,1,0,0,0,846,847,5,64,0,0,847,850,5,157,0,0,848,849,
  	5,111,0,0,849,851,5,157,0,0,850,848,1,0,0,0,850,851,1,0,0,0,851,852,1,
  	0,0,0,852,853,3,202,101,0,853,57,1,0,0,0,854,855,7,0,0,0,855,856,5,157,
  	0,0,856,857,3,202,101,0,857,59,1,0,0,0,858,859,5,67,0,0,859,862,5,157,
  	0,0,860,861,5,105,0,0,861,863,5,157,0,0,862,860,1,0,0,0,862,863,1,0,0,
  	0,863,864,1,0,0,0,864,865,3,202,101,0,865,61,1,0,0,0,866,867,5,68,0,0,
  	867,869,5,157,0,0,868,866,1,0,0,0,868,869,1,0,0,0,869,870,1,0,0,0,870,
  	871,5,69,0,0,871,63,1,0,0,0,872,873,5,70,0,0,873,874,5,157,0,0,874,875,
  	7,1,0,0,875,876,5,157,0,0,876,877,3,296,148,0,877,65,1,0,0,0,878,879,
  	5,71,0,0,879,880,5,157,0,0,880,881,5,60,0,0,881,882,5,157,0,0,882,883,
  	3,296,148,0,883,884,5,157,0,0,884,885,3,68,34,0,885,67,1,0,0,0,886,891,
  	3,70,35,0,887,891,3,72,36,0,888,891,3,74,37,0,889,891,3,76,38,0,890,886,
  	1,0,0,0,890,887,1,0,0,0,890,888,1,0,0,0,890,889,1,0,0,0,891,69,1,0,0,
  	0,892,893,5,74,0,0,893,894,5,157,0,0,894,895,3,290,145,0,895,896,5,157,
  	0,0,896,901,3,84,42,0,897,898,5,157,0,0,898,899,5,72,0,0,899,900,5,157,
  	0,0,900,902,3,202,101,0,901,897,1,0,0,0,901,902,1,0,0,0,902,71,1,0,0,
  	0,903,904,5,70,0,0,904,905,5,157,0,0,905,906,3,290,145,0,906,73,1,0,0,
  	0,907,908,5,73,0,0,908,909,5,157,0,0,909,910,5,78,0,0,910,911,5,157,0,
  	0,911,912,3,296,148,0,912,75,1,0,0,0,913,914,5,73,0,0,914,915,5,157,0,
  	0,915,916,3,290,145,0,916,917,5,157,0,0,917,918,5,78,0,0,918,919,5,157,
  	0,0,919,920,3,290,145,0,920,77,1,0,0,0,921,932,3,80,40,0,922,924,5,157,
  	0,0,923,922,1,0,0,0,923,924,1,0,0,0,924,925,1,0,0,0,925,927,5,3,0,0,926,
  	928,5,157,0,0,927,926,1,0,0,0,927,928,1,0,0,0,928,929,1,0,0,0,929,931,
  	3,80,40,0,930,923,1,0,0,0,931,934,1,0,0,0,932,930,1,0,0,0,932,933,1,0,
  	0,0,933,79,1,0,0,0,934,932,1,0,0,0,935,936,3,290,145,0,936,937,5,157,
  	0,0,937,938,3,84,42,0,938,81,1,0,0,0,939,940,5,75,0,0,940,941,5,157,0,
  	0,941,943,5,76,0,0,942,944,5,157,0,0,943,942,1,0,0,0,943,944,1,0,0,0,
  	944,945,1,0,0,0,945,947,5,2,0,0,946,948,5,157,0,0,947,946,1,0,0,0,947,
  	948,1,0,0,0,948,949,1,0,0,0,949,951,3,290,145,0,950,952,5,157,0,0,951,
  	950,1,0,0,0,951,952,1,0,0,0,952,953,1,0,0,0,953,954,5,4,0,0,954,83,1,
  	0,0,0,955,956,6,42,-1,0,956,1008,3,298,149,0,957,959,5,92,0,0,958,960,
  	5,157,0,0,959,958,1,0,0,0,959,960,1,0,0,0,960,961,1,0,0,0,961,963,5,2,
  	0,0,962,964,5,157,0,0,963,962,1,0,0,0,963,964,1,0,0,0,964,965,1,0,0,0,
  	965,967,3,78,39,0,966,968,5,157,0,0,967,966,1,0,0,0,967,968,1,0,0,0,968,
  	969,1,0,0,0,969,970,5,4,0,0,970,1008,1,0,0,0,971,973,3,298,149,0,972,
  	974,5,157,0,0,973,972,1,0,0,0,973,974,1,0,0,0,974,975,1,0,0,0,975,977,
  	5,2,0,0,976,978,5,157,0,0,977,976,1,0,0,0,977,978,1,0,0,0,978,979,1,0,
  	0,0,979,981,3,78,39,0,980,982,5,157,0,0,981,980,1,0,0,0,981,982,1,0,0,
  	0,982,983,1,0,0,0,983,984,5,4,0,0,984,1008,1,0,0,0,985,987,3,298,149,
  	0,986,988,5,157,0,0,987,986,1,0,0,0,987,988,1,0,0,0,988,989,1,0,0,0,989,
  	991,5,2,0,0,990,992,5,157,0,0,991,990,1,0,0,0,991,992,1,0,0,0,992,993,
  	1,0,0,0,993,995,3,84,42,0,994,996,5,157,0,0,995,994,1,0,0,0,995,996,1,
  	0,0,0,996,997,1,0,0,0,997,999,5,3,0,0,998,1000,5,157,0,0,999,998,1,0,
  	0,0,999,1000,1,0,0,0,1000,1001,1,0,0,0,1001,1003,3,84,42,0,1002,1004,
  	5,157,0,0,1003,1002,1,0,0,0,1003,1004,1,0,0,0,1004,1005,1,0,0,0,1005,
  	1006,5,4,0,0,1006,1008,1,0,0,0,1007,955,1,0,0,0,1007,957,1,0,0,0,1007,
  	971,1,0,0,0,1007,985,1,0,0,0,1008,1013,1,0,0,0,1009,1010,10,4,0,0,1010,
  	1012,3,86,43,0,1011,1009,1,0,0,0,1012,1015,1,0,0,0,1013,1011,1,0,0,0,
  	1013,1014,1,0,0,0,1014,85,1,0,0,0,1015,1013,1,0,0,0,1016,1020,3,88,44,
  	0,1017,1019,3,88,44,0,1018,1017,1,0,0,0,1019,1022,1,0,0,0,1020,1018,1,
  	0,0,0,1020,1021,1,0,0,0,1021,87,1,0,0,0,1022,1020,1,0,0,0,1023,1025,5,
  	7,0,0,1024,1026,3,292,146,0,1025,1024,1,0,0,0,1025,1026,1,0,0,0,1026,
  	1027,1,0,0,0,1027,1028,5,8,0,0,1028,89,1,0,0,0,1029,1032,3,92,46,0,1030,
  	1032,3,94,47,0,1031,1029,1,0,0,0,1031,1030,1,0,0,0,1032,91,1,0,0,0,1033,
  	1034,5,79,0,0,1034,93,1,0,0,0,1035,1036,5,80,0,0,1036,95,1,0,0,0,1037,
  	1038,5,81,0,0,1038,1039,5,157,0,0,1039,1052,5,82,0,0,1040,1041,5,81,0,
  	0,1041,1042,5,157,0,0,1042,1043,5,82,0,0,1043,1044,5,157,0,0,1044,1045,
  	5,83,0,0,1045,1046,5,157,0,0,1046,1052,5,84,0,0,1047,1052,5,86,0,0,1048,
  	1052,5,87,0,0,1049,1052,5,88,0,0,1050,1052,5,89,0,0,1051,1037,1,0,0,0,
  	1051,1040,1,0,0,0,1051,1047,1,0,0,0,1051,1048,1,0,0,0,1051,1049,1,0,0,
  	0,1051,1050,1,0,0,0,1052,97,1,0,0,0,1053,1056,3,100,50,0,1054,1056,3,
  	102,51,0,1055,1053,1,0,0,0,1055,1054,1,0,0,0,1056,99,1,0,0,0,1057,1058,
  	5,94,0,0,1058,1059,5,157,0,0,1059,1060,5,91,0,0,1060,1063,5,157,0,0,1061,
  	1064,5,143,0,0,1062,1064,3,282,141,0,1063,1061,1,0,0,0,1063,1062,1,0,
  	0,0,1064,101,1,0,0,0,1065,1066,5,90,0,0,1066,1067,5,157,0,0,1067,1068,
  	3,282,141,0,1068,103,1,0,0,0,1069,1070,3,106,53,0,1070,105,1,0,0,0,1071,
  	1078,3,110,55,0,1072,1074,5,157,0,0,1073,1072,1,0,0,0,1073,1074,1,0,0,
  	0,1074,1075,1,0,0,0,1075,1077,3,108,54,0,1076,1073,1,0,0,0,1077,1080,
  	1,0,0,0,1078,1076,1,0,0,0,1078,1079,1,0,0,0,1079,1093,1,0,0,0,1080,1078,
  	1,0,0,0,1081,1083,3,144,72,0,1082,1084,5,157,0,0,1083,1082,1,0,0,0,1083,
  	1084,1,0,0,0,1084,1086,1,0,0,0,1085,1081,1,0,0,0,1086,1087,1,0,0,0,1087,
  	1085,1,0,0,0,1087,1088,1,0,0,0,1088,1089,1,0,0,0,1089,1090,3,110,55,0,
  	1090,1091,6,53,-1,0,1091,1093,1,0,0,0,1092,1071,1,0,0,0,1092,1085,1,0,
  	0,0,1093,107,1,0,0,0,1094,1095,5,92,0,0,1095,1096,5,157,0,0,1096,1098,
  	5,93,0,0,1097,1099,5,157,0,0,1098,1097,1,0,0,0,1098,1099,1,0,0,0,1099,
  	1100,1,0,0,0,1100,1107,3,110,55,0,1101,1103,5,92,0,0,1102,1104,5,157,
  	0,0,1103,1102,1,0,0,0,1103,1104,1,0,0,0,1104,1105,1,0,0,0,1105,1107,3,
  	110,55,0,1106,1094,1,0,0,0,1106,1101,1,0,0,0,1107,109,1,0,0,0,1108,1111,
  	3,112,56,0,1109,1111,3,114,57,0,1110,1108,1,0,0,0,1110,1109,1,0,0,0,1111,
  	111,1,0,0,0,1112,1114,3,120,60,0,1113,1115,5,157,0,0,1114,1113,1,0,0,
  	0,1114,1115,1,0,0,0,1115,1117,1,0,0,0,1116,1112,1,0,0,0,1117,1120,1,0,
  	0,0,1118,1116,1,0,0,0,1118,1119,1,0,0,0,1119,1121,1,0,0,0,1120,1118,1,
  	0,0,0,1121,1158,3,144,72,0,1122,1124,3,120,60,0,1123,1125,5,157,0,0,1124,
  	1123,1,0,0,0,1124,1125,1,0,0,0,1125,1127,1,0,0,0,1126,1122,1,0,0,0,1127,
  	1130,1,0,0,0,1128,1126,1,0,0,0,1128,1129,1,0,0,0,1129,1131,1,0,0,0,1130,
  	1128,1,0,0,0,1131,1138,3,118,59,0,1132,1134,5,157,0,0,1133,1132,1,0,0,
  	0,1133,1134,1,0,0,0,1134,1135,1,0,0,0,1135,1137,3,118,59,0,1136,1133,
  	1,0,0,0,1137,1140,1,0,0,0,1138,1136,1,0,0,0,1138,1139,1,0,0,0,1139,1145,
  	1,0,0,0,1140,1138,1,0,0,0,1141,1143,5,157,0,0,1142,1141,1,0,0,0,1142,
  	1143,1,0,0,0,1143,1144,1,0,0,0,1144,1146,3,144,72,0,1145,1142,1,0,0,0,
  	1145,1146,1,0,0,0,1146,1158,1,0,0,0,1147,1149,3,120,60,0,1148,1150,5,
  	157,0,0,1149,1148,1,0,0,0,1149,1150,1,0,0,0,1150,1152,1,0,0,0,1151,1147,
  	1,0,0,0,1152,1153,1,0,0,0,1153,1151,1,0,0,0,1153,1154,1,0,0,0,1154,1155,
  	1,0,0,0,1155,1156,6,56,-1,0,1156,1158,1,0,0,0,1157,1118,1,0,0,0,1157,
  	1128,1,0,0,0,1157,1151,1,0,0,0,1158,113,1,0,0,0,1159,1161,3,116,58,0,
  	1160,1162,5,157,0,0,1161,1160,1,0,0,0,1161,1162,1,0,0,0,1162,1164,1,0,
  	0,0,1163,1159,1,0,0,0,1164,1165,1,0,0,0,1165,1163,1,0,0,0,1165,1166,1,
  	0,0,0,1166,1167,1,0,0,0,1167,1168,3,112,56,0,1168,115,1,0,0,0,1169,1171,
  	3,120,60,0,1170,1172,5,157,0,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,
  	1174,1,0,0,0,1173,1169,1,0,0,0,1174,1177,1,0,0,0,1175,1173,1,0,0,0,1175,
  	1176,1,0,0,0,1176,1184,1,0,0,0,1177,1175,1,0,0,0,1178,1180,3,118,59,0,
  	1179,1181,5,157,0,0,1180,1179,1,0,0,0,1180,1181,1,0,0,0,1181,1183,1,0,
  	0,0,1182,1178,1,0,0,0,1183,1186,1,0,0,0,1184,1182,1,0,0,0,1184,1185,1,
  	0,0,0,1185,1187,1,0,0,0,1186,1184,1,0,0,0,1187,1188,3,142,71,0,1188,117,
  	1,0,0,0,1189,1194,3,130,65,0,1190,1194,3,132,66,0,1191,1194,3,136,68,
  	0,1192,1194,3,140,70,0,1193,1189,1,0,0,0,1193,1190,1,0,0,0,1193,1191,
  	1,0,0,0,1193,1192,1,0,0,0,1194,119,1,0,0,0,1195,1200,3,126,63,0,1196,
  	1200,3,128,64,0,1197,1200,3,124,62,0,1198,1200,3,122,61,0,1199,1195,1,
  	0,0,0,1199,1196,1,0,0,0,1199,1197,1,0,0,0,1199,1198,1,0,0,0,1200,121,
  	1,0,0,0,1201,1219,5,94,0,0,1202,1203,5,157,0,0,1203,1204,5,105,0,0,1204,
  	1205,5,157,0,0,1205,1207,5,95,0,0,1206,1208,5,157,0,0,1207,1206,1,0,0,
  	0,1207,1208,1,0,0,0,1208,1209,1,0,0,0,1209,1211,5,2,0,0,1210,1212,5,157,
  	0,0,1211,1210,1,0,0,0,1211,1212,1,0,0,0,1212,1213,1,0,0,0,1213,1215,3,
  	78,39,0,1214,1216,5,157,0,0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,
  	1217,1,0,0,0,1217,1218,5,4,0,0,1218,1220,1,0,0,0,1219,1202,1,0,0,0,1219,
  	1220,1,0,0,0,1220,1221,1,0,0,0,1221,1222,5,157,0,0,1222,1223,5,54,0,0,
  	1223,1224,5,157,0,0,1224,1229,3,10,5,0,1225,1227,5,157,0,0,1226,1225,
  	1,0,0,0,1226,1227,1,0,0,0,1227,1228,1,0,0,0,1228,1230,3,38,19,0,1229,
  	1226,1,0,0,0,1229,1230,1,0,0,0,1230,1235,1,0,0,0,1231,1233,5,157,0,0,
  	1232,1231,1,0,0,0,1232,1233,1,0,0,0,1233,1234,1,0,0,0,1234,1236,3,160,
  	80,0,1235,1232,1,0,0,0,1235,1236,1,0,0,0,1236,123,1,0,0,0,1237,1238,5,
  	49,0,0,1238,1239,5,157,0,0,1239,1244,3,264,132,0,1240,1242,5,157,0,0,
  	1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,1243,1,0,0,0,1243,1245,3,160,
  	80,0,1244,1241,1,0,0,0,1244,1245,1,0,0,0,1245,125,1,0,0,0,1246,1247,5,
  	96,0,0,1247,1249,5,157,0,0,1248,1246,1,0,0,0,1248,1249,1,0,0,0,1249,1250,
  	1,0,0,0,1250,1252,5,97,0,0,1251,1253,5,157,0,0,1252,1251,1,0,0,0,1252,
  	1253,1,0,0,0,1253,1254,1,0,0,0,1254,1259,3,162,81,0,1255,1257,5,157,0,
  	0,1256,1255,1,0,0,0,1256,1257,1,0,0,0,1257,1258,1,0,0,0,1258,1260,3,160,
  	80,0,1259,1256,1,0,0,0,1259,1260,1,0,0,0,1260,127,1,0,0,0,1261,1263,5,
  	98,0,0,1262,1264,5,157,0,0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,1264,1265,
  	1,0,0,0,1265,1266,3,202,101,0,1266,1267,5,157,0,0,1267,1268,5,109,0,0,
  	1268,1269,5,157,0,0,1269,1270,3,282,141,0,1270,129,1,0,0,0,1271,1273,
  	5,99,0,0,1272,1274,5,157,0,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,
  	1275,1,0,0,0,1275,1276,3,162,81,0,1276,131,1,0,0,0,1277,1279,5,100,0,
  	0,1278,1280,5,157,0,0,1279,1278,1,0,0,0,1279,1280,1,0,0,0,1280,1281,1,
  	0,0,0,1281,1286,3,162,81,0,1282,1283,5,157,0,0,1283,1285,3,134,67,0,1284,
  	1282,1,0,0,0,1285,1288,1,0,0,0,1286,1284,1,0,0,0,1286,1287,1,0,0,0,1287,
  	133,1,0,0,0,1288,1286,1,0,0,0,1289,1290,5,101,0,0,1290,1291,5,157,0,0,
  	1291,1292,5,97,0,0,1292,1293,5,157,0,0,1293,1300,3,136,68,0,1294,1295,
  	5,101,0,0,1295,1296,5,157,0,0,1296,1297,5,99,0,0,1297,1298,5,157,0,0,
  	1298,1300,3,136,68,0,1299,1289,1,0,0,0,1299,1294,1,0,0,0,1300,135,1,0,
  	0,0,1301,1303,5,102,0,0,1302,1304,5,157,0,0,1303,1302,1,0,0,0,1303,1304,
  	1,0,0,0,1304,1305,1,0,0,0,1305,1316,3,138,69,0,1306,1308,5,157,0,0,1307,
  	1306,1,0,0,0,1307,1308,1,0,0,0,1308,1309,1,0,0,0,1309,1311,5,3,0,0,1310,
  	1312,5,157,0,0,1311,1310,1,0,0,0,1311,1312,1,0,0,0,1312,1313,1,0,0,0,
  	1313,1315,3,138,69,0,1314,1307,1,0,0,0,1315,1318,1,0,0,0,1316,1314,1,
  	0,0,0,1316,1317,1,0,0,0,1317,137,1,0,0,0,1318,1316,1,0,0,0,1319,1321,
  	3,288,144,0,1320,1322,5,157,0,0,1321,1320,1,0,0,0,1321,1322,1,0,0,0,1322,
  	1323,1,0,0,0,1323,1325,5,6,0,0,1324,1326,5,157,0,0,1325,1324,1,0,0,0,
  	1325,1326,1,0,0,0,1326,1327,1,0,0,0,1327,1328,3,202,101,0,1328,139,1,
  	0,0,0,1329,1330,5,103,0,0,1330,1332,5,157,0,0,1331,1329,1,0,0,0,1331,
  	1332,1,0,0,0,1332,1333,1,0,0,0,1333,1335,5,104,0,0,1334,1336,5,157,0,
  	0,1335,1334,1,0,0,0,1335,1336,1,0,0,0,1336,1337,1,0,0,0,1337,1348,3,202,
  	101,0,1338,1340,5,157,0,0,1339,1338,1,0,0,0,1339,1340,1,0,0,0,1340,1341,
  	1,0,0,0,1341,1343,5,3,0,0,1342,1344,5,157,0,0,1343,1342,1,0,0,0,1343,
  	1344,1,0,0,0,1344,1345,1,0,0,0,1345,1347,3,202,101,0,1346,1339,1,0,0,
  	0,1347,1350,1,0,0,0,1348,1346,1,0,0,0,1348,1349,1,0,0,0,1349,141,1,0,
  	0,0,1350,1348,1,0,0,0,1351,1352,5,105,0,0,1352,1357,3,146,73,0,1353,1355,
  	5,157,0,0,1354,1353,1,0,0,0,1354,1355,1,0,0,0,1355,1356,1,0,0,0,1356,
  	1358,3,160,80,0,1357,1354,1,0,0,0,1357,1358,1,0,0,0,1358,143,1,0,0,0,
  	1359,1360,5,106,0,0,1360,1361,3,146,73,0,1361,145,1,0,0,0,1362,1364,5,
  	157,0,0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,1365,1,0,0,0,1365,1367,
  	5,107,0,0,1366,1363,1,0,0,0,1366,1367,1,0,0,0,1367,1368,1,0,0,0,1368,
  	1369,5,157,0,0,1369,1372,3,148,74,0,1370,1371,5,157,0,0,1371,1373,3,152,
  	76,0,1372,1370,1,0,0,0,1372,1373,1,0,0,0,1373,1376,1,0,0,0,1374,1375,
  	5,157,0,0,1375,1377,3,154,77,0,1376,1374,1,0,0,0,1376,1377,1,0,0,0,1377,
  	1380,1,0,0,0,1378,1379,5,157,0,0,1379,1381,3,156,78,0,1380,1378,1,0,0,
  	0,1380,1381,1,0,0,0,1381,147,1,0,0,0,1382,1393,5,108,0,0,1383,1385,5,
  	157,0,0,1384,1383,1,0,0,0,1384,1385,1,0,0,0,1385,1386,1,0,0,0,1386,1388,
  	5,3,0,0,1387,1389,5,157,0,0,1388,1387,1,0,0,0,1388,1389,1,0,0,0,1389,
  	1390,1,0,0,0,1390,1392,3,150,75,0,1391,1384,1,0,0,0,1392,1395,1,0,0,0,
  	1393,1391,1,0,0,0,1393,1394,1,0,0,0,1394,1411,1,0,0,0,1395,1393,1,0,0,
  	0,1396,1407,3,150,75,0,1397,1399,5,157,0,0,1398,1397,1,0,0,0,1398,1399,
  	1,0,0,0,1399,1400,1,0,0,0,1400,1402,5,3,0,0,1401,1403,5,157,0,0,1402,
  	1401,1,0,0,0,1402,1403,1,0,0,0,1403,1404,1,0,0,0,1404,1406,3,150,75,0,
  	1405,1398,1,0,0,0,1406,1409,1,0,0,0,1407,1405,1,0,0,0,1407,1408,1,0,0,
  	0,1408,1411,1,0,0,0,1409,1407,1,0,0,0,1410,1382,1,0,0,0,1410,1396,1,0,
  	0,0,1411,149,1,0,0,0,1412,1413,3,202,101,0,1413,1414,5,157,0,0,1414,1415,
  	5,109,0,0,1415,1416,5,157,0,0,1416,1417,3,282,141,0,1417,1420,1,0,0,0,
  	1418,1420,3,202,101,0,1419,1412,1,0,0,0,1419,1418,1,0,0,0,1420,151,1,
  	0,0,0,1421,1422,5,110,0,0,1422,1423,5,157,0,0,1423,1424,5,111,0,0,1424,
  	1425,5,157,0,0,1425,1433,3,158,79,0,1426,1428,5,3,0,0,1427,1429,5,157,
  	0,0,1428,1427,1,0,0,0,1428,1429,1,0,0,0,1429,1430,1,0,0,0,1430,1432,3,
  	158,79,0,1431,1426,1,0,0,0,1432,1435,1,0,0,0,1433,1431,1,0,0,0,1433,1434,
  	1,0,0,0,1434,153,1,0,0,0,1435,1433,1,0,0,0,1436,1437,5,112,0,0,1437,1438,
  	5,157,0,0,1438,1439,3,202,101,0,1439,155,1,0,0,0,1440,1441,5,113,0,0,
  	1441,1442,5,157,0,0,1442,1443,3,202,101,0,1443,157,1,0,0,0,1444,1449,
  	3,202,101,0,1445,1447,5,157,0,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,1447,
  	1448,1,0,0,0,1448,1450,7,2,0,0,1449,1446,1,0,0,0,1449,1450,1,0,0,0,1450,
  	159,1,0,0,0,1451,1452,5,118,0,0,1452,1453,5,157,0,0,1453,1454,3,202,101,
  	0,1454,161,1,0,0,0,1455,1466,3,164,82,0,1456,1458,5,157,0,0,1457,1456,
  	1,0,0,0,1457,1458,1,0,0,0,1458,1459,1,0,0,0,1459,1461,5,3,0,0,1460,1462,
  	5,157,0,0,1461,1460,1,0,0,0,1461,1462,1,0,0,0,1462,1463,1,0,0,0,1463,
  	1465,3,164,82,0,1464,1457,1,0,0,0,1465,1468,1,0,0,0,1466,1464,1,0,0,0,
  	1466,1467,1,0,0,0,1467,163,1,0,0,0,1468,1466,1,0,0,0,1469,1471,3,282,
  	141,0,1470,1472,5,157,0,0,1471,1470,1,0,0,0,1471,1472,1,0,0,0,1472,1473,
  	1,0,0,0,1473,1475,5,6,0,0,1474,1476,5,157,0,0,1475,1474,1,0,0,0,1475,
  	1476,1,0,0,0,1476,1477,1,0,0,0,1477,1478,3,166,83,0,1478,1481,1,0,0,0,
  	1479,1481,3,166,83,0,1480,1469,1,0,0,0,1480,1479,1,0,0,0,1481,165,1,0,
  	0,0,1482,1483,3,168,84,0,1483,167,1,0,0,0,1484,1491,3,170,85,0,1485,1487,
  	5,157,0,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1488,1,0,0,0,1488,
  	1490,3,172,86,0,1489,1486,1,0,0,0,1490,1493,1,0,0,0,1491,1489,1,0,0,0,
  	1491,1492,1,0,0,0,1492,1499,1,0,0,0,1493,1491,1,0,0,0,1494,1495,5,2,0,
  	0,1495,1496,3,168,84,0,1496,1497,5,4,0,0,1497,1499,1,0,0,0,1498,1484,
  	1,0,0,0,1498,1494,1,0,0,0,1499,169,1,0,0,0,1500,1502,5,2,0,0,1501,1503,
  	5,157,0,0,1502,1501,1,0,0,0,1502,1503,1,0,0,0,1503,1508,1,0,0,0,1504,
  	1506,3,282,141,0,1505,1507,5,157,0,0,1506,1505,1,0,0,0,1506,1507,1,0,
  	0,0,1507,1509,1,0,0,0,1508,1504,1,0,0,0,1508,1509,1,0,0,0,1509,1514,1,
  	0,0,0,1510,1512,3,182,91,0,1511,1513,5,157,0,0,1512,1511,1,0,0,0,1512,
  	1513,1,0,0,0,1513,1515,1,0,0,0,1514,1510,1,0,0,0,1514,1515,1,0,0,0,1515,
  	1520,1,0,0,0,1516,1518,3,178,89,0,1517,1519,5,157,0,0,1518,1517,1,0,0,
  	0,1518,1519,1,0,0,0,1519,1521,1,0,0,0,1520,1516,1,0,0,0,1520,1521,1,0,
  	0,0,1521,1522,1,0,0,0,1522,1523,5,4,0,0,1523,171,1,0,0,0,1524,1526,3,
  	174,87,0,1525,1527,5,157,0,0,1526,1525,1,0,0,0,1526,1527,1,0,0,0,1527,
  	1528,1,0,0,0,1528,1529,3,170,85,0,1529,173,1,0,0,0,1530,1532,3,302,151,
  	0,1531,1533,5,157,0,0,1532,1531,1,0,0,0,1532,1533,1,0,0,0,1533,1534,1,
  	0,0,0,1534,1536,3,306,153,0,1535,1537,5,157,0,0,1536,1535,1,0,0,0,1536,
  	1537,1,0,0,0,1537,1539,1,0,0,0,1538,1540,3,176,88,0,1539,1538,1,0,0,0,
  	1539,1540,1,0,0,0,1540,1542,1,0,0,0,1541,1543,5,157,0,0,1542,1541,1,0,
  	0,0,1542,1543,1,0,0,0,1543,1544,1,0,0,0,1544,1545,3,306,153,0,1545,1575,
  	1,0,0,0,1546,1548,3,306,153,0,1547,1549,5,157,0,0,1548,1547,1,0,0,0,1548,
  	1549,1,0,0,0,1549,1551,1,0,0,0,1550,1552,3,176,88,0,1551,1550,1,0,0,0,
  	1551,1552,1,0,0,0,1552,1554,1,0,0,0,1553,1555,5,157,0,0,1554,1553,1,0,
  	0,0,1554,1555,1,0,0,0,1555,1556,1,0,0,0,1556,1558,3,306,153,0,1557,1559,
  	5,157,0,0,1558,1557,1,0,0,0,1558,1559,1,0,0,0,1559,1560,1,0,0,0,1560,
  	1561,3,304,152,0,1561,1575,1,0,0,0,1562,1564,3,306,153,0,1563,1565,5,
  	157,0,0,1564,1563,1,0,0,0,1564,1565,1,0,0,0,1565,1567,1,0,0,0,1566,1568,
  	3,176,88,0,1567,1566,1,0,0,0,1567,1568,1,0,0,0,1568,1570,1,0,0,0,1569,
  	1571,5,157,0,0,1570,1569,1,0,0,0,1570,1571,1,0,0,0,1571,1572,1,0,0,0,
  	1572,1573,3,306,153,0,1573,1575,1,0,0,0,1574,1530,1,0,0,0,1574,1546,1,
  	0,0,0,1574,1562,1,0,0,0,1575,175,1,0,0,0,1576,1578,5,7,0,0,1577,1579,
  	5,157,0,0,1578,1577,1,0,0,0,1578,1579,1,0,0,0,1579,1584,1,0,0,0,1580,
  	1582,3,282,141,0,1581,1583,5,157,0,0,1582,1581,1,0,0,0,1582,1583,1,0,
  	0,0,1583,1585,1,0,0,0,1584,1580,1,0,0,0,1584,1585,1,0,0,0,1585,1590,1,
  	0,0,0,1586,1588,3,180,90,0,1587,1589,5,157,0,0,1588,1587,1,0,0,0,1588,
  	1589,1,0,0,0,1589,1591,1,0,0,0,1590,1586,1,0,0,0,1590,1591,1,0,0,0,1591,
  	1596,1,0,0,0,1592,1594,3,186,93,0,1593,1595,5,157,0,0,1594,1593,1,0,0,
  	0,1594,1595,1,0,0,0,1595,1597,1,0,0,0,1596,1592,1,0,0,0,1596,1597,1,0,
  	0,0,1597,1602,1,0,0,0,1598,1600,3,178,89,0,1599,1601,5,157,0,0,1600,1599,
  	1,0,0,0,1600,1601,1,0,0,0,1601,1603,1,0,0,0,1602,1598,1,0,0,0,1602,1603,
  	1,0,0,0,1603,1604,1,0,0,0,1604,1605,5,8,0,0,1605,177,1,0,0,0,1606,1608,
  	5,9,0,0,1607,1609,5,157,0,0,1608,1607,1,0,0,0,1608,1609,1,0,0,0,1609,
  	1643,1,0,0,0,1610,1612,3,290,145,0,1611,1613,5,157,0,0,1612,1611,1,0,
  	0,0,1612,1613,1,0,0,0,1613,1614,1,0,0,0,1614,1616,5,127,0,0,1615,1617,
  	5,157,0,0,1616,1615,1,0,0,0,1616,1617,1,0,0,0,1617,1618,1,0,0,0,1618,
  	1620,3,202,101,0,1619,1621,5,157,0,0,1620,1619,1,0,0,0,1620,1621,1,0,
  	0,0,1621,1640,1,0,0,0,1622,1624,5,3,0,0,1623,1625,5,157,0,0,1624,1623,
  	1,0,0,0,1624,1625,1,0,0,0,1625,1626,1,0,0,0,1626,1628,3,290,145,0,1627,
  	1629,5,157,0,0,1628,1627,1,0,0,0,1628,1629,1,0,0,0,1629,1630,1,0,0,0,
  	1630,1632,5,127,0,0,1631,1633,5,157,0,0,1632,1631,1,0,0,0,1632,1633,1,
  	0,0,0,1633,1634,1,0,0,0,1634,1636,3,202,101,0,1635,1637,5,157,0,0,1636,
  	1635,1,0,0,0,1636,1637,1,0,0,0,1637,1639,1,0,0,0,1638,1622,1,0,0,0,1639,
  	1642,1,0,0,0,1640,1638,1,0,0,0,1640,1641,1,0,0,0,1641,1644,1,0,0,0,1642,
  	1640,1,0,0,0,1643,1610,1,0,0,0,1643,1644,1,0,0,0,1644,1645,1,0,0,0,1645,
  	1646,5,10,0,0,1646,179,1,0,0,0,1647,1649,5,127,0,0,1648,1650,5,157,0,
  	0,1649,1648,1,0,0,0,1649,1650,1,0,0,0,1650,1651,1,0,0,0,1651,1665,3,200,
  	100,0,1652,1654,5,157,0,0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,1655,
  	1,0,0,0,1655,1657,5,11,0,0,1656,1658,5,127,0,0,1657,1656,1,0,0,0,1657,
  	1658,1,0,0,0,1658,1660,1,0,0,0,1659,1661,5,157,0,0,1660,1659,1,0,0,0,
  	1660,1661,1,0,0,0,1661,1662,1,0,0,0,1662,1664,3,200,100,0,1663,1653,1,
  	0,0,0,1664,1667,1,0,0,0,1665,1663,1,0,0,0,1665,1666,1,0,0,0,1666,181,
  	1,0,0,0,1667,1665,1,0,0,0,1668,1675,3,184,92,0,1669,1671,5,157,0,0,1670,
  	1669,1,0,0,0,1670,1671,1,0,0,0,1671,1672,1,0,0,0,1672,1674,3,184,92,0,
  	1673,1670,1,0,0,0,1674,1677,1,0,0,0,1675,1673,1,0,0,0,1675,1676,1,0,0,
  	0,1676,183,1,0,0,0,1677,1675,1,0,0,0,1678,1680,5,127,0,0,1679,1681,5,
  	157,0,0,1680,1679,1,0,0,0,1680,1681,1,0,0,0,1681,1682,1,0,0,0,1682,1683,
  	3,198,99,0,1683,185,1,0,0,0,1684,1686,5,108,0,0,1685,1687,5,157,0,0,1686,
  	1685,1,0,0,0,1686,1687,1,0,0,0,1687,1692,1,0,0,0,1688,1693,5,119,0,0,
  	1689,1690,5,93,0,0,1690,1691,5,157,0,0,1691,1693,5,119,0,0,1692,1688,
  	1,0,0,0,1692,1689,1,0,0,0,1692,1693,1,0,0,0,1693,1695,1,0,0,0,1694,1696,
  	5,157,0,0,1695,1694,1,0,0,0,1695,1696,1,0,0,0,1696,1711,1,0,0,0,1697,
  	1699,3,194,97,0,1698,1697,1,0,0,0,1698,1699,1,0,0,0,1699,1701,1,0,0,0,
  	1700,1702,5,157,0,0,1701,1700,1,0,0,0,1701,1702,1,0,0,0,1702,1703,1,0,
  	0,0,1703,1705,5,12,0,0,1704,1706,5,157,0,0,1705,1704,1,0,0,0,1705,1706,
  	1,0,0,0,1706,1708,1,0,0,0,1707,1709,3,196,98,0,1708,1707,1,0,0,0,1708,
  	1709,1,0,0,0,1709,1712,1,0,0,0,1710,1712,3,292,146,0,1711,1698,1,0,0,
  	0,1711,1710,1,0,0,0,1711,1712,1,0,0,0,1712,1717,1,0,0,0,1713,1715,5,157,
  	0,0,1714,1713,1,0,0,0,1714,1715,1,0,0,0,1715,1716,1,0,0,0,1716,1718,3,
  	188,94,0,1717,1714,1,0,0,0,1717,1718,1,0,0,0,1718,187,1,0,0,0,1719,1721,
  	5,2,0,0,1720,1722,5,157,0,0,1721,1720,1,0,0,0,1721,1722,1,0,0,0,1722,
  	1723,1,0,0,0,1723,1725,3,282,141,0,1724,1726,5,157,0,0,1725,1724,1,0,
  	0,0,1725,1726,1,0,0,0,1726,1727,1,0,0,0,1727,1729,5,3,0,0,1728,1730,5,
  	157,0,0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1731,1,0,0,0,1731,1740,
  	3,282,141,0,1732,1734,5,157,0,0,1733,1732,1,0,0,0,1733,1734,1,0,0,0,1734,
  	1735,1,0,0,0,1735,1737,5,11,0,0,1736,1738,5,157,0,0,1737,1736,1,0,0,0,
  	1737,1738,1,0,0,0,1738,1739,1,0,0,0,1739,1741,3,160,80,0,1740,1733,1,
  	0,0,0,1740,1741,1,0,0,0,1741,1761,1,0,0,0,1742,1744,5,157,0,0,1743,1742,
  	1,0,0,0,1743,1744,1,0,0,0,1744,1745,1,0,0,0,1745,1747,5,11,0,0,1746,1748,
  	5,157,0,0,1747,1746,1,0,0,0,1747,1748,1,0,0,0,1748,1749,1,0,0,0,1749,
  	1751,3,192,96,0,1750,1752,5,157,0,0,1751,1750,1,0,0,0,1751,1752,1,0,0,
  	0,1752,1753,1,0,0,0,1753,1755,5,3,0,0,1754,1756,5,157,0,0,1755,1754,1,
  	0,0,0,1755,1756,1,0,0,0,1756,1757,1,0,0,0,1757,1759,3,190,95,0,1758,1760,
  	5,157,0,0,1759,1758,1,0,0,0,1759,1760,1,0,0,0,1760,1762,1,0,0,0,1761,
  	1743,1,0,0,0,1761,1762,1,0,0,0,1762,1763,1,0,0,0,1763,1764,5,4,0,0,1764,
  	189,1,0,0,0,1765,1767,5,9,0,0,1766,1768,5,157,0,0,1767,1766,1,0,0,0,1767,
  	1768,1,0,0,0,1768,1770,1,0,0,0,1769,1771,3,148,74,0,1770,1769,1,0,0,0,
  	1770,1771,1,0,0,0,1771,1773,1,0,0,0,1772,1774,5,157,0,0,1773,1772,1,0,
  	0,0,1773,1774,1,0,0,0,1774,1775,1,0,0,0,1775,1776,5,10,0,0,1776,191,1,
  	0,0,0,1777,1779,5,9,0,0,1778,1780,5,157,0,0,1779,1778,1,0,0,0,1779,1780,
  	1,0,0,0,1780,1782,1,0,0,0,1781,1783,3,148,74,0,1782,1781,1,0,0,0,1782,
  	1783,1,0,0,0,1783,1785,1,0,0,0,1784,1786,5,157,0,0,1785,1784,1,0,0,0,
  	1785,1786,1,0,0,0,1786,1787,1,0,0,0,1787,1788,5,10,0,0,1788,193,1,0,0,
  	0,1789,1790,5,145,0,0,1790,195,1,0,0,0,1791,1792,5,145,0,0,1792,197,1,
  	0,0,0,1793,1794,3,296,148,0,1794,199,1,0,0,0,1795,1796,3,296,148,0,1796,
  	201,1,0,0,0,1797,1798,3,204,102,0,1798,203,1,0,0,0,1799,1806,3,206,103,
  	0,1800,1801,5,157,0,0,1801,1802,5,120,0,0,1802,1803,5,157,0,0,1803,1805,
  	3,206,103,0,1804,1800,1,0,0,0,1805,1808,1,0,0,0,1806,1804,1,0,0,0,1806,
  	1807,1,0,0,0,1807,205,1,0,0,0,1808,1806,1,0,0,0,1809,1816,3,208,104,0,
  	1810,1811,5,157,0,0,1811,1812,5,121,0,0,1812,1813,5,157,0,0,1813,1815,
  	3,208,104,0,1814,1810,1,0,0,0,1815,1818,1,0,0,0,1816,1814,1,0,0,0,1816,
  	1817,1,0,0,0,1817,207,1,0,0,0,1818,1816,1,0,0,0,1819,1826,3,210,105,0,
  	1820,1821,5,157,0,0,1821,1822,5,122,0,0,1822,1823,5,157,0,0,1823,1825,
  	3,210,105,0,1824,1820,1,0,0,0,1825,1828,1,0,0,0,1826,1824,1,0,0,0,1826,
  	1827,1,0,0,0,1827,209,1,0,0,0,1828,1826,1,0,0,0,1829,1831,5,123,0,0,1830,
  	1832,5,157,0,0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,1834,1,0,0,0,
  	1833,1829,1,0,0,0,1834,1837,1,0,0,0,1835,1833,1,0,0,0,1835,1836,1,0,0,
  	0,1836,1838,1,0,0,0,1837,1835,1,0,0,0,1838,1839,3,212,106,0,1839,211,
  	1,0,0,0,1840,1850,3,216,108,0,1841,1843,5,157,0,0,1842,1841,1,0,0,0,1842,
  	1843,1,0,0,0,1843,1844,1,0,0,0,1844,1846,3,214,107,0,1845,1847,5,157,
  	0,0,1846,1845,1,0,0,0,1846,1847,1,0,0,0,1847,1848,1,0,0,0,1848,1849,3,
  	216,108,0,1849,1851,1,0,0,0,1850,1842,1,0,0,0,1850,1851,1,0,0,0,1851,
  	1889,1,0,0,0,1852,1854,3,216,108,0,1853,1855,5,157,0,0,1854,1853,1,0,
  	0,0,1854,1855,1,0,0,0,1855,1856,1,0,0,0,1856,1858,5,124,0,0,1857,1859,
  	5,157,0,0,1858,1857,1,0,0,0,1858,1859,1,0,0,0,1859,1860,1,0,0,0,1860,
  	1861,3,216,108,0,1861,1862,1,0,0,0,1862,1863,6,106,-1,0,1863,1889,1,0,
  	0,0,1864,1866,3,216,108,0,1865,1867,5,157,0,0,1866,1865,1,0,0,0,1866,
  	1867,1,0,0,0,1867,1868,1,0,0,0,1868,1870,3,214,107,0,1869,1871,5,157,
  	0,0,1870,1869,1,0,0,0,1870,1871,1,0,0,0,1871,1872,1,0,0,0,1872,1882,3,
  	216,108,0,1873,1875,5,157,0,0,1874,1873,1,0,0,0,1874,1875,1,0,0,0,1875,
  	1876,1,0,0,0,1876,1878,3,214,107,0,1877,1879,5,157,0,0,1878,1877,1,0,
  	0,0,1878,1879,1,0,0,0,1879,1880,1,0,0,0,1880,1881,3,216,108,0,1881,1883,
  	1,0,0,0,1882,1874,1,0,0,0,1883,1884,1,0,0,0,1884,1882,1,0,0,0,1884,1885,
  	1,0,0,0,1885,1886,1,0,0,0,1886,1887,6,106,-1,0,1887,1889,1,0,0,0,1888,
  	1840,1,0,0,0,1888,1852,1,0,0,0,1888,1864,1,0,0,0,1889,213,1,0,0,0,1890,
  	1891,7,3,0,0,1891,215,1,0,0,0,1892,1903,3,218,109,0,1893,1895,5,157,0,
  	0,1894,1893,1,0,0,0,1894,1895,1,0,0,0,1895,1896,1,0,0,0,1896,1898,5,11,
  	0,0,1897,1899,5,157,0,0,1898,1897,1,0,0,0,1898,1899,1,0,0,0,1899,1900,
  	1,0,0,0,1900,1902,3,218,109,0,1901,1894,1,0,0,0,1902,1905,1,0,0,0,1903,
  	1901,1,0,0,0,1903,1904,1,0,0,0,1904,217,1,0,0,0,1905,1903,1,0,0,0,1906,
  	1917,3,220,110,0,1907,1909,5,157,0,0,1908,1907,1,0,0,0,1908,1909,1,0,
  	0,0,1909,1910,1,0,0,0,1910,1912,5,18,0,0,1911,1913,5,157,0,0,1912,1911,
  	1,0,0,0,1912,1913,1,0,0,0,1913,1914,1,0,0,0,1914,1916,3,220,110,0,1915,
  	1908,1,0,0,0,1916,1919,1,0,0,0,1917,1915,1,0,0,0,1917,1918,1,0,0,0,1918,
  	219,1,0,0,0,1919,1917,1,0,0,0,1920,1932,3,224,112,0,1921,1923,5,157,0,
  	0,1922,1921,1,0,0,0,1922,1923,1,0,0,0,1923,1924,1,0,0,0,1924,1926,3,222,
  	111,0,1925,1927,5,157,0,0,1926,1925,1,0,0,0,1926,1927,1,0,0,0,1927,1928,
  	1,0,0,0,1928,1929,3,224,112,0,1929,1931,1,0,0,0,1930,1922,1,0,0,0,1931,
  	1934,1,0,0,0,1932,1930,1,0,0,0,1932,1933,1,0,0,0,1933,221,1,0,0,0,1934,
  	1932,1,0,0,0,1935,1936,7,4,0,0,1936,223,1,0,0,0,1937,1949,3,228,114,0,
  	1938,1940,5,157,0,0,1939,1938,1,0,0,0,1939,1940,1,0,0,0,1940,1941,1,0,
  	0,0,1941,1943,3,226,113,0,1942,1944,5,157,0,0,1943,1942,1,0,0,0,1943,
  	1944,1,0,0,0,1944,1945,1,0,0,0,1945,1946,3,228,114,0,1946,1948,1,0,0,
  	0,1947,1939,1,0,0,0,1948,1951,1,0,0,0,1949,1947,1,0,0,0,1949,1950,1,0,
  	0,0,1950,225,1,0,0,0,1951,1949,1,0,0,0,1952,1953,7,5,0,0,1953,227,1,0,
  	0,0,1954,1966,3,232,116,0,1955,1957,5,157,0,0,1956,1955,1,0,0,0,1956,
  	1957,1,0,0,0,1957,1958,1,0,0,0,1958,1960,3,230,115,0,1959,1961,5,157,
  	0,0,1960,1959,1,0,0,0,1960,1961,1,0,0,0,1961,1962,1,0,0,0,1962,1963,3,
  	232,116,0,1963,1965,1,0,0,0,1964,1956,1,0,0,0,1965,1968,1,0,0,0,1966,
  	1964,1,0,0,0,1966,1967,1,0,0,0,1967,229,1,0,0,0,1968,1966,1,0,0,0,1969,
  	1970,7,6,0,0,1970,231,1,0,0,0,1971,1982,3,234,117,0,1972,1974,5,157,0,
  	0,1973,1972,1,0,0,0,1973,1974,1,0,0,0,1974,1975,1,0,0,0,1975,1977,5,24,
  	0,0,1976,1978,5,157,0,0,1977,1976,1,0,0,0,1977,1978,1,0,0,0,1978,1979,
  	1,0,0,0,1979,1981,3,234,117,0,1980,1973,1,0,0,0,1981,1984,1,0,0,0,1982,
  	1980,1,0,0,0,1982,1983,1,0,0,0,1983,233,1,0,0,0,1984,1982,1,0,0,0,1985,
  	1987,5,125,0,0,1986,1988,5,157,0,0,1987,1986,1,0,0,0,1987,1988,1,0,0,
  	0,1988,1990,1,0,0,0,1989,1985,1,0,0,0,1990,1993,1,0,0,0,1991,1989,1,0,
  	0,0,1991,1992,1,0,0,0,1992,1994,1,0,0,0,1993,1991,1,0,0,0,1994,1999,3,
  	236,118,0,1995,1997,5,157,0,0,1996,1995,1,0,0,0,1996,1997,1,0,0,0,1997,
  	1998,1,0,0,0,1998,2000,5,126,0,0,1999,1996,1,0,0,0,1999,2000,1,0,0,0,
  	2000,235,1,0,0,0,2001,2009,3,246,123,0,2002,2010,3,240,120,0,2003,2005,
  	3,238,119,0,2004,2003,1,0,0,0,2005,2006,1,0,0,0,2006,2004,1,0,0,0,2006,
  	2007,1,0,0,0,2007,2010,1,0,0,0,2008,2010,3,244,122,0,2009,2002,1,0,0,
  	0,2009,2004,1,0,0,0,2009,2008,1,0,0,0,2009,2010,1,0,0,0,2010,237,1,0,
  	0,0,2011,2012,5,157,0,0,2012,2014,5,128,0,0,2013,2015,5,157,0,0,2014,
  	2013,1,0,0,0,2014,2015,1,0,0,0,2015,2016,1,0,0,0,2016,2031,3,246,123,
  	0,2017,2018,5,7,0,0,2018,2019,3,202,101,0,2019,2020,5,8,0,0,2020,2031,
  	1,0,0,0,2021,2023,5,7,0,0,2022,2024,3,202,101,0,2023,2022,1,0,0,0,2023,
  	2024,1,0,0,0,2024,2025,1,0,0,0,2025,2027,5,127,0,0,2026,2028,3,202,101,
  	0,2027,2026,1,0,0,0,2027,2028,1,0,0,0,2028,2029,1,0,0,0,2029,2031,5,8,
  	0,0,2030,2011,1,0,0,0,2030,2017,1,0,0,0,2030,2021,1,0,0,0,2031,239,1,
  	0,0,0,2032,2044,3,242,121,0,2033,2034,5,157,0,0,2034,2035,5,129,0,0,2035,
  	2036,5,157,0,0,2036,2044,5,105,0,0,2037,2038,5,157,0,0,2038,2039,5,130,
  	0,0,2039,2040,5,157,0,0,2040,2044,5,105,0,0,2041,2042,5,157,0,0,2042,
  	2044,5,131,0,0,2043,2032,1,0,0,0,2043,2033,1,0,0,0,2043,2037,1,0,0,0,
  	2043,2041,1,0,0,0,2044,2046,1,0,0,0,2045,2047,5,157,0,0,2046,2045,1,0,
  	0,0,2046,2047,1,0,0,0,2047,2048,1,0,0,0,2048,2049,3,246,123,0,2049,241,
  	1,0,0,0,2050,2052,5,157,0,0,2051,2050,1,0,0,0,2051,2052,1,0,0,0,2052,
  	2053,1,0,0,0,2053,2054,5,25,0,0,2054,243,1,0,0,0,2055,2056,5,157,0,0,
  	2056,2057,5,132,0,0,2057,2058,5,157,0,0,2058,2066,5,133,0,0,2059,2060,
  	5,157,0,0,2060,2061,5,132,0,0,2061,2062,5,157,0,0,2062,2063,5,123,0,0,
  	2063,2064,5,157,0,0,2064,2066,5,133,0,0,2065,2055,1,0,0,0,2065,2059,1,
  	0,0,0,2066,245,1,0,0,0,2067,2074,3,248,124,0,2068,2070,5,157,0,0,2069,
  	2068,1,0,0,0,2069,2070,1,0,0,0,2070,2071,1,0,0,0,2071,2073,3,276,138,
  	0,2072,2069,1,0,0,0,2073,2076,1,0,0,0,2074,2072,1,0,0,0,2074,2075,1,0,
  	0,0,2075,247,1,0,0,0,2076,2074,1,0,0,0,2077,2087,3,250,125,0,2078,2087,
  	3,286,143,0,2079,2087,3,278,139,0,2080,2087,3,262,131,0,2081,2087,3,264,
  	132,0,2082,2087,3,270,135,0,2083,2087,3,272,136,0,2084,2087,3,274,137,
  	0,2085,2087,3,282,141,0,2086,2077,1,0,0,0,2086,2078,1,0,0,0,2086,2079,
  	1,0,0,0,2086,2080,1,0,0,0,2086,2081,1,0,0,0,2086,2082,1,0,0,0,2086,2083,
  	1,0,0,0,2086,2084,1,0,0,0,2086,2085,1,0,0,0,2087,249,1,0,0,0,2088,2095,
  	3,284,142,0,2089,2095,5,143,0,0,2090,2095,3,252,126,0,2091,2095,5,133,
  	0,0,2092,2095,3,254,127,0,2093,2095,3,258,129,0,2094,2088,1,0,0,0,2094,
  	2089,1,0,0,0,2094,2090,1,0,0,0,2094,2091,1,0,0,0,2094,2092,1,0,0,0,2094,
  	2093,1,0,0,0,2095,251,1,0,0,0,2096,2097,7,7,0,0,2097,253,1,0,0,0,2098,
  	2100,5,7,0,0,2099,2101,5,157,0,0,2100,2099,1,0,0,0,2100,2101,1,0,0,0,
  	2101,2115,1,0,0,0,2102,2104,3,202,101,0,2103,2105,5,157,0,0,2104,2103,
  	1,0,0,0,2104,2105,1,0,0,0,2105,2112,1,0,0,0,2106,2108,3,256,128,0,2107,
  	2109,5,157,0,0,2108,2107,1,0,0,0,2108,2109,1,0,0,0,2109,2111,1,0,0,0,
  	2110,2106,1,0,0,0,2111,2114,1,0,0,0,2112,2110,1,0,0,0,2112,2113,1,0,0,
  	0,2113,2116,1,0,0,0,2114,2112,1,0,0,0,2115,2102,1,0,0,0,2115,2116,1,0,
  	0,0,2116,2117,1,0,0,0,2117,2118,5,8,0,0,2118,255,1,0,0,0,2119,2121,5,
  	3,0,0,2120,2122,5,157,0,0,2121,2120,1,0,0,0,2121,2122,1,0,0,0,2122,2124,
  	1,0,0,0,2123,2125,3,202,101,0,2124,2123,1,0,0,0,2124,2125,1,0,0,0,2125,
  	257,1,0,0,0,2126,2128,5,9,0,0,2127,2129,5,157,0,0,2128,2127,1,0,0,0,2128,
  	2129,1,0,0,0,2129,2130,1,0,0,0,2130,2132,3,260,130,0,2131,2133,5,157,
  	0,0,2132,2131,1,0,0,0,2132,2133,1,0,0,0,2133,2144,1,0,0,0,2134,2136,5,
  	3,0,0,2135,2137,5,157,0,0,2136,2135,1,0,0,0,2136,2137,1,0,0,0,2137,2138,
  	1,0,0,0,2138,2140,3,260,130,0,2139,2141,5,157,0,0,2140,2139,1,0,0,0,2140,
  	2141,1,0,0,0,2141,2143,1,0,0,0,2142,2134,1,0,0,0,2143,2146,1,0,0,0,2144,
  	2142,1,0,0,0,2144,2145,1,0,0,0,2145,2147,1,0,0,0,2146,2144,1,0,0,0,2147,
  	2148,5,10,0,0,2148,259,1,0,0,0,2149,2152,3,298,149,0,2150,2152,5,143,
  	0,0,2151,2149,1,0,0,0,2151,2150,1,0,0,0,2152,2154,1,0,0,0,2153,2155,5,
  	157,0,0,2154,2153,1,0,0,0,2154,2155,1,0,0,0,2155,2156,1,0,0,0,2156,2158,
  	5,127,0,0,2157,2159,5,157,0,0,2158,2157,1,0,0,0,2158,2159,1,0,0,0,2159,
  	2160,1,0,0,0,2160,2161,3,202,101,0,2161,261,1,0,0,0,2162,2164,5,2,0,0,
  	2163,2165,5,157,0,0,2164,2163,1,0,0,0,2164,2165,1,0,0,0,2165,2166,1,0,
  	0,0,2166,2168,3,202,101,0,2167,2169,5,157,0,0,2168,2167,1,0,0,0,2168,
  	2169,1,0,0,0,2169,2170,1,0,0,0,2170,2171,5,4,0,0,2171,263,1,0,0,0,2172,
  	2174,5,136,0,0,2173,2175,5,157,0,0,2174,2173,1,0,0,0,2174,2175,1,0,0,
  	0,2175,2176,1,0,0,0,2176,2178,5,2,0,0,2177,2179,5,157,0,0,2178,2177,1,
  	0,0,0,2178,2179,1,0,0,0,2179,2180,1,0,0,0,2180,2182,5,108,0,0,2181,2183,
  	5,157,0,0,2182,2181,1,0,0,0,2182,2183,1,0,0,0,2183,2184,1,0,0,0,2184,
  	2221,5,4,0,0,2185,2187,3,266,133,0,2186,2188,5,157,0,0,2187,2186,1,0,
  	0,0,2187,2188,1,0,0,0,2188,2189,1,0,0,0,2189,2191,5,2,0,0,2190,2192,5,
  	157,0,0,2191,2190,1,0,0,0,2191,2192,1,0,0,0,2192,2197,1,0,0,0,2193,2195,
  	5,107,0,0,2194,2196,5,157,0,0,2195,2194,1,0,0,0,2195,2196,1,0,0,0,2196,
  	2198,1,0,0,0,2197,2193,1,0,0,0,2197,2198,1,0,0,0,2198,2216,1,0,0,0,2199,
  	2201,3,268,134,0,2200,2202,5,157,0,0,2201,2200,1,0,0,0,2201,2202,1,0,
  	0,0,2202,2213,1,0,0,0,2203,2205,5,3,0,0,2204,2206,5,157,0,0,2205,2204,
  	1,0,0,0,2205,2206,1,0,0,0,2206,2207,1,0,0,0,2207,2209,3,268,134,0,2208,
  	2210,5,157,0,0,2209,2208,1,0,0,0,2209,2210,1,0,0,0,2210,2212,1,0,0,0,
  	2211,2203,1,0,0,0,2212,2215,1,0,0,0,2213,2211,1,0,0,0,2213,2214,1,0,0,
  	0,2214,2217,1,0,0,0,2215,2213,1,0,0,0,2216,2199,1,0,0,0,2216,2217,1,0,
  	0,0,2217,2218,1,0,0,0,2218,2219,5,4,0,0,2219,2221,1,0,0,0,2220,2172,1,
  	0,0,0,2220,2185,1,0,0,0,2221,265,1,0,0,0,2222,2223,3,298,149,0,2223,267,
  	1,0,0,0,2224,2226,3,298,149,0,2225,2227,5,157,0,0,2226,2225,1,0,0,0,2226,
  	2227,1,0,0,0,2227,2228,1,0,0,0,2228,2229,5,127,0,0,2229,2231,5,6,0,0,
  	2230,2232,5,157,0,0,2231,2230,1,0,0,0,2231,2232,1,0,0,0,2232,2234,1,0,
  	0,0,2233,2224,1,0,0,0,2233,2234,1,0,0,0,2234,2235,1,0,0,0,2235,2236,3,
  	202,101,0,2236,269,1,0,0,0,2237,2242,3,170,85,0,2238,2240,5,157,0,0,2239,
  	2238,1,0,0,0,2239,2240,1,0,0,0,2240,2241,1,0,0,0,2241,2243,3,172,86,0,
  	2242,2239,1,0,0,0,2243,2244,1,0,0,0,2244,2242,1,0,0,0,2244,2245,1,0,0,
  	0,2245,271,1,0,0,0,2246,2248,5,137,0,0,2247,2249,5,157,0,0,2248,2247,
  	1,0,0,0,2248,2249,1,0,0,0,2249,2250,1,0,0,0,2250,2252,5,9,0,0,2251,2253,
  	5,157,0,0,2252,2251,1,0,0,0,2252,2253,1,0,0,0,2253,2254,1,0,0,0,2254,
  	2256,5,97,0,0,2255,2257,5,157,0,0,2256,2255,1,0,0,0,2256,2257,1,0,0,0,
  	2257,2258,1,0,0,0,2258,2263,3,162,81,0,2259,2261,5,157,0,0,2260,2259,
  	1,0,0,0,2260,2261,1,0,0,0,2261,2262,1,0,0,0,2262,2264,3,160,80,0,2263,
  	2260,1,0,0,0,2263,2264,1,0,0,0,2264,2266,1,0,0,0,2265,2267,5,157,0,0,
  	2266,2265,1,0,0,0,2266,2267,1,0,0,0,2267,2268,1,0,0,0,2268,2269,5,10,
  	0,0,2269,273,1,0,0,0,2270,2272,5,136,0,0,2271,2273,5,157,0,0,2272,2271,
  	1,0,0,0,2272,2273,1,0,0,0,2273,2274,1,0,0,0,2274,2276,5,9,0,0,2275,2277,
  	5,157,0,0,2276,2275,1,0,0,0,2276,2277,1,0,0,0,2277,2278,1,0,0,0,2278,
  	2280,5,97,0,0,2279,2281,5,157,0,0,2280,2279,1,0,0,0,2280,2281,1,0,0,0,
  	2281,2282,1,0,0,0,2282,2287,3,162,81,0,2283,2285,5,157,0,0,2284,2283,
  	1,0,0,0,2284,2285,1,0,0,0,2285,2286,1,0,0,0,2286,2288,3,160,80,0,2287,
  	2284,1,0,0,0,2287,2288,1,0,0,0,2288,2290,1,0,0,0,2289,2291,5,157,0,0,
  	2290,2289,1,0,0,0,2290,2291,1,0,0,0,2291,2292,1,0,0,0,2292,2293,5,10,
  	0,0,2293,275,1,0,0,0,2294,2296,5,5,0,0,2295,2297,5,157,0,0,2296,2295,
  	1,0,0,0,2296,2297,1,0,0,0,2297,2300,1,0,0,0,2298,2301,3,290,145,0,2299,
  	2301,5,108,0,0,2300,2298,1,0,0,0,2300,2299,1,0,0,0,2301,277,1,0,0,0,2302,
  	2307,5,138,0,0,2303,2305,5,157,0,0,2304,2303,1,0,0,0,2304,2305,1,0,0,
  	0,2305,2306,1,0,0,0,2306,2308,3,280,140,0,2307,2304,1,0,0,0,2308,2309,
  	1,0,0,0,2309,2307,1,0,0,0,2309,2310,1,0,0,0,2310,2325,1,0,0,0,2311,2313,
  	5,138,0,0,2312,2314,5,157,0,0,2313,2312,1,0,0,0,2313,2314,1,0,0,0,2314,
  	2315,1,0,0,0,2315,2320,3,202,101,0,2316,2318,5,157,0,0,2317,2316,1,0,
  	0,0,2317,2318,1,0,0,0,2318,2319,1,0,0,0,2319,2321,3,280,140,0,2320,2317,
  	1,0,0,0,2321,2322,1,0,0,0,2322,2320,1,0,0,0,2322,2323,1,0,0,0,2323,2325,
  	1,0,0,0,2324,2302,1,0,0,0,2324,2311,1,0,0,0,2325,2334,1,0,0,0,2326,2328,
  	5,157,0,0,2327,2326,1,0,0,0,2327,2328,1,0,0,0,2328,2329,1,0,0,0,2329,
  	2331,5,139,0,0,2330,2332,5,157,0,0,2331,2330,1,0,0,0,2331,2332,1,0,0,
  	0,2332,2333,1,0,0,0,2333,2335,3,202,101,0,2334,2327,1,0,0,0,2334,2335,
  	1,0,0,0,2335,2337,1,0,0,0,2336,2338,5,157,0,0,2337,2336,1,0,0,0,2337,
  	2338,1,0,0,0,2338,2339,1,0,0,0,2339,2340,5,140,0,0,2340,279,1,0,0,0,2341,
  	2343,5,141,0,0,2342,2344,5,157,0,0,2343,2342,1,0,0,0,2343,2344,1,0,0,
  	0,2344,2345,1,0,0,0,2345,2347,3,202,101,0,2346,2348,5,157,0,0,2347,2346,
  	1,0,0,0,2347,2348,1,0,0,0,2348,2349,1,0,0,0,2349,2351,5,142,0,0,2350,
  	2352,5,157,0,0,2351,2350,1,0,0,0,2351,2352,1,0,0,0,2352,2353,1,0,0,0,
  	2353,2354,3,202,101,0,2354,281,1,0,0,0,2355,2356,3,298,149,0,2356,283,
  	1,0,0,0,2357,2360,3,294,147,0,2358,2360,3,292,146,0,2359,2357,1,0,0,0,
  	2359,2358,1,0,0,0,2360,285,1,0,0,0,2361,2364,5,26,0,0,2362,2365,3,298,
  	149,0,2363,2365,5,145,0,0,2364,2362,1,0,0,0,2364,2363,1,0,0,0,2365,287,
  	1,0,0,0,2366,2368,3,248,124,0,2367,2369,5,157,0,0,2368,2367,1,0,0,0,2368,
  	2369,1,0,0,0,2369,2370,1,0,0,0,2370,2371,3,276,138,0,2371,289,1,0,0,0,
  	2372,2373,3,296,148,0,2373,291,1,0,0,0,2374,2375,5,145,0,0,2375,293,1,
  	0,0,0,2376,2377,5,152,0,0,2377,295,1,0,0,0,2378,2379,3,298,149,0,2379,
  	297,1,0,0,0,2380,2386,5,153,0,0,2381,2382,5,156,0,0,2382,2386,6,149,-1,
  	0,2383,2386,5,146,0,0,2384,2386,3,300,150,0,2385,2380,1,0,0,0,2385,2381,
  	1,0,0,0,2385,2383,1,0,0,0,2385,2384,1,0,0,0,2386,299,1,0,0,0,2387,2388,
  	7,8,0,0,2388,301,1,0,0,0,2389,2390,7,9,0,0,2390,303,1,0,0,0,2391,2392,
  	7,10,0,0,2392,305,1,0,0,0,2393,2394,7,11,0,0,2394,307,1,0,0,0,406,310,
  	314,319,323,328,331,335,338,361,367,371,374,380,383,387,391,395,400,404,
  	411,415,423,427,437,441,445,450,463,467,475,478,486,489,506,509,513,519,
  	522,536,540,562,566,569,572,575,578,582,587,591,601,605,610,615,620,626,
  	630,634,639,646,650,654,657,661,665,669,674,678,684,688,700,704,708,712,
  	717,729,733,737,741,745,747,751,755,757,771,775,779,783,788,791,795,799,
  	801,805,809,811,837,844,850,862,868,890,901,923,927,932,943,947,951,959,
  	963,967,973,977,981,987,991,995,999,1003,1007,1013,1020,1025,1031,1051,
  	1055,1063,1073,1078,1083,1087,1092,1098,1103,1106,1110,1114,1118,1124,
  	1128,1133,1138,1142,1145,1149,1153,1157,1161,1165,1171,1175,1180,1184,
  	1193,1199,1207,1211,1215,1219,1226,1229,1232,1235,1241,1244,1248,1252,
  	1256,1259,1263,1273,1279,1286,1299,1303,1307,1311,1316,1321,1325,1331,
  	1335,1339,1343,1348,1354,1357,1363,1366,1372,1376,1380,1384,1388,1393,
  	1398,1402,1407,1410,1419,1428,1433,1446,1449,1457,1461,1466,1471,1475,
  	1480,1486,1491,1498,1502,1506,1508,1512,1514,1518,1520,1526,1532,1536,
  	1539,1542,1548,1551,1554,1558,1564,1567,1570,1574,1578,1582,1584,1588,
  	1590,1594,1596,1600,1602,1608,1612,1616,1620,1624,1628,1632,1636,1640,
  	1643,1649,1653,1657,1660,1665,1670,1675,1680,1686,1692,1695,1698,1701,
  	1705,1708,1711,1714,1717,1721,1725,1729,1733,1737,1740,1743,1747,1751,
  	1755,1759,1761,1767,1770,1773,1779,1782,1785,1806,1816,1826,1831,1835,
  	1842,1846,1850,1854,1858,1866,1870,1874,1878,1884,1888,1894,1898,1903,
  	1908,1912,1917,1922,1926,1932,1939,1943,1949,1956,1960,1966,1973,1977,
  	1982,1987,1991,1996,1999,2006,2009,2014,2023,2027,2030,2043,2046,2051,
  	2065,2069,2074,2086,2094,2100,2104,2108,2112,2115,2121,2124,2128,2132,
  	2136,2140,2144,2151,2154,2158,2164,2168,2174,2178,2182,2187,2191,2195,
  	2197,2201,2205,2209,2213,2216,2220,2226,2231,2233,2239,2244,2248,2252,
  	2256,2260,2263,2266,2272,2276,2280,2284,2287,2290,2296,2300,2304,2309,
  	2313,2317,2322,2324,2327,2331,2334,2337,2343,2347,2351,2359,2364,2368,
  	2385
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  	7,152,2,153,7,153,2,154,7,154,1,0,1,0,3,0,313,8,0,1,0,1,0,3,0,317,8,0,
  	1,0,5,0,320,8,0,10,0,12,0,323,9,0,1,0,3,0,326,8,0,1,0,1,0,1,1,3,1,331,
  	8,1,1,1,3,1,334,8,1,1,1,1,1,3,1,338,8,1,1,1,3,1,341,8,1,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
  	3,2,364,8,2,1,3,1,3,1,3,1,3,3,3,370,8,3,1,3,1,3,3,3,374,8,3,1,3,3,3,377,
  	8,3,1,3,1,3,1,3,1,3,3,3,383,8,3,1,3,3,3,386,8,3,1,4,1,4,3,4,390,8,4,1,
  	4,1,4,3,4,394,8,4,1,4,1,4,3,4,398,8,4,1,4,5,4,401,8,4,10,4,12,4,404,9,
  	4,1,4,3,4,407,8,4,1,4,1,4,1,5,1,5,1,5,3,5,414,8,5,1,5,1,5,3,5,418,8,5,
  	1,5,1,5,1,5,1,5,1,5,1,5,3,5,426,8,5,1,5,1,5,3,5,430,8,5,1,6,1,6,1,6,1,
  	6,1,6,1,6,1,6,1,6,3,6,440,8,6,1,6,1,6,3,6,444,8,6,1,6,1,6,3,6,448,8,6,
  	1,6,5,6,451,8,6,10,6,12,6,454,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
  	1,7,3,7,466,8,7,1,7,1,7,3,7,470,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,478,8,
  	7,1,7,3,7,481,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,489,8,8,1,8,3,8,492,8,8,
  	1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
  	3,10,509,8,10,1,10,3,10,512,8,10,1,10,1,10,3,10,516,8,10,1,10,1,10,1,
  	10,1,10,3,10,522,8,10,1,10,3,10,525,8,10,1,11,1,11,1,11,1,11,1,12,1,12,
  	1,12,1,12,1,13,1,13,1,13,1,13,3,13,539,8,13,1,13,1,13,3,13,543,8,13,1,
  	13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
  	15,1,15,1,15,1,15,1,15,1,15,3,15,565,8,15,1,15,1,15,3,15,569,8,15,1,15,
  	3,15,572,8,15,1,15,3,15,575,8,15,1,15,3,15,578,8,15,1,15,3,15,581,8,15,
  	1,15,1,15,3,15,585,8,15,1,15,5,15,588,8,15,10,15,12,15,591,9,15,1,15,
  	3,15,594,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,3,16,604,8,16,1,
  	16,1,16,3,16,608,8,16,1,16,5,16,611,8,16,10,16,12,16,614,9,16,1,17,1,
  	17,3,17,618,8,17,1,17,1,17,1,17,3,17,623,8,17,1,17,1,17,1,18,1,18,3,18,
  	629,8,18,1,18,1,18,3,18,633,8,18,1,18,1,18,3,18,637,8,18,1,18,5,18,640,
  	8,18,10,18,12,18,643,9,18,1,18,1,18,1,18,1,18,3,18,649,8,18,1,18,1,18,
  	3,18,653,8,18,1,18,1,18,3,18,657,8,18,1,18,3,18,660,8,18,1,19,1,19,3,
  	19,664,8,19,1,19,1,19,3,19,668,8,19,1,19,1,19,3,19,672,8,19,1,19,5,19,
  	675,8,19,10,19,12,19,678,9,19,1,19,3,19,681,8,19,1,19,1,19,1,20,1,20,
  	3,20,687,8,20,1,20,1,20,3,20,691,8,20,1,20,1,20,1,21,1,21,1,21,1,21,1,
  	21,1,21,1,21,1,21,3,21,703,8,21,1,21,1,21,3,21,707,8,21,1,21,1,21,3,21,
  	711,8,21,1,21,1,21,3,21,715,8,21,1,21,1,21,1,21,3,21,720,8,21,1,21,1,
  	21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,732,8,22,1,22,1,22,3,
  	22,736,8,22,1,22,1,22,3,22,740,8,22,1,22,1,22,3,22,744,8,22,1,22,1,22,
  	3,22,748,8,22,3,22,750,8,22,1,22,1,22,3,22,754,8,22,1,22,1,22,3,22,758,
  	8,22,3,22,760,8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,3,23,774,8,23,1,23,1,23,3,23,778,8,23,1,23,1,23,3,23,782,8,
  	23,1,23,1,23,3,23,786,8,23,1,23,4,23,789,8,23,11,23,12,23,790,1,23,3,
  	23,794,8,23,1,23,1,23,3,23,798,8,23,1,23,1,23,3,23,802,8,23,3,23,804,
  	8,23,1,23,1,23,3,23,808,8,23,1,23,1,23,3,23,812,8,23,3,23,814,8,23,1,
  	23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,
  	25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,839,8,26,10,26,12,26,
  	842,9,26,1,27,1,27,1,27,1,27,1,27,3,27,849,8,27,1,28,1,28,1,28,1,28,3,
  	28,855,8,28,1,28,3,28,858,8,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,
  	3,29,868,8,29,1,29,3,29,871,8,29,1,30,1,30,1,30,1,30,1,30,1,30,3,30,879,
  	8,30,1,30,3,30,882,8,30,1,31,1,31,1,31,1,31,3,31,888,8,31,1,31,3,31,891,
  	8,31,1,31,1,31,1,32,1,32,3,32,897,8,32,1,32,1,32,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,
  	3,35,919,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,930,8,
  	36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,
  	39,1,39,1,39,1,39,1,39,1,40,1,40,3,40,952,8,40,1,40,1,40,3,40,956,8,40,
  	1,40,5,40,959,8,40,10,40,12,40,962,9,40,1,41,1,41,1,41,1,41,1,42,1,42,
  	1,42,1,42,3,42,972,8,42,1,42,1,42,3,42,976,8,42,1,42,1,42,3,42,980,8,
  	42,1,42,1,42,1,43,1,43,1,43,1,43,3,43,988,8,43,1,43,1,43,3,43,992,8,43,
  	1,43,1,43,3,43,996,8,43,1,43,1,43,1,43,1,43,3,43,1002,8,43,1,43,1,43,
  	3,43,1006,8,43,1,43,1,43,3,43,1010,8,43,1,43,1,43,1,43,1,43,3,43,1016,
  	8,43,1,43,1,43,3,43,1020,8,43,1,43,1,43,3,43,1024,8,43,1,43,1,43,3,43,
  	1028,8,43,1,43,1,43,3,43,1032,8,43,1,43,1,43,3,43,1036,8,43,1,43,1,43,
  	5,43,1040,8,43,10,43,12,43,1043,9,43,1,44,1,44,5,44,1047,8,44,10,44,12,
  	44,1050,9,44,1,45,1,45,3,45,1054,8,45,1,45,1,45,1,46,1,46,3,46,1060,8,
  	46,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
  	49,1,49,1,49,1,49,1,49,3,49,1080,8,49,1,50,1,50,3,50,1084,8,50,1,51,1,
  	51,1,51,1,51,1,51,1,51,3,51,1092,8,51,1,52,1,52,1,52,1,52,1,53,1,53,1,
  	54,1,54,3,54,1102,8,54,1,54,5,54,1105,8,54,10,54,12,54,1108,9,54,1,54,
  	1,54,3,54,1112,8,54,4,54,1114,8,54,11,54,12,54,1115,1,54,1,54,1,54,3,
  	54,1121,8,54,1,55,1,55,1,55,1,55,3,55,1127,8,55,1,55,1,55,1,55,3,55,1132,
  	8,55,1,55,3,55,1135,8,55,1,56,1,56,3,56,1139,8,56,1,57,1,57,3,57,1143,
  	8,57,5,57,1145,8,57,10,57,12,57,1148,9,57,1,57,1,57,1,57,3,57,1153,8,
  	57,5,57,1155,8,57,10,57,12,57,1158,9,57,1,57,1,57,3,57,1162,8,57,1,57,
  	5,57,1165,8,57,10,57,12,57,1168,9,57,1,57,3,57,1171,8,57,1,57,3,57,1174,
  	8,57,1,57,1,57,3,57,1178,8,57,4,57,1180,8,57,11,57,12,57,1181,1,57,1,
  	57,3,57,1186,8,57,1,58,1,58,3,58,1190,8,58,4,58,1192,8,58,11,58,12,58,
  	1193,1,58,1,58,1,59,1,59,3,59,1200,8,59,5,59,1202,8,59,10,59,12,59,1205,
  	9,59,1,59,1,59,3,59,1209,8,59,5,59,1211,8,59,10,59,12,59,1214,9,59,1,
  	59,1,59,1,60,1,60,1,60,1,60,3,60,1222,8,60,1,61,1,61,1,61,1,61,3,61,1228,
  	8,61,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1236,8,62,1,62,1,62,3,62,1240,
  	8,62,1,62,1,62,3,62,1244,8,62,1,62,1,62,3,62,1248,8,62,1,62,1,62,1,62,
  	1,62,1,62,3,62,1255,8,62,1,62,3,62,1258,8,62,1,62,3,62,1261,8,62,1,62,
  	3,62,1264,8,62,1,63,1,63,1,63,1,63,3,63,1270,8,63,1,63,3,63,1273,8,63,
  	1,64,1,64,3,64,1277,8,64,1,64,1,64,3,64,1281,8,64,1,64,1,64,3,64,1285,
  	8,64,1,64,3,64,1288,8,64,1,65,1,65,3,65,1292,8,65,1,65,1,65,1,65,1,65,
  	1,65,1,65,1,66,1,66,3,66,1302,8,66,1,66,1,66,1,67,1,67,3,67,1308,8,67,
  	1,67,1,67,1,67,5,67,1313,8,67,10,67,12,67,1316,9,67,1,68,1,68,1,68,1,
  	68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1328,8,68,1,69,1,69,3,69,1332,8,
  	69,1,69,1,69,3,69,1336,8,69,1,69,1,69,3,69,1340,8,69,1,69,5,69,1343,8,
  	69,10,69,12,69,1346,9,69,1,70,1,70,3,70,1350,8,70,1,70,1,70,3,70,1354,
  	8,70,1,70,1,70,1,71,1,71,3,71,1360,8,71,1,71,1,71,3,71,1364,8,71,1,71,
  	1,71,3,71,1368,8,71,1,71,1,71,3,71,1372,8,71,1,71,5,71,1375,8,71,10,71,
  	12,71,1378,9,71,1,72,1,72,1,72,3,72,1383,8,72,1,72,3,72,1386,8,72,1,73,
  	1,73,1,73,1,74,3,74,1392,8,74,1,74,3,74,1395,8,74,1,74,1,74,1,74,1,74,
  	3,74,1401,8,74,1,74,1,74,3,74,1405,8,74,1,74,1,74,3,74,1409,8,74,1,75,
  	1,75,3,75,1413,8,75,1,75,1,75,3,75,1417,8,75,1,75,5,75,1420,8,75,10,75,
  	12,75,1423,9,75,1,75,1,75,3,75,1427,8,75,1,75,1,75,3,75,1431,8,75,1,75,
  	5,75,1434,8,75,10,75,12,75,1437,9,75,3,75,1439,8,75,1,76,1,76,1,76,1,
  	76,1,76,1,76,1,76,3,76,1448,8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,
  	77,1457,8,77,1,77,5,77,1460,8,77,10,77,12,77,1463,9,77,1,78,1,78,1,78,
  	1,78,1,79,1,79,1,79,1,79,1,80,1,80,3,80,1475,8,80,1,80,3,80,1478,8,80,
  	1,81,1,81,1,81,1,81,1,82,1,82,3,82,1486,8,82,1,82,1,82,3,82,1490,8,82,
  	1,82,5,82,1493,8,82,10,82,12,82,1496,9,82,1,83,1,83,3,83,1500,8,83,1,
  	83,1,83,3,83,1504,8,83,1,83,1,83,1,83,3,83,1509,8,83,1,84,1,84,1,85,1,
  	85,3,85,1515,8,85,1,85,5,85,1518,8,85,10,85,12,85,1521,9,85,1,85,1,85,
  	1,85,1,85,3,85,1527,8,85,1,86,1,86,3,86,1531,8,86,1,86,1,86,3,86,1535,
  	8,86,3,86,1537,8,86,1,86,1,86,3,86,1541,8,86,3,86,1543,8,86,1,86,1,86,
  	3,86,1547,8,86,3,86,1549,8,86,1,86,1,86,1,87,1,87,3,87,1555,8,87,1,87,
  	1,87,1,88,1,88,3,88,1561,8,88,1,88,1,88,3,88,1565,8,88,1,88,3,88,1568,
  	8,88,1,88,3,88,1571,8,88,1,88,1,88,1,88,1,88,3,88,1577,8,88,1,88,3,88,
  	1580,8,88,1,88,3,88,1583,8,88,1,88,1,88,3,88,1587,8,88,1,88,1,88,1,88,
  	1,88,3,88,1593,8,88,1,88,3,88,1596,8,88,1,88,3,88,1599,8,88,1,88,1,88,
  	3,88,1603,8,88,1,89,1,89,3,89,1607,8,89,1,89,1,89,3,89,1611,8,89,3,89,
  	1613,8,89,1,89,1,89,3,89,1617,8,89,3,89,1619,8,89,1,89,1,89,3,89,1623,
  	8,89,3,89,1625,8,89,1,89,1,89,3,89,1629,8,89,3,89,1631,8,89,1,89,1,89,
  	1,90,1,90,3,90,1637,8,90,1,90,1,90,3,90,1641,8,90,1,90,1,90,3,90,1645,
  	8,90,1,90,1,90,3,90,1649,8,90,1,90,1,90,3,90,1653,8,90,1,90,1,90,3,90,
  	1657,8,90,1,90,1,90,3,90,1661,8,90,1,90,1,90,3,90,1665,8,90,5,90,1667,
  	8,90,10,90,12,90,1670,9,90,3,90,1672,8,90,1,90,1,90,1,91,1,91,3,91,1678,
  	8,91,1,91,1,91,3,91,1682,8,91,1,91,1,91,3,91,1686,8,91,1,91,3,91,1689,
  	8,91,1,91,5,91,1692,8,91,10,91,12,91,1695,9,91,1,92,1,92,3,92,1699,8,
  	92,1,92,5,92,1702,8,92,10,92,12,92,1705,9,92,1,93,1,93,3,93,1709,8,93,
  	1,93,1,93,1,94,1,94,3,94,1715,8,94,1,94,1,94,1,94,1,94,3,94,1721,8,94,
  	1,94,3,94,1724,8,94,1,94,3,94,1727,8,94,1,94,3,94,1730,8,94,1,94,1,94,
  	3,94,1734,8,94,1,94,3,94,1737,8,94,1,94,3,94,1740,8,94,1,94,3,94,1743,
  	8,94,1,94,3,94,1746,8,94,1,95,1,95,3,95,1750,8,95,1,95,1,95,3,95,1754,
  	8,95,1,95,1,95,3,95,1758,8,95,1,95,1,95,3,95,1762,8,95,1,95,1,95,3,95,
  	1766,8,95,1,95,3,95,1769,8,95,1,95,3,95,1772,8,95,1,95,1,95,3,95,1776,
  	8,95,1,95,1,95,3,95,1780,8,95,1,95,1,95,3,95,1784,8,95,1,95,1,95,3,95,
  	1788,8,95,3,95,1790,8,95,1,95,1,95,1,96,1,96,3,96,1796,8,96,1,96,3,96,
  	1799,8,96,1,96,3,96,1802,8,96,1,96,1,96,1,97,1,97,3,97,1808,8,97,1,97,
  	3,97,1811,8,97,1,97,3,97,1814,8,97,1,97,1,97,1,98,1,98,1,99,1,99,1,100,
  	1,100,1,101,1,101,1,102,1,102,1,103,1,103,1,103,1,103,1,103,5,103,1833,
  	8,103,10,103,12,103,1836,9,103,1,104,1,104,1,104,1,104,1,104,5,104,1843,
  	8,104,10,104,12,104,1846,9,104,1,105,1,105,1,105,1,105,1,105,5,105,1853,
  	8,105,10,105,12,105,1856,9,105,1,106,1,106,3,106,1860,8,106,5,106,1862,
  	8,106,10,106,12,106,1865,9,106,1,106,1,106,1,107,1,107,3,107,1871,8,107,
  	1,107,1,107,3,107,1875,8,107,1,107,1,107,3,107,1879,8,107,1,107,1,107,
  	3,107,1883,8,107,1,107,1,107,3,107,1887,8,107,1,107,1,107,1,107,1,107,
  	1,107,1,107,3,107,1895,8,107,1,107,1,107,3,107,1899,8,107,1,107,1,107,
  	3,107,1903,8,107,1,107,1,107,3,107,1907,8,107,1,107,1,107,4,107,1911,
  	8,107,11,107,12,107,1912,1,107,1,107,3,107,1917,8,107,1,108,1,108,1,109,
  	1,109,3,109,1923,8,109,1,109,1,109,3,109,1927,8,109,1,109,5,109,1930,
  	8,109,10,109,12,109,1933,9,109,1,110,1,110,3,110,1937,8,110,1,110,1,110,
  	3,110,1941,8,110,1,110,5,110,1944,8,110,10,110,12,110,1947,9,110,1,111,
  	1,111,3,111,1951,8,111,1,111,1,111,3,111,1955,8,111,1,111,1,111,5,111,
  	1959,8,111,10,111,12,111,1962,9,111,1,112,1,112,1,113,1,113,3,113,1968,
  	8,113,1,113,1,113,3,113,1972,8,113,1,113,1,113,5,113,1976,8,113,10,113,
  	12,113,1979,9,113,1,114,1,114,1,115,1,115,3,115,1985,8,115,1,115,1,115,
  	3,115,1989,8,115,1,115,1,115,5,115,1993,8,115,10,115,12,115,1996,9,115,
  	1,116,1,116,1,117,1,117,3,117,2002,8,117,1,117,1,117,3,117,2006,8,117,
  	1,117,5,117,2009,8,117,10,117,12,117,2012,9,117,1,118,1,118,3,118,2016,
  	8,118,5,118,2018,8,118,10,118,12,118,2021,9,118,1,118,1,118,3,118,2025,
  	8,118,1,118,3,118,2028,8,118,1,119,1,119,1,119,4,119,2033,8,119,11,119,
  	12,119,2034,1,119,3,119,2038,8,119,1,120,1,120,1,120,3,120,2043,8,120,
  	1,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,2052,8,120,1,120,1,120,
  	3,120,2056,8,120,1,120,3,120,2059,8,120,1,121,1,121,1,121,1,121,1,121,
  	1,121,1,121,1,121,1,121,1,121,1,121,3,121,2072,8,121,1,121,3,121,2075,
  	8,121,1,121,1,121,1,122,3,122,2080,8,122,1,122,1,122,1,123,1,123,1,123,
  	1,123,1,123,1,123,1,123,1,123,1,123,1,123,3,123,2094,8,123,1,124,1,124,
  	3,124,2098,8,124,1,124,5,124,2101,8,124,10,124,12,124,2104,9,124,1,125,
  	1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,2115,8,125,1,126,
  	1,126,1,126,1,126,1,126,1,126,3,126,2123,8,126,1,127,1,127,1,128,1,128,
  	3,128,2129,8,128,1,128,1,128,3,128,2133,8,128,1,128,1,128,3,128,2137,
  	8,128,5,128,2139,8,128,10,128,12,128,2142,9,128,3,128,2144,8,128,1,128,
  	1,128,1,129,1,129,3,129,2150,8,129,1,129,3,129,2153,8,129,1,130,1,130,
  	3,130,2157,8,130,1,130,1,130,3,130,2161,8,130,1,130,1,130,3,130,2165,
  	8,130,1,130,1,130,3,130,2169,8,130,5,130,2171,8,130,10,130,12,130,2174,
  	9,130,1,130,1,130,1,131,1,131,3,131,2180,8,131,1,131,3,131,2183,8,131,
  	1,131,1,131,3,131,2187,8,131,1,131,1,131,1,132,1,132,3,132,2193,8,132,
  	1,132,1,132,3,132,2197,8,132,1,132,1,132,1,133,1,133,3,133,2203,8,133,
  	1,133,1,133,3,133,2207,8,133,1,133,1,133,3,133,2211,8,133,1,133,1,133,
  	1,133,3,133,2216,8,133,1,133,1,133,3,133,2220,8,133,1,133,1,133,3,133,
  	2224,8,133,3,133,2226,8,133,1,133,1,133,3,133,2230,8,133,1,133,1,133,
  	3,133,2234,8,133,1,133,1,133,3,133,2238,8,133,5,133,2240,8,133,10,133,
  	12,133,2243,9,133,3,133,2245,8,133,1,133,1,133,3,133,2249,8,133,1,134,
  	1,134,1,135,1,135,3,135,2255,8,135,1,135,1,135,1,135,3,135,2260,8,135,
  	3,135,2262,8,135,1,135,1,135,1,136,1,136,3,136,2268,8,136,1,136,4,136,
  	2271,8,136,11,136,12,136,2272,1,137,1,137,3,137,2277,8,137,1,137,1,137,
  	3,137,2281,8,137,1,137,1,137,3,137,2285,8,137,1,137,1,137,3,137,2289,
  	8,137,1,137,3,137,2292,8,137,1,137,3,137,2295,8,137,1,137,1,137,1,138,
  	1,138,3,138,2301,8,138,1,138,1,138,3,138,2305,8,138,1,138,1,138,3,138,
  	2309,8,138,1,138,1,138,3,138,2313,8,138,1,138,3,138,2316,8,138,1,138,
  	3,138,2319,8,138,1,138,1,138,1,139,1,139,3,139,2325,8,139,1,139,1,139,
  	3,139,2329,8,139,1,140,1,140,3,140,2333,8,140,1,140,4,140,2336,8,140,
  	11,140,12,140,2337,1,140,1,140,3,140,2342,8,140,1,140,1,140,3,140,2346,
  	8,140,1,140,4,140,2349,8,140,11,140,12,140,2350,3,140,2353,8,140,1,140,
  	3,140,2356,8,140,1,140,1,140,3,140,2360,8,140,1,140,3,140,2363,8,140,
  	1,140,3,140,2366,8,140,1,140,1,140,1,141,1,141,3,141,2372,8,141,1,141,
  	1,141,3,141,2376,8,141,1,141,1,141,3,141,2380,8,141,1,141,1,141,1,142,
  	1,142,1,143,1,143,3,143,2388,8,143,1,144,1,144,1,144,3,144,2393,8,144,
  	1,145,1,145,3,145,2397,8,145,1,145,1,145,1,146,1,146,1,147,1,147,1,148,
  	1,148,1,149,1,149,1,150,1,150,1,150,1,150,1,150,3,150,2414,8,150,1,151,
  	1,151,1,152,1,152,1,153,1,153,1,154,1,154,1,154,0,1,86,155,0,2,4,6,8,
  	10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
  	56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
  	102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
  	138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
  	174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
  	210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,
  	246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
  	282,284,286,288,290,292,294,296,298,300,302,304,306,308,0,11,2,0,60,60,
  	62,63,1,0,114,117,2,0,6,6,13,17,1,0,19,20,2,0,21,21,125,125,2,0,22,23,
  	108,108,1,0,134,135,9,0,48,48,50,50,56,59,67,67,77,77,81,81,128,128,136,
  	136,140,140,2,0,14,14,27,30,2,0,16,16,31,34,2,0,35,45,125,125,2740,0,
  	310,1,0,0,0,2,330,1,0,0,0,4,363,1,0,0,0,6,365,1,0,0,0,8,387,1,0,0,0,10,
  	429,1,0,0,0,12,431,1,0,0,0,14,461,1,0,0,0,16,482,1,0,0,0,18,493,1,0,0,
  	0,20,499,1,0,0,0,22,526,1,0,0,0,24,530,1,0,0,0,26,534,1,0,0,0,28,546,
  	1,0,0,0,30,558,1,0,0,0,32,601,1,0,0,0,34,615,1,0,0,0,36,659,1,0,0,0,38,
  	661,1,0,0,0,40,684,1,0,0,0,42,694,1,0,0,0,44,723,1,0,0,0,46,763,1,0,0,
  	0,48,817,1,0,0,0,50,825,1,0,0,0,52,831,1,0,0,0,54,848,1,0,0,0,56,850,
  	1,0,0,0,58,870,1,0,0,0,60,881,1,0,0,0,62,883,1,0,0,0,64,896,1,0,0,0,66,
  	900,1,0,0,0,68,906,1,0,0,0,70,918,1,0,0,0,72,920,1,0,0,0,74,931,1,0,0,
  	0,76,935,1,0,0,0,78,941,1,0,0,0,80,949,1,0,0,0,82,963,1,0,0,0,84,967,
  	1,0,0,0,86,1035,1,0,0,0,88,1044,1,0,0,0,90,1051,1,0,0,0,92,1059,1,0,0,
  	0,94,1061,1,0,0,0,96,1063,1,0,0,0,98,1079,1,0,0,0,100,1083,1,0,0,0,102,
  	1085,1,0,0,0,104,1093,1,0,0,0,106,1097,1,0,0,0,108,1120,1,0,0,0,110,1134,
  	1,0,0,0,112,1138,1,0,0,0,114,1185,1,0,0,0,116,1191,1,0,0,0,118,1203,1,
  	0,0,0,120,1221,1,0,0,0,122,1227,1,0,0,0,124,1229,1,0,0,0,126,1265,1,0,
  	0,0,128,1276,1,0,0,0,130,1289,1,0,0,0,132,1299,1,0,0,0,134,1305,1,0,0,
  	0,136,1327,1,0,0,0,138,1329,1,0,0,0,140,1347,1,0,0,0,142,1359,1,0,0,0,
  	144,1379,1,0,0,0,146,1387,1,0,0,0,148,1394,1,0,0,0,150,1438,1,0,0,0,152,
  	1447,1,0,0,0,154,1449,1,0,0,0,156,1464,1,0,0,0,158,1468,1,0,0,0,160,1472,
  	1,0,0,0,162,1479,1,0,0,0,164,1483,1,0,0,0,166,1508,1,0,0,0,168,1510,1,
  	0,0,0,170,1526,1,0,0,0,172,1528,1,0,0,0,174,1552,1,0,0,0,176,1602,1,0,
  	0,0,178,1604,1,0,0,0,180,1634,1,0,0,0,182,1675,1,0,0,0,184,1696,1,0,0,
  	0,186,1706,1,0,0,0,188,1712,1,0,0,0,190,1747,1,0,0,0,192,1793,1,0,0,0,
  	194,1805,1,0,0,0,196,1817,1,0,0,0,198,1819,1,0,0,0,200,1821,1,0,0,0,202,
  	1823,1,0,0,0,204,1825,1,0,0,0,206,1827,1,0,0,0,208,1837,1,0,0,0,210,1847,
  	1,0,0,0,212,1863,1,0,0,0,214,1916,1,0,0,0,216,1918,1,0,0,0,218,1920,1,
  	0,0,0,220,1934,1,0,0,0,222,1948,1,0,0,0,224,1963,1,0,0,0,226,1965,1,0,
  	0,0,228,1980,1,0,0,0,230,1982,1,0,0,0,232,1997,1,0,0,0,234,1999,1,0,0,
  	0,236,2019,1,0,0,0,238,2029,1,0,0,0,240,2058,1,0,0,0,242,2071,1,0,0,0,
  	244,2079,1,0,0,0,246,2093,1,0,0,0,248,2095,1,0,0,0,250,2114,1,0,0,0,252,
  	2122,1,0,0,0,254,2124,1,0,0,0,256,2126,1,0,0,0,258,2147,1,0,0,0,260,2154,
  	1,0,0,0,262,2179,1,0,0,0,264,2190,1,0,0,0,266,2248,1,0,0,0,268,2250,1,
  	0,0,0,270,2261,1,0,0,0,272,2265,1,0,0,0,274,2274,1,0,0,0,276,2298,1,0,
  	0,0,278,2322,1,0,0,0,280,2352,1,0,0,0,282,2369,1,0,0,0,284,2383,1,0,0,
  	0,286,2387,1,0,0,0,288,2389,1,0,0,0,290,2394,1,0,0,0,292,2400,1,0,0,0,
  	294,2402,1,0,0,0,296,2404,1,0,0,0,298,2406,1,0,0,0,300,2413,1,0,0,0,302,
  	2415,1,0,0,0,304,2417,1,0,0,0,306,2419,1,0,0,0,308,2421,1,0,0,0,310,321,
  	3,2,1,0,311,313,5,157,0,0,312,311,1,0,0,0,312,313,1,0,0,0,313,314,1,0,
  	0,0,314,316,5,1,0,0,315,317,5,157,0,0,316,315,1,0,0,0,316,317,1,0,0,0,
  	317,318,1,0,0,0,318,320,3,2,1,0,319,312,1,0,0,0,320,323,1,0,0,0,321,319,
  	1,0,0,0,321,322,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,324,326,5,157,
  	0,0,325,324,1,0,0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,328,5,0,0,1,328,
  	1,1,0,0,0,329,331,3,92,46,0,330,329,1,0,0,0,330,331,1,0,0,0,331,333,1,
  	0,0,0,332,334,5,157,0,0,333,332,1,0,0,0,333,334,1,0,0,0,334,335,1,0,0,
  	0,335,340,3,4,2,0,336,338,5,157,0,0,337,336,1,0,0,0,337,338,1,0,0,0,338,
  	339,1,0,0,0,339,341,5,1,0,0,340,337,1,0,0,0,340,341,1,0,0,0,341,3,1,0,
  	0,0,342,364,3,106,53,0,343,364,3,42,21,0,344,364,3,44,22,0,345,364,3,
  	46,23,0,346,364,3,50,25,0,347,364,3,52,26,0,348,364,3,66,33,0,349,364,
  	3,68,34,0,350,364,3,6,3,0,351,364,3,12,6,0,352,364,3,14,7,0,353,364,3,
  	26,13,0,354,364,3,30,15,0,355,364,3,28,14,0,356,364,3,98,49,0,357,364,
  	3,100,50,0,358,364,3,16,8,0,359,364,3,18,9,0,360,364,3,20,10,0,361,364,
  	3,22,11,0,362,364,3,24,12,0,363,342,1,0,0,0,363,343,1,0,0,0,363,344,1,
  	0,0,0,363,345,1,0,0,0,363,346,1,0,0,0,363,347,1,0,0,0,363,348,1,0,0,0,
  	363,349,1,0,0,0,363,350,1,0,0,0,363,351,1,0,0,0,363,352,1,0,0,0,363,353,
  	1,0,0,0,363,354,1,0,0,0,363,355,1,0,0,0,363,356,1,0,0,0,363,357,1,0,0,
  	0,363,358,1,0,0,0,363,359,1,0,0,0,363,360,1,0,0,0,363,361,1,0,0,0,363,
  	362,1,0,0,0,364,5,1,0,0,0,365,366,5,53,0,0,366,367,5,157,0,0,367,376,
  	3,298,149,0,368,370,5,157,0,0,369,368,1,0,0,0,369,370,1,0,0,0,370,371,
  	1,0,0,0,371,373,3,8,4,0,372,374,5,157,0,0,373,372,1,0,0,0,373,374,1,0,
  	0,0,374,377,1,0,0,0,375,377,5,157,0,0,376,369,1,0,0,0,376,375,1,0,0,0,
  	377,378,1,0,0,0,378,379,5,54,0,0,379,380,5,157,0,0,380,385,3,10,5,0,381,
  	383,5,157,0,0,382,381,1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,386,
  	3,38,19,0,385,382,1,0,0,0,385,386,1,0,0,0,386,7,1,0,0,0,387,389,5,2,0,
  	0,388,390,5,157,0,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,
  	402,3,298,149,0,392,394,5,157,0,0,393,392,1,0,0,0,393,394,1,0,0,0,394,
  	395,1,0,0,0,395,397,5,3,0,0,396,398,5,157,0,0,397,396,1,0,0,0,397,398,
  	1,0,0,0,398,399,1,0,0,0,399,401,3,298,149,0,400,393,1,0,0,0,401,404,1,
  	0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,
  	405,407,5,157,0,0,406,405,1,0,0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,
  	409,5,4,0,0,409,9,1,0,0,0,410,430,3,36,18,0,411,413,5,2,0,0,412,414,5,
  	157,0,0,413,412,1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,417,3,106,
  	53,0,416,418,5,157,0,0,417,416,1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,
  	0,419,420,5,4,0,0,420,430,1,0,0,0,421,430,3,284,142,0,422,423,3,284,142,
  	0,423,425,5,5,0,0,424,426,5,157,0,0,425,424,1,0,0,0,425,426,1,0,0,0,426,
  	427,1,0,0,0,427,428,3,298,149,0,428,430,1,0,0,0,429,410,1,0,0,0,429,411,
  	1,0,0,0,429,421,1,0,0,0,429,422,1,0,0,0,430,11,1,0,0,0,431,432,5,53,0,
  	0,432,433,5,157,0,0,433,434,3,298,149,0,434,435,5,157,0,0,435,436,5,54,
  	0,0,436,437,5,157,0,0,437,439,5,2,0,0,438,440,5,157,0,0,439,438,1,0,0,
  	0,439,440,1,0,0,0,440,441,1,0,0,0,441,452,5,143,0,0,442,444,5,157,0,0,
  	443,442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,447,5,3,0,0,446,448,
  	5,157,0,0,447,446,1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,451,5,143,
  	0,0,450,443,1,0,0,0,451,454,1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,
  	455,1,0,0,0,454,452,1,0,0,0,455,456,5,4,0,0,456,457,5,157,0,0,457,458,
  	5,111,0,0,458,459,5,157,0,0,459,460,5,55,0,0,460,13,1,0,0,0,461,462,5,
  	53,0,0,462,463,5,157,0,0,463,465,5,2,0,0,464,466,5,157,0,0,465,464,1,
  	0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,469,3,106,53,0,468,470,5,157,
  	0,0,469,468,1,0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,472,5,4,0,0,472,
  	473,5,157,0,0,473,474,5,78,0,0,474,475,5,157,0,0,475,480,5,143,0,0,476,
  	478,5,157,0,0,477,476,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,481,
  	3,38,19,0,480,477,1,0,0,0,480,481,1,0,0,0,481,15,1,0,0,0,482,483,5,56,
  	0,0,483,484,5,157,0,0,484,485,5,58,0,0,485,486,5,157,0,0,486,491,5,143,
  	0,0,487,489,5,157,0,0,488,487,1,0,0,0,488,489,1,0,0,0,489,490,1,0,0,0,
  	490,492,3,38,19,0,491,488,1,0,0,0,491,492,1,0,0,0,492,17,1,0,0,0,493,
  	494,5,57,0,0,494,495,5,157,0,0,495,496,5,58,0,0,496,497,5,157,0,0,497,
  	498,5,143,0,0,498,19,1,0,0,0,499,500,5,46,0,0,500,501,5,157,0,0,501,508,
  	5,143,0,0,502,503,5,157,0,0,503,504,5,109,0,0,504,505,5,157,0,0,505,506,
  	3,298,149,0,506,507,5,157,0,0,507,509,1,0,0,0,508,502,1,0,0,0,508,509,
  	1,0,0,0,509,524,1,0,0,0,510,512,5,157,0,0,511,510,1,0,0,0,511,512,1,0,
  	0,0,512,513,1,0,0,0,513,515,5,2,0,0,514,516,5,157,0,0,515,514,1,0,0,0,
  	515,516,1,0,0,0,516,517,1,0,0,0,517,518,5,47,0,0,518,519,5,157,0,0,519,
  	521,5,143,0,0,520,522,5,157,0,0,521,520,1,0,0,0,521,522,1,0,0,0,522,523,
  	1,0,0,0,523,525,5,4,0,0,524,511,1,0,0,0,524,525,1,0,0,0,525,21,1,0,0,
  	0,526,527,5,103,0,0,527,528,5,157,0,0,528,529,3,298,149,0,529,23,1,0,
  	0,0,530,531,5,48,0,0,531,532,5,157,0,0,532,533,3,298,149,0,533,25,1,0,
  	0,0,534,535,5,49,0,0,535,536,5,157,0,0,536,538,3,300,150,0,537,539,5,
  	157,0,0,538,537,1,0,0,0,538,539,1,0,0,0,539,540,1,0,0,0,540,542,5,6,0,
  	0,541,543,5,157,0,0,542,541,1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,
  	545,3,204,102,0,545,27,1,0,0,0,546,547,5,50,0,0,547,548,5,157,0,0,548,
  	549,5,101,0,0,549,550,5,157,0,0,550,551,5,60,0,0,551,552,5,157,0,0,552,
  	553,3,298,149,0,553,554,5,157,0,0,554,555,5,132,0,0,555,556,5,157,0,0,
  	556,557,5,143,0,0,557,29,1,0,0,0,558,559,5,99,0,0,559,560,5,157,0,0,560,
  	561,5,51,0,0,561,562,5,157,0,0,562,564,3,268,134,0,563,565,5,157,0,0,
  	564,563,1,0,0,0,564,565,1,0,0,0,565,566,1,0,0,0,566,568,5,2,0,0,567,569,
  	5,157,0,0,568,567,1,0,0,0,568,569,1,0,0,0,569,571,1,0,0,0,570,572,3,32,
  	16,0,571,570,1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,0,573,575,5,157,0,
  	0,574,573,1,0,0,0,574,575,1,0,0,0,575,577,1,0,0,0,576,578,3,34,17,0,577,
  	576,1,0,0,0,577,578,1,0,0,0,578,589,1,0,0,0,579,581,5,157,0,0,580,579,
  	1,0,0,0,580,581,1,0,0,0,581,582,1,0,0,0,582,584,5,3,0,0,583,585,5,157,
  	0,0,584,583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,588,3,34,17,0,
  	587,580,1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,593,
  	1,0,0,0,591,589,1,0,0,0,592,594,5,157,0,0,593,592,1,0,0,0,593,594,1,0,
  	0,0,594,595,1,0,0,0,595,596,5,4,0,0,596,597,5,157,0,0,597,598,5,109,0,
  	0,598,599,5,157,0,0,599,600,3,204,102,0,600,31,1,0,0,0,601,612,3,300,
  	150,0,602,604,5,157,0,0,603,602,1,0,0,0,603,604,1,0,0,0,604,605,1,0,0,
  	0,605,607,5,3,0,0,606,608,5,157,0,0,607,606,1,0,0,0,607,608,1,0,0,0,608,
  	609,1,0,0,0,609,611,3,300,150,0,610,603,1,0,0,0,611,614,1,0,0,0,612,610,
  	1,0,0,0,612,613,1,0,0,0,613,33,1,0,0,0,614,612,1,0,0,0,615,617,3,300,
  	150,0,616,618,5,157,0,0,617,616,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,
  	0,619,620,5,127,0,0,620,622,5,6,0,0,621,623,5,157,0,0,622,621,1,0,0,0,
  	622,623,1,0,0,0,623,624,1,0,0,0,624,625,3,252,126,0,625,35,1,0,0,0,626,
  	628,5,7,0,0,627,629,5,157,0,0,628,627,1,0,0,0,628,629,1,0,0,0,629,630,
  	1,0,0,0,630,641,5,143,0,0,631,633,5,157,0,0,632,631,1,0,0,0,632,633,1,
  	0,0,0,633,634,1,0,0,0,634,636,5,3,0,0,635,637,5,157,0,0,636,635,1,0,0,
  	0,636,637,1,0,0,0,637,638,1,0,0,0,638,640,5,143,0,0,639,632,1,0,0,0,640,
  	643,1,0,0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,644,1,0,0,0,643,641,1,
  	0,0,0,644,660,5,8,0,0,645,660,5,143,0,0,646,648,5,52,0,0,647,649,5,157,
  	0,0,648,647,1,0,0,0,648,649,1,0,0,0,649,650,1,0,0,0,650,652,5,2,0,0,651,
  	653,5,157,0,0,652,651,1,0,0,0,652,653,1,0,0,0,653,654,1,0,0,0,654,656,
  	5,143,0,0,655,657,5,157,0,0,656,655,1,0,0,0,656,657,1,0,0,0,657,658,1,
  	0,0,0,658,660,5,4,0,0,659,626,1,0,0,0,659,645,1,0,0,0,659,646,1,0,0,0,
  	660,37,1,0,0,0,661,663,5,2,0,0,662,664,5,157,0,0,663,662,1,0,0,0,663,
  	664,1,0,0,0,664,665,1,0,0,0,665,676,3,40,20,0,666,668,5,157,0,0,667,666,
  	1,0,0,0,667,668,1,0,0,0,668,669,1,0,0,0,669,671,5,3,0,0,670,672,5,157,
  	0,0,671,670,1,0,0,0,671,672,1,0,0,0,672,673,1,0,0,0,673,675,3,40,20,0,
  	674,667,1,0,0,0,675,678,1,0,0,0,676,674,1,0,0,0,676,677,1,0,0,0,677,680,
  	1,0,0,0,678,676,1,0,0,0,679,681,5,157,0,0,680,679,1,0,0,0,680,681,1,0,
  	0,0,681,682,1,0,0,0,682,683,5,4,0,0,683,39,1,0,0,0,684,686,3,300,150,
  	0,685,687,5,157,0,0,686,685,1,0,0,0,686,687,1,0,0,0,687,688,1,0,0,0,688,
  	690,5,6,0,0,689,691,5,157,0,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,
  	1,0,0,0,692,693,3,252,126,0,693,41,1,0,0,0,694,695,5,99,0,0,695,696,5,
  	157,0,0,696,697,5,59,0,0,697,698,5,157,0,0,698,699,5,60,0,0,699,700,5,
  	157,0,0,700,702,3,298,149,0,701,703,5,157,0,0,702,701,1,0,0,0,702,703,
  	1,0,0,0,703,704,1,0,0,0,704,706,5,2,0,0,705,707,5,157,0,0,706,705,1,0,
  	0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,710,3,80,40,0,709,711,5,157,0,
  	0,710,709,1,0,0,0,710,711,1,0,0,0,711,712,1,0,0,0,712,714,5,3,0,0,713,
  	715,5,157,0,0,714,713,1,0,0,0,714,715,1,0,0,0,715,716,1,0,0,0,716,717,
  	3,84,42,0,717,719,1,0,0,0,718,720,5,157,0,0,719,718,1,0,0,0,719,720,1,
  	0,0,0,720,721,1,0,0,0,721,722,5,4,0,0,722,43,1,0,0,0,723,724,5,99,0,0,
  	724,725,5,157,0,0,725,726,5,77,0,0,726,727,5,157,0,0,727,728,5,60,0,0,
  	728,729,5,157,0,0,729,731,3,298,149,0,730,732,5,157,0,0,731,730,1,0,0,
  	0,731,732,1,0,0,0,732,733,1,0,0,0,733,735,5,2,0,0,734,736,5,157,0,0,735,
  	734,1,0,0,0,735,736,1,0,0,0,736,737,1,0,0,0,737,739,3,48,24,0,738,740,
  	5,157,0,0,739,738,1,0,0,0,739,740,1,0,0,0,740,749,1,0,0,0,741,743,5,3,
  	0,0,742,744,5,157,0,0,743,742,1,0,0,0,743,744,1,0,0,0,744,745,1,0,0,0,
  	745,747,3,80,40,0,746,748,5,157,0,0,747,746,1,0,0,0,747,748,1,0,0,0,748,
  	750,1,0,0,0,749,741,1,0,0,0,749,750,1,0,0,0,750,759,1,0,0,0,751,753,5,
  	3,0,0,752,754,5,157,0,0,753,752,1,0,0,0,753,754,1,0,0,0,754,755,1,0,0,
  	0,755,757,3,300,150,0,756,758,5,157,0,0,757,756,1,0,0,0,757,758,1,0,0,
  	0,758,760,1,0,0,0,759,751,1,0,0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,
  	762,5,4,0,0,762,45,1,0,0,0,763,764,5,99,0,0,764,765,5,157,0,0,765,766,
  	5,77,0,0,766,767,5,157,0,0,767,768,5,60,0,0,768,769,5,157,0,0,769,770,
  	5,61,0,0,770,771,5,157,0,0,771,773,3,298,149,0,772,774,5,157,0,0,773,
  	772,1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,775,777,5,2,0,0,776,778,5,
  	157,0,0,777,776,1,0,0,0,777,778,1,0,0,0,778,779,1,0,0,0,779,781,3,48,
  	24,0,780,782,5,157,0,0,781,780,1,0,0,0,781,782,1,0,0,0,782,788,1,0,0,
  	0,783,785,5,3,0,0,784,786,5,157,0,0,785,784,1,0,0,0,785,786,1,0,0,0,786,
  	787,1,0,0,0,787,789,3,48,24,0,788,783,1,0,0,0,789,790,1,0,0,0,790,788,
  	1,0,0,0,790,791,1,0,0,0,791,793,1,0,0,0,792,794,5,157,0,0,793,792,1,0,
  	0,0,793,794,1,0,0,0,794,803,1,0,0,0,795,797,5,3,0,0,796,798,5,157,0,0,
  	797,796,1,0,0,0,797,798,1,0,0,0,798,799,1,0,0,0,799,801,3,80,40,0,800,
  	802,5,157,0,0,801,800,1,0,0,0,801,802,1,0,0,0,802,804,1,0,0,0,803,795,
  	1,0,0,0,803,804,1,0,0,0,804,813,1,0,0,0,805,807,5,3,0,0,806,808,5,157,
  	0,0,807,806,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,811,3,300,150,
  	0,810,812,5,157,0,0,811,810,1,0,0,0,811,812,1,0,0,0,812,814,1,0,0,0,813,
  	805,1,0,0,0,813,814,1,0,0,0,814,815,1,0,0,0,815,816,5,4,0,0,816,47,1,
  	0,0,0,817,818,5,54,0,0,818,819,5,157,0,0,819,820,3,298,149,0,820,821,
  	5,157,0,0,821,822,5,78,0,0,822,823,5,157,0,0,823,824,3,298,149,0,824,
  	49,1,0,0,0,825,826,5,99,0,0,826,827,5,157,0,0,827,828,5,62,0,0,828,829,
  	5,157,0,0,829,830,3,298,149,0,830,51,1,0,0,0,831,832,5,99,0,0,832,833,
  	5,157,0,0,833,834,5,63,0,0,834,835,5,157,0,0,835,840,3,298,149,0,836,
  	837,5,157,0,0,837,839,3,54,27,0,838,836,1,0,0,0,839,842,1,0,0,0,840,838,
  	1,0,0,0,840,841,1,0,0,0,841,53,1,0,0,0,842,840,1,0,0,0,843,849,3,56,28,
  	0,844,849,3,58,29,0,845,849,3,60,30,0,846,849,3,62,31,0,847,849,3,64,
  	32,0,848,843,1,0,0,0,848,844,1,0,0,0,848,845,1,0,0,0,848,846,1,0,0,0,
  	848,847,1,0,0,0,849,55,1,0,0,0,850,851,5,64,0,0,851,854,5,157,0,0,852,
<<<<<<< HEAD
  	853,5,111,0,0,853,855,5,157,0,0,854,852,1,0,0,0,854,855,1,0,0,0,855,856,
  	1,0,0,0,856,857,3,294,147,0,857,57,1,0,0,0,858,859,5,68,0,0,859,860,5,
  	157,0,0,860,865,5,65,0,0,861,862,5,65,0,0,862,863,5,157,0,0,863,865,3,
  	294,147,0,864,858,1,0,0,0,864,861,1,0,0,0,865,59,1,0,0,0,866,867,5,68,
  	0,0,867,868,5,157,0,0,868,873,5,66,0,0,869,870,5,66,0,0,870,871,5,157,
  	0,0,871,873,3,294,147,0,872,866,1,0,0,0,872,869,1,0,0,0,873,61,1,0,0,
  	0,874,875,5,67,0,0,875,878,5,157,0,0,876,877,5,105,0,0,877,879,5,157,
  	0,0,878,876,1,0,0,0,878,879,1,0,0,0,879,880,1,0,0,0,880,881,3,294,147,
  	0,881,63,1,0,0,0,882,883,5,68,0,0,883,885,5,157,0,0,884,882,1,0,0,0,884,
  	885,1,0,0,0,885,886,1,0,0,0,886,887,5,69,0,0,887,65,1,0,0,0,888,889,5,
  	70,0,0,889,890,5,157,0,0,890,891,7,0,0,0,891,892,5,157,0,0,892,893,3,
  	298,149,0,893,67,1,0,0,0,894,895,5,71,0,0,895,896,5,157,0,0,896,897,5,
  	60,0,0,897,898,5,157,0,0,898,899,3,298,149,0,899,900,5,157,0,0,900,901,
  	3,70,35,0,901,69,1,0,0,0,902,907,3,72,36,0,903,907,3,74,37,0,904,907,
  	3,76,38,0,905,907,3,78,39,0,906,902,1,0,0,0,906,903,1,0,0,0,906,904,1,
  	0,0,0,906,905,1,0,0,0,907,71,1,0,0,0,908,909,5,74,0,0,909,910,5,157,0,
  	0,910,911,3,292,146,0,911,912,5,157,0,0,912,917,3,86,43,0,913,914,5,157,
  	0,0,914,915,5,72,0,0,915,916,5,157,0,0,916,918,3,204,102,0,917,913,1,
  	0,0,0,917,918,1,0,0,0,918,73,1,0,0,0,919,920,5,70,0,0,920,921,5,157,0,
  	0,921,922,3,292,146,0,922,75,1,0,0,0,923,924,5,73,0,0,924,925,5,157,0,
  	0,925,926,5,78,0,0,926,927,5,157,0,0,927,928,3,298,149,0,928,77,1,0,0,
  	0,929,930,5,73,0,0,930,931,5,157,0,0,931,932,3,292,146,0,932,933,5,157,
  	0,0,933,934,5,78,0,0,934,935,5,157,0,0,935,936,3,292,146,0,936,79,1,0,
  	0,0,937,948,3,82,41,0,938,940,5,157,0,0,939,938,1,0,0,0,939,940,1,0,0,
  	0,940,941,1,0,0,0,941,943,5,3,0,0,942,944,5,157,0,0,943,942,1,0,0,0,943,
  	944,1,0,0,0,944,945,1,0,0,0,945,947,3,82,41,0,946,939,1,0,0,0,947,950,
  	1,0,0,0,948,946,1,0,0,0,948,949,1,0,0,0,949,81,1,0,0,0,950,948,1,0,0,
  	0,951,952,3,292,146,0,952,953,5,157,0,0,953,954,3,86,43,0,954,83,1,0,
  	0,0,955,956,5,75,0,0,956,957,5,157,0,0,957,959,5,76,0,0,958,960,5,157,
  	0,0,959,958,1,0,0,0,959,960,1,0,0,0,960,961,1,0,0,0,961,963,5,2,0,0,962,
  	964,5,157,0,0,963,962,1,0,0,0,963,964,1,0,0,0,964,965,1,0,0,0,965,967,
  	3,292,146,0,966,968,5,157,0,0,967,966,1,0,0,0,967,968,1,0,0,0,968,969,
  	1,0,0,0,969,970,5,4,0,0,970,85,1,0,0,0,971,972,6,43,-1,0,972,1024,3,300,
  	150,0,973,975,5,92,0,0,974,976,5,157,0,0,975,974,1,0,0,0,975,976,1,0,
  	0,0,976,977,1,0,0,0,977,979,5,2,0,0,978,980,5,157,0,0,979,978,1,0,0,0,
  	979,980,1,0,0,0,980,981,1,0,0,0,981,983,3,80,40,0,982,984,5,157,0,0,983,
  	982,1,0,0,0,983,984,1,0,0,0,984,985,1,0,0,0,985,986,5,4,0,0,986,1024,
  	1,0,0,0,987,989,3,300,150,0,988,990,5,157,0,0,989,988,1,0,0,0,989,990,
  	1,0,0,0,990,991,1,0,0,0,991,993,5,2,0,0,992,994,5,157,0,0,993,992,1,0,
  	0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,997,3,80,40,0,996,998,5,157,0,
  	0,997,996,1,0,0,0,997,998,1,0,0,0,998,999,1,0,0,0,999,1000,5,4,0,0,1000,
  	1024,1,0,0,0,1001,1003,3,300,150,0,1002,1004,5,157,0,0,1003,1002,1,0,
  	0,0,1003,1004,1,0,0,0,1004,1005,1,0,0,0,1005,1007,5,2,0,0,1006,1008,5,
  	157,0,0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,1008,1009,1,0,0,0,1009,1011,
  	3,86,43,0,1010,1012,5,157,0,0,1011,1010,1,0,0,0,1011,1012,1,0,0,0,1012,
  	1013,1,0,0,0,1013,1015,5,3,0,0,1014,1016,5,157,0,0,1015,1014,1,0,0,0,
  	1015,1016,1,0,0,0,1016,1017,1,0,0,0,1017,1019,3,86,43,0,1018,1020,5,157,
  	0,0,1019,1018,1,0,0,0,1019,1020,1,0,0,0,1020,1021,1,0,0,0,1021,1022,5,
  	4,0,0,1022,1024,1,0,0,0,1023,971,1,0,0,0,1023,973,1,0,0,0,1023,987,1,
  	0,0,0,1023,1001,1,0,0,0,1024,1029,1,0,0,0,1025,1026,10,4,0,0,1026,1028,
  	3,88,44,0,1027,1025,1,0,0,0,1028,1031,1,0,0,0,1029,1027,1,0,0,0,1029,
  	1030,1,0,0,0,1030,87,1,0,0,0,1031,1029,1,0,0,0,1032,1036,3,90,45,0,1033,
  	1035,3,90,45,0,1034,1033,1,0,0,0,1035,1038,1,0,0,0,1036,1034,1,0,0,0,
  	1036,1037,1,0,0,0,1037,89,1,0,0,0,1038,1036,1,0,0,0,1039,1041,5,7,0,0,
  	1040,1042,3,294,147,0,1041,1040,1,0,0,0,1041,1042,1,0,0,0,1042,1043,1,
  	0,0,0,1043,1044,5,8,0,0,1044,91,1,0,0,0,1045,1048,3,94,47,0,1046,1048,
  	3,96,48,0,1047,1045,1,0,0,0,1047,1046,1,0,0,0,1048,93,1,0,0,0,1049,1050,
  	5,79,0,0,1050,95,1,0,0,0,1051,1052,5,80,0,0,1052,97,1,0,0,0,1053,1054,
  	5,81,0,0,1054,1055,5,157,0,0,1055,1068,5,82,0,0,1056,1057,5,81,0,0,1057,
  	1058,5,157,0,0,1058,1059,5,82,0,0,1059,1060,5,157,0,0,1060,1061,5,83,
  	0,0,1061,1062,5,157,0,0,1062,1068,5,84,0,0,1063,1068,5,86,0,0,1064,1068,
  	5,87,0,0,1065,1068,5,88,0,0,1066,1068,5,89,0,0,1067,1053,1,0,0,0,1067,
  	1056,1,0,0,0,1067,1063,1,0,0,0,1067,1064,1,0,0,0,1067,1065,1,0,0,0,1067,
  	1066,1,0,0,0,1068,99,1,0,0,0,1069,1072,3,102,51,0,1070,1072,3,104,52,
  	0,1071,1069,1,0,0,0,1071,1070,1,0,0,0,1072,101,1,0,0,0,1073,1074,5,94,
  	0,0,1074,1075,5,157,0,0,1075,1076,5,91,0,0,1076,1079,5,157,0,0,1077,1080,
  	5,143,0,0,1078,1080,3,284,142,0,1079,1077,1,0,0,0,1079,1078,1,0,0,0,1080,
  	103,1,0,0,0,1081,1082,5,90,0,0,1082,1083,5,157,0,0,1083,1084,3,284,142,
  	0,1084,105,1,0,0,0,1085,1086,3,108,54,0,1086,107,1,0,0,0,1087,1094,3,
  	112,56,0,1088,1090,5,157,0,0,1089,1088,1,0,0,0,1089,1090,1,0,0,0,1090,
  	1091,1,0,0,0,1091,1093,3,110,55,0,1092,1089,1,0,0,0,1093,1096,1,0,0,0,
  	1094,1092,1,0,0,0,1094,1095,1,0,0,0,1095,1109,1,0,0,0,1096,1094,1,0,0,
  	0,1097,1099,3,146,73,0,1098,1100,5,157,0,0,1099,1098,1,0,0,0,1099,1100,
  	1,0,0,0,1100,1102,1,0,0,0,1101,1097,1,0,0,0,1102,1103,1,0,0,0,1103,1101,
  	1,0,0,0,1103,1104,1,0,0,0,1104,1105,1,0,0,0,1105,1106,3,112,56,0,1106,
  	1107,6,54,-1,0,1107,1109,1,0,0,0,1108,1087,1,0,0,0,1108,1101,1,0,0,0,
  	1109,109,1,0,0,0,1110,1111,5,92,0,0,1111,1112,5,157,0,0,1112,1114,5,93,
  	0,0,1113,1115,5,157,0,0,1114,1113,1,0,0,0,1114,1115,1,0,0,0,1115,1116,
  	1,0,0,0,1116,1123,3,112,56,0,1117,1119,5,92,0,0,1118,1120,5,157,0,0,1119,
  	1118,1,0,0,0,1119,1120,1,0,0,0,1120,1121,1,0,0,0,1121,1123,3,112,56,0,
  	1122,1110,1,0,0,0,1122,1117,1,0,0,0,1123,111,1,0,0,0,1124,1127,3,114,
  	57,0,1125,1127,3,116,58,0,1126,1124,1,0,0,0,1126,1125,1,0,0,0,1127,113,
  	1,0,0,0,1128,1130,3,122,61,0,1129,1131,5,157,0,0,1130,1129,1,0,0,0,1130,
  	1131,1,0,0,0,1131,1133,1,0,0,0,1132,1128,1,0,0,0,1133,1136,1,0,0,0,1134,
  	1132,1,0,0,0,1134,1135,1,0,0,0,1135,1137,1,0,0,0,1136,1134,1,0,0,0,1137,
  	1174,3,146,73,0,1138,1140,3,122,61,0,1139,1141,5,157,0,0,1140,1139,1,
  	0,0,0,1140,1141,1,0,0,0,1141,1143,1,0,0,0,1142,1138,1,0,0,0,1143,1146,
  	1,0,0,0,1144,1142,1,0,0,0,1144,1145,1,0,0,0,1145,1147,1,0,0,0,1146,1144,
  	1,0,0,0,1147,1154,3,120,60,0,1148,1150,5,157,0,0,1149,1148,1,0,0,0,1149,
  	1150,1,0,0,0,1150,1151,1,0,0,0,1151,1153,3,120,60,0,1152,1149,1,0,0,0,
  	1153,1156,1,0,0,0,1154,1152,1,0,0,0,1154,1155,1,0,0,0,1155,1161,1,0,0,
  	0,1156,1154,1,0,0,0,1157,1159,5,157,0,0,1158,1157,1,0,0,0,1158,1159,1,
  	0,0,0,1159,1160,1,0,0,0,1160,1162,3,146,73,0,1161,1158,1,0,0,0,1161,1162,
  	1,0,0,0,1162,1174,1,0,0,0,1163,1165,3,122,61,0,1164,1166,5,157,0,0,1165,
  	1164,1,0,0,0,1165,1166,1,0,0,0,1166,1168,1,0,0,0,1167,1163,1,0,0,0,1168,
  	1169,1,0,0,0,1169,1167,1,0,0,0,1169,1170,1,0,0,0,1170,1171,1,0,0,0,1171,
  	1172,6,57,-1,0,1172,1174,1,0,0,0,1173,1134,1,0,0,0,1173,1144,1,0,0,0,
  	1173,1167,1,0,0,0,1174,115,1,0,0,0,1175,1177,3,118,59,0,1176,1178,5,157,
  	0,0,1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,1180,1,0,0,0,1179,1175,1,
  	0,0,0,1180,1181,1,0,0,0,1181,1179,1,0,0,0,1181,1182,1,0,0,0,1182,1183,
  	1,0,0,0,1183,1184,3,114,57,0,1184,117,1,0,0,0,1185,1187,3,122,61,0,1186,
  	1188,5,157,0,0,1187,1186,1,0,0,0,1187,1188,1,0,0,0,1188,1190,1,0,0,0,
  	1189,1185,1,0,0,0,1190,1193,1,0,0,0,1191,1189,1,0,0,0,1191,1192,1,0,0,
  	0,1192,1200,1,0,0,0,1193,1191,1,0,0,0,1194,1196,3,120,60,0,1195,1197,
  	5,157,0,0,1196,1195,1,0,0,0,1196,1197,1,0,0,0,1197,1199,1,0,0,0,1198,
  	1194,1,0,0,0,1199,1202,1,0,0,0,1200,1198,1,0,0,0,1200,1201,1,0,0,0,1201,
  	1203,1,0,0,0,1202,1200,1,0,0,0,1203,1204,3,144,72,0,1204,119,1,0,0,0,
  	1205,1210,3,132,66,0,1206,1210,3,134,67,0,1207,1210,3,138,69,0,1208,1210,
  	3,142,71,0,1209,1205,1,0,0,0,1209,1206,1,0,0,0,1209,1207,1,0,0,0,1209,
  	1208,1,0,0,0,1210,121,1,0,0,0,1211,1216,3,128,64,0,1212,1216,3,130,65,
  	0,1213,1216,3,126,63,0,1214,1216,3,124,62,0,1215,1211,1,0,0,0,1215,1212,
  	1,0,0,0,1215,1213,1,0,0,0,1215,1214,1,0,0,0,1216,123,1,0,0,0,1217,1235,
  	5,94,0,0,1218,1219,5,157,0,0,1219,1220,5,105,0,0,1220,1221,5,157,0,0,
  	1221,1223,5,95,0,0,1222,1224,5,157,0,0,1223,1222,1,0,0,0,1223,1224,1,
  	0,0,0,1224,1225,1,0,0,0,1225,1227,5,2,0,0,1226,1228,5,157,0,0,1227,1226,
  	1,0,0,0,1227,1228,1,0,0,0,1228,1229,1,0,0,0,1229,1231,3,80,40,0,1230,
  	1232,5,157,0,0,1231,1230,1,0,0,0,1231,1232,1,0,0,0,1232,1233,1,0,0,0,
  	1233,1234,5,4,0,0,1234,1236,1,0,0,0,1235,1218,1,0,0,0,1235,1236,1,0,0,
  	0,1236,1237,1,0,0,0,1237,1238,5,157,0,0,1238,1239,5,54,0,0,1239,1240,
  	5,157,0,0,1240,1245,3,10,5,0,1241,1243,5,157,0,0,1242,1241,1,0,0,0,1242,
  	1243,1,0,0,0,1243,1244,1,0,0,0,1244,1246,3,38,19,0,1245,1242,1,0,0,0,
  	1245,1246,1,0,0,0,1246,1251,1,0,0,0,1247,1249,5,157,0,0,1248,1247,1,0,
  	0,0,1248,1249,1,0,0,0,1249,1250,1,0,0,0,1250,1252,3,162,81,0,1251,1248,
  	1,0,0,0,1251,1252,1,0,0,0,1252,125,1,0,0,0,1253,1254,5,49,0,0,1254,1255,
  	5,157,0,0,1255,1260,3,266,133,0,1256,1258,5,157,0,0,1257,1256,1,0,0,0,
  	1257,1258,1,0,0,0,1258,1259,1,0,0,0,1259,1261,3,162,81,0,1260,1257,1,
  	0,0,0,1260,1261,1,0,0,0,1261,127,1,0,0,0,1262,1263,5,96,0,0,1263,1265,
  	5,157,0,0,1264,1262,1,0,0,0,1264,1265,1,0,0,0,1265,1266,1,0,0,0,1266,
  	1268,5,97,0,0,1267,1269,5,157,0,0,1268,1267,1,0,0,0,1268,1269,1,0,0,0,
  	1269,1270,1,0,0,0,1270,1275,3,164,82,0,1271,1273,5,157,0,0,1272,1271,
  	1,0,0,0,1272,1273,1,0,0,0,1273,1274,1,0,0,0,1274,1276,3,162,81,0,1275,
  	1272,1,0,0,0,1275,1276,1,0,0,0,1276,129,1,0,0,0,1277,1279,5,98,0,0,1278,
  	1280,5,157,0,0,1279,1278,1,0,0,0,1279,1280,1,0,0,0,1280,1281,1,0,0,0,
  	1281,1282,3,204,102,0,1282,1283,5,157,0,0,1283,1284,5,109,0,0,1284,1285,
  	5,157,0,0,1285,1286,3,284,142,0,1286,131,1,0,0,0,1287,1289,5,99,0,0,1288,
  	1290,5,157,0,0,1289,1288,1,0,0,0,1289,1290,1,0,0,0,1290,1291,1,0,0,0,
  	1291,1292,3,164,82,0,1292,133,1,0,0,0,1293,1295,5,100,0,0,1294,1296,5,
  	157,0,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,1297,1,0,0,0,1297,1302,
  	3,164,82,0,1298,1299,5,157,0,0,1299,1301,3,136,68,0,1300,1298,1,0,0,0,
  	1301,1304,1,0,0,0,1302,1300,1,0,0,0,1302,1303,1,0,0,0,1303,135,1,0,0,
  	0,1304,1302,1,0,0,0,1305,1306,5,101,0,0,1306,1307,5,157,0,0,1307,1308,
  	5,97,0,0,1308,1309,5,157,0,0,1309,1316,3,138,69,0,1310,1311,5,101,0,0,
  	1311,1312,5,157,0,0,1312,1313,5,99,0,0,1313,1314,5,157,0,0,1314,1316,
  	3,138,69,0,1315,1305,1,0,0,0,1315,1310,1,0,0,0,1316,137,1,0,0,0,1317,
  	1319,5,102,0,0,1318,1320,5,157,0,0,1319,1318,1,0,0,0,1319,1320,1,0,0,
  	0,1320,1321,1,0,0,0,1321,1332,3,140,70,0,1322,1324,5,157,0,0,1323,1322,
  	1,0,0,0,1323,1324,1,0,0,0,1324,1325,1,0,0,0,1325,1327,5,3,0,0,1326,1328,
  	5,157,0,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,1329,1,0,0,0,1329,
  	1331,3,140,70,0,1330,1323,1,0,0,0,1331,1334,1,0,0,0,1332,1330,1,0,0,0,
  	1332,1333,1,0,0,0,1333,139,1,0,0,0,1334,1332,1,0,0,0,1335,1337,3,290,
  	145,0,1336,1338,5,157,0,0,1337,1336,1,0,0,0,1337,1338,1,0,0,0,1338,1339,
  	1,0,0,0,1339,1341,5,6,0,0,1340,1342,5,157,0,0,1341,1340,1,0,0,0,1341,
  	1342,1,0,0,0,1342,1343,1,0,0,0,1343,1344,3,204,102,0,1344,141,1,0,0,0,
  	1345,1346,5,103,0,0,1346,1348,5,157,0,0,1347,1345,1,0,0,0,1347,1348,1,
  	0,0,0,1348,1349,1,0,0,0,1349,1351,5,104,0,0,1350,1352,5,157,0,0,1351,
  	1350,1,0,0,0,1351,1352,1,0,0,0,1352,1353,1,0,0,0,1353,1364,3,204,102,
  	0,1354,1356,5,157,0,0,1355,1354,1,0,0,0,1355,1356,1,0,0,0,1356,1357,1,
  	0,0,0,1357,1359,5,3,0,0,1358,1360,5,157,0,0,1359,1358,1,0,0,0,1359,1360,
  	1,0,0,0,1360,1361,1,0,0,0,1361,1363,3,204,102,0,1362,1355,1,0,0,0,1363,
  	1366,1,0,0,0,1364,1362,1,0,0,0,1364,1365,1,0,0,0,1365,143,1,0,0,0,1366,
  	1364,1,0,0,0,1367,1368,5,105,0,0,1368,1373,3,148,74,0,1369,1371,5,157,
  	0,0,1370,1369,1,0,0,0,1370,1371,1,0,0,0,1371,1372,1,0,0,0,1372,1374,3,
  	162,81,0,1373,1370,1,0,0,0,1373,1374,1,0,0,0,1374,145,1,0,0,0,1375,1376,
  	5,106,0,0,1376,1377,3,148,74,0,1377,147,1,0,0,0,1378,1380,5,157,0,0,1379,
  	1378,1,0,0,0,1379,1380,1,0,0,0,1380,1381,1,0,0,0,1381,1383,5,107,0,0,
  	1382,1379,1,0,0,0,1382,1383,1,0,0,0,1383,1384,1,0,0,0,1384,1385,5,157,
  	0,0,1385,1388,3,150,75,0,1386,1387,5,157,0,0,1387,1389,3,154,77,0,1388,
  	1386,1,0,0,0,1388,1389,1,0,0,0,1389,1392,1,0,0,0,1390,1391,5,157,0,0,
  	1391,1393,3,156,78,0,1392,1390,1,0,0,0,1392,1393,1,0,0,0,1393,1396,1,
  	0,0,0,1394,1395,5,157,0,0,1395,1397,3,158,79,0,1396,1394,1,0,0,0,1396,
  	1397,1,0,0,0,1397,149,1,0,0,0,1398,1409,5,108,0,0,1399,1401,5,157,0,0,
  	1400,1399,1,0,0,0,1400,1401,1,0,0,0,1401,1402,1,0,0,0,1402,1404,5,3,0,
  	0,1403,1405,5,157,0,0,1404,1403,1,0,0,0,1404,1405,1,0,0,0,1405,1406,1,
  	0,0,0,1406,1408,3,152,76,0,1407,1400,1,0,0,0,1408,1411,1,0,0,0,1409,1407,
  	1,0,0,0,1409,1410,1,0,0,0,1410,1427,1,0,0,0,1411,1409,1,0,0,0,1412,1423,
  	3,152,76,0,1413,1415,5,157,0,0,1414,1413,1,0,0,0,1414,1415,1,0,0,0,1415,
  	1416,1,0,0,0,1416,1418,5,3,0,0,1417,1419,5,157,0,0,1418,1417,1,0,0,0,
  	1418,1419,1,0,0,0,1419,1420,1,0,0,0,1420,1422,3,152,76,0,1421,1414,1,
  	0,0,0,1422,1425,1,0,0,0,1423,1421,1,0,0,0,1423,1424,1,0,0,0,1424,1427,
  	1,0,0,0,1425,1423,1,0,0,0,1426,1398,1,0,0,0,1426,1412,1,0,0,0,1427,151,
  	1,0,0,0,1428,1429,3,204,102,0,1429,1430,5,157,0,0,1430,1431,5,109,0,0,
  	1431,1432,5,157,0,0,1432,1433,3,284,142,0,1433,1436,1,0,0,0,1434,1436,
  	3,204,102,0,1435,1428,1,0,0,0,1435,1434,1,0,0,0,1436,153,1,0,0,0,1437,
  	1438,5,110,0,0,1438,1439,5,157,0,0,1439,1440,5,111,0,0,1440,1441,5,157,
  	0,0,1441,1449,3,160,80,0,1442,1444,5,3,0,0,1443,1445,5,157,0,0,1444,1443,
  	1,0,0,0,1444,1445,1,0,0,0,1445,1446,1,0,0,0,1446,1448,3,160,80,0,1447,
  	1442,1,0,0,0,1448,1451,1,0,0,0,1449,1447,1,0,0,0,1449,1450,1,0,0,0,1450,
  	155,1,0,0,0,1451,1449,1,0,0,0,1452,1453,5,112,0,0,1453,1454,5,157,0,0,
  	1454,1455,3,204,102,0,1455,157,1,0,0,0,1456,1457,5,113,0,0,1457,1458,
  	5,157,0,0,1458,1459,3,204,102,0,1459,159,1,0,0,0,1460,1465,3,204,102,
  	0,1461,1463,5,157,0,0,1462,1461,1,0,0,0,1462,1463,1,0,0,0,1463,1464,1,
  	0,0,0,1464,1466,7,1,0,0,1465,1462,1,0,0,0,1465,1466,1,0,0,0,1466,161,
  	1,0,0,0,1467,1468,5,118,0,0,1468,1469,5,157,0,0,1469,1470,3,204,102,0,
  	1470,163,1,0,0,0,1471,1482,3,166,83,0,1472,1474,5,157,0,0,1473,1472,1,
  	0,0,0,1473,1474,1,0,0,0,1474,1475,1,0,0,0,1475,1477,5,3,0,0,1476,1478,
  	5,157,0,0,1477,1476,1,0,0,0,1477,1478,1,0,0,0,1478,1479,1,0,0,0,1479,
  	1481,3,166,83,0,1480,1473,1,0,0,0,1481,1484,1,0,0,0,1482,1480,1,0,0,0,
  	1482,1483,1,0,0,0,1483,165,1,0,0,0,1484,1482,1,0,0,0,1485,1487,3,284,
  	142,0,1486,1488,5,157,0,0,1487,1486,1,0,0,0,1487,1488,1,0,0,0,1488,1489,
  	1,0,0,0,1489,1491,5,6,0,0,1490,1492,5,157,0,0,1491,1490,1,0,0,0,1491,
  	1492,1,0,0,0,1492,1493,1,0,0,0,1493,1494,3,168,84,0,1494,1497,1,0,0,0,
  	1495,1497,3,168,84,0,1496,1485,1,0,0,0,1496,1495,1,0,0,0,1497,167,1,0,
  	0,0,1498,1499,3,170,85,0,1499,169,1,0,0,0,1500,1507,3,172,86,0,1501,1503,
  	5,157,0,0,1502,1501,1,0,0,0,1502,1503,1,0,0,0,1503,1504,1,0,0,0,1504,
  	1506,3,174,87,0,1505,1502,1,0,0,0,1506,1509,1,0,0,0,1507,1505,1,0,0,0,
  	1507,1508,1,0,0,0,1508,1515,1,0,0,0,1509,1507,1,0,0,0,1510,1511,5,2,0,
  	0,1511,1512,3,170,85,0,1512,1513,5,4,0,0,1513,1515,1,0,0,0,1514,1500,
  	1,0,0,0,1514,1510,1,0,0,0,1515,171,1,0,0,0,1516,1518,5,2,0,0,1517,1519,
  	5,157,0,0,1518,1517,1,0,0,0,1518,1519,1,0,0,0,1519,1524,1,0,0,0,1520,
  	1522,3,284,142,0,1521,1523,5,157,0,0,1522,1521,1,0,0,0,1522,1523,1,0,
  	0,0,1523,1525,1,0,0,0,1524,1520,1,0,0,0,1524,1525,1,0,0,0,1525,1530,1,
  	0,0,0,1526,1528,3,184,92,0,1527,1529,5,157,0,0,1528,1527,1,0,0,0,1528,
  	1529,1,0,0,0,1529,1531,1,0,0,0,1530,1526,1,0,0,0,1530,1531,1,0,0,0,1531,
  	1536,1,0,0,0,1532,1534,3,180,90,0,1533,1535,5,157,0,0,1534,1533,1,0,0,
  	0,1534,1535,1,0,0,0,1535,1537,1,0,0,0,1536,1532,1,0,0,0,1536,1537,1,0,
  	0,0,1537,1538,1,0,0,0,1538,1539,5,4,0,0,1539,173,1,0,0,0,1540,1542,3,
  	176,88,0,1541,1543,5,157,0,0,1542,1541,1,0,0,0,1542,1543,1,0,0,0,1543,
  	1544,1,0,0,0,1544,1545,3,172,86,0,1545,175,1,0,0,0,1546,1548,3,304,152,
  	0,1547,1549,5,157,0,0,1548,1547,1,0,0,0,1548,1549,1,0,0,0,1549,1550,1,
  	0,0,0,1550,1552,3,308,154,0,1551,1553,5,157,0,0,1552,1551,1,0,0,0,1552,
  	1553,1,0,0,0,1553,1555,1,0,0,0,1554,1556,3,178,89,0,1555,1554,1,0,0,0,
  	1555,1556,1,0,0,0,1556,1558,1,0,0,0,1557,1559,5,157,0,0,1558,1557,1,0,
  	0,0,1558,1559,1,0,0,0,1559,1560,1,0,0,0,1560,1561,3,308,154,0,1561,1591,
  	1,0,0,0,1562,1564,3,308,154,0,1563,1565,5,157,0,0,1564,1563,1,0,0,0,1564,
  	1565,1,0,0,0,1565,1567,1,0,0,0,1566,1568,3,178,89,0,1567,1566,1,0,0,0,
  	1567,1568,1,0,0,0,1568,1570,1,0,0,0,1569,1571,5,157,0,0,1570,1569,1,0,
  	0,0,1570,1571,1,0,0,0,1571,1572,1,0,0,0,1572,1574,3,308,154,0,1573,1575,
  	5,157,0,0,1574,1573,1,0,0,0,1574,1575,1,0,0,0,1575,1576,1,0,0,0,1576,
  	1577,3,306,153,0,1577,1591,1,0,0,0,1578,1580,3,308,154,0,1579,1581,5,
  	157,0,0,1580,1579,1,0,0,0,1580,1581,1,0,0,0,1581,1583,1,0,0,0,1582,1584,
  	3,178,89,0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,1586,1,0,0,0,1585,
  	1587,5,157,0,0,1586,1585,1,0,0,0,1586,1587,1,0,0,0,1587,1588,1,0,0,0,
  	1588,1589,3,308,154,0,1589,1591,1,0,0,0,1590,1546,1,0,0,0,1590,1562,1,
  	0,0,0,1590,1578,1,0,0,0,1591,177,1,0,0,0,1592,1594,5,7,0,0,1593,1595,
  	5,157,0,0,1594,1593,1,0,0,0,1594,1595,1,0,0,0,1595,1600,1,0,0,0,1596,
  	1598,3,284,142,0,1597,1599,5,157,0,0,1598,1597,1,0,0,0,1598,1599,1,0,
  	0,0,1599,1601,1,0,0,0,1600,1596,1,0,0,0,1600,1601,1,0,0,0,1601,1606,1,
  	0,0,0,1602,1604,3,182,91,0,1603,1605,5,157,0,0,1604,1603,1,0,0,0,1604,
  	1605,1,0,0,0,1605,1607,1,0,0,0,1606,1602,1,0,0,0,1606,1607,1,0,0,0,1607,
  	1612,1,0,0,0,1608,1610,3,188,94,0,1609,1611,5,157,0,0,1610,1609,1,0,0,
  	0,1610,1611,1,0,0,0,1611,1613,1,0,0,0,1612,1608,1,0,0,0,1612,1613,1,0,
  	0,0,1613,1618,1,0,0,0,1614,1616,3,180,90,0,1615,1617,5,157,0,0,1616,1615,
  	1,0,0,0,1616,1617,1,0,0,0,1617,1619,1,0,0,0,1618,1614,1,0,0,0,1618,1619,
  	1,0,0,0,1619,1620,1,0,0,0,1620,1621,5,8,0,0,1621,179,1,0,0,0,1622,1624,
  	5,9,0,0,1623,1625,5,157,0,0,1624,1623,1,0,0,0,1624,1625,1,0,0,0,1625,
  	1659,1,0,0,0,1626,1628,3,292,146,0,1627,1629,5,157,0,0,1628,1627,1,0,
  	0,0,1628,1629,1,0,0,0,1629,1630,1,0,0,0,1630,1632,5,127,0,0,1631,1633,
  	5,157,0,0,1632,1631,1,0,0,0,1632,1633,1,0,0,0,1633,1634,1,0,0,0,1634,
  	1636,3,204,102,0,1635,1637,5,157,0,0,1636,1635,1,0,0,0,1636,1637,1,0,
  	0,0,1637,1656,1,0,0,0,1638,1640,5,3,0,0,1639,1641,5,157,0,0,1640,1639,
  	1,0,0,0,1640,1641,1,0,0,0,1641,1642,1,0,0,0,1642,1644,3,292,146,0,1643,
  	1645,5,157,0,0,1644,1643,1,0,0,0,1644,1645,1,0,0,0,1645,1646,1,0,0,0,
  	1646,1648,5,127,0,0,1647,1649,5,157,0,0,1648,1647,1,0,0,0,1648,1649,1,
  	0,0,0,1649,1650,1,0,0,0,1650,1652,3,204,102,0,1651,1653,5,157,0,0,1652,
  	1651,1,0,0,0,1652,1653,1,0,0,0,1653,1655,1,0,0,0,1654,1638,1,0,0,0,1655,
  	1658,1,0,0,0,1656,1654,1,0,0,0,1656,1657,1,0,0,0,1657,1660,1,0,0,0,1658,
  	1656,1,0,0,0,1659,1626,1,0,0,0,1659,1660,1,0,0,0,1660,1661,1,0,0,0,1661,
  	1662,5,10,0,0,1662,181,1,0,0,0,1663,1665,5,127,0,0,1664,1666,5,157,0,
  	0,1665,1664,1,0,0,0,1665,1666,1,0,0,0,1666,1667,1,0,0,0,1667,1681,3,202,
  	101,0,1668,1670,5,157,0,0,1669,1668,1,0,0,0,1669,1670,1,0,0,0,1670,1671,
  	1,0,0,0,1671,1673,5,11,0,0,1672,1674,5,127,0,0,1673,1672,1,0,0,0,1673,
  	1674,1,0,0,0,1674,1676,1,0,0,0,1675,1677,5,157,0,0,1676,1675,1,0,0,0,
  	1676,1677,1,0,0,0,1677,1678,1,0,0,0,1678,1680,3,202,101,0,1679,1669,1,
  	0,0,0,1680,1683,1,0,0,0,1681,1679,1,0,0,0,1681,1682,1,0,0,0,1682,183,
  	1,0,0,0,1683,1681,1,0,0,0,1684,1691,3,186,93,0,1685,1687,5,157,0,0,1686,
  	1685,1,0,0,0,1686,1687,1,0,0,0,1687,1688,1,0,0,0,1688,1690,3,186,93,0,
  	1689,1686,1,0,0,0,1690,1693,1,0,0,0,1691,1689,1,0,0,0,1691,1692,1,0,0,
  	0,1692,185,1,0,0,0,1693,1691,1,0,0,0,1694,1696,5,127,0,0,1695,1697,5,
  	157,0,0,1696,1695,1,0,0,0,1696,1697,1,0,0,0,1697,1698,1,0,0,0,1698,1699,
  	3,200,100,0,1699,187,1,0,0,0,1700,1702,5,108,0,0,1701,1703,5,157,0,0,
  	1702,1701,1,0,0,0,1702,1703,1,0,0,0,1703,1708,1,0,0,0,1704,1709,5,119,
  	0,0,1705,1706,5,93,0,0,1706,1707,5,157,0,0,1707,1709,5,119,0,0,1708,1704,
  	1,0,0,0,1708,1705,1,0,0,0,1708,1709,1,0,0,0,1709,1711,1,0,0,0,1710,1712,
  	5,157,0,0,1711,1710,1,0,0,0,1711,1712,1,0,0,0,1712,1727,1,0,0,0,1713,
  	1715,3,196,98,0,1714,1713,1,0,0,0,1714,1715,1,0,0,0,1715,1717,1,0,0,0,
  	1716,1718,5,157,0,0,1717,1716,1,0,0,0,1717,1718,1,0,0,0,1718,1719,1,0,
  	0,0,1719,1721,5,12,0,0,1720,1722,5,157,0,0,1721,1720,1,0,0,0,1721,1722,
  	1,0,0,0,1722,1724,1,0,0,0,1723,1725,3,198,99,0,1724,1723,1,0,0,0,1724,
  	1725,1,0,0,0,1725,1728,1,0,0,0,1726,1728,3,294,147,0,1727,1714,1,0,0,
  	0,1727,1726,1,0,0,0,1727,1728,1,0,0,0,1728,1733,1,0,0,0,1729,1731,5,157,
  	0,0,1730,1729,1,0,0,0,1730,1731,1,0,0,0,1731,1732,1,0,0,0,1732,1734,3,
  	190,95,0,1733,1730,1,0,0,0,1733,1734,1,0,0,0,1734,189,1,0,0,0,1735,1737,
  	5,2,0,0,1736,1738,5,157,0,0,1737,1736,1,0,0,0,1737,1738,1,0,0,0,1738,
  	1739,1,0,0,0,1739,1741,3,284,142,0,1740,1742,5,157,0,0,1741,1740,1,0,
  	0,0,1741,1742,1,0,0,0,1742,1743,1,0,0,0,1743,1745,5,3,0,0,1744,1746,5,
  	157,0,0,1745,1744,1,0,0,0,1745,1746,1,0,0,0,1746,1747,1,0,0,0,1747,1756,
  	3,284,142,0,1748,1750,5,157,0,0,1749,1748,1,0,0,0,1749,1750,1,0,0,0,1750,
  	1751,1,0,0,0,1751,1753,5,11,0,0,1752,1754,5,157,0,0,1753,1752,1,0,0,0,
  	1753,1754,1,0,0,0,1754,1755,1,0,0,0,1755,1757,3,162,81,0,1756,1749,1,
  	0,0,0,1756,1757,1,0,0,0,1757,1777,1,0,0,0,1758,1760,5,157,0,0,1759,1758,
  	1,0,0,0,1759,1760,1,0,0,0,1760,1761,1,0,0,0,1761,1763,5,11,0,0,1762,1764,
  	5,157,0,0,1763,1762,1,0,0,0,1763,1764,1,0,0,0,1764,1765,1,0,0,0,1765,
  	1767,3,194,97,0,1766,1768,5,157,0,0,1767,1766,1,0,0,0,1767,1768,1,0,0,
  	0,1768,1769,1,0,0,0,1769,1771,5,3,0,0,1770,1772,5,157,0,0,1771,1770,1,
  	0,0,0,1771,1772,1,0,0,0,1772,1773,1,0,0,0,1773,1775,3,192,96,0,1774,1776,
  	5,157,0,0,1775,1774,1,0,0,0,1775,1776,1,0,0,0,1776,1778,1,0,0,0,1777,
  	1759,1,0,0,0,1777,1778,1,0,0,0,1778,1779,1,0,0,0,1779,1780,5,4,0,0,1780,
  	191,1,0,0,0,1781,1783,5,9,0,0,1782,1784,5,157,0,0,1783,1782,1,0,0,0,1783,
  	1784,1,0,0,0,1784,1786,1,0,0,0,1785,1787,3,150,75,0,1786,1785,1,0,0,0,
  	1786,1787,1,0,0,0,1787,1789,1,0,0,0,1788,1790,5,157,0,0,1789,1788,1,0,
  	0,0,1789,1790,1,0,0,0,1790,1791,1,0,0,0,1791,1792,5,10,0,0,1792,193,1,
  	0,0,0,1793,1795,5,9,0,0,1794,1796,5,157,0,0,1795,1794,1,0,0,0,1795,1796,
  	1,0,0,0,1796,1798,1,0,0,0,1797,1799,3,150,75,0,1798,1797,1,0,0,0,1798,
  	1799,1,0,0,0,1799,1801,1,0,0,0,1800,1802,5,157,0,0,1801,1800,1,0,0,0,
  	1801,1802,1,0,0,0,1802,1803,1,0,0,0,1803,1804,5,10,0,0,1804,195,1,0,0,
  	0,1805,1806,5,145,0,0,1806,197,1,0,0,0,1807,1808,5,145,0,0,1808,199,1,
  	0,0,0,1809,1810,3,298,149,0,1810,201,1,0,0,0,1811,1812,3,298,149,0,1812,
  	203,1,0,0,0,1813,1814,3,206,103,0,1814,205,1,0,0,0,1815,1822,3,208,104,
  	0,1816,1817,5,157,0,0,1817,1818,5,120,0,0,1818,1819,5,157,0,0,1819,1821,
  	3,208,104,0,1820,1816,1,0,0,0,1821,1824,1,0,0,0,1822,1820,1,0,0,0,1822,
  	1823,1,0,0,0,1823,207,1,0,0,0,1824,1822,1,0,0,0,1825,1832,3,210,105,0,
  	1826,1827,5,157,0,0,1827,1828,5,121,0,0,1828,1829,5,157,0,0,1829,1831,
  	3,210,105,0,1830,1826,1,0,0,0,1831,1834,1,0,0,0,1832,1830,1,0,0,0,1832,
  	1833,1,0,0,0,1833,209,1,0,0,0,1834,1832,1,0,0,0,1835,1842,3,212,106,0,
  	1836,1837,5,157,0,0,1837,1838,5,122,0,0,1838,1839,5,157,0,0,1839,1841,
  	3,212,106,0,1840,1836,1,0,0,0,1841,1844,1,0,0,0,1842,1840,1,0,0,0,1842,
  	1843,1,0,0,0,1843,211,1,0,0,0,1844,1842,1,0,0,0,1845,1847,5,123,0,0,1846,
  	1848,5,157,0,0,1847,1846,1,0,0,0,1847,1848,1,0,0,0,1848,1850,1,0,0,0,
  	1849,1845,1,0,0,0,1850,1853,1,0,0,0,1851,1849,1,0,0,0,1851,1852,1,0,0,
  	0,1852,1854,1,0,0,0,1853,1851,1,0,0,0,1854,1855,3,214,107,0,1855,213,
  	1,0,0,0,1856,1866,3,218,109,0,1857,1859,5,157,0,0,1858,1857,1,0,0,0,1858,
  	1859,1,0,0,0,1859,1860,1,0,0,0,1860,1862,3,216,108,0,1861,1863,5,157,
  	0,0,1862,1861,1,0,0,0,1862,1863,1,0,0,0,1863,1864,1,0,0,0,1864,1865,3,
  	218,109,0,1865,1867,1,0,0,0,1866,1858,1,0,0,0,1866,1867,1,0,0,0,1867,
  	1905,1,0,0,0,1868,1870,3,218,109,0,1869,1871,5,157,0,0,1870,1869,1,0,
  	0,0,1870,1871,1,0,0,0,1871,1872,1,0,0,0,1872,1874,5,124,0,0,1873,1875,
  	5,157,0,0,1874,1873,1,0,0,0,1874,1875,1,0,0,0,1875,1876,1,0,0,0,1876,
  	1877,3,218,109,0,1877,1878,1,0,0,0,1878,1879,6,107,-1,0,1879,1905,1,0,
  	0,0,1880,1882,3,218,109,0,1881,1883,5,157,0,0,1882,1881,1,0,0,0,1882,
  	1883,1,0,0,0,1883,1884,1,0,0,0,1884,1886,3,216,108,0,1885,1887,5,157,
  	0,0,1886,1885,1,0,0,0,1886,1887,1,0,0,0,1887,1888,1,0,0,0,1888,1898,3,
  	218,109,0,1889,1891,5,157,0,0,1890,1889,1,0,0,0,1890,1891,1,0,0,0,1891,
  	1892,1,0,0,0,1892,1894,3,216,108,0,1893,1895,5,157,0,0,1894,1893,1,0,
  	0,0,1894,1895,1,0,0,0,1895,1896,1,0,0,0,1896,1897,3,218,109,0,1897,1899,
  	1,0,0,0,1898,1890,1,0,0,0,1899,1900,1,0,0,0,1900,1898,1,0,0,0,1900,1901,
  	1,0,0,0,1901,1902,1,0,0,0,1902,1903,6,107,-1,0,1903,1905,1,0,0,0,1904,
  	1856,1,0,0,0,1904,1868,1,0,0,0,1904,1880,1,0,0,0,1905,215,1,0,0,0,1906,
  	1907,7,2,0,0,1907,217,1,0,0,0,1908,1919,3,220,110,0,1909,1911,5,157,0,
  	0,1910,1909,1,0,0,0,1910,1911,1,0,0,0,1911,1912,1,0,0,0,1912,1914,5,11,
  	0,0,1913,1915,5,157,0,0,1914,1913,1,0,0,0,1914,1915,1,0,0,0,1915,1916,
  	1,0,0,0,1916,1918,3,220,110,0,1917,1910,1,0,0,0,1918,1921,1,0,0,0,1919,
  	1917,1,0,0,0,1919,1920,1,0,0,0,1920,219,1,0,0,0,1921,1919,1,0,0,0,1922,
  	1933,3,222,111,0,1923,1925,5,157,0,0,1924,1923,1,0,0,0,1924,1925,1,0,
  	0,0,1925,1926,1,0,0,0,1926,1928,5,18,0,0,1927,1929,5,157,0,0,1928,1927,
  	1,0,0,0,1928,1929,1,0,0,0,1929,1930,1,0,0,0,1930,1932,3,222,111,0,1931,
  	1924,1,0,0,0,1932,1935,1,0,0,0,1933,1931,1,0,0,0,1933,1934,1,0,0,0,1934,
  	221,1,0,0,0,1935,1933,1,0,0,0,1936,1948,3,226,113,0,1937,1939,5,157,0,
  	0,1938,1937,1,0,0,0,1938,1939,1,0,0,0,1939,1940,1,0,0,0,1940,1942,3,224,
  	112,0,1941,1943,5,157,0,0,1942,1941,1,0,0,0,1942,1943,1,0,0,0,1943,1944,
  	1,0,0,0,1944,1945,3,226,113,0,1945,1947,1,0,0,0,1946,1938,1,0,0,0,1947,
  	1950,1,0,0,0,1948,1946,1,0,0,0,1948,1949,1,0,0,0,1949,223,1,0,0,0,1950,
  	1948,1,0,0,0,1951,1952,7,3,0,0,1952,225,1,0,0,0,1953,1965,3,230,115,0,
  	1954,1956,5,157,0,0,1955,1954,1,0,0,0,1955,1956,1,0,0,0,1956,1957,1,0,
  	0,0,1957,1959,3,228,114,0,1958,1960,5,157,0,0,1959,1958,1,0,0,0,1959,
  	1960,1,0,0,0,1960,1961,1,0,0,0,1961,1962,3,230,115,0,1962,1964,1,0,0,
  	0,1963,1955,1,0,0,0,1964,1967,1,0,0,0,1965,1963,1,0,0,0,1965,1966,1,0,
  	0,0,1966,227,1,0,0,0,1967,1965,1,0,0,0,1968,1969,7,4,0,0,1969,229,1,0,
  	0,0,1970,1982,3,234,117,0,1971,1973,5,157,0,0,1972,1971,1,0,0,0,1972,
  	1973,1,0,0,0,1973,1974,1,0,0,0,1974,1976,3,232,116,0,1975,1977,5,157,
  	0,0,1976,1975,1,0,0,0,1976,1977,1,0,0,0,1977,1978,1,0,0,0,1978,1979,3,
  	234,117,0,1979,1981,1,0,0,0,1980,1972,1,0,0,0,1981,1984,1,0,0,0,1982,
  	1980,1,0,0,0,1982,1983,1,0,0,0,1983,231,1,0,0,0,1984,1982,1,0,0,0,1985,
  	1986,7,5,0,0,1986,233,1,0,0,0,1987,1998,3,236,118,0,1988,1990,5,157,0,
  	0,1989,1988,1,0,0,0,1989,1990,1,0,0,0,1990,1991,1,0,0,0,1991,1993,5,24,
  	0,0,1992,1994,5,157,0,0,1993,1992,1,0,0,0,1993,1994,1,0,0,0,1994,1995,
  	1,0,0,0,1995,1997,3,236,118,0,1996,1989,1,0,0,0,1997,2000,1,0,0,0,1998,
  	1996,1,0,0,0,1998,1999,1,0,0,0,1999,235,1,0,0,0,2000,1998,1,0,0,0,2001,
  	2003,5,125,0,0,2002,2004,5,157,0,0,2003,2002,1,0,0,0,2003,2004,1,0,0,
  	0,2004,2006,1,0,0,0,2005,2001,1,0,0,0,2006,2009,1,0,0,0,2007,2005,1,0,
  	0,0,2007,2008,1,0,0,0,2008,2010,1,0,0,0,2009,2007,1,0,0,0,2010,2015,3,
  	238,119,0,2011,2013,5,157,0,0,2012,2011,1,0,0,0,2012,2013,1,0,0,0,2013,
  	2014,1,0,0,0,2014,2016,5,126,0,0,2015,2012,1,0,0,0,2015,2016,1,0,0,0,
  	2016,237,1,0,0,0,2017,2025,3,248,124,0,2018,2026,3,242,121,0,2019,2021,
  	3,240,120,0,2020,2019,1,0,0,0,2021,2022,1,0,0,0,2022,2020,1,0,0,0,2022,
  	2023,1,0,0,0,2023,2026,1,0,0,0,2024,2026,3,246,123,0,2025,2018,1,0,0,
  	0,2025,2020,1,0,0,0,2025,2024,1,0,0,0,2025,2026,1,0,0,0,2026,239,1,0,
  	0,0,2027,2028,5,157,0,0,2028,2030,5,128,0,0,2029,2031,5,157,0,0,2030,
  	2029,1,0,0,0,2030,2031,1,0,0,0,2031,2032,1,0,0,0,2032,2047,3,248,124,
  	0,2033,2034,5,7,0,0,2034,2035,3,204,102,0,2035,2036,5,8,0,0,2036,2047,
  	1,0,0,0,2037,2039,5,7,0,0,2038,2040,3,204,102,0,2039,2038,1,0,0,0,2039,
  	2040,1,0,0,0,2040,2041,1,0,0,0,2041,2043,5,127,0,0,2042,2044,3,204,102,
  	0,2043,2042,1,0,0,0,2043,2044,1,0,0,0,2044,2045,1,0,0,0,2045,2047,5,8,
  	0,0,2046,2027,1,0,0,0,2046,2033,1,0,0,0,2046,2037,1,0,0,0,2047,241,1,
  	0,0,0,2048,2060,3,244,122,0,2049,2050,5,157,0,0,2050,2051,5,129,0,0,2051,
  	2052,5,157,0,0,2052,2060,5,105,0,0,2053,2054,5,157,0,0,2054,2055,5,130,
  	0,0,2055,2056,5,157,0,0,2056,2060,5,105,0,0,2057,2058,5,157,0,0,2058,
  	2060,5,131,0,0,2059,2048,1,0,0,0,2059,2049,1,0,0,0,2059,2053,1,0,0,0,
  	2059,2057,1,0,0,0,2060,2062,1,0,0,0,2061,2063,5,157,0,0,2062,2061,1,0,
  	0,0,2062,2063,1,0,0,0,2063,2064,1,0,0,0,2064,2065,3,248,124,0,2065,243,
  	1,0,0,0,2066,2068,5,157,0,0,2067,2066,1,0,0,0,2067,2068,1,0,0,0,2068,
  	2069,1,0,0,0,2069,2070,5,25,0,0,2070,245,1,0,0,0,2071,2072,5,157,0,0,
  	2072,2073,5,132,0,0,2073,2074,5,157,0,0,2074,2082,5,133,0,0,2075,2076,
  	5,157,0,0,2076,2077,5,132,0,0,2077,2078,5,157,0,0,2078,2079,5,123,0,0,
  	2079,2080,5,157,0,0,2080,2082,5,133,0,0,2081,2071,1,0,0,0,2081,2075,1,
  	0,0,0,2082,247,1,0,0,0,2083,2090,3,250,125,0,2084,2086,5,157,0,0,2085,
  	2084,1,0,0,0,2085,2086,1,0,0,0,2086,2087,1,0,0,0,2087,2089,3,278,139,
  	0,2088,2085,1,0,0,0,2089,2092,1,0,0,0,2090,2088,1,0,0,0,2090,2091,1,0,
  	0,0,2091,249,1,0,0,0,2092,2090,1,0,0,0,2093,2103,3,252,126,0,2094,2103,
  	3,288,144,0,2095,2103,3,280,140,0,2096,2103,3,264,132,0,2097,2103,3,266,
  	133,0,2098,2103,3,272,136,0,2099,2103,3,274,137,0,2100,2103,3,276,138,
  	0,2101,2103,3,284,142,0,2102,2093,1,0,0,0,2102,2094,1,0,0,0,2102,2095,
  	1,0,0,0,2102,2096,1,0,0,0,2102,2097,1,0,0,0,2102,2098,1,0,0,0,2102,2099,
  	1,0,0,0,2102,2100,1,0,0,0,2102,2101,1,0,0,0,2103,251,1,0,0,0,2104,2111,
  	3,286,143,0,2105,2111,5,143,0,0,2106,2111,3,254,127,0,2107,2111,5,133,
  	0,0,2108,2111,3,256,128,0,2109,2111,3,260,130,0,2110,2104,1,0,0,0,2110,
  	2105,1,0,0,0,2110,2106,1,0,0,0,2110,2107,1,0,0,0,2110,2108,1,0,0,0,2110,
  	2109,1,0,0,0,2111,253,1,0,0,0,2112,2113,7,6,0,0,2113,255,1,0,0,0,2114,
  	2116,5,7,0,0,2115,2117,5,157,0,0,2116,2115,1,0,0,0,2116,2117,1,0,0,0,
  	2117,2131,1,0,0,0,2118,2120,3,204,102,0,2119,2121,5,157,0,0,2120,2119,
  	1,0,0,0,2120,2121,1,0,0,0,2121,2128,1,0,0,0,2122,2124,3,258,129,0,2123,
  	2125,5,157,0,0,2124,2123,1,0,0,0,2124,2125,1,0,0,0,2125,2127,1,0,0,0,
  	2126,2122,1,0,0,0,2127,2130,1,0,0,0,2128,2126,1,0,0,0,2128,2129,1,0,0,
  	0,2129,2132,1,0,0,0,2130,2128,1,0,0,0,2131,2118,1,0,0,0,2131,2132,1,0,
  	0,0,2132,2133,1,0,0,0,2133,2134,5,8,0,0,2134,257,1,0,0,0,2135,2137,5,
  	3,0,0,2136,2138,5,157,0,0,2137,2136,1,0,0,0,2137,2138,1,0,0,0,2138,2140,
  	1,0,0,0,2139,2141,3,204,102,0,2140,2139,1,0,0,0,2140,2141,1,0,0,0,2141,
  	259,1,0,0,0,2142,2144,5,9,0,0,2143,2145,5,157,0,0,2144,2143,1,0,0,0,2144,
  	2145,1,0,0,0,2145,2146,1,0,0,0,2146,2148,3,262,131,0,2147,2149,5,157,
  	0,0,2148,2147,1,0,0,0,2148,2149,1,0,0,0,2149,2160,1,0,0,0,2150,2152,5,
  	3,0,0,2151,2153,5,157,0,0,2152,2151,1,0,0,0,2152,2153,1,0,0,0,2153,2154,
  	1,0,0,0,2154,2156,3,262,131,0,2155,2157,5,157,0,0,2156,2155,1,0,0,0,2156,
  	2157,1,0,0,0,2157,2159,1,0,0,0,2158,2150,1,0,0,0,2159,2162,1,0,0,0,2160,
  	2158,1,0,0,0,2160,2161,1,0,0,0,2161,2163,1,0,0,0,2162,2160,1,0,0,0,2163,
  	2164,5,10,0,0,2164,261,1,0,0,0,2165,2168,3,300,150,0,2166,2168,5,143,
  	0,0,2167,2165,1,0,0,0,2167,2166,1,0,0,0,2168,2170,1,0,0,0,2169,2171,5,
  	157,0,0,2170,2169,1,0,0,0,2170,2171,1,0,0,0,2171,2172,1,0,0,0,2172,2174,
  	5,127,0,0,2173,2175,5,157,0,0,2174,2173,1,0,0,0,2174,2175,1,0,0,0,2175,
  	2176,1,0,0,0,2176,2177,3,204,102,0,2177,263,1,0,0,0,2178,2180,5,2,0,0,
  	2179,2181,5,157,0,0,2180,2179,1,0,0,0,2180,2181,1,0,0,0,2181,2182,1,0,
  	0,0,2182,2184,3,204,102,0,2183,2185,5,157,0,0,2184,2183,1,0,0,0,2184,
  	2185,1,0,0,0,2185,2186,1,0,0,0,2186,2187,5,4,0,0,2187,265,1,0,0,0,2188,
  	2190,5,136,0,0,2189,2191,5,157,0,0,2190,2189,1,0,0,0,2190,2191,1,0,0,
  	0,2191,2192,1,0,0,0,2192,2194,5,2,0,0,2193,2195,5,157,0,0,2194,2193,1,
  	0,0,0,2194,2195,1,0,0,0,2195,2196,1,0,0,0,2196,2198,5,108,0,0,2197,2199,
  	5,157,0,0,2198,2197,1,0,0,0,2198,2199,1,0,0,0,2199,2200,1,0,0,0,2200,
  	2237,5,4,0,0,2201,2203,3,268,134,0,2202,2204,5,157,0,0,2203,2202,1,0,
  	0,0,2203,2204,1,0,0,0,2204,2205,1,0,0,0,2205,2207,5,2,0,0,2206,2208,5,
  	157,0,0,2207,2206,1,0,0,0,2207,2208,1,0,0,0,2208,2213,1,0,0,0,2209,2211,
  	5,107,0,0,2210,2212,5,157,0,0,2211,2210,1,0,0,0,2211,2212,1,0,0,0,2212,
  	2214,1,0,0,0,2213,2209,1,0,0,0,2213,2214,1,0,0,0,2214,2232,1,0,0,0,2215,
  	2217,3,270,135,0,2216,2218,5,157,0,0,2217,2216,1,0,0,0,2217,2218,1,0,
  	0,0,2218,2229,1,0,0,0,2219,2221,5,3,0,0,2220,2222,5,157,0,0,2221,2220,
  	1,0,0,0,2221,2222,1,0,0,0,2222,2223,1,0,0,0,2223,2225,3,270,135,0,2224,
  	2226,5,157,0,0,2225,2224,1,0,0,0,2225,2226,1,0,0,0,2226,2228,1,0,0,0,
  	2227,2219,1,0,0,0,2228,2231,1,0,0,0,2229,2227,1,0,0,0,2229,2230,1,0,0,
  	0,2230,2233,1,0,0,0,2231,2229,1,0,0,0,2232,2215,1,0,0,0,2232,2233,1,0,
  	0,0,2233,2234,1,0,0,0,2234,2235,5,4,0,0,2235,2237,1,0,0,0,2236,2188,1,
  	0,0,0,2236,2201,1,0,0,0,2237,267,1,0,0,0,2238,2239,3,300,150,0,2239,269,
  	1,0,0,0,2240,2242,3,300,150,0,2241,2243,5,157,0,0,2242,2241,1,0,0,0,2242,
  	2243,1,0,0,0,2243,2244,1,0,0,0,2244,2245,5,127,0,0,2245,2247,5,6,0,0,
  	2246,2248,5,157,0,0,2247,2246,1,0,0,0,2247,2248,1,0,0,0,2248,2250,1,0,
  	0,0,2249,2240,1,0,0,0,2249,2250,1,0,0,0,2250,2251,1,0,0,0,2251,2252,3,
  	204,102,0,2252,271,1,0,0,0,2253,2258,3,172,86,0,2254,2256,5,157,0,0,2255,
  	2254,1,0,0,0,2255,2256,1,0,0,0,2256,2257,1,0,0,0,2257,2259,3,174,87,0,
  	2258,2255,1,0,0,0,2259,2260,1,0,0,0,2260,2258,1,0,0,0,2260,2261,1,0,0,
  	0,2261,273,1,0,0,0,2262,2264,5,137,0,0,2263,2265,5,157,0,0,2264,2263,
  	1,0,0,0,2264,2265,1,0,0,0,2265,2266,1,0,0,0,2266,2268,5,9,0,0,2267,2269,
  	5,157,0,0,2268,2267,1,0,0,0,2268,2269,1,0,0,0,2269,2270,1,0,0,0,2270,
  	2272,5,97,0,0,2271,2273,5,157,0,0,2272,2271,1,0,0,0,2272,2273,1,0,0,0,
  	2273,2274,1,0,0,0,2274,2279,3,164,82,0,2275,2277,5,157,0,0,2276,2275,
  	1,0,0,0,2276,2277,1,0,0,0,2277,2278,1,0,0,0,2278,2280,3,162,81,0,2279,
  	2276,1,0,0,0,2279,2280,1,0,0,0,2280,2282,1,0,0,0,2281,2283,5,157,0,0,
  	2282,2281,1,0,0,0,2282,2283,1,0,0,0,2283,2284,1,0,0,0,2284,2285,5,10,
  	0,0,2285,275,1,0,0,0,2286,2288,5,136,0,0,2287,2289,5,157,0,0,2288,2287,
  	1,0,0,0,2288,2289,1,0,0,0,2289,2290,1,0,0,0,2290,2292,5,9,0,0,2291,2293,
  	5,157,0,0,2292,2291,1,0,0,0,2292,2293,1,0,0,0,2293,2294,1,0,0,0,2294,
  	2296,5,97,0,0,2295,2297,5,157,0,0,2296,2295,1,0,0,0,2296,2297,1,0,0,0,
  	2297,2298,1,0,0,0,2298,2303,3,164,82,0,2299,2301,5,157,0,0,2300,2299,
  	1,0,0,0,2300,2301,1,0,0,0,2301,2302,1,0,0,0,2302,2304,3,162,81,0,2303,
  	2300,1,0,0,0,2303,2304,1,0,0,0,2304,2306,1,0,0,0,2305,2307,5,157,0,0,
  	2306,2305,1,0,0,0,2306,2307,1,0,0,0,2307,2308,1,0,0,0,2308,2309,5,10,
  	0,0,2309,277,1,0,0,0,2310,2312,5,5,0,0,2311,2313,5,157,0,0,2312,2311,
  	1,0,0,0,2312,2313,1,0,0,0,2313,2316,1,0,0,0,2314,2317,3,292,146,0,2315,
  	2317,5,108,0,0,2316,2314,1,0,0,0,2316,2315,1,0,0,0,2317,279,1,0,0,0,2318,
  	2323,5,138,0,0,2319,2321,5,157,0,0,2320,2319,1,0,0,0,2320,2321,1,0,0,
  	0,2321,2322,1,0,0,0,2322,2324,3,282,141,0,2323,2320,1,0,0,0,2324,2325,
  	1,0,0,0,2325,2323,1,0,0,0,2325,2326,1,0,0,0,2326,2341,1,0,0,0,2327,2329,
  	5,138,0,0,2328,2330,5,157,0,0,2329,2328,1,0,0,0,2329,2330,1,0,0,0,2330,
  	2331,1,0,0,0,2331,2336,3,204,102,0,2332,2334,5,157,0,0,2333,2332,1,0,
  	0,0,2333,2334,1,0,0,0,2334,2335,1,0,0,0,2335,2337,3,282,141,0,2336,2333,
  	1,0,0,0,2337,2338,1,0,0,0,2338,2336,1,0,0,0,2338,2339,1,0,0,0,2339,2341,
  	1,0,0,0,2340,2318,1,0,0,0,2340,2327,1,0,0,0,2341,2350,1,0,0,0,2342,2344,
  	5,157,0,0,2343,2342,1,0,0,0,2343,2344,1,0,0,0,2344,2345,1,0,0,0,2345,
  	2347,5,139,0,0,2346,2348,5,157,0,0,2347,2346,1,0,0,0,2347,2348,1,0,0,
  	0,2348,2349,1,0,0,0,2349,2351,3,204,102,0,2350,2343,1,0,0,0,2350,2351,
  	1,0,0,0,2351,2353,1,0,0,0,2352,2354,5,157,0,0,2353,2352,1,0,0,0,2353,
  	2354,1,0,0,0,2354,2355,1,0,0,0,2355,2356,5,140,0,0,2356,281,1,0,0,0,2357,
  	2359,5,141,0,0,2358,2360,5,157,0,0,2359,2358,1,0,0,0,2359,2360,1,0,0,
  	0,2360,2361,1,0,0,0,2361,2363,3,204,102,0,2362,2364,5,157,0,0,2363,2362,
  	1,0,0,0,2363,2364,1,0,0,0,2364,2365,1,0,0,0,2365,2367,5,142,0,0,2366,
  	2368,5,157,0,0,2367,2366,1,0,0,0,2367,2368,1,0,0,0,2368,2369,1,0,0,0,
  	2369,2370,3,204,102,0,2370,283,1,0,0,0,2371,2372,3,300,150,0,2372,285,
  	1,0,0,0,2373,2376,3,296,148,0,2374,2376,3,294,147,0,2375,2373,1,0,0,0,
  	2375,2374,1,0,0,0,2376,287,1,0,0,0,2377,2380,5,26,0,0,2378,2381,3,300,
  	150,0,2379,2381,5,145,0,0,2380,2378,1,0,0,0,2380,2379,1,0,0,0,2381,289,
  	1,0,0,0,2382,2384,3,250,125,0,2383,2385,5,157,0,0,2384,2383,1,0,0,0,2384,
  	2385,1,0,0,0,2385,2386,1,0,0,0,2386,2387,3,278,139,0,2387,291,1,0,0,0,
  	2388,2389,3,298,149,0,2389,293,1,0,0,0,2390,2391,5,145,0,0,2391,295,1,
  	0,0,0,2392,2393,5,152,0,0,2393,297,1,0,0,0,2394,2395,3,300,150,0,2395,
  	299,1,0,0,0,2396,2402,5,153,0,0,2397,2398,5,156,0,0,2398,2402,6,150,-1,
  	0,2399,2402,5,146,0,0,2400,2402,3,302,151,0,2401,2396,1,0,0,0,2401,2397,
  	1,0,0,0,2401,2399,1,0,0,0,2401,2400,1,0,0,0,2402,301,1,0,0,0,2403,2404,
  	7,7,0,0,2404,303,1,0,0,0,2405,2406,7,8,0,0,2406,305,1,0,0,0,2407,2408,
  	7,9,0,0,2408,307,1,0,0,0,2409,2410,7,10,0,0,2410,309,1,0,0,0,408,312,
  	316,321,325,330,333,337,340,363,369,373,376,382,385,389,393,397,402,406,
  	413,417,425,429,439,443,447,452,465,469,477,480,488,491,508,511,515,521,
  	524,538,542,564,568,571,574,577,580,584,589,593,603,607,612,617,622,628,
  	632,636,641,648,652,656,659,663,667,671,676,680,686,690,702,706,710,714,
  	719,731,735,739,743,747,749,753,757,759,773,777,781,785,790,793,797,801,
<<<<<<< HEAD
  	803,807,811,813,839,847,853,863,871,877,883,905,916,938,942,947,958,962,
  	966,974,978,982,988,992,996,1002,1006,1010,1014,1018,1022,1028,1035,1040,
  	1046,1066,1070,1078,1088,1093,1098,1102,1107,1113,1118,1121,1125,1129,
  	1133,1139,1143,1148,1153,1157,1160,1164,1168,1172,1176,1180,1186,1190,
  	1195,1199,1208,1214,1222,1226,1230,1234,1241,1244,1247,1250,1256,1259,
  	1263,1267,1271,1274,1278,1288,1294,1301,1314,1318,1322,1326,1331,1336,
  	1340,1346,1350,1354,1358,1363,1369,1372,1378,1381,1387,1391,1395,1399,
  	1403,1408,1413,1417,1422,1425,1434,1443,1448,1461,1464,1472,1476,1481,
  	1486,1490,1495,1501,1506,1513,1517,1521,1523,1527,1529,1533,1535,1541,
  	1547,1551,1554,1557,1563,1566,1569,1573,1579,1582,1585,1589,1593,1597,
  	1599,1603,1605,1609,1611,1615,1617,1623,1627,1631,1635,1639,1643,1647,
  	1651,1655,1658,1664,1668,1672,1675,1680,1685,1690,1695,1701,1707,1710,
  	1713,1716,1720,1723,1726,1729,1732,1736,1740,1744,1748,1752,1755,1758,
  	1762,1766,1770,1774,1776,1782,1785,1788,1794,1797,1800,1821,1831,1841,
  	1846,1850,1857,1861,1865,1869,1873,1881,1885,1889,1893,1899,1903,1909,
  	1913,1918,1923,1927,1932,1937,1941,1947,1954,1958,1964,1971,1975,1981,
  	1988,1992,1997,2002,2006,2011,2014,2021,2024,2029,2038,2042,2045,2058,
  	2061,2066,2080,2084,2089,2101,2109,2115,2119,2123,2127,2130,2136,2139,
  	2143,2147,2151,2155,2159,2166,2169,2173,2179,2183,2189,2193,2197,2202,
  	2206,2210,2212,2216,2220,2224,2228,2231,2235,2241,2246,2248,2254,2259,
  	2263,2267,2271,2275,2278,2281,2287,2291,2295,2299,2302,2305,2311,2315,
  	2319,2324,2328,2332,2337,2339,2342,2346,2349,2352,2358,2362,2366,2374,
  	2379,2383,2400
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
  	803,807,811,813,840,848,854,864,872,878,884,906,917,939,943,948,959,963,
  	967,975,979,983,989,993,997,1003,1007,1011,1015,1019,1023,1029,1036,1041,
  	1047,1067,1071,1079,1089,1094,1099,1103,1108,1114,1119,1122,1126,1130,
  	1134,1140,1144,1149,1154,1158,1161,1165,1169,1173,1177,1181,1187,1191,
  	1196,1200,1209,1215,1223,1227,1231,1235,1242,1245,1248,1251,1257,1260,
  	1264,1268,1272,1275,1279,1289,1295,1302,1315,1319,1323,1327,1332,1337,
  	1341,1347,1351,1355,1359,1364,1370,1373,1379,1382,1388,1392,1396,1400,
  	1404,1409,1414,1418,1423,1426,1435,1444,1449,1462,1465,1473,1477,1482,
  	1487,1491,1496,1502,1507,1514,1518,1522,1524,1528,1530,1534,1536,1542,
  	1548,1552,1555,1558,1564,1567,1570,1574,1580,1583,1586,1590,1594,1598,
  	1600,1604,1606,1610,1612,1616,1618,1624,1628,1632,1636,1640,1644,1648,
  	1652,1656,1659,1665,1669,1673,1676,1681,1686,1691,1696,1702,1708,1711,
  	1714,1717,1721,1724,1727,1730,1733,1737,1741,1745,1749,1753,1756,1759,
  	1763,1767,1771,1775,1777,1783,1786,1789,1795,1798,1801,1822,1832,1842,
  	1847,1851,1858,1862,1866,1870,1874,1882,1886,1890,1894,1900,1904,1910,
  	1914,1919,1924,1928,1933,1938,1942,1948,1955,1959,1965,1972,1976,1982,
  	1989,1993,1998,2003,2007,2012,2015,2022,2025,2030,2039,2043,2046,2059,
  	2062,2067,2081,2085,2090,2102,2110,2116,2120,2124,2128,2131,2137,2140,
  	2144,2148,2152,2156,2160,2167,2170,2174,2180,2184,2190,2194,2198,2203,
  	2207,2211,2213,2217,2221,2225,2229,2232,2236,2242,2247,2249,2255,2260,
  	2264,2268,2272,2276,2279,2282,2288,2292,2296,2300,2303,2306,2312,2316,
  	2320,2325,2329,2333,2338,2340,2343,2347,2350,2353,2359,2363,2367,2375,
  	2380,2384,2401
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
  	853,5,111,0,0,853,855,5,157,0,0,854,852,1,0,0,0,854,855,1,0,0,0,855,857,
  	1,0,0,0,856,858,5,125,0,0,857,856,1,0,0,0,857,858,1,0,0,0,858,859,1,0,
  	0,0,859,860,3,294,147,0,860,57,1,0,0,0,861,862,5,68,0,0,862,863,5,157,
  	0,0,863,871,5,65,0,0,864,865,5,65,0,0,865,867,5,157,0,0,866,868,5,125,
  	0,0,867,866,1,0,0,0,867,868,1,0,0,0,868,869,1,0,0,0,869,871,3,294,147,
  	0,870,861,1,0,0,0,870,864,1,0,0,0,871,59,1,0,0,0,872,873,5,68,0,0,873,
  	874,5,157,0,0,874,882,5,66,0,0,875,876,5,66,0,0,876,878,5,157,0,0,877,
  	879,5,125,0,0,878,877,1,0,0,0,878,879,1,0,0,0,879,880,1,0,0,0,880,882,
  	3,294,147,0,881,872,1,0,0,0,881,875,1,0,0,0,882,61,1,0,0,0,883,884,5,
  	67,0,0,884,887,5,157,0,0,885,886,5,105,0,0,886,888,5,157,0,0,887,885,
  	1,0,0,0,887,888,1,0,0,0,888,890,1,0,0,0,889,891,5,125,0,0,890,889,1,0,
  	0,0,890,891,1,0,0,0,891,892,1,0,0,0,892,893,3,294,147,0,893,63,1,0,0,
  	0,894,895,5,68,0,0,895,897,5,157,0,0,896,894,1,0,0,0,896,897,1,0,0,0,
  	897,898,1,0,0,0,898,899,5,69,0,0,899,65,1,0,0,0,900,901,5,70,0,0,901,
  	902,5,157,0,0,902,903,7,0,0,0,903,904,5,157,0,0,904,905,3,298,149,0,905,
  	67,1,0,0,0,906,907,5,71,0,0,907,908,5,157,0,0,908,909,5,60,0,0,909,910,
  	5,157,0,0,910,911,3,298,149,0,911,912,5,157,0,0,912,913,3,70,35,0,913,
  	69,1,0,0,0,914,919,3,72,36,0,915,919,3,74,37,0,916,919,3,76,38,0,917,
  	919,3,78,39,0,918,914,1,0,0,0,918,915,1,0,0,0,918,916,1,0,0,0,918,917,
  	1,0,0,0,919,71,1,0,0,0,920,921,5,74,0,0,921,922,5,157,0,0,922,923,3,292,
  	146,0,923,924,5,157,0,0,924,929,3,86,43,0,925,926,5,157,0,0,926,927,5,
  	72,0,0,927,928,5,157,0,0,928,930,3,204,102,0,929,925,1,0,0,0,929,930,
  	1,0,0,0,930,73,1,0,0,0,931,932,5,70,0,0,932,933,5,157,0,0,933,934,3,292,
  	146,0,934,75,1,0,0,0,935,936,5,73,0,0,936,937,5,157,0,0,937,938,5,78,
  	0,0,938,939,5,157,0,0,939,940,3,298,149,0,940,77,1,0,0,0,941,942,5,73,
  	0,0,942,943,5,157,0,0,943,944,3,292,146,0,944,945,5,157,0,0,945,946,5,
  	78,0,0,946,947,5,157,0,0,947,948,3,292,146,0,948,79,1,0,0,0,949,960,3,
  	82,41,0,950,952,5,157,0,0,951,950,1,0,0,0,951,952,1,0,0,0,952,953,1,0,
  	0,0,953,955,5,3,0,0,954,956,5,157,0,0,955,954,1,0,0,0,955,956,1,0,0,0,
  	956,957,1,0,0,0,957,959,3,82,41,0,958,951,1,0,0,0,959,962,1,0,0,0,960,
  	958,1,0,0,0,960,961,1,0,0,0,961,81,1,0,0,0,962,960,1,0,0,0,963,964,3,
  	292,146,0,964,965,5,157,0,0,965,966,3,86,43,0,966,83,1,0,0,0,967,968,
  	5,75,0,0,968,969,5,157,0,0,969,971,5,76,0,0,970,972,5,157,0,0,971,970,
  	1,0,0,0,971,972,1,0,0,0,972,973,1,0,0,0,973,975,5,2,0,0,974,976,5,157,
  	0,0,975,974,1,0,0,0,975,976,1,0,0,0,976,977,1,0,0,0,977,979,3,292,146,
  	0,978,980,5,157,0,0,979,978,1,0,0,0,979,980,1,0,0,0,980,981,1,0,0,0,981,
  	982,5,4,0,0,982,85,1,0,0,0,983,984,6,43,-1,0,984,1036,3,300,150,0,985,
  	987,5,92,0,0,986,988,5,157,0,0,987,986,1,0,0,0,987,988,1,0,0,0,988,989,
  	1,0,0,0,989,991,5,2,0,0,990,992,5,157,0,0,991,990,1,0,0,0,991,992,1,0,
  	0,0,992,993,1,0,0,0,993,995,3,80,40,0,994,996,5,157,0,0,995,994,1,0,0,
  	0,995,996,1,0,0,0,996,997,1,0,0,0,997,998,5,4,0,0,998,1036,1,0,0,0,999,
  	1001,3,300,150,0,1000,1002,5,157,0,0,1001,1000,1,0,0,0,1001,1002,1,0,
  	0,0,1002,1003,1,0,0,0,1003,1005,5,2,0,0,1004,1006,5,157,0,0,1005,1004,
  	1,0,0,0,1005,1006,1,0,0,0,1006,1007,1,0,0,0,1007,1009,3,80,40,0,1008,
  	1010,5,157,0,0,1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,
  	1011,1012,5,4,0,0,1012,1036,1,0,0,0,1013,1015,3,300,150,0,1014,1016,5,
  	157,0,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,1017,1019,
  	5,2,0,0,1018,1020,5,157,0,0,1019,1018,1,0,0,0,1019,1020,1,0,0,0,1020,
  	1021,1,0,0,0,1021,1023,3,86,43,0,1022,1024,5,157,0,0,1023,1022,1,0,0,
  	0,1023,1024,1,0,0,0,1024,1025,1,0,0,0,1025,1027,5,3,0,0,1026,1028,5,157,
  	0,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1029,1,0,0,0,1029,1031,3,
  	86,43,0,1030,1032,5,157,0,0,1031,1030,1,0,0,0,1031,1032,1,0,0,0,1032,
  	1033,1,0,0,0,1033,1034,5,4,0,0,1034,1036,1,0,0,0,1035,983,1,0,0,0,1035,
  	985,1,0,0,0,1035,999,1,0,0,0,1035,1013,1,0,0,0,1036,1041,1,0,0,0,1037,
  	1038,10,4,0,0,1038,1040,3,88,44,0,1039,1037,1,0,0,0,1040,1043,1,0,0,0,
  	1041,1039,1,0,0,0,1041,1042,1,0,0,0,1042,87,1,0,0,0,1043,1041,1,0,0,0,
  	1044,1048,3,90,45,0,1045,1047,3,90,45,0,1046,1045,1,0,0,0,1047,1050,1,
  	0,0,0,1048,1046,1,0,0,0,1048,1049,1,0,0,0,1049,89,1,0,0,0,1050,1048,1,
  	0,0,0,1051,1053,5,7,0,0,1052,1054,3,294,147,0,1053,1052,1,0,0,0,1053,
  	1054,1,0,0,0,1054,1055,1,0,0,0,1055,1056,5,8,0,0,1056,91,1,0,0,0,1057,
  	1060,3,94,47,0,1058,1060,3,96,48,0,1059,1057,1,0,0,0,1059,1058,1,0,0,
  	0,1060,93,1,0,0,0,1061,1062,5,79,0,0,1062,95,1,0,0,0,1063,1064,5,80,0,
  	0,1064,97,1,0,0,0,1065,1066,5,81,0,0,1066,1067,5,157,0,0,1067,1080,5,
  	82,0,0,1068,1069,5,81,0,0,1069,1070,5,157,0,0,1070,1071,5,82,0,0,1071,
  	1072,5,157,0,0,1072,1073,5,83,0,0,1073,1074,5,157,0,0,1074,1080,5,84,
  	0,0,1075,1080,5,86,0,0,1076,1080,5,87,0,0,1077,1080,5,88,0,0,1078,1080,
  	5,89,0,0,1079,1065,1,0,0,0,1079,1068,1,0,0,0,1079,1075,1,0,0,0,1079,1076,
  	1,0,0,0,1079,1077,1,0,0,0,1079,1078,1,0,0,0,1080,99,1,0,0,0,1081,1084,
  	3,102,51,0,1082,1084,3,104,52,0,1083,1081,1,0,0,0,1083,1082,1,0,0,0,1084,
  	101,1,0,0,0,1085,1086,5,94,0,0,1086,1087,5,157,0,0,1087,1088,5,91,0,0,
  	1088,1091,5,157,0,0,1089,1092,5,143,0,0,1090,1092,3,284,142,0,1091,1089,
  	1,0,0,0,1091,1090,1,0,0,0,1092,103,1,0,0,0,1093,1094,5,90,0,0,1094,1095,
  	5,157,0,0,1095,1096,3,284,142,0,1096,105,1,0,0,0,1097,1098,3,108,54,0,
  	1098,107,1,0,0,0,1099,1106,3,112,56,0,1100,1102,5,157,0,0,1101,1100,1,
  	0,0,0,1101,1102,1,0,0,0,1102,1103,1,0,0,0,1103,1105,3,110,55,0,1104,1101,
  	1,0,0,0,1105,1108,1,0,0,0,1106,1104,1,0,0,0,1106,1107,1,0,0,0,1107,1121,
  	1,0,0,0,1108,1106,1,0,0,0,1109,1111,3,146,73,0,1110,1112,5,157,0,0,1111,
  	1110,1,0,0,0,1111,1112,1,0,0,0,1112,1114,1,0,0,0,1113,1109,1,0,0,0,1114,
  	1115,1,0,0,0,1115,1113,1,0,0,0,1115,1116,1,0,0,0,1116,1117,1,0,0,0,1117,
  	1118,3,112,56,0,1118,1119,6,54,-1,0,1119,1121,1,0,0,0,1120,1099,1,0,0,
  	0,1120,1113,1,0,0,0,1121,109,1,0,0,0,1122,1123,5,92,0,0,1123,1124,5,157,
  	0,0,1124,1126,5,93,0,0,1125,1127,5,157,0,0,1126,1125,1,0,0,0,1126,1127,
  	1,0,0,0,1127,1128,1,0,0,0,1128,1135,3,112,56,0,1129,1131,5,92,0,0,1130,
  	1132,5,157,0,0,1131,1130,1,0,0,0,1131,1132,1,0,0,0,1132,1133,1,0,0,0,
  	1133,1135,3,112,56,0,1134,1122,1,0,0,0,1134,1129,1,0,0,0,1135,111,1,0,
  	0,0,1136,1139,3,114,57,0,1137,1139,3,116,58,0,1138,1136,1,0,0,0,1138,
  	1137,1,0,0,0,1139,113,1,0,0,0,1140,1142,3,122,61,0,1141,1143,5,157,0,
  	0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,1145,1,0,0,0,1144,1140,1,0,
  	0,0,1145,1148,1,0,0,0,1146,1144,1,0,0,0,1146,1147,1,0,0,0,1147,1149,1,
  	0,0,0,1148,1146,1,0,0,0,1149,1186,3,146,73,0,1150,1152,3,122,61,0,1151,
  	1153,5,157,0,0,1152,1151,1,0,0,0,1152,1153,1,0,0,0,1153,1155,1,0,0,0,
  	1154,1150,1,0,0,0,1155,1158,1,0,0,0,1156,1154,1,0,0,0,1156,1157,1,0,0,
  	0,1157,1159,1,0,0,0,1158,1156,1,0,0,0,1159,1166,3,120,60,0,1160,1162,
  	5,157,0,0,1161,1160,1,0,0,0,1161,1162,1,0,0,0,1162,1163,1,0,0,0,1163,
  	1165,3,120,60,0,1164,1161,1,0,0,0,1165,1168,1,0,0,0,1166,1164,1,0,0,0,
  	1166,1167,1,0,0,0,1167,1173,1,0,0,0,1168,1166,1,0,0,0,1169,1171,5,157,
  	0,0,1170,1169,1,0,0,0,1170,1171,1,0,0,0,1171,1172,1,0,0,0,1172,1174,3,
  	146,73,0,1173,1170,1,0,0,0,1173,1174,1,0,0,0,1174,1186,1,0,0,0,1175,1177,
  	3,122,61,0,1176,1178,5,157,0,0,1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,
  	1180,1,0,0,0,1179,1175,1,0,0,0,1180,1181,1,0,0,0,1181,1179,1,0,0,0,1181,
  	1182,1,0,0,0,1182,1183,1,0,0,0,1183,1184,6,57,-1,0,1184,1186,1,0,0,0,
  	1185,1146,1,0,0,0,1185,1156,1,0,0,0,1185,1179,1,0,0,0,1186,115,1,0,0,
  	0,1187,1189,3,118,59,0,1188,1190,5,157,0,0,1189,1188,1,0,0,0,1189,1190,
  	1,0,0,0,1190,1192,1,0,0,0,1191,1187,1,0,0,0,1192,1193,1,0,0,0,1193,1191,
  	1,0,0,0,1193,1194,1,0,0,0,1194,1195,1,0,0,0,1195,1196,3,114,57,0,1196,
  	117,1,0,0,0,1197,1199,3,122,61,0,1198,1200,5,157,0,0,1199,1198,1,0,0,
  	0,1199,1200,1,0,0,0,1200,1202,1,0,0,0,1201,1197,1,0,0,0,1202,1205,1,0,
  	0,0,1203,1201,1,0,0,0,1203,1204,1,0,0,0,1204,1212,1,0,0,0,1205,1203,1,
  	0,0,0,1206,1208,3,120,60,0,1207,1209,5,157,0,0,1208,1207,1,0,0,0,1208,
  	1209,1,0,0,0,1209,1211,1,0,0,0,1210,1206,1,0,0,0,1211,1214,1,0,0,0,1212,
  	1210,1,0,0,0,1212,1213,1,0,0,0,1213,1215,1,0,0,0,1214,1212,1,0,0,0,1215,
  	1216,3,144,72,0,1216,119,1,0,0,0,1217,1222,3,132,66,0,1218,1222,3,134,
  	67,0,1219,1222,3,138,69,0,1220,1222,3,142,71,0,1221,1217,1,0,0,0,1221,
  	1218,1,0,0,0,1221,1219,1,0,0,0,1221,1220,1,0,0,0,1222,121,1,0,0,0,1223,
  	1228,3,128,64,0,1224,1228,3,130,65,0,1225,1228,3,126,63,0,1226,1228,3,
  	124,62,0,1227,1223,1,0,0,0,1227,1224,1,0,0,0,1227,1225,1,0,0,0,1227,1226,
  	1,0,0,0,1228,123,1,0,0,0,1229,1247,5,94,0,0,1230,1231,5,157,0,0,1231,
  	1232,5,105,0,0,1232,1233,5,157,0,0,1233,1235,5,95,0,0,1234,1236,5,157,
  	0,0,1235,1234,1,0,0,0,1235,1236,1,0,0,0,1236,1237,1,0,0,0,1237,1239,5,
  	2,0,0,1238,1240,5,157,0,0,1239,1238,1,0,0,0,1239,1240,1,0,0,0,1240,1241,
  	1,0,0,0,1241,1243,3,80,40,0,1242,1244,5,157,0,0,1243,1242,1,0,0,0,1243,
  	1244,1,0,0,0,1244,1245,1,0,0,0,1245,1246,5,4,0,0,1246,1248,1,0,0,0,1247,
  	1230,1,0,0,0,1247,1248,1,0,0,0,1248,1249,1,0,0,0,1249,1250,5,157,0,0,
  	1250,1251,5,54,0,0,1251,1252,5,157,0,0,1252,1257,3,10,5,0,1253,1255,5,
  	157,0,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,1256,1,0,0,0,1256,1258,
  	3,38,19,0,1257,1254,1,0,0,0,1257,1258,1,0,0,0,1258,1263,1,0,0,0,1259,
  	1261,5,157,0,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,1261,1262,1,0,0,0,
  	1262,1264,3,162,81,0,1263,1260,1,0,0,0,1263,1264,1,0,0,0,1264,125,1,0,
  	0,0,1265,1266,5,49,0,0,1266,1267,5,157,0,0,1267,1272,3,266,133,0,1268,
  	1270,5,157,0,0,1269,1268,1,0,0,0,1269,1270,1,0,0,0,1270,1271,1,0,0,0,
  	1271,1273,3,162,81,0,1272,1269,1,0,0,0,1272,1273,1,0,0,0,1273,127,1,0,
  	0,0,1274,1275,5,96,0,0,1275,1277,5,157,0,0,1276,1274,1,0,0,0,1276,1277,
  	1,0,0,0,1277,1278,1,0,0,0,1278,1280,5,97,0,0,1279,1281,5,157,0,0,1280,
  	1279,1,0,0,0,1280,1281,1,0,0,0,1281,1282,1,0,0,0,1282,1287,3,164,82,0,
  	1283,1285,5,157,0,0,1284,1283,1,0,0,0,1284,1285,1,0,0,0,1285,1286,1,0,
  	0,0,1286,1288,3,162,81,0,1287,1284,1,0,0,0,1287,1288,1,0,0,0,1288,129,
  	1,0,0,0,1289,1291,5,98,0,0,1290,1292,5,157,0,0,1291,1290,1,0,0,0,1291,
  	1292,1,0,0,0,1292,1293,1,0,0,0,1293,1294,3,204,102,0,1294,1295,5,157,
  	0,0,1295,1296,5,109,0,0,1296,1297,5,157,0,0,1297,1298,3,284,142,0,1298,
  	131,1,0,0,0,1299,1301,5,99,0,0,1300,1302,5,157,0,0,1301,1300,1,0,0,0,
  	1301,1302,1,0,0,0,1302,1303,1,0,0,0,1303,1304,3,164,82,0,1304,133,1,0,
  	0,0,1305,1307,5,100,0,0,1306,1308,5,157,0,0,1307,1306,1,0,0,0,1307,1308,
  	1,0,0,0,1308,1309,1,0,0,0,1309,1314,3,164,82,0,1310,1311,5,157,0,0,1311,
  	1313,3,136,68,0,1312,1310,1,0,0,0,1313,1316,1,0,0,0,1314,1312,1,0,0,0,
  	1314,1315,1,0,0,0,1315,135,1,0,0,0,1316,1314,1,0,0,0,1317,1318,5,101,
  	0,0,1318,1319,5,157,0,0,1319,1320,5,97,0,0,1320,1321,5,157,0,0,1321,1328,
  	3,138,69,0,1322,1323,5,101,0,0,1323,1324,5,157,0,0,1324,1325,5,99,0,0,
  	1325,1326,5,157,0,0,1326,1328,3,138,69,0,1327,1317,1,0,0,0,1327,1322,
  	1,0,0,0,1328,137,1,0,0,0,1329,1331,5,102,0,0,1330,1332,5,157,0,0,1331,
  	1330,1,0,0,0,1331,1332,1,0,0,0,1332,1333,1,0,0,0,1333,1344,3,140,70,0,
  	1334,1336,5,157,0,0,1335,1334,1,0,0,0,1335,1336,1,0,0,0,1336,1337,1,0,
  	0,0,1337,1339,5,3,0,0,1338,1340,5,157,0,0,1339,1338,1,0,0,0,1339,1340,
  	1,0,0,0,1340,1341,1,0,0,0,1341,1343,3,140,70,0,1342,1335,1,0,0,0,1343,
  	1346,1,0,0,0,1344,1342,1,0,0,0,1344,1345,1,0,0,0,1345,139,1,0,0,0,1346,
  	1344,1,0,0,0,1347,1349,3,290,145,0,1348,1350,5,157,0,0,1349,1348,1,0,
  	0,0,1349,1350,1,0,0,0,1350,1351,1,0,0,0,1351,1353,5,6,0,0,1352,1354,5,
  	157,0,0,1353,1352,1,0,0,0,1353,1354,1,0,0,0,1354,1355,1,0,0,0,1355,1356,
  	3,204,102,0,1356,141,1,0,0,0,1357,1358,5,103,0,0,1358,1360,5,157,0,0,
  	1359,1357,1,0,0,0,1359,1360,1,0,0,0,1360,1361,1,0,0,0,1361,1363,5,104,
  	0,0,1362,1364,5,157,0,0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,1365,
  	1,0,0,0,1365,1376,3,204,102,0,1366,1368,5,157,0,0,1367,1366,1,0,0,0,1367,
  	1368,1,0,0,0,1368,1369,1,0,0,0,1369,1371,5,3,0,0,1370,1372,5,157,0,0,
  	1371,1370,1,0,0,0,1371,1372,1,0,0,0,1372,1373,1,0,0,0,1373,1375,3,204,
  	102,0,1374,1367,1,0,0,0,1375,1378,1,0,0,0,1376,1374,1,0,0,0,1376,1377,
  	1,0,0,0,1377,143,1,0,0,0,1378,1376,1,0,0,0,1379,1380,5,105,0,0,1380,1385,
  	3,148,74,0,1381,1383,5,157,0,0,1382,1381,1,0,0,0,1382,1383,1,0,0,0,1383,
  	1384,1,0,0,0,1384,1386,3,162,81,0,1385,1382,1,0,0,0,1385,1386,1,0,0,0,
  	1386,145,1,0,0,0,1387,1388,5,106,0,0,1388,1389,3,148,74,0,1389,147,1,
  	0,0,0,1390,1392,5,157,0,0,1391,1390,1,0,0,0,1391,1392,1,0,0,0,1392,1393,
  	1,0,0,0,1393,1395,5,107,0,0,1394,1391,1,0,0,0,1394,1395,1,0,0,0,1395,
  	1396,1,0,0,0,1396,1397,5,157,0,0,1397,1400,3,150,75,0,1398,1399,5,157,
  	0,0,1399,1401,3,154,77,0,1400,1398,1,0,0,0,1400,1401,1,0,0,0,1401,1404,
  	1,0,0,0,1402,1403,5,157,0,0,1403,1405,3,156,78,0,1404,1402,1,0,0,0,1404,
  	1405,1,0,0,0,1405,1408,1,0,0,0,1406,1407,5,157,0,0,1407,1409,3,158,79,
  	0,1408,1406,1,0,0,0,1408,1409,1,0,0,0,1409,149,1,0,0,0,1410,1421,5,108,
  	0,0,1411,1413,5,157,0,0,1412,1411,1,0,0,0,1412,1413,1,0,0,0,1413,1414,
  	1,0,0,0,1414,1416,5,3,0,0,1415,1417,5,157,0,0,1416,1415,1,0,0,0,1416,
  	1417,1,0,0,0,1417,1418,1,0,0,0,1418,1420,3,152,76,0,1419,1412,1,0,0,0,
  	1420,1423,1,0,0,0,1421,1419,1,0,0,0,1421,1422,1,0,0,0,1422,1439,1,0,0,
  	0,1423,1421,1,0,0,0,1424,1435,3,152,76,0,1425,1427,5,157,0,0,1426,1425,
  	1,0,0,0,1426,1427,1,0,0,0,1427,1428,1,0,0,0,1428,1430,5,3,0,0,1429,1431,
  	5,157,0,0,1430,1429,1,0,0,0,1430,1431,1,0,0,0,1431,1432,1,0,0,0,1432,
  	1434,3,152,76,0,1433,1426,1,0,0,0,1434,1437,1,0,0,0,1435,1433,1,0,0,0,
  	1435,1436,1,0,0,0,1436,1439,1,0,0,0,1437,1435,1,0,0,0,1438,1410,1,0,0,
  	0,1438,1424,1,0,0,0,1439,151,1,0,0,0,1440,1441,3,204,102,0,1441,1442,
  	5,157,0,0,1442,1443,5,109,0,0,1443,1444,5,157,0,0,1444,1445,3,284,142,
  	0,1445,1448,1,0,0,0,1446,1448,3,204,102,0,1447,1440,1,0,0,0,1447,1446,
  	1,0,0,0,1448,153,1,0,0,0,1449,1450,5,110,0,0,1450,1451,5,157,0,0,1451,
  	1452,5,111,0,0,1452,1453,5,157,0,0,1453,1461,3,160,80,0,1454,1456,5,3,
  	0,0,1455,1457,5,157,0,0,1456,1455,1,0,0,0,1456,1457,1,0,0,0,1457,1458,
  	1,0,0,0,1458,1460,3,160,80,0,1459,1454,1,0,0,0,1460,1463,1,0,0,0,1461,
  	1459,1,0,0,0,1461,1462,1,0,0,0,1462,155,1,0,0,0,1463,1461,1,0,0,0,1464,
  	1465,5,112,0,0,1465,1466,5,157,0,0,1466,1467,3,204,102,0,1467,157,1,0,
  	0,0,1468,1469,5,113,0,0,1469,1470,5,157,0,0,1470,1471,3,204,102,0,1471,
  	159,1,0,0,0,1472,1477,3,204,102,0,1473,1475,5,157,0,0,1474,1473,1,0,0,
  	0,1474,1475,1,0,0,0,1475,1476,1,0,0,0,1476,1478,7,1,0,0,1477,1474,1,0,
  	0,0,1477,1478,1,0,0,0,1478,161,1,0,0,0,1479,1480,5,118,0,0,1480,1481,
  	5,157,0,0,1481,1482,3,204,102,0,1482,163,1,0,0,0,1483,1494,3,166,83,0,
  	1484,1486,5,157,0,0,1485,1484,1,0,0,0,1485,1486,1,0,0,0,1486,1487,1,0,
  	0,0,1487,1489,5,3,0,0,1488,1490,5,157,0,0,1489,1488,1,0,0,0,1489,1490,
  	1,0,0,0,1490,1491,1,0,0,0,1491,1493,3,166,83,0,1492,1485,1,0,0,0,1493,
  	1496,1,0,0,0,1494,1492,1,0,0,0,1494,1495,1,0,0,0,1495,165,1,0,0,0,1496,
  	1494,1,0,0,0,1497,1499,3,284,142,0,1498,1500,5,157,0,0,1499,1498,1,0,
  	0,0,1499,1500,1,0,0,0,1500,1501,1,0,0,0,1501,1503,5,6,0,0,1502,1504,5,
  	157,0,0,1503,1502,1,0,0,0,1503,1504,1,0,0,0,1504,1505,1,0,0,0,1505,1506,
  	3,168,84,0,1506,1509,1,0,0,0,1507,1509,3,168,84,0,1508,1497,1,0,0,0,1508,
  	1507,1,0,0,0,1509,167,1,0,0,0,1510,1511,3,170,85,0,1511,169,1,0,0,0,1512,
  	1519,3,172,86,0,1513,1515,5,157,0,0,1514,1513,1,0,0,0,1514,1515,1,0,0,
  	0,1515,1516,1,0,0,0,1516,1518,3,174,87,0,1517,1514,1,0,0,0,1518,1521,
  	1,0,0,0,1519,1517,1,0,0,0,1519,1520,1,0,0,0,1520,1527,1,0,0,0,1521,1519,
  	1,0,0,0,1522,1523,5,2,0,0,1523,1524,3,170,85,0,1524,1525,5,4,0,0,1525,
  	1527,1,0,0,0,1526,1512,1,0,0,0,1526,1522,1,0,0,0,1527,171,1,0,0,0,1528,
  	1530,5,2,0,0,1529,1531,5,157,0,0,1530,1529,1,0,0,0,1530,1531,1,0,0,0,
  	1531,1536,1,0,0,0,1532,1534,3,284,142,0,1533,1535,5,157,0,0,1534,1533,
  	1,0,0,0,1534,1535,1,0,0,0,1535,1537,1,0,0,0,1536,1532,1,0,0,0,1536,1537,
  	1,0,0,0,1537,1542,1,0,0,0,1538,1540,3,184,92,0,1539,1541,5,157,0,0,1540,
  	1539,1,0,0,0,1540,1541,1,0,0,0,1541,1543,1,0,0,0,1542,1538,1,0,0,0,1542,
  	1543,1,0,0,0,1543,1548,1,0,0,0,1544,1546,3,180,90,0,1545,1547,5,157,0,
  	0,1546,1545,1,0,0,0,1546,1547,1,0,0,0,1547,1549,1,0,0,0,1548,1544,1,0,
  	0,0,1548,1549,1,0,0,0,1549,1550,1,0,0,0,1550,1551,5,4,0,0,1551,173,1,
  	0,0,0,1552,1554,3,176,88,0,1553,1555,5,157,0,0,1554,1553,1,0,0,0,1554,
  	1555,1,0,0,0,1555,1556,1,0,0,0,1556,1557,3,172,86,0,1557,175,1,0,0,0,
  	1558,1560,3,304,152,0,1559,1561,5,157,0,0,1560,1559,1,0,0,0,1560,1561,
  	1,0,0,0,1561,1562,1,0,0,0,1562,1564,3,308,154,0,1563,1565,5,157,0,0,1564,
  	1563,1,0,0,0,1564,1565,1,0,0,0,1565,1567,1,0,0,0,1566,1568,3,178,89,0,
  	1567,1566,1,0,0,0,1567,1568,1,0,0,0,1568,1570,1,0,0,0,1569,1571,5,157,
  	0,0,1570,1569,1,0,0,0,1570,1571,1,0,0,0,1571,1572,1,0,0,0,1572,1573,3,
  	308,154,0,1573,1603,1,0,0,0,1574,1576,3,308,154,0,1575,1577,5,157,0,0,
  	1576,1575,1,0,0,0,1576,1577,1,0,0,0,1577,1579,1,0,0,0,1578,1580,3,178,
  	89,0,1579,1578,1,0,0,0,1579,1580,1,0,0,0,1580,1582,1,0,0,0,1581,1583,
  	5,157,0,0,1582,1581,1,0,0,0,1582,1583,1,0,0,0,1583,1584,1,0,0,0,1584,
  	1586,3,308,154,0,1585,1587,5,157,0,0,1586,1585,1,0,0,0,1586,1587,1,0,
  	0,0,1587,1588,1,0,0,0,1588,1589,3,306,153,0,1589,1603,1,0,0,0,1590,1592,
  	3,308,154,0,1591,1593,5,157,0,0,1592,1591,1,0,0,0,1592,1593,1,0,0,0,1593,
  	1595,1,0,0,0,1594,1596,3,178,89,0,1595,1594,1,0,0,0,1595,1596,1,0,0,0,
  	1596,1598,1,0,0,0,1597,1599,5,157,0,0,1598,1597,1,0,0,0,1598,1599,1,0,
  	0,0,1599,1600,1,0,0,0,1600,1601,3,308,154,0,1601,1603,1,0,0,0,1602,1558,
  	1,0,0,0,1602,1574,1,0,0,0,1602,1590,1,0,0,0,1603,177,1,0,0,0,1604,1606,
  	5,7,0,0,1605,1607,5,157,0,0,1606,1605,1,0,0,0,1606,1607,1,0,0,0,1607,
  	1612,1,0,0,0,1608,1610,3,284,142,0,1609,1611,5,157,0,0,1610,1609,1,0,
  	0,0,1610,1611,1,0,0,0,1611,1613,1,0,0,0,1612,1608,1,0,0,0,1612,1613,1,
  	0,0,0,1613,1618,1,0,0,0,1614,1616,3,182,91,0,1615,1617,5,157,0,0,1616,
  	1615,1,0,0,0,1616,1617,1,0,0,0,1617,1619,1,0,0,0,1618,1614,1,0,0,0,1618,
  	1619,1,0,0,0,1619,1624,1,0,0,0,1620,1622,3,188,94,0,1621,1623,5,157,0,
  	0,1622,1621,1,0,0,0,1622,1623,1,0,0,0,1623,1625,1,0,0,0,1624,1620,1,0,
  	0,0,1624,1625,1,0,0,0,1625,1630,1,0,0,0,1626,1628,3,180,90,0,1627,1629,
  	5,157,0,0,1628,1627,1,0,0,0,1628,1629,1,0,0,0,1629,1631,1,0,0,0,1630,
  	1626,1,0,0,0,1630,1631,1,0,0,0,1631,1632,1,0,0,0,1632,1633,5,8,0,0,1633,
  	179,1,0,0,0,1634,1636,5,9,0,0,1635,1637,5,157,0,0,1636,1635,1,0,0,0,1636,
  	1637,1,0,0,0,1637,1671,1,0,0,0,1638,1640,3,292,146,0,1639,1641,5,157,
  	0,0,1640,1639,1,0,0,0,1640,1641,1,0,0,0,1641,1642,1,0,0,0,1642,1644,5,
  	127,0,0,1643,1645,5,157,0,0,1644,1643,1,0,0,0,1644,1645,1,0,0,0,1645,
  	1646,1,0,0,0,1646,1648,3,204,102,0,1647,1649,5,157,0,0,1648,1647,1,0,
  	0,0,1648,1649,1,0,0,0,1649,1668,1,0,0,0,1650,1652,5,3,0,0,1651,1653,5,
  	157,0,0,1652,1651,1,0,0,0,1652,1653,1,0,0,0,1653,1654,1,0,0,0,1654,1656,
  	3,292,146,0,1655,1657,5,157,0,0,1656,1655,1,0,0,0,1656,1657,1,0,0,0,1657,
  	1658,1,0,0,0,1658,1660,5,127,0,0,1659,1661,5,157,0,0,1660,1659,1,0,0,
  	0,1660,1661,1,0,0,0,1661,1662,1,0,0,0,1662,1664,3,204,102,0,1663,1665,
  	5,157,0,0,1664,1663,1,0,0,0,1664,1665,1,0,0,0,1665,1667,1,0,0,0,1666,
  	1650,1,0,0,0,1667,1670,1,0,0,0,1668,1666,1,0,0,0,1668,1669,1,0,0,0,1669,
  	1672,1,0,0,0,1670,1668,1,0,0,0,1671,1638,1,0,0,0,1671,1672,1,0,0,0,1672,
  	1673,1,0,0,0,1673,1674,5,10,0,0,1674,181,1,0,0,0,1675,1677,5,127,0,0,
  	1676,1678,5,157,0,0,1677,1676,1,0,0,0,1677,1678,1,0,0,0,1678,1679,1,0,
  	0,0,1679,1693,3,202,101,0,1680,1682,5,157,0,0,1681,1680,1,0,0,0,1681,
  	1682,1,0,0,0,1682,1683,1,0,0,0,1683,1685,5,11,0,0,1684,1686,5,127,0,0,
  	1685,1684,1,0,0,0,1685,1686,1,0,0,0,1686,1688,1,0,0,0,1687,1689,5,157,
  	0,0,1688,1687,1,0,0,0,1688,1689,1,0,0,0,1689,1690,1,0,0,0,1690,1692,3,
  	202,101,0,1691,1681,1,0,0,0,1692,1695,1,0,0,0,1693,1691,1,0,0,0,1693,
  	1694,1,0,0,0,1694,183,1,0,0,0,1695,1693,1,0,0,0,1696,1703,3,186,93,0,
  	1697,1699,5,157,0,0,1698,1697,1,0,0,0,1698,1699,1,0,0,0,1699,1700,1,0,
  	0,0,1700,1702,3,186,93,0,1701,1698,1,0,0,0,1702,1705,1,0,0,0,1703,1701,
  	1,0,0,0,1703,1704,1,0,0,0,1704,185,1,0,0,0,1705,1703,1,0,0,0,1706,1708,
  	5,127,0,0,1707,1709,5,157,0,0,1708,1707,1,0,0,0,1708,1709,1,0,0,0,1709,
  	1710,1,0,0,0,1710,1711,3,200,100,0,1711,187,1,0,0,0,1712,1714,5,108,0,
  	0,1713,1715,5,157,0,0,1714,1713,1,0,0,0,1714,1715,1,0,0,0,1715,1720,1,
  	0,0,0,1716,1721,5,119,0,0,1717,1718,5,93,0,0,1718,1719,5,157,0,0,1719,
  	1721,5,119,0,0,1720,1716,1,0,0,0,1720,1717,1,0,0,0,1720,1721,1,0,0,0,
  	1721,1723,1,0,0,0,1722,1724,5,157,0,0,1723,1722,1,0,0,0,1723,1724,1,0,
  	0,0,1724,1739,1,0,0,0,1725,1727,3,196,98,0,1726,1725,1,0,0,0,1726,1727,
  	1,0,0,0,1727,1729,1,0,0,0,1728,1730,5,157,0,0,1729,1728,1,0,0,0,1729,
  	1730,1,0,0,0,1730,1731,1,0,0,0,1731,1733,5,12,0,0,1732,1734,5,157,0,0,
  	1733,1732,1,0,0,0,1733,1734,1,0,0,0,1734,1736,1,0,0,0,1735,1737,3,198,
  	99,0,1736,1735,1,0,0,0,1736,1737,1,0,0,0,1737,1740,1,0,0,0,1738,1740,
  	3,294,147,0,1739,1726,1,0,0,0,1739,1738,1,0,0,0,1739,1740,1,0,0,0,1740,
  	1745,1,0,0,0,1741,1743,5,157,0,0,1742,1741,1,0,0,0,1742,1743,1,0,0,0,
  	1743,1744,1,0,0,0,1744,1746,3,190,95,0,1745,1742,1,0,0,0,1745,1746,1,
  	0,0,0,1746,189,1,0,0,0,1747,1749,5,2,0,0,1748,1750,5,157,0,0,1749,1748,
  	1,0,0,0,1749,1750,1,0,0,0,1750,1751,1,0,0,0,1751,1753,3,284,142,0,1752,
  	1754,5,157,0,0,1753,1752,1,0,0,0,1753,1754,1,0,0,0,1754,1755,1,0,0,0,
  	1755,1757,5,3,0,0,1756,1758,5,157,0,0,1757,1756,1,0,0,0,1757,1758,1,0,
  	0,0,1758,1759,1,0,0,0,1759,1768,3,284,142,0,1760,1762,5,157,0,0,1761,
  	1760,1,0,0,0,1761,1762,1,0,0,0,1762,1763,1,0,0,0,1763,1765,5,11,0,0,1764,
  	1766,5,157,0,0,1765,1764,1,0,0,0,1765,1766,1,0,0,0,1766,1767,1,0,0,0,
  	1767,1769,3,162,81,0,1768,1761,1,0,0,0,1768,1769,1,0,0,0,1769,1789,1,
  	0,0,0,1770,1772,5,157,0,0,1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,1773,
  	1,0,0,0,1773,1775,5,11,0,0,1774,1776,5,157,0,0,1775,1774,1,0,0,0,1775,
  	1776,1,0,0,0,1776,1777,1,0,0,0,1777,1779,3,194,97,0,1778,1780,5,157,0,
  	0,1779,1778,1,0,0,0,1779,1780,1,0,0,0,1780,1781,1,0,0,0,1781,1783,5,3,
  	0,0,1782,1784,5,157,0,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,1784,1785,
  	1,0,0,0,1785,1787,3,192,96,0,1786,1788,5,157,0,0,1787,1786,1,0,0,0,1787,
  	1788,1,0,0,0,1788,1790,1,0,0,0,1789,1771,1,0,0,0,1789,1790,1,0,0,0,1790,
  	1791,1,0,0,0,1791,1792,5,4,0,0,1792,191,1,0,0,0,1793,1795,5,9,0,0,1794,
  	1796,5,157,0,0,1795,1794,1,0,0,0,1795,1796,1,0,0,0,1796,1798,1,0,0,0,
  	1797,1799,3,150,75,0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,1799,1801,1,
  	0,0,0,1800,1802,5,157,0,0,1801,1800,1,0,0,0,1801,1802,1,0,0,0,1802,1803,
  	1,0,0,0,1803,1804,5,10,0,0,1804,193,1,0,0,0,1805,1807,5,9,0,0,1806,1808,
  	5,157,0,0,1807,1806,1,0,0,0,1807,1808,1,0,0,0,1808,1810,1,0,0,0,1809,
  	1811,3,150,75,0,1810,1809,1,0,0,0,1810,1811,1,0,0,0,1811,1813,1,0,0,0,
  	1812,1814,5,157,0,0,1813,1812,1,0,0,0,1813,1814,1,0,0,0,1814,1815,1,0,
  	0,0,1815,1816,5,10,0,0,1816,195,1,0,0,0,1817,1818,5,145,0,0,1818,197,
  	1,0,0,0,1819,1820,5,145,0,0,1820,199,1,0,0,0,1821,1822,3,298,149,0,1822,
  	201,1,0,0,0,1823,1824,3,298,149,0,1824,203,1,0,0,0,1825,1826,3,206,103,
  	0,1826,205,1,0,0,0,1827,1834,3,208,104,0,1828,1829,5,157,0,0,1829,1830,
  	5,120,0,0,1830,1831,5,157,0,0,1831,1833,3,208,104,0,1832,1828,1,0,0,0,
  	1833,1836,1,0,0,0,1834,1832,1,0,0,0,1834,1835,1,0,0,0,1835,207,1,0,0,
  	0,1836,1834,1,0,0,0,1837,1844,3,210,105,0,1838,1839,5,157,0,0,1839,1840,
  	5,121,0,0,1840,1841,5,157,0,0,1841,1843,3,210,105,0,1842,1838,1,0,0,0,
  	1843,1846,1,0,0,0,1844,1842,1,0,0,0,1844,1845,1,0,0,0,1845,209,1,0,0,
  	0,1846,1844,1,0,0,0,1847,1854,3,212,106,0,1848,1849,5,157,0,0,1849,1850,
  	5,122,0,0,1850,1851,5,157,0,0,1851,1853,3,212,106,0,1852,1848,1,0,0,0,
  	1853,1856,1,0,0,0,1854,1852,1,0,0,0,1854,1855,1,0,0,0,1855,211,1,0,0,
  	0,1856,1854,1,0,0,0,1857,1859,5,123,0,0,1858,1860,5,157,0,0,1859,1858,
  	1,0,0,0,1859,1860,1,0,0,0,1860,1862,1,0,0,0,1861,1857,1,0,0,0,1862,1865,
  	1,0,0,0,1863,1861,1,0,0,0,1863,1864,1,0,0,0,1864,1866,1,0,0,0,1865,1863,
  	1,0,0,0,1866,1867,3,214,107,0,1867,213,1,0,0,0,1868,1878,3,218,109,0,
  	1869,1871,5,157,0,0,1870,1869,1,0,0,0,1870,1871,1,0,0,0,1871,1872,1,0,
  	0,0,1872,1874,3,216,108,0,1873,1875,5,157,0,0,1874,1873,1,0,0,0,1874,
  	1875,1,0,0,0,1875,1876,1,0,0,0,1876,1877,3,218,109,0,1877,1879,1,0,0,
  	0,1878,1870,1,0,0,0,1878,1879,1,0,0,0,1879,1917,1,0,0,0,1880,1882,3,218,
  	109,0,1881,1883,5,157,0,0,1882,1881,1,0,0,0,1882,1883,1,0,0,0,1883,1884,
  	1,0,0,0,1884,1886,5,124,0,0,1885,1887,5,157,0,0,1886,1885,1,0,0,0,1886,
  	1887,1,0,0,0,1887,1888,1,0,0,0,1888,1889,3,218,109,0,1889,1890,1,0,0,
  	0,1890,1891,6,107,-1,0,1891,1917,1,0,0,0,1892,1894,3,218,109,0,1893,1895,
  	5,157,0,0,1894,1893,1,0,0,0,1894,1895,1,0,0,0,1895,1896,1,0,0,0,1896,
  	1898,3,216,108,0,1897,1899,5,157,0,0,1898,1897,1,0,0,0,1898,1899,1,0,
  	0,0,1899,1900,1,0,0,0,1900,1910,3,218,109,0,1901,1903,5,157,0,0,1902,
  	1901,1,0,0,0,1902,1903,1,0,0,0,1903,1904,1,0,0,0,1904,1906,3,216,108,
  	0,1905,1907,5,157,0,0,1906,1905,1,0,0,0,1906,1907,1,0,0,0,1907,1908,1,
  	0,0,0,1908,1909,3,218,109,0,1909,1911,1,0,0,0,1910,1902,1,0,0,0,1911,
  	1912,1,0,0,0,1912,1910,1,0,0,0,1912,1913,1,0,0,0,1913,1914,1,0,0,0,1914,
  	1915,6,107,-1,0,1915,1917,1,0,0,0,1916,1868,1,0,0,0,1916,1880,1,0,0,0,
  	1916,1892,1,0,0,0,1917,215,1,0,0,0,1918,1919,7,2,0,0,1919,217,1,0,0,0,
  	1920,1931,3,220,110,0,1921,1923,5,157,0,0,1922,1921,1,0,0,0,1922,1923,
  	1,0,0,0,1923,1924,1,0,0,0,1924,1926,5,11,0,0,1925,1927,5,157,0,0,1926,
  	1925,1,0,0,0,1926,1927,1,0,0,0,1927,1928,1,0,0,0,1928,1930,3,220,110,
  	0,1929,1922,1,0,0,0,1930,1933,1,0,0,0,1931,1929,1,0,0,0,1931,1932,1,0,
  	0,0,1932,219,1,0,0,0,1933,1931,1,0,0,0,1934,1945,3,222,111,0,1935,1937,
  	5,157,0,0,1936,1935,1,0,0,0,1936,1937,1,0,0,0,1937,1938,1,0,0,0,1938,
  	1940,5,18,0,0,1939,1941,5,157,0,0,1940,1939,1,0,0,0,1940,1941,1,0,0,0,
  	1941,1942,1,0,0,0,1942,1944,3,222,111,0,1943,1936,1,0,0,0,1944,1947,1,
  	0,0,0,1945,1943,1,0,0,0,1945,1946,1,0,0,0,1946,221,1,0,0,0,1947,1945,
  	1,0,0,0,1948,1960,3,226,113,0,1949,1951,5,157,0,0,1950,1949,1,0,0,0,1950,
  	1951,1,0,0,0,1951,1952,1,0,0,0,1952,1954,3,224,112,0,1953,1955,5,157,
  	0,0,1954,1953,1,0,0,0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,1957,3,
  	226,113,0,1957,1959,1,0,0,0,1958,1950,1,0,0,0,1959,1962,1,0,0,0,1960,
  	1958,1,0,0,0,1960,1961,1,0,0,0,1961,223,1,0,0,0,1962,1960,1,0,0,0,1963,
  	1964,7,3,0,0,1964,225,1,0,0,0,1965,1977,3,230,115,0,1966,1968,5,157,0,
  	0,1967,1966,1,0,0,0,1967,1968,1,0,0,0,1968,1969,1,0,0,0,1969,1971,3,228,
  	114,0,1970,1972,5,157,0,0,1971,1970,1,0,0,0,1971,1972,1,0,0,0,1972,1973,
  	1,0,0,0,1973,1974,3,230,115,0,1974,1976,1,0,0,0,1975,1967,1,0,0,0,1976,
  	1979,1,0,0,0,1977,1975,1,0,0,0,1977,1978,1,0,0,0,1978,227,1,0,0,0,1979,
  	1977,1,0,0,0,1980,1981,7,4,0,0,1981,229,1,0,0,0,1982,1994,3,234,117,0,
  	1983,1985,5,157,0,0,1984,1983,1,0,0,0,1984,1985,1,0,0,0,1985,1986,1,0,
  	0,0,1986,1988,3,232,116,0,1987,1989,5,157,0,0,1988,1987,1,0,0,0,1988,
  	1989,1,0,0,0,1989,1990,1,0,0,0,1990,1991,3,234,117,0,1991,1993,1,0,0,
  	0,1992,1984,1,0,0,0,1993,1996,1,0,0,0,1994,1992,1,0,0,0,1994,1995,1,0,
  	0,0,1995,231,1,0,0,0,1996,1994,1,0,0,0,1997,1998,7,5,0,0,1998,233,1,0,
  	0,0,1999,2010,3,236,118,0,2000,2002,5,157,0,0,2001,2000,1,0,0,0,2001,
  	2002,1,0,0,0,2002,2003,1,0,0,0,2003,2005,5,24,0,0,2004,2006,5,157,0,0,
  	2005,2004,1,0,0,0,2005,2006,1,0,0,0,2006,2007,1,0,0,0,2007,2009,3,236,
  	118,0,2008,2001,1,0,0,0,2009,2012,1,0,0,0,2010,2008,1,0,0,0,2010,2011,
  	1,0,0,0,2011,235,1,0,0,0,2012,2010,1,0,0,0,2013,2015,5,125,0,0,2014,2016,
  	5,157,0,0,2015,2014,1,0,0,0,2015,2016,1,0,0,0,2016,2018,1,0,0,0,2017,
  	2013,1,0,0,0,2018,2021,1,0,0,0,2019,2017,1,0,0,0,2019,2020,1,0,0,0,2020,
  	2022,1,0,0,0,2021,2019,1,0,0,0,2022,2027,3,238,119,0,2023,2025,5,157,
  	0,0,2024,2023,1,0,0,0,2024,2025,1,0,0,0,2025,2026,1,0,0,0,2026,2028,5,
  	126,0,0,2027,2024,1,0,0,0,2027,2028,1,0,0,0,2028,237,1,0,0,0,2029,2037,
  	3,248,124,0,2030,2038,3,242,121,0,2031,2033,3,240,120,0,2032,2031,1,0,
  	0,0,2033,2034,1,0,0,0,2034,2032,1,0,0,0,2034,2035,1,0,0,0,2035,2038,1,
  	0,0,0,2036,2038,3,246,123,0,2037,2030,1,0,0,0,2037,2032,1,0,0,0,2037,
  	2036,1,0,0,0,2037,2038,1,0,0,0,2038,239,1,0,0,0,2039,2040,5,157,0,0,2040,
  	2042,5,128,0,0,2041,2043,5,157,0,0,2042,2041,1,0,0,0,2042,2043,1,0,0,
  	0,2043,2044,1,0,0,0,2044,2059,3,248,124,0,2045,2046,5,7,0,0,2046,2047,
  	3,204,102,0,2047,2048,5,8,0,0,2048,2059,1,0,0,0,2049,2051,5,7,0,0,2050,
  	2052,3,204,102,0,2051,2050,1,0,0,0,2051,2052,1,0,0,0,2052,2053,1,0,0,
  	0,2053,2055,5,127,0,0,2054,2056,3,204,102,0,2055,2054,1,0,0,0,2055,2056,
  	1,0,0,0,2056,2057,1,0,0,0,2057,2059,5,8,0,0,2058,2039,1,0,0,0,2058,2045,
  	1,0,0,0,2058,2049,1,0,0,0,2059,241,1,0,0,0,2060,2072,3,244,122,0,2061,
  	2062,5,157,0,0,2062,2063,5,129,0,0,2063,2064,5,157,0,0,2064,2072,5,105,
  	0,0,2065,2066,5,157,0,0,2066,2067,5,130,0,0,2067,2068,5,157,0,0,2068,
  	2072,5,105,0,0,2069,2070,5,157,0,0,2070,2072,5,131,0,0,2071,2060,1,0,
  	0,0,2071,2061,1,0,0,0,2071,2065,1,0,0,0,2071,2069,1,0,0,0,2072,2074,1,
  	0,0,0,2073,2075,5,157,0,0,2074,2073,1,0,0,0,2074,2075,1,0,0,0,2075,2076,
  	1,0,0,0,2076,2077,3,248,124,0,2077,243,1,0,0,0,2078,2080,5,157,0,0,2079,
  	2078,1,0,0,0,2079,2080,1,0,0,0,2080,2081,1,0,0,0,2081,2082,5,25,0,0,2082,
  	245,1,0,0,0,2083,2084,5,157,0,0,2084,2085,5,132,0,0,2085,2086,5,157,0,
  	0,2086,2094,5,133,0,0,2087,2088,5,157,0,0,2088,2089,5,132,0,0,2089,2090,
  	5,157,0,0,2090,2091,5,123,0,0,2091,2092,5,157,0,0,2092,2094,5,133,0,0,
  	2093,2083,1,0,0,0,2093,2087,1,0,0,0,2094,247,1,0,0,0,2095,2102,3,250,
  	125,0,2096,2098,5,157,0,0,2097,2096,1,0,0,0,2097,2098,1,0,0,0,2098,2099,
  	1,0,0,0,2099,2101,3,278,139,0,2100,2097,1,0,0,0,2101,2104,1,0,0,0,2102,
  	2100,1,0,0,0,2102,2103,1,0,0,0,2103,249,1,0,0,0,2104,2102,1,0,0,0,2105,
  	2115,3,252,126,0,2106,2115,3,288,144,0,2107,2115,3,280,140,0,2108,2115,
  	3,264,132,0,2109,2115,3,266,133,0,2110,2115,3,272,136,0,2111,2115,3,274,
  	137,0,2112,2115,3,276,138,0,2113,2115,3,284,142,0,2114,2105,1,0,0,0,2114,
  	2106,1,0,0,0,2114,2107,1,0,0,0,2114,2108,1,0,0,0,2114,2109,1,0,0,0,2114,
  	2110,1,0,0,0,2114,2111,1,0,0,0,2114,2112,1,0,0,0,2114,2113,1,0,0,0,2115,
  	251,1,0,0,0,2116,2123,3,286,143,0,2117,2123,5,143,0,0,2118,2123,3,254,
  	127,0,2119,2123,5,133,0,0,2120,2123,3,256,128,0,2121,2123,3,260,130,0,
  	2122,2116,1,0,0,0,2122,2117,1,0,0,0,2122,2118,1,0,0,0,2122,2119,1,0,0,
  	0,2122,2120,1,0,0,0,2122,2121,1,0,0,0,2123,253,1,0,0,0,2124,2125,7,6,
  	0,0,2125,255,1,0,0,0,2126,2128,5,7,0,0,2127,2129,5,157,0,0,2128,2127,
  	1,0,0,0,2128,2129,1,0,0,0,2129,2143,1,0,0,0,2130,2132,3,204,102,0,2131,
  	2133,5,157,0,0,2132,2131,1,0,0,0,2132,2133,1,0,0,0,2133,2140,1,0,0,0,
  	2134,2136,3,258,129,0,2135,2137,5,157,0,0,2136,2135,1,0,0,0,2136,2137,
  	1,0,0,0,2137,2139,1,0,0,0,2138,2134,1,0,0,0,2139,2142,1,0,0,0,2140,2138,
  	1,0,0,0,2140,2141,1,0,0,0,2141,2144,1,0,0,0,2142,2140,1,0,0,0,2143,2130,
  	1,0,0,0,2143,2144,1,0,0,0,2144,2145,1,0,0,0,2145,2146,5,8,0,0,2146,257,
  	1,0,0,0,2147,2149,5,3,0,0,2148,2150,5,157,0,0,2149,2148,1,0,0,0,2149,
  	2150,1,0,0,0,2150,2152,1,0,0,0,2151,2153,3,204,102,0,2152,2151,1,0,0,
  	0,2152,2153,1,0,0,0,2153,259,1,0,0,0,2154,2156,5,9,0,0,2155,2157,5,157,
  	0,0,2156,2155,1,0,0,0,2156,2157,1,0,0,0,2157,2158,1,0,0,0,2158,2160,3,
  	262,131,0,2159,2161,5,157,0,0,2160,2159,1,0,0,0,2160,2161,1,0,0,0,2161,
  	2172,1,0,0,0,2162,2164,5,3,0,0,2163,2165,5,157,0,0,2164,2163,1,0,0,0,
  	2164,2165,1,0,0,0,2165,2166,1,0,0,0,2166,2168,3,262,131,0,2167,2169,5,
  	157,0,0,2168,2167,1,0,0,0,2168,2169,1,0,0,0,2169,2171,1,0,0,0,2170,2162,
  	1,0,0,0,2171,2174,1,0,0,0,2172,2170,1,0,0,0,2172,2173,1,0,0,0,2173,2175,
  	1,0,0,0,2174,2172,1,0,0,0,2175,2176,5,10,0,0,2176,261,1,0,0,0,2177,2180,
  	3,300,150,0,2178,2180,5,143,0,0,2179,2177,1,0,0,0,2179,2178,1,0,0,0,2180,
  	2182,1,0,0,0,2181,2183,5,157,0,0,2182,2181,1,0,0,0,2182,2183,1,0,0,0,
  	2183,2184,1,0,0,0,2184,2186,5,127,0,0,2185,2187,5,157,0,0,2186,2185,1,
  	0,0,0,2186,2187,1,0,0,0,2187,2188,1,0,0,0,2188,2189,3,204,102,0,2189,
  	263,1,0,0,0,2190,2192,5,2,0,0,2191,2193,5,157,0,0,2192,2191,1,0,0,0,2192,
  	2193,1,0,0,0,2193,2194,1,0,0,0,2194,2196,3,204,102,0,2195,2197,5,157,
  	0,0,2196,2195,1,0,0,0,2196,2197,1,0,0,0,2197,2198,1,0,0,0,2198,2199,5,
  	4,0,0,2199,265,1,0,0,0,2200,2202,5,136,0,0,2201,2203,5,157,0,0,2202,2201,
  	1,0,0,0,2202,2203,1,0,0,0,2203,2204,1,0,0,0,2204,2206,5,2,0,0,2205,2207,
  	5,157,0,0,2206,2205,1,0,0,0,2206,2207,1,0,0,0,2207,2208,1,0,0,0,2208,
  	2210,5,108,0,0,2209,2211,5,157,0,0,2210,2209,1,0,0,0,2210,2211,1,0,0,
  	0,2211,2212,1,0,0,0,2212,2249,5,4,0,0,2213,2215,3,268,134,0,2214,2216,
  	5,157,0,0,2215,2214,1,0,0,0,2215,2216,1,0,0,0,2216,2217,1,0,0,0,2217,
  	2219,5,2,0,0,2218,2220,5,157,0,0,2219,2218,1,0,0,0,2219,2220,1,0,0,0,
  	2220,2225,1,0,0,0,2221,2223,5,107,0,0,2222,2224,5,157,0,0,2223,2222,1,
  	0,0,0,2223,2224,1,0,0,0,2224,2226,1,0,0,0,2225,2221,1,0,0,0,2225,2226,
  	1,0,0,0,2226,2244,1,0,0,0,2227,2229,3,270,135,0,2228,2230,5,157,0,0,2229,
  	2228,1,0,0,0,2229,2230,1,0,0,0,2230,2241,1,0,0,0,2231,2233,5,3,0,0,2232,
  	2234,5,157,0,0,2233,2232,1,0,0,0,2233,2234,1,0,0,0,2234,2235,1,0,0,0,
  	2235,2237,3,270,135,0,2236,2238,5,157,0,0,2237,2236,1,0,0,0,2237,2238,
  	1,0,0,0,2238,2240,1,0,0,0,2239,2231,1,0,0,0,2240,2243,1,0,0,0,2241,2239,
  	1,0,0,0,2241,2242,1,0,0,0,2242,2245,1,0,0,0,2243,2241,1,0,0,0,2244,2227,
  	1,0,0,0,2244,2245,1,0,0,0,2245,2246,1,0,0,0,2246,2247,5,4,0,0,2247,2249,
  	1,0,0,0,2248,2200,1,0,0,0,2248,2213,1,0,0,0,2249,267,1,0,0,0,2250,2251,
  	3,300,150,0,2251,269,1,0,0,0,2252,2254,3,300,150,0,2253,2255,5,157,0,
  	0,2254,2253,1,0,0,0,2254,2255,1,0,0,0,2255,2256,1,0,0,0,2256,2257,5,127,
  	0,0,2257,2259,5,6,0,0,2258,2260,5,157,0,0,2259,2258,1,0,0,0,2259,2260,
  	1,0,0,0,2260,2262,1,0,0,0,2261,2252,1,0,0,0,2261,2262,1,0,0,0,2262,2263,
  	1,0,0,0,2263,2264,3,204,102,0,2264,271,1,0,0,0,2265,2270,3,172,86,0,2266,
  	2268,5,157,0,0,2267,2266,1,0,0,0,2267,2268,1,0,0,0,2268,2269,1,0,0,0,
  	2269,2271,3,174,87,0,2270,2267,1,0,0,0,2271,2272,1,0,0,0,2272,2270,1,
  	0,0,0,2272,2273,1,0,0,0,2273,273,1,0,0,0,2274,2276,5,137,0,0,2275,2277,
  	5,157,0,0,2276,2275,1,0,0,0,2276,2277,1,0,0,0,2277,2278,1,0,0,0,2278,
  	2280,5,9,0,0,2279,2281,5,157,0,0,2280,2279,1,0,0,0,2280,2281,1,0,0,0,
  	2281,2282,1,0,0,0,2282,2284,5,97,0,0,2283,2285,5,157,0,0,2284,2283,1,
  	0,0,0,2284,2285,1,0,0,0,2285,2286,1,0,0,0,2286,2291,3,164,82,0,2287,2289,
  	5,157,0,0,2288,2287,1,0,0,0,2288,2289,1,0,0,0,2289,2290,1,0,0,0,2290,
  	2292,3,162,81,0,2291,2288,1,0,0,0,2291,2292,1,0,0,0,2292,2294,1,0,0,0,
  	2293,2295,5,157,0,0,2294,2293,1,0,0,0,2294,2295,1,0,0,0,2295,2296,1,0,
  	0,0,2296,2297,5,10,0,0,2297,275,1,0,0,0,2298,2300,5,136,0,0,2299,2301,
  	5,157,0,0,2300,2299,1,0,0,0,2300,2301,1,0,0,0,2301,2302,1,0,0,0,2302,
  	2304,5,9,0,0,2303,2305,5,157,0,0,2304,2303,1,0,0,0,2304,2305,1,0,0,0,
  	2305,2306,1,0,0,0,2306,2308,5,97,0,0,2307,2309,5,157,0,0,2308,2307,1,
  	0,0,0,2308,2309,1,0,0,0,2309,2310,1,0,0,0,2310,2315,3,164,82,0,2311,2313,
  	5,157,0,0,2312,2311,1,0,0,0,2312,2313,1,0,0,0,2313,2314,1,0,0,0,2314,
  	2316,3,162,81,0,2315,2312,1,0,0,0,2315,2316,1,0,0,0,2316,2318,1,0,0,0,
  	2317,2319,5,157,0,0,2318,2317,1,0,0,0,2318,2319,1,0,0,0,2319,2320,1,0,
  	0,0,2320,2321,5,10,0,0,2321,277,1,0,0,0,2322,2324,5,5,0,0,2323,2325,5,
  	157,0,0,2324,2323,1,0,0,0,2324,2325,1,0,0,0,2325,2328,1,0,0,0,2326,2329,
  	3,292,146,0,2327,2329,5,108,0,0,2328,2326,1,0,0,0,2328,2327,1,0,0,0,2329,
  	279,1,0,0,0,2330,2335,5,138,0,0,2331,2333,5,157,0,0,2332,2331,1,0,0,0,
  	2332,2333,1,0,0,0,2333,2334,1,0,0,0,2334,2336,3,282,141,0,2335,2332,1,
  	0,0,0,2336,2337,1,0,0,0,2337,2335,1,0,0,0,2337,2338,1,0,0,0,2338,2353,
  	1,0,0,0,2339,2341,5,138,0,0,2340,2342,5,157,0,0,2341,2340,1,0,0,0,2341,
  	2342,1,0,0,0,2342,2343,1,0,0,0,2343,2348,3,204,102,0,2344,2346,5,157,
  	0,0,2345,2344,1,0,0,0,2345,2346,1,0,0,0,2346,2347,1,0,0,0,2347,2349,3,
  	282,141,0,2348,2345,1,0,0,0,2349,2350,1,0,0,0,2350,2348,1,0,0,0,2350,
  	2351,1,0,0,0,2351,2353,1,0,0,0,2352,2330,1,0,0,0,2352,2339,1,0,0,0,2353,
  	2362,1,0,0,0,2354,2356,5,157,0,0,2355,2354,1,0,0,0,2355,2356,1,0,0,0,
  	2356,2357,1,0,0,0,2357,2359,5,139,0,0,2358,2360,5,157,0,0,2359,2358,1,
  	0,0,0,2359,2360,1,0,0,0,2360,2361,1,0,0,0,2361,2363,3,204,102,0,2362,
  	2355,1,0,0,0,2362,2363,1,0,0,0,2363,2365,1,0,0,0,2364,2366,5,157,0,0,
  	2365,2364,1,0,0,0,2365,2366,1,0,0,0,2366,2367,1,0,0,0,2367,2368,5,140,
  	0,0,2368,281,1,0,0,0,2369,2371,5,141,0,0,2370,2372,5,157,0,0,2371,2370,
  	1,0,0,0,2371,2372,1,0,0,0,2372,2373,1,0,0,0,2373,2375,3,204,102,0,2374,
  	2376,5,157,0,0,2375,2374,1,0,0,0,2375,2376,1,0,0,0,2376,2377,1,0,0,0,
  	2377,2379,5,142,0,0,2378,2380,5,157,0,0,2379,2378,1,0,0,0,2379,2380,1,
  	0,0,0,2380,2381,1,0,0,0,2381,2382,3,204,102,0,2382,283,1,0,0,0,2383,2384,
  	3,300,150,0,2384,285,1,0,0,0,2385,2388,3,296,148,0,2386,2388,3,294,147,
  	0,2387,2385,1,0,0,0,2387,2386,1,0,0,0,2388,287,1,0,0,0,2389,2392,5,26,
  	0,0,2390,2393,3,300,150,0,2391,2393,5,145,0,0,2392,2390,1,0,0,0,2392,
  	2391,1,0,0,0,2393,289,1,0,0,0,2394,2396,3,250,125,0,2395,2397,5,157,0,
  	0,2396,2395,1,0,0,0,2396,2397,1,0,0,0,2397,2398,1,0,0,0,2398,2399,3,278,
  	139,0,2399,291,1,0,0,0,2400,2401,3,298,149,0,2401,293,1,0,0,0,2402,2403,
  	5,145,0,0,2403,295,1,0,0,0,2404,2405,5,152,0,0,2405,297,1,0,0,0,2406,
  	2407,3,300,150,0,2407,299,1,0,0,0,2408,2414,5,153,0,0,2409,2410,5,156,
  	0,0,2410,2414,6,150,-1,0,2411,2414,5,146,0,0,2412,2414,3,302,151,0,2413,
  	2408,1,0,0,0,2413,2409,1,0,0,0,2413,2411,1,0,0,0,2413,2412,1,0,0,0,2414,
  	301,1,0,0,0,2415,2416,7,7,0,0,2416,303,1,0,0,0,2417,2418,7,8,0,0,2418,
  	305,1,0,0,0,2419,2420,7,9,0,0,2420,307,1,0,0,0,2421,2422,7,10,0,0,2422,
  	309,1,0,0,0,412,312,316,321,325,330,333,337,340,363,369,373,376,382,385,
  	389,393,397,402,406,413,417,425,429,439,443,447,452,465,469,477,480,488,
  	491,508,511,515,521,524,538,542,564,568,571,574,577,580,584,589,593,603,
  	607,612,617,622,628,632,636,641,648,652,656,659,663,667,671,676,680,686,
  	690,702,706,710,714,719,731,735,739,743,747,749,753,757,759,773,777,781,
  	785,790,793,797,801,803,807,811,813,840,848,854,857,867,870,878,881,887,
  	890,896,918,929,951,955,960,971,975,979,987,991,995,1001,1005,1009,1015,
  	1019,1023,1027,1031,1035,1041,1048,1053,1059,1079,1083,1091,1101,1106,
  	1111,1115,1120,1126,1131,1134,1138,1142,1146,1152,1156,1161,1166,1170,
  	1173,1177,1181,1185,1189,1193,1199,1203,1208,1212,1221,1227,1235,1239,
  	1243,1247,1254,1257,1260,1263,1269,1272,1276,1280,1284,1287,1291,1301,
  	1307,1314,1327,1331,1335,1339,1344,1349,1353,1359,1363,1367,1371,1376,
  	1382,1385,1391,1394,1400,1404,1408,1412,1416,1421,1426,1430,1435,1438,
  	1447,1456,1461,1474,1477,1485,1489,1494,1499,1503,1508,1514,1519,1526,
  	1530,1534,1536,1540,1542,1546,1548,1554,1560,1564,1567,1570,1576,1579,
  	1582,1586,1592,1595,1598,1602,1606,1610,1612,1616,1618,1622,1624,1628,
  	1630,1636,1640,1644,1648,1652,1656,1660,1664,1668,1671,1677,1681,1685,
  	1688,1693,1698,1703,1708,1714,1720,1723,1726,1729,1733,1736,1739,1742,
  	1745,1749,1753,1757,1761,1765,1768,1771,1775,1779,1783,1787,1789,1795,
  	1798,1801,1807,1810,1813,1834,1844,1854,1859,1863,1870,1874,1878,1882,
  	1886,1894,1898,1902,1906,1912,1916,1922,1926,1931,1936,1940,1945,1950,
  	1954,1960,1967,1971,1977,1984,1988,1994,2001,2005,2010,2015,2019,2024,
  	2027,2034,2037,2042,2051,2055,2058,2071,2074,2079,2093,2097,2102,2114,
  	2122,2128,2132,2136,2140,2143,2149,2152,2156,2160,2164,2168,2172,2179,
  	2182,2186,2192,2196,2202,2206,2210,2215,2219,2223,2225,2229,2233,2237,
  	2241,2244,2248,2254,2259,2261,2267,2272,2276,2280,2284,2288,2291,2294,
  	2300,2304,2308,2312,2315,2318,2324,2328,2332,2337,2341,2345,2350,2352,
  	2355,2359,2362,2365,2371,2375,2379,2387,2392,2396,2413
>>>>>>> 6a075a2f7 (add basic tests for sequence)
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cypherParserStaticData = staticData.release();
}

}

CypherParser::CypherParser(TokenStream *input) : CypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CypherParser::CypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  CypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *cypherParserStaticData->atn, cypherParserStaticData->decisionToDFA, cypherParserStaticData->sharedContextCache, options);
}

CypherParser::~CypherParser() {
  delete _interpreter;
}

const atn::ATN& CypherParser::getATN() const {
  return *cypherParserStaticData->atn;
}

std::string CypherParser::getGrammarFileName() const {
  return "Cypher.g4";
}

const std::vector<std::string>& CypherParser::getRuleNames() const {
  return cypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& CypherParser::getVocabulary() const {
  return cypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CypherParser::getSerializedATN() const {
  return cypherParserStaticData->serializedATN;
}


//----------------- Ku_StatementsContext ------------------------------------------------------------------

CypherParser::Ku_StatementsContext::Ku_StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_CypherContext *> CypherParser::Ku_StatementsContext::oC_Cypher() {
  return getRuleContexts<CypherParser::OC_CypherContext>();
}

CypherParser::OC_CypherContext* CypherParser::Ku_StatementsContext::oC_Cypher(size_t i) {
  return getRuleContext<CypherParser::OC_CypherContext>(i);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::EOF() {
  return getToken(CypherParser::EOF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::Ku_StatementsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::Ku_StatementsContext::getRuleIndex() const {
  return CypherParser::RuleKu_Statements;
}


CypherParser::Ku_StatementsContext* CypherParser::ku_Statements() {
  Ku_StatementsContext *_localctx = _tracker.createInstance<Ku_StatementsContext>(_ctx, getState());
  enterRule(_localctx, 0, CypherParser::RuleKu_Statements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(298);
    oC_Cypher();
    setState(309);
=======
    setState(308);
    oC_Cypher();
    setState(319);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(310);
    oC_Cypher();
    setState(321);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(300);
=======
        setState(310);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(312);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
          setState(299);
          match(CypherParser::SP);
        }
        setState(302);
        match(CypherParser::T__0);
        setState(304);
=======
          setState(309);
=======
          setState(311);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
          match(CypherParser::SP);
        }
        setState(314);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        match(CypherParser::T__0);
        setState(316);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
        case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
          setState(303);
=======
          setState(313);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
          setState(315);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
<<<<<<< HEAD
<<<<<<< HEAD
        setState(306);
        oC_Cypher(); 
      }
      setState(311);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    }
    setState(313);
=======
        setState(316);
=======
        setState(318);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        oC_Cypher(); 
      }
      setState(323);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    }
<<<<<<< HEAD
    setState(323);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(325);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(312);
      match(CypherParser::SP);
    }
    setState(315);
=======
      setState(322);
      match(CypherParser::SP);
    }
    setState(325);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(324);
      match(CypherParser::SP);
    }
    setState(327);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CypherContext ------------------------------------------------------------------

CypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StatementContext* CypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<CypherParser::OC_StatementContext>(0);
}

CypherParser::OC_AnyCypherOptionContext* CypherParser::OC_CypherContext::oC_AnyCypherOption() {
  return getRuleContext<CypherParser::OC_AnyCypherOptionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CypherContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CypherContext::getRuleIndex() const {
  return CypherParser::RuleOC_Cypher;
}


CypherParser::OC_CypherContext* CypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 2, CypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(318);
=======
    setState(328);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(330);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::EXPLAIN

    || _la == CypherParser::PROFILE) {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(317);
      oC_AnyCypherOption();
    }
    setState(321);
=======
      setState(327);
      oC_AnyCypherOption();
    }
    setState(331);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(329);
      oC_AnyCypherOption();
    }
    setState(333);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(320);
      match(CypherParser::SP);
    }

    setState(323);
    oC_Statement();
    setState(328);
=======
      setState(330);
=======
      setState(332);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::SP);
    }

    setState(335);
    oC_Statement();
<<<<<<< HEAD
    setState(338);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(340);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(325);
=======
      setState(335);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(337);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(324);
        match(CypherParser::SP);
      }
      setState(327);
=======
        setState(334);
        match(CypherParser::SP);
      }
      setState(337);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(336);
        match(CypherParser::SP);
      }
      setState(339);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::T__0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

CypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_QueryContext* CypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

CypherParser::KU_CreateNodeTableContext* CypherParser::OC_StatementContext::kU_CreateNodeTable() {
  return getRuleContext<CypherParser::KU_CreateNodeTableContext>(0);
}

CypherParser::KU_CreateRelTableContext* CypherParser::OC_StatementContext::kU_CreateRelTable() {
  return getRuleContext<CypherParser::KU_CreateRelTableContext>(0);
}

CypherParser::KU_CreateRelTableGroupContext* CypherParser::OC_StatementContext::kU_CreateRelTableGroup() {
  return getRuleContext<CypherParser::KU_CreateRelTableGroupContext>(0);
}

CypherParser::KU_CreateRdfGraphContext* CypherParser::OC_StatementContext::kU_CreateRdfGraph() {
  return getRuleContext<CypherParser::KU_CreateRdfGraphContext>(0);
}

CypherParser::KU_CreateSequenceContext* CypherParser::OC_StatementContext::kU_CreateSequence() {
  return getRuleContext<CypherParser::KU_CreateSequenceContext>(0);
}

CypherParser::KU_DropContext* CypherParser::OC_StatementContext::kU_Drop() {
  return getRuleContext<CypherParser::KU_DropContext>(0);
}

CypherParser::KU_AlterTableContext* CypherParser::OC_StatementContext::kU_AlterTable() {
  return getRuleContext<CypherParser::KU_AlterTableContext>(0);
}

CypherParser::KU_CopyFromContext* CypherParser::OC_StatementContext::kU_CopyFrom() {
  return getRuleContext<CypherParser::KU_CopyFromContext>(0);
}

CypherParser::KU_CopyFromByColumnContext* CypherParser::OC_StatementContext::kU_CopyFromByColumn() {
  return getRuleContext<CypherParser::KU_CopyFromByColumnContext>(0);
}

CypherParser::KU_CopyTOContext* CypherParser::OC_StatementContext::kU_CopyTO() {
  return getRuleContext<CypherParser::KU_CopyTOContext>(0);
}

CypherParser::KU_StandaloneCallContext* CypherParser::OC_StatementContext::kU_StandaloneCall() {
  return getRuleContext<CypherParser::KU_StandaloneCallContext>(0);
}

CypherParser::KU_CreateMacroContext* CypherParser::OC_StatementContext::kU_CreateMacro() {
  return getRuleContext<CypherParser::KU_CreateMacroContext>(0);
}

CypherParser::KU_CommentOnContext* CypherParser::OC_StatementContext::kU_CommentOn() {
  return getRuleContext<CypherParser::KU_CommentOnContext>(0);
}

CypherParser::KU_TransactionContext* CypherParser::OC_StatementContext::kU_Transaction() {
  return getRuleContext<CypherParser::KU_TransactionContext>(0);
}

CypherParser::KU_ExtensionContext* CypherParser::OC_StatementContext::kU_Extension() {
  return getRuleContext<CypherParser::KU_ExtensionContext>(0);
}

CypherParser::KU_ExportDatabaseContext* CypherParser::OC_StatementContext::kU_ExportDatabase() {
  return getRuleContext<CypherParser::KU_ExportDatabaseContext>(0);
}

CypherParser::KU_ImportDatabaseContext* CypherParser::OC_StatementContext::kU_ImportDatabase() {
  return getRuleContext<CypherParser::KU_ImportDatabaseContext>(0);
}

CypherParser::KU_AttachDatabaseContext* CypherParser::OC_StatementContext::kU_AttachDatabase() {
  return getRuleContext<CypherParser::KU_AttachDatabaseContext>(0);
}

CypherParser::KU_DetachDatabaseContext* CypherParser::OC_StatementContext::kU_DetachDatabase() {
  return getRuleContext<CypherParser::KU_DetachDatabaseContext>(0);
}

CypherParser::KU_UseDatabaseContext* CypherParser::OC_StatementContext::kU_UseDatabase() {
  return getRuleContext<CypherParser::KU_UseDatabaseContext>(0);
}


size_t CypherParser::OC_StatementContext::getRuleIndex() const {
  return CypherParser::RuleOC_Statement;
}


CypherParser::OC_StatementContext* CypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, CypherParser::RuleOC_Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
    setState(350);
=======
    setState(361);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(363);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(330);
=======
      setState(340);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(342);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      oC_Query();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(331);
=======
      setState(341);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(343);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_CreateNodeTable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(332);
=======
      setState(342);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(344);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_CreateRelTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(333);
=======
      setState(343);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(345);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_CreateRelTableGroup();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(334);
=======
      setState(344);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(346);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_CreateRdfGraph();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(335);
      kU_DropTable();
=======
      setState(345);
=======
      setState(347);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_CreateSequence();
>>>>>>> 97f7ef93f (update parser for sequence)
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(336);
      kU_AlterTable();
=======
      setState(346);
=======
      setState(348);
<<<<<<< HEAD
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_DropTable();
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      kU_Drop();
>>>>>>> 26305974a (finish drop sequence)
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(337);
      kU_CopyFrom();
=======
      setState(347);
=======
      setState(349);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_AlterTable();
>>>>>>> 97f7ef93f (update parser for sequence)
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(338);
      kU_CopyFromByColumn();
=======
      setState(348);
=======
      setState(350);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_CopyFrom();
>>>>>>> 97f7ef93f (update parser for sequence)
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(339);
      kU_CopyTO();
=======
      setState(349);
=======
      setState(351);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_CopyFromByColumn();
>>>>>>> 97f7ef93f (update parser for sequence)
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(340);
      kU_StandaloneCall();
=======
      setState(350);
=======
      setState(352);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_CopyTO();
>>>>>>> 97f7ef93f (update parser for sequence)
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(341);
      kU_CreateMacro();
=======
      setState(351);
=======
      setState(353);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_StandaloneCall();
>>>>>>> 97f7ef93f (update parser for sequence)
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(342);
      kU_CommentOn();
=======
      setState(352);
=======
      setState(354);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_CreateMacro();
>>>>>>> 97f7ef93f (update parser for sequence)
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(343);
      kU_Transaction();
=======
      setState(353);
=======
      setState(355);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_CommentOn();
>>>>>>> 97f7ef93f (update parser for sequence)
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(344);
      kU_Extension();
=======
      setState(354);
=======
      setState(356);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_Transaction();
>>>>>>> 97f7ef93f (update parser for sequence)
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(345);
      kU_ExportDatabase();
=======
      setState(355);
=======
      setState(357);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_Extension();
>>>>>>> 97f7ef93f (update parser for sequence)
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(346);
      kU_ImportDatabase();
=======
      setState(356);
=======
      setState(358);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_ExportDatabase();
>>>>>>> 97f7ef93f (update parser for sequence)
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(347);
      kU_AttachDatabase();
=======
      setState(357);
=======
      setState(359);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_ImportDatabase();
>>>>>>> 97f7ef93f (update parser for sequence)
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(348);
      kU_DetachDatabase();
=======
      setState(358);
=======
      setState(360);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_AttachDatabase();
>>>>>>> 97f7ef93f (update parser for sequence)
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(349);
=======
      setState(359);
=======
      setState(361);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_DetachDatabase();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
<<<<<<< HEAD
      setState(360);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(362);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_UseDatabase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromContext ------------------------------------------------------------------

CypherParser::KU_CopyFromContext::KU_CopyFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_CopyFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::KU_ColumnNamesContext* CypherParser::KU_CopyFromContext::kU_ColumnNames() {
  return getRuleContext<CypherParser::KU_ColumnNamesContext>(0);
}


size_t CypherParser::KU_CopyFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFrom;
}


CypherParser::KU_CopyFromContext* CypherParser::kU_CopyFrom() {
  KU_CopyFromContext *_localctx = _tracker.createInstance<KU_CopyFromContext>(_ctx, getState());
  enterRule(_localctx, 6, CypherParser::RuleKU_CopyFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(352);
    match(CypherParser::COPY);
    setState(353);
    match(CypherParser::SP);
    setState(354);
    oC_SchemaName();
    setState(363);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(356);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(355);
        match(CypherParser::SP);
      }
      setState(358);
      kU_ColumnNames();
      setState(360);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(359);
        match(CypherParser::SP);
      }
      break;
    }

    case 2: {
      setState(362);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(365);
    match(CypherParser::FROM);
    setState(366);
    match(CypherParser::SP);
    setState(367);
    kU_ScanSource();
    setState(372);
=======
    setState(363);
    match(CypherParser::COPY);
    setState(364);
    match(CypherParser::SP);
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(365);
    match(CypherParser::COPY);
    setState(366);
    match(CypherParser::SP);
    setState(367);
    oC_SchemaName();
<<<<<<< HEAD
    setState(374);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(376);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(369);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(368);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
<<<<<<< HEAD
      setState(371);
=======
      setState(369);
      kU_ColumnNames();
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      setState(371);
      kU_ColumnNames();
      setState(373);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(372);
        match(CypherParser::SP);
      }
      break;
    }

    case 2: {
      setState(375);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(378);
    match(CypherParser::FROM);
    setState(379);
    match(CypherParser::SP);
    setState(380);
    kU_ScanSource();
    setState(385);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      setState(382);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(381);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
      setState(382);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(384);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnNamesContext ------------------------------------------------------------------

CypherParser::KU_ColumnNamesContext::KU_ColumnNamesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_ColumnNamesContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ColumnNamesContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ColumnNamesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ColumnNamesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ColumnNamesContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnNames;
}


CypherParser::KU_ColumnNamesContext* CypherParser::kU_ColumnNames() {
  KU_ColumnNamesContext *_localctx = _tracker.createInstance<KU_ColumnNamesContext>(_ctx, getState());
  enterRule(_localctx, 8, CypherParser::RuleKU_ColumnNames);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(374);
    match(CypherParser::T__1);
    setState(376);
=======
    setState(385);
    match(CypherParser::T__1);
    setState(387);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(387);
    match(CypherParser::T__1);
    setState(389);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(375);
      match(CypherParser::SP);
    }
    setState(378);
    oC_SchemaName();
    setState(389);
=======
      setState(386);
=======
      setState(388);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::SP);
    }
    setState(391);
    oC_SchemaName();
<<<<<<< HEAD
    setState(400);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(402);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(380);
=======
        setState(391);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(390);
          match(CypherParser::SP);
        }
        setState(393);
        match(CypherParser::T__2);
        setState(395);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(393);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
          setState(379);
          match(CypherParser::SP);
        }
        setState(382);
        match(CypherParser::T__2);
        setState(384);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(383);
          match(CypherParser::SP);
        }
        setState(386);
        oC_SchemaName(); 
      }
      setState(391);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    }
    setState(393);
=======
          setState(394);
=======
          setState(392);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
          match(CypherParser::SP);
        }
        setState(395);
        match(CypherParser::T__2);
        setState(397);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(396);
          match(CypherParser::SP);
        }
        setState(399);
        oC_SchemaName(); 
      }
      setState(404);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    }
<<<<<<< HEAD
    setState(404);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(406);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(392);
      match(CypherParser::SP);
    }
    setState(395);
=======
      setState(403);
      match(CypherParser::SP);
    }
    setState(406);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(405);
      match(CypherParser::SP);
    }
    setState(408);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ScanSourceContext ------------------------------------------------------------------

CypherParser::KU_ScanSourceContext::KU_ScanSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_FilePathsContext* CypherParser::KU_ScanSourceContext::kU_FilePaths() {
  return getRuleContext<CypherParser::KU_FilePathsContext>(0);
}

CypherParser::OC_QueryContext* CypherParser::KU_ScanSourceContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ScanSourceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ScanSourceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::KU_ScanSourceContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ScanSourceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_ScanSourceContext::getRuleIndex() const {
  return CypherParser::RuleKU_ScanSource;
}


CypherParser::KU_ScanSourceContext* CypherParser::kU_ScanSource() {
  KU_ScanSourceContext *_localctx = _tracker.createInstance<KU_ScanSourceContext>(_ctx, getState());
  enterRule(_localctx, 10, CypherParser::RuleKU_ScanSource);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
    setState(416);
=======
    setState(427);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(429);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(397);
=======
      setState(408);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(410);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_FilePaths();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(398);
      match(CypherParser::T__1);
      setState(400);
=======
      setState(409);
      match(CypherParser::T__1);
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      setState(411);
      match(CypherParser::T__1);
      setState(413);
<<<<<<< HEAD
      oC_Query();
      setState(415);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(399);
        match(CypherParser::SP);
      }
      setState(402);
      oC_Query();
      setState(404);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(403);
        match(CypherParser::SP);
      }
      setState(406);
=======
        setState(414);
=======
        setState(412);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        match(CypherParser::SP);
      }
      setState(415);
      oC_Query();
      setState(417);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(416);
        match(CypherParser::SP);
      }
      setState(419);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(408);
=======
      setState(419);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(421);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      oC_Variable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(409);
      oC_Variable();
      setState(410);
      match(CypherParser::T__4);
      setState(412);
=======
      setState(420);
=======
      setState(422);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      oC_Variable();
      setState(423);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      match(CypherParser::T__4);
      setState(425);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(411);
        match(CypherParser::SP);
      }
      setState(414);
=======
        setState(422);
        match(CypherParser::SP);
      }
      setState(425);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(424);
        match(CypherParser::SP);
      }
      setState(427);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromByColumnContext ------------------------------------------------------------------

CypherParser::KU_CopyFromByColumnContext::KU_CopyFromByColumnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromByColumnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COLUMN() {
  return getToken(CypherParser::COLUMN, 0);
}


size_t CypherParser::KU_CopyFromByColumnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFromByColumn;
}


CypherParser::KU_CopyFromByColumnContext* CypherParser::kU_CopyFromByColumn() {
  KU_CopyFromByColumnContext *_localctx = _tracker.createInstance<KU_CopyFromByColumnContext>(_ctx, getState());
  enterRule(_localctx, 12, CypherParser::RuleKU_CopyFromByColumn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(418);
    match(CypherParser::COPY);
    setState(419);
    match(CypherParser::SP);
    setState(420);
    oC_SchemaName();
    setState(421);
    match(CypherParser::SP);
    setState(422);
    match(CypherParser::FROM);
    setState(423);
    match(CypherParser::SP);
    setState(424);
    match(CypherParser::T__1);
    setState(426);
=======
    setState(429);
    match(CypherParser::COPY);
    setState(430);
    match(CypherParser::SP);
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(431);
    match(CypherParser::COPY);
    setState(432);
    match(CypherParser::SP);
    setState(433);
    oC_SchemaName();
    setState(434);
    match(CypherParser::SP);
    setState(435);
    match(CypherParser::FROM);
    setState(436);
    match(CypherParser::SP);
    setState(437);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    match(CypherParser::T__1);
    setState(439);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(425);
      match(CypherParser::SP);
    }
    setState(428);
    match(CypherParser::StringLiteral);
    setState(439);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
      setState(430);
=======
      setState(436);
=======
      setState(438);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::SP);
    }
    setState(441);
    match(CypherParser::StringLiteral);
    setState(452);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
      setState(443);
<<<<<<< HEAD
      match(CypherParser::T__2);
      setState(445);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(429);
        match(CypherParser::SP);
      }
      setState(432);
      match(CypherParser::T__2);
      setState(434);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(433);
        match(CypherParser::SP);
      }
      setState(436);
      match(CypherParser::StringLiteral);
      setState(441);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(442);
    match(CypherParser::T__3);
    setState(443);
    match(CypherParser::SP);
    setState(444);
    match(CypherParser::BY);
    setState(445);
    match(CypherParser::SP);
    setState(446);
=======
        setState(444);
=======
        setState(442);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        match(CypherParser::SP);
      }
      setState(445);
      match(CypherParser::T__2);
      setState(447);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(446);
        match(CypherParser::SP);
      }
      setState(449);
      match(CypherParser::StringLiteral);
      setState(454);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(455);
    match(CypherParser::T__3);
    setState(456);
    match(CypherParser::SP);
    setState(457);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    match(CypherParser::BY);
    setState(458);
    match(CypherParser::SP);
    setState(459);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::COLUMN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyTOContext ------------------------------------------------------------------

CypherParser::KU_CopyTOContext::KU_CopyTOContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyTOContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_QueryContext* CypherParser::KU_CopyTOContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::TO() {
  return getToken(CypherParser::TO, 0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyTOContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_CopyTOContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyTO;
}


CypherParser::KU_CopyTOContext* CypherParser::kU_CopyTO() {
  KU_CopyTOContext *_localctx = _tracker.createInstance<KU_CopyTOContext>(_ctx, getState());
  enterRule(_localctx, 14, CypherParser::RuleKU_CopyTO);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(448);
    match(CypherParser::COPY);
    setState(449);
    match(CypherParser::SP);
    setState(450);
    match(CypherParser::T__1);
    setState(452);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(451);
      match(CypherParser::SP);
    }
    setState(454);
    oC_Query();
    setState(456);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(455);
      match(CypherParser::SP);
    }
    setState(458);
    match(CypherParser::T__3);
=======
>>>>>>> 97f7ef93f (update parser for sequence)
    setState(459);
    match(CypherParser::COPY);
    setState(460);
<<<<<<< HEAD
    match(CypherParser::TO);
    setState(461);
    match(CypherParser::SP);
    setState(462);
    match(CypherParser::StringLiteral);
    setState(467);
=======
    match(CypherParser::SP);
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(461);
    match(CypherParser::COPY);
    setState(462);
    match(CypherParser::SP);
    setState(463);
    match(CypherParser::T__1);
    setState(465);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(464);
      match(CypherParser::SP);
    }
    setState(467);
    oC_Query();
    setState(469);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(468);
      match(CypherParser::SP);
    }
    setState(471);
    match(CypherParser::T__3);
    setState(472);
    match(CypherParser::SP);
    setState(473);
    match(CypherParser::TO);
    setState(474);
    match(CypherParser::SP);
    setState(475);
    match(CypherParser::StringLiteral);
<<<<<<< HEAD
    setState(478);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(480);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(464);
=======
      setState(475);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(477);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(463);
        match(CypherParser::SP);
      }
      setState(466);
=======
        setState(474);
        match(CypherParser::SP);
      }
      setState(477);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(476);
        match(CypherParser::SP);
      }
      setState(479);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ExportDatabaseContext::KU_ExportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ExportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_ExportDatabaseContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_ExportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ExportDatabase;
}


CypherParser::KU_ExportDatabaseContext* CypherParser::kU_ExportDatabase() {
  KU_ExportDatabaseContext *_localctx = _tracker.createInstance<KU_ExportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 16, CypherParser::RuleKU_ExportDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(469);
    match(CypherParser::EXPORT);
    setState(470);
    match(CypherParser::SP);
    setState(471);
    match(CypherParser::DATABASE);
    setState(472);
    match(CypherParser::SP);
    setState(473);
    match(CypherParser::StringLiteral);
    setState(478);
=======
    setState(480);
    match(CypherParser::EXPORT);
    setState(481);
    match(CypherParser::SP);
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(482);
    match(CypherParser::EXPORT);
    setState(483);
    match(CypherParser::SP);
    setState(484);
    match(CypherParser::DATABASE);
    setState(485);
    match(CypherParser::SP);
    setState(486);
    match(CypherParser::StringLiteral);
<<<<<<< HEAD
    setState(489);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(491);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(475);
=======
      setState(486);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(488);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(474);
        match(CypherParser::SP);
      }
      setState(477);
=======
        setState(485);
        match(CypherParser::SP);
      }
      setState(488);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(487);
        match(CypherParser::SP);
      }
      setState(490);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ImportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ImportDatabaseContext::KU_ImportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ImportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_ImportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ImportDatabase;
}


CypherParser::KU_ImportDatabaseContext* CypherParser::kU_ImportDatabase() {
  KU_ImportDatabaseContext *_localctx = _tracker.createInstance<KU_ImportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 18, CypherParser::RuleKU_ImportDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(480);
    match(CypherParser::IMPORT);
    setState(481);
    match(CypherParser::SP);
    setState(482);
    match(CypherParser::DATABASE);
    setState(483);
    match(CypherParser::SP);
    setState(484);
=======
    setState(491);
    match(CypherParser::IMPORT);
    setState(492);
    match(CypherParser::SP);
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(493);
    match(CypherParser::IMPORT);
    setState(494);
    match(CypherParser::SP);
    setState(495);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    match(CypherParser::DATABASE);
    setState(496);
    match(CypherParser::SP);
    setState(497);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AttachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_AttachDatabaseContext::KU_AttachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::ATTACH() {
  return getToken(CypherParser::ATTACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AttachDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::DBTYPE() {
  return getToken(CypherParser::DBTYPE, 0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_AttachDatabaseContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AttachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_AttachDatabaseContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}


size_t CypherParser::KU_AttachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_AttachDatabase;
}


CypherParser::KU_AttachDatabaseContext* CypherParser::kU_AttachDatabase() {
  KU_AttachDatabaseContext *_localctx = _tracker.createInstance<KU_AttachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 20, CypherParser::RuleKU_AttachDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(486);
    match(CypherParser::ATTACH);
    setState(487);
    match(CypherParser::SP);
    setState(488);
=======
    setState(497);
    match(CypherParser::ATTACH);
    setState(498);
    match(CypherParser::SP);
    setState(499);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(499);
    match(CypherParser::ATTACH);
    setState(500);
    match(CypherParser::SP);
    setState(501);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::StringLiteral);
    setState(508);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(489);
      match(CypherParser::SP);
      setState(490);
      match(CypherParser::AS);
      setState(491);
=======
      setState(500);
      match(CypherParser::SP);
      setState(501);
      match(CypherParser::AS);
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      setState(502);
      match(CypherParser::SP);
      setState(503);
      match(CypherParser::AS);
      setState(504);
>>>>>>> 97f7ef93f (update parser for sequence)
      match(CypherParser::SP);
<<<<<<< HEAD
      setState(492);
      oC_SchemaName();
=======
      setState(505);
      oC_SchemaName();
      setState(506);
      match(CypherParser::SP);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
    setState(495);
    match(CypherParser::SP);
    setState(496);
    match(CypherParser::T__1);
    setState(498);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(497);
      match(CypherParser::SP);
    }
    setState(500);
    match(CypherParser::DBTYPE);
    setState(501);
    match(CypherParser::SP);
    setState(502);
    oC_SymbolicName();
    setState(511);
=======
    setState(522);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(524);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(504);
=======
      setState(509);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(508);
        match(CypherParser::SP);
      }
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      setState(511);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(510);
        match(CypherParser::SP);
      }
      setState(513);
      match(CypherParser::T__1);
      setState(515);
<<<<<<< HEAD
      match(CypherParser::DBTYPE);
      setState(516);
      match(CypherParser::SP);
      setState(517);
      match(CypherParser::StringLiteral);
      setState(519);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(503);
        match(CypherParser::SP);
      }
      setState(506);
      match(CypherParser::T__2);
      setState(508);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(507);
        match(CypherParser::SP);
      }
      setState(510);
      kU_Options();
=======
        setState(518);
=======
        setState(514);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        match(CypherParser::SP);
      }
      setState(517);
      match(CypherParser::DBTYPE);
      setState(518);
      match(CypherParser::SP);
      setState(519);
      match(CypherParser::StringLiteral);
      setState(521);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(520);
        match(CypherParser::SP);
      }
      setState(523);
      match(CypherParser::T__3);
>>>>>>> 97f7ef93f (update parser for sequence)
      break;
    }

    default:
      break;
    }
    setState(514);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(513);
      match(CypherParser::SP);
    }
    setState(516);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionContext ------------------------------------------------------------------

CypherParser::KU_OptionContext::KU_OptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_OptionContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_OptionContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Option;
}


CypherParser::KU_OptionContext* CypherParser::kU_Option() {
  KU_OptionContext *_localctx = _tracker.createInstance<KU_OptionContext>(_ctx, getState());
  enterRule(_localctx, 22, CypherParser::RuleKU_Option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(518);
    oC_SymbolicName();
    setState(520);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(519);
      match(CypherParser::SP);
    }
    setState(522);
    match(CypherParser::T__5);
    setState(524);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(523);
      match(CypherParser::SP);
    }
    setState(526);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionsContext ------------------------------------------------------------------

CypherParser::KU_OptionsContext::KU_OptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_OptionContext *> CypherParser::KU_OptionsContext::kU_Option() {
  return getRuleContexts<CypherParser::KU_OptionContext>();
}

CypherParser::KU_OptionContext* CypherParser::KU_OptionsContext::kU_Option(size_t i) {
  return getRuleContext<CypherParser::KU_OptionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_Options;
}


CypherParser::KU_OptionsContext* CypherParser::kU_Options() {
  KU_OptionsContext *_localctx = _tracker.createInstance<KU_OptionsContext>(_ctx, getState());
  enterRule(_localctx, 24, CypherParser::RuleKU_Options);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(528);
    kU_Option();
    setState(539);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(530);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(529);
          match(CypherParser::SP);
        }
        setState(532);
        match(CypherParser::T__2);
        setState(534);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(533);
          match(CypherParser::SP);
        }
        setState(536);
        kU_Option(); 
      }
      setState(541);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DetachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_DetachDatabaseContext::KU_DetachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DetachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_DetachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_DetachDatabase;
}


CypherParser::KU_DetachDatabaseContext* CypherParser::kU_DetachDatabase() {
  KU_DetachDatabaseContext *_localctx = _tracker.createInstance<KU_DetachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 26, CypherParser::RuleKU_DetachDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(542);
    match(CypherParser::DETACH);
    setState(543);
    match(CypherParser::SP);
    setState(544);
=======
    setState(524);
    match(CypherParser::DETACH);
    setState(525);
    match(CypherParser::SP);
    setState(526);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(526);
    match(CypherParser::DETACH);
    setState(527);
    match(CypherParser::SP);
    setState(528);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_UseDatabaseContext ------------------------------------------------------------------

CypherParser::KU_UseDatabaseContext::KU_UseDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_UseDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_UseDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_UseDatabase;
}


CypherParser::KU_UseDatabaseContext* CypherParser::kU_UseDatabase() {
  KU_UseDatabaseContext *_localctx = _tracker.createInstance<KU_UseDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 28, CypherParser::RuleKU_UseDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(546);
    match(CypherParser::USE);
    setState(547);
    match(CypherParser::SP);
    setState(548);
=======
    setState(528);
    match(CypherParser::USE);
    setState(529);
    match(CypherParser::SP);
    setState(530);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(530);
    match(CypherParser::USE);
    setState(531);
    match(CypherParser::SP);
    setState(532);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StandaloneCallContext ------------------------------------------------------------------

CypherParser::KU_StandaloneCallContext::KU_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StandaloneCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StandaloneCallContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StandaloneCallContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_StandaloneCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_StandaloneCall;
}


CypherParser::KU_StandaloneCallContext* CypherParser::kU_StandaloneCall() {
  KU_StandaloneCallContext *_localctx = _tracker.createInstance<KU_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 30, CypherParser::RuleKU_StandaloneCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(550);
    match(CypherParser::CALL);
    setState(551);
    match(CypherParser::SP);
    setState(552);
    oC_SymbolicName();
    setState(554);
=======
    setState(532);
    match(CypherParser::CALL);
    setState(533);
    match(CypherParser::SP);
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(534);
    match(CypherParser::CALL);
    setState(535);
    match(CypherParser::SP);
    setState(536);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(553);
      match(CypherParser::SP);
    }
    setState(556);
    match(CypherParser::T__5);
    setState(558);
=======
      setState(535);
      match(CypherParser::SP);
    }
    setState(538);
    match(CypherParser::T__5);
    setState(540);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    oC_SymbolicName();
    setState(538);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(557);
      match(CypherParser::SP);
    }
    setState(560);
=======
      setState(539);
=======
      setState(537);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::SP);
    }
    setState(540);
    match(CypherParser::T__5);
    setState(542);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(541);
      match(CypherParser::SP);
    }
    setState(544);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CommentOnContext ------------------------------------------------------------------

CypherParser::KU_CommentOnContext::KU_CommentOnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::COMMENT_() {
  return getToken(CypherParser::COMMENT_, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CommentOnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::ON() {
  return getToken(CypherParser::ON, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CommentOnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_CommentOnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CommentOn;
}


CypherParser::KU_CommentOnContext* CypherParser::kU_CommentOn() {
  KU_CommentOnContext *_localctx = _tracker.createInstance<KU_CommentOnContext>(_ctx, getState());
  enterRule(_localctx, 32, CypherParser::RuleKU_CommentOn);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(562);
    match(CypherParser::COMMENT_);
    setState(563);
    match(CypherParser::SP);
    setState(564);
    match(CypherParser::ON);
    setState(565);
    match(CypherParser::SP);
    setState(566);
    match(CypherParser::TABLE);
    setState(567);
    match(CypherParser::SP);
    setState(568);
    oC_SchemaName();
    setState(569);
    match(CypherParser::SP);
    setState(570);
    match(CypherParser::IS);
    setState(571);
    match(CypherParser::SP);
    setState(572);
=======
    setState(544);
    match(CypherParser::COMMENT_);
    setState(545);
    match(CypherParser::SP);
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(546);
    match(CypherParser::COMMENT_);
    setState(547);
    match(CypherParser::SP);
    setState(548);
    match(CypherParser::ON);
    setState(549);
    match(CypherParser::SP);
    setState(550);
    match(CypherParser::TABLE);
    setState(551);
    match(CypherParser::SP);
    setState(552);
    oC_SchemaName();
    setState(553);
    match(CypherParser::SP);
    setState(554);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    match(CypherParser::IS);
    setState(555);
    match(CypherParser::SP);
    setState(556);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateMacroContext ------------------------------------------------------------------

CypherParser::KU_CreateMacroContext::KU_CreateMacroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateMacroContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::MACRO() {
  return getToken(CypherParser::MACRO, 0);
}

CypherParser::OC_FunctionNameContext* CypherParser::KU_CreateMacroContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_CreateMacroContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::KU_PositionalArgsContext* CypherParser::KU_CreateMacroContext::kU_PositionalArgs() {
  return getRuleContext<CypherParser::KU_PositionalArgsContext>(0);
}

std::vector<CypherParser::KU_DefaultArgContext *> CypherParser::KU_CreateMacroContext::kU_DefaultArg() {
  return getRuleContexts<CypherParser::KU_DefaultArgContext>();
}

CypherParser::KU_DefaultArgContext* CypherParser::KU_CreateMacroContext::kU_DefaultArg(size_t i) {
  return getRuleContext<CypherParser::KU_DefaultArgContext>(i);
}


size_t CypherParser::KU_CreateMacroContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateMacro;
}


CypherParser::KU_CreateMacroContext* CypherParser::kU_CreateMacro() {
  KU_CreateMacroContext *_localctx = _tracker.createInstance<KU_CreateMacroContext>(_ctx, getState());
  enterRule(_localctx, 34, CypherParser::RuleKU_CreateMacro);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(574);
    match(CypherParser::CREATE);
    setState(575);
    match(CypherParser::SP);
    setState(576);
    match(CypherParser::MACRO);
    setState(577);
    match(CypherParser::SP);
    setState(578);
    oC_FunctionName();
    setState(580);
=======
    setState(556);
    match(CypherParser::CREATE);
    setState(557);
    match(CypherParser::SP);
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(558);
    match(CypherParser::CREATE);
    setState(559);
    match(CypherParser::SP);
    setState(560);
    match(CypherParser::MACRO);
    setState(561);
    match(CypherParser::SP);
    setState(562);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    oC_FunctionName();
    setState(564);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(579);
      match(CypherParser::SP);
    }
    setState(582);
    match(CypherParser::T__1);
    setState(584);
=======
      setState(561);
=======
      setState(563);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::SP);
    }
    setState(566);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    match(CypherParser::T__1);
    setState(568);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(583);
=======
      setState(565);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(567);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
    setState(587);
=======
    setState(569);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(571);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(586);
=======
      setState(568);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(570);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      kU_PositionalArgs();
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
    setState(590);
=======
    setState(572);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(574);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(589);
=======
      setState(571);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(573);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
    setState(593);
=======
    setState(575);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(577);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
<<<<<<< HEAD
      ((1ULL << (_la - 48)) & 71307013) != 0) || ((((_la - 121) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 121)) & 302256385) != 0)) {
      setState(592);
      kU_DefaultArg();
    }
    setState(605);
=======
      ((1ULL << (_la - 48)) & 9126809349) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
=======
      ((1ULL << (_la - 48)) & 9127333637) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
>>>>>>> aed81ff20 (create sequence complete)
      ((1ULL << (_la - 128)) & 302256385) != 0)) {
      setState(576);
      kU_DefaultArg();
    }
<<<<<<< HEAD
    setState(587);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(589);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(596);
=======
        setState(578);
>>>>>>> 97f7ef93f (update parser for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(595);
          match(CypherParser::SP);
        }
        setState(598);
        match(CypherParser::T__2);
        setState(600);
=======
          setState(577);
          match(CypherParser::SP);
        }
        setState(580);
        match(CypherParser::T__2);
        setState(582);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(580);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
          setState(599);
          match(CypherParser::SP);
        }
        setState(602);
        kU_DefaultArg(); 
      }
      setState(607);
=======
          setState(581);
=======
          setState(579);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
          match(CypherParser::SP);
        }
        setState(582);
        match(CypherParser::T__2);
        setState(584);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(583);
          match(CypherParser::SP);
        }
        setState(586);
        kU_DefaultArg(); 
      }
<<<<<<< HEAD
      setState(589);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(591);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    }
<<<<<<< HEAD
<<<<<<< HEAD
    setState(609);
=======
    setState(591);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(593);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(608);
      match(CypherParser::SP);
    }
    setState(611);
    match(CypherParser::T__3);
    setState(612);
    match(CypherParser::SP);
    setState(613);
    match(CypherParser::AS);
    setState(614);
    match(CypherParser::SP);
    setState(615);
=======
      setState(590);
=======
      setState(592);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::SP);
    }
    setState(595);
    match(CypherParser::T__3);
    setState(596);
    match(CypherParser::SP);
    setState(597);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    match(CypherParser::AS);
    setState(598);
    match(CypherParser::SP);
    setState(599);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PositionalArgsContext ------------------------------------------------------------------

CypherParser::KU_PositionalArgsContext::KU_PositionalArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_PositionalArgsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_PositionalArgsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PositionalArgsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PositionalArgsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PositionalArgsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PositionalArgs;
}


CypherParser::KU_PositionalArgsContext* CypherParser::kU_PositionalArgs() {
  KU_PositionalArgsContext *_localctx = _tracker.createInstance<KU_PositionalArgsContext>(_ctx, getState());
  enterRule(_localctx, 36, CypherParser::RuleKU_PositionalArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(617);
    oC_SymbolicName();
    setState(628);
=======
    setState(599);
    oC_SymbolicName();
    setState(610);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(601);
    oC_SymbolicName();
    setState(612);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(619);
=======
        setState(601);
>>>>>>> 97f7ef93f (update parser for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(618);
          match(CypherParser::SP);
        }
        setState(621);
        match(CypherParser::T__2);
        setState(623);
=======
          setState(600);
          match(CypherParser::SP);
        }
        setState(603);
        match(CypherParser::T__2);
        setState(605);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(603);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
          setState(622);
          match(CypherParser::SP);
        }
        setState(625);
        oC_SymbolicName(); 
      }
      setState(630);
=======
          setState(604);
=======
          setState(602);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
          match(CypherParser::SP);
        }
        setState(605);
        match(CypherParser::T__2);
        setState(607);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(606);
          match(CypherParser::SP);
        }
        setState(609);
        oC_SymbolicName(); 
      }
<<<<<<< HEAD
      setState(612);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(614);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultArgContext ------------------------------------------------------------------

CypherParser::KU_DefaultArgContext::KU_DefaultArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DefaultArgContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_DefaultArgContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DefaultArgContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_DefaultArgContext::getRuleIndex() const {
  return CypherParser::RuleKU_DefaultArg;
}


CypherParser::KU_DefaultArgContext* CypherParser::kU_DefaultArg() {
  KU_DefaultArgContext *_localctx = _tracker.createInstance<KU_DefaultArgContext>(_ctx, getState());
  enterRule(_localctx, 38, CypherParser::RuleKU_DefaultArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(631);
    oC_SymbolicName();
    setState(633);
=======
    setState(613);
    oC_SymbolicName();
    setState(615);
>>>>>>> 97f7ef93f (update parser for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(632);
      match(CypherParser::SP);
    }
    setState(635);
    match(CypherParser::COLON);
    setState(636);
    match(CypherParser::T__5);
    setState(638);
=======
      setState(614);
      match(CypherParser::SP);
    }
    setState(617);
    match(CypherParser::COLON);
    setState(618);
    match(CypherParser::T__5);
    setState(620);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(615);
    oC_SymbolicName();
    setState(617);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(637);
      match(CypherParser::SP);
    }
    setState(640);
=======
      setState(619);
=======
      setState(616);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::SP);
    }
    setState(619);
    match(CypherParser::COLON);
    setState(620);
    match(CypherParser::T__5);
    setState(622);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(621);
      match(CypherParser::SP);
    }
    setState(624);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FilePathsContext ------------------------------------------------------------------

CypherParser::KU_FilePathsContext::KU_FilePathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::GLOB() {
  return getToken(CypherParser::GLOB, 0);
}


size_t CypherParser::KU_FilePathsContext::getRuleIndex() const {
  return CypherParser::RuleKU_FilePaths;
}


CypherParser::KU_FilePathsContext* CypherParser::kU_FilePaths() {
  KU_FilePathsContext *_localctx = _tracker.createInstance<KU_FilePathsContext>(_ctx, getState());
  enterRule(_localctx, 40, CypherParser::RuleKU_FilePaths);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
    setState(675);
=======
    setState(657);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(659);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
        setState(642);
        match(CypherParser::T__6);
        setState(644);
=======
        setState(624);
        match(CypherParser::T__6);
        setState(626);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(626);
        match(CypherParser::T__6);
        setState(628);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
          setState(643);
          match(CypherParser::SP);
        }
        setState(646);
        match(CypherParser::StringLiteral);
        setState(657);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
          setState(648);
=======
          setState(625);
=======
          setState(627);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
          match(CypherParser::SP);
        }
        setState(630);
        match(CypherParser::StringLiteral);
        setState(641);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
<<<<<<< HEAD
          setState(630);
>>>>>>> 97f7ef93f (update parser for sequence)
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
<<<<<<< HEAD
            setState(647);
            match(CypherParser::SP);
          }
          setState(650);
          match(CypherParser::T__2);
          setState(652);
=======
            setState(629);
            match(CypherParser::SP);
          }
          setState(632);
          match(CypherParser::T__2);
          setState(634);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
          setState(632);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
            setState(651);
            match(CypherParser::SP);
          }
          setState(654);
          match(CypherParser::StringLiteral);
          setState(659);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(660);
=======
            setState(633);
=======
            setState(631);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
            match(CypherParser::SP);
          }
          setState(634);
          match(CypherParser::T__2);
          setState(636);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(635);
            match(CypherParser::SP);
          }
          setState(638);
          match(CypherParser::StringLiteral);
          setState(643);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
<<<<<<< HEAD
        setState(642);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(644);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        match(CypherParser::T__7);
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
        setState(661);
=======
        setState(643);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(645);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::GLOB: {
        enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
<<<<<<< HEAD
        setState(662);
        match(CypherParser::GLOB);
        setState(664);
=======
        setState(644);
        match(CypherParser::GLOB);
        setState(646);
>>>>>>> 97f7ef93f (update parser for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(663);
          match(CypherParser::SP);
        }
        setState(666);
        match(CypherParser::T__1);
        setState(668);
=======
          setState(645);
          match(CypherParser::SP);
        }
=======
        setState(646);
        match(CypherParser::GLOB);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        setState(648);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(647);
          match(CypherParser::SP);
        }
        setState(650);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(667);
          match(CypherParser::SP);
        }
        setState(670);
        match(CypherParser::StringLiteral);
        setState(672);
=======
          setState(649);
          match(CypherParser::SP);
        }
        setState(652);
        match(CypherParser::StringLiteral);
        setState(654);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        match(CypherParser::T__1);
        setState(652);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
          setState(671);
          match(CypherParser::SP);
        }
        setState(674);
=======
          setState(653);
=======
          setState(651);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
          match(CypherParser::SP);
        }
        setState(654);
        match(CypherParser::StringLiteral);
        setState(656);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(655);
          match(CypherParser::SP);
        }
        setState(658);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        match(CypherParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ParsingOptionsContext ------------------------------------------------------------------

CypherParser::KU_ParsingOptionsContext::KU_ParsingOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_OptionsContext* CypherParser::KU_ParsingOptionsContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ParsingOptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ParsingOptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ParsingOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_ParsingOptions;
}


CypherParser::KU_ParsingOptionsContext* CypherParser::kU_ParsingOptions() {
  KU_ParsingOptionsContext *_localctx = _tracker.createInstance<KU_ParsingOptionsContext>(_ctx, getState());
<<<<<<< HEAD
  enterRule(_localctx, 42, CypherParser::RuleKU_ParsingOptions);
=======
  enterRule(_localctx, 38, CypherParser::RuleKU_ParsingOptions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(661);
    match(CypherParser::T__1);
    setState(663);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(662);
      match(CypherParser::SP);
    }
    setState(665);
    kU_ParsingOption();
    setState(676);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(667);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(666);
          match(CypherParser::SP);
        }
        setState(669);
        match(CypherParser::T__2);
        setState(671);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(670);
          match(CypherParser::SP);
        }
        setState(673);
        kU_ParsingOption(); 
      }
      setState(678);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx);
    }
    setState(680);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(679);
      match(CypherParser::SP);
    }
    setState(682);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ParsingOptionContext ------------------------------------------------------------------

CypherParser::KU_ParsingOptionContext::KU_ParsingOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_ParsingOptionContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_ParsingOptionContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ParsingOptionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ParsingOptionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ParsingOptionContext::getRuleIndex() const {
  return CypherParser::RuleKU_ParsingOption;
}


CypherParser::KU_ParsingOptionContext* CypherParser::kU_ParsingOption() {
  KU_ParsingOptionContext *_localctx = _tracker.createInstance<KU_ParsingOptionContext>(_ctx, getState());
  enterRule(_localctx, 40, CypherParser::RuleKU_ParsingOption);
>>>>>>> 97f7ef93f (update parser for sequence)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(677);
    match(CypherParser::T__1);
    setState(679);
=======
    setState(682);
    oC_SymbolicName();
    setState(684);
>>>>>>> 97f7ef93f (update parser for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(678);
      match(CypherParser::SP);
    }
    setState(681);
    kU_Options();
    setState(683);
=======
      setState(683);
      match(CypherParser::SP);
    }
    setState(686);
    match(CypherParser::T__5);
    setState(688);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(684);
    oC_SymbolicName();
    setState(686);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(682);
      match(CypherParser::SP);
    }
    setState(685);
    match(CypherParser::T__3);
=======
      setState(687);
=======
      setState(685);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::SP);
    }
    setState(688);
    match(CypherParser::T__5);
    setState(690);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(689);
      match(CypherParser::SP);
    }
    setState(692);
    oC_Literal();
>>>>>>> 97f7ef93f (update parser for sequence)
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeTableContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeTableContext::KU_CreateNodeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateNodeTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateNodeTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_CreateNodeConstraintContext* CypherParser::KU_CreateNodeTableContext::kU_CreateNodeConstraint() {
  return getRuleContext<CypherParser::KU_CreateNodeConstraintContext>(0);
}


size_t CypherParser::KU_CreateNodeTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeTable;
}


CypherParser::KU_CreateNodeTableContext* CypherParser::kU_CreateNodeTable() {
  KU_CreateNodeTableContext *_localctx = _tracker.createInstance<KU_CreateNodeTableContext>(_ctx, getState());
  enterRule(_localctx, 44, CypherParser::RuleKU_CreateNodeTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(687);
    match(CypherParser::CREATE);
    setState(688);
    match(CypherParser::SP);
    setState(689);
    match(CypherParser::NODE);
    setState(690);
    match(CypherParser::SP);
    setState(691);
    match(CypherParser::TABLE);
    setState(692);
    match(CypherParser::SP);
    setState(693);
    oC_SchemaName();
    setState(695);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(694);
      match(CypherParser::SP);
    }
    setState(697);
    match(CypherParser::T__1);
    setState(699);
=======
    setState(692);
    match(CypherParser::CREATE);
    setState(693);
    match(CypherParser::SP);
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(694);
    match(CypherParser::CREATE);
    setState(695);
    match(CypherParser::SP);
    setState(696);
    match(CypherParser::NODE);
    setState(697);
    match(CypherParser::SP);
    setState(698);
    match(CypherParser::TABLE);
    setState(699);
    match(CypherParser::SP);
    setState(700);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(699);
      match(CypherParser::SP);
    }
<<<<<<< HEAD
    setState(701);
    kU_PropertyDefinitions();
    setState(703);
=======
=======
    oC_SchemaName();
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(702);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(701);
      match(CypherParser::SP);
    }
    setState(704);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(702);
      match(CypherParser::SP);
    }
<<<<<<< HEAD

    setState(705);
    match(CypherParser::T__2);
    setState(707);
=======
=======
    match(CypherParser::T__1);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(706);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(705);
      match(CypherParser::SP);
    }
    setState(708);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(706);
      match(CypherParser::SP);
    }
    setState(709);
    kU_CreateNodeConstraint();
=======
      setState(707);
      match(CypherParser::SP);
    }

    setState(710);
    match(CypherParser::T__2);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    kU_PropertyDefinitions();
    setState(710);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(709);
      match(CypherParser::SP);
    }

>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(712);
    match(CypherParser::T__2);
    setState(714);
<<<<<<< HEAD
<<<<<<< HEAD
=======
    kU_CreateNodeConstraint();
    setState(717);
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(713);
      match(CypherParser::SP);
    }
    setState(716);
    kU_CreateNodeConstraint();
    setState(719);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(718);
      match(CypherParser::SP);
    }
    setState(721);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableContext::KU_CreateRelTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableContext::kU_RelTableConnection() {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTable;
}


CypherParser::KU_CreateRelTableContext* CypherParser::kU_CreateRelTable() {
  KU_CreateRelTableContext *_localctx = _tracker.createInstance<KU_CreateRelTableContext>(_ctx, getState());
  enterRule(_localctx, 46, CypherParser::RuleKU_CreateRelTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(716);
    match(CypherParser::CREATE);
    setState(717);
    match(CypherParser::SP);
    setState(718);
    match(CypherParser::REL);
    setState(719);
    match(CypherParser::SP);
    setState(720);
    match(CypherParser::TABLE);
    setState(721);
    match(CypherParser::SP);
    setState(722);
    oC_SchemaName();
=======
    setState(721);
    match(CypherParser::CREATE);
    setState(722);
    match(CypherParser::SP);
    setState(723);
    match(CypherParser::REL);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(723);
    match(CypherParser::CREATE);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(724);
    match(CypherParser::SP);
    setState(725);
    match(CypherParser::REL);
    setState(726);
    match(CypherParser::SP);
    setState(727);
    match(CypherParser::TABLE);
    setState(728);
    match(CypherParser::SP);
    setState(729);
<<<<<<< HEAD
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(728);
      match(CypherParser::SP);
    }
<<<<<<< HEAD
    setState(726);
    match(CypherParser::T__1);
    setState(728);
=======
=======
    oC_SchemaName();
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(731);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(730);
      match(CypherParser::SP);
    }
    setState(733);
    match(CypherParser::T__1);
    setState(735);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(734);
      match(CypherParser::SP);
    }
<<<<<<< HEAD
    setState(747);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(737);
    kU_RelTableConnection();
    setState(739);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(738);
      match(CypherParser::SP);
    }
    setState(749);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(727);
      match(CypherParser::SP);
    }
    setState(730);
    kU_RelTableConnection();
    setState(732);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(731);
      match(CypherParser::SP);
    }
    setState(742);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(734);
      match(CypherParser::T__2);
      setState(736);
=======
      setState(739);
      match(CypherParser::T__2);
      setState(741);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(741);
      match(CypherParser::T__2);
      setState(743);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(735);
        match(CypherParser::SP);
      }
      setState(738);
      kU_PropertyDefinitions();
      setState(740);
=======
        setState(740);
=======
        setState(742);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        match(CypherParser::SP);
      }
      setState(745);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      kU_PropertyDefinitions();
      setState(747);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(739);
=======
        setState(744);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(746);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
    setState(752);
=======
    setState(757);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(759);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(744);
      match(CypherParser::T__2);
      setState(746);
=======
      setState(749);
      match(CypherParser::T__2);
      setState(751);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(751);
      match(CypherParser::T__2);
      setState(753);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(745);
        match(CypherParser::SP);
      }
      setState(748);
      oC_SymbolicName();
      setState(750);
=======
        setState(750);
=======
        setState(752);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        match(CypherParser::SP);
      }
      setState(755);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      oC_SymbolicName();
      setState(757);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(749);
        match(CypherParser::SP);
      }
    }
    setState(754);
=======
        setState(754);
        match(CypherParser::SP);
      }
    }
    setState(759);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(756);
        match(CypherParser::SP);
      }
    }
    setState(761);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableGroupContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableGroupContext::KU_CreateRelTableGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableGroupContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::GROUP() {
  return getToken(CypherParser::GROUP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

std::vector<CypherParser::KU_RelTableConnectionContext *> CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection() {
  return getRuleContexts<CypherParser::KU_RelTableConnectionContext>();
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection(size_t i) {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(i);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableGroupContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableGroupContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTableGroup;
}


CypherParser::KU_CreateRelTableGroupContext* CypherParser::kU_CreateRelTableGroup() {
  KU_CreateRelTableGroupContext *_localctx = _tracker.createInstance<KU_CreateRelTableGroupContext>(_ctx, getState());
  enterRule(_localctx, 48, CypherParser::RuleKU_CreateRelTableGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(756);
    match(CypherParser::CREATE);
    setState(757);
    match(CypherParser::SP);
    setState(758);
    match(CypherParser::REL);
    setState(759);
    match(CypherParser::SP);
    setState(760);
    match(CypherParser::TABLE);
    setState(761);
    match(CypherParser::SP);
    setState(762);
    match(CypherParser::GROUP);
    setState(763);
    match(CypherParser::SP);
    setState(764);
    oC_SchemaName();
=======
    setState(761);
    match(CypherParser::CREATE);
    setState(762);
    match(CypherParser::SP);
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(763);
    match(CypherParser::CREATE);
    setState(764);
    match(CypherParser::SP);
    setState(765);
<<<<<<< HEAD
    match(CypherParser::TABLE);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    match(CypherParser::REL);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(766);
    match(CypherParser::SP);
    setState(767);
    match(CypherParser::TABLE);
    setState(768);
    match(CypherParser::SP);
    setState(769);
    match(CypherParser::GROUP);
    setState(770);
    match(CypherParser::SP);
    setState(771);
<<<<<<< HEAD
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(770);
      match(CypherParser::SP);
    }
<<<<<<< HEAD
    setState(768);
    match(CypherParser::T__1);
    setState(770);
=======
=======
    oC_SchemaName();
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(773);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(772);
      match(CypherParser::SP);
    }
    setState(775);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(769);
      match(CypherParser::SP);
    }
    setState(772);
    kU_RelTableConnection();
    setState(774);
=======
      setState(774);
      match(CypherParser::SP);
    }
    setState(777);
    kU_RelTableConnection();
    setState(779);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    match(CypherParser::T__1);
    setState(777);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(773);
      match(CypherParser::SP);
    }
    setState(781); 
=======
      setState(778);
      match(CypherParser::SP);
    }
    setState(786); 
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(776);
      match(CypherParser::SP);
    }
    setState(779);
    kU_RelTableConnection();
    setState(781);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(780);
      match(CypherParser::SP);
    }
    setState(788); 
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
              setState(776);
              match(CypherParser::T__2);
              setState(778);
=======
              setState(781);
              match(CypherParser::T__2);
              setState(783);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
              setState(783);
              match(CypherParser::T__2);
              setState(785);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
                setState(777);
                match(CypherParser::SP);
              }
              setState(780);
=======
                setState(782);
                match(CypherParser::SP);
              }
              setState(785);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
                setState(784);
                match(CypherParser::SP);
              }
              setState(787);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
              kU_RelTableConnection();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
<<<<<<< HEAD
<<<<<<< HEAD
      setState(783); 
=======
      setState(788); 
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(790); 
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(786);
=======
    setState(791);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(793);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(785);
      match(CypherParser::SP);
    }
    setState(796);
=======
      setState(790);
      match(CypherParser::SP);
    }
    setState(801);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(792);
      match(CypherParser::SP);
    }
    setState(803);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(788);
      match(CypherParser::T__2);
      setState(790);
=======
      setState(793);
      match(CypherParser::T__2);
      setState(795);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(795);
      match(CypherParser::T__2);
      setState(797);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(789);
        match(CypherParser::SP);
      }
      setState(792);
      kU_PropertyDefinitions();
      setState(794);
=======
        setState(794);
=======
        setState(796);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        match(CypherParser::SP);
      }
      setState(799);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      kU_PropertyDefinitions();
      setState(801);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(793);
=======
        setState(798);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(800);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
    setState(806);
=======
    setState(811);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(813);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(798);
      match(CypherParser::T__2);
      setState(800);
=======
      setState(803);
      match(CypherParser::T__2);
      setState(805);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(805);
      match(CypherParser::T__2);
      setState(807);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(799);
        match(CypherParser::SP);
      }
      setState(802);
      oC_SymbolicName();
      setState(804);
=======
        setState(804);
=======
        setState(806);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        match(CypherParser::SP);
      }
      setState(809);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      oC_SymbolicName();
      setState(811);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(803);
        match(CypherParser::SP);
      }
    }
    setState(808);
=======
        setState(808);
        match(CypherParser::SP);
      }
    }
    setState(813);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(810);
        match(CypherParser::SP);
      }
    }
    setState(815);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RelTableConnectionContext ------------------------------------------------------------------

CypherParser::KU_RelTableConnectionContext::KU_RelTableConnectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RelTableConnectionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_RelTableConnectionContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RelTableConnectionContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RelTableConnectionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RelTableConnection;
}


CypherParser::KU_RelTableConnectionContext* CypherParser::kU_RelTableConnection() {
  KU_RelTableConnectionContext *_localctx = _tracker.createInstance<KU_RelTableConnectionContext>(_ctx, getState());
  enterRule(_localctx, 50, CypherParser::RuleKU_RelTableConnection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(810);
    match(CypherParser::FROM);
    setState(811);
    match(CypherParser::SP);
    setState(812);
    oC_SchemaName();
    setState(813);
    match(CypherParser::SP);
    setState(814);
    match(CypherParser::TO);
    setState(815);
    match(CypherParser::SP);
    setState(816);
=======
    setState(815);
    match(CypherParser::FROM);
    setState(816);
    match(CypherParser::SP);
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(817);
    match(CypherParser::FROM);
    setState(818);
    match(CypherParser::SP);
    setState(819);
    oC_SchemaName();
    setState(820);
    match(CypherParser::SP);
    setState(821);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    match(CypherParser::TO);
    setState(822);
    match(CypherParser::SP);
    setState(823);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRdfGraphContext ------------------------------------------------------------------

CypherParser::KU_CreateRdfGraphContext::KU_CreateRdfGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRdfGraphContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRdfGraphContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_CreateRdfGraphContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRdfGraph;
}


CypherParser::KU_CreateRdfGraphContext* CypherParser::kU_CreateRdfGraph() {
  KU_CreateRdfGraphContext *_localctx = _tracker.createInstance<KU_CreateRdfGraphContext>(_ctx, getState());
  enterRule(_localctx, 52, CypherParser::RuleKU_CreateRdfGraph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(818);
    match(CypherParser::CREATE);
    setState(819);
    match(CypherParser::SP);
    setState(820);
    match(CypherParser::RDFGRAPH);
    setState(821);
    match(CypherParser::SP);
    setState(822);
=======
    setState(823);
    match(CypherParser::CREATE);
    setState(824);
    match(CypherParser::SP);
=======
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(825);
    match(CypherParser::CREATE);
    setState(826);
    match(CypherParser::SP);
    setState(827);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    match(CypherParser::RDFGRAPH);
    setState(828);
    match(CypherParser::SP);
    setState(829);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateSequenceContext ------------------------------------------------------------------

CypherParser::KU_CreateSequenceContext::KU_CreateSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateSequenceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateSequenceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

std::vector<CypherParser::KU_SequenceOptionsContext *> CypherParser::KU_CreateSequenceContext::kU_SequenceOptions() {
  return getRuleContexts<CypherParser::KU_SequenceOptionsContext>();
}

CypherParser::KU_SequenceOptionsContext* CypherParser::KU_CreateSequenceContext::kU_SequenceOptions(size_t i) {
  return getRuleContext<CypherParser::KU_SequenceOptionsContext>(i);
}


size_t CypherParser::KU_CreateSequenceContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateSequence;
}


CypherParser::KU_CreateSequenceContext* CypherParser::kU_CreateSequence() {
  KU_CreateSequenceContext *_localctx = _tracker.createInstance<KU_CreateSequenceContext>(_ctx, getState());
  enterRule(_localctx, 52, CypherParser::RuleKU_CreateSequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(831);
    match(CypherParser::CREATE);
    setState(832);
    match(CypherParser::SP);
    setState(833);
    match(CypherParser::SEQUENCE);
    setState(834);
    match(CypherParser::SP);
    setState(835);
    oC_SchemaName();
    setState(840);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(836);
        match(CypherParser::SP);
        setState(837);
        kU_SequenceOptions(); 
      }
      setState(842);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_SequenceOptionsContext ------------------------------------------------------------------

CypherParser::KU_SequenceOptionsContext::KU_SequenceOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_IncrementByContext* CypherParser::KU_SequenceOptionsContext::kU_IncrementBy() {
  return getRuleContext<CypherParser::KU_IncrementByContext>(0);
}

CypherParser::KU_MinValueContext* CypherParser::KU_SequenceOptionsContext::kU_MinValue() {
  return getRuleContext<CypherParser::KU_MinValueContext>(0);
}

CypherParser::KU_MaxValueContext* CypherParser::KU_SequenceOptionsContext::kU_MaxValue() {
  return getRuleContext<CypherParser::KU_MaxValueContext>(0);
}

CypherParser::KU_StartWithContext* CypherParser::KU_SequenceOptionsContext::kU_StartWith() {
  return getRuleContext<CypherParser::KU_StartWithContext>(0);
}

CypherParser::KU_CycleContext* CypherParser::KU_SequenceOptionsContext::kU_Cycle() {
  return getRuleContext<CypherParser::KU_CycleContext>(0);
}


size_t CypherParser::KU_SequenceOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_SequenceOptions;
}


CypherParser::KU_SequenceOptionsContext* CypherParser::kU_SequenceOptions() {
  KU_SequenceOptionsContext *_localctx = _tracker.createInstance<KU_SequenceOptionsContext>(_ctx, getState());
  enterRule(_localctx, 54, CypherParser::RuleKU_SequenceOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(848);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(843);
      kU_IncrementBy();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(844);
      kU_MinValue();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(845);
      kU_MaxValue();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(846);
      kU_StartWith();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(847);
      kU_Cycle();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IncrementByContext ------------------------------------------------------------------

CypherParser::KU_IncrementByContext::KU_IncrementByContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_IncrementByContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_IncrementByContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_IncrementByContext::getRuleIndex() const {
  return CypherParser::RuleKU_IncrementBy;
}


CypherParser::KU_IncrementByContext* CypherParser::kU_IncrementBy() {
  KU_IncrementByContext *_localctx = _tracker.createInstance<KU_IncrementByContext>(_ctx, getState());
  enterRule(_localctx, 56, CypherParser::RuleKU_IncrementBy);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(850);
    match(CypherParser::INCREMENT);
    setState(851);
    match(CypherParser::SP);
    setState(854);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::BY) {
      setState(852);
      match(CypherParser::BY);
      setState(853);
      match(CypherParser::SP);
    }
    setState(857);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(856);
      match(CypherParser::MINUS);
    }
    setState(859);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MinValueContext ------------------------------------------------------------------

CypherParser::KU_MinValueContext::KU_MinValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MinValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MinValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MinValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MinValue;
}


CypherParser::KU_MinValueContext* CypherParser::kU_MinValue() {
  KU_MinValueContext *_localctx = _tracker.createInstance<KU_MinValueContext>(_ctx, getState());
  enterRule(_localctx, 58, CypherParser::RuleKU_MinValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(870);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(861);
        match(CypherParser::NO);
        setState(862);
        match(CypherParser::SP);
        setState(863);
        match(CypherParser::MINVALUE);
        break;
      }

      case CypherParser::MINVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(864);
        match(CypherParser::MINVALUE);
        setState(865);
        match(CypherParser::SP);
        setState(867);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(866);
          match(CypherParser::MINUS);
        }
        setState(869);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MaxValueContext ------------------------------------------------------------------

CypherParser::KU_MaxValueContext::KU_MaxValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MaxValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MaxValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MaxValue;
}


CypherParser::KU_MaxValueContext* CypherParser::kU_MaxValue() {
  KU_MaxValueContext *_localctx = _tracker.createInstance<KU_MaxValueContext>(_ctx, getState());
  enterRule(_localctx, 60, CypherParser::RuleKU_MaxValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(881);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(872);
        match(CypherParser::NO);
        setState(873);
        match(CypherParser::SP);
        setState(874);
        match(CypherParser::MAXVALUE);
        break;
      }

      case CypherParser::MAXVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(875);
        match(CypherParser::MAXVALUE);
        setState(876);
        match(CypherParser::SP);
        setState(878);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(877);
          match(CypherParser::MINUS);
        }
        setState(880);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StartWithContext ------------------------------------------------------------------

CypherParser::KU_StartWithContext::KU_StartWithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StartWithContext::START() {
  return getToken(CypherParser::START, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StartWithContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_StartWithContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_StartWithContext::getRuleIndex() const {
  return CypherParser::RuleKU_StartWith;
}


CypherParser::KU_StartWithContext* CypherParser::kU_StartWith() {
  KU_StartWithContext *_localctx = _tracker.createInstance<KU_StartWithContext>(_ctx, getState());
  enterRule(_localctx, 62, CypherParser::RuleKU_StartWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(883);
    match(CypherParser::START);
    setState(884);
    match(CypherParser::SP);
    setState(887);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::WITH) {
      setState(885);
      match(CypherParser::WITH);
      setState(886);
      match(CypherParser::SP);
    }
    setState(890);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(889);
      match(CypherParser::MINUS);
    }
    setState(892);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CycleContext ------------------------------------------------------------------

CypherParser::KU_CycleContext::KU_CycleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CycleContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::KU_CycleContext::getRuleIndex() const {
  return CypherParser::RuleKU_Cycle;
}


CypherParser::KU_CycleContext* CypherParser::kU_Cycle() {
  KU_CycleContext *_localctx = _tracker.createInstance<KU_CycleContext>(_ctx, getState());
  enterRule(_localctx, 64, CypherParser::RuleKU_Cycle);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(896);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::NO) {
      setState(894);
      match(CypherParser::NO);
      setState(895);
      match(CypherParser::SP);
    }
    setState(898);
    match(CypherParser::CYCLE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropContext ------------------------------------------------------------------

CypherParser::KU_DropContext::KU_DropContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DropContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DropContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DropContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DropContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_DropContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}

tree::TerminalNode* CypherParser::KU_DropContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}


<<<<<<< HEAD
CypherParser::KU_DropTableContext* CypherParser::kU_DropTable() {
  KU_DropTableContext *_localctx = _tracker.createInstance<KU_DropTableContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 54, CypherParser::RuleKU_DropTable);
=======
  enterRule(_localctx, 64, CypherParser::RuleKU_DropTable);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 66, CypherParser::RuleKU_DropTable);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
size_t CypherParser::KU_DropContext::getRuleIndex() const {
  return CypherParser::RuleKU_Drop;
}


CypherParser::KU_DropContext* CypherParser::kU_Drop() {
  KU_DropContext *_localctx = _tracker.createInstance<KU_DropContext>(_ctx, getState());
  enterRule(_localctx, 66, CypherParser::RuleKU_Drop);
>>>>>>> 26305974a (finish drop sequence)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(824);
    match(CypherParser::DROP);
    setState(825);
    match(CypherParser::SP);
    setState(826);
=======
    setState(872);
=======
    setState(887);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::DROP);
    setState(888);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(874);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(889);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(888);
=======
    setState(900);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::DROP);
    setState(901);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(890);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(902);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -3458764513820540928) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(827);
    match(CypherParser::SP);
    setState(828);
=======
    setState(875);
    match(CypherParser::SP);
    setState(876);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(890);
    match(CypherParser::SP);
    setState(891);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(891);
    match(CypherParser::SP);
    setState(892);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(903);
    match(CypherParser::SP);
    setState(904);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterTableContext ------------------------------------------------------------------

CypherParser::KU_AlterTableContext::KU_AlterTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AlterTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AlterTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_AlterOptionsContext* CypherParser::KU_AlterTableContext::kU_AlterOptions() {
  return getRuleContext<CypherParser::KU_AlterOptionsContext>(0);
}


size_t CypherParser::KU_AlterTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterTable;
}


CypherParser::KU_AlterTableContext* CypherParser::kU_AlterTable() {
  KU_AlterTableContext *_localctx = _tracker.createInstance<KU_AlterTableContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 56, CypherParser::RuleKU_AlterTable);
=======
  enterRule(_localctx, 66, CypherParser::RuleKU_AlterTable);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 68, CypherParser::RuleKU_AlterTable);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(830);
    match(CypherParser::ALTER);
    setState(831);
    match(CypherParser::SP);
    setState(832);
    match(CypherParser::TABLE);
    setState(833);
    match(CypherParser::SP);
    setState(834);
    oC_SchemaName();
    setState(835);
    match(CypherParser::SP);
    setState(836);
=======
    setState(878);
=======
    setState(893);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::ALTER);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    setState(894);
=======
    setState(906);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::ALTER);
    setState(907);
    match(CypherParser::SP);
    setState(908);
    match(CypherParser::TABLE);
    setState(909);
    match(CypherParser::SP);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(884);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(899);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(898);
=======
    setState(910);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_SchemaName();
    setState(911);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(900);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(912);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    kU_AlterOptions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterOptionsContext ------------------------------------------------------------------

CypherParser::KU_AlterOptionsContext::KU_AlterOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_AddPropertyContext* CypherParser::KU_AlterOptionsContext::kU_AddProperty() {
  return getRuleContext<CypherParser::KU_AddPropertyContext>(0);
}

CypherParser::KU_DropPropertyContext* CypherParser::KU_AlterOptionsContext::kU_DropProperty() {
  return getRuleContext<CypherParser::KU_DropPropertyContext>(0);
}

CypherParser::KU_RenameTableContext* CypherParser::KU_AlterOptionsContext::kU_RenameTable() {
  return getRuleContext<CypherParser::KU_RenameTableContext>(0);
}

CypherParser::KU_RenamePropertyContext* CypherParser::KU_AlterOptionsContext::kU_RenameProperty() {
  return getRuleContext<CypherParser::KU_RenamePropertyContext>(0);
}


size_t CypherParser::KU_AlterOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterOptions;
}


CypherParser::KU_AlterOptionsContext* CypherParser::kU_AlterOptions() {
  KU_AlterOptionsContext *_localctx = _tracker.createInstance<KU_AlterOptionsContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 58, CypherParser::RuleKU_AlterOptions);
=======
  enterRule(_localctx, 68, CypherParser::RuleKU_AlterOptions);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 70, CypherParser::RuleKU_AlterOptions);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(842);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(838);
=======
    setState(890);
=======
    setState(905);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(906);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(918);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(886);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(901);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(902);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(914);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      kU_AddProperty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(839);
=======
      setState(887);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(902);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(903);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(915);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      kU_DropProperty();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(840);
=======
      setState(888);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(903);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(904);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(916);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      kU_RenameTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(841);
=======
      setState(889);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(904);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(905);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(917);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      kU_RenameProperty();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddPropertyContext ------------------------------------------------------------------

CypherParser::KU_AddPropertyContext::KU_AddPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AddPropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_AddPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_AddPropertyContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::DEFAULT() {
  return getToken(CypherParser::DEFAULT, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_AddPropertyContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_AddPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddProperty;
}


CypherParser::KU_AddPropertyContext* CypherParser::kU_AddProperty() {
  KU_AddPropertyContext *_localctx = _tracker.createInstance<KU_AddPropertyContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 60, CypherParser::RuleKU_AddProperty);
=======
  enterRule(_localctx, 70, CypherParser::RuleKU_AddProperty);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 72, CypherParser::RuleKU_AddProperty);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(844);
    match(CypherParser::ADD);
    setState(845);
    match(CypherParser::SP);
    setState(846);
    oC_PropertyKeyName();
    setState(847);
    match(CypherParser::SP);
    setState(848);
    kU_DataType(0);
    setState(853);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
    case 1: {
      setState(849);
      match(CypherParser::SP);
      setState(850);
      match(CypherParser::DEFAULT);
      setState(851);
      match(CypherParser::SP);
      setState(852);
=======
    setState(892);
=======
    setState(907);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::ADD);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    setState(908);
=======
    setState(920);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::ADD);
    setState(921);
    match(CypherParser::SP);
    setState(922);
    oC_PropertyKeyName();
    setState(923);
    match(CypherParser::SP);
    setState(924);
    kU_DataType(0);
    setState(929);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      setState(925);
      match(CypherParser::SP);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(900);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(915);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(914);
=======
      setState(926);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::DEFAULT);
      setState(927);
      match(CypherParser::SP);
<<<<<<< HEAD
      setState(916);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(928);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropPropertyContext ------------------------------------------------------------------

CypherParser::KU_DropPropertyContext::KU_DropPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_DropPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_DropPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropProperty;
}


CypherParser::KU_DropPropertyContext* CypherParser::kU_DropProperty() {
  KU_DropPropertyContext *_localctx = _tracker.createInstance<KU_DropPropertyContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 62, CypherParser::RuleKU_DropProperty);
=======
  enterRule(_localctx, 72, CypherParser::RuleKU_DropProperty);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 74, CypherParser::RuleKU_DropProperty);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(855);
    match(CypherParser::DROP);
    setState(856);
    match(CypherParser::SP);
    setState(857);
=======
    setState(903);
=======
    setState(918);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::DROP);
    setState(919);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(905);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(920);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(919);
=======
    setState(931);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::DROP);
    setState(932);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(921);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(933);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenameTableContext ------------------------------------------------------------------

CypherParser::KU_RenameTableContext::KU_RenameTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenameTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::TO() {
  return getToken(CypherParser::TO, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RenameTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_RenameTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameTable;
}


CypherParser::KU_RenameTableContext* CypherParser::kU_RenameTable() {
  KU_RenameTableContext *_localctx = _tracker.createInstance<KU_RenameTableContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 64, CypherParser::RuleKU_RenameTable);
=======
  enterRule(_localctx, 74, CypherParser::RuleKU_RenameTable);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 76, CypherParser::RuleKU_RenameTable);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(859);
    match(CypherParser::RENAME);
    setState(860);
    match(CypherParser::SP);
    setState(861);
    match(CypherParser::TO);
    setState(862);
    match(CypherParser::SP);
    setState(863);
=======
    setState(907);
=======
    setState(922);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::RENAME);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    setState(923);
=======
    setState(935);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::RENAME);
    setState(936);
    match(CypherParser::SP);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(911);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(926);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(925);
=======
    setState(937);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::TO);
    setState(938);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(927);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(939);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenamePropertyContext ------------------------------------------------------------------

CypherParser::KU_RenamePropertyContext::KU_RenamePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenamePropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RenamePropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameProperty;
}


CypherParser::KU_RenamePropertyContext* CypherParser::kU_RenameProperty() {
  KU_RenamePropertyContext *_localctx = _tracker.createInstance<KU_RenamePropertyContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 66, CypherParser::RuleKU_RenameProperty);
=======
  enterRule(_localctx, 76, CypherParser::RuleKU_RenameProperty);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 78, CypherParser::RuleKU_RenameProperty);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(865);
    match(CypherParser::RENAME);
    setState(866);
    match(CypherParser::SP);
    setState(867);
    oC_PropertyKeyName();
    setState(868);
    match(CypherParser::SP);
    setState(869);
    match(CypherParser::TO);
    setState(870);
    match(CypherParser::SP);
    setState(871);
=======
    setState(913);
=======
    setState(928);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::RENAME);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    setState(929);
=======
    setState(941);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::RENAME);
    setState(942);
    match(CypherParser::SP);
    setState(943);
    oC_PropertyKeyName();
    setState(944);
    match(CypherParser::SP);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(919);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(934);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(933);
=======
    setState(945);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::TO);
    setState(946);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(935);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(947);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsContext::KU_PropertyDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionContext *> CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionContext>();
}

CypherParser::KU_PropertyDefinitionContext* CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitions;
}


CypherParser::KU_PropertyDefinitionsContext* CypherParser::kU_PropertyDefinitions() {
  KU_PropertyDefinitionsContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 68, CypherParser::RuleKU_PropertyDefinitions);
=======
  enterRule(_localctx, 78, CypherParser::RuleKU_PropertyDefinitions);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 80, CypherParser::RuleKU_PropertyDefinitions);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(873);
    kU_PropertyDefinition();
    setState(884);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(875);
=======
    setState(921);
=======
    setState(936);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(937);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(949);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    kU_PropertyDefinition();
    setState(960);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(923);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(938);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(939);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(951);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(874);
          match(CypherParser::SP);
        }
        setState(877);
        match(CypherParser::T__2);
        setState(879);
=======
          setState(922);
=======
          setState(937);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(938);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(950);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(953);
        match(CypherParser::T__2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(927);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(942);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(943);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(955);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(878);
          match(CypherParser::SP);
        }
        setState(881);
        kU_PropertyDefinition(); 
      }
      setState(886);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
=======
          setState(926);
=======
          setState(941);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(942);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(954);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(957);
        kU_PropertyDefinition(); 
      }
      setState(962);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionContext::KU_PropertyDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertyDefinitionContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_PropertyDefinitionContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinition;
}


CypherParser::KU_PropertyDefinitionContext* CypherParser::kU_PropertyDefinition() {
  KU_PropertyDefinitionContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 70, CypherParser::RuleKU_PropertyDefinition);
=======
  enterRule(_localctx, 80, CypherParser::RuleKU_PropertyDefinition);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 82, CypherParser::RuleKU_PropertyDefinition);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(887);
    oC_PropertyKeyName();
    setState(888);
    match(CypherParser::SP);
    setState(889);
=======
    setState(935);
=======
    setState(950);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    oC_PropertyKeyName();
    setState(951);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(937);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(952);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(951);
=======
    setState(963);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_PropertyKeyName();
    setState(964);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(953);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(965);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    kU_DataType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeConstraintContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeConstraintContext::KU_CreateNodeConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::PRIMARY() {
  return getToken(CypherParser::PRIMARY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeConstraintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_CreateNodeConstraintContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_CreateNodeConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeConstraint;
}


CypherParser::KU_CreateNodeConstraintContext* CypherParser::kU_CreateNodeConstraint() {
  KU_CreateNodeConstraintContext *_localctx = _tracker.createInstance<KU_CreateNodeConstraintContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 72, CypherParser::RuleKU_CreateNodeConstraint);
=======
  enterRule(_localctx, 82, CypherParser::RuleKU_CreateNodeConstraint);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 84, CypherParser::RuleKU_CreateNodeConstraint);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(891);
    match(CypherParser::PRIMARY);
    setState(892);
    match(CypherParser::SP);
    setState(893);
    match(CypherParser::KEY);
    setState(895);
=======
    setState(939);
=======
    setState(954);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::PRIMARY);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    setState(955);
    match(CypherParser::PRIMARY);
    setState(956);
    match(CypherParser::SP);
    setState(957);
    match(CypherParser::KEY);
    setState(959);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(958);
      match(CypherParser::SP);
    }
    setState(961);
    match(CypherParser::T__1);
    setState(963);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(962);
      match(CypherParser::SP);
    }
    setState(965);
    oC_PropertyKeyName();
<<<<<<< HEAD
<<<<<<< HEAD
    setState(951);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(966);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(967);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(967);
    match(CypherParser::PRIMARY);
    setState(968);
    match(CypherParser::SP);
    setState(969);
    match(CypherParser::KEY);
    setState(971);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(970);
      match(CypherParser::SP);
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(897);
    match(CypherParser::T__1);
    setState(899);
=======
    setState(973);
    match(CypherParser::T__1);
    setState(975);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(898);
      match(CypherParser::SP);
    }
    setState(901);
    oC_PropertyKeyName();
    setState(903);
=======
      setState(974);
      match(CypherParser::SP);
    }
    setState(977);
    oC_PropertyKeyName();
    setState(979);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
      setState(902);
      match(CypherParser::SP);
    }
    setState(905);
=======
    setState(953);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(968);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(969);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(978);
      match(CypherParser::SP);
    }
    setState(981);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DataTypeContext ------------------------------------------------------------------

CypherParser::KU_DataTypeContext::KU_DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DataTypeContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_DataTypeContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DataTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::KU_DataTypeContext *> CypherParser::KU_DataTypeContext::kU_DataType() {
  return getRuleContexts<CypherParser::KU_DataTypeContext>();
}

CypherParser::KU_DataTypeContext* CypherParser::KU_DataTypeContext::kU_DataType(size_t i) {
  return getRuleContext<CypherParser::KU_DataTypeContext>(i);
}

CypherParser::KU_ListIdentifiersContext* CypherParser::KU_DataTypeContext::kU_ListIdentifiers() {
  return getRuleContext<CypherParser::KU_ListIdentifiersContext>(0);
}


size_t CypherParser::KU_DataTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_DataType;
}



CypherParser::KU_DataTypeContext* CypherParser::kU_DataType() {
   return kU_DataType(0);
}

CypherParser::KU_DataTypeContext* CypherParser::kU_DataType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_DataTypeContext *_localctx = _tracker.createInstance<KU_DataTypeContext>(_ctx, parentState);
  CypherParser::KU_DataTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
<<<<<<< HEAD
<<<<<<< HEAD
  size_t startState = 74;
  enterRecursionRule(_localctx, 74, CypherParser::RuleKU_DataType, precedence);
=======
  size_t startState = 84;
  enterRecursionRule(_localctx, 84, CypherParser::RuleKU_DataType, precedence);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  size_t startState = 86;
  enterRecursionRule(_localctx, 86, CypherParser::RuleKU_DataType, precedence);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(959);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
    case 1: {
      setState(908);
=======
    setState(1007);
=======
    setState(1022);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
<<<<<<< HEAD
      setState(956);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(971);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1023);
=======
    setState(1035);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
    case 1: {
<<<<<<< HEAD
      setState(972);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(984);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_SymbolicName();
      break;
    }

    case 2: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(909);
      match(CypherParser::UNION);
      setState(911);
=======
      setState(957);
=======
      setState(972);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(973);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      match(CypherParser::UNION);
      setState(975);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(974);
        match(CypherParser::SP);
      }
      setState(977);
      match(CypherParser::T__1);
      setState(979);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(978);
        match(CypherParser::SP);
      }
      setState(981);
      kU_PropertyDefinitions();
<<<<<<< HEAD
<<<<<<< HEAD
      setState(967);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(982);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(983);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(982);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(913);
      match(CypherParser::T__1);
      setState(915);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(914);
        match(CypherParser::SP);
      }
      setState(917);
      kU_PropertyDefinitions();
      setState(919);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(918);
        match(CypherParser::SP);
      }
      setState(921);
=======
      setState(969);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(984);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(985);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(985);
      match(CypherParser::UNION);
      setState(987);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(986);
        match(CypherParser::SP);
      }
      setState(989);
      match(CypherParser::T__1);
      setState(991);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(990);
        match(CypherParser::SP);
      }
      setState(993);
      kU_PropertyDefinitions();
      setState(995);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(994);
        match(CypherParser::SP);
      }
      setState(997);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::T__3);
      break;
    }

    case 3: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(923);
      oC_SymbolicName();
      setState(925);
=======
      setState(971);
=======
      setState(986);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(987);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      oC_SymbolicName();
      setState(989);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(988);
        match(CypherParser::SP);
      }
      setState(991);
      match(CypherParser::T__1);
      setState(993);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(992);
        match(CypherParser::SP);
      }
      setState(995);
      kU_PropertyDefinitions();
<<<<<<< HEAD
<<<<<<< HEAD
      setState(981);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(996);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(997);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(996);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(927);
      match(CypherParser::T__1);
      setState(929);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(928);
        match(CypherParser::SP);
      }
      setState(931);
      kU_PropertyDefinitions();
      setState(933);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(932);
        match(CypherParser::SP);
      }
      setState(935);
=======
      setState(983);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(998);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(999);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(999);
      oC_SymbolicName();
      setState(1001);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1000);
        match(CypherParser::SP);
      }
      setState(1003);
      match(CypherParser::T__1);
      setState(1005);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1004);
        match(CypherParser::SP);
      }
      setState(1007);
      kU_PropertyDefinitions();
      setState(1009);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1008);
        match(CypherParser::SP);
      }
      setState(1011);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::T__3);
      break;
    }

    case 4: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(937);
      oC_SymbolicName();
      setState(939);
=======
      setState(985);
=======
      setState(1000);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1001);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      oC_SymbolicName();
      setState(1003);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1002);
        match(CypherParser::SP);
      }
      setState(1005);
      match(CypherParser::T__1);
      setState(1007);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1006);
        match(CypherParser::SP);
      }
      setState(1009);
      kU_DataType(0);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(995);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1010);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1011);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1010);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(941);
      match(CypherParser::T__1);
      setState(943);
=======
      setState(997);
      match(CypherParser::T__2);
      setState(999);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1012);
      match(CypherParser::T__2);
      setState(1014);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
=======
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      setState(1013);
      oC_SymbolicName();
      setState(1015);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1014);
        match(CypherParser::SP);
      }
      setState(1017);
      match(CypherParser::T__1);
      setState(1019);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1018);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(949);
      match(CypherParser::T__2);
      setState(951);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(950);
        match(CypherParser::SP);
      }
      setState(953);
      kU_DataType(0);
      setState(955);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(954);
        match(CypherParser::SP);
      }
      setState(957);
=======
      setState(1005);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1020);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1021);
<<<<<<< HEAD
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      kU_DataType(0);
      setState(1023);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1022);
        match(CypherParser::SP);
      }
      setState(1025);
      match(CypherParser::T__2);
      setState(1027);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1026);
        match(CypherParser::SP);
      }
      setState(1029);
      kU_DataType(0);
      setState(1031);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1030);
        match(CypherParser::SP);
      }
      setState(1033);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(965);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx);
=======
    setState(1013);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1028);
=======
    setState(1029);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1041);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<KU_DataTypeContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleKU_DataType);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(961);

        if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
        setState(962);
        kU_ListIdentifiers(); 
      }
      setState(967);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx);
=======
        setState(1009);
=======
        setState(1024);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1025);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1037);
>>>>>>> 6a075a2f7 (add basic tests for sequence)

        if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
        setState(1038);
        kU_ListIdentifiers(); 
      }
      setState(1043);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- KU_ListIdentifiersContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifiersContext::KU_ListIdentifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ListIdentifierContext *> CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier() {
  return getRuleContexts<CypherParser::KU_ListIdentifierContext>();
}

CypherParser::KU_ListIdentifierContext* CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier(size_t i) {
  return getRuleContext<CypherParser::KU_ListIdentifierContext>(i);
}


size_t CypherParser::KU_ListIdentifiersContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifiers;
}


CypherParser::KU_ListIdentifiersContext* CypherParser::kU_ListIdentifiers() {
  KU_ListIdentifiersContext *_localctx = _tracker.createInstance<KU_ListIdentifiersContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 76, CypherParser::RuleKU_ListIdentifiers);
=======
  enterRule(_localctx, 86, CypherParser::RuleKU_ListIdentifiers);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 88, CypherParser::RuleKU_ListIdentifiers);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(968);
    kU_ListIdentifier();
    setState(972);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(969);
        kU_ListIdentifier(); 
      }
      setState(974);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
=======
    setState(1016);
=======
    setState(1031);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1032);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1044);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    kU_ListIdentifier();
    setState(1048);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1045);
        kU_ListIdentifier(); 
      }
      setState(1050);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListIdentifierContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifierContext::KU_ListIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_ListIdentifierContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::KU_ListIdentifierContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifier;
}


CypherParser::KU_ListIdentifierContext* CypherParser::kU_ListIdentifier() {
  KU_ListIdentifierContext *_localctx = _tracker.createInstance<KU_ListIdentifierContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 78, CypherParser::RuleKU_ListIdentifier);
=======
  enterRule(_localctx, 88, CypherParser::RuleKU_ListIdentifier);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 90, CypherParser::RuleKU_ListIdentifier);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(975);
    match(CypherParser::T__6);
    setState(977);
=======
    setState(1023);
    match(CypherParser::T__6);
    setState(1025);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1038);
    match(CypherParser::T__6);
    setState(1040);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1039);
    match(CypherParser::T__6);
    setState(1041);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1051);
    match(CypherParser::T__6);
    setState(1053);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DecimalInteger) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(976);
      oC_IntegerLiteral();
    }
    setState(979);
=======
      setState(1024);
      oC_IntegerLiteral();
    }
    setState(1027);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1039);
      oC_IntegerLiteral();
    }
    setState(1042);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1040);
      oC_IntegerLiteral();
    }
    setState(1043);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1052);
      oC_IntegerLiteral();
    }
    setState(1055);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnyCypherOptionContext ------------------------------------------------------------------

CypherParser::OC_AnyCypherOptionContext::OC_AnyCypherOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExplainContext* CypherParser::OC_AnyCypherOptionContext::oC_Explain() {
  return getRuleContext<CypherParser::OC_ExplainContext>(0);
}

CypherParser::OC_ProfileContext* CypherParser::OC_AnyCypherOptionContext::oC_Profile() {
  return getRuleContext<CypherParser::OC_ProfileContext>(0);
}


size_t CypherParser::OC_AnyCypherOptionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnyCypherOption;
}


CypherParser::OC_AnyCypherOptionContext* CypherParser::oC_AnyCypherOption() {
  OC_AnyCypherOptionContext *_localctx = _tracker.createInstance<OC_AnyCypherOptionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 80, CypherParser::RuleOC_AnyCypherOption);
=======
  enterRule(_localctx, 90, CypherParser::RuleOC_AnyCypherOption);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 92, CypherParser::RuleOC_AnyCypherOption);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(983);
=======
    setState(1031);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1046);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1047);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1059);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::EXPLAIN: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(981);
=======
        setState(1029);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1044);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1045);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1057);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_Explain();
        break;
      }

      case CypherParser::PROFILE: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(982);
=======
        setState(1030);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1045);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1046);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1058);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_Profile();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplainContext ------------------------------------------------------------------

CypherParser::OC_ExplainContext::OC_ExplainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExplainContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}


size_t CypherParser::OC_ExplainContext::getRuleIndex() const {
  return CypherParser::RuleOC_Explain;
}


CypherParser::OC_ExplainContext* CypherParser::oC_Explain() {
  OC_ExplainContext *_localctx = _tracker.createInstance<OC_ExplainContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 82, CypherParser::RuleOC_Explain);
=======
  enterRule(_localctx, 92, CypherParser::RuleOC_Explain);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 94, CypherParser::RuleOC_Explain);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(985);
=======
    setState(1033);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1048);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1049);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1061);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::EXPLAIN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProfileContext ------------------------------------------------------------------

CypherParser::OC_ProfileContext::OC_ProfileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProfileContext::PROFILE() {
  return getToken(CypherParser::PROFILE, 0);
}


size_t CypherParser::OC_ProfileContext::getRuleIndex() const {
  return CypherParser::RuleOC_Profile;
}


CypherParser::OC_ProfileContext* CypherParser::oC_Profile() {
  OC_ProfileContext *_localctx = _tracker.createInstance<OC_ProfileContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 84, CypherParser::RuleOC_Profile);
=======
  enterRule(_localctx, 94, CypherParser::RuleOC_Profile);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 96, CypherParser::RuleOC_Profile);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(987);
=======
    setState(1035);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1050);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1051);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1063);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::PROFILE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_TransactionContext ------------------------------------------------------------------

CypherParser::KU_TransactionContext::KU_TransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_TransactionContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_TransactionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ONLY() {
  return getToken(CypherParser::ONLY, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT_SKIP_CHECKPOINT() {
  return getToken(CypherParser::COMMIT_SKIP_CHECKPOINT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK_SKIP_CHECKPOINT() {
  return getToken(CypherParser::ROLLBACK_SKIP_CHECKPOINT, 0);
}


size_t CypherParser::KU_TransactionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Transaction;
}


CypherParser::KU_TransactionContext* CypherParser::kU_Transaction() {
  KU_TransactionContext *_localctx = _tracker.createInstance<KU_TransactionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 86, CypherParser::RuleKU_Transaction);
=======
  enterRule(_localctx, 96, CypherParser::RuleKU_Transaction);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 98, CypherParser::RuleKU_Transaction);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1003);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(989);
      match(CypherParser::BEGIN);
      setState(990);
      match(CypherParser::SP);
      setState(991);
=======
    setState(1051);
=======
    setState(1066);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1067);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1079);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
      setState(1053);
<<<<<<< HEAD
      match(CypherParser::SP);
<<<<<<< HEAD
      setState(1039);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1054);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
=======
      setState(1065);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::BEGIN);
      setState(1066);
      match(CypherParser::SP);
<<<<<<< HEAD
      setState(1055);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1067);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::TRANSACTION);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(992);
      match(CypherParser::BEGIN);
      setState(993);
      match(CypherParser::SP);
      setState(994);
      match(CypherParser::TRANSACTION);
      setState(995);
      match(CypherParser::SP);
      setState(996);
      match(CypherParser::READ);
      setState(997);
      match(CypherParser::SP);
      setState(998);
=======
      setState(1040);
=======
      setState(1055);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::BEGIN);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      setState(1056);
=======
      setState(1068);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::BEGIN);
      setState(1069);
      match(CypherParser::SP);
      setState(1070);
      match(CypherParser::TRANSACTION);
      setState(1071);
      match(CypherParser::SP);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1046);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1061);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1060);
=======
      setState(1072);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::READ);
      setState(1073);
      match(CypherParser::SP);
<<<<<<< HEAD
      setState(1062);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1074);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::ONLY);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(999);
=======
      setState(1047);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1062);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1063);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1075);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::COMMIT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1000);
=======
      setState(1048);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1063);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1064);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1076);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::COMMIT_SKIP_CHECKPOINT);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1001);
=======
      setState(1049);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1064);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1065);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1077);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::ROLLBACK);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1002);
=======
      setState(1050);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1065);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1066);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1078);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::ROLLBACK_SKIP_CHECKPOINT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExtensionContext ------------------------------------------------------------------

CypherParser::KU_ExtensionContext::KU_ExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LoadExtensionContext* CypherParser::KU_ExtensionContext::kU_LoadExtension() {
  return getRuleContext<CypherParser::KU_LoadExtensionContext>(0);
}

CypherParser::KU_InstallExtensionContext* CypherParser::KU_ExtensionContext::kU_InstallExtension() {
  return getRuleContext<CypherParser::KU_InstallExtensionContext>(0);
}


size_t CypherParser::KU_ExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Extension;
}


CypherParser::KU_ExtensionContext* CypherParser::kU_Extension() {
  KU_ExtensionContext *_localctx = _tracker.createInstance<KU_ExtensionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 88, CypherParser::RuleKU_Extension);
=======
  enterRule(_localctx, 98, CypherParser::RuleKU_Extension);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 100, CypherParser::RuleKU_Extension);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1007);
=======
    setState(1055);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1070);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1071);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1083);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1005);
=======
        setState(1053);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1068);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1069);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1081);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        kU_LoadExtension();
        break;
      }

      case CypherParser::INSTALL: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1006);
=======
        setState(1054);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1069);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1070);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1082);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        kU_InstallExtension();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadExtensionContext ------------------------------------------------------------------

CypherParser::KU_LoadExtensionContext::KU_LoadExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadExtensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_LoadExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_LoadExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadExtension;
}


CypherParser::KU_LoadExtensionContext* CypherParser::kU_LoadExtension() {
  KU_LoadExtensionContext *_localctx = _tracker.createInstance<KU_LoadExtensionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 90, CypherParser::RuleKU_LoadExtension);
=======
  enterRule(_localctx, 100, CypherParser::RuleKU_LoadExtension);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 102, CypherParser::RuleKU_LoadExtension);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1009);
    match(CypherParser::LOAD);
    setState(1010);
    match(CypherParser::SP);
    setState(1011);
    match(CypherParser::EXTENSION);
    setState(1012);
    match(CypherParser::SP);
    setState(1015);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::StringLiteral: {
        setState(1013);
=======
    setState(1057);
=======
    setState(1072);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::LOAD);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    setState(1073);
=======
    setState(1085);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::LOAD);
    setState(1086);
    match(CypherParser::SP);
    setState(1087);
    match(CypherParser::EXTENSION);
    setState(1088);
    match(CypherParser::SP);
    setState(1091);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::StringLiteral: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1061);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1076);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1077);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1089);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::START:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1014);
=======
        setState(1062);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1077);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1078);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1090);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_Variable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InstallExtensionContext ------------------------------------------------------------------

CypherParser::KU_InstallExtensionContext::KU_InstallExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::INSTALL() {
  return getToken(CypherParser::INSTALL, 0);
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_InstallExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_InstallExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_InstallExtension;
}


CypherParser::KU_InstallExtensionContext* CypherParser::kU_InstallExtension() {
  KU_InstallExtensionContext *_localctx = _tracker.createInstance<KU_InstallExtensionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 92, CypherParser::RuleKU_InstallExtension);
=======
  enterRule(_localctx, 102, CypherParser::RuleKU_InstallExtension);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 104, CypherParser::RuleKU_InstallExtension);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1017);
    match(CypherParser::INSTALL);
    setState(1018);
    match(CypherParser::SP);
    setState(1019);
=======
    setState(1065);
=======
    setState(1080);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::INSTALL);
    setState(1081);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(1067);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1082);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1081);
=======
    setState(1093);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::INSTALL);
    setState(1094);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(1083);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1095);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

CypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RegularQueryContext* CypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<CypherParser::OC_RegularQueryContext>(0);
}


size_t CypherParser::OC_QueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_Query;
}


CypherParser::OC_QueryContext* CypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 94, CypherParser::RuleOC_Query);
=======
  enterRule(_localctx, 104, CypherParser::RuleOC_Query);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 106, CypherParser::RuleOC_Query);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1021);
=======
    setState(1069);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1084);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1085);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1097);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_RegularQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

CypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}

std::vector<CypherParser::OC_UnionContext *> CypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<CypherParser::OC_UnionContext>();
}

CypherParser::OC_UnionContext* CypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<CypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RegularQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_ReturnContext *> CypherParser::OC_RegularQueryContext::oC_Return() {
  return getRuleContexts<CypherParser::OC_ReturnContext>();
}

CypherParser::OC_ReturnContext* CypherParser::OC_RegularQueryContext::oC_Return(size_t i) {
  return getRuleContext<CypherParser::OC_ReturnContext>(i);
}


size_t CypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularQuery;
}


CypherParser::OC_RegularQueryContext* CypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 96, CypherParser::RuleOC_RegularQuery);
=======
  enterRule(_localctx, 106, CypherParser::RuleOC_RegularQuery);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 108, CypherParser::RuleOC_RegularQuery);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1044);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1023);
      oC_SingleQuery();
      setState(1030);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1025);
=======
    setState(1092);
=======
    setState(1107);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1108);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1120);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1099);
      oC_SingleQuery();
      setState(1106);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1073);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
          setState(1088);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1089);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1101);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            setState(1024);
            match(CypherParser::SP);
          }
          setState(1027);
          oC_Union(); 
        }
        setState(1032);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx);
=======
            setState(1072);
=======
            setState(1087);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
            setState(1088);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
            setState(1100);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
            match(CypherParser::SP);
          }
          setState(1103);
          oC_Union(); 
        }
        setState(1108);
        _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1037); 
=======
      setState(1085); 
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1100); 
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1101); 
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1113); 
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                setState(1033);
                oC_Return();
                setState(1035);
=======
                setState(1081);
                oC_Return();
                setState(1083);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
                setState(1096);
                oC_Return();
                setState(1098);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
                setState(1097);
                oC_Return();
                setState(1099);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
                setState(1109);
                oC_Return();
                setState(1111);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                  setState(1034);
=======
                  setState(1082);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
                  setState(1097);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
                  setState(1098);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
                  setState(1110);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
                  match(CypherParser::SP);
                }
                break;
              }

        default:
          throw NoViableAltException(this);
        }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1039); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1041);
=======
        setState(1087); 
=======
        setState(1102); 
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
<<<<<<< HEAD
      setState(1089);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1104);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1103); 
=======
        setState(1115); 
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
<<<<<<< HEAD
      setState(1105);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1117);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_SingleQuery();
       notifyReturnNotAtEnd(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

CypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnionContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnionContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}


size_t CypherParser::OC_UnionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Union;
}


CypherParser::OC_UnionContext* CypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 98, CypherParser::RuleOC_Union);
=======
  enterRule(_localctx, 108, CypherParser::RuleOC_Union);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 110, CypherParser::RuleOC_Union);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1058);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1046);
      match(CypherParser::UNION);
      setState(1047);
      match(CypherParser::SP);
      setState(1048);
      match(CypherParser::ALL);
      setState(1050);
=======
    setState(1106);
=======
    setState(1121);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1122);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1134);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1122);
      match(CypherParser::UNION);
      setState(1123);
      match(CypherParser::SP);
      setState(1124);
      match(CypherParser::ALL);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1098);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1113);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1114);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1126);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1049);
        match(CypherParser::SP);
      }
      setState(1052);
=======
        setState(1097);
        match(CypherParser::SP);
      }
      setState(1100);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1112);
        match(CypherParser::SP);
      }
      setState(1115);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1113);
        match(CypherParser::SP);
      }
      setState(1116);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1125);
        match(CypherParser::SP);
      }
      setState(1128);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1053);
      match(CypherParser::UNION);
      setState(1055);
=======
      setState(1101);
      match(CypherParser::UNION);
      setState(1103);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1116);
      match(CypherParser::UNION);
      setState(1118);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1117);
      match(CypherParser::UNION);
      setState(1119);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1129);
      match(CypherParser::UNION);
      setState(1131);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1054);
        match(CypherParser::SP);
      }
      setState(1057);
=======
        setState(1102);
        match(CypherParser::SP);
      }
      setState(1105);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1117);
        match(CypherParser::SP);
      }
      setState(1120);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1118);
        match(CypherParser::SP);
      }
      setState(1121);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1130);
        match(CypherParser::SP);
      }
      setState(1133);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

CypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

CypherParser::OC_MultiPartQueryContext* CypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<CypherParser::OC_MultiPartQueryContext>(0);
}


size_t CypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SingleQuery;
}


CypherParser::OC_SingleQueryContext* CypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 100, CypherParser::RuleOC_SingleQuery);
=======
  enterRule(_localctx, 110, CypherParser::RuleOC_SingleQuery);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 112, CypherParser::RuleOC_SingleQuery);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1062);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1060);
=======
    setState(1110);
=======
    setState(1125);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1126);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1138);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1108);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1123);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1124);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1136);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1061);
=======
      setState(1109);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1124);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1125);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1137);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

CypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ReturnContext* CypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<CypherParser::OC_ReturnContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}


size_t CypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SinglePartQuery;
}


CypherParser::OC_SinglePartQueryContext* CypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 102, CypherParser::RuleOC_SinglePartQuery);
=======
  enterRule(_localctx, 112, CypherParser::RuleOC_SinglePartQuery);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 114, CypherParser::RuleOC_SinglePartQuery);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1109);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1070);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 49) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 49)) & 7971459301377) != 0)) {
        setState(1064);
        oC_ReadingClause();
        setState(1066);
=======
    setState(1157);
=======
    setState(1172);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1173);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1185);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1146);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 49) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 49)) & 1020346790576129) != 0)) {
        setState(1140);
        oC_ReadingClause();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1114);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1129);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1130);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1142);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1065);
          match(CypherParser::SP);
        }
        setState(1072);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1073);
=======
          setState(1113);
=======
          setState(1128);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1129);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1141);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1148);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1121);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1136);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1137);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1149);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1080);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 49) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 49)) & 7971459301377) != 0)) {
        setState(1074);
        oC_ReadingClause();
        setState(1076);
=======
      setState(1128);
=======
      setState(1143);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1144);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1156);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 49) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 49)) & 1020346790576129) != 0)) {
        setState(1150);
        oC_ReadingClause();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1124);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1139);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1140);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1152);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1075);
          match(CypherParser::SP);
        }
        setState(1082);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1083);
      oC_UpdatingClause();
      setState(1090);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1085);
=======
          setState(1123);
=======
          setState(1138);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1139);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1151);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1158);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1159);
      oC_UpdatingClause();
      setState(1166);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1133);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
          setState(1148);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1149);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1161);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            setState(1084);
            match(CypherParser::SP);
          }
          setState(1087);
          oC_UpdatingClause(); 
        }
        setState(1092);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx);
      }
      setState(1097);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
      case 1: {
        setState(1094);
=======
            setState(1132);
=======
            setState(1147);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
            setState(1148);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
            setState(1160);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
            match(CypherParser::SP);
          }
          setState(1163);
          oC_UpdatingClause(); 
        }
        setState(1168);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx);
      }
      setState(1173);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx)) {
      case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1142);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1157);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1158);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1170);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1093);
          match(CypherParser::SP);
        }
        setState(1096);
=======
          setState(1141);
          match(CypherParser::SP);
        }
        setState(1144);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
          setState(1156);
          match(CypherParser::SP);
        }
        setState(1159);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1157);
          match(CypherParser::SP);
        }
        setState(1160);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1169);
          match(CypherParser::SP);
        }
        setState(1172);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1103); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1099);
        oC_ReadingClause();
        setState(1101);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
        case 1: {
          setState(1100);
=======
      setState(1151); 
=======
      setState(1166); 
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1167); 
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1179); 
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1175);
        oC_ReadingClause();
        setState(1177);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx)) {
        case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1148);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
          setState(1163);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1164);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1176);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1105); 
=======
        setState(1153); 
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1168); 
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1169); 
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1181); 
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (((((_la - 49) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 49)) & 1020346790576129) != 0));
       notifyQueryNotConcludeWithReturn(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

CypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<CypherParser::KU_QueryPartContext *> CypherParser::OC_MultiPartQueryContext::kU_QueryPart() {
  return getRuleContexts<CypherParser::KU_QueryPartContext>();
}

CypherParser::KU_QueryPartContext* CypherParser::OC_MultiPartQueryContext::kU_QueryPart(size_t i) {
  return getRuleContext<CypherParser::KU_QueryPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiPartQuery;
}


CypherParser::OC_MultiPartQueryContext* CypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 104, CypherParser::RuleOC_MultiPartQuery);
=======
  enterRule(_localctx, 114, CypherParser::RuleOC_MultiPartQuery);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 116, CypherParser::RuleOC_MultiPartQuery);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1115); 
=======
    setState(1163); 
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1178); 
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1179); 
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1191); 
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
              setState(1111);
              kU_QueryPart();
              setState(1113);
=======
              setState(1159);
              kU_QueryPart();
              setState(1161);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
              setState(1174);
              kU_QueryPart();
              setState(1176);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
              setState(1175);
              kU_QueryPart();
              setState(1177);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
              setState(1187);
              kU_QueryPart();
              setState(1189);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                setState(1112);
=======
                setState(1160);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
                setState(1175);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
                setState(1176);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
                setState(1188);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
                match(CypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1117); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1119);
=======
      setState(1165); 
=======
      setState(1180); 
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
<<<<<<< HEAD
    setState(1167);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1182);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1181); 
=======
      setState(1193); 
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
<<<<<<< HEAD
    setState(1183);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1195);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_QueryPartContext ------------------------------------------------------------------

CypherParser::KU_QueryPartContext::KU_QueryPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_WithContext* CypherParser::KU_QueryPartContext::oC_With() {
  return getRuleContext<CypherParser::OC_WithContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::KU_QueryPartContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::KU_QueryPartContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::KU_QueryPartContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::KU_QueryPartContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_QueryPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_QueryPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_QueryPartContext::getRuleIndex() const {
  return CypherParser::RuleKU_QueryPart;
}


CypherParser::KU_QueryPartContext* CypherParser::kU_QueryPart() {
  KU_QueryPartContext *_localctx = _tracker.createInstance<KU_QueryPartContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 106, CypherParser::RuleKU_QueryPart);
=======
  enterRule(_localctx, 116, CypherParser::RuleKU_QueryPart);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 118, CypherParser::RuleKU_QueryPart);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1127);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 49) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 49)) & 7971459301377) != 0)) {
      setState(1121);
      oC_ReadingClause();
      setState(1123);
=======
    setState(1175);
=======
    setState(1190);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1191);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1203);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 49) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 49)) & 1020346790576129) != 0)) {
      setState(1197);
      oC_ReadingClause();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1171);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1186);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1187);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1199);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1122);
        match(CypherParser::SP);
      }
      setState(1129);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1136);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 92) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 92)) & 59) != 0)) {
      setState(1130);
      oC_UpdatingClause();
      setState(1132);
=======
        setState(1170);
=======
        setState(1185);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1186);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1198);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::SP);
      }
      setState(1205);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1212);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 99) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 99)) & 59) != 0)) {
      setState(1206);
      oC_UpdatingClause();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1180);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1195);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1196);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1208);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1131);
        match(CypherParser::SP);
      }
      setState(1138);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1139);
=======
        setState(1179);
=======
        setState(1194);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1195);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1207);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::SP);
      }
      setState(1214);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1187);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1202);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1203);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1215);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_With();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

CypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_CreateContext* CypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<CypherParser::OC_CreateContext>(0);
}

CypherParser::OC_MergeContext* CypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<CypherParser::OC_MergeContext>(0);
}

CypherParser::OC_SetContext* CypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

CypherParser::OC_DeleteContext* CypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<CypherParser::OC_DeleteContext>(0);
}


size_t CypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpdatingClause;
}


CypherParser::OC_UpdatingClauseContext* CypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 108, CypherParser::RuleOC_UpdatingClause);
=======
  enterRule(_localctx, 118, CypherParser::RuleOC_UpdatingClause);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 120, CypherParser::RuleOC_UpdatingClause);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1145);
=======
    setState(1193);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1208);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1209);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1221);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1141);
=======
        setState(1189);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1204);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1205);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1217);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_Create();
        break;
      }

      case CypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1142);
=======
        setState(1190);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1205);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1206);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1218);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_Merge();
        break;
      }

      case CypherParser::SET: {
        enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1143);
=======
        setState(1191);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1206);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1207);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1219);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_Set();
        break;
      }

      case CypherParser::DETACH:
      case CypherParser::DELETE: {
        enterOuterAlt(_localctx, 4);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1144);
=======
        setState(1192);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1207);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1208);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1220);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_Delete();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

CypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_MatchContext* CypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<CypherParser::OC_MatchContext>(0);
}

CypherParser::OC_UnwindContext* CypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<CypherParser::OC_UnwindContext>(0);
}

CypherParser::KU_InQueryCallContext* CypherParser::OC_ReadingClauseContext::kU_InQueryCall() {
  return getRuleContext<CypherParser::KU_InQueryCallContext>(0);
}

CypherParser::KU_LoadFromContext* CypherParser::OC_ReadingClauseContext::kU_LoadFrom() {
  return getRuleContext<CypherParser::KU_LoadFromContext>(0);
}


size_t CypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_ReadingClause;
}


CypherParser::OC_ReadingClauseContext* CypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 110, CypherParser::RuleOC_ReadingClause);
=======
  enterRule(_localctx, 120, CypherParser::RuleOC_ReadingClause);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 122, CypherParser::RuleOC_ReadingClause);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1151);
=======
    setState(1199);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1214);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1215);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1227);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::OPTIONAL:
      case CypherParser::MATCH: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1147);
=======
        setState(1195);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1210);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1211);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1223);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_Match();
        break;
      }

      case CypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1148);
=======
        setState(1196);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1211);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1212);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1224);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_Unwind();
        break;
      }

      case CypherParser::CALL: {
        enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1149);
=======
        setState(1197);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1212);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1213);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1225);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        kU_InQueryCall();
        break;
      }

      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 4);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1150);
=======
        setState(1198);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1213);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1214);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1226);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        kU_LoadFrom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadFromContext ------------------------------------------------------------------

CypherParser::KU_LoadFromContext::KU_LoadFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_LoadFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::HEADERS() {
  return getToken(CypherParser::HEADERS, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_LoadFromContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_LoadFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_LoadFromContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_LoadFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadFrom;
}


CypherParser::KU_LoadFromContext* CypherParser::kU_LoadFrom() {
  KU_LoadFromContext *_localctx = _tracker.createInstance<KU_LoadFromContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 112, CypherParser::RuleKU_LoadFrom);
=======
  enterRule(_localctx, 122, CypherParser::RuleKU_LoadFrom);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 124, CypherParser::RuleKU_LoadFrom);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1153);
    match(CypherParser::LOAD);
    setState(1171);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx)) {
    case 1: {
      setState(1154);
      match(CypherParser::SP);
      setState(1155);
      match(CypherParser::WITH);
      setState(1156);
      match(CypherParser::SP);
      setState(1157);
      match(CypherParser::HEADERS);
      setState(1159);
=======
    setState(1201);
    match(CypherParser::LOAD);
    setState(1219);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      setState(1202);
      match(CypherParser::SP);
      setState(1203);
      match(CypherParser::WITH);
      setState(1204);
      match(CypherParser::SP);
      setState(1205);
      match(CypherParser::HEADERS);
      setState(1207);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1206);
        match(CypherParser::SP);
      }
      setState(1209);
      match(CypherParser::T__1);
      setState(1211);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1210);
        match(CypherParser::SP);
      }
      setState(1213);
      kU_PropertyDefinitions();
      setState(1215);
>>>>>>> 97f7ef93f (update parser for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1214);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
      setState(1161);
      match(CypherParser::T__1);
      setState(1163);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1162);
        match(CypherParser::SP);
      }
      setState(1165);
      kU_PropertyDefinitions();
      setState(1167);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1166);
        match(CypherParser::SP);
      }
      setState(1169);
=======
      setState(1217);
>>>>>>> 97f7ef93f (update parser for sequence)
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
    setState(1173);
    match(CypherParser::SP);
    setState(1174);
    match(CypherParser::FROM);
    setState(1175);
    match(CypherParser::SP);
    setState(1176);
    kU_ScanSource();
    setState(1181);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx)) {
    case 1: {
      setState(1178);
=======
    setState(1221);
    match(CypherParser::SP);
    setState(1222);
    match(CypherParser::FROM);
    setState(1223);
    match(CypherParser::SP);
    setState(1224);
    kU_ScanSource();
    setState(1229);
=======
    setState(1216);
    match(CypherParser::LOAD);
    setState(1234);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1217);
    match(CypherParser::LOAD);
    setState(1235);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1229);
    match(CypherParser::LOAD);
    setState(1247);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx)) {
    case 1: {
      setState(1230);
      match(CypherParser::SP);
<<<<<<< HEAD
      setState(1219);
      match(CypherParser::WITH);
      setState(1220);
      match(CypherParser::SP);
      setState(1221);
      match(CypherParser::HEADERS);
      setState(1223);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1222);
        match(CypherParser::SP);
      }
      setState(1225);
      match(CypherParser::T__1);
<<<<<<< HEAD
      setState(1226);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1227);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1177);
        match(CypherParser::SP);
      }
      setState(1180);
=======
        setState(1225);
        match(CypherParser::SP);
      }
      setState(1228);
<<<<<<< HEAD
>>>>>>> 97f7ef93f (update parser for sequence)
=======
=======
        setState(1226);
        match(CypherParser::SP);
      }
      setState(1229);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      kU_PropertyDefinitions();
=======
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      setState(1231);
      match(CypherParser::WITH);
      setState(1232);
      match(CypherParser::SP);
      setState(1233);
      match(CypherParser::HEADERS);
      setState(1235);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1234);
        match(CypherParser::SP);
      }
      setState(1237);
      match(CypherParser::T__1);
      setState(1239);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1238);
        match(CypherParser::SP);
      }
      setState(1241);
      kU_PropertyDefinitions();
      setState(1243);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1242);
        match(CypherParser::SP);
      }
      setState(1245);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    setState(1249);
    match(CypherParser::SP);
    setState(1250);
    match(CypherParser::FROM);
    setState(1251);
    match(CypherParser::SP);
    setState(1252);
    kU_ScanSource();
    setState(1257);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx)) {
    case 1: {
      setState(1254);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1253);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1243);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1244);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1256);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1187);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      setState(1184);
=======
    setState(1235);
=======
    setState(1250);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1251);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1263);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1232);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1247);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1248);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1260);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1183);
        match(CypherParser::SP);
      }
      setState(1186);
=======
        setState(1231);
        match(CypherParser::SP);
      }
      setState(1234);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1246);
        match(CypherParser::SP);
      }
      setState(1249);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1247);
        match(CypherParser::SP);
      }
      setState(1250);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1259);
        match(CypherParser::SP);
      }
      setState(1262);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InQueryCallContext ------------------------------------------------------------------

CypherParser::KU_InQueryCallContext::KU_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_InQueryCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::KU_InQueryCallContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_InQueryCallContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_InQueryCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_InQueryCall;
}


CypherParser::KU_InQueryCallContext* CypherParser::kU_InQueryCall() {
  KU_InQueryCallContext *_localctx = _tracker.createInstance<KU_InQueryCallContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 114, CypherParser::RuleKU_InQueryCall);
=======
  enterRule(_localctx, 124, CypherParser::RuleKU_InQueryCall);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 126, CypherParser::RuleKU_InQueryCall);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1189);
    match(CypherParser::CALL);
    setState(1190);
    match(CypherParser::SP);
    setState(1191);
    oC_FunctionInvocation();
    setState(1196);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx)) {
    case 1: {
      setState(1193);
=======
    setState(1237);
=======
    setState(1252);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::CALL);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    setState(1253);
=======
    setState(1265);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::CALL);
    setState(1266);
    match(CypherParser::SP);
    setState(1267);
    oC_FunctionInvocation();
    setState(1272);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1241);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1256);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1257);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1269);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1192);
        match(CypherParser::SP);
      }
      setState(1195);
=======
        setState(1240);
        match(CypherParser::SP);
      }
      setState(1243);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1255);
        match(CypherParser::SP);
      }
      setState(1258);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1256);
        match(CypherParser::SP);
      }
      setState(1259);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1268);
        match(CypherParser::SP);
      }
      setState(1271);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

CypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MatchContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_MatchContext::OPTIONAL() {
  return getToken(CypherParser::OPTIONAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MatchContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_MatchContext::getRuleIndex() const {
  return CypherParser::RuleOC_Match;
}


CypherParser::OC_MatchContext* CypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 116, CypherParser::RuleOC_Match);
=======
  enterRule(_localctx, 126, CypherParser::RuleOC_Match);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 128, CypherParser::RuleOC_Match);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1200);
=======
    setState(1248);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1263);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1264);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1276);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::OPTIONAL) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1198);
      match(CypherParser::OPTIONAL);
      setState(1199);
      match(CypherParser::SP);
    }
    setState(1202);
    match(CypherParser::MATCH);
    setState(1204);
=======
      setState(1246);
=======
      setState(1261);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::OPTIONAL);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      setState(1262);
=======
      setState(1274);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::OPTIONAL);
      setState(1275);
      match(CypherParser::SP);
    }
    setState(1278);
    match(CypherParser::MATCH);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1252);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1267);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1268);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1280);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1203);
      match(CypherParser::SP);
    }
    setState(1206);
    oC_Pattern();
    setState(1211);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx)) {
    case 1: {
      setState(1208);
=======
      setState(1251);
=======
      setState(1266);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1267);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1279);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
    }
    setState(1282);
    oC_Pattern();
    setState(1287);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1256);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1271);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1272);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1284);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1207);
        match(CypherParser::SP);
      }
      setState(1210);
=======
        setState(1255);
        match(CypherParser::SP);
      }
      setState(1258);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1270);
        match(CypherParser::SP);
      }
      setState(1273);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1271);
        match(CypherParser::SP);
      }
      setState(1274);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1283);
        match(CypherParser::SP);
      }
      setState(1286);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

CypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnwindContext::UNWIND() {
  return getToken(CypherParser::UNWIND, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnwindContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_UnwindContext::getRuleIndex() const {
  return CypherParser::RuleOC_Unwind;
}


CypherParser::OC_UnwindContext* CypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 118, CypherParser::RuleOC_Unwind);
=======
  enterRule(_localctx, 128, CypherParser::RuleOC_Unwind);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 130, CypherParser::RuleOC_Unwind);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1213);
    match(CypherParser::UNWIND);
    setState(1215);
=======
    setState(1261);
    match(CypherParser::UNWIND);
    setState(1263);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1276);
    match(CypherParser::UNWIND);
    setState(1278);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1277);
    match(CypherParser::UNWIND);
    setState(1279);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1289);
    match(CypherParser::UNWIND);
    setState(1291);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1214);
      match(CypherParser::SP);
    }
    setState(1217);
    oC_Expression();
    setState(1218);
    match(CypherParser::SP);
    setState(1219);
    match(CypherParser::AS);
    setState(1220);
    match(CypherParser::SP);
    setState(1221);
=======
      setState(1262);
=======
      setState(1277);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1278);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1290);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
    }
    setState(1293);
    oC_Expression();
    setState(1294);
    match(CypherParser::SP);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1269);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1284);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1283);
=======
    setState(1295);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::AS);
    setState(1296);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(1285);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1297);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

CypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CreateContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_CreateContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_CreateContext::getRuleIndex() const {
  return CypherParser::RuleOC_Create;
}


CypherParser::OC_CreateContext* CypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 120, CypherParser::RuleOC_Create);
=======
  enterRule(_localctx, 130, CypherParser::RuleOC_Create);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 132, CypherParser::RuleOC_Create);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1223);
    match(CypherParser::CREATE);
    setState(1225);
=======
    setState(1271);
    match(CypherParser::CREATE);
    setState(1273);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1286);
    match(CypherParser::CREATE);
    setState(1288);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1287);
    match(CypherParser::CREATE);
    setState(1289);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1299);
    match(CypherParser::CREATE);
    setState(1301);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1224);
      match(CypherParser::SP);
    }
    setState(1227);
=======
      setState(1272);
      match(CypherParser::SP);
    }
    setState(1275);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1287);
      match(CypherParser::SP);
    }
    setState(1290);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1288);
      match(CypherParser::SP);
    }
    setState(1291);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1300);
      match(CypherParser::SP);
    }
    setState(1303);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

CypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MergeContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_MergeActionContext *> CypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<CypherParser::OC_MergeActionContext>();
}

CypherParser::OC_MergeActionContext* CypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<CypherParser::OC_MergeActionContext>(i);
}


size_t CypherParser::OC_MergeContext::getRuleIndex() const {
  return CypherParser::RuleOC_Merge;
}


CypherParser::OC_MergeContext* CypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 122, CypherParser::RuleOC_Merge);
=======
  enterRule(_localctx, 132, CypherParser::RuleOC_Merge);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 134, CypherParser::RuleOC_Merge);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1229);
    match(CypherParser::MERGE);
    setState(1231);
=======
    setState(1277);
    match(CypherParser::MERGE);
    setState(1279);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1292);
    match(CypherParser::MERGE);
    setState(1294);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1293);
    match(CypherParser::MERGE);
    setState(1295);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1305);
    match(CypherParser::MERGE);
    setState(1307);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1230);
      match(CypherParser::SP);
    }
    setState(1233);
    oC_Pattern();
    setState(1238);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1234);
        match(CypherParser::SP);
        setState(1235);
        oC_MergeAction(); 
      }
      setState(1240);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx);
=======
      setState(1278);
=======
      setState(1293);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1294);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1306);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
    }
    setState(1309);
    oC_Pattern();
    setState(1314);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1310);
        match(CypherParser::SP);
        setState(1311);
        oC_MergeAction(); 
      }
      setState(1316);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

CypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::ON() {
  return getToken(CypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeActionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_SetContext* CypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}


size_t CypherParser::OC_MergeActionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MergeAction;
}


CypherParser::OC_MergeActionContext* CypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 124, CypherParser::RuleOC_MergeAction);
=======
  enterRule(_localctx, 134, CypherParser::RuleOC_MergeAction);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 136, CypherParser::RuleOC_MergeAction);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1251);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1241);
      match(CypherParser::ON);
      setState(1242);
      match(CypherParser::SP);
      setState(1243);
      match(CypherParser::MATCH);
      setState(1244);
      match(CypherParser::SP);
      setState(1245);
=======
    setState(1299);
=======
    setState(1314);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1315);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1327);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1317);
      match(CypherParser::ON);
      setState(1318);
      match(CypherParser::SP);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1293);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1308);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1307);
=======
      setState(1319);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::MATCH);
      setState(1320);
      match(CypherParser::SP);
<<<<<<< HEAD
      setState(1309);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1321);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1246);
      match(CypherParser::ON);
      setState(1247);
      match(CypherParser::SP);
      setState(1248);
      match(CypherParser::CREATE);
      setState(1249);
      match(CypherParser::SP);
      setState(1250);
=======
      setState(1294);
=======
      setState(1309);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::ON);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      setState(1310);
=======
      setState(1322);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::ON);
      setState(1323);
      match(CypherParser::SP);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1298);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1313);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1312);
=======
      setState(1324);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::CREATE);
      setState(1325);
      match(CypherParser::SP);
<<<<<<< HEAD
      setState(1314);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1326);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

CypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SetContext::SET() {
  return getToken(CypherParser::SET, 0);
}

std::vector<CypherParser::OC_SetItemContext *> CypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<CypherParser::OC_SetItemContext>();
}

CypherParser::OC_SetItemContext* CypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<CypherParser::OC_SetItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetContext::getRuleIndex() const {
  return CypherParser::RuleOC_Set;
}


CypherParser::OC_SetContext* CypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 126, CypherParser::RuleOC_Set);
=======
  enterRule(_localctx, 136, CypherParser::RuleOC_Set);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 138, CypherParser::RuleOC_Set);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1253);
    match(CypherParser::SET);
    setState(1255);
=======
    setState(1301);
    match(CypherParser::SET);
    setState(1303);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1316);
    match(CypherParser::SET);
    setState(1318);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1317);
    match(CypherParser::SET);
    setState(1319);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1329);
    match(CypherParser::SET);
    setState(1331);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1254);
      match(CypherParser::SP);
    }
    setState(1257);
    oC_SetItem();
    setState(1268);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1259);
=======
      setState(1302);
=======
      setState(1317);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1318);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1330);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
    }
    setState(1333);
    oC_SetItem();
    setState(1344);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1307);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1322);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1323);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1335);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1258);
          match(CypherParser::SP);
        }
        setState(1261);
        match(CypherParser::T__2);
        setState(1263);
=======
          setState(1306);
=======
          setState(1321);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1322);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1334);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1337);
        match(CypherParser::T__2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1311);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1326);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1327);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1339);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1262);
          match(CypherParser::SP);
        }
        setState(1265);
        oC_SetItem(); 
      }
      setState(1270);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
=======
          setState(1310);
=======
          setState(1325);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1326);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1338);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1341);
        oC_SetItem(); 
      }
      setState(1346);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

CypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyExpressionContext* CypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<CypherParser::OC_PropertyExpressionContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SetItem;
}


CypherParser::OC_SetItemContext* CypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 128, CypherParser::RuleOC_SetItem);
=======
  enterRule(_localctx, 138, CypherParser::RuleOC_SetItem);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 140, CypherParser::RuleOC_SetItem);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1271);
    oC_PropertyExpression();
    setState(1273);
=======
    setState(1319);
    oC_PropertyExpression();
    setState(1321);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1334);
    oC_PropertyExpression();
    setState(1336);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1335);
    oC_PropertyExpression();
    setState(1337);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1347);
    oC_PropertyExpression();
    setState(1349);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1272);
      match(CypherParser::SP);
    }
    setState(1275);
    match(CypherParser::T__5);
    setState(1277);
=======
      setState(1320);
=======
      setState(1335);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1336);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1348);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
    }
    setState(1351);
    match(CypherParser::T__5);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1325);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1340);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1341);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1353);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1276);
      match(CypherParser::SP);
    }
    setState(1279);
=======
      setState(1324);
      match(CypherParser::SP);
    }
    setState(1327);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1339);
      match(CypherParser::SP);
    }
    setState(1342);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1340);
      match(CypherParser::SP);
    }
    setState(1343);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1352);
      match(CypherParser::SP);
    }
    setState(1355);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

CypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_DeleteContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_DeleteContext::getRuleIndex() const {
  return CypherParser::RuleOC_Delete;
}


CypherParser::OC_DeleteContext* CypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 130, CypherParser::RuleOC_Delete);
=======
  enterRule(_localctx, 140, CypherParser::RuleOC_Delete);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 142, CypherParser::RuleOC_Delete);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1283);
=======
    setState(1331);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1346);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1347);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1359);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DETACH) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1281);
      match(CypherParser::DETACH);
      setState(1282);
      match(CypherParser::SP);
    }
    setState(1285);
    match(CypherParser::DELETE);
    setState(1287);
=======
      setState(1329);
=======
      setState(1344);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::DETACH);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      setState(1345);
=======
      setState(1357);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::DETACH);
      setState(1358);
      match(CypherParser::SP);
    }
    setState(1361);
    match(CypherParser::DELETE);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1335);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1350);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1351);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1363);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1286);
      match(CypherParser::SP);
    }
    setState(1289);
    oC_Expression();
    setState(1300);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1291);
=======
      setState(1334);
=======
      setState(1349);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1350);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1362);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
    }
    setState(1365);
    oC_Expression();
    setState(1376);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1339);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1354);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1355);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1367);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1290);
          match(CypherParser::SP);
        }
        setState(1293);
        match(CypherParser::T__2);
        setState(1295);
=======
          setState(1338);
=======
          setState(1353);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1354);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1366);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1369);
        match(CypherParser::T__2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1343);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1358);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1359);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1371);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1294);
          match(CypherParser::SP);
        }
        setState(1297);
        oC_Expression(); 
      }
      setState(1302);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx);
=======
          setState(1342);
=======
          setState(1357);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1358);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1370);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1373);
        oC_Expression(); 
      }
      setState(1378);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

CypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_WithContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_WithContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_WithContext::getRuleIndex() const {
  return CypherParser::RuleOC_With;
}


CypherParser::OC_WithContext* CypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 132, CypherParser::RuleOC_With);
=======
  enterRule(_localctx, 142, CypherParser::RuleOC_With);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 144, CypherParser::RuleOC_With);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1303);
    match(CypherParser::WITH);
    setState(1304);
    oC_ProjectionBody();
    setState(1309);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx)) {
    case 1: {
      setState(1306);
=======
    setState(1351);
=======
    setState(1366);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::WITH);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    setState(1367);
=======
    setState(1379);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::WITH);
    setState(1380);
    oC_ProjectionBody();
    setState(1385);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1354);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1369);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1370);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1382);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1305);
        match(CypherParser::SP);
      }
      setState(1308);
=======
        setState(1353);
        match(CypherParser::SP);
      }
      setState(1356);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1368);
        match(CypherParser::SP);
      }
      setState(1371);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1369);
        match(CypherParser::SP);
      }
      setState(1372);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1381);
        match(CypherParser::SP);
      }
      setState(1384);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

CypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ReturnContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_ReturnContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}


size_t CypherParser::OC_ReturnContext::getRuleIndex() const {
  return CypherParser::RuleOC_Return;
}


CypherParser::OC_ReturnContext* CypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 134, CypherParser::RuleOC_Return);
=======
  enterRule(_localctx, 144, CypherParser::RuleOC_Return);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 146, CypherParser::RuleOC_Return);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1311);
    match(CypherParser::RETURN);
    setState(1312);
=======
    setState(1359);
    match(CypherParser::RETURN);
    setState(1360);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1374);
    match(CypherParser::RETURN);
    setState(1375);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1375);
    match(CypherParser::RETURN);
    setState(1376);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1387);
    match(CypherParser::RETURN);
    setState(1388);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_ProjectionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionBodyContext ------------------------------------------------------------------

CypherParser::OC_ProjectionBodyContext::OC_ProjectionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionBodyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::OC_ProjectionBodyContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

CypherParser::OC_OrderContext* CypherParser::OC_ProjectionBodyContext::oC_Order() {
  return getRuleContext<CypherParser::OC_OrderContext>(0);
}

CypherParser::OC_SkipContext* CypherParser::OC_ProjectionBodyContext::oC_Skip() {
  return getRuleContext<CypherParser::OC_SkipContext>(0);
}

CypherParser::OC_LimitContext* CypherParser::OC_ProjectionBodyContext::oC_Limit() {
  return getRuleContext<CypherParser::OC_LimitContext>(0);
}


size_t CypherParser::OC_ProjectionBodyContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionBody;
}


CypherParser::OC_ProjectionBodyContext* CypherParser::oC_ProjectionBody() {
  OC_ProjectionBodyContext *_localctx = _tracker.createInstance<OC_ProjectionBodyContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 136, CypherParser::RuleOC_ProjectionBody);
=======
  enterRule(_localctx, 146, CypherParser::RuleOC_ProjectionBody);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 148, CypherParser::RuleOC_ProjectionBody);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1318);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx)) {
    case 1: {
      setState(1315);
=======
    setState(1366);
=======
    setState(1381);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1382);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1394);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1363);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1378);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1379);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1391);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1314);
        match(CypherParser::SP);
      }
      setState(1317);
=======
        setState(1362);
        match(CypherParser::SP);
      }
      setState(1365);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1377);
        match(CypherParser::SP);
      }
      setState(1380);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1378);
        match(CypherParser::SP);
      }
      setState(1381);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1390);
        match(CypherParser::SP);
      }
      setState(1393);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1320);
    match(CypherParser::SP);
    setState(1321);
    oC_ProjectionItems();
    setState(1324);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
    case 1: {
      setState(1322);
      match(CypherParser::SP);
      setState(1323);
=======
    setState(1368);
=======
    setState(1383);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::SP);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    setState(1384);
=======
    setState(1396);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::SP);
    setState(1397);
    oC_ProjectionItems();
    setState(1400);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1385);
      match(CypherParser::SP);
<<<<<<< HEAD
      setState(1371);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1386);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1386);
      match(CypherParser::SP);
      setState(1387);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1398);
      match(CypherParser::SP);
      setState(1399);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Order();
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1328);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
    case 1: {
      setState(1326);
      match(CypherParser::SP);
      setState(1327);
=======
    setState(1376);
=======
    setState(1391);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1392);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1404);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1389);
      match(CypherParser::SP);
<<<<<<< HEAD
      setState(1375);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1390);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1390);
      match(CypherParser::SP);
      setState(1391);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1402);
      match(CypherParser::SP);
      setState(1403);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Skip();
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1332);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx)) {
    case 1: {
      setState(1330);
      match(CypherParser::SP);
      setState(1331);
=======
    setState(1380);
=======
    setState(1395);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1396);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1408);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1393);
      match(CypherParser::SP);
<<<<<<< HEAD
      setState(1379);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1394);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1394);
      match(CypherParser::SP);
      setState(1395);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1406);
      match(CypherParser::SP);
      setState(1407);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemsContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemsContext::OC_ProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<CypherParser::OC_ProjectionItemContext *> CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem() {
  return getRuleContexts<CypherParser::OC_ProjectionItemContext>();
}

CypherParser::OC_ProjectionItemContext* CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem(size_t i) {
  return getRuleContext<CypherParser::OC_ProjectionItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItems;
}


CypherParser::OC_ProjectionItemsContext* CypherParser::oC_ProjectionItems() {
  OC_ProjectionItemsContext *_localctx = _tracker.createInstance<OC_ProjectionItemsContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 138, CypherParser::RuleOC_ProjectionItems);
=======
  enterRule(_localctx, 148, CypherParser::RuleOC_ProjectionItems);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 150, CypherParser::RuleOC_ProjectionItems);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1362);
=======
    setState(1410);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1425);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1426);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1438);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::STAR: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1334);
        match(CypherParser::STAR);
        setState(1345);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1336);
=======
        setState(1382);
=======
        setState(1397);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1398);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1410);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::STAR);
        setState(1421);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            setState(1384);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
            setState(1399);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
            setState(1400);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
            setState(1412);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
              setState(1335);
              match(CypherParser::SP);
            }
            setState(1338);
            match(CypherParser::T__2);
            setState(1340);
=======
              setState(1383);
=======
              setState(1398);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
              setState(1399);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
              setState(1411);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
              match(CypherParser::SP);
            }
            setState(1414);
            match(CypherParser::T__2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            setState(1388);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
            setState(1403);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
            setState(1404);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
            setState(1416);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
              setState(1339);
              match(CypherParser::SP);
            }
            setState(1342);
            oC_ProjectionItem(); 
          }
          setState(1347);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx);
=======
              setState(1387);
=======
              setState(1402);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
              setState(1403);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
              setState(1415);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
              match(CypherParser::SP);
            }
            setState(1418);
            oC_ProjectionItem(); 
          }
          setState(1423);
          _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        }
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__6:
      case CypherParser::T__8:
      case CypherParser::T__25:
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::START:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::NOT:
      case CypherParser::MINUS:
      case CypherParser::IN:
      case CypherParser::NULL_:
      case CypherParser::TRUE:
      case CypherParser::FALSE:
      case CypherParser::COUNT:
      case CypherParser::EXISTS:
      case CypherParser::CASE:
      case CypherParser::END:
      case CypherParser::StringLiteral:
      case CypherParser::DecimalInteger:
      case CypherParser::HexLetter:
      case CypherParser::RegularDecimalReal:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1348);
        oC_ProjectionItem();
        setState(1359);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1350);
=======
        setState(1396);
=======
        setState(1411);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1412);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1424);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_ProjectionItem();
        setState(1435);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            setState(1398);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
            setState(1413);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
            setState(1414);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
            setState(1426);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
              setState(1349);
              match(CypherParser::SP);
            }
            setState(1352);
            match(CypherParser::T__2);
            setState(1354);
=======
              setState(1397);
=======
              setState(1412);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
              setState(1413);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
              setState(1425);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
              match(CypherParser::SP);
            }
            setState(1428);
            match(CypherParser::T__2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            setState(1402);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
            setState(1417);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
            setState(1418);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
            setState(1430);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
              setState(1353);
              match(CypherParser::SP);
            }
            setState(1356);
            oC_ProjectionItem(); 
          }
          setState(1361);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx);
=======
              setState(1401);
=======
              setState(1416);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
              setState(1417);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
              setState(1429);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
              match(CypherParser::SP);
            }
            setState(1432);
            oC_ProjectionItem(); 
          }
          setState(1437);
          _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemContext::OC_ProjectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ProjectionItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_ProjectionItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_ProjectionItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItem;
}


CypherParser::OC_ProjectionItemContext* CypherParser::oC_ProjectionItem() {
  OC_ProjectionItemContext *_localctx = _tracker.createInstance<OC_ProjectionItemContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 140, CypherParser::RuleOC_ProjectionItem);
=======
  enterRule(_localctx, 150, CypherParser::RuleOC_ProjectionItem);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 152, CypherParser::RuleOC_ProjectionItem);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1371);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1364);
      oC_Expression();
      setState(1365);
      match(CypherParser::SP);
      setState(1366);
      match(CypherParser::AS);
      setState(1367);
      match(CypherParser::SP);
      setState(1368);
=======
    setState(1419);
=======
    setState(1434);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1435);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1447);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1440);
      oC_Expression();
      setState(1441);
      match(CypherParser::SP);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1416);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1431);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1430);
=======
      setState(1442);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::AS);
      setState(1443);
      match(CypherParser::SP);
<<<<<<< HEAD
      setState(1432);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1444);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1370);
=======
      setState(1418);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1433);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1434);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1446);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

CypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_OrderContext::ORDER() {
  return getToken(CypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrderContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_OrderContext::BY() {
  return getToken(CypherParser::BY, 0);
}

std::vector<CypherParser::OC_SortItemContext *> CypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<CypherParser::OC_SortItemContext>();
}

CypherParser::OC_SortItemContext* CypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<CypherParser::OC_SortItemContext>(i);
}


size_t CypherParser::OC_OrderContext::getRuleIndex() const {
  return CypherParser::RuleOC_Order;
}


CypherParser::OC_OrderContext* CypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 142, CypherParser::RuleOC_Order);
=======
  enterRule(_localctx, 152, CypherParser::RuleOC_Order);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 154, CypherParser::RuleOC_Order);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1373);
    match(CypherParser::ORDER);
    setState(1374);
    match(CypherParser::SP);
    setState(1375);
    match(CypherParser::BY);
    setState(1376);
    match(CypherParser::SP);
    setState(1377);
    oC_SortItem();
    setState(1385);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(1378);
      match(CypherParser::T__2);
      setState(1380);
=======
    setState(1421);
=======
    setState(1436);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::ORDER);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    setState(1437);
    match(CypherParser::ORDER);
    setState(1438);
    match(CypherParser::SP);
    setState(1439);
    match(CypherParser::BY);
    setState(1440);
    match(CypherParser::SP);
    setState(1441);
    oC_SortItem();
=======
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    setState(1449);
    match(CypherParser::ORDER);
    setState(1450);
    match(CypherParser::SP);
    setState(1451);
    match(CypherParser::BY);
    setState(1452);
    match(CypherParser::SP);
    setState(1453);
    oC_SortItem();
    setState(1461);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(1454);
      match(CypherParser::T__2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1428);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1443);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1444);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1456);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1379);
        match(CypherParser::SP);
      }
      setState(1382);
      oC_SortItem();
      setState(1387);
=======
        setState(1427);
=======
        setState(1442);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1443);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1455);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::SP);
      }
      setState(1458);
      oC_SortItem();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1435);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1450);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1451);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1463);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

CypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SkipContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::OC_SkipContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_SkipContext::getRuleIndex() const {
  return CypherParser::RuleOC_Skip;
}


CypherParser::OC_SkipContext* CypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 144, CypherParser::RuleOC_Skip);
=======
  enterRule(_localctx, 154, CypherParser::RuleOC_Skip);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 156, CypherParser::RuleOC_Skip);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1388);
    match(CypherParser::L_SKIP);
    setState(1389);
    match(CypherParser::SP);
    setState(1390);
=======
    setState(1436);
=======
    setState(1451);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::L_SKIP);
    setState(1452);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(1438);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1453);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1452);
=======
    setState(1464);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::L_SKIP);
    setState(1465);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(1454);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1466);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

CypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LimitContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::OC_LimitContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_LimitContext::getRuleIndex() const {
  return CypherParser::RuleOC_Limit;
}


CypherParser::OC_LimitContext* CypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 146, CypherParser::RuleOC_Limit);
=======
  enterRule(_localctx, 156, CypherParser::RuleOC_Limit);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 158, CypherParser::RuleOC_Limit);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1392);
    match(CypherParser::LIMIT);
    setState(1393);
    match(CypherParser::SP);
    setState(1394);
=======
    setState(1440);
=======
    setState(1455);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::LIMIT);
    setState(1456);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(1442);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1457);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1456);
=======
    setState(1468);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::LIMIT);
    setState(1469);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(1458);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1470);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

CypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(CypherParser::ASCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASC() {
  return getToken(CypherParser::ASC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(CypherParser::DESCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESC() {
  return getToken(CypherParser::DESC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_SortItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SortItem;
}


CypherParser::OC_SortItemContext* CypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 148, CypherParser::RuleOC_SortItem);
=======
  enterRule(_localctx, 158, CypherParser::RuleOC_SortItem);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 160, CypherParser::RuleOC_SortItem);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1396);
    oC_Expression();
    setState(1401);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      setState(1398);
=======
    setState(1444);
=======
    setState(1459);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1460);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1472);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_Expression();
    setState(1477);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1446);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1461);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1462);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1474);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1397);
        match(CypherParser::SP);
      }
      setState(1400);
=======
        setState(1445);
        match(CypherParser::SP);
      }
      setState(1448);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1460);
        match(CypherParser::SP);
      }
      setState(1463);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1461);
        match(CypherParser::SP);
      }
      setState(1464);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1473);
        match(CypherParser::SP);
      }
      setState(1476);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _la = _input->LA(1);
      if (!(((((_la - 114) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 114)) & 15) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

CypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WhereContext::WHERE() {
  return getToken(CypherParser::WHERE, 0);
}

tree::TerminalNode* CypherParser::OC_WhereContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_WhereContext::getRuleIndex() const {
  return CypherParser::RuleOC_Where;
}


CypherParser::OC_WhereContext* CypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 150, CypherParser::RuleOC_Where);
=======
  enterRule(_localctx, 160, CypherParser::RuleOC_Where);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 162, CypherParser::RuleOC_Where);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1403);
    match(CypherParser::WHERE);
    setState(1404);
    match(CypherParser::SP);
    setState(1405);
=======
    setState(1451);
=======
    setState(1466);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    match(CypherParser::WHERE);
    setState(1467);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(1453);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1468);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1467);
=======
    setState(1479);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::WHERE);
    setState(1480);
    match(CypherParser::SP);
<<<<<<< HEAD
    setState(1469);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1481);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

CypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PatternPartContext *> CypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<CypherParser::OC_PatternPartContext>();
}

CypherParser::OC_PatternPartContext* CypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<CypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_Pattern;
}


CypherParser::OC_PatternContext* CypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 152, CypherParser::RuleOC_Pattern);
=======
  enterRule(_localctx, 162, CypherParser::RuleOC_Pattern);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 164, CypherParser::RuleOC_Pattern);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1407);
    oC_PatternPart();
    setState(1418);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1409);
=======
    setState(1455);
=======
    setState(1470);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1471);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1483);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_PatternPart();
    setState(1494);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1457);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1472);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1473);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1485);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1408);
          match(CypherParser::SP);
        }
        setState(1411);
        match(CypherParser::T__2);
        setState(1413);
=======
          setState(1456);
=======
          setState(1471);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1472);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1484);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1487);
        match(CypherParser::T__2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1461);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1476);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1477);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1489);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1412);
          match(CypherParser::SP);
        }
        setState(1415);
        oC_PatternPart(); 
      }
      setState(1420);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx);
=======
          setState(1460);
=======
          setState(1475);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1476);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1488);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1491);
        oC_PatternPart(); 
      }
      setState(1496);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

CypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_AnonymousPatternPartContext* CypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<CypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternPart;
}


CypherParser::OC_PatternPartContext* CypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 154, CypherParser::RuleOC_PatternPart);
=======
  enterRule(_localctx, 164, CypherParser::RuleOC_PatternPart);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 166, CypherParser::RuleOC_PatternPart);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1432);
=======
    setState(1480);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1495);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1496);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1508);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::START:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1421);
        oC_Variable();
        setState(1423);
=======
        setState(1469);
        oC_Variable();
        setState(1471);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1484);
        oC_Variable();
        setState(1486);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1485);
        oC_Variable();
        setState(1487);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1497);
        oC_Variable();
        setState(1499);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1422);
          match(CypherParser::SP);
        }
        setState(1425);
        match(CypherParser::T__5);
        setState(1427);
=======
          setState(1470);
=======
          setState(1485);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1486);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1498);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1501);
        match(CypherParser::T__5);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1475);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1490);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1491);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1503);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1426);
          match(CypherParser::SP);
        }
        setState(1429);
=======
          setState(1474);
          match(CypherParser::SP);
        }
        setState(1477);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
          setState(1489);
          match(CypherParser::SP);
        }
        setState(1492);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1490);
          match(CypherParser::SP);
        }
        setState(1493);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1502);
          match(CypherParser::SP);
        }
        setState(1505);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_AnonymousPatternPart();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1431);
=======
        setState(1479);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1494);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1495);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1507);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

CypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PatternElementContext* CypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnonymousPatternPart;
}


CypherParser::OC_AnonymousPatternPartContext* CypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 156, CypherParser::RuleOC_AnonymousPatternPart);
=======
  enterRule(_localctx, 166, CypherParser::RuleOC_AnonymousPatternPart);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 168, CypherParser::RuleOC_AnonymousPatternPart);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1434);
=======
    setState(1482);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1497);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1498);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1510);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

CypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternElementContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PatternElementContext* CypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_PatternElementContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElement;
}


CypherParser::OC_PatternElementContext* CypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 158, CypherParser::RuleOC_PatternElement);
=======
  enterRule(_localctx, 168, CypherParser::RuleOC_PatternElement);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 170, CypherParser::RuleOC_PatternElement);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1450);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1436);
      oC_NodePattern();
      setState(1443);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1438);
=======
    setState(1498);
=======
    setState(1513);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1514);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1526);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1512);
      oC_NodePattern();
      setState(1519);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1486);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
          setState(1501);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1502);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1514);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            setState(1437);
            match(CypherParser::SP);
          }
          setState(1440);
          oC_PatternElementChain(); 
        }
        setState(1445);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx);
=======
            setState(1485);
=======
            setState(1500);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
            setState(1501);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
            setState(1513);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
            match(CypherParser::SP);
          }
          setState(1516);
          oC_PatternElementChain(); 
        }
        setState(1521);
        _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1446);
      match(CypherParser::T__1);
      setState(1447);
      oC_PatternElement();
      setState(1448);
=======
      setState(1494);
=======
      setState(1509);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::T__1);
      setState(1510);
      oC_PatternElement();
<<<<<<< HEAD
      setState(1496);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1511);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1510);
=======
      setState(1522);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::T__1);
      setState(1523);
      oC_PatternElement();
<<<<<<< HEAD
      setState(1512);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1524);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

CypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodePatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_NodePatternContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_NodePatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodePattern;
}


CypherParser::OC_NodePatternContext* CypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 160, CypherParser::RuleOC_NodePattern);
=======
  enterRule(_localctx, 170, CypherParser::RuleOC_NodePattern);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 172, CypherParser::RuleOC_NodePattern);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1452);
    match(CypherParser::T__1);
    setState(1454);
=======
    setState(1500);
    match(CypherParser::T__1);
    setState(1502);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1515);
    match(CypherParser::T__1);
    setState(1517);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1516);
    match(CypherParser::T__1);
    setState(1518);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1528);
    match(CypherParser::T__1);
    setState(1530);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1453);
      match(CypherParser::SP);
    }
    setState(1460);
=======
      setState(1501);
      match(CypherParser::SP);
    }
    setState(1508);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1516);
      match(CypherParser::SP);
    }
    setState(1523);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1517);
      match(CypherParser::SP);
    }
    setState(1524);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1529);
      match(CypherParser::SP);
    }
    setState(1536);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
<<<<<<< HEAD
      ((1ULL << (_la - 48)) & 71307013) != 0) || ((((_la - 121) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 121)) & 302256385) != 0)) {
      setState(1456);
      oC_Variable();
      setState(1458);
=======
      ((1ULL << (_la - 48)) & 9126809349) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
=======
      ((1ULL << (_la - 48)) & 9127333637) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
>>>>>>> aed81ff20 (create sequence complete)
      ((1ULL << (_la - 128)) & 302256385) != 0)) {
<<<<<<< HEAD
      setState(1520);
      oC_Variable();
      setState(1522);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1521);
        match(CypherParser::SP);
      }
    }
    setState(1530);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1526);
      oC_NodeLabels();
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1512);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1527);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1528);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1457);
        match(CypherParser::SP);
      }
    }
    setState(1466);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1462);
      oC_NodeLabels();
      setState(1464);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1463);
        match(CypherParser::SP);
      }
    }
    setState(1472);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1468);
      kU_Properties();
      setState(1470);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1469);
        match(CypherParser::SP);
      }
    }
    setState(1474);
=======
        setState(1511);
=======
        setState(1526);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1527);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
        match(CypherParser::SP);
      }
    }
    setState(1536);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
=======
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      setState(1532);
      oC_Variable();
      setState(1534);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1533);
        match(CypherParser::SP);
      }
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1522);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1537);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1538);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1542);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1538);
      oC_NodeLabels();
      setState(1540);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1539);
        match(CypherParser::SP);
      }
    }
    setState(1548);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1544);
      kU_Properties();
      setState(1546);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1545);
        match(CypherParser::SP);
      }
    }
    setState(1550);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

CypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RelationshipPatternContext* CypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<CypherParser::OC_RelationshipPatternContext>(0);
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_PatternElementChainContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElementChain;
}


CypherParser::OC_PatternElementChainContext* CypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 162, CypherParser::RuleOC_PatternElementChain);
=======
  enterRule(_localctx, 172, CypherParser::RuleOC_PatternElementChain);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 174, CypherParser::RuleOC_PatternElementChain);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1476);
    oC_RelationshipPattern();
    setState(1478);
=======
    setState(1524);
    oC_RelationshipPattern();
    setState(1526);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1539);
    oC_RelationshipPattern();
    setState(1541);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1540);
    oC_RelationshipPattern();
    setState(1542);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1552);
    oC_RelationshipPattern();
    setState(1554);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1477);
      match(CypherParser::SP);
    }
    setState(1480);
=======
      setState(1525);
      match(CypherParser::SP);
    }
    setState(1528);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1540);
      match(CypherParser::SP);
    }
    setState(1543);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1541);
      match(CypherParser::SP);
    }
    setState(1544);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1553);
      match(CypherParser::SP);
    }
    setState(1556);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

CypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LeftArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<CypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<CypherParser::OC_DashContext *> CypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<CypherParser::OC_DashContext>();
}

CypherParser::OC_DashContext* CypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<CypherParser::OC_DashContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_RelationshipDetailContext* CypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<CypherParser::OC_RelationshipDetailContext>(0);
}

CypherParser::OC_RightArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<CypherParser::OC_RightArrowHeadContext>(0);
}


size_t CypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipPattern;
}


CypherParser::OC_RelationshipPatternContext* CypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 164, CypherParser::RuleOC_RelationshipPattern);
=======
  enterRule(_localctx, 174, CypherParser::RuleOC_RelationshipPattern);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 176, CypherParser::RuleOC_RelationshipPattern);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1526);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1482);
      oC_LeftArrowHead();
      setState(1484);
=======
    setState(1574);
=======
    setState(1589);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1590);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1602);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
      setState(1546);
      oC_LeftArrowHead();
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1532);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1547);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1548);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1483);
        match(CypherParser::SP);
      }
      setState(1486);
      oC_Dash();
      setState(1488);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx)) {
      case 1: {
        setState(1487);
=======
        setState(1531);
=======
        setState(1546);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1547);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
        match(CypherParser::SP);
      }
      setState(1550);
      oC_Dash();
      setState(1552);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx)) {
      case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1535);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1550);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1551);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1491);
=======
      setState(1539);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1554);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1555);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1490);
        oC_RelationshipDetail();
      }
      setState(1494);
=======
        setState(1538);
        oC_RelationshipDetail();
      }
      setState(1542);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1553);
        oC_RelationshipDetail();
      }
      setState(1557);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1554);
        oC_RelationshipDetail();
      }
      setState(1558);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1558);
      oC_LeftArrowHead();
      setState(1560);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1493);
        match(CypherParser::SP);
      }
      setState(1496);
=======
        setState(1541);
        match(CypherParser::SP);
      }
      setState(1544);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1556);
        match(CypherParser::SP);
      }
      setState(1559);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1557);
        match(CypherParser::SP);
      }
      setState(1560);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      oC_Dash();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1498);
      oC_Dash();
      setState(1500);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx)) {
      case 1: {
        setState(1499);
=======
      setState(1546);
=======
      setState(1561);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
=======
        setState(1559);
        match(CypherParser::SP);
      }
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      setState(1562);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      oC_Dash();
      setState(1564);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx)) {
      case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1547);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1562);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1563);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1503);
=======
      setState(1551);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1566);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1567);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1502);
        oC_RelationshipDetail();
      }
      setState(1506);
=======
        setState(1550);
        oC_RelationshipDetail();
      }
      setState(1554);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1565);
        oC_RelationshipDetail();
      }
      setState(1569);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1566);
        oC_RelationshipDetail();
      }
      setState(1570);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1505);
        match(CypherParser::SP);
      }
      setState(1508);
      oC_Dash();
      setState(1510);
=======
        setState(1553);
=======
        setState(1568);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1569);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
        match(CypherParser::SP);
      }
      setState(1572);
      oC_Dash();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1558);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1573);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1574);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1509);
        match(CypherParser::SP);
      }
      setState(1512);
=======
        setState(1557);
        match(CypherParser::SP);
      }
      setState(1560);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1572);
        match(CypherParser::SP);
      }
      setState(1575);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1573);
        match(CypherParser::SP);
      }
      setState(1576);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      oC_RightArrowHead();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1514);
      oC_Dash();
      setState(1516);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx)) {
      case 1: {
        setState(1515);
=======
      setState(1562);
=======
      setState(1577);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1578);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1574);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Dash();
      setState(1576);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx)) {
      case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1563);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1578);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1579);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1575);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1519);
=======
      setState(1567);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1582);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1583);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1579);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1518);
        oC_RelationshipDetail();
      }
      setState(1522);
=======
        setState(1566);
        oC_RelationshipDetail();
      }
      setState(1570);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1581);
        oC_RelationshipDetail();
      }
      setState(1585);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1582);
=======
        setState(1578);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_RelationshipDetail();
      }
      setState(1582);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1581);
        match(CypherParser::SP);
      }
      setState(1584);
      oC_Dash();
      setState(1586);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1521);
        match(CypherParser::SP);
      }
      setState(1524);
=======
        setState(1569);
        match(CypherParser::SP);
      }
      setState(1572);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1584);
        match(CypherParser::SP);
      }
      setState(1587);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1585);
        match(CypherParser::SP);
      }
      setState(1588);
<<<<<<< HEAD
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      oC_RightArrowHead();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1590);
      oC_Dash();
      setState(1592);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx)) {
      case 1: {
        setState(1591);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1595);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1594);
        oC_RelationshipDetail();
      }
      setState(1598);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1597);
        match(CypherParser::SP);
      }
      setState(1600);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

CypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_RelationshipTypesContext* CypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<CypherParser::OC_RelationshipTypesContext>(0);
}

CypherParser::OC_RangeLiteralContext* CypherParser::OC_RelationshipDetailContext::oC_RangeLiteral() {
  return getRuleContext<CypherParser::OC_RangeLiteralContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_RelationshipDetailContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipDetail;
}


CypherParser::OC_RelationshipDetailContext* CypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 166, CypherParser::RuleOC_RelationshipDetail);
=======
  enterRule(_localctx, 176, CypherParser::RuleOC_RelationshipDetail);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 178, CypherParser::RuleOC_RelationshipDetail);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1528);
    match(CypherParser::T__6);
    setState(1530);
=======
    setState(1576);
    match(CypherParser::T__6);
    setState(1578);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1591);
    match(CypherParser::T__6);
    setState(1593);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1592);
    match(CypherParser::T__6);
    setState(1594);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1604);
    match(CypherParser::T__6);
    setState(1606);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1529);
      match(CypherParser::SP);
    }
    setState(1536);
=======
      setState(1577);
      match(CypherParser::SP);
    }
    setState(1584);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1592);
      match(CypherParser::SP);
    }
    setState(1599);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1593);
      match(CypherParser::SP);
    }
    setState(1600);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1605);
      match(CypherParser::SP);
    }
    setState(1612);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
<<<<<<< HEAD
      ((1ULL << (_la - 48)) & 71307013) != 0) || ((((_la - 121) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 121)) & 302256385) != 0)) {
      setState(1532);
      oC_Variable();
      setState(1534);
=======
      ((1ULL << (_la - 48)) & 9126809349) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
=======
      ((1ULL << (_la - 48)) & 9127333637) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
>>>>>>> aed81ff20 (create sequence complete)
      ((1ULL << (_la - 128)) & 302256385) != 0)) {
<<<<<<< HEAD
      setState(1596);
      oC_Variable();
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1582);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1597);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1598);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1533);
        match(CypherParser::SP);
      }
    }
    setState(1542);
=======
        setState(1581);
        match(CypherParser::SP);
      }
    }
    setState(1590);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1596);
        match(CypherParser::SP);
      }
    }
    setState(1605);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1597);
        match(CypherParser::SP);
      }
    }
    setState(1606);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1538);
      oC_RelationshipTypes();
      setState(1540);
=======
      setState(1586);
=======
      setState(1601);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1602);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      oC_RelationshipTypes();
      setState(1604);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1603);
        match(CypherParser::SP);
      }
    }
    setState(1612);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::STAR) {
      setState(1608);
      oC_RangeLiteral();
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1594);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1609);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
=======
      setState(1608);
      oC_Variable();
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      setState(1610);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1539);
        match(CypherParser::SP);
      }
    }
    setState(1548);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::STAR) {
      setState(1544);
      oC_RangeLiteral();
      setState(1546);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1545);
        match(CypherParser::SP);
      }
    }
    setState(1554);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1550);
      kU_Properties();
      setState(1552);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1551);
        match(CypherParser::SP);
      }
    }
    setState(1556);
=======
        setState(1593);
=======
        setState(1608);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1609);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
        match(CypherParser::SP);
      }
    }
    setState(1618);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1614);
      oC_RelationshipTypes();
      setState(1616);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1615);
        match(CypherParser::SP);
      }
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1604);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1619);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1620);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1624);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::STAR) {
      setState(1620);
      oC_RangeLiteral();
      setState(1622);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1621);
        match(CypherParser::SP);
      }
    }
    setState(1630);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1626);
      kU_Properties();
      setState(1628);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1627);
        match(CypherParser::SP);
      }
    }
    setState(1632);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertiesContext ------------------------------------------------------------------

CypherParser::KU_PropertiesContext::KU_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_PropertiesContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertiesContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::KU_PropertiesContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::KU_PropertiesContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::KU_PropertiesContext::getRuleIndex() const {
  return CypherParser::RuleKU_Properties;
}


CypherParser::KU_PropertiesContext* CypherParser::kU_Properties() {
  KU_PropertiesContext *_localctx = _tracker.createInstance<KU_PropertiesContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 168, CypherParser::RuleKU_Properties);
=======
  enterRule(_localctx, 178, CypherParser::RuleKU_Properties);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 180, CypherParser::RuleKU_Properties);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1558);
    match(CypherParser::T__8);
    setState(1560);
=======
    setState(1606);
    match(CypherParser::T__8);
    setState(1608);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1621);
    match(CypherParser::T__8);
    setState(1623);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1622);
    match(CypherParser::T__8);
    setState(1624);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1634);
    match(CypherParser::T__8);
    setState(1636);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1559);
      match(CypherParser::SP);
    }
    setState(1595);
=======
      setState(1607);
      match(CypherParser::SP);
    }
    setState(1643);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1622);
      match(CypherParser::SP);
    }
    setState(1658);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1623);
      match(CypherParser::SP);
    }
    setState(1659);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1635);
      match(CypherParser::SP);
    }
    setState(1671);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
<<<<<<< HEAD
      ((1ULL << (_la - 48)) & 71307013) != 0) || ((((_la - 121) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 121)) & 302256385) != 0)) {
      setState(1562);
      oC_PropertyKeyName();
      setState(1564);
=======
      ((1ULL << (_la - 48)) & 9126809349) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
=======
      ((1ULL << (_la - 48)) & 9127333637) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
>>>>>>> aed81ff20 (create sequence complete)
      ((1ULL << (_la - 128)) & 302256385) != 0)) {
      setState(1638);
      oC_PropertyKeyName();
      setState(1640);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1639);
        match(CypherParser::SP);
      }
      setState(1642);
      match(CypherParser::COLON);
      setState(1644);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1643);
        match(CypherParser::SP);
      }
      setState(1646);
      oC_Expression();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1620);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1635);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1636);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1648);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1647);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1566);
      match(CypherParser::COLON);
      setState(1568);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1567);
        match(CypherParser::SP);
      }
      setState(1570);
      oC_Expression();
      setState(1572);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1571);
        match(CypherParser::SP);
      }
      setState(1592);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(1574);
        match(CypherParser::T__2);
        setState(1576);
=======
      setState(1640);
=======
      setState(1655);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1656);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(1638);
        match(CypherParser::T__2);
        setState(1640);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1639);
          match(CypherParser::SP);
        }
        setState(1642);
        oC_PropertyKeyName();
        setState(1644);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1643);
          match(CypherParser::SP);
        }
        setState(1646);
        match(CypherParser::COLON);
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1632);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1647);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1648);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1647);
          match(CypherParser::SP);
        }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1578);
        oC_PropertyKeyName();
        setState(1580);
=======
        setState(1634);
        oC_Expression();
        setState(1636);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1649);
        oC_Expression();
        setState(1651);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
=======
      setState(1668);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        setState(1650);
        match(CypherParser::T__2);
        setState(1652);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1651);
          match(CypherParser::SP);
        }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1582);
        match(CypherParser::COLON);
        setState(1584);
=======
        setState(1654);
        oC_PropertyKeyName();
        setState(1656);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
          setState(1583);
          match(CypherParser::SP);
        }
        setState(1586);
        oC_Expression();
        setState(1588);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1587);
          match(CypherParser::SP);
        }
        setState(1594);
=======
        setState(1642);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1657);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1658);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1655);
          match(CypherParser::SP);
        }
        setState(1658);
        match(CypherParser::COLON);
        setState(1660);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1659);
          match(CypherParser::SP);
        }
        setState(1662);
        oC_Expression();
        setState(1664);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1663);
          match(CypherParser::SP);
        }
        setState(1670);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1597);
=======
    setState(1645);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1660);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1661);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1673);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

CypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_RelTypeNameContext *> CypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<CypherParser::OC_RelTypeNameContext>();
}

CypherParser::OC_RelTypeNameContext* CypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<CypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipTypes;
}


CypherParser::OC_RelationshipTypesContext* CypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 170, CypherParser::RuleOC_RelationshipTypes);
=======
  enterRule(_localctx, 180, CypherParser::RuleOC_RelationshipTypes);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 182, CypherParser::RuleOC_RelationshipTypes);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1599);
    match(CypherParser::COLON);
    setState(1601);
=======
    setState(1647);
    match(CypherParser::COLON);
    setState(1649);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1662);
    match(CypherParser::COLON);
    setState(1664);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1663);
    match(CypherParser::COLON);
    setState(1665);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1675);
    match(CypherParser::COLON);
    setState(1677);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1600);
      match(CypherParser::SP);
    }
    setState(1603);
    oC_RelTypeName();
    setState(1617);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1605);
=======
      setState(1648);
=======
      setState(1663);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1664);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1676);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
    }
    setState(1679);
    oC_RelTypeName();
    setState(1693);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 262, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1653);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1668);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1669);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1681);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1604);
          match(CypherParser::SP);
        }
        setState(1607);
        match(CypherParser::T__10);
        setState(1609);
=======
          setState(1652);
=======
          setState(1667);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1668);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1680);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1683);
        match(CypherParser::T__10);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1657);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1672);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1673);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1685);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::COLON) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1608);
          match(CypherParser::COLON);
        }
        setState(1612);
=======
          setState(1656);
          match(CypherParser::COLON);
        }
        setState(1660);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
          setState(1671);
          match(CypherParser::COLON);
        }
        setState(1675);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1672);
          match(CypherParser::COLON);
        }
        setState(1676);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1684);
          match(CypherParser::COLON);
        }
        setState(1688);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1611);
          match(CypherParser::SP);
        }
        setState(1614);
        oC_RelTypeName(); 
      }
      setState(1619);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx);
=======
          setState(1659);
=======
          setState(1674);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1675);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1687);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1690);
        oC_RelTypeName(); 
      }
      setState(1695);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 262, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NodeLabelContext *> CypherParser::OC_NodeLabelsContext::oC_NodeLabel() {
  return getRuleContexts<CypherParser::OC_NodeLabelContext>();
}

CypherParser::OC_NodeLabelContext* CypherParser::OC_NodeLabelsContext::oC_NodeLabel(size_t i) {
  return getRuleContext<CypherParser::OC_NodeLabelContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabels;
}


CypherParser::OC_NodeLabelsContext* CypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 172, CypherParser::RuleOC_NodeLabels);
=======
  enterRule(_localctx, 182, CypherParser::RuleOC_NodeLabels);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 184, CypherParser::RuleOC_NodeLabels);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1620);
    oC_NodeLabel();
    setState(1627);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1622);
=======
    setState(1668);
=======
    setState(1683);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1684);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1696);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_NodeLabel();
    setState(1703);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 264, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1670);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1685);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1686);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1698);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1621);
          match(CypherParser::SP);
        }
        setState(1624);
        oC_NodeLabel(); 
      }
      setState(1629);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx);
=======
          setState(1669);
=======
          setState(1684);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1685);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1697);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1700);
        oC_NodeLabel(); 
      }
      setState(1705);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 260, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 264, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelContext::OC_NodeLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LabelNameContext* CypherParser::OC_NodeLabelContext::oC_LabelName() {
  return getRuleContext<CypherParser::OC_LabelNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_NodeLabelContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabel;
}


CypherParser::OC_NodeLabelContext* CypherParser::oC_NodeLabel() {
  OC_NodeLabelContext *_localctx = _tracker.createInstance<OC_NodeLabelContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 174, CypherParser::RuleOC_NodeLabel);
=======
  enterRule(_localctx, 184, CypherParser::RuleOC_NodeLabel);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 186, CypherParser::RuleOC_NodeLabel);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1630);
    match(CypherParser::COLON);
    setState(1632);
=======
    setState(1678);
    match(CypherParser::COLON);
    setState(1680);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1693);
    match(CypherParser::COLON);
    setState(1695);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1694);
    match(CypherParser::COLON);
    setState(1696);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1706);
    match(CypherParser::COLON);
    setState(1708);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1631);
      match(CypherParser::SP);
    }
    setState(1634);
=======
      setState(1679);
      match(CypherParser::SP);
    }
    setState(1682);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1694);
      match(CypherParser::SP);
    }
    setState(1697);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1695);
      match(CypherParser::SP);
    }
    setState(1698);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1707);
      match(CypherParser::SP);
    }
    setState(1710);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_LabelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

CypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SHORTEST() {
  return getToken(CypherParser::SHORTEST, 0);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::OC_RangeLiteralContext::kU_RecursiveRelationshipComprehension() {
  return getRuleContext<CypherParser::KU_RecursiveRelationshipComprehensionContext>(0);
}

CypherParser::OC_LowerBoundContext* CypherParser::OC_RangeLiteralContext::oC_LowerBound() {
  return getRuleContext<CypherParser::OC_LowerBoundContext>(0);
}

CypherParser::OC_UpperBoundContext* CypherParser::OC_RangeLiteralContext::oC_UpperBound() {
  return getRuleContext<CypherParser::OC_UpperBoundContext>(0);
}


size_t CypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_RangeLiteral;
}


CypherParser::OC_RangeLiteralContext* CypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 176, CypherParser::RuleOC_RangeLiteral);
=======
  enterRule(_localctx, 186, CypherParser::RuleOC_RangeLiteral);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 188, CypherParser::RuleOC_RangeLiteral);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1636);
    match(CypherParser::STAR);
    setState(1638);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx)) {
    case 1: {
      setState(1637);
=======
    setState(1684);
=======
    setState(1699);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1700);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1712);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::STAR);
    setState(1714);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 266, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1685);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1700);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1701);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1713);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1644);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(1640);
=======
    setState(1692);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(1688);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1707);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(1703);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1708);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(1704);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1720);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(1716);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::ALL: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1641);
        match(CypherParser::ALL);
        setState(1642);
        match(CypherParser::SP);
        setState(1643);
=======
        setState(1689);
=======
        setState(1704);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
        match(CypherParser::ALL);
        setState(1705);
        match(CypherParser::SP);
<<<<<<< HEAD
        setState(1691);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1706);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1705);
=======
        setState(1717);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::ALL);
        setState(1718);
        match(CypherParser::SP);
<<<<<<< HEAD
        setState(1707);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1719);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__7:
      case CypherParser::T__8:
      case CypherParser::T__11:
      case CypherParser::DecimalInteger:
      case CypherParser::SP: {
        break;
      }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1647);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx)) {
    case 1: {
      setState(1646);
=======
    setState(1695);
=======
    setState(1710);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1711);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1723);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1694);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1709);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1710);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1722);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1663);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx)) {
    case 1: {
      setState(1650);
=======
    setState(1711);
=======
    setState(1726);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1727);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1739);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 273, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1698);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1713);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1714);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1726);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1649);
        oC_LowerBound();
      }
      setState(1653);
=======
        setState(1697);
        oC_LowerBound();
      }
      setState(1701);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1712);
        oC_LowerBound();
      }
      setState(1716);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1713);
        oC_LowerBound();
      }
      setState(1717);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1725);
        oC_LowerBound();
      }
      setState(1729);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1652);
        match(CypherParser::SP);
      }
      setState(1655);
      match(CypherParser::T__11);
      setState(1657);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx)) {
      case 1: {
        setState(1656);
=======
        setState(1700);
=======
        setState(1715);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1716);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1728);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::SP);
      }
      setState(1731);
      match(CypherParser::T__11);
      setState(1733);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 271, _ctx)) {
      case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1704);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1719);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1720);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1732);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1660);
=======
      setState(1708);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1723);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1724);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1736);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1659);
=======
        setState(1707);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1722);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1723);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1735);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_UpperBound();
      }
      break;
    }

    case 2: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1662);
=======
      setState(1710);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1725);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1726);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1738);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_IntegerLiteral();
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1669);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 265, _ctx)) {
    case 1: {
      setState(1666);
=======
    setState(1717);
=======
    setState(1732);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1733);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1745);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 275, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1714);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1729);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1730);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1742);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1665);
        match(CypherParser::SP);
      }
      setState(1668);
=======
        setState(1713);
        match(CypherParser::SP);
      }
      setState(1716);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1728);
        match(CypherParser::SP);
      }
      setState(1731);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1729);
        match(CypherParser::SP);
      }
      setState(1732);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1741);
        match(CypherParser::SP);
      }
      setState(1744);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      kU_RecursiveRelationshipComprehension();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RecursiveRelationshipComprehensionContext ------------------------------------------------------------------

CypherParser::KU_RecursiveRelationshipComprehensionContext::KU_RecursiveRelationshipComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_VariableContext *> CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable() {
  return getRuleContexts<CypherParser::OC_VariableContext>();
}

CypherParser::OC_VariableContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable(size_t i) {
  return getRuleContext<CypherParser::OC_VariableContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RecursiveRelationshipComprehensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RecursiveRelationshipComprehensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateRelProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateRelProjectionItemsContext>(0);
}

CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateNodeProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateNodeProjectionItemsContext>(0);
}


size_t CypherParser::KU_RecursiveRelationshipComprehensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RecursiveRelationshipComprehension;
}


CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::kU_RecursiveRelationshipComprehension() {
  KU_RecursiveRelationshipComprehensionContext *_localctx = _tracker.createInstance<KU_RecursiveRelationshipComprehensionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 178, CypherParser::RuleKU_RecursiveRelationshipComprehension);
=======
  enterRule(_localctx, 188, CypherParser::RuleKU_RecursiveRelationshipComprehension);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 190, CypherParser::RuleKU_RecursiveRelationshipComprehension);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1671);
    match(CypherParser::T__1);
    setState(1673);
=======
    setState(1719);
=======
    setState(1734);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1735);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    match(CypherParser::T__1);
    setState(1737);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1736);
      match(CypherParser::SP);
    }
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1723);
    oC_Variable();
    setState(1725);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1724);
      match(CypherParser::SP);
    }
    setState(1727);
    match(CypherParser::T__2);
    setState(1729);
>>>>>>> 97f7ef93f (update parser for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1728);
      match(CypherParser::SP);
    }
    setState(1731);
=======
    setState(1738);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    oC_Variable();
<<<<<<< HEAD
    setState(1677);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1676);
      match(CypherParser::SP);
    }
    setState(1679);
    match(CypherParser::T__2);
    setState(1681);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1680);
      match(CypherParser::SP);
    }
    setState(1683);
    oC_Variable();
    setState(1692);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 271, _ctx)) {
    case 1: {
      setState(1685);
=======
    setState(1740);
=======
    setState(1739);
    oC_Variable();
    setState(1741);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    _errHandler->sync(this);

<<<<<<< HEAD
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 275, _ctx)) {
    case 1: {
      setState(1733);
>>>>>>> 97f7ef93f (update parser for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1684);
        match(CypherParser::SP);
      }
      setState(1687);
      match(CypherParser::T__10);
      setState(1689);
=======
        setState(1732);
        match(CypherParser::SP);
      }
      setState(1735);
      match(CypherParser::T__10);
      setState(1737);
>>>>>>> 97f7ef93f (update parser for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1688);
        match(CypherParser::SP);
      }
      setState(1691);
=======
        setState(1736);
        match(CypherParser::SP);
      }
      setState(1739);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1740);
      match(CypherParser::SP);
    }
    setState(1743);
    match(CypherParser::T__2);
    setState(1745);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1744);
      match(CypherParser::SP);
    }
=======
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    setState(1747);
    match(CypherParser::T__1);
    setState(1749);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1748);
      match(CypherParser::SP);
    }
    setState(1751);
    oC_Variable();
    setState(1753);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1752);
      match(CypherParser::SP);
    }
    setState(1755);
    match(CypherParser::T__2);
    setState(1757);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1756);
      match(CypherParser::SP);
    }
    setState(1759);
    oC_Variable();
    setState(1768);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx)) {
    case 1: {
      setState(1761);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1760);
        match(CypherParser::SP);
      }
      setState(1763);
      match(CypherParser::T__10);
      setState(1765);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1764);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1754);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1755);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1767);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Where();
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1713);
=======
    setState(1761);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1776);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1777);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1789);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__10 || _la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1695);
=======
      setState(1743);
=======
      setState(1758);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1759);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1758);
        match(CypherParser::SP);
      }
      setState(1761);
      match(CypherParser::T__10);
      setState(1763);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1762);
        match(CypherParser::SP);
      }
      setState(1765);
      kU_IntermediateRelProjectionItems();
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1751);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1766);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1767);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1766);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1697);
      match(CypherParser::T__10);
      setState(1699);
=======
      setState(1753);
      match(CypherParser::T__2);
      setState(1755);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1768);
      match(CypherParser::T__2);
      setState(1770);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1769);
      match(CypherParser::T__2);
=======
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      setState(1771);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1770);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1701);
      kU_IntermediateRelProjectionItems();
      setState(1703);
=======
      setState(1757);
      kU_IntermediateNodeProjectionItems();
      setState(1759);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1772);
      kU_IntermediateNodeProjectionItems();
      setState(1774);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1773);
      match(CypherParser::T__10);
      setState(1775);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1774);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
      setState(1705);
      match(CypherParser::T__2);
      setState(1707);
=======
      setState(1777);
      kU_IntermediateRelProjectionItems();
      setState(1779);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1778);
        match(CypherParser::SP);
      }
      setState(1781);
      match(CypherParser::T__2);
      setState(1783);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1706);
        match(CypherParser::SP);
      }
      setState(1709);
      kU_IntermediateNodeProjectionItems();
      setState(1711);
=======
        setState(1782);
        match(CypherParser::SP);
      }
      setState(1785);
      kU_IntermediateNodeProjectionItems();
      setState(1787);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
        setState(1710);
        match(CypherParser::SP);
      }
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1715);
=======
    setState(1763);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1778);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1779);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1786);
        match(CypherParser::SP);
      }
    }
    setState(1791);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateNodeProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateNodeProjectionItemsContext::KU_IntermediateNodeProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateNodeProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateNodeProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateNodeProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateNodeProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateNodeProjectionItems;
}


CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::kU_IntermediateNodeProjectionItems() {
  KU_IntermediateNodeProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateNodeProjectionItemsContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 180, CypherParser::RuleKU_IntermediateNodeProjectionItems);
=======
  enterRule(_localctx, 190, CypherParser::RuleKU_IntermediateNodeProjectionItems);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 192, CypherParser::RuleKU_IntermediateNodeProjectionItems);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1717);
    match(CypherParser::T__8);
    setState(1719);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx)) {
    case 1: {
      setState(1718);
=======
    setState(1765);
=======
    setState(1780);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1781);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1793);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__8);
    setState(1795);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 288, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1766);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1781);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1782);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1794);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1722);
=======
    setState(1770);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1785);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1786);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1798);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
<<<<<<< HEAD
      ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & -4681139966783258607) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 9741) != 0)) {
      setState(1721);
      oC_ProjectionItems();
    }
    setState(1725);
=======
      ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 77) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 77)) & -4681139966783258607) != 0) || ((((_la - 143) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 143)) & 9741) != 0)) {
=======
      ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 2666133178426606593) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 133)) & 9974975) != 0)) {
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> aed81ff20 (create sequence complete)
      setState(1784);
      oC_ProjectionItems();
    }
<<<<<<< HEAD
    setState(1773);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1788);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1785);
      oC_ProjectionItems();
    }
    setState(1789);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1797);
      oC_ProjectionItems();
    }
    setState(1801);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1724);
      match(CypherParser::SP);
    }
    setState(1727);
=======
      setState(1772);
      match(CypherParser::SP);
    }
    setState(1775);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1787);
      match(CypherParser::SP);
    }
    setState(1790);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1788);
      match(CypherParser::SP);
    }
    setState(1791);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1800);
      match(CypherParser::SP);
    }
    setState(1803);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateRelProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateRelProjectionItemsContext::KU_IntermediateRelProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateRelProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateRelProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateRelProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateRelProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateRelProjectionItems;
}


CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::kU_IntermediateRelProjectionItems() {
  KU_IntermediateRelProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateRelProjectionItemsContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 182, CypherParser::RuleKU_IntermediateRelProjectionItems);
=======
  enterRule(_localctx, 192, CypherParser::RuleKU_IntermediateRelProjectionItems);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 194, CypherParser::RuleKU_IntermediateRelProjectionItems);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1729);
    match(CypherParser::T__8);
    setState(1731);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx)) {
    case 1: {
      setState(1730);
=======
    setState(1777);
=======
    setState(1792);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1793);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1805);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__8);
    setState(1807);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1778);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1793);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1794);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1806);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1734);
=======
    setState(1782);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1797);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1798);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1810);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
<<<<<<< HEAD
      ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & -4681139966783258607) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 9741) != 0)) {
      setState(1733);
      oC_ProjectionItems();
    }
    setState(1737);
=======
      ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 77) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 77)) & -4681139966783258607) != 0) || ((((_la - 143) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 143)) & 9741) != 0)) {
=======
      ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 2666133178426606593) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 133)) & 9974975) != 0)) {
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> aed81ff20 (create sequence complete)
      setState(1796);
      oC_ProjectionItems();
    }
<<<<<<< HEAD
    setState(1785);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1800);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1797);
      oC_ProjectionItems();
    }
    setState(1801);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1809);
      oC_ProjectionItems();
    }
    setState(1813);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1736);
      match(CypherParser::SP);
    }
    setState(1739);
=======
      setState(1784);
      match(CypherParser::SP);
    }
    setState(1787);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1799);
      match(CypherParser::SP);
    }
    setState(1802);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1800);
      match(CypherParser::SP);
    }
    setState(1803);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1812);
      match(CypherParser::SP);
    }
    setState(1815);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LowerBoundContext ------------------------------------------------------------------

CypherParser::OC_LowerBoundContext::OC_LowerBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LowerBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_LowerBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_LowerBound;
}


CypherParser::OC_LowerBoundContext* CypherParser::oC_LowerBound() {
  OC_LowerBoundContext *_localctx = _tracker.createInstance<OC_LowerBoundContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 184, CypherParser::RuleOC_LowerBound);
=======
  enterRule(_localctx, 194, CypherParser::RuleOC_LowerBound);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 196, CypherParser::RuleOC_LowerBound);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1741);
=======
    setState(1789);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1804);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1805);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1817);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpperBoundContext ------------------------------------------------------------------

CypherParser::OC_UpperBoundContext::OC_UpperBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UpperBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_UpperBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpperBound;
}


CypherParser::OC_UpperBoundContext* CypherParser::oC_UpperBound() {
  OC_UpperBoundContext *_localctx = _tracker.createInstance<OC_UpperBoundContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 186, CypherParser::RuleOC_UpperBound);
=======
  enterRule(_localctx, 196, CypherParser::RuleOC_UpperBound);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 198, CypherParser::RuleOC_UpperBound);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1743);
=======
    setState(1791);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1806);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1807);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1819);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

CypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_LabelNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_LabelName;
}


CypherParser::OC_LabelNameContext* CypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 188, CypherParser::RuleOC_LabelName);
=======
  enterRule(_localctx, 198, CypherParser::RuleOC_LabelName);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 200, CypherParser::RuleOC_LabelName);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1745);
=======
    setState(1793);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1808);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1809);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1821);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

CypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelTypeName;
}


CypherParser::OC_RelTypeNameContext* CypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 190, CypherParser::RuleOC_RelTypeName);
=======
  enterRule(_localctx, 200, CypherParser::RuleOC_RelTypeName);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 202, CypherParser::RuleOC_RelTypeName);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1747);
=======
    setState(1795);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1810);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1811);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1823);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

CypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_OrExpressionContext* CypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<CypherParser::OC_OrExpressionContext>(0);
}


size_t CypherParser::OC_ExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Expression;
}


CypherParser::OC_ExpressionContext* CypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 192, CypherParser::RuleOC_Expression);
=======
  enterRule(_localctx, 202, CypherParser::RuleOC_Expression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 204, CypherParser::RuleOC_Expression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1749);
=======
    setState(1797);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1812);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1813);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1825);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

CypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_XorExpressionContext *> CypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<CypherParser::OC_XorExpressionContext>();
}

CypherParser::OC_XorExpressionContext* CypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::OR() {
  return getTokens(CypherParser::OR);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(CypherParser::OR, i);
}


size_t CypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_OrExpression;
}


CypherParser::OC_OrExpressionContext* CypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 194, CypherParser::RuleOC_OrExpression);
=======
  enterRule(_localctx, 204, CypherParser::RuleOC_OrExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 206, CypherParser::RuleOC_OrExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1751);
    oC_XorExpression();
    setState(1758);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 284, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1752);
        match(CypherParser::SP);
        setState(1753);
        match(CypherParser::OR);
        setState(1754);
        match(CypherParser::SP);
        setState(1755);
        oC_XorExpression(); 
      }
      setState(1760);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 284, _ctx);
=======
    setState(1799);
=======
    setState(1814);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1815);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1827);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_XorExpression();
    setState(1834);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 294, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1828);
        match(CypherParser::SP);
        setState(1829);
        match(CypherParser::OR);
        setState(1830);
        match(CypherParser::SP);
        setState(1831);
        oC_XorExpression(); 
      }
      setState(1836);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 288, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 290, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 294, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

CypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AndExpressionContext *> CypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<CypherParser::OC_AndExpressionContext>();
}

CypherParser::OC_AndExpressionContext* CypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(CypherParser::XOR);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(CypherParser::XOR, i);
}


size_t CypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_XorExpression;
}


CypherParser::OC_XorExpressionContext* CypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 196, CypherParser::RuleOC_XorExpression);
=======
  enterRule(_localctx, 206, CypherParser::RuleOC_XorExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 208, CypherParser::RuleOC_XorExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1761);
    oC_AndExpression();
    setState(1768);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 285, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1762);
        match(CypherParser::SP);
        setState(1763);
        match(CypherParser::XOR);
        setState(1764);
        match(CypherParser::SP);
        setState(1765);
        oC_AndExpression(); 
      }
      setState(1770);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 285, _ctx);
=======
    setState(1809);
=======
    setState(1824);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1825);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1837);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_AndExpression();
    setState(1844);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1838);
        match(CypherParser::SP);
        setState(1839);
        match(CypherParser::XOR);
        setState(1840);
        match(CypherParser::SP);
        setState(1841);
        oC_AndExpression(); 
      }
      setState(1846);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 289, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

CypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NotExpressionContext *> CypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<CypherParser::OC_NotExpressionContext>();
}

CypherParser::OC_NotExpressionContext* CypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<CypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::AND() {
  return getTokens(CypherParser::AND);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(CypherParser::AND, i);
}


size_t CypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AndExpression;
}


CypherParser::OC_AndExpressionContext* CypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 198, CypherParser::RuleOC_AndExpression);
=======
  enterRule(_localctx, 208, CypherParser::RuleOC_AndExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 210, CypherParser::RuleOC_AndExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1771);
    oC_NotExpression();
    setState(1778);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 286, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1772);
        match(CypherParser::SP);
        setState(1773);
        match(CypherParser::AND);
        setState(1774);
        match(CypherParser::SP);
        setState(1775);
        oC_NotExpression(); 
      }
      setState(1780);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 286, _ctx);
=======
    setState(1819);
=======
    setState(1834);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1835);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1847);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_NotExpression();
    setState(1854);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1848);
        match(CypherParser::SP);
        setState(1849);
        match(CypherParser::AND);
        setState(1850);
        match(CypherParser::SP);
        setState(1851);
        oC_NotExpression(); 
      }
      setState(1856);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 290, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

CypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ComparisonExpressionContext* CypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<CypherParser::OC_ComparisonExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::NOT() {
  return getTokens(CypherParser::NOT);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::NOT(size_t i) {
  return getToken(CypherParser::NOT, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NotExpression;
}


CypherParser::OC_NotExpressionContext* CypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 200, CypherParser::RuleOC_NotExpression);
=======
  enterRule(_localctx, 210, CypherParser::RuleOC_NotExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 212, CypherParser::RuleOC_NotExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1787);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::NOT) {
      setState(1781);
      match(CypherParser::NOT);
      setState(1783);
=======
    setState(1835);
=======
    setState(1850);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1851);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1863);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::NOT) {
      setState(1857);
      match(CypherParser::NOT);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1831);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1846);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1847);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(1859);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1782);
        match(CypherParser::SP);
      }
      setState(1789);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1790);
=======
        setState(1830);
=======
        setState(1845);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1846);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1858);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::SP);
      }
      setState(1865);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1838);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1853);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1854);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1866);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

CypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseOrOperatorExpressionContext *> CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseOrOperatorExpressionContext>();
}

CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseOrOperatorExpressionContext>(i);
}

std::vector<CypherParser::KU_ComparisonOperatorContext *> CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator() {
  return getRuleContexts<CypherParser::KU_ComparisonOperatorContext>();
}

CypherParser::KU_ComparisonOperatorContext* CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator(size_t i) {
  return getRuleContext<CypherParser::KU_ComparisonOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::INVALID_NOT_EQUAL() {
  return getToken(CypherParser::INVALID_NOT_EQUAL, 0);
}


size_t CypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ComparisonExpression;
}


CypherParser::OC_ComparisonExpressionContext* CypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 202, CypherParser::RuleOC_ComparisonExpression);
=======
  enterRule(_localctx, 212, CypherParser::RuleOC_ComparisonExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 214, CypherParser::RuleOC_ComparisonExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1840);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 299, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1792);
      kU_BitwiseOrOperatorExpression();
      setState(1802);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx)) {
      case 1: {
        setState(1794);
=======
    setState(1888);
=======
    setState(1903);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1904);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1916);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 309, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1868);
      kU_BitwiseOrOperatorExpression();
      setState(1878);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx)) {
      case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1842);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1857);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1858);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1870);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1793);
          match(CypherParser::SP);
        }
        setState(1796);
        kU_ComparisonOperator();
        setState(1798);
=======
          setState(1841);
=======
          setState(1856);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1857);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1869);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1872);
        kU_ComparisonOperator();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1846);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1861);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1862);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1874);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1797);
          match(CypherParser::SP);
        }
        setState(1800);
=======
          setState(1845);
          match(CypherParser::SP);
        }
        setState(1848);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
          setState(1860);
          match(CypherParser::SP);
        }
        setState(1863);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1861);
          match(CypherParser::SP);
        }
        setState(1864);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1873);
          match(CypherParser::SP);
        }
        setState(1876);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        kU_BitwiseOrOperatorExpression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1804);
=======
      setState(1852);
=======
      setState(1867);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1868);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      kU_BitwiseOrOperatorExpression();

      setState(1870);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1869);
        match(CypherParser::SP);
      }
      setState(1872);
      antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken = match(CypherParser::INVALID_NOT_EQUAL);
      setState(1874);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1873);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1860);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1875);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1876);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      kU_BitwiseOrOperatorExpression();

<<<<<<< HEAD
      setState(1806);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1805);
        match(CypherParser::SP);
      }
      setState(1808);
      antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken = match(CypherParser::INVALID_NOT_EQUAL);
      setState(1810);
=======
    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1880);
      kU_BitwiseOrOperatorExpression();
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1866);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1881);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
=======
      setState(1880);
      kU_BitwiseOrOperatorExpression();

>>>>>>> 6a075a2f7 (add basic tests for sequence)
      setState(1882);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1881);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1812);
      kU_BitwiseOrOperatorExpression();
       notifyInvalidNotEqualOperator(antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken); 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1816);
      kU_BitwiseOrOperatorExpression();
      setState(1818);
=======
      setState(1868);
      kU_ComparisonOperator();
      setState(1870);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1883);
      kU_ComparisonOperator();
      setState(1885);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1884);
      antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken = match(CypherParser::INVALID_NOT_EQUAL);
      setState(1886);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1817);
        match(CypherParser::SP);
      }
      setState(1820);
      kU_ComparisonOperator();
      setState(1822);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1821);
        match(CypherParser::SP);
      }
      setState(1824);
      kU_BitwiseOrOperatorExpression();
      setState(1834); 
=======
        setState(1869);
=======
        setState(1884);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1885);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
        match(CypherParser::SP);
      }
      setState(1888);
      kU_BitwiseOrOperatorExpression();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1882); 
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(1897); 
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(1898); 
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
       notifyInvalidNotEqualOperator(antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken); 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1892);
      kU_BitwiseOrOperatorExpression();
      setState(1894);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1893);
        match(CypherParser::SP);
      }
      setState(1896);
      kU_ComparisonOperator();
      setState(1898);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1897);
        match(CypherParser::SP);
      }
      setState(1900);
      kU_BitwiseOrOperatorExpression();
      setState(1910); 
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                setState(1826);
=======
                setState(1874);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
                setState(1889);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
                setState(1890);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
                setState(1902);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                  setState(1825);
                  match(CypherParser::SP);
                }
                setState(1828);
                kU_ComparisonOperator();
                setState(1830);
=======
                  setState(1873);
=======
                  setState(1888);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
                  setState(1889);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
                  setState(1901);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
                  match(CypherParser::SP);
                }
                setState(1904);
                kU_ComparisonOperator();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                setState(1878);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
                setState(1893);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
                setState(1894);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
                setState(1906);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                  setState(1829);
                  match(CypherParser::SP);
                }
                setState(1832);
=======
                  setState(1877);
                  match(CypherParser::SP);
                }
                setState(1880);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
                  setState(1892);
                  match(CypherParser::SP);
                }
                setState(1895);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
                  setState(1893);
                  match(CypherParser::SP);
                }
                setState(1896);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
                  setState(1905);
                  match(CypherParser::SP);
                }
                setState(1908);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
                kU_BitwiseOrOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1836); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx);
=======
        setState(1884); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1899); 
=======
        setState(1900); 
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1912); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 308, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
       notifyNonBinaryComparison(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ComparisonOperatorContext ------------------------------------------------------------------

CypherParser::KU_ComparisonOperatorContext::KU_ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_ComparisonOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_ComparisonOperator;
}


CypherParser::KU_ComparisonOperatorContext* CypherParser::kU_ComparisonOperator() {
  KU_ComparisonOperatorContext *_localctx = _tracker.createInstance<KU_ComparisonOperatorContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 204, CypherParser::RuleKU_ComparisonOperator);
=======
  enterRule(_localctx, 214, CypherParser::RuleKU_ComparisonOperator);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 216, CypherParser::RuleKU_ComparisonOperator);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1842);
=======
    setState(1890);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1905);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1906);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1918);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 254016) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseOrOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseOrOperatorExpressionContext::KU_BitwiseOrOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseAndOperatorExpressionContext *> CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseAndOperatorExpressionContext>();
}

CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseAndOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseOrOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseOrOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseOrOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseOrOperatorExpression;
}


CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::kU_BitwiseOrOperatorExpression() {
  KU_BitwiseOrOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseOrOperatorExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 206, CypherParser::RuleKU_BitwiseOrOperatorExpression);
=======
  enterRule(_localctx, 216, CypherParser::RuleKU_BitwiseOrOperatorExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 218, CypherParser::RuleKU_BitwiseOrOperatorExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1844);
    kU_BitwiseAndOperatorExpression();
    setState(1855);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1846);
=======
    setState(1892);
=======
    setState(1907);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1908);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1920);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    kU_BitwiseAndOperatorExpression();
    setState(1931);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 312, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1894);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1909);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1910);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1922);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1845);
          match(CypherParser::SP);
        }
        setState(1848);
        match(CypherParser::T__10);
        setState(1850);
=======
          setState(1893);
=======
          setState(1908);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1909);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1921);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1924);
        match(CypherParser::T__10);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1898);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1913);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1914);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1926);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1849);
          match(CypherParser::SP);
        }
        setState(1852);
        kU_BitwiseAndOperatorExpression(); 
      }
      setState(1857);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx);
=======
          setState(1897);
=======
          setState(1912);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1913);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1925);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1928);
        kU_BitwiseAndOperatorExpression(); 
      }
      setState(1933);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 308, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 312, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseAndOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseAndOperatorExpressionContext::KU_BitwiseAndOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitShiftOperatorExpressionContext *> CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorExpressionContext>();
}

CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseAndOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseAndOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseAndOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseAndOperatorExpression;
}


CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::kU_BitwiseAndOperatorExpression() {
  KU_BitwiseAndOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseAndOperatorExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 208, CypherParser::RuleKU_BitwiseAndOperatorExpression);
=======
  enterRule(_localctx, 218, CypherParser::RuleKU_BitwiseAndOperatorExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 220, CypherParser::RuleKU_BitwiseAndOperatorExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1858);
    kU_BitShiftOperatorExpression();
    setState(1869);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1860);
=======
    setState(1906);
=======
    setState(1921);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1922);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1934);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    kU_BitShiftOperatorExpression();
    setState(1945);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1908);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1923);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1924);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1936);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1859);
          match(CypherParser::SP);
        }
        setState(1862);
        match(CypherParser::T__17);
        setState(1864);
=======
          setState(1907);
=======
          setState(1922);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1923);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1935);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1938);
        match(CypherParser::T__17);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1912);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1927);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1928);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1940);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1863);
          match(CypherParser::SP);
        }
        setState(1866);
        kU_BitShiftOperatorExpression(); 
      }
      setState(1871);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx);
=======
          setState(1911);
=======
          setState(1926);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1927);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1939);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1942);
        kU_BitShiftOperatorExpression(); 
      }
      setState(1947);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 309, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorExpressionContext::KU_BitShiftOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AddOrSubtractExpressionContext *> CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContexts<CypherParser::OC_AddOrSubtractExpressionContext>();
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AddOrSubtractExpressionContext>(i);
}

std::vector<CypherParser::KU_BitShiftOperatorContext *> CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorContext>();
}

CypherParser::KU_BitShiftOperatorContext* CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitShiftOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitShiftOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitShiftOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperatorExpression;
}


CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::kU_BitShiftOperatorExpression() {
  KU_BitShiftOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 210, CypherParser::RuleKU_BitShiftOperatorExpression);
=======
  enterRule(_localctx, 220, CypherParser::RuleKU_BitShiftOperatorExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 222, CypherParser::RuleKU_BitShiftOperatorExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1872);
    oC_AddOrSubtractExpression();
    setState(1884);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 308, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1874);
=======
    setState(1920);
=======
    setState(1935);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1936);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    oC_AddOrSubtractExpression();
=======
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    setState(1948);
    oC_AddOrSubtractExpression();
    setState(1960);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1922);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1937);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1938);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1950);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1873);
          match(CypherParser::SP);
        }
        setState(1876);
        kU_BitShiftOperator();
        setState(1878);
=======
          setState(1921);
=======
          setState(1936);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1937);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1949);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1952);
        kU_BitShiftOperator();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1926);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1941);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1942);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1954);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1877);
          match(CypherParser::SP);
        }
        setState(1880);
        oC_AddOrSubtractExpression(); 
      }
      setState(1886);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 308, _ctx);
=======
          setState(1925);
=======
          setState(1940);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1941);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1953);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1956);
        oC_AddOrSubtractExpression(); 
      }
      setState(1962);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 312, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorContext::KU_BitShiftOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_BitShiftOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperator;
}


CypherParser::KU_BitShiftOperatorContext* CypherParser::kU_BitShiftOperator() {
  KU_BitShiftOperatorContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 212, CypherParser::RuleKU_BitShiftOperator);
=======
  enterRule(_localctx, 222, CypherParser::RuleKU_BitShiftOperator);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 224, CypherParser::RuleKU_BitShiftOperator);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1887);
=======
    setState(1935);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1950);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1951);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1963);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__18

    || _la == CypherParser::T__19)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

CypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_MultiplyDivideModuloExpressionContext *> CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<CypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<CypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<CypherParser::KU_AddOrSubtractOperatorContext *> CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator() {
  return getRuleContexts<CypherParser::KU_AddOrSubtractOperatorContext>();
}

CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator(size_t i) {
  return getRuleContext<CypherParser::KU_AddOrSubtractOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AddOrSubtractExpression;
}


CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 214, CypherParser::RuleOC_AddOrSubtractExpression);
=======
  enterRule(_localctx, 224, CypherParser::RuleOC_AddOrSubtractExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 226, CypherParser::RuleOC_AddOrSubtractExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1889);
    oC_MultiplyDivideModuloExpression();
    setState(1901);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1891);
=======
    setState(1937);
=======
    setState(1952);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1953);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    oC_MultiplyDivideModuloExpression();
=======
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    setState(1965);
    oC_MultiplyDivideModuloExpression();
    setState(1977);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1939);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1954);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1955);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1967);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1890);
          match(CypherParser::SP);
        }
        setState(1893);
        kU_AddOrSubtractOperator();
        setState(1895);
=======
          setState(1938);
=======
          setState(1953);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1954);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1966);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1969);
        kU_AddOrSubtractOperator();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1943);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1958);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1959);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1971);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1894);
          match(CypherParser::SP);
        }
        setState(1897);
        oC_MultiplyDivideModuloExpression(); 
      }
      setState(1903);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx);
=======
          setState(1942);
=======
          setState(1957);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1958);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1970);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1973);
        oC_MultiplyDivideModuloExpression(); 
      }
      setState(1979);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddOrSubtractOperatorContext ------------------------------------------------------------------

CypherParser::KU_AddOrSubtractOperatorContext::KU_AddOrSubtractOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddOrSubtractOperatorContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_AddOrSubtractOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddOrSubtractOperator;
}


CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::kU_AddOrSubtractOperator() {
  KU_AddOrSubtractOperatorContext *_localctx = _tracker.createInstance<KU_AddOrSubtractOperatorContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 216, CypherParser::RuleKU_AddOrSubtractOperator);
=======
  enterRule(_localctx, 226, CypherParser::RuleKU_AddOrSubtractOperator);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 228, CypherParser::RuleKU_AddOrSubtractOperator);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1904);
=======
    setState(1952);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1967);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1968);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1980);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__20 || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

CypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PowerOfExpressionContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<CypherParser::OC_PowerOfExpressionContext>();
}

CypherParser::OC_PowerOfExpressionContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<CypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<CypherParser::KU_MultiplyDivideModuloOperatorContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator() {
  return getRuleContexts<CypherParser::KU_MultiplyDivideModuloOperatorContext>();
}

CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator(size_t i) {
  return getRuleContext<CypherParser::KU_MultiplyDivideModuloOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiplyDivideModuloExpression;
}


CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 218, CypherParser::RuleOC_MultiplyDivideModuloExpression);
=======
  enterRule(_localctx, 228, CypherParser::RuleOC_MultiplyDivideModuloExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 230, CypherParser::RuleOC_MultiplyDivideModuloExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1906);
    oC_PowerOfExpression();
    setState(1918);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1908);
=======
    setState(1954);
=======
    setState(1969);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1970);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    oC_PowerOfExpression();
=======
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    setState(1982);
    oC_PowerOfExpression();
    setState(1994);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1956);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1971);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1972);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1984);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1907);
          match(CypherParser::SP);
        }
        setState(1910);
        kU_MultiplyDivideModuloOperator();
        setState(1912);
=======
          setState(1955);
=======
          setState(1970);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1971);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1983);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1986);
        kU_MultiplyDivideModuloOperator();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1960);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1975);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1976);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(1988);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1911);
          match(CypherParser::SP);
        }
        setState(1914);
        oC_PowerOfExpression(); 
      }
      setState(1920);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx);
=======
          setState(1959);
=======
          setState(1974);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1975);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(1987);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(1990);
        oC_PowerOfExpression(); 
      }
      setState(1996);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MultiplyDivideModuloOperatorContext ------------------------------------------------------------------

CypherParser::KU_MultiplyDivideModuloOperatorContext::KU_MultiplyDivideModuloOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MultiplyDivideModuloOperatorContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}


size_t CypherParser::KU_MultiplyDivideModuloOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_MultiplyDivideModuloOperator;
}


CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::kU_MultiplyDivideModuloOperator() {
  KU_MultiplyDivideModuloOperatorContext *_localctx = _tracker.createInstance<KU_MultiplyDivideModuloOperatorContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 220, CypherParser::RuleKU_MultiplyDivideModuloOperator);
=======
  enterRule(_localctx, 230, CypherParser::RuleKU_MultiplyDivideModuloOperator);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 232, CypherParser::RuleKU_MultiplyDivideModuloOperator);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1921);
=======
    setState(1969);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(1984);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1985);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1997);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__21

    || _la == CypherParser::T__22 || _la == CypherParser::STAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

CypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext *> CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression() {
  return getRuleContexts<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>();
}

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression(size_t i) {
  return getRuleContext<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PowerOfExpression;
}


CypherParser::OC_PowerOfExpressionContext* CypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 222, CypherParser::RuleOC_PowerOfExpression);
=======
  enterRule(_localctx, 232, CypherParser::RuleOC_PowerOfExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 234, CypherParser::RuleOC_PowerOfExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1923);
    oC_UnaryAddSubtractOrFactorialExpression();
    setState(1934);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1925);
=======
    setState(1971);
=======
    setState(1986);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(1987);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(1999);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_UnaryAddSubtractOrFactorialExpression();
    setState(2010);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1973);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1988);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1989);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2001);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1924);
          match(CypherParser::SP);
        }
        setState(1927);
        match(CypherParser::T__23);
        setState(1929);
=======
          setState(1972);
=======
          setState(1987);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1988);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(2000);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(2003);
        match(CypherParser::T__23);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1977);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(1992);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(1993);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2005);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(1928);
          match(CypherParser::SP);
        }
        setState(1931);
        oC_UnaryAddSubtractOrFactorialExpression(); 
      }
      setState(1936);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx);
=======
          setState(1976);
=======
          setState(1991);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(1992);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(2004);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(2007);
        oC_UnaryAddSubtractOrFactorialExpression(); 
      }
      setState(2012);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddSubtractOrFactorialExpressionContext ------------------------------------------------------------------

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::OC_UnaryAddSubtractOrFactorialExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::oC_StringListNullOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringListNullOperatorExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS() {
  return getTokens(CypherParser::MINUS);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS(size_t i) {
  return getToken(CypherParser::MINUS, i);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::FACTORIAL() {
  return getToken(CypherParser::FACTORIAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression;
}


CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::oC_UnaryAddSubtractOrFactorialExpression() {
  OC_UnaryAddSubtractOrFactorialExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddSubtractOrFactorialExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 224, CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression);
=======
  enterRule(_localctx, 234, CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 236, CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1943);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::MINUS) {
      setState(1937);
      match(CypherParser::MINUS);
      setState(1939);
=======
    setState(1991);
=======
    setState(2006);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2007);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2019);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::MINUS) {
      setState(2013);
      match(CypherParser::MINUS);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1987);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2002);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2003);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2015);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1938);
        match(CypherParser::SP);
      }
      setState(1945);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1946);
    oC_StringListNullOperatorExpression();
    setState(1951);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx)) {
    case 1: {
      setState(1948);
=======
        setState(1986);
=======
        setState(2001);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2002);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2014);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::SP);
      }
      setState(2021);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2022);
    oC_StringListNullOperatorExpression();
    setState(2027);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1996);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2011);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2012);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2024);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1947);
        match(CypherParser::SP);
      }
      setState(1950);
=======
        setState(1995);
        match(CypherParser::SP);
      }
      setState(1998);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2010);
        match(CypherParser::SP);
      }
      setState(2013);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2011);
        match(CypherParser::SP);
      }
      setState(2014);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2023);
        match(CypherParser::SP);
      }
      setState(2026);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::FACTORIAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringListNullOperatorExpressionContext::OC_StringListNullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_StringOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringOperatorExpressionContext>(0);
}

CypherParser::OC_NullOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression() {
  return getRuleContext<CypherParser::OC_NullOperatorExpressionContext>(0);
}

std::vector<CypherParser::OC_ListOperatorExpressionContext *> CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<CypherParser::OC_ListOperatorExpressionContext>();
}

CypherParser::OC_ListOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_ListOperatorExpressionContext>(i);
}


size_t CypherParser::OC_StringListNullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringListNullOperatorExpression;
}


CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::oC_StringListNullOperatorExpression() {
  OC_StringListNullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullOperatorExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 226, CypherParser::RuleOC_StringListNullOperatorExpression);
=======
  enterRule(_localctx, 236, CypherParser::RuleOC_StringListNullOperatorExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 238, CypherParser::RuleOC_StringListNullOperatorExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1953);
    oC_PropertyOrLabelsExpression();
    setState(1961);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx)) {
    case 1: {
      setState(1954);
=======
    setState(2001);
=======
    setState(2016);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2017);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2029);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_PropertyOrLabelsExpression();
    setState(2037);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2002);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2017);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2018);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2030);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_StringOperatorExpression();
      break;
    }

    case 2: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1956); 
=======
      setState(2004); 
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2019); 
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2020); 
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2032); 
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                setState(1955);
=======
                setState(2003);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
                setState(2018);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
                setState(2019);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
                setState(2031);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
                oC_ListOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1958); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 322, _ctx);
=======
        setState(2006); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2021); 
=======
        setState(2022); 
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2034); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 332, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 3: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1960);
=======
      setState(2008);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2023);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2024);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2036);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_NullOperatorExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::IN() {
  return getToken(CypherParser::IN, 0);
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_ListOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}


size_t CypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListOperatorExpression;
}


CypherParser::OC_ListOperatorExpressionContext* CypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 228, CypherParser::RuleOC_ListOperatorExpression);
=======
  enterRule(_localctx, 238, CypherParser::RuleOC_ListOperatorExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 240, CypherParser::RuleOC_ListOperatorExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1982);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1963);
      match(CypherParser::SP);
      setState(1964);
      match(CypherParser::IN);
      setState(1966);
=======
    setState(2030);
=======
    setState(2045);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2046);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2058);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 337, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2039);
      match(CypherParser::SP);
      setState(2040);
      match(CypherParser::IN);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2014);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2029);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2030);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2042);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(1965);
        match(CypherParser::SP);
      }
      setState(1968);
=======
        setState(2013);
        match(CypherParser::SP);
      }
      setState(2016);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2028);
        match(CypherParser::SP);
      }
      setState(2031);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2029);
        match(CypherParser::SP);
      }
      setState(2032);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2041);
        match(CypherParser::SP);
      }
      setState(2044);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_PropertyOrLabelsExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1969);
      match(CypherParser::T__6);
      setState(1970);
      oC_Expression();
      setState(1971);
=======
      setState(2017);
=======
      setState(2032);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::T__6);
      setState(2033);
      oC_Expression();
<<<<<<< HEAD
      setState(2019);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2034);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2033);
=======
      setState(2045);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::T__6);
      setState(2046);
      oC_Expression();
<<<<<<< HEAD
      setState(2035);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2047);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::T__7);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1973);
      match(CypherParser::T__6);
      setState(1975);
=======
      setState(2021);
      match(CypherParser::T__6);
      setState(2023);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2036);
      match(CypherParser::T__6);
      setState(2038);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2037);
      match(CypherParser::T__6);
      setState(2039);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2049);
      match(CypherParser::T__6);
      setState(2051);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
<<<<<<< HEAD
        ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 70) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 70)) & -4681139968930742255) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 136)) & 9741) != 0)) {
        setState(1974);
        oC_Expression();
      }
      setState(1977);
      match(CypherParser::COLON);
      setState(1979);
=======
        ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 77) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 77)) & -4681139968930742255) != 0) || ((((_la - 143) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 143)) & 9741) != 0)) {
=======
        ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 2666130979403351041) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 133)) & 9974975) != 0)) {
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> aed81ff20 (create sequence complete)
        setState(2037);
=======
        setState(2038);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2050);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_Expression();
      }
      setState(2053);
      match(CypherParser::COLON);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2027);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2042);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2043);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2055);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
<<<<<<< HEAD
        ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 70) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 70)) & -4681139968930742255) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 136)) & 9741) != 0)) {
        setState(1978);
        oC_Expression();
      }
      setState(1981);
=======
        ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 77) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 77)) & -4681139968930742255) != 0) || ((((_la - 143) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 143)) & 9741) != 0)) {
=======
        ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 2666130979403351041) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 133)) & 9974975) != 0)) {
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> aed81ff20 (create sequence complete)
        setState(2041);
        oC_Expression();
      }
<<<<<<< HEAD
      setState(2029);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2044);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2042);
        oC_Expression();
      }
      setState(2045);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2054);
        oC_Expression();
      }
      setState(2057);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::T__7);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringOperatorExpressionContext::OC_StringOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_RegularExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_RegularExpression() {
  return getRuleContext<CypherParser::OC_RegularExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_StringOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::STARTS() {
  return getToken(CypherParser::STARTS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::ENDS() {
  return getToken(CypherParser::ENDS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}


size_t CypherParser::OC_StringOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringOperatorExpression;
}


CypherParser::OC_StringOperatorExpressionContext* CypherParser::oC_StringOperatorExpression() {
  OC_StringOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringOperatorExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 230, CypherParser::RuleOC_StringOperatorExpression);
=======
  enterRule(_localctx, 240, CypherParser::RuleOC_StringOperatorExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 242, CypherParser::RuleOC_StringOperatorExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1995);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx)) {
    case 1: {
      setState(1984);
=======
    setState(2043);
=======
    setState(2058);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx)) {
    case 1: {
<<<<<<< HEAD
      setState(2032);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2047);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2059);
=======
    setState(2071);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx)) {
    case 1: {
<<<<<<< HEAD
      setState(2048);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2060);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_RegularExpression();
      break;
    }

    case 2: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1985);
      match(CypherParser::SP);
      setState(1986);
      match(CypherParser::STARTS);
      setState(1987);
      match(CypherParser::SP);
      setState(1988);
=======
      setState(2033);
=======
      setState(2048);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::SP);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      setState(2049);
      match(CypherParser::SP);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2036);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2051);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2050);
=======
      setState(2061);
      match(CypherParser::SP);
      setState(2062);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::STARTS);
      setState(2063);
      match(CypherParser::SP);
<<<<<<< HEAD
      setState(2052);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2064);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::WITH);
      break;
    }

    case 3: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1989);
      match(CypherParser::SP);
      setState(1990);
      match(CypherParser::ENDS);
      setState(1991);
      match(CypherParser::SP);
      setState(1992);
=======
      setState(2037);
=======
      setState(2052);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::SP);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      setState(2053);
      match(CypherParser::SP);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2040);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2055);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2054);
=======
      setState(2065);
      match(CypherParser::SP);
      setState(2066);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::ENDS);
      setState(2067);
      match(CypherParser::SP);
<<<<<<< HEAD
      setState(2056);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2068);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::WITH);
      break;
    }

    case 4: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1993);
      match(CypherParser::SP);
      setState(1994);
=======
      setState(2041);
      match(CypherParser::SP);
      setState(2042);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2056);
      match(CypherParser::SP);
      setState(2057);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2057);
      match(CypherParser::SP);
      setState(2058);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2069);
      match(CypherParser::SP);
      setState(2070);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::CONTAINS);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(1998);
=======
    setState(2046);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2061);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2062);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2074);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(1997);
      match(CypherParser::SP);
    }
    setState(2000);
=======
      setState(2045);
      match(CypherParser::SP);
    }
    setState(2048);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2060);
      match(CypherParser::SP);
    }
    setState(2063);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2061);
      match(CypherParser::SP);
    }
    setState(2064);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2073);
      match(CypherParser::SP);
    }
    setState(2076);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_PropertyOrLabelsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularExpressionContext ------------------------------------------------------------------

CypherParser::OC_RegularExpressionContext::OC_RegularExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RegularExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_RegularExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularExpression;
}


CypherParser::OC_RegularExpressionContext* CypherParser::oC_RegularExpression() {
  OC_RegularExpressionContext *_localctx = _tracker.createInstance<OC_RegularExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 232, CypherParser::RuleOC_RegularExpression);
=======
  enterRule(_localctx, 242, CypherParser::RuleOC_RegularExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 244, CypherParser::RuleOC_RegularExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2003);
=======
    setState(2051);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2066);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2067);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2079);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2002);
      match(CypherParser::SP);
    }
    setState(2005);
=======
      setState(2050);
      match(CypherParser::SP);
    }
    setState(2053);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2065);
      match(CypherParser::SP);
    }
    setState(2068);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2066);
      match(CypherParser::SP);
    }
    setState(2069);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2078);
      match(CypherParser::SP);
    }
    setState(2081);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__24);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_NullOperatorExpressionContext::OC_NullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NullOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}


size_t CypherParser::OC_NullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NullOperatorExpression;
}


CypherParser::OC_NullOperatorExpressionContext* CypherParser::oC_NullOperatorExpression() {
  OC_NullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NullOperatorExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 234, CypherParser::RuleOC_NullOperatorExpression);
=======
  enterRule(_localctx, 244, CypherParser::RuleOC_NullOperatorExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 246, CypherParser::RuleOC_NullOperatorExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2017);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2007);
      match(CypherParser::SP);
      setState(2008);
      match(CypherParser::IS);
      setState(2009);
      match(CypherParser::SP);
      setState(2010);
=======
    setState(2065);
=======
    setState(2080);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2081);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2093);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2083);
      match(CypherParser::SP);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2058);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2073);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2072);
=======
      setState(2084);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::IS);
      setState(2085);
      match(CypherParser::SP);
<<<<<<< HEAD
      setState(2074);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2086);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2011);
      match(CypherParser::SP);
      setState(2012);
      match(CypherParser::IS);
      setState(2013);
      match(CypherParser::SP);
      setState(2014);
      match(CypherParser::NOT);
      setState(2015);
      match(CypherParser::SP);
      setState(2016);
=======
      setState(2059);
=======
      setState(2074);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
      match(CypherParser::SP);
=======
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      setState(2075);
=======
      setState(2087);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
      setState(2088);
      match(CypherParser::IS);
      setState(2089);
      match(CypherParser::SP);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2064);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2079);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2078);
=======
      setState(2090);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::NOT);
      setState(2091);
      match(CypherParser::SP);
<<<<<<< HEAD
      setState(2080);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2092);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyOrLabelsExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyOrLabelsExpressionContext::OC_PropertyOrLabelsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

std::vector<CypherParser::OC_PropertyLookupContext *> CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<CypherParser::OC_PropertyLookupContext>();
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PropertyOrLabelsExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PropertyOrLabelsExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PropertyOrLabelsExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyOrLabelsExpression;
}


CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::oC_PropertyOrLabelsExpression() {
  OC_PropertyOrLabelsExpressionContext *_localctx = _tracker.createInstance<OC_PropertyOrLabelsExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 236, CypherParser::RuleOC_PropertyOrLabelsExpression);
=======
  enterRule(_localctx, 246, CypherParser::RuleOC_PropertyOrLabelsExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 248, CypherParser::RuleOC_PropertyOrLabelsExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2019);
    oC_Atom();
    setState(2026);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2021);
=======
    setState(2067);
=======
    setState(2082);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2083);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2095);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_Atom();
    setState(2102);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 343, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2069);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2084);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2085);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2097);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(2020);
          match(CypherParser::SP);
        }
        setState(2023);
        oC_PropertyLookup(); 
      }
      setState(2028);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx);
=======
          setState(2068);
=======
          setState(2083);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(2084);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(2096);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(2099);
        oC_PropertyLookup(); 
      }
      setState(2104);
      _errHandler->sync(this);
<<<<<<< HEAD
<<<<<<< HEAD
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 337, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 343, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

CypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LiteralContext* CypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

CypherParser::OC_ParameterContext* CypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<CypherParser::OC_ParameterContext>(0);
}

CypherParser::OC_CaseExpressionContext* CypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<CypherParser::OC_CaseExpressionContext>(0);
}

CypherParser::OC_ParenthesizedExpressionContext* CypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<CypherParser::OC_ParenthesizedExpressionContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_PathPatternsContext* CypherParser::OC_AtomContext::oC_PathPatterns() {
  return getRuleContext<CypherParser::OC_PathPatternsContext>(0);
}

CypherParser::OC_ExistSubqueryContext* CypherParser::OC_AtomContext::oC_ExistSubquery() {
  return getRuleContext<CypherParser::OC_ExistSubqueryContext>(0);
}

CypherParser::KU_CountSubqueryContext* CypherParser::OC_AtomContext::kU_CountSubquery() {
  return getRuleContext<CypherParser::KU_CountSubqueryContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_AtomContext::getRuleIndex() const {
  return CypherParser::RuleOC_Atom;
}


CypherParser::OC_AtomContext* CypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 238, CypherParser::RuleOC_Atom);
=======
  enterRule(_localctx, 248, CypherParser::RuleOC_Atom);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 250, CypherParser::RuleOC_Atom);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2038);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2029);
=======
    setState(2086);
=======
    setState(2101);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2102);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2114);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2077);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2092);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2093);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2105);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2030);
=======
      setState(2078);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2093);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2094);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2106);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2031);
=======
      setState(2079);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2094);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2095);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2107);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2032);
=======
      setState(2080);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2095);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2096);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2108);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_ParenthesizedExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2033);
=======
      setState(2081);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2096);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2097);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2109);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_FunctionInvocation();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2034);
=======
      setState(2082);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2097);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2098);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2110);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_PathPatterns();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2035);
=======
      setState(2083);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2098);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2099);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2111);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_ExistSubquery();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2036);
=======
      setState(2084);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2099);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2100);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2112);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      kU_CountSubquery();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2037);
=======
      setState(2085);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2100);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2101);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2113);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

CypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NumberLiteralContext* CypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<CypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_BooleanLiteralContext* CypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<CypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

CypherParser::OC_ListLiteralContext* CypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<CypherParser::OC_ListLiteralContext>(0);
}

CypherParser::KU_StructLiteralContext* CypherParser::OC_LiteralContext::kU_StructLiteral() {
  return getRuleContext<CypherParser::KU_StructLiteralContext>(0);
}


size_t CypherParser::OC_LiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_Literal;
}


CypherParser::OC_LiteralContext* CypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 240, CypherParser::RuleOC_Literal);
=======
  enterRule(_localctx, 250, CypherParser::RuleOC_Literal);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 252, CypherParser::RuleOC_Literal);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2046);
=======
    setState(2094);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2109);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2110);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2122);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::DecimalInteger:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2040);
=======
        setState(2088);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2103);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2104);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2116);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_NumberLiteral();
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2041);
=======
        setState(2089);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2104);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2105);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2117);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::TRUE:
      case CypherParser::FALSE: {
        enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2042);
=======
        setState(2090);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2105);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2106);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2118);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_BooleanLiteral();
        break;
      }

      case CypherParser::NULL_: {
        enterOuterAlt(_localctx, 4);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2043);
=======
        setState(2091);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2106);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2107);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2119);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::NULL_);
        break;
      }

      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 5);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2044);
=======
        setState(2092);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2107);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2108);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2120);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_ListLiteral();
        break;
      }

      case CypherParser::T__8: {
        enterOuterAlt(_localctx, 6);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2045);
=======
        setState(2093);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2108);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2109);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2121);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        kU_StructLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

CypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::TRUE() {
  return getToken(CypherParser::TRUE, 0);
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::FALSE() {
  return getToken(CypherParser::FALSE, 0);
}


size_t CypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_BooleanLiteral;
}


CypherParser::OC_BooleanLiteralContext* CypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 242, CypherParser::RuleOC_BooleanLiteral);
=======
  enterRule(_localctx, 252, CypherParser::RuleOC_BooleanLiteral);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 254, CypherParser::RuleOC_BooleanLiteral);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2048);
=======
    setState(2096);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2111);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2112);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2124);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _la = _input->LA(1);
    if (!(_la == CypherParser::TRUE

    || _la == CypherParser::FALSE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

CypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<CypherParser::KU_ListEntryContext *> CypherParser::OC_ListLiteralContext::kU_ListEntry() {
  return getRuleContexts<CypherParser::KU_ListEntryContext>();
}

CypherParser::KU_ListEntryContext* CypherParser::OC_ListLiteralContext::kU_ListEntry(size_t i) {
  return getRuleContext<CypherParser::KU_ListEntryContext>(i);
}


size_t CypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListLiteral;
}


CypherParser::OC_ListLiteralContext* CypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 244, CypherParser::RuleOC_ListLiteral);
=======
  enterRule(_localctx, 254, CypherParser::RuleOC_ListLiteral);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 256, CypherParser::RuleOC_ListLiteral);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2050);
    match(CypherParser::T__6);
    setState(2052);
=======
    setState(2098);
    match(CypherParser::T__6);
    setState(2100);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2113);
    match(CypherParser::T__6);
    setState(2115);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2114);
    match(CypherParser::T__6);
    setState(2116);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2126);
    match(CypherParser::T__6);
    setState(2128);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2051);
      match(CypherParser::SP);
    }
    setState(2067);
=======
      setState(2099);
      match(CypherParser::SP);
    }
    setState(2115);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2114);
      match(CypherParser::SP);
    }
    setState(2130);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2115);
      match(CypherParser::SP);
    }
    setState(2131);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2127);
      match(CypherParser::SP);
    }
    setState(2143);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
<<<<<<< HEAD
      ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & -4681139968930742255) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 9741) != 0)) {
      setState(2054);
      oC_Expression();
      setState(2056);
=======
      ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 77) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 77)) & -4681139968930742255) != 0) || ((((_la - 143) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 143)) & 9741) != 0)) {
=======
      ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 2666130979403351041) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 133)) & 9974975) != 0)) {
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> aed81ff20 (create sequence complete)
      setState(2117);
      oC_Expression();
<<<<<<< HEAD
      setState(2104);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2119);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2118);
      oC_Expression();
      setState(2120);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2130);
      oC_Expression();
      setState(2132);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2055);
        match(CypherParser::SP);
      }
      setState(2064);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(2058);
        kU_ListEntry();
        setState(2060);
=======
        setState(2103);
=======
        setState(2118);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2119);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2131);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::SP);
      }
      setState(2140);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(2134);
        kU_ListEntry();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2108);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2123);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2124);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2136);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(2059);
          match(CypherParser::SP);
        }
        setState(2066);
=======
          setState(2107);
          match(CypherParser::SP);
        }
        setState(2114);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
          setState(2122);
          match(CypherParser::SP);
        }
        setState(2129);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(2123);
          match(CypherParser::SP);
        }
        setState(2130);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(2135);
          match(CypherParser::SP);
        }
        setState(2142);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2069);
=======
    setState(2117);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2132);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2133);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2145);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListEntryContext ------------------------------------------------------------------

CypherParser::KU_ListEntryContext::KU_ListEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ListEntryContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListEntryContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_ListEntryContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListEntry;
}


CypherParser::KU_ListEntryContext* CypherParser::kU_ListEntry() {
  KU_ListEntryContext *_localctx = _tracker.createInstance<KU_ListEntryContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 246, CypherParser::RuleKU_ListEntry);
=======
  enterRule(_localctx, 256, CypherParser::RuleKU_ListEntry);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 258, CypherParser::RuleKU_ListEntry);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2071);
    match(CypherParser::T__2);
    setState(2073);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx)) {
    case 1: {
      setState(2072);
=======
    setState(2119);
=======
    setState(2134);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2135);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2147);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__2);
    setState(2149);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 351, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2120);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2135);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2136);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2148);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2076);
=======
    setState(2124);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2139);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2140);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2152);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
<<<<<<< HEAD
      ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & -4681139968930742255) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 9741) != 0)) {
      setState(2075);
=======
      ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 77) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 77)) & -4681139968930742255) != 0) || ((((_la - 143) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 143)) & 9741) != 0)) {
<<<<<<< HEAD
      setState(2123);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
=======
      ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 2666130979403351041) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 133)) & 9974975) != 0)) {
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> aed81ff20 (create sequence complete)
      setState(2138);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2139);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2151);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructLiteralContext ------------------------------------------------------------------

CypherParser::KU_StructLiteralContext::KU_StructLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_StructFieldContext *> CypherParser::KU_StructLiteralContext::kU_StructField() {
  return getRuleContexts<CypherParser::KU_StructFieldContext>();
}

CypherParser::KU_StructFieldContext* CypherParser::KU_StructLiteralContext::kU_StructField(size_t i) {
  return getRuleContext<CypherParser::KU_StructFieldContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructLiteralContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructLiteral;
}


CypherParser::KU_StructLiteralContext* CypherParser::kU_StructLiteral() {
  KU_StructLiteralContext *_localctx = _tracker.createInstance<KU_StructLiteralContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 248, CypherParser::RuleKU_StructLiteral);
=======
  enterRule(_localctx, 258, CypherParser::RuleKU_StructLiteral);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 260, CypherParser::RuleKU_StructLiteral);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2078);
    match(CypherParser::T__8);
    setState(2080);
=======
    setState(2126);
    match(CypherParser::T__8);
    setState(2128);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2141);
    match(CypherParser::T__8);
    setState(2143);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2142);
    match(CypherParser::T__8);
    setState(2144);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2154);
    match(CypherParser::T__8);
    setState(2156);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2079);
      match(CypherParser::SP);
    }
    setState(2082);
    kU_StructField();
    setState(2084);
=======
      setState(2127);
=======
      setState(2142);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2143);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2155);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
    }
    setState(2158);
    kU_StructField();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2132);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2147);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2148);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2160);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2083);
      match(CypherParser::SP);
    }
    setState(2096);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(2086);
      match(CypherParser::T__2);
      setState(2088);
=======
      setState(2131);
=======
      setState(2146);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2147);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2159);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
    }
    setState(2172);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
<<<<<<< HEAD
      setState(2150);
      match(CypherParser::T__2);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2136);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2151);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2152);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2087);
        match(CypherParser::SP);
      }
      setState(2090);
      kU_StructField();
      setState(2092);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2091);
        match(CypherParser::SP);
      }
      setState(2098);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2099);
=======
        setState(2135);
=======
        setState(2150);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2151);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
        match(CypherParser::SP);
      }
      setState(2154);
      kU_StructField();
      setState(2156);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2155);
        match(CypherParser::SP);
      }
=======
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      setState(2162);
      match(CypherParser::T__2);
      setState(2164);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2163);
        match(CypherParser::SP);
      }
      setState(2166);
      kU_StructField();
      setState(2168);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2167);
        match(CypherParser::SP);
      }
      setState(2174);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2147);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2162);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2163);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2175);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructFieldContext ------------------------------------------------------------------

CypherParser::KU_StructFieldContext::KU_StructFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StructFieldContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StructFieldContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructFieldContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructFieldContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructField;
}


CypherParser::KU_StructFieldContext* CypherParser::kU_StructField() {
  KU_StructFieldContext *_localctx = _tracker.createInstance<KU_StructFieldContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 250, CypherParser::RuleKU_StructField);
=======
  enterRule(_localctx, 260, CypherParser::RuleKU_StructField);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 262, CypherParser::RuleKU_StructField);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2103);
=======
    setState(2151);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2166);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2167);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2179);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::START:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2101);
=======
        setState(2149);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2164);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2165);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2177);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_SymbolicName();
        break;
      }

      case CypherParser::StringLiteral: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2102);
=======
        setState(2150);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2165);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2166);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2178);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::StringLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2106);
=======
    setState(2154);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2169);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2170);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2182);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2105);
      match(CypherParser::SP);
    }
    setState(2108);
    match(CypherParser::COLON);
    setState(2110);
=======
      setState(2153);
=======
      setState(2168);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2169);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2181);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
    }
    setState(2184);
    match(CypherParser::COLON);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2158);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2173);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2174);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2186);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2109);
      match(CypherParser::SP);
    }
    setState(2112);
=======
      setState(2157);
      match(CypherParser::SP);
    }
    setState(2160);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2172);
      match(CypherParser::SP);
    }
    setState(2175);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2173);
      match(CypherParser::SP);
    }
    setState(2176);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2185);
      match(CypherParser::SP);
    }
    setState(2188);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

CypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ParenthesizedExpression;
}


CypherParser::OC_ParenthesizedExpressionContext* CypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 252, CypherParser::RuleOC_ParenthesizedExpression);
=======
  enterRule(_localctx, 262, CypherParser::RuleOC_ParenthesizedExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 264, CypherParser::RuleOC_ParenthesizedExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2114);
    match(CypherParser::T__1);
    setState(2116);
=======
    setState(2162);
    match(CypherParser::T__1);
    setState(2164);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2177);
    match(CypherParser::T__1);
    setState(2179);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2178);
    match(CypherParser::T__1);
    setState(2180);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2190);
    match(CypherParser::T__1);
    setState(2192);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2115);
      match(CypherParser::SP);
    }
    setState(2118);
    oC_Expression();
    setState(2120);
=======
      setState(2163);
=======
      setState(2178);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2179);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2191);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::SP);
    }
    setState(2194);
    oC_Expression();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2168);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2183);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2184);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2196);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2119);
      match(CypherParser::SP);
    }
    setState(2122);
=======
      setState(2167);
      match(CypherParser::SP);
    }
    setState(2170);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2182);
      match(CypherParser::SP);
    }
    setState(2185);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2183);
      match(CypherParser::SP);
    }
    setState(2186);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2195);
      match(CypherParser::SP);
    }
    setState(2198);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

CypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionNameContext* CypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

std::vector<CypherParser::KU_FunctionParameterContext *> CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter() {
  return getRuleContexts<CypherParser::KU_FunctionParameterContext>();
}

CypherParser::KU_FunctionParameterContext* CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter(size_t i) {
  return getRuleContext<CypherParser::KU_FunctionParameterContext>(i);
}


size_t CypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionInvocation;
}


CypherParser::OC_FunctionInvocationContext* CypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 254, CypherParser::RuleOC_FunctionInvocation);
=======
  enterRule(_localctx, 264, CypherParser::RuleOC_FunctionInvocation);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 266, CypherParser::RuleOC_FunctionInvocation);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2172);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 365, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2124);
      match(CypherParser::COUNT);
      setState(2126);
=======
    setState(2220);
=======
    setState(2235);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2236);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2248);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 375, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
      setState(2188);
      match(CypherParser::COUNT);
      setState(2190);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2189);
        match(CypherParser::SP);
      }
      setState(2192);
      match(CypherParser::T__1);
      setState(2194);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2193);
        match(CypherParser::SP);
      }
      setState(2196);
      match(CypherParser::STAR);
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2182);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2197);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2198);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2197);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2128);
      match(CypherParser::T__1);
      setState(2130);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2129);
        match(CypherParser::SP);
      }
      setState(2132);
      match(CypherParser::STAR);
      setState(2134);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2133);
        match(CypherParser::SP);
      }
      setState(2136);
=======
      setState(2184);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2199);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2200);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2200);
      match(CypherParser::COUNT);
      setState(2202);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2201);
        match(CypherParser::SP);
      }
      setState(2204);
      match(CypherParser::T__1);
      setState(2206);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2205);
        match(CypherParser::SP);
      }
      setState(2208);
      match(CypherParser::STAR);
      setState(2210);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2209);
        match(CypherParser::SP);
      }
      setState(2212);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::T__3);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2137);
      oC_FunctionName();
      setState(2139);
=======
      setState(2185);
      oC_FunctionName();
      setState(2187);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2200);
      oC_FunctionName();
      setState(2202);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2201);
      oC_FunctionName();
      setState(2203);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2138);
        match(CypherParser::SP);
      }
      setState(2141);
      match(CypherParser::T__1);
      setState(2143);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2142);
        match(CypherParser::SP);
      }
      setState(2149);
=======
        setState(2186);
=======
        setState(2201);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2202);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
        match(CypherParser::SP);
      }
      setState(2205);
      match(CypherParser::T__1);
      setState(2207);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2206);
        match(CypherParser::SP);
      }
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2197);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2212);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2213);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2213);
      oC_FunctionName();
      setState(2215);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2214);
        match(CypherParser::SP);
      }
      setState(2217);
      match(CypherParser::T__1);
      setState(2219);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2218);
        match(CypherParser::SP);
      }
      setState(2225);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DISTINCT) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2145);
        match(CypherParser::DISTINCT);
        setState(2147);
=======
        setState(2193);
        match(CypherParser::DISTINCT);
        setState(2195);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2208);
        match(CypherParser::DISTINCT);
        setState(2210);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2209);
        match(CypherParser::DISTINCT);
        setState(2211);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2221);
        match(CypherParser::DISTINCT);
        setState(2223);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(2146);
          match(CypherParser::SP);
        }
      }
      setState(2168);
=======
          setState(2194);
          match(CypherParser::SP);
        }
      }
      setState(2216);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
          setState(2209);
          match(CypherParser::SP);
        }
      }
      setState(2231);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(2210);
          match(CypherParser::SP);
        }
      }
      setState(2232);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(2222);
          match(CypherParser::SP);
        }
      }
      setState(2244);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
<<<<<<< HEAD
<<<<<<< HEAD
        ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 70) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 70)) & -4681139968930742255) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 136)) & 9741) != 0)) {
        setState(2151);
        kU_FunctionParameter();
        setState(2153);
=======
        ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 77) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 77)) & -4681139968930742255) != 0) || ((((_la - 143) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 143)) & 9741) != 0)) {
=======
        ((1ULL << _la) & 1082271285519581828) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 2666130979403351041) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 133)) & 9974975) != 0)) {
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> aed81ff20 (create sequence complete)
        setState(2214);
        kU_FunctionParameter();
<<<<<<< HEAD
        setState(2201);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2216);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2215);
        kU_FunctionParameter();
        setState(2217);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2227);
        kU_FunctionParameter();
        setState(2229);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          setState(2152);
          match(CypherParser::SP);
        }
        setState(2165);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2) {
          setState(2155);
          match(CypherParser::T__2);
          setState(2157);
=======
          setState(2200);
=======
          setState(2215);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(2216);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(2228);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          match(CypherParser::SP);
        }
        setState(2241);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2) {
<<<<<<< HEAD
          setState(2219);
          match(CypherParser::T__2);
<<<<<<< HEAD
<<<<<<< HEAD
          setState(2205);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
          setState(2220);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(2221);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            setState(2156);
            match(CypherParser::SP);
          }
          setState(2159);
          kU_FunctionParameter();
          setState(2161);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2160);
            match(CypherParser::SP);
          }
          setState(2167);
=======
            setState(2204);
=======
            setState(2219);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
            setState(2220);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
            match(CypherParser::SP);
          }
          setState(2223);
          kU_FunctionParameter();
          setState(2225);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2224);
            match(CypherParser::SP);
          }
<<<<<<< HEAD
<<<<<<< HEAD
          setState(2215);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
          setState(2230);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
          setState(2231);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
          setState(2231);
          match(CypherParser::T__2);
          setState(2233);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2232);
            match(CypherParser::SP);
          }
          setState(2235);
          kU_FunctionParameter();
          setState(2237);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2236);
            match(CypherParser::SP);
          }
          setState(2243);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2170);
=======
      setState(2218);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2233);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2234);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2246);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

CypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionName;
}


CypherParser::OC_FunctionNameContext* CypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 256, CypherParser::RuleOC_FunctionName);
=======
  enterRule(_localctx, 266, CypherParser::RuleOC_FunctionName);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 268, CypherParser::RuleOC_FunctionName);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2174);
=======
    setState(2222);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2237);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2238);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2250);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FunctionParameterContext ------------------------------------------------------------------

CypherParser::KU_FunctionParameterContext::KU_FunctionParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_FunctionParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_FunctionParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FunctionParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_FunctionParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_FunctionParameter;
}


CypherParser::KU_FunctionParameterContext* CypherParser::kU_FunctionParameter() {
  KU_FunctionParameterContext *_localctx = _tracker.createInstance<KU_FunctionParameterContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 258, CypherParser::RuleKU_FunctionParameter);
=======
  enterRule(_localctx, 268, CypherParser::RuleKU_FunctionParameter);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 270, CypherParser::RuleKU_FunctionParameter);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2185);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx)) {
    case 1: {
      setState(2176);
      oC_SymbolicName();
      setState(2178);
=======
    setState(2233);
=======
    setState(2248);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2249);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2261);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 378, _ctx)) {
    case 1: {
      setState(2252);
      oC_SymbolicName();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2226);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2241);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2242);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2254);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2177);
        match(CypherParser::SP);
      }
      setState(2180);
      match(CypherParser::COLON);
      setState(2181);
      match(CypherParser::T__5);
      setState(2183);
=======
        setState(2225);
=======
        setState(2240);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2241);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2253);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::SP);
      }
      setState(2256);
      match(CypherParser::COLON);
      setState(2257);
      match(CypherParser::T__5);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2231);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2246);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2247);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2259);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2182);
=======
        setState(2230);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2245);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2246);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2258);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2187);
=======
    setState(2235);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2250);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2251);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2263);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PathPatternsContext ------------------------------------------------------------------

CypherParser::OC_PathPatternsContext::OC_PathPatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PathPatternsContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PathPatternsContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PathPatternsContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PathPatternsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PathPatternsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PathPatternsContext::getRuleIndex() const {
  return CypherParser::RuleOC_PathPatterns;
}


CypherParser::OC_PathPatternsContext* CypherParser::oC_PathPatterns() {
  OC_PathPatternsContext *_localctx = _tracker.createInstance<OC_PathPatternsContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 260, CypherParser::RuleOC_PathPatterns);
=======
  enterRule(_localctx, 270, CypherParser::RuleOC_PathPatterns);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 272, CypherParser::RuleOC_PathPatterns);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2189);
    oC_NodePattern();
    setState(2194); 
=======
    setState(2237);
    oC_NodePattern();
    setState(2242); 
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2252);
    oC_NodePattern();
    setState(2257); 
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2253);
    oC_NodePattern();
    setState(2258); 
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2265);
    oC_NodePattern();
    setState(2270); 
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
              setState(2191);
=======
              setState(2239);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
              setState(2254);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
              setState(2255);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
              setState(2267);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                setState(2190);
                match(CypherParser::SP);
              }
              setState(2193);
=======
                setState(2238);
                match(CypherParser::SP);
              }
              setState(2241);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
                setState(2253);
                match(CypherParser::SP);
              }
              setState(2256);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
                setState(2254);
                match(CypherParser::SP);
              }
              setState(2257);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
                setState(2266);
                match(CypherParser::SP);
              }
              setState(2269);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
              oC_PatternElementChain();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2196); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx);
=======
      setState(2244); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 374, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2259); 
=======
      setState(2260); 
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 376, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2272); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 380, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExistSubqueryContext ------------------------------------------------------------------

CypherParser::OC_ExistSubqueryContext::OC_ExistSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_ExistSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExistSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_ExistSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_ExistSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_ExistSubquery;
}


CypherParser::OC_ExistSubqueryContext* CypherParser::oC_ExistSubquery() {
  OC_ExistSubqueryContext *_localctx = _tracker.createInstance<OC_ExistSubqueryContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 262, CypherParser::RuleOC_ExistSubquery);
=======
  enterRule(_localctx, 272, CypherParser::RuleOC_ExistSubquery);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 274, CypherParser::RuleOC_ExistSubquery);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2198);
    match(CypherParser::EXISTS);
    setState(2200);
=======
    setState(2246);
    match(CypherParser::EXISTS);
    setState(2248);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2247);
      match(CypherParser::SP);
    }
    setState(2250);
    match(CypherParser::T__8);
    setState(2252);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2251);
      match(CypherParser::SP);
    }
    setState(2254);
    match(CypherParser::MATCH);
    setState(2256);
>>>>>>> 97f7ef93f (update parser for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2255);
      match(CypherParser::SP);
    }
<<<<<<< HEAD
    setState(2202);
    match(CypherParser::T__8);
    setState(2204);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2203);
      match(CypherParser::SP);
    }
    setState(2206);
    match(CypherParser::MATCH);
    setState(2208);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2207);
      match(CypherParser::SP);
    }
    setState(2210);
    oC_Pattern();
    setState(2215);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 375, _ctx)) {
    case 1: {
      setState(2212);
=======
    setState(2258);
    oC_Pattern();
=======
    setState(2261);
    match(CypherParser::EXISTS);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(2263);
=======
    setState(2262);
    match(CypherParser::EXISTS);
    setState(2264);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2263);
      match(CypherParser::SP);
    }
    setState(2266);
    match(CypherParser::T__8);
    setState(2268);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2267);
      match(CypherParser::SP);
    }
    setState(2270);
    match(CypherParser::MATCH);
    setState(2272);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2271);
      match(CypherParser::SP);
    }
=======
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    setState(2274);
    match(CypherParser::EXISTS);
    setState(2276);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2275);
      match(CypherParser::SP);
    }
    setState(2278);
    match(CypherParser::T__8);
    setState(2280);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2279);
      match(CypherParser::SP);
    }
    setState(2282);
    match(CypherParser::MATCH);
    setState(2284);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2283);
      match(CypherParser::SP);
    }
    setState(2286);
    oC_Pattern();
    setState(2291);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 385, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2260);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2275);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2276);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2288);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2211);
        match(CypherParser::SP);
      }
      setState(2214);
=======
        setState(2259);
        match(CypherParser::SP);
      }
      setState(2262);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2274);
        match(CypherParser::SP);
      }
      setState(2277);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2275);
        match(CypherParser::SP);
      }
      setState(2278);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2287);
        match(CypherParser::SP);
      }
      setState(2290);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Where();
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2218);
=======
    setState(2266);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2281);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2282);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2294);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2217);
      match(CypherParser::SP);
    }
    setState(2220);
=======
      setState(2265);
      match(CypherParser::SP);
    }
    setState(2268);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2280);
      match(CypherParser::SP);
    }
    setState(2283);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2281);
      match(CypherParser::SP);
    }
    setState(2284);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2293);
      match(CypherParser::SP);
    }
    setState(2296);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CountSubqueryContext ------------------------------------------------------------------

CypherParser::KU_CountSubqueryContext::KU_CountSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::KU_CountSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CountSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_CountSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_CountSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleKU_CountSubquery;
}


CypherParser::KU_CountSubqueryContext* CypherParser::kU_CountSubquery() {
  KU_CountSubqueryContext *_localctx = _tracker.createInstance<KU_CountSubqueryContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 264, CypherParser::RuleKU_CountSubquery);
=======
  enterRule(_localctx, 274, CypherParser::RuleKU_CountSubquery);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 276, CypherParser::RuleKU_CountSubquery);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2222);
    match(CypherParser::COUNT);
    setState(2224);
=======
    setState(2270);
    match(CypherParser::COUNT);
    setState(2272);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2271);
      match(CypherParser::SP);
    }
    setState(2274);
    match(CypherParser::T__8);
    setState(2276);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2275);
      match(CypherParser::SP);
    }
    setState(2278);
    match(CypherParser::MATCH);
    setState(2280);
>>>>>>> 97f7ef93f (update parser for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2279);
      match(CypherParser::SP);
    }
<<<<<<< HEAD
    setState(2226);
    match(CypherParser::T__8);
    setState(2228);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2227);
      match(CypherParser::SP);
    }
    setState(2230);
    match(CypherParser::MATCH);
    setState(2232);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2231);
      match(CypherParser::SP);
    }
    setState(2234);
    oC_Pattern();
    setState(2239);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 381, _ctx)) {
    case 1: {
      setState(2236);
=======
    setState(2282);
    oC_Pattern();
=======
    setState(2285);
    match(CypherParser::COUNT);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
    setState(2287);
=======
    setState(2286);
    match(CypherParser::COUNT);
    setState(2288);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2287);
      match(CypherParser::SP);
    }
    setState(2290);
    match(CypherParser::T__8);
    setState(2292);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2291);
      match(CypherParser::SP);
    }
    setState(2294);
    match(CypherParser::MATCH);
    setState(2296);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2295);
      match(CypherParser::SP);
    }
=======
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    setState(2298);
    match(CypherParser::COUNT);
    setState(2300);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2299);
      match(CypherParser::SP);
    }
    setState(2302);
    match(CypherParser::T__8);
    setState(2304);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2303);
      match(CypherParser::SP);
    }
    setState(2306);
    match(CypherParser::MATCH);
    setState(2308);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2307);
      match(CypherParser::SP);
    }
    setState(2310);
    oC_Pattern();
    setState(2315);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 391, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2284);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2299);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2300);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2312);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2235);
        match(CypherParser::SP);
      }
      setState(2238);
=======
        setState(2283);
        match(CypherParser::SP);
      }
      setState(2286);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2298);
        match(CypherParser::SP);
      }
      setState(2301);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2299);
        match(CypherParser::SP);
      }
      setState(2302);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2311);
        match(CypherParser::SP);
      }
      setState(2314);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Where();
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2242);
=======
    setState(2290);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2305);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2306);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2318);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2241);
      match(CypherParser::SP);
    }
    setState(2244);
=======
      setState(2289);
      match(CypherParser::SP);
    }
    setState(2292);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2304);
      match(CypherParser::SP);
    }
    setState(2307);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2305);
      match(CypherParser::SP);
    }
    setState(2308);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2317);
      match(CypherParser::SP);
    }
    setState(2320);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

CypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyLookup;
}


CypherParser::OC_PropertyLookupContext* CypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 266, CypherParser::RuleOC_PropertyLookup);
=======
  enterRule(_localctx, 276, CypherParser::RuleOC_PropertyLookup);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 278, CypherParser::RuleOC_PropertyLookup);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2246);
    match(CypherParser::T__4);
    setState(2248);
=======
    setState(2294);
    match(CypherParser::T__4);
    setState(2296);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2309);
    match(CypherParser::T__4);
    setState(2311);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2310);
    match(CypherParser::T__4);
    setState(2312);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2322);
    match(CypherParser::T__4);
    setState(2324);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2247);
      match(CypherParser::SP);
    }
    setState(2252);
=======
      setState(2295);
      match(CypherParser::SP);
    }
    setState(2300);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2310);
      match(CypherParser::SP);
    }
    setState(2315);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2311);
      match(CypherParser::SP);
    }
    setState(2316);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2323);
      match(CypherParser::SP);
    }
    setState(2328);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::START:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2250);
=======
        setState(2298);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2313);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2314);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2326);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_PropertyKeyName();
        break;
      }

      case CypherParser::STAR: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2251);
=======
        setState(2299);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2314);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2315);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2327);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

CypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(CypherParser::ELSE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(CypherParser::CASE, 0);
}

std::vector<CypherParser::OC_CaseAlternativeContext *> CypherParser::OC_CaseExpressionContext::oC_CaseAlternative() {
  return getRuleContexts<CypherParser::OC_CaseAlternativeContext>();
}

CypherParser::OC_CaseAlternativeContext* CypherParser::OC_CaseExpressionContext::oC_CaseAlternative(size_t i) {
  return getRuleContext<CypherParser::OC_CaseAlternativeContext>(i);
}


size_t CypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseExpression;
}


CypherParser::OC_CaseExpressionContext* CypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 268, CypherParser::RuleOC_CaseExpression);
=======
  enterRule(_localctx, 278, CypherParser::RuleOC_CaseExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 280, CypherParser::RuleOC_CaseExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2276);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 390, _ctx)) {
    case 1: {
      setState(2254);
      match(CypherParser::CASE);
      setState(2259); 
=======
    setState(2324);
=======
    setState(2339);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2340);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2352);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 400, _ctx)) {
    case 1: {
      setState(2330);
      match(CypherParser::CASE);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2307); 
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2322); 
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2323); 
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2335); 
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                setState(2256);
=======
                setState(2304);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
                setState(2319);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
                setState(2320);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
                setState(2332);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                  setState(2255);
                  match(CypherParser::SP);
                }
                setState(2258);
=======
                  setState(2303);
                  match(CypherParser::SP);
                }
                setState(2306);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
                  setState(2318);
                  match(CypherParser::SP);
                }
                setState(2321);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
                  setState(2319);
                  match(CypherParser::SP);
                }
                setState(2322);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
                  setState(2331);
                  match(CypherParser::SP);
                }
                setState(2334);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2261); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 386, _ctx);
=======
        setState(2309); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 390, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2324); 
=======
        setState(2325); 
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 392, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2337); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 396, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2263);
      match(CypherParser::CASE);
      setState(2265);
=======
      setState(2311);
      match(CypherParser::CASE);
      setState(2313);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2326);
      match(CypherParser::CASE);
      setState(2328);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2327);
      match(CypherParser::CASE);
      setState(2329);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2339);
      match(CypherParser::CASE);
      setState(2341);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2264);
        match(CypherParser::SP);
      }
      setState(2267);
      oC_Expression();
      setState(2272); 
=======
        setState(2312);
=======
        setState(2327);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2328);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2340);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::SP);
      }
      setState(2343);
      oC_Expression();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2320); 
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2335); 
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2336); 
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2348); 
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                setState(2269);
=======
                setState(2317);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
                setState(2332);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
                setState(2333);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
                setState(2345);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                  setState(2268);
                  match(CypherParser::SP);
                }
                setState(2271);
=======
                  setState(2316);
                  match(CypherParser::SP);
                }
                setState(2319);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
                  setState(2331);
                  match(CypherParser::SP);
                }
                setState(2334);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
                  setState(2332);
                  match(CypherParser::SP);
                }
                setState(2335);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
                  setState(2344);
                  match(CypherParser::SP);
                }
                setState(2347);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2274); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 389, _ctx);
=======
        setState(2322); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 393, _ctx);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2337); 
=======
        setState(2338); 
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 395, _ctx);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2350); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 399, _ctx);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2286);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 393, _ctx)) {
    case 1: {
      setState(2279);
=======
    setState(2334);
=======
    setState(2349);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2350);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2362);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 403, _ctx)) {
    case 1: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2327);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2342);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2343);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2355);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2278);
        match(CypherParser::SP);
      }
      setState(2281);
      match(CypherParser::ELSE);
      setState(2283);
=======
        setState(2326);
=======
        setState(2341);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2342);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2354);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::SP);
      }
      setState(2357);
      match(CypherParser::ELSE);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2331);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2346);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2347);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2359);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2282);
        match(CypherParser::SP);
      }
      setState(2285);
=======
        setState(2330);
        match(CypherParser::SP);
      }
      setState(2333);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2345);
        match(CypherParser::SP);
      }
      setState(2348);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2346);
        match(CypherParser::SP);
      }
      setState(2349);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2358);
        match(CypherParser::SP);
      }
      setState(2361);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
      oC_Expression();
      break;
    }

    default:
      break;
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2289);
=======
    setState(2337);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2352);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2353);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2365);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2288);
      match(CypherParser::SP);
    }
    setState(2291);
=======
      setState(2336);
      match(CypherParser::SP);
    }
    setState(2339);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2351);
      match(CypherParser::SP);
    }
    setState(2354);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2352);
      match(CypherParser::SP);
    }
    setState(2355);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2364);
      match(CypherParser::SP);
    }
    setState(2367);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativeContext ------------------------------------------------------------------

CypherParser::OC_CaseAlternativeContext::OC_CaseAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::WHEN() {
  return getToken(CypherParser::WHEN, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseAlternativeContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseAlternativeContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::THEN() {
  return getToken(CypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseAlternativeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CaseAlternativeContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseAlternative;
}


CypherParser::OC_CaseAlternativeContext* CypherParser::oC_CaseAlternative() {
  OC_CaseAlternativeContext *_localctx = _tracker.createInstance<OC_CaseAlternativeContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 270, CypherParser::RuleOC_CaseAlternative);
=======
  enterRule(_localctx, 280, CypherParser::RuleOC_CaseAlternative);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 282, CypherParser::RuleOC_CaseAlternative);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2293);
    match(CypherParser::WHEN);
    setState(2295);
=======
    setState(2341);
=======
    setState(2356);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2357);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    match(CypherParser::WHEN);
    setState(2359);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2358);
      match(CypherParser::SP);
    }
    setState(2361);
    oC_Expression();
    setState(2363);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2362);
      match(CypherParser::SP);
    }
    setState(2365);
    match(CypherParser::THEN);
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2351);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2366);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2367);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2366);
      match(CypherParser::SP);
    }
=======
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    setState(2369);
    match(CypherParser::WHEN);
    setState(2371);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2370);
      match(CypherParser::SP);
    }
    setState(2373);
    oC_Expression();
    setState(2375);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2374);
      match(CypherParser::SP);
    }
    setState(2377);
    match(CypherParser::THEN);
    setState(2379);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2378);
      match(CypherParser::SP);
    }
    setState(2381);
    oC_Expression();
    setState(2299);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2298);
      match(CypherParser::SP);
    }
    setState(2301);
    match(CypherParser::THEN);
    setState(2303);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2302);
      match(CypherParser::SP);
    }
    setState(2305);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

CypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_VariableContext::getRuleIndex() const {
  return CypherParser::RuleOC_Variable;
}


CypherParser::OC_VariableContext* CypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 272, CypherParser::RuleOC_Variable);
=======
  enterRule(_localctx, 282, CypherParser::RuleOC_Variable);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 284, CypherParser::RuleOC_Variable);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2307);
=======
    setState(2355);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2370);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2371);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2383);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

CypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_DoubleLiteralContext* CypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<CypherParser::OC_DoubleLiteralContext>(0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_NumberLiteral;
}


CypherParser::OC_NumberLiteralContext* CypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 274, CypherParser::RuleOC_NumberLiteral);
=======
  enterRule(_localctx, 284, CypherParser::RuleOC_NumberLiteral);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 286, CypherParser::RuleOC_NumberLiteral);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2311);
=======
    setState(2359);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2374);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2375);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2387);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2309);
=======
        setState(2357);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2372);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2373);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2385);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_DoubleLiteral();
        break;
      }

      case CypherParser::DecimalInteger: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2310);
=======
        setState(2358);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2373);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2374);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2386);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

CypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_ParameterContext::getRuleIndex() const {
  return CypherParser::RuleOC_Parameter;
}


CypherParser::OC_ParameterContext* CypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 276, CypherParser::RuleOC_Parameter);
=======
  enterRule(_localctx, 286, CypherParser::RuleOC_Parameter);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 288, CypherParser::RuleOC_Parameter);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2313);
    match(CypherParser::T__25);
    setState(2316);
=======
    setState(2361);
    match(CypherParser::T__25);
    setState(2364);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2376);
    match(CypherParser::T__25);
    setState(2379);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2377);
    match(CypherParser::T__25);
    setState(2380);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2389);
    match(CypherParser::T__25);
    setState(2392);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::START:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2314);
=======
        setState(2362);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2377);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2378);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2390);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        oC_SymbolicName();
        break;
      }

      case CypherParser::DecimalInteger: {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2315);
=======
        setState(2363);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2378);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2379);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2391);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyExpression;
}


CypherParser::OC_PropertyExpressionContext* CypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 278, CypherParser::RuleOC_PropertyExpression);
=======
  enterRule(_localctx, 288, CypherParser::RuleOC_PropertyExpression);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 290, CypherParser::RuleOC_PropertyExpression);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2318);
    oC_Atom();
    setState(2320);
=======
    setState(2366);
    oC_Atom();
    setState(2368);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2381);
    oC_Atom();
    setState(2383);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2382);
    oC_Atom();
    setState(2384);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2394);
    oC_Atom();
    setState(2396);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      setState(2319);
      match(CypherParser::SP);
    }
    setState(2322);
=======
      setState(2367);
      match(CypherParser::SP);
    }
    setState(2370);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
      setState(2382);
      match(CypherParser::SP);
    }
    setState(2385);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
      setState(2383);
      match(CypherParser::SP);
    }
    setState(2386);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
      setState(2395);
      match(CypherParser::SP);
    }
    setState(2398);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_PropertyLookup();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

CypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyKeyName;
}


CypherParser::OC_PropertyKeyNameContext* CypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 280, CypherParser::RuleOC_PropertyKeyName);
=======
  enterRule(_localctx, 290, CypherParser::RuleOC_PropertyKeyName);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 292, CypherParser::RuleOC_PropertyKeyName);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2324);
=======
    setState(2372);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2387);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2388);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2400);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

CypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_IntegerLiteral;
}


CypherParser::OC_IntegerLiteralContext* CypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 282, CypherParser::RuleOC_IntegerLiteral);
=======
  enterRule(_localctx, 292, CypherParser::RuleOC_IntegerLiteral);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 294, CypherParser::RuleOC_IntegerLiteral);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2326);
=======
    setState(2374);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2389);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2390);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2402);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

CypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(CypherParser::RegularDecimalReal, 0);
}


size_t CypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_DoubleLiteral;
}


CypherParser::OC_DoubleLiteralContext* CypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 284, CypherParser::RuleOC_DoubleLiteral);
=======
  enterRule(_localctx, 294, CypherParser::RuleOC_DoubleLiteral);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 296, CypherParser::RuleOC_DoubleLiteral);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2328);
=======
    setState(2376);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2391);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2392);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2404);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    match(CypherParser::RegularDecimalReal);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

CypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SchemaName;
}


CypherParser::OC_SchemaNameContext* CypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 286, CypherParser::RuleOC_SchemaName);
=======
  enterRule(_localctx, 296, CypherParser::RuleOC_SchemaName);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 298, CypherParser::RuleOC_SchemaName);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2330);
=======
    setState(2378);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2393);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2394);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2406);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

CypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(CypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(CypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(CypherParser::HexLetter, 0);
}

CypherParser::KU_NonReservedKeywordsContext* CypherParser::OC_SymbolicNameContext::kU_NonReservedKeywords() {
  return getRuleContext<CypherParser::KU_NonReservedKeywordsContext>(0);
}


size_t CypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SymbolicName;
}


CypherParser::OC_SymbolicNameContext* CypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 288, CypherParser::RuleOC_SymbolicName);
=======
  enterRule(_localctx, 298, CypherParser::RuleOC_SymbolicName);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 300, CypherParser::RuleOC_SymbolicName);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2337);
=======
    setState(2385);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2400);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2401);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2413);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::UnescapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2332);
=======
        setState(2380);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2395);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2396);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2408);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::UnescapedSymbolicName);
        break;
      }

      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2333);
=======
        setState(2381);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2396);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2397);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2409);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken = match(CypherParser::EscapedSymbolicName);
        if ((antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken != nullptr ? antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken->getText() : "") == "``") { notifyEmptyToken(antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken); }
        break;
      }

      case CypherParser::HexLetter: {
        enterOuterAlt(_localctx, 3);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2335);
=======
        setState(2383);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2398);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2399);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2411);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        match(CypherParser::HexLetter);
        break;
      }

      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::START:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END: {
        enterOuterAlt(_localctx, 4);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        setState(2336);
=======
        setState(2384);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
        setState(2399);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
        setState(2400);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
        setState(2412);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
        kU_NonReservedKeywords();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_NonReservedKeywordsContext ------------------------------------------------------------------

CypherParser::KU_NonReservedKeywordsContext::KU_NonReservedKeywordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMENT_() {
  return getToken(CypherParser::COMMENT_, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IN() {
  return getToken(CypherParser::IN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::START() {
  return getToken(CypherParser::START, 0);
}


size_t CypherParser::KU_NonReservedKeywordsContext::getRuleIndex() const {
  return CypherParser::RuleKU_NonReservedKeywords;
}


CypherParser::KU_NonReservedKeywordsContext* CypherParser::kU_NonReservedKeywords() {
  KU_NonReservedKeywordsContext *_localctx = _tracker.createInstance<KU_NonReservedKeywordsContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 290, CypherParser::RuleKU_NonReservedKeywords);
=======
  enterRule(_localctx, 300, CypherParser::RuleKU_NonReservedKeywords);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 302, CypherParser::RuleKU_NonReservedKeywords);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2339);
=======
    setState(2387);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2402);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2403);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2415);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _la = _input->LA(1);
    if (!(((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & 9127333637) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 4353) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_LeftArrowHead;
}


CypherParser::OC_LeftArrowHeadContext* CypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 292, CypherParser::RuleOC_LeftArrowHead);
=======
  enterRule(_localctx, 302, CypherParser::RuleOC_LeftArrowHead);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 304, CypherParser::RuleOC_LeftArrowHead);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2341);
=======
    setState(2389);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2404);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2405);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2417);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2013282304) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_RightArrowHead;
}


CypherParser::OC_RightArrowHeadContext* CypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 294, CypherParser::RuleOC_RightArrowHead);
=======
  enterRule(_localctx, 304, CypherParser::RuleOC_RightArrowHead);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 306, CypherParser::RuleOC_RightArrowHead);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2343);
=======
    setState(2391);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2406);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2407);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2419);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 32212320256) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

CypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DashContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::OC_DashContext::getRuleIndex() const {
  return CypherParser::RuleOC_Dash;
}


CypherParser::OC_DashContext* CypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
<<<<<<< HEAD
<<<<<<< HEAD
  enterRule(_localctx, 296, CypherParser::RuleOC_Dash);
=======
  enterRule(_localctx, 306, CypherParser::RuleOC_Dash);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
  enterRule(_localctx, 308, CypherParser::RuleOC_Dash);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    setState(2345);
=======
    setState(2393);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    setState(2408);
>>>>>>> 4f175c93e (finish statement evaluation workflow)
=======
    setState(2409);
>>>>>>> b1de44dd3 (finish show_sequences() and debug)
=======
    setState(2421);
>>>>>>> 6a075a2f7 (add basic tests for sequence)
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 70334384439296) != 0) || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CypherParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
<<<<<<< HEAD
<<<<<<< HEAD
    case 37: return kU_DataTypeSempred(antlrcpp::downCast<KU_DataTypeContext *>(context), predicateIndex);
=======
    case 42: return kU_DataTypeSempred(antlrcpp::downCast<KU_DataTypeContext *>(context), predicateIndex);
>>>>>>> 97f7ef93f (update parser for sequence)
=======
    case 43: return kU_DataTypeSempred(antlrcpp::downCast<KU_DataTypeContext *>(context), predicateIndex);
>>>>>>> 4f175c93e (finish statement evaluation workflow)

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_DataTypeSempred(KU_DataTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

void CypherParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cypherParserInitialize();
#else
  ::antlr4::internal::call_once(cypherParserOnceFlag, cypherParserInitialize);
#endif
}
