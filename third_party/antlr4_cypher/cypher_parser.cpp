
// Generated from Cypher.g4 by ANTLR 4.13.1



#include "cypher_parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct CypherParserStaticData final {
  CypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CypherParserStaticData(const CypherParserStaticData&) = delete;
  CypherParserStaticData(CypherParserStaticData&&) = delete;
  CypherParserStaticData& operator=(const CypherParserStaticData&) = delete;
  CypherParserStaticData& operator=(CypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cypherParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CypherParserStaticData *cypherParserStaticData = nullptr;

void cypherParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cypherParserStaticData != nullptr) {
    return;
  }
#else
  assert(cypherParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CypherParserStaticData>(
    std::vector<std::string>{
      "oC_Cypher", "oC_Statement", "kU_CopyFrom", "kU_CopyFromByColumn", 
      "kU_CopyTO", "kU_StandaloneCall", "kU_CommentOn", "kU_CreateMacro", 
      "kU_PositionalArgs", "kU_DefaultArg", "kU_FilePaths", "kU_ParsingOptions", 
      "kU_ParsingOption", "kU_DDL", "kU_CreateNodeTable", "kU_CreateRelTable", 
      "kU_CreateRelTableGroup", "kU_RelTableConnection", "kU_CreateRdfGraph", 
      "kU_DropTable", "kU_AlterTable", "kU_AlterOptions", "kU_AddProperty", 
      "kU_DropProperty", "kU_RenameTable", "kU_RenameProperty", "kU_PropertyDefinitions", 
      "kU_PropertyDefinition", "kU_CreateNodeConstraint", "kU_DataType", 
      "kU_ListIdentifiers", "kU_ListIdentifier", "oC_AnyCypherOption", "oC_Explain", 
      "oC_Profile", "kU_Transaction", "oC_Query", "oC_RegularQuery", "oC_Union", 
      "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", "kU_QueryPart", 
      "oC_UpdatingClause", "oC_ReadingClause", "kU_LoadFrom", "kU_InQueryCall", 
      "oC_Match", "oC_Unwind", "oC_Create", "oC_Merge", "oC_MergeAction", 
      "oC_Set", "oC_SetItem", "oC_Delete", "oC_With", "oC_Return", "oC_ProjectionBody", 
      "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", "oC_Skip", 
      "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", "oC_PatternPart", 
      "oC_AnonymousPatternPart", "oC_PatternElement", "oC_NodePattern", 
      "oC_PatternElementChain", "oC_RelationshipPattern", "oC_RelationshipDetail", 
      "kU_Properties", "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
      "oC_RangeLiteral", "kU_RecursiveRelationshipComprehension", "kU_IntermediateNodeProjectionItems", 
      "kU_IntermediateRelProjectionItems", "oC_LowerBound", "oC_UpperBound", 
      "oC_LabelName", "oC_RelTypeName", "oC_Expression", "oC_OrExpression", 
      "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression", 
      "kU_ComparisonOperator", "kU_BitwiseOrOperatorExpression", "kU_BitwiseAndOperatorExpression", 
      "kU_BitShiftOperatorExpression", "kU_BitShiftOperator", "oC_AddOrSubtractExpression", 
      "kU_AddOrSubtractOperator", "oC_MultiplyDivideModuloExpression", "kU_MultiplyDivideModuloOperator", 
      "oC_PowerOfExpression", "oC_UnaryAddSubtractOrFactorialExpression", 
      "oC_StringListNullOperatorExpression", "oC_ListOperatorExpression", 
      "kU_ListExtractOperatorExpression", "kU_ListSliceOperatorExpression", 
      "oC_StringOperatorExpression", "oC_RegularExpression", "oC_NullOperatorExpression", 
      "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Literal", "oC_BooleanLiteral", 
      "oC_ListLiteral", "kU_ListEntry", "kU_StructLiteral", "kU_StructField", 
      "oC_ParenthesizedExpression", "oC_FunctionInvocation", "oC_FunctionName", 
      "kU_FunctionParameter", "oC_ExistentialSubquery", "oC_PropertyLookup", 
      "oC_CaseExpression", "oC_CaseAlternative", "oC_Variable", "oC_NumberLiteral", 
      "oC_Parameter", "oC_PropertyExpression", "oC_PropertyKeyName", "oC_IntegerLiteral", 
      "oC_DoubleLiteral", "oC_SchemaName", "oC_SymbolicName", "kU_NonReservedKeywords", 
      "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "'('", "')'", "','", "'='", "':'", "'['", "']'", "'{'", 
      "'}'", "'|'", "'..'", "'<>'", "'<'", "'<='", "'>'", "'>='", "'&'", 
      "'>>'", "'<<'", "'+'", "'/'", "'%'", "'^'", "'=~'", "'.'", "'$'", 
      "'\\u27E8'", "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
      "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", 
      "'\\u2013'", "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
      "'\\uFF0D'", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'*'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'!='", 
      "'-'", "'!'", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "CALL", "COMMENT", 
      "MACRO", "GLOB", "COPY", "FROM", "COLUMN", "NODE", "TABLE", "GROUP", 
      "RDF", "GRAPH", "DROP", "ALTER", "DEFAULT", "RENAME", "ADD", "PRIMARY", 
      "KEY", "REL", "TO", "EXPLAIN", "PROFILE", "BEGIN", "TRANSACTION", 
      "READ", "ONLY", "WRITE", "COMMIT", "COMMIT_SKIP_CHECKPOINT", "ROLLBACK", 
      "ROLLBACK_SKIP_CHECKPOINT", "UNION", "ALL", "LOAD", "HEADERS", "OPTIONAL", 
      "MATCH", "UNWIND", "CREATE", "MERGE", "ON", "SET", "DELETE", "WITH", 
      "RETURN", "DISTINCT", "STAR", "AS", "ORDER", "BY", "L_SKIP", "LIMIT", 
      "ASCENDING", "ASC", "DESCENDING", "DESC", "WHERE", "SHORTEST", "OR", 
      "XOR", "AND", "NOT", "INVALID_NOT_EQUAL", "MINUS", "FACTORIAL", "STARTS", 
      "ENDS", "CONTAINS", "IS", "NULL_", "TRUE", "FALSE", "EXISTS", "CASE", 
      "ELSE", "END", "WHEN", "THEN", "StringLiteral", "EscapedChar", "DecimalInteger", 
      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", 
      "ZeroDigit", "RegularDecimalReal", "UnescapedSymbolicName", "IdentifierStart", 
      "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "Comment", 
      "Unknown"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,143,2139,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,1,0,3,0,278,8,0,1,0,3,0,281,
  	8,0,1,0,3,0,284,8,0,1,0,1,0,3,0,288,8,0,1,0,3,0,291,8,0,1,0,3,0,294,8,
  	0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,307,8,1,1,2,1,2,1,2,
  	1,2,1,2,1,2,1,2,1,2,3,2,317,8,2,1,2,1,2,3,2,321,8,2,1,2,1,2,3,2,325,8,
  	2,1,2,1,2,3,2,329,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,339,8,3,1,3,
  	1,3,3,3,343,8,3,1,3,1,3,3,3,347,8,3,1,3,5,3,350,8,3,10,3,12,3,353,9,3,
  	1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,3,4,365,8,4,1,4,1,4,3,4,369,8,
  	4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,381,8,5,1,5,1,5,3,5,385,
  	8,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
  	7,1,7,1,7,1,7,3,7,407,8,7,1,7,1,7,3,7,411,8,7,1,7,3,7,414,8,7,1,7,3,7,
  	417,8,7,1,7,3,7,420,8,7,1,7,3,7,423,8,7,1,7,1,7,3,7,427,8,7,1,7,5,7,430,
  	8,7,10,7,12,7,433,9,7,1,7,3,7,436,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
  	3,8,446,8,8,1,8,1,8,3,8,450,8,8,1,8,5,8,453,8,8,10,8,12,8,456,9,8,1,9,
  	1,9,3,9,460,8,9,1,9,1,9,1,9,3,9,465,8,9,1,9,1,9,1,10,1,10,3,10,471,8,
  	10,1,10,1,10,3,10,475,8,10,1,10,1,10,3,10,479,8,10,1,10,5,10,482,8,10,
  	10,10,12,10,485,9,10,1,10,1,10,1,10,1,10,3,10,491,8,10,1,10,1,10,3,10,
  	495,8,10,1,10,1,10,3,10,499,8,10,1,10,3,10,502,8,10,1,11,1,11,3,11,506,
  	8,11,1,11,1,11,3,11,510,8,11,1,11,5,11,513,8,11,10,11,12,11,516,9,11,
  	1,12,1,12,3,12,520,8,12,1,12,1,12,3,12,524,8,12,1,12,1,12,1,13,1,13,1,
  	13,1,13,1,13,1,13,3,13,534,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
  	14,3,14,544,8,14,1,14,1,14,3,14,548,8,14,1,14,1,14,3,14,552,8,14,1,14,
  	1,14,3,14,556,8,14,1,14,1,14,1,14,3,14,561,8,14,1,14,1,14,1,15,1,15,1,
  	15,1,15,1,15,1,15,1,15,1,15,3,15,573,8,15,1,15,1,15,3,15,577,8,15,1,15,
  	1,15,3,15,581,8,15,1,15,1,15,3,15,585,8,15,1,15,1,15,3,15,589,8,15,3,
  	15,591,8,15,1,15,1,15,3,15,595,8,15,1,15,1,15,3,15,599,8,15,3,15,601,
  	8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,
  	615,8,16,1,16,1,16,3,16,619,8,16,1,16,1,16,3,16,623,8,16,1,16,1,16,3,
  	16,627,8,16,1,16,4,16,630,8,16,11,16,12,16,631,1,16,3,16,635,8,16,1,16,
  	1,16,3,16,639,8,16,1,16,1,16,3,16,643,8,16,3,16,645,8,16,1,16,1,16,3,
  	16,649,8,16,1,16,1,16,3,16,653,8,16,3,16,655,8,16,1,16,1,16,1,17,1,17,
  	1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
  	1,21,1,21,1,21,1,21,3,21,693,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
  	1,22,1,22,3,22,704,8,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
  	1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,3,26,726,8,26,
  	1,26,1,26,3,26,730,8,26,1,26,5,26,733,8,26,10,26,12,26,736,9,26,1,27,
  	1,27,1,27,1,27,1,28,1,28,1,28,1,28,3,28,746,8,28,1,28,1,28,3,28,750,8,
  	28,1,28,1,28,3,28,754,8,28,1,28,1,28,1,29,1,29,1,29,1,29,3,29,762,8,29,
  	1,29,1,29,3,29,766,8,29,1,29,1,29,3,29,770,8,29,1,29,1,29,1,29,1,29,3,
  	29,776,8,29,1,29,1,29,3,29,780,8,29,1,29,1,29,3,29,784,8,29,1,29,1,29,
  	1,29,1,29,3,29,790,8,29,1,29,1,29,3,29,794,8,29,1,29,1,29,3,29,798,8,
  	29,1,29,1,29,3,29,802,8,29,1,29,1,29,3,29,806,8,29,1,29,1,29,3,29,810,
  	8,29,1,29,1,29,5,29,814,8,29,10,29,12,29,817,9,29,1,30,1,30,5,30,821,
  	8,30,10,30,12,30,824,9,30,1,31,1,31,3,31,828,8,31,1,31,1,31,1,32,1,32,
  	3,32,834,8,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
  	1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,854,8,35,1,36,1,36,1,37,1,37,
  	3,37,860,8,37,1,37,5,37,863,8,37,10,37,12,37,866,9,37,1,37,1,37,3,37,
  	870,8,37,4,37,872,8,37,11,37,12,37,873,1,37,1,37,1,37,3,37,879,8,37,1,
  	38,1,38,1,38,1,38,3,38,885,8,38,1,38,1,38,1,38,3,38,890,8,38,1,38,3,38,
  	893,8,38,1,39,1,39,3,39,897,8,39,1,40,1,40,3,40,901,8,40,5,40,903,8,40,
  	10,40,12,40,906,9,40,1,40,1,40,1,40,3,40,911,8,40,5,40,913,8,40,10,40,
  	12,40,916,9,40,1,40,1,40,3,40,920,8,40,1,40,5,40,923,8,40,10,40,12,40,
  	926,9,40,1,40,3,40,929,8,40,1,40,3,40,932,8,40,1,40,1,40,3,40,936,8,40,
  	4,40,938,8,40,11,40,12,40,939,1,40,1,40,3,40,944,8,40,1,41,1,41,3,41,
  	948,8,41,4,41,950,8,41,11,41,12,41,951,1,41,1,41,1,42,1,42,3,42,958,8,
  	42,5,42,960,8,42,10,42,12,42,963,9,42,1,42,1,42,3,42,967,8,42,5,42,969,
  	8,42,10,42,12,42,972,9,42,1,42,1,42,1,43,1,43,1,43,1,43,3,43,980,8,43,
  	1,44,1,44,1,44,1,44,3,44,986,8,44,1,45,1,45,1,45,1,45,1,45,1,45,3,45,
  	994,8,45,1,45,1,45,3,45,998,8,45,1,45,1,45,3,45,1002,8,45,1,45,1,45,3,
  	45,1006,8,45,1,45,1,45,1,45,1,45,1,45,3,45,1013,8,45,1,45,1,45,3,45,1017,
  	8,45,1,45,1,45,3,45,1021,8,45,1,45,1,45,3,45,1025,8,45,1,45,3,45,1028,
  	8,45,1,45,3,45,1031,8,45,1,46,1,46,1,46,1,46,1,47,1,47,3,47,1039,8,47,
  	1,47,1,47,3,47,1043,8,47,1,47,1,47,3,47,1047,8,47,1,47,3,47,1050,8,47,
  	1,48,1,48,3,48,1054,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,3,49,
  	1064,8,49,1,49,1,49,1,50,1,50,3,50,1070,8,50,1,50,1,50,1,50,5,50,1075,
  	8,50,10,50,12,50,1078,9,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
  	51,1,51,3,51,1090,8,51,1,52,1,52,3,52,1094,8,52,1,52,1,52,3,52,1098,8,
  	52,1,52,1,52,3,52,1102,8,52,1,52,5,52,1105,8,52,10,52,12,52,1108,9,52,
  	1,53,1,53,3,53,1112,8,53,1,53,1,53,3,53,1116,8,53,1,53,1,53,1,54,1,54,
  	3,54,1122,8,54,1,54,1,54,3,54,1126,8,54,1,54,1,54,3,54,1130,8,54,1,54,
  	5,54,1133,8,54,10,54,12,54,1136,9,54,1,55,1,55,1,55,3,55,1141,8,55,1,
  	55,3,55,1144,8,55,1,56,1,56,1,56,1,57,3,57,1150,8,57,1,57,3,57,1153,8,
  	57,1,57,1,57,1,57,1,57,3,57,1159,8,57,1,57,1,57,3,57,1163,8,57,1,57,1,
  	57,3,57,1167,8,57,1,58,1,58,3,58,1171,8,58,1,58,1,58,3,58,1175,8,58,1,
  	58,5,58,1178,8,58,10,58,12,58,1181,9,58,1,58,1,58,3,58,1185,8,58,1,58,
  	1,58,3,58,1189,8,58,1,58,5,58,1192,8,58,10,58,12,58,1195,9,58,3,58,1197,
  	8,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1206,8,59,1,60,1,60,1,60,
  	1,60,1,60,1,60,1,60,3,60,1215,8,60,1,60,5,60,1218,8,60,10,60,12,60,1221,
  	9,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,63,1,63,3,63,1233,8,63,
  	1,63,3,63,1236,8,63,1,64,1,64,1,64,1,64,1,65,1,65,3,65,1244,8,65,1,65,
  	1,65,3,65,1248,8,65,1,65,5,65,1251,8,65,10,65,12,65,1254,9,65,1,66,1,
  	66,3,66,1258,8,66,1,66,1,66,3,66,1262,8,66,1,66,1,66,1,66,3,66,1267,8,
  	66,1,67,1,67,1,68,1,68,3,68,1273,8,68,1,68,5,68,1276,8,68,10,68,12,68,
  	1279,9,68,1,68,1,68,1,68,1,68,3,68,1285,8,68,1,69,1,69,3,69,1289,8,69,
  	1,69,1,69,3,69,1293,8,69,3,69,1295,8,69,1,69,1,69,3,69,1299,8,69,3,69,
  	1301,8,69,1,69,1,69,3,69,1305,8,69,3,69,1307,8,69,1,69,1,69,1,70,1,70,
  	3,70,1313,8,70,1,70,1,70,1,71,1,71,3,71,1319,8,71,1,71,1,71,3,71,1323,
  	8,71,1,71,3,71,1326,8,71,1,71,3,71,1329,8,71,1,71,1,71,1,71,1,71,3,71,
  	1335,8,71,1,71,3,71,1338,8,71,1,71,3,71,1341,8,71,1,71,1,71,3,71,1345,
  	8,71,1,71,1,71,1,71,1,71,3,71,1351,8,71,1,71,3,71,1354,8,71,1,71,3,71,
  	1357,8,71,1,71,1,71,3,71,1361,8,71,1,72,1,72,3,72,1365,8,72,1,72,1,72,
  	3,72,1369,8,72,3,72,1371,8,72,1,72,1,72,3,72,1375,8,72,3,72,1377,8,72,
  	1,72,1,72,3,72,1381,8,72,3,72,1383,8,72,1,72,1,72,3,72,1387,8,72,3,72,
  	1389,8,72,1,72,1,72,1,73,1,73,3,73,1395,8,73,1,73,1,73,3,73,1399,8,73,
  	1,73,1,73,3,73,1403,8,73,1,73,1,73,3,73,1407,8,73,1,73,1,73,3,73,1411,
  	8,73,1,73,1,73,3,73,1415,8,73,1,73,1,73,3,73,1419,8,73,1,73,1,73,3,73,
  	1423,8,73,5,73,1425,8,73,10,73,12,73,1428,9,73,3,73,1430,8,73,1,73,1,
  	73,1,74,1,74,3,74,1436,8,74,1,74,1,74,3,74,1440,8,74,1,74,1,74,3,74,1444,
  	8,74,1,74,3,74,1447,8,74,1,74,5,74,1450,8,74,10,74,12,74,1453,9,74,1,
  	75,1,75,3,75,1457,8,75,1,75,5,75,1460,8,75,10,75,12,75,1463,9,75,1,76,
  	1,76,3,76,1467,8,76,1,76,1,76,1,77,1,77,3,77,1473,8,77,1,77,1,77,1,77,
  	1,77,3,77,1479,8,77,1,77,3,77,1482,8,77,1,77,3,77,1485,8,77,1,77,3,77,
  	1488,8,77,1,77,1,77,3,77,1492,8,77,1,77,3,77,1495,8,77,1,77,3,77,1498,
  	8,77,1,77,3,77,1501,8,77,1,77,3,77,1504,8,77,1,78,1,78,3,78,1508,8,78,
  	1,78,1,78,3,78,1512,8,78,1,78,1,78,3,78,1516,8,78,1,78,1,78,3,78,1520,
  	8,78,1,78,1,78,3,78,1524,8,78,1,78,3,78,1527,8,78,1,78,3,78,1530,8,78,
  	1,78,1,78,3,78,1534,8,78,1,78,1,78,3,78,1538,8,78,1,78,1,78,3,78,1542,
  	8,78,1,78,1,78,3,78,1546,8,78,3,78,1548,8,78,1,78,1,78,1,79,1,79,3,79,
  	1554,8,79,1,79,3,79,1557,8,79,1,79,3,79,1560,8,79,1,79,1,79,1,80,1,80,
  	3,80,1566,8,80,1,80,3,80,1569,8,80,1,80,3,80,1572,8,80,1,80,1,80,1,81,
  	1,81,1,82,1,82,1,83,1,83,1,84,1,84,1,85,1,85,1,86,1,86,1,86,1,86,1,86,
  	5,86,1591,8,86,10,86,12,86,1594,9,86,1,87,1,87,1,87,1,87,1,87,5,87,1601,
  	8,87,10,87,12,87,1604,9,87,1,88,1,88,1,88,1,88,1,88,5,88,1611,8,88,10,
  	88,12,88,1614,9,88,1,89,1,89,3,89,1618,8,89,3,89,1620,8,89,1,89,1,89,
  	1,90,1,90,3,90,1626,8,90,1,90,1,90,3,90,1630,8,90,1,90,1,90,3,90,1634,
  	8,90,1,90,1,90,3,90,1638,8,90,1,90,1,90,3,90,1642,8,90,1,90,1,90,1,90,
  	1,90,1,90,1,90,3,90,1650,8,90,1,90,1,90,3,90,1654,8,90,1,90,1,90,3,90,
  	1658,8,90,1,90,1,90,3,90,1662,8,90,1,90,1,90,4,90,1666,8,90,11,90,12,
  	90,1667,1,90,1,90,3,90,1672,8,90,1,91,1,91,1,92,1,92,3,92,1678,8,92,1,
  	92,1,92,3,92,1682,8,92,1,92,5,92,1685,8,92,10,92,12,92,1688,9,92,1,93,
  	1,93,3,93,1692,8,93,1,93,1,93,3,93,1696,8,93,1,93,5,93,1699,8,93,10,93,
  	12,93,1702,9,93,1,94,1,94,3,94,1706,8,94,1,94,1,94,3,94,1710,8,94,1,94,
  	1,94,5,94,1714,8,94,10,94,12,94,1717,9,94,1,95,1,95,1,96,1,96,3,96,1723,
  	8,96,1,96,1,96,3,96,1727,8,96,1,96,1,96,5,96,1731,8,96,10,96,12,96,1734,
  	9,96,1,97,1,97,1,98,1,98,3,98,1740,8,98,1,98,1,98,3,98,1744,8,98,1,98,
  	1,98,5,98,1748,8,98,10,98,12,98,1751,9,98,1,99,1,99,1,100,1,100,3,100,
  	1757,8,100,1,100,1,100,3,100,1761,8,100,1,100,5,100,1764,8,100,10,100,
  	12,100,1767,9,100,1,101,1,101,3,101,1771,8,101,3,101,1773,8,101,1,101,
  	1,101,3,101,1777,8,101,1,101,3,101,1780,8,101,1,102,1,102,1,102,4,102,
  	1785,8,102,11,102,12,102,1786,1,102,3,102,1790,8,102,1,103,1,103,3,103,
  	1794,8,103,1,104,1,104,1,104,1,104,1,105,1,105,3,105,1802,8,105,1,105,
  	1,105,3,105,1806,8,105,1,105,1,105,1,106,1,106,1,106,1,106,1,106,1,106,
  	1,106,1,106,1,106,1,106,1,106,3,106,1821,8,106,1,106,3,106,1824,8,106,
  	1,106,1,106,1,107,3,107,1829,8,107,1,107,1,107,1,108,1,108,1,108,1,108,
  	1,108,1,108,1,108,1,108,1,108,1,108,3,108,1843,8,108,1,109,1,109,3,109,
  	1847,8,109,1,109,5,109,1850,8,109,10,109,12,109,1853,9,109,1,110,1,110,
  	1,110,1,110,1,110,1,110,1,110,3,110,1862,8,110,1,111,1,111,1,111,1,111,
  	1,111,1,111,3,111,1870,8,111,1,112,1,112,1,113,1,113,3,113,1876,8,113,
  	1,113,1,113,3,113,1880,8,113,1,113,1,113,3,113,1884,8,113,5,113,1886,
  	8,113,10,113,12,113,1889,9,113,3,113,1891,8,113,1,113,1,113,1,114,1,114,
  	3,114,1897,8,114,1,114,3,114,1900,8,114,1,115,1,115,3,115,1904,8,115,
  	1,115,1,115,3,115,1908,8,115,1,115,1,115,3,115,1912,8,115,1,115,1,115,
  	3,115,1916,8,115,5,115,1918,8,115,10,115,12,115,1921,9,115,1,115,1,115,
  	1,116,1,116,3,116,1927,8,116,1,116,3,116,1930,8,116,1,116,1,116,3,116,
  	1934,8,116,1,116,1,116,1,117,1,117,3,117,1940,8,117,1,117,1,117,3,117,
  	1944,8,117,1,117,1,117,1,118,1,118,3,118,1950,8,118,1,118,1,118,3,118,
  	1954,8,118,1,118,1,118,3,118,1958,8,118,1,118,1,118,1,118,1,118,3,118,
  	1964,8,118,1,118,1,118,3,118,1968,8,118,1,118,1,118,3,118,1972,8,118,
  	3,118,1974,8,118,1,118,1,118,3,118,1978,8,118,1,118,1,118,3,118,1982,
  	8,118,1,118,1,118,3,118,1986,8,118,5,118,1988,8,118,10,118,12,118,1991,
  	9,118,3,118,1993,8,118,1,118,1,118,3,118,1997,8,118,1,119,1,119,1,120,
  	1,120,3,120,2003,8,120,1,120,1,120,1,120,3,120,2008,8,120,3,120,2010,
  	8,120,1,120,1,120,1,121,1,121,3,121,2016,8,121,1,121,1,121,3,121,2020,
  	8,121,1,121,1,121,3,121,2024,8,121,1,121,1,121,3,121,2028,8,121,1,121,
  	3,121,2031,8,121,1,121,3,121,2034,8,121,1,121,1,121,1,122,1,122,3,122,
  	2040,8,122,1,122,1,122,3,122,2044,8,122,1,123,1,123,3,123,2048,8,123,
  	1,123,4,123,2051,8,123,11,123,12,123,2052,1,123,1,123,3,123,2057,8,123,
  	1,123,1,123,3,123,2061,8,123,1,123,4,123,2064,8,123,11,123,12,123,2065,
  	3,123,2068,8,123,1,123,3,123,2071,8,123,1,123,1,123,3,123,2075,8,123,
  	1,123,3,123,2078,8,123,1,123,3,123,2081,8,123,1,123,1,123,1,124,1,124,
  	3,124,2087,8,124,1,124,1,124,3,124,2091,8,124,1,124,1,124,3,124,2095,
  	8,124,1,124,1,124,1,125,1,125,1,126,1,126,3,126,2103,8,126,1,127,1,127,
  	1,127,3,127,2108,8,127,1,128,1,128,3,128,2112,8,128,1,128,1,128,1,129,
  	1,129,1,130,1,130,1,131,1,131,1,132,1,132,1,133,1,133,1,133,1,133,1,133,
  	3,133,2129,8,133,1,134,1,134,1,135,1,135,1,136,1,136,1,137,1,137,1,137,
  	0,1,58,138,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
  	42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
  	88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
  	126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
  	162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
  	198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,
  	234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
  	270,272,274,0,9,1,0,100,103,2,0,5,5,13,17,1,0,19,20,2,0,21,21,111,111,
  	2,0,22,23,94,94,1,0,118,119,2,0,14,14,28,31,2,0,16,16,32,35,2,0,36,46,
  	111,111,2411,0,277,1,0,0,0,2,306,1,0,0,0,4,308,1,0,0,0,6,330,1,0,0,0,
  	8,360,1,0,0,0,10,376,1,0,0,0,12,388,1,0,0,0,14,400,1,0,0,0,16,443,1,0,
  	0,0,18,457,1,0,0,0,20,501,1,0,0,0,22,503,1,0,0,0,24,517,1,0,0,0,26,533,
  	1,0,0,0,28,535,1,0,0,0,30,564,1,0,0,0,32,604,1,0,0,0,34,658,1,0,0,0,36,
  	666,1,0,0,0,38,674,1,0,0,0,40,680,1,0,0,0,42,692,1,0,0,0,44,694,1,0,0,
  	0,46,705,1,0,0,0,48,709,1,0,0,0,50,715,1,0,0,0,52,723,1,0,0,0,54,737,
  	1,0,0,0,56,741,1,0,0,0,58,809,1,0,0,0,60,818,1,0,0,0,62,825,1,0,0,0,64,
  	833,1,0,0,0,66,835,1,0,0,0,68,837,1,0,0,0,70,853,1,0,0,0,72,855,1,0,0,
  	0,74,878,1,0,0,0,76,892,1,0,0,0,78,896,1,0,0,0,80,943,1,0,0,0,82,949,
  	1,0,0,0,84,961,1,0,0,0,86,979,1,0,0,0,88,985,1,0,0,0,90,987,1,0,0,0,92,
  	1032,1,0,0,0,94,1038,1,0,0,0,96,1051,1,0,0,0,98,1061,1,0,0,0,100,1067,
  	1,0,0,0,102,1089,1,0,0,0,104,1091,1,0,0,0,106,1109,1,0,0,0,108,1119,1,
  	0,0,0,110,1137,1,0,0,0,112,1145,1,0,0,0,114,1152,1,0,0,0,116,1196,1,0,
  	0,0,118,1205,1,0,0,0,120,1207,1,0,0,0,122,1222,1,0,0,0,124,1226,1,0,0,
  	0,126,1230,1,0,0,0,128,1237,1,0,0,0,130,1241,1,0,0,0,132,1266,1,0,0,0,
  	134,1268,1,0,0,0,136,1284,1,0,0,0,138,1286,1,0,0,0,140,1310,1,0,0,0,142,
  	1360,1,0,0,0,144,1362,1,0,0,0,146,1392,1,0,0,0,148,1433,1,0,0,0,150,1454,
  	1,0,0,0,152,1464,1,0,0,0,154,1470,1,0,0,0,156,1505,1,0,0,0,158,1551,1,
  	0,0,0,160,1563,1,0,0,0,162,1575,1,0,0,0,164,1577,1,0,0,0,166,1579,1,0,
  	0,0,168,1581,1,0,0,0,170,1583,1,0,0,0,172,1585,1,0,0,0,174,1595,1,0,0,
  	0,176,1605,1,0,0,0,178,1619,1,0,0,0,180,1671,1,0,0,0,182,1673,1,0,0,0,
  	184,1675,1,0,0,0,186,1689,1,0,0,0,188,1703,1,0,0,0,190,1718,1,0,0,0,192,
  	1720,1,0,0,0,194,1735,1,0,0,0,196,1737,1,0,0,0,198,1752,1,0,0,0,200,1754,
  	1,0,0,0,202,1772,1,0,0,0,204,1781,1,0,0,0,206,1793,1,0,0,0,208,1795,1,
  	0,0,0,210,1799,1,0,0,0,212,1820,1,0,0,0,214,1828,1,0,0,0,216,1842,1,0,
  	0,0,218,1844,1,0,0,0,220,1861,1,0,0,0,222,1869,1,0,0,0,224,1871,1,0,0,
  	0,226,1873,1,0,0,0,228,1894,1,0,0,0,230,1901,1,0,0,0,232,1926,1,0,0,0,
  	234,1937,1,0,0,0,236,1996,1,0,0,0,238,1998,1,0,0,0,240,2009,1,0,0,0,242,
  	2013,1,0,0,0,244,2037,1,0,0,0,246,2067,1,0,0,0,248,2084,1,0,0,0,250,2098,
  	1,0,0,0,252,2102,1,0,0,0,254,2104,1,0,0,0,256,2109,1,0,0,0,258,2115,1,
  	0,0,0,260,2117,1,0,0,0,262,2119,1,0,0,0,264,2121,1,0,0,0,266,2128,1,0,
  	0,0,268,2130,1,0,0,0,270,2132,1,0,0,0,272,2134,1,0,0,0,274,2136,1,0,0,
  	0,276,278,5,140,0,0,277,276,1,0,0,0,277,278,1,0,0,0,278,280,1,0,0,0,279,
  	281,3,64,32,0,280,279,1,0,0,0,280,281,1,0,0,0,281,283,1,0,0,0,282,284,
  	5,140,0,0,283,282,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,290,3,2,
  	1,0,286,288,5,140,0,0,287,286,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,0,
  	289,291,5,1,0,0,290,287,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,294,
  	5,140,0,0,293,292,1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,296,5,0,
  	0,1,296,1,1,0,0,0,297,307,3,72,36,0,298,307,3,26,13,0,299,307,3,4,2,0,
  	300,307,3,6,3,0,301,307,3,8,4,0,302,307,3,10,5,0,303,307,3,14,7,0,304,
  	307,3,12,6,0,305,307,3,70,35,0,306,297,1,0,0,0,306,298,1,0,0,0,306,299,
  	1,0,0,0,306,300,1,0,0,0,306,301,1,0,0,0,306,302,1,0,0,0,306,303,1,0,0,
  	0,306,304,1,0,0,0,306,305,1,0,0,0,307,3,1,0,0,0,308,309,5,51,0,0,309,
  	310,5,140,0,0,310,311,3,264,132,0,311,312,5,140,0,0,312,313,5,52,0,0,
  	313,314,5,140,0,0,314,328,3,20,10,0,315,317,5,140,0,0,316,315,1,0,0,0,
  	316,317,1,0,0,0,317,318,1,0,0,0,318,320,5,2,0,0,319,321,5,140,0,0,320,
  	319,1,0,0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,324,3,22,11,0,323,325,
  	5,140,0,0,324,323,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,327,5,3,
  	0,0,327,329,1,0,0,0,328,316,1,0,0,0,328,329,1,0,0,0,329,5,1,0,0,0,330,
  	331,5,51,0,0,331,332,5,140,0,0,332,333,3,264,132,0,333,334,5,140,0,0,
  	334,335,5,52,0,0,335,336,5,140,0,0,336,338,5,2,0,0,337,339,5,140,0,0,
  	338,337,1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,351,5,126,0,0,341,
  	343,5,140,0,0,342,341,1,0,0,0,342,343,1,0,0,0,343,344,1,0,0,0,344,346,
  	5,4,0,0,345,347,5,140,0,0,346,345,1,0,0,0,346,347,1,0,0,0,347,348,1,0,
  	0,0,348,350,5,126,0,0,349,342,1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,
  	351,352,1,0,0,0,352,354,1,0,0,0,353,351,1,0,0,0,354,355,5,3,0,0,355,356,
  	5,140,0,0,356,357,5,97,0,0,357,358,5,140,0,0,358,359,5,53,0,0,359,7,1,
  	0,0,0,360,361,5,51,0,0,361,362,5,140,0,0,362,364,5,2,0,0,363,365,5,140,
  	0,0,364,363,1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,368,3,72,36,0,
  	367,369,5,140,0,0,368,367,1,0,0,0,368,369,1,0,0,0,369,370,1,0,0,0,370,
  	371,5,3,0,0,371,372,5,140,0,0,372,373,5,67,0,0,373,374,5,140,0,0,374,
  	375,5,126,0,0,375,9,1,0,0,0,376,377,5,47,0,0,377,378,5,140,0,0,378,380,
  	3,266,133,0,379,381,5,140,0,0,380,379,1,0,0,0,380,381,1,0,0,0,381,382,
  	1,0,0,0,382,384,5,5,0,0,383,385,5,140,0,0,384,383,1,0,0,0,384,385,1,0,
  	0,0,385,386,1,0,0,0,386,387,3,222,111,0,387,11,1,0,0,0,388,389,5,48,0,
  	0,389,390,5,140,0,0,390,391,5,88,0,0,391,392,5,140,0,0,392,393,5,55,0,
  	0,393,394,5,140,0,0,394,395,3,264,132,0,395,396,5,140,0,0,396,397,5,116,
  	0,0,397,398,5,140,0,0,398,399,5,126,0,0,399,13,1,0,0,0,400,401,5,86,0,
  	0,401,402,5,140,0,0,402,403,5,49,0,0,403,404,5,140,0,0,404,406,3,238,
  	119,0,405,407,5,140,0,0,406,405,1,0,0,0,406,407,1,0,0,0,407,408,1,0,0,
  	0,408,410,5,2,0,0,409,411,5,140,0,0,410,409,1,0,0,0,410,411,1,0,0,0,411,
  	413,1,0,0,0,412,414,3,16,8,0,413,412,1,0,0,0,413,414,1,0,0,0,414,416,
  	1,0,0,0,415,417,5,140,0,0,416,415,1,0,0,0,416,417,1,0,0,0,417,419,1,0,
  	0,0,418,420,3,18,9,0,419,418,1,0,0,0,419,420,1,0,0,0,420,431,1,0,0,0,
  	421,423,5,140,0,0,422,421,1,0,0,0,422,423,1,0,0,0,423,424,1,0,0,0,424,
  	426,5,4,0,0,425,427,5,140,0,0,426,425,1,0,0,0,426,427,1,0,0,0,427,428,
  	1,0,0,0,428,430,3,18,9,0,429,422,1,0,0,0,430,433,1,0,0,0,431,429,1,0,
  	0,0,431,432,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,434,436,5,140,0,0,
  	435,434,1,0,0,0,435,436,1,0,0,0,436,437,1,0,0,0,437,438,5,3,0,0,438,439,
  	5,140,0,0,439,440,5,95,0,0,440,441,5,140,0,0,441,442,3,170,85,0,442,15,
  	1,0,0,0,443,454,3,266,133,0,444,446,5,140,0,0,445,444,1,0,0,0,445,446,
  	1,0,0,0,446,447,1,0,0,0,447,449,5,4,0,0,448,450,5,140,0,0,449,448,1,0,
  	0,0,449,450,1,0,0,0,450,451,1,0,0,0,451,453,3,266,133,0,452,445,1,0,0,
  	0,453,456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,17,1,0,0,0,456,
  	454,1,0,0,0,457,459,3,266,133,0,458,460,5,140,0,0,459,458,1,0,0,0,459,
  	460,1,0,0,0,460,461,1,0,0,0,461,462,5,6,0,0,462,464,5,5,0,0,463,465,5,
  	140,0,0,464,463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,467,3,222,
  	111,0,467,19,1,0,0,0,468,470,5,7,0,0,469,471,5,140,0,0,470,469,1,0,0,
  	0,470,471,1,0,0,0,471,472,1,0,0,0,472,483,5,126,0,0,473,475,5,140,0,0,
  	474,473,1,0,0,0,474,475,1,0,0,0,475,476,1,0,0,0,476,478,5,4,0,0,477,479,
  	5,140,0,0,478,477,1,0,0,0,478,479,1,0,0,0,479,480,1,0,0,0,480,482,5,126,
  	0,0,481,474,1,0,0,0,482,485,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,
  	486,1,0,0,0,485,483,1,0,0,0,486,502,5,8,0,0,487,502,5,126,0,0,488,490,
  	5,50,0,0,489,491,5,140,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,492,1,
  	0,0,0,492,494,5,2,0,0,493,495,5,140,0,0,494,493,1,0,0,0,494,495,1,0,0,
  	0,495,496,1,0,0,0,496,498,5,126,0,0,497,499,5,140,0,0,498,497,1,0,0,0,
  	498,499,1,0,0,0,499,500,1,0,0,0,500,502,5,3,0,0,501,468,1,0,0,0,501,487,
  	1,0,0,0,501,488,1,0,0,0,502,21,1,0,0,0,503,514,3,24,12,0,504,506,5,140,
  	0,0,505,504,1,0,0,0,505,506,1,0,0,0,506,507,1,0,0,0,507,509,5,4,0,0,508,
  	510,5,140,0,0,509,508,1,0,0,0,509,510,1,0,0,0,510,511,1,0,0,0,511,513,
  	3,24,12,0,512,505,1,0,0,0,513,516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,
  	0,0,515,23,1,0,0,0,516,514,1,0,0,0,517,519,3,266,133,0,518,520,5,140,
  	0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,521,523,5,5,0,0,522,
  	524,5,140,0,0,523,522,1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,526,
  	3,222,111,0,526,25,1,0,0,0,527,534,3,28,14,0,528,534,3,30,15,0,529,534,
  	3,32,16,0,530,534,3,36,18,0,531,534,3,38,19,0,532,534,3,40,20,0,533,527,
  	1,0,0,0,533,528,1,0,0,0,533,529,1,0,0,0,533,530,1,0,0,0,533,531,1,0,0,
  	0,533,532,1,0,0,0,534,27,1,0,0,0,535,536,5,86,0,0,536,537,5,140,0,0,537,
  	538,5,54,0,0,538,539,5,140,0,0,539,540,5,55,0,0,540,541,5,140,0,0,541,
  	543,3,264,132,0,542,544,5,140,0,0,543,542,1,0,0,0,543,544,1,0,0,0,544,
  	545,1,0,0,0,545,547,5,2,0,0,546,548,5,140,0,0,547,546,1,0,0,0,547,548,
  	1,0,0,0,548,549,1,0,0,0,549,551,3,52,26,0,550,552,5,140,0,0,551,550,1,
  	0,0,0,551,552,1,0,0,0,552,553,1,0,0,0,553,555,5,4,0,0,554,556,5,140,0,
  	0,555,554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,558,3,56,28,0,558,
  	560,1,0,0,0,559,561,5,140,0,0,560,559,1,0,0,0,560,561,1,0,0,0,561,562,
  	1,0,0,0,562,563,5,3,0,0,563,29,1,0,0,0,564,565,5,86,0,0,565,566,5,140,
  	0,0,566,567,5,66,0,0,567,568,5,140,0,0,568,569,5,55,0,0,569,570,5,140,
  	0,0,570,572,3,264,132,0,571,573,5,140,0,0,572,571,1,0,0,0,572,573,1,0,
  	0,0,573,574,1,0,0,0,574,576,5,2,0,0,575,577,5,140,0,0,576,575,1,0,0,0,
  	576,577,1,0,0,0,577,578,1,0,0,0,578,580,3,34,17,0,579,581,5,140,0,0,580,
  	579,1,0,0,0,580,581,1,0,0,0,581,590,1,0,0,0,582,584,5,4,0,0,583,585,5,
  	140,0,0,584,583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,588,3,52,
  	26,0,587,589,5,140,0,0,588,587,1,0,0,0,588,589,1,0,0,0,589,591,1,0,0,
  	0,590,582,1,0,0,0,590,591,1,0,0,0,591,600,1,0,0,0,592,594,5,4,0,0,593,
  	595,5,140,0,0,594,593,1,0,0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,598,
  	3,266,133,0,597,599,5,140,0,0,598,597,1,0,0,0,598,599,1,0,0,0,599,601,
  	1,0,0,0,600,592,1,0,0,0,600,601,1,0,0,0,601,602,1,0,0,0,602,603,5,3,0,
  	0,603,31,1,0,0,0,604,605,5,86,0,0,605,606,5,140,0,0,606,607,5,66,0,0,
  	607,608,5,140,0,0,608,609,5,55,0,0,609,610,5,140,0,0,610,611,5,56,0,0,
  	611,612,5,140,0,0,612,614,3,264,132,0,613,615,5,140,0,0,614,613,1,0,0,
  	0,614,615,1,0,0,0,615,616,1,0,0,0,616,618,5,2,0,0,617,619,5,140,0,0,618,
  	617,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,622,3,34,17,0,621,623,
  	5,140,0,0,622,621,1,0,0,0,622,623,1,0,0,0,623,629,1,0,0,0,624,626,5,4,
  	0,0,625,627,5,140,0,0,626,625,1,0,0,0,626,627,1,0,0,0,627,628,1,0,0,0,
  	628,630,3,34,17,0,629,624,1,0,0,0,630,631,1,0,0,0,631,629,1,0,0,0,631,
  	632,1,0,0,0,632,634,1,0,0,0,633,635,5,140,0,0,634,633,1,0,0,0,634,635,
  	1,0,0,0,635,644,1,0,0,0,636,638,5,4,0,0,637,639,5,140,0,0,638,637,1,0,
  	0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,642,3,52,26,0,641,643,5,140,0,
  	0,642,641,1,0,0,0,642,643,1,0,0,0,643,645,1,0,0,0,644,636,1,0,0,0,644,
  	645,1,0,0,0,645,654,1,0,0,0,646,648,5,4,0,0,647,649,5,140,0,0,648,647,
  	1,0,0,0,648,649,1,0,0,0,649,650,1,0,0,0,650,652,3,266,133,0,651,653,5,
  	140,0,0,652,651,1,0,0,0,652,653,1,0,0,0,653,655,1,0,0,0,654,646,1,0,0,
  	0,654,655,1,0,0,0,655,656,1,0,0,0,656,657,5,3,0,0,657,33,1,0,0,0,658,
  	659,5,52,0,0,659,660,5,140,0,0,660,661,3,264,132,0,661,662,5,140,0,0,
  	662,663,5,67,0,0,663,664,5,140,0,0,664,665,3,264,132,0,665,35,1,0,0,0,
  	666,667,5,86,0,0,667,668,5,140,0,0,668,669,5,57,0,0,669,670,5,140,0,0,
  	670,671,5,58,0,0,671,672,5,140,0,0,672,673,3,264,132,0,673,37,1,0,0,0,
  	674,675,5,59,0,0,675,676,5,140,0,0,676,677,5,55,0,0,677,678,5,140,0,0,
  	678,679,3,264,132,0,679,39,1,0,0,0,680,681,5,60,0,0,681,682,5,140,0,0,
  	682,683,5,55,0,0,683,684,5,140,0,0,684,685,3,264,132,0,685,686,5,140,
  	0,0,686,687,3,42,21,0,687,41,1,0,0,0,688,693,3,44,22,0,689,693,3,46,23,
  	0,690,693,3,48,24,0,691,693,3,50,25,0,692,688,1,0,0,0,692,689,1,0,0,0,
  	692,690,1,0,0,0,692,691,1,0,0,0,693,43,1,0,0,0,694,695,5,63,0,0,695,696,
  	5,140,0,0,696,697,3,258,129,0,697,698,5,140,0,0,698,703,3,58,29,0,699,
  	700,5,140,0,0,700,701,5,61,0,0,701,702,5,140,0,0,702,704,3,170,85,0,703,
  	699,1,0,0,0,703,704,1,0,0,0,704,45,1,0,0,0,705,706,5,59,0,0,706,707,5,
  	140,0,0,707,708,3,258,129,0,708,47,1,0,0,0,709,710,5,62,0,0,710,711,5,
  	140,0,0,711,712,5,67,0,0,712,713,5,140,0,0,713,714,3,264,132,0,714,49,
  	1,0,0,0,715,716,5,62,0,0,716,717,5,140,0,0,717,718,3,258,129,0,718,719,
  	5,140,0,0,719,720,5,67,0,0,720,721,5,140,0,0,721,722,3,258,129,0,722,
  	51,1,0,0,0,723,734,3,54,27,0,724,726,5,140,0,0,725,724,1,0,0,0,725,726,
  	1,0,0,0,726,727,1,0,0,0,727,729,5,4,0,0,728,730,5,140,0,0,729,728,1,0,
  	0,0,729,730,1,0,0,0,730,731,1,0,0,0,731,733,3,54,27,0,732,725,1,0,0,0,
  	733,736,1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,735,53,1,0,0,0,736,734,
  	1,0,0,0,737,738,3,258,129,0,738,739,5,140,0,0,739,740,3,58,29,0,740,55,
  	1,0,0,0,741,742,5,64,0,0,742,743,5,140,0,0,743,745,5,65,0,0,744,746,5,
  	140,0,0,745,744,1,0,0,0,745,746,1,0,0,0,746,747,1,0,0,0,747,749,5,2,0,
  	0,748,750,5,140,0,0,749,748,1,0,0,0,749,750,1,0,0,0,750,751,1,0,0,0,751,
  	753,3,258,129,0,752,754,5,140,0,0,753,752,1,0,0,0,753,754,1,0,0,0,754,
  	755,1,0,0,0,755,756,5,3,0,0,756,57,1,0,0,0,757,758,6,29,-1,0,758,810,
  	3,266,133,0,759,761,5,79,0,0,760,762,5,140,0,0,761,760,1,0,0,0,761,762,
  	1,0,0,0,762,763,1,0,0,0,763,765,5,2,0,0,764,766,5,140,0,0,765,764,1,0,
  	0,0,765,766,1,0,0,0,766,767,1,0,0,0,767,769,3,52,26,0,768,770,5,140,0,
  	0,769,768,1,0,0,0,769,770,1,0,0,0,770,771,1,0,0,0,771,772,5,3,0,0,772,
  	810,1,0,0,0,773,775,3,266,133,0,774,776,5,140,0,0,775,774,1,0,0,0,775,
  	776,1,0,0,0,776,777,1,0,0,0,777,779,5,2,0,0,778,780,5,140,0,0,779,778,
  	1,0,0,0,779,780,1,0,0,0,780,781,1,0,0,0,781,783,3,52,26,0,782,784,5,140,
  	0,0,783,782,1,0,0,0,783,784,1,0,0,0,784,785,1,0,0,0,785,786,5,3,0,0,786,
  	810,1,0,0,0,787,789,3,266,133,0,788,790,5,140,0,0,789,788,1,0,0,0,789,
  	790,1,0,0,0,790,791,1,0,0,0,791,793,5,2,0,0,792,794,5,140,0,0,793,792,
  	1,0,0,0,793,794,1,0,0,0,794,795,1,0,0,0,795,797,3,58,29,0,796,798,5,140,
  	0,0,797,796,1,0,0,0,797,798,1,0,0,0,798,799,1,0,0,0,799,801,5,4,0,0,800,
  	802,5,140,0,0,801,800,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,803,805,
  	3,58,29,0,804,806,5,140,0,0,805,804,1,0,0,0,805,806,1,0,0,0,806,807,1,
  	0,0,0,807,808,5,3,0,0,808,810,1,0,0,0,809,757,1,0,0,0,809,759,1,0,0,0,
  	809,773,1,0,0,0,809,787,1,0,0,0,810,815,1,0,0,0,811,812,10,4,0,0,812,
  	814,3,60,30,0,813,811,1,0,0,0,814,817,1,0,0,0,815,813,1,0,0,0,815,816,
  	1,0,0,0,816,59,1,0,0,0,817,815,1,0,0,0,818,822,3,62,31,0,819,821,3,62,
  	31,0,820,819,1,0,0,0,821,824,1,0,0,0,822,820,1,0,0,0,822,823,1,0,0,0,
  	823,61,1,0,0,0,824,822,1,0,0,0,825,827,5,7,0,0,826,828,3,260,130,0,827,
  	826,1,0,0,0,827,828,1,0,0,0,828,829,1,0,0,0,829,830,5,8,0,0,830,63,1,
  	0,0,0,831,834,3,66,33,0,832,834,3,68,34,0,833,831,1,0,0,0,833,832,1,0,
  	0,0,834,65,1,0,0,0,835,836,5,68,0,0,836,67,1,0,0,0,837,838,5,69,0,0,838,
  	69,1,0,0,0,839,840,5,70,0,0,840,841,5,140,0,0,841,854,5,71,0,0,842,843,
  	5,70,0,0,843,844,5,140,0,0,844,845,5,71,0,0,845,846,5,140,0,0,846,847,
  	5,72,0,0,847,848,5,140,0,0,848,854,5,73,0,0,849,854,5,75,0,0,850,854,
  	5,76,0,0,851,854,5,77,0,0,852,854,5,78,0,0,853,839,1,0,0,0,853,842,1,
  	0,0,0,853,849,1,0,0,0,853,850,1,0,0,0,853,851,1,0,0,0,853,852,1,0,0,0,
  	854,71,1,0,0,0,855,856,3,74,37,0,856,73,1,0,0,0,857,864,3,78,39,0,858,
  	860,5,140,0,0,859,858,1,0,0,0,859,860,1,0,0,0,860,861,1,0,0,0,861,863,
  	3,76,38,0,862,859,1,0,0,0,863,866,1,0,0,0,864,862,1,0,0,0,864,865,1,0,
  	0,0,865,879,1,0,0,0,866,864,1,0,0,0,867,869,3,112,56,0,868,870,5,140,
  	0,0,869,868,1,0,0,0,869,870,1,0,0,0,870,872,1,0,0,0,871,867,1,0,0,0,872,
  	873,1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,875,1,0,0,0,875,876,3,
  	78,39,0,876,877,6,37,-1,0,877,879,1,0,0,0,878,857,1,0,0,0,878,871,1,0,
  	0,0,879,75,1,0,0,0,880,881,5,79,0,0,881,882,5,140,0,0,882,884,5,80,0,
  	0,883,885,5,140,0,0,884,883,1,0,0,0,884,885,1,0,0,0,885,886,1,0,0,0,886,
  	893,3,78,39,0,887,889,5,79,0,0,888,890,5,140,0,0,889,888,1,0,0,0,889,
  	890,1,0,0,0,890,891,1,0,0,0,891,893,3,78,39,0,892,880,1,0,0,0,892,887,
  	1,0,0,0,893,77,1,0,0,0,894,897,3,80,40,0,895,897,3,82,41,0,896,894,1,
  	0,0,0,896,895,1,0,0,0,897,79,1,0,0,0,898,900,3,88,44,0,899,901,5,140,
  	0,0,900,899,1,0,0,0,900,901,1,0,0,0,901,903,1,0,0,0,902,898,1,0,0,0,903,
  	906,1,0,0,0,904,902,1,0,0,0,904,905,1,0,0,0,905,907,1,0,0,0,906,904,1,
  	0,0,0,907,944,3,112,56,0,908,910,3,88,44,0,909,911,5,140,0,0,910,909,
  	1,0,0,0,910,911,1,0,0,0,911,913,1,0,0,0,912,908,1,0,0,0,913,916,1,0,0,
  	0,914,912,1,0,0,0,914,915,1,0,0,0,915,917,1,0,0,0,916,914,1,0,0,0,917,
  	924,3,86,43,0,918,920,5,140,0,0,919,918,1,0,0,0,919,920,1,0,0,0,920,921,
  	1,0,0,0,921,923,3,86,43,0,922,919,1,0,0,0,923,926,1,0,0,0,924,922,1,0,
  	0,0,924,925,1,0,0,0,925,931,1,0,0,0,926,924,1,0,0,0,927,929,5,140,0,0,
  	928,927,1,0,0,0,928,929,1,0,0,0,929,930,1,0,0,0,930,932,3,112,56,0,931,
  	928,1,0,0,0,931,932,1,0,0,0,932,944,1,0,0,0,933,935,3,88,44,0,934,936,
  	5,140,0,0,935,934,1,0,0,0,935,936,1,0,0,0,936,938,1,0,0,0,937,933,1,0,
  	0,0,938,939,1,0,0,0,939,937,1,0,0,0,939,940,1,0,0,0,940,941,1,0,0,0,941,
  	942,6,40,-1,0,942,944,1,0,0,0,943,904,1,0,0,0,943,914,1,0,0,0,943,937,
  	1,0,0,0,944,81,1,0,0,0,945,947,3,84,42,0,946,948,5,140,0,0,947,946,1,
  	0,0,0,947,948,1,0,0,0,948,950,1,0,0,0,949,945,1,0,0,0,950,951,1,0,0,0,
  	951,949,1,0,0,0,951,952,1,0,0,0,952,953,1,0,0,0,953,954,3,80,40,0,954,
  	83,1,0,0,0,955,957,3,88,44,0,956,958,5,140,0,0,957,956,1,0,0,0,957,958,
  	1,0,0,0,958,960,1,0,0,0,959,955,1,0,0,0,960,963,1,0,0,0,961,959,1,0,0,
  	0,961,962,1,0,0,0,962,970,1,0,0,0,963,961,1,0,0,0,964,966,3,86,43,0,965,
  	967,5,140,0,0,966,965,1,0,0,0,966,967,1,0,0,0,967,969,1,0,0,0,968,964,
  	1,0,0,0,969,972,1,0,0,0,970,968,1,0,0,0,970,971,1,0,0,0,971,973,1,0,0,
  	0,972,970,1,0,0,0,973,974,3,110,55,0,974,85,1,0,0,0,975,980,3,98,49,0,
  	976,980,3,100,50,0,977,980,3,104,52,0,978,980,3,108,54,0,979,975,1,0,
  	0,0,979,976,1,0,0,0,979,977,1,0,0,0,979,978,1,0,0,0,980,87,1,0,0,0,981,
  	986,3,94,47,0,982,986,3,96,48,0,983,986,3,92,46,0,984,986,3,90,45,0,985,
  	981,1,0,0,0,985,982,1,0,0,0,985,983,1,0,0,0,985,984,1,0,0,0,986,89,1,
  	0,0,0,987,1005,5,81,0,0,988,989,5,140,0,0,989,990,5,91,0,0,990,991,5,
  	140,0,0,991,993,5,82,0,0,992,994,5,140,0,0,993,992,1,0,0,0,993,994,1,
  	0,0,0,994,995,1,0,0,0,995,997,5,2,0,0,996,998,5,140,0,0,997,996,1,0,0,
  	0,997,998,1,0,0,0,998,999,1,0,0,0,999,1001,3,52,26,0,1000,1002,5,140,
  	0,0,1001,1000,1,0,0,0,1001,1002,1,0,0,0,1002,1003,1,0,0,0,1003,1004,5,
  	3,0,0,1004,1006,1,0,0,0,1005,988,1,0,0,0,1005,1006,1,0,0,0,1006,1007,
  	1,0,0,0,1007,1008,5,140,0,0,1008,1009,5,52,0,0,1009,1010,5,140,0,0,1010,
  	1024,3,20,10,0,1011,1013,5,140,0,0,1012,1011,1,0,0,0,1012,1013,1,0,0,
  	0,1013,1014,1,0,0,0,1014,1016,5,2,0,0,1015,1017,5,140,0,0,1016,1015,1,
  	0,0,0,1016,1017,1,0,0,0,1017,1018,1,0,0,0,1018,1020,3,22,11,0,1019,1021,
  	5,140,0,0,1020,1019,1,0,0,0,1020,1021,1,0,0,0,1021,1022,1,0,0,0,1022,
  	1023,5,3,0,0,1023,1025,1,0,0,0,1024,1012,1,0,0,0,1024,1025,1,0,0,0,1025,
  	1030,1,0,0,0,1026,1028,5,140,0,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,
  	1028,1029,1,0,0,0,1029,1031,3,128,64,0,1030,1027,1,0,0,0,1030,1031,1,
  	0,0,0,1031,91,1,0,0,0,1032,1033,5,47,0,0,1033,1034,5,140,0,0,1034,1035,
  	3,236,118,0,1035,93,1,0,0,0,1036,1037,5,83,0,0,1037,1039,5,140,0,0,1038,
  	1036,1,0,0,0,1038,1039,1,0,0,0,1039,1040,1,0,0,0,1040,1042,5,84,0,0,1041,
  	1043,5,140,0,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,1044,1,0,0,0,
  	1044,1049,3,130,65,0,1045,1047,5,140,0,0,1046,1045,1,0,0,0,1046,1047,
  	1,0,0,0,1047,1048,1,0,0,0,1048,1050,3,128,64,0,1049,1046,1,0,0,0,1049,
  	1050,1,0,0,0,1050,95,1,0,0,0,1051,1053,5,85,0,0,1052,1054,5,140,0,0,1053,
  	1052,1,0,0,0,1053,1054,1,0,0,0,1054,1055,1,0,0,0,1055,1056,3,170,85,0,
  	1056,1057,5,140,0,0,1057,1058,5,95,0,0,1058,1059,5,140,0,0,1059,1060,
  	3,250,125,0,1060,97,1,0,0,0,1061,1063,5,86,0,0,1062,1064,5,140,0,0,1063,
  	1062,1,0,0,0,1063,1064,1,0,0,0,1064,1065,1,0,0,0,1065,1066,3,130,65,0,
  	1066,99,1,0,0,0,1067,1069,5,87,0,0,1068,1070,5,140,0,0,1069,1068,1,0,
  	0,0,1069,1070,1,0,0,0,1070,1071,1,0,0,0,1071,1076,3,130,65,0,1072,1073,
  	5,140,0,0,1073,1075,3,102,51,0,1074,1072,1,0,0,0,1075,1078,1,0,0,0,1076,
  	1074,1,0,0,0,1076,1077,1,0,0,0,1077,101,1,0,0,0,1078,1076,1,0,0,0,1079,
  	1080,5,88,0,0,1080,1081,5,140,0,0,1081,1082,5,84,0,0,1082,1083,5,140,
  	0,0,1083,1090,3,104,52,0,1084,1085,5,88,0,0,1085,1086,5,140,0,0,1086,
  	1087,5,86,0,0,1087,1088,5,140,0,0,1088,1090,3,104,52,0,1089,1079,1,0,
  	0,0,1089,1084,1,0,0,0,1090,103,1,0,0,0,1091,1093,5,89,0,0,1092,1094,5,
  	140,0,0,1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,1095,1,0,0,0,1095,1106,
  	3,106,53,0,1096,1098,5,140,0,0,1097,1096,1,0,0,0,1097,1098,1,0,0,0,1098,
  	1099,1,0,0,0,1099,1101,5,4,0,0,1100,1102,5,140,0,0,1101,1100,1,0,0,0,
  	1101,1102,1,0,0,0,1102,1103,1,0,0,0,1103,1105,3,106,53,0,1104,1097,1,
  	0,0,0,1105,1108,1,0,0,0,1106,1104,1,0,0,0,1106,1107,1,0,0,0,1107,105,
  	1,0,0,0,1108,1106,1,0,0,0,1109,1111,3,256,128,0,1110,1112,5,140,0,0,1111,
  	1110,1,0,0,0,1111,1112,1,0,0,0,1112,1113,1,0,0,0,1113,1115,5,5,0,0,1114,
  	1116,5,140,0,0,1115,1114,1,0,0,0,1115,1116,1,0,0,0,1116,1117,1,0,0,0,
  	1117,1118,3,170,85,0,1118,107,1,0,0,0,1119,1121,5,90,0,0,1120,1122,5,
  	140,0,0,1121,1120,1,0,0,0,1121,1122,1,0,0,0,1122,1123,1,0,0,0,1123,1134,
  	3,170,85,0,1124,1126,5,140,0,0,1125,1124,1,0,0,0,1125,1126,1,0,0,0,1126,
  	1127,1,0,0,0,1127,1129,5,4,0,0,1128,1130,5,140,0,0,1129,1128,1,0,0,0,
  	1129,1130,1,0,0,0,1130,1131,1,0,0,0,1131,1133,3,170,85,0,1132,1125,1,
  	0,0,0,1133,1136,1,0,0,0,1134,1132,1,0,0,0,1134,1135,1,0,0,0,1135,109,
  	1,0,0,0,1136,1134,1,0,0,0,1137,1138,5,91,0,0,1138,1143,3,114,57,0,1139,
  	1141,5,140,0,0,1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,1142,1,0,0,0,
  	1142,1144,3,128,64,0,1143,1140,1,0,0,0,1143,1144,1,0,0,0,1144,111,1,0,
  	0,0,1145,1146,5,92,0,0,1146,1147,3,114,57,0,1147,113,1,0,0,0,1148,1150,
  	5,140,0,0,1149,1148,1,0,0,0,1149,1150,1,0,0,0,1150,1151,1,0,0,0,1151,
  	1153,5,93,0,0,1152,1149,1,0,0,0,1152,1153,1,0,0,0,1153,1154,1,0,0,0,1154,
  	1155,5,140,0,0,1155,1158,3,116,58,0,1156,1157,5,140,0,0,1157,1159,3,120,
  	60,0,1158,1156,1,0,0,0,1158,1159,1,0,0,0,1159,1162,1,0,0,0,1160,1161,
  	5,140,0,0,1161,1163,3,122,61,0,1162,1160,1,0,0,0,1162,1163,1,0,0,0,1163,
  	1166,1,0,0,0,1164,1165,5,140,0,0,1165,1167,3,124,62,0,1166,1164,1,0,0,
  	0,1166,1167,1,0,0,0,1167,115,1,0,0,0,1168,1179,5,94,0,0,1169,1171,5,140,
  	0,0,1170,1169,1,0,0,0,1170,1171,1,0,0,0,1171,1172,1,0,0,0,1172,1174,5,
  	4,0,0,1173,1175,5,140,0,0,1174,1173,1,0,0,0,1174,1175,1,0,0,0,1175,1176,
  	1,0,0,0,1176,1178,3,118,59,0,1177,1170,1,0,0,0,1178,1181,1,0,0,0,1179,
  	1177,1,0,0,0,1179,1180,1,0,0,0,1180,1197,1,0,0,0,1181,1179,1,0,0,0,1182,
  	1193,3,118,59,0,1183,1185,5,140,0,0,1184,1183,1,0,0,0,1184,1185,1,0,0,
  	0,1185,1186,1,0,0,0,1186,1188,5,4,0,0,1187,1189,5,140,0,0,1188,1187,1,
  	0,0,0,1188,1189,1,0,0,0,1189,1190,1,0,0,0,1190,1192,3,118,59,0,1191,1184,
  	1,0,0,0,1192,1195,1,0,0,0,1193,1191,1,0,0,0,1193,1194,1,0,0,0,1194,1197,
  	1,0,0,0,1195,1193,1,0,0,0,1196,1168,1,0,0,0,1196,1182,1,0,0,0,1197,117,
  	1,0,0,0,1198,1199,3,170,85,0,1199,1200,5,140,0,0,1200,1201,5,95,0,0,1201,
  	1202,5,140,0,0,1202,1203,3,250,125,0,1203,1206,1,0,0,0,1204,1206,3,170,
  	85,0,1205,1198,1,0,0,0,1205,1204,1,0,0,0,1206,119,1,0,0,0,1207,1208,5,
  	96,0,0,1208,1209,5,140,0,0,1209,1210,5,97,0,0,1210,1211,5,140,0,0,1211,
  	1219,3,126,63,0,1212,1214,5,4,0,0,1213,1215,5,140,0,0,1214,1213,1,0,0,
  	0,1214,1215,1,0,0,0,1215,1216,1,0,0,0,1216,1218,3,126,63,0,1217,1212,
  	1,0,0,0,1218,1221,1,0,0,0,1219,1217,1,0,0,0,1219,1220,1,0,0,0,1220,121,
  	1,0,0,0,1221,1219,1,0,0,0,1222,1223,5,98,0,0,1223,1224,5,140,0,0,1224,
  	1225,3,170,85,0,1225,123,1,0,0,0,1226,1227,5,99,0,0,1227,1228,5,140,0,
  	0,1228,1229,3,170,85,0,1229,125,1,0,0,0,1230,1235,3,170,85,0,1231,1233,
  	5,140,0,0,1232,1231,1,0,0,0,1232,1233,1,0,0,0,1233,1234,1,0,0,0,1234,
  	1236,7,0,0,0,1235,1232,1,0,0,0,1235,1236,1,0,0,0,1236,127,1,0,0,0,1237,
  	1238,5,104,0,0,1238,1239,5,140,0,0,1239,1240,3,170,85,0,1240,129,1,0,
  	0,0,1241,1252,3,132,66,0,1242,1244,5,140,0,0,1243,1242,1,0,0,0,1243,1244,
  	1,0,0,0,1244,1245,1,0,0,0,1245,1247,5,4,0,0,1246,1248,5,140,0,0,1247,
  	1246,1,0,0,0,1247,1248,1,0,0,0,1248,1249,1,0,0,0,1249,1251,3,132,66,0,
  	1250,1243,1,0,0,0,1251,1254,1,0,0,0,1252,1250,1,0,0,0,1252,1253,1,0,0,
  	0,1253,131,1,0,0,0,1254,1252,1,0,0,0,1255,1257,3,250,125,0,1256,1258,
  	5,140,0,0,1257,1256,1,0,0,0,1257,1258,1,0,0,0,1258,1259,1,0,0,0,1259,
  	1261,5,5,0,0,1260,1262,5,140,0,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,
  	1262,1263,1,0,0,0,1263,1264,3,134,67,0,1264,1267,1,0,0,0,1265,1267,3,
  	134,67,0,1266,1255,1,0,0,0,1266,1265,1,0,0,0,1267,133,1,0,0,0,1268,1269,
  	3,136,68,0,1269,135,1,0,0,0,1270,1277,3,138,69,0,1271,1273,5,140,0,0,
  	1272,1271,1,0,0,0,1272,1273,1,0,0,0,1273,1274,1,0,0,0,1274,1276,3,140,
  	70,0,1275,1272,1,0,0,0,1276,1279,1,0,0,0,1277,1275,1,0,0,0,1277,1278,
  	1,0,0,0,1278,1285,1,0,0,0,1279,1277,1,0,0,0,1280,1281,5,2,0,0,1281,1282,
  	3,136,68,0,1282,1283,5,3,0,0,1283,1285,1,0,0,0,1284,1270,1,0,0,0,1284,
  	1280,1,0,0,0,1285,137,1,0,0,0,1286,1288,5,2,0,0,1287,1289,5,140,0,0,1288,
  	1287,1,0,0,0,1288,1289,1,0,0,0,1289,1294,1,0,0,0,1290,1292,3,250,125,
  	0,1291,1293,5,140,0,0,1292,1291,1,0,0,0,1292,1293,1,0,0,0,1293,1295,1,
  	0,0,0,1294,1290,1,0,0,0,1294,1295,1,0,0,0,1295,1300,1,0,0,0,1296,1298,
  	3,150,75,0,1297,1299,5,140,0,0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,1299,
  	1301,1,0,0,0,1300,1296,1,0,0,0,1300,1301,1,0,0,0,1301,1306,1,0,0,0,1302,
  	1304,3,146,73,0,1303,1305,5,140,0,0,1304,1303,1,0,0,0,1304,1305,1,0,0,
  	0,1305,1307,1,0,0,0,1306,1302,1,0,0,0,1306,1307,1,0,0,0,1307,1308,1,0,
  	0,0,1308,1309,5,3,0,0,1309,139,1,0,0,0,1310,1312,3,142,71,0,1311,1313,
  	5,140,0,0,1312,1311,1,0,0,0,1312,1313,1,0,0,0,1313,1314,1,0,0,0,1314,
  	1315,3,138,69,0,1315,141,1,0,0,0,1316,1318,3,270,135,0,1317,1319,5,140,
  	0,0,1318,1317,1,0,0,0,1318,1319,1,0,0,0,1319,1320,1,0,0,0,1320,1322,3,
  	274,137,0,1321,1323,5,140,0,0,1322,1321,1,0,0,0,1322,1323,1,0,0,0,1323,
  	1325,1,0,0,0,1324,1326,3,144,72,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,
  	1326,1328,1,0,0,0,1327,1329,5,140,0,0,1328,1327,1,0,0,0,1328,1329,1,0,
  	0,0,1329,1330,1,0,0,0,1330,1331,3,274,137,0,1331,1361,1,0,0,0,1332,1334,
  	3,274,137,0,1333,1335,5,140,0,0,1334,1333,1,0,0,0,1334,1335,1,0,0,0,1335,
  	1337,1,0,0,0,1336,1338,3,144,72,0,1337,1336,1,0,0,0,1337,1338,1,0,0,0,
  	1338,1340,1,0,0,0,1339,1341,5,140,0,0,1340,1339,1,0,0,0,1340,1341,1,0,
  	0,0,1341,1342,1,0,0,0,1342,1344,3,274,137,0,1343,1345,5,140,0,0,1344,
  	1343,1,0,0,0,1344,1345,1,0,0,0,1345,1346,1,0,0,0,1346,1347,3,272,136,
  	0,1347,1361,1,0,0,0,1348,1350,3,274,137,0,1349,1351,5,140,0,0,1350,1349,
  	1,0,0,0,1350,1351,1,0,0,0,1351,1353,1,0,0,0,1352,1354,3,144,72,0,1353,
  	1352,1,0,0,0,1353,1354,1,0,0,0,1354,1356,1,0,0,0,1355,1357,5,140,0,0,
  	1356,1355,1,0,0,0,1356,1357,1,0,0,0,1357,1358,1,0,0,0,1358,1359,3,274,
  	137,0,1359,1361,1,0,0,0,1360,1316,1,0,0,0,1360,1332,1,0,0,0,1360,1348,
  	1,0,0,0,1361,143,1,0,0,0,1362,1364,5,7,0,0,1363,1365,5,140,0,0,1364,1363,
  	1,0,0,0,1364,1365,1,0,0,0,1365,1370,1,0,0,0,1366,1368,3,250,125,0,1367,
  	1369,5,140,0,0,1368,1367,1,0,0,0,1368,1369,1,0,0,0,1369,1371,1,0,0,0,
  	1370,1366,1,0,0,0,1370,1371,1,0,0,0,1371,1376,1,0,0,0,1372,1374,3,148,
  	74,0,1373,1375,5,140,0,0,1374,1373,1,0,0,0,1374,1375,1,0,0,0,1375,1377,
  	1,0,0,0,1376,1372,1,0,0,0,1376,1377,1,0,0,0,1377,1382,1,0,0,0,1378,1380,
  	3,154,77,0,1379,1381,5,140,0,0,1380,1379,1,0,0,0,1380,1381,1,0,0,0,1381,
  	1383,1,0,0,0,1382,1378,1,0,0,0,1382,1383,1,0,0,0,1383,1388,1,0,0,0,1384,
  	1386,3,146,73,0,1385,1387,5,140,0,0,1386,1385,1,0,0,0,1386,1387,1,0,0,
  	0,1387,1389,1,0,0,0,1388,1384,1,0,0,0,1388,1389,1,0,0,0,1389,1390,1,0,
  	0,0,1390,1391,5,8,0,0,1391,145,1,0,0,0,1392,1394,5,9,0,0,1393,1395,5,
  	140,0,0,1394,1393,1,0,0,0,1394,1395,1,0,0,0,1395,1429,1,0,0,0,1396,1398,
  	3,258,129,0,1397,1399,5,140,0,0,1398,1397,1,0,0,0,1398,1399,1,0,0,0,1399,
  	1400,1,0,0,0,1400,1402,5,6,0,0,1401,1403,5,140,0,0,1402,1401,1,0,0,0,
  	1402,1403,1,0,0,0,1403,1404,1,0,0,0,1404,1406,3,170,85,0,1405,1407,5,
  	140,0,0,1406,1405,1,0,0,0,1406,1407,1,0,0,0,1407,1426,1,0,0,0,1408,1410,
  	5,4,0,0,1409,1411,5,140,0,0,1410,1409,1,0,0,0,1410,1411,1,0,0,0,1411,
  	1412,1,0,0,0,1412,1414,3,258,129,0,1413,1415,5,140,0,0,1414,1413,1,0,
  	0,0,1414,1415,1,0,0,0,1415,1416,1,0,0,0,1416,1418,5,6,0,0,1417,1419,5,
  	140,0,0,1418,1417,1,0,0,0,1418,1419,1,0,0,0,1419,1420,1,0,0,0,1420,1422,
  	3,170,85,0,1421,1423,5,140,0,0,1422,1421,1,0,0,0,1422,1423,1,0,0,0,1423,
  	1425,1,0,0,0,1424,1408,1,0,0,0,1425,1428,1,0,0,0,1426,1424,1,0,0,0,1426,
  	1427,1,0,0,0,1427,1430,1,0,0,0,1428,1426,1,0,0,0,1429,1396,1,0,0,0,1429,
  	1430,1,0,0,0,1430,1431,1,0,0,0,1431,1432,5,10,0,0,1432,147,1,0,0,0,1433,
  	1435,5,6,0,0,1434,1436,5,140,0,0,1435,1434,1,0,0,0,1435,1436,1,0,0,0,
  	1436,1437,1,0,0,0,1437,1451,3,168,84,0,1438,1440,5,140,0,0,1439,1438,
  	1,0,0,0,1439,1440,1,0,0,0,1440,1441,1,0,0,0,1441,1443,5,11,0,0,1442,1444,
  	5,6,0,0,1443,1442,1,0,0,0,1443,1444,1,0,0,0,1444,1446,1,0,0,0,1445,1447,
  	5,140,0,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,1447,1448,1,0,0,0,1448,
  	1450,3,168,84,0,1449,1439,1,0,0,0,1450,1453,1,0,0,0,1451,1449,1,0,0,0,
  	1451,1452,1,0,0,0,1452,149,1,0,0,0,1453,1451,1,0,0,0,1454,1461,3,152,
  	76,0,1455,1457,5,140,0,0,1456,1455,1,0,0,0,1456,1457,1,0,0,0,1457,1458,
  	1,0,0,0,1458,1460,3,152,76,0,1459,1456,1,0,0,0,1460,1463,1,0,0,0,1461,
  	1459,1,0,0,0,1461,1462,1,0,0,0,1462,151,1,0,0,0,1463,1461,1,0,0,0,1464,
  	1466,5,6,0,0,1465,1467,5,140,0,0,1466,1465,1,0,0,0,1466,1467,1,0,0,0,
  	1467,1468,1,0,0,0,1468,1469,3,166,83,0,1469,153,1,0,0,0,1470,1472,5,94,
  	0,0,1471,1473,5,140,0,0,1472,1471,1,0,0,0,1472,1473,1,0,0,0,1473,1478,
  	1,0,0,0,1474,1479,5,105,0,0,1475,1476,5,80,0,0,1476,1477,5,140,0,0,1477,
  	1479,5,105,0,0,1478,1474,1,0,0,0,1478,1475,1,0,0,0,1478,1479,1,0,0,0,
  	1479,1481,1,0,0,0,1480,1482,5,140,0,0,1481,1480,1,0,0,0,1481,1482,1,0,
  	0,0,1482,1497,1,0,0,0,1483,1485,3,162,81,0,1484,1483,1,0,0,0,1484,1485,
  	1,0,0,0,1485,1487,1,0,0,0,1486,1488,5,140,0,0,1487,1486,1,0,0,0,1487,
  	1488,1,0,0,0,1488,1489,1,0,0,0,1489,1491,5,12,0,0,1490,1492,5,140,0,0,
  	1491,1490,1,0,0,0,1491,1492,1,0,0,0,1492,1494,1,0,0,0,1493,1495,3,164,
  	82,0,1494,1493,1,0,0,0,1494,1495,1,0,0,0,1495,1498,1,0,0,0,1496,1498,
  	3,260,130,0,1497,1484,1,0,0,0,1497,1496,1,0,0,0,1497,1498,1,0,0,0,1498,
  	1503,1,0,0,0,1499,1501,5,140,0,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,
  	1501,1502,1,0,0,0,1502,1504,3,156,78,0,1503,1500,1,0,0,0,1503,1504,1,
  	0,0,0,1504,155,1,0,0,0,1505,1507,5,2,0,0,1506,1508,5,140,0,0,1507,1506,
  	1,0,0,0,1507,1508,1,0,0,0,1508,1509,1,0,0,0,1509,1511,3,250,125,0,1510,
  	1512,5,140,0,0,1511,1510,1,0,0,0,1511,1512,1,0,0,0,1512,1513,1,0,0,0,
  	1513,1515,5,4,0,0,1514,1516,5,140,0,0,1515,1514,1,0,0,0,1515,1516,1,0,
  	0,0,1516,1517,1,0,0,0,1517,1526,3,250,125,0,1518,1520,5,140,0,0,1519,
  	1518,1,0,0,0,1519,1520,1,0,0,0,1520,1521,1,0,0,0,1521,1523,5,11,0,0,1522,
  	1524,5,140,0,0,1523,1522,1,0,0,0,1523,1524,1,0,0,0,1524,1525,1,0,0,0,
  	1525,1527,3,128,64,0,1526,1519,1,0,0,0,1526,1527,1,0,0,0,1527,1547,1,
  	0,0,0,1528,1530,5,140,0,0,1529,1528,1,0,0,0,1529,1530,1,0,0,0,1530,1531,
  	1,0,0,0,1531,1533,5,11,0,0,1532,1534,5,140,0,0,1533,1532,1,0,0,0,1533,
  	1534,1,0,0,0,1534,1535,1,0,0,0,1535,1537,3,160,80,0,1536,1538,5,140,0,
  	0,1537,1536,1,0,0,0,1537,1538,1,0,0,0,1538,1539,1,0,0,0,1539,1541,5,4,
  	0,0,1540,1542,5,140,0,0,1541,1540,1,0,0,0,1541,1542,1,0,0,0,1542,1543,
  	1,0,0,0,1543,1545,3,158,79,0,1544,1546,5,140,0,0,1545,1544,1,0,0,0,1545,
  	1546,1,0,0,0,1546,1548,1,0,0,0,1547,1529,1,0,0,0,1547,1548,1,0,0,0,1548,
  	1549,1,0,0,0,1549,1550,5,3,0,0,1550,157,1,0,0,0,1551,1553,5,9,0,0,1552,
  	1554,5,140,0,0,1553,1552,1,0,0,0,1553,1554,1,0,0,0,1554,1556,1,0,0,0,
  	1555,1557,3,116,58,0,1556,1555,1,0,0,0,1556,1557,1,0,0,0,1557,1559,1,
  	0,0,0,1558,1560,5,140,0,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,1560,1561,
  	1,0,0,0,1561,1562,5,10,0,0,1562,159,1,0,0,0,1563,1565,5,9,0,0,1564,1566,
  	5,140,0,0,1565,1564,1,0,0,0,1565,1566,1,0,0,0,1566,1568,1,0,0,0,1567,
  	1569,3,116,58,0,1568,1567,1,0,0,0,1568,1569,1,0,0,0,1569,1571,1,0,0,0,
  	1570,1572,5,140,0,0,1571,1570,1,0,0,0,1571,1572,1,0,0,0,1572,1573,1,0,
  	0,0,1573,1574,5,10,0,0,1574,161,1,0,0,0,1575,1576,5,128,0,0,1576,163,
  	1,0,0,0,1577,1578,5,128,0,0,1578,165,1,0,0,0,1579,1580,3,264,132,0,1580,
  	167,1,0,0,0,1581,1582,3,264,132,0,1582,169,1,0,0,0,1583,1584,3,172,86,
  	0,1584,171,1,0,0,0,1585,1592,3,174,87,0,1586,1587,5,140,0,0,1587,1588,
  	5,106,0,0,1588,1589,5,140,0,0,1589,1591,3,174,87,0,1590,1586,1,0,0,0,
  	1591,1594,1,0,0,0,1592,1590,1,0,0,0,1592,1593,1,0,0,0,1593,173,1,0,0,
  	0,1594,1592,1,0,0,0,1595,1602,3,176,88,0,1596,1597,5,140,0,0,1597,1598,
  	5,107,0,0,1598,1599,5,140,0,0,1599,1601,3,176,88,0,1600,1596,1,0,0,0,
  	1601,1604,1,0,0,0,1602,1600,1,0,0,0,1602,1603,1,0,0,0,1603,175,1,0,0,
  	0,1604,1602,1,0,0,0,1605,1612,3,178,89,0,1606,1607,5,140,0,0,1607,1608,
  	5,108,0,0,1608,1609,5,140,0,0,1609,1611,3,178,89,0,1610,1606,1,0,0,0,
  	1611,1614,1,0,0,0,1612,1610,1,0,0,0,1612,1613,1,0,0,0,1613,177,1,0,0,
  	0,1614,1612,1,0,0,0,1615,1617,5,109,0,0,1616,1618,5,140,0,0,1617,1616,
  	1,0,0,0,1617,1618,1,0,0,0,1618,1620,1,0,0,0,1619,1615,1,0,0,0,1619,1620,
  	1,0,0,0,1620,1621,1,0,0,0,1621,1622,3,180,90,0,1622,179,1,0,0,0,1623,
  	1633,3,184,92,0,1624,1626,5,140,0,0,1625,1624,1,0,0,0,1625,1626,1,0,0,
  	0,1626,1627,1,0,0,0,1627,1629,3,182,91,0,1628,1630,5,140,0,0,1629,1628,
  	1,0,0,0,1629,1630,1,0,0,0,1630,1631,1,0,0,0,1631,1632,3,184,92,0,1632,
  	1634,1,0,0,0,1633,1625,1,0,0,0,1633,1634,1,0,0,0,1634,1672,1,0,0,0,1635,
  	1637,3,184,92,0,1636,1638,5,140,0,0,1637,1636,1,0,0,0,1637,1638,1,0,0,
  	0,1638,1639,1,0,0,0,1639,1641,5,110,0,0,1640,1642,5,140,0,0,1641,1640,
  	1,0,0,0,1641,1642,1,0,0,0,1642,1643,1,0,0,0,1643,1644,3,184,92,0,1644,
  	1645,1,0,0,0,1645,1646,6,90,-1,0,1646,1672,1,0,0,0,1647,1649,3,184,92,
  	0,1648,1650,5,140,0,0,1649,1648,1,0,0,0,1649,1650,1,0,0,0,1650,1651,1,
  	0,0,0,1651,1653,3,182,91,0,1652,1654,5,140,0,0,1653,1652,1,0,0,0,1653,
  	1654,1,0,0,0,1654,1655,1,0,0,0,1655,1665,3,184,92,0,1656,1658,5,140,0,
  	0,1657,1656,1,0,0,0,1657,1658,1,0,0,0,1658,1659,1,0,0,0,1659,1661,3,182,
  	91,0,1660,1662,5,140,0,0,1661,1660,1,0,0,0,1661,1662,1,0,0,0,1662,1663,
  	1,0,0,0,1663,1664,3,184,92,0,1664,1666,1,0,0,0,1665,1657,1,0,0,0,1666,
  	1667,1,0,0,0,1667,1665,1,0,0,0,1667,1668,1,0,0,0,1668,1669,1,0,0,0,1669,
  	1670,6,90,-1,0,1670,1672,1,0,0,0,1671,1623,1,0,0,0,1671,1635,1,0,0,0,
  	1671,1647,1,0,0,0,1672,181,1,0,0,0,1673,1674,7,1,0,0,1674,183,1,0,0,0,
  	1675,1686,3,186,93,0,1676,1678,5,140,0,0,1677,1676,1,0,0,0,1677,1678,
  	1,0,0,0,1678,1679,1,0,0,0,1679,1681,5,11,0,0,1680,1682,5,140,0,0,1681,
  	1680,1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,0,0,0,1683,1685,3,186,93,0,
  	1684,1677,1,0,0,0,1685,1688,1,0,0,0,1686,1684,1,0,0,0,1686,1687,1,0,0,
  	0,1687,185,1,0,0,0,1688,1686,1,0,0,0,1689,1700,3,188,94,0,1690,1692,5,
  	140,0,0,1691,1690,1,0,0,0,1691,1692,1,0,0,0,1692,1693,1,0,0,0,1693,1695,
  	5,18,0,0,1694,1696,5,140,0,0,1695,1694,1,0,0,0,1695,1696,1,0,0,0,1696,
  	1697,1,0,0,0,1697,1699,3,188,94,0,1698,1691,1,0,0,0,1699,1702,1,0,0,0,
  	1700,1698,1,0,0,0,1700,1701,1,0,0,0,1701,187,1,0,0,0,1702,1700,1,0,0,
  	0,1703,1715,3,192,96,0,1704,1706,5,140,0,0,1705,1704,1,0,0,0,1705,1706,
  	1,0,0,0,1706,1707,1,0,0,0,1707,1709,3,190,95,0,1708,1710,5,140,0,0,1709,
  	1708,1,0,0,0,1709,1710,1,0,0,0,1710,1711,1,0,0,0,1711,1712,3,192,96,0,
  	1712,1714,1,0,0,0,1713,1705,1,0,0,0,1714,1717,1,0,0,0,1715,1713,1,0,0,
  	0,1715,1716,1,0,0,0,1716,189,1,0,0,0,1717,1715,1,0,0,0,1718,1719,7,2,
  	0,0,1719,191,1,0,0,0,1720,1732,3,196,98,0,1721,1723,5,140,0,0,1722,1721,
  	1,0,0,0,1722,1723,1,0,0,0,1723,1724,1,0,0,0,1724,1726,3,194,97,0,1725,
  	1727,5,140,0,0,1726,1725,1,0,0,0,1726,1727,1,0,0,0,1727,1728,1,0,0,0,
  	1728,1729,3,196,98,0,1729,1731,1,0,0,0,1730,1722,1,0,0,0,1731,1734,1,
  	0,0,0,1732,1730,1,0,0,0,1732,1733,1,0,0,0,1733,193,1,0,0,0,1734,1732,
  	1,0,0,0,1735,1736,7,3,0,0,1736,195,1,0,0,0,1737,1749,3,200,100,0,1738,
  	1740,5,140,0,0,1739,1738,1,0,0,0,1739,1740,1,0,0,0,1740,1741,1,0,0,0,
  	1741,1743,3,198,99,0,1742,1744,5,140,0,0,1743,1742,1,0,0,0,1743,1744,
  	1,0,0,0,1744,1745,1,0,0,0,1745,1746,3,200,100,0,1746,1748,1,0,0,0,1747,
  	1739,1,0,0,0,1748,1751,1,0,0,0,1749,1747,1,0,0,0,1749,1750,1,0,0,0,1750,
  	197,1,0,0,0,1751,1749,1,0,0,0,1752,1753,7,4,0,0,1753,199,1,0,0,0,1754,
  	1765,3,202,101,0,1755,1757,5,140,0,0,1756,1755,1,0,0,0,1756,1757,1,0,
  	0,0,1757,1758,1,0,0,0,1758,1760,5,24,0,0,1759,1761,5,140,0,0,1760,1759,
  	1,0,0,0,1760,1761,1,0,0,0,1761,1762,1,0,0,0,1762,1764,3,202,101,0,1763,
  	1756,1,0,0,0,1764,1767,1,0,0,0,1765,1763,1,0,0,0,1765,1766,1,0,0,0,1766,
  	201,1,0,0,0,1767,1765,1,0,0,0,1768,1770,5,111,0,0,1769,1771,5,140,0,0,
  	1770,1769,1,0,0,0,1770,1771,1,0,0,0,1771,1773,1,0,0,0,1772,1768,1,0,0,
  	0,1772,1773,1,0,0,0,1773,1774,1,0,0,0,1774,1779,3,204,102,0,1775,1777,
  	5,140,0,0,1776,1775,1,0,0,0,1776,1777,1,0,0,0,1777,1778,1,0,0,0,1778,
  	1780,5,112,0,0,1779,1776,1,0,0,0,1779,1780,1,0,0,0,1780,203,1,0,0,0,1781,
  	1789,3,218,109,0,1782,1790,3,212,106,0,1783,1785,3,206,103,0,1784,1783,
  	1,0,0,0,1785,1786,1,0,0,0,1786,1784,1,0,0,0,1786,1787,1,0,0,0,1787,1790,
  	1,0,0,0,1788,1790,3,216,108,0,1789,1782,1,0,0,0,1789,1784,1,0,0,0,1789,
  	1788,1,0,0,0,1789,1790,1,0,0,0,1790,205,1,0,0,0,1791,1794,3,208,104,0,
  	1792,1794,3,210,105,0,1793,1791,1,0,0,0,1793,1792,1,0,0,0,1794,207,1,
  	0,0,0,1795,1796,5,7,0,0,1796,1797,3,170,85,0,1797,1798,5,8,0,0,1798,209,
  	1,0,0,0,1799,1801,5,7,0,0,1800,1802,3,170,85,0,1801,1800,1,0,0,0,1801,
  	1802,1,0,0,0,1802,1803,1,0,0,0,1803,1805,5,6,0,0,1804,1806,3,170,85,0,
  	1805,1804,1,0,0,0,1805,1806,1,0,0,0,1806,1807,1,0,0,0,1807,1808,5,8,0,
  	0,1808,211,1,0,0,0,1809,1821,3,214,107,0,1810,1811,5,140,0,0,1811,1812,
  	5,113,0,0,1812,1813,5,140,0,0,1813,1821,5,91,0,0,1814,1815,5,140,0,0,
  	1815,1816,5,114,0,0,1816,1817,5,140,0,0,1817,1821,5,91,0,0,1818,1819,
  	5,140,0,0,1819,1821,5,115,0,0,1820,1809,1,0,0,0,1820,1810,1,0,0,0,1820,
  	1814,1,0,0,0,1820,1818,1,0,0,0,1821,1823,1,0,0,0,1822,1824,5,140,0,0,
  	1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,1825,1,0,0,0,1825,1826,3,218,
  	109,0,1826,213,1,0,0,0,1827,1829,5,140,0,0,1828,1827,1,0,0,0,1828,1829,
  	1,0,0,0,1829,1830,1,0,0,0,1830,1831,5,25,0,0,1831,215,1,0,0,0,1832,1833,
  	5,140,0,0,1833,1834,5,116,0,0,1834,1835,5,140,0,0,1835,1843,5,117,0,0,
  	1836,1837,5,140,0,0,1837,1838,5,116,0,0,1838,1839,5,140,0,0,1839,1840,
  	5,109,0,0,1840,1841,5,140,0,0,1841,1843,5,117,0,0,1842,1832,1,0,0,0,1842,
  	1836,1,0,0,0,1843,217,1,0,0,0,1844,1851,3,220,110,0,1845,1847,5,140,0,
  	0,1846,1845,1,0,0,0,1846,1847,1,0,0,0,1847,1848,1,0,0,0,1848,1850,3,244,
  	122,0,1849,1846,1,0,0,0,1850,1853,1,0,0,0,1851,1849,1,0,0,0,1851,1852,
  	1,0,0,0,1852,219,1,0,0,0,1853,1851,1,0,0,0,1854,1862,3,222,111,0,1855,
  	1862,3,254,127,0,1856,1862,3,246,123,0,1857,1862,3,234,117,0,1858,1862,
  	3,236,118,0,1859,1862,3,242,121,0,1860,1862,3,250,125,0,1861,1854,1,0,
  	0,0,1861,1855,1,0,0,0,1861,1856,1,0,0,0,1861,1857,1,0,0,0,1861,1858,1,
  	0,0,0,1861,1859,1,0,0,0,1861,1860,1,0,0,0,1862,221,1,0,0,0,1863,1870,
  	3,252,126,0,1864,1870,5,126,0,0,1865,1870,3,224,112,0,1866,1870,5,117,
  	0,0,1867,1870,3,226,113,0,1868,1870,3,230,115,0,1869,1863,1,0,0,0,1869,
  	1864,1,0,0,0,1869,1865,1,0,0,0,1869,1866,1,0,0,0,1869,1867,1,0,0,0,1869,
  	1868,1,0,0,0,1870,223,1,0,0,0,1871,1872,7,5,0,0,1872,225,1,0,0,0,1873,
  	1875,5,7,0,0,1874,1876,5,140,0,0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,
  	1876,1890,1,0,0,0,1877,1879,3,170,85,0,1878,1880,5,140,0,0,1879,1878,
  	1,0,0,0,1879,1880,1,0,0,0,1880,1887,1,0,0,0,1881,1883,3,228,114,0,1882,
  	1884,5,140,0,0,1883,1882,1,0,0,0,1883,1884,1,0,0,0,1884,1886,1,0,0,0,
  	1885,1881,1,0,0,0,1886,1889,1,0,0,0,1887,1885,1,0,0,0,1887,1888,1,0,0,
  	0,1888,1891,1,0,0,0,1889,1887,1,0,0,0,1890,1877,1,0,0,0,1890,1891,1,0,
  	0,0,1891,1892,1,0,0,0,1892,1893,5,8,0,0,1893,227,1,0,0,0,1894,1896,5,
  	4,0,0,1895,1897,5,140,0,0,1896,1895,1,0,0,0,1896,1897,1,0,0,0,1897,1899,
  	1,0,0,0,1898,1900,3,170,85,0,1899,1898,1,0,0,0,1899,1900,1,0,0,0,1900,
  	229,1,0,0,0,1901,1903,5,9,0,0,1902,1904,5,140,0,0,1903,1902,1,0,0,0,1903,
  	1904,1,0,0,0,1904,1905,1,0,0,0,1905,1907,3,232,116,0,1906,1908,5,140,
  	0,0,1907,1906,1,0,0,0,1907,1908,1,0,0,0,1908,1919,1,0,0,0,1909,1911,5,
  	4,0,0,1910,1912,5,140,0,0,1911,1910,1,0,0,0,1911,1912,1,0,0,0,1912,1913,
  	1,0,0,0,1913,1915,3,232,116,0,1914,1916,5,140,0,0,1915,1914,1,0,0,0,1915,
  	1916,1,0,0,0,1916,1918,1,0,0,0,1917,1909,1,0,0,0,1918,1921,1,0,0,0,1919,
  	1917,1,0,0,0,1919,1920,1,0,0,0,1920,1922,1,0,0,0,1921,1919,1,0,0,0,1922,
  	1923,5,10,0,0,1923,231,1,0,0,0,1924,1927,3,266,133,0,1925,1927,5,126,
  	0,0,1926,1924,1,0,0,0,1926,1925,1,0,0,0,1927,1929,1,0,0,0,1928,1930,5,
  	140,0,0,1929,1928,1,0,0,0,1929,1930,1,0,0,0,1930,1931,1,0,0,0,1931,1933,
  	5,6,0,0,1932,1934,5,140,0,0,1933,1932,1,0,0,0,1933,1934,1,0,0,0,1934,
  	1935,1,0,0,0,1935,1936,3,170,85,0,1936,233,1,0,0,0,1937,1939,5,2,0,0,
  	1938,1940,5,140,0,0,1939,1938,1,0,0,0,1939,1940,1,0,0,0,1940,1941,1,0,
  	0,0,1941,1943,3,170,85,0,1942,1944,5,140,0,0,1943,1942,1,0,0,0,1943,1944,
  	1,0,0,0,1944,1945,1,0,0,0,1945,1946,5,3,0,0,1946,235,1,0,0,0,1947,1949,
  	3,238,119,0,1948,1950,5,140,0,0,1949,1948,1,0,0,0,1949,1950,1,0,0,0,1950,
  	1951,1,0,0,0,1951,1953,5,2,0,0,1952,1954,5,140,0,0,1953,1952,1,0,0,0,
  	1953,1954,1,0,0,0,1954,1955,1,0,0,0,1955,1957,5,94,0,0,1956,1958,5,140,
  	0,0,1957,1956,1,0,0,0,1957,1958,1,0,0,0,1958,1959,1,0,0,0,1959,1960,5,
  	3,0,0,1960,1997,1,0,0,0,1961,1963,3,238,119,0,1962,1964,5,140,0,0,1963,
  	1962,1,0,0,0,1963,1964,1,0,0,0,1964,1965,1,0,0,0,1965,1967,5,2,0,0,1966,
  	1968,5,140,0,0,1967,1966,1,0,0,0,1967,1968,1,0,0,0,1968,1973,1,0,0,0,
  	1969,1971,5,93,0,0,1970,1972,5,140,0,0,1971,1970,1,0,0,0,1971,1972,1,
  	0,0,0,1972,1974,1,0,0,0,1973,1969,1,0,0,0,1973,1974,1,0,0,0,1974,1992,
  	1,0,0,0,1975,1977,3,240,120,0,1976,1978,5,140,0,0,1977,1976,1,0,0,0,1977,
  	1978,1,0,0,0,1978,1989,1,0,0,0,1979,1981,5,4,0,0,1980,1982,5,140,0,0,
  	1981,1980,1,0,0,0,1981,1982,1,0,0,0,1982,1983,1,0,0,0,1983,1985,3,240,
  	120,0,1984,1986,5,140,0,0,1985,1984,1,0,0,0,1985,1986,1,0,0,0,1986,1988,
  	1,0,0,0,1987,1979,1,0,0,0,1988,1991,1,0,0,0,1989,1987,1,0,0,0,1989,1990,
  	1,0,0,0,1990,1993,1,0,0,0,1991,1989,1,0,0,0,1992,1975,1,0,0,0,1992,1993,
  	1,0,0,0,1993,1994,1,0,0,0,1994,1995,5,3,0,0,1995,1997,1,0,0,0,1996,1947,
  	1,0,0,0,1996,1961,1,0,0,0,1997,237,1,0,0,0,1998,1999,3,266,133,0,1999,
  	239,1,0,0,0,2000,2002,3,266,133,0,2001,2003,5,140,0,0,2002,2001,1,0,0,
  	0,2002,2003,1,0,0,0,2003,2004,1,0,0,0,2004,2005,5,6,0,0,2005,2007,5,5,
  	0,0,2006,2008,5,140,0,0,2007,2006,1,0,0,0,2007,2008,1,0,0,0,2008,2010,
  	1,0,0,0,2009,2000,1,0,0,0,2009,2010,1,0,0,0,2010,2011,1,0,0,0,2011,2012,
  	3,170,85,0,2012,241,1,0,0,0,2013,2015,5,120,0,0,2014,2016,5,140,0,0,2015,
  	2014,1,0,0,0,2015,2016,1,0,0,0,2016,2017,1,0,0,0,2017,2019,5,9,0,0,2018,
  	2020,5,140,0,0,2019,2018,1,0,0,0,2019,2020,1,0,0,0,2020,2021,1,0,0,0,
  	2021,2023,5,84,0,0,2022,2024,5,140,0,0,2023,2022,1,0,0,0,2023,2024,1,
  	0,0,0,2024,2025,1,0,0,0,2025,2030,3,130,65,0,2026,2028,5,140,0,0,2027,
  	2026,1,0,0,0,2027,2028,1,0,0,0,2028,2029,1,0,0,0,2029,2031,3,128,64,0,
  	2030,2027,1,0,0,0,2030,2031,1,0,0,0,2031,2033,1,0,0,0,2032,2034,5,140,
  	0,0,2033,2032,1,0,0,0,2033,2034,1,0,0,0,2034,2035,1,0,0,0,2035,2036,5,
  	10,0,0,2036,243,1,0,0,0,2037,2039,5,26,0,0,2038,2040,5,140,0,0,2039,2038,
  	1,0,0,0,2039,2040,1,0,0,0,2040,2043,1,0,0,0,2041,2044,3,258,129,0,2042,
  	2044,5,94,0,0,2043,2041,1,0,0,0,2043,2042,1,0,0,0,2044,245,1,0,0,0,2045,
  	2050,5,121,0,0,2046,2048,5,140,0,0,2047,2046,1,0,0,0,2047,2048,1,0,0,
  	0,2048,2049,1,0,0,0,2049,2051,3,248,124,0,2050,2047,1,0,0,0,2051,2052,
  	1,0,0,0,2052,2050,1,0,0,0,2052,2053,1,0,0,0,2053,2068,1,0,0,0,2054,2056,
  	5,121,0,0,2055,2057,5,140,0,0,2056,2055,1,0,0,0,2056,2057,1,0,0,0,2057,
  	2058,1,0,0,0,2058,2063,3,170,85,0,2059,2061,5,140,0,0,2060,2059,1,0,0,
  	0,2060,2061,1,0,0,0,2061,2062,1,0,0,0,2062,2064,3,248,124,0,2063,2060,
  	1,0,0,0,2064,2065,1,0,0,0,2065,2063,1,0,0,0,2065,2066,1,0,0,0,2066,2068,
  	1,0,0,0,2067,2045,1,0,0,0,2067,2054,1,0,0,0,2068,2077,1,0,0,0,2069,2071,
  	5,140,0,0,2070,2069,1,0,0,0,2070,2071,1,0,0,0,2071,2072,1,0,0,0,2072,
  	2074,5,122,0,0,2073,2075,5,140,0,0,2074,2073,1,0,0,0,2074,2075,1,0,0,
  	0,2075,2076,1,0,0,0,2076,2078,3,170,85,0,2077,2070,1,0,0,0,2077,2078,
  	1,0,0,0,2078,2080,1,0,0,0,2079,2081,5,140,0,0,2080,2079,1,0,0,0,2080,
  	2081,1,0,0,0,2081,2082,1,0,0,0,2082,2083,5,123,0,0,2083,247,1,0,0,0,2084,
  	2086,5,124,0,0,2085,2087,5,140,0,0,2086,2085,1,0,0,0,2086,2087,1,0,0,
  	0,2087,2088,1,0,0,0,2088,2090,3,170,85,0,2089,2091,5,140,0,0,2090,2089,
  	1,0,0,0,2090,2091,1,0,0,0,2091,2092,1,0,0,0,2092,2094,5,125,0,0,2093,
  	2095,5,140,0,0,2094,2093,1,0,0,0,2094,2095,1,0,0,0,2095,2096,1,0,0,0,
  	2096,2097,3,170,85,0,2097,249,1,0,0,0,2098,2099,3,266,133,0,2099,251,
  	1,0,0,0,2100,2103,3,262,131,0,2101,2103,3,260,130,0,2102,2100,1,0,0,0,
  	2102,2101,1,0,0,0,2103,253,1,0,0,0,2104,2107,5,27,0,0,2105,2108,3,266,
  	133,0,2106,2108,5,128,0,0,2107,2105,1,0,0,0,2107,2106,1,0,0,0,2108,255,
  	1,0,0,0,2109,2111,3,220,110,0,2110,2112,5,140,0,0,2111,2110,1,0,0,0,2111,
  	2112,1,0,0,0,2112,2113,1,0,0,0,2113,2114,3,244,122,0,2114,257,1,0,0,0,
  	2115,2116,3,264,132,0,2116,259,1,0,0,0,2117,2118,5,128,0,0,2118,261,1,
  	0,0,0,2119,2120,5,135,0,0,2120,263,1,0,0,0,2121,2122,3,266,133,0,2122,
  	265,1,0,0,0,2123,2129,5,136,0,0,2124,2125,5,139,0,0,2125,2129,6,133,-1,
  	0,2126,2129,5,129,0,0,2127,2129,3,268,134,0,2128,2123,1,0,0,0,2128,2124,
  	1,0,0,0,2128,2126,1,0,0,0,2128,2127,1,0,0,0,2129,267,1,0,0,0,2130,2131,
  	5,48,0,0,2131,269,1,0,0,0,2132,2133,7,6,0,0,2133,271,1,0,0,0,2134,2135,
  	7,7,0,0,2135,273,1,0,0,0,2136,2137,7,8,0,0,2137,275,1,0,0,0,367,277,280,
  	283,287,290,293,306,316,320,324,328,338,342,346,351,364,368,380,384,406,
  	410,413,416,419,422,426,431,435,445,449,454,459,464,470,474,478,483,490,
  	494,498,501,505,509,514,519,523,533,543,547,551,555,560,572,576,580,584,
  	588,590,594,598,600,614,618,622,626,631,634,638,642,644,648,652,654,692,
  	703,725,729,734,745,749,753,761,765,769,775,779,783,789,793,797,801,805,
  	809,815,822,827,833,853,859,864,869,873,878,884,889,892,896,900,904,910,
  	914,919,924,928,931,935,939,943,947,951,957,961,966,970,979,985,993,997,
  	1001,1005,1012,1016,1020,1024,1027,1030,1038,1042,1046,1049,1053,1063,
  	1069,1076,1089,1093,1097,1101,1106,1111,1115,1121,1125,1129,1134,1140,
  	1143,1149,1152,1158,1162,1166,1170,1174,1179,1184,1188,1193,1196,1205,
  	1214,1219,1232,1235,1243,1247,1252,1257,1261,1266,1272,1277,1284,1288,
  	1292,1294,1298,1300,1304,1306,1312,1318,1322,1325,1328,1334,1337,1340,
  	1344,1350,1353,1356,1360,1364,1368,1370,1374,1376,1380,1382,1386,1388,
  	1394,1398,1402,1406,1410,1414,1418,1422,1426,1429,1435,1439,1443,1446,
  	1451,1456,1461,1466,1472,1478,1481,1484,1487,1491,1494,1497,1500,1503,
  	1507,1511,1515,1519,1523,1526,1529,1533,1537,1541,1545,1547,1553,1556,
  	1559,1565,1568,1571,1592,1602,1612,1617,1619,1625,1629,1633,1637,1641,
  	1649,1653,1657,1661,1667,1671,1677,1681,1686,1691,1695,1700,1705,1709,
  	1715,1722,1726,1732,1739,1743,1749,1756,1760,1765,1770,1772,1776,1779,
  	1786,1789,1793,1801,1805,1820,1823,1828,1842,1846,1851,1861,1869,1875,
  	1879,1883,1887,1890,1896,1899,1903,1907,1911,1915,1919,1926,1929,1933,
  	1939,1943,1949,1953,1957,1963,1967,1971,1973,1977,1981,1985,1989,1992,
  	1996,2002,2007,2009,2015,2019,2023,2027,2030,2033,2039,2043,2047,2052,
  	2056,2060,2065,2067,2070,2074,2077,2080,2086,2090,2094,2102,2107,2111,
  	2128
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cypherParserStaticData = staticData.release();
}

}

CypherParser::CypherParser(TokenStream *input) : CypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CypherParser::CypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  CypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *cypherParserStaticData->atn, cypherParserStaticData->decisionToDFA, cypherParserStaticData->sharedContextCache, options);
}

CypherParser::~CypherParser() {
  delete _interpreter;
}

const atn::ATN& CypherParser::getATN() const {
  return *cypherParserStaticData->atn;
}

std::string CypherParser::getGrammarFileName() const {
  return "Cypher.g4";
}

const std::vector<std::string>& CypherParser::getRuleNames() const {
  return cypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& CypherParser::getVocabulary() const {
  return cypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CypherParser::getSerializedATN() const {
  return cypherParserStaticData->serializedATN;
}


//----------------- OC_CypherContext ------------------------------------------------------------------

CypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CypherContext::EOF() {
  return getToken(CypherParser::EOF, 0);
}

CypherParser::OC_StatementContext* CypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<CypherParser::OC_StatementContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CypherContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_AnyCypherOptionContext* CypherParser::OC_CypherContext::oC_AnyCypherOption() {
  return getRuleContext<CypherParser::OC_AnyCypherOptionContext>(0);
}


size_t CypherParser::OC_CypherContext::getRuleIndex() const {
  return CypherParser::RuleOC_Cypher;
}


CypherParser::OC_CypherContext* CypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 0, CypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(277);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
    case 1: {
      setState(276);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(280);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::EXPLAIN

    || _la == CypherParser::PROFILE) {
      setState(279);
      oC_AnyCypherOption();
    }
    setState(283);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(282);
      match(CypherParser::SP);
    }

    setState(285);
    oC_Statement();
    setState(290);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      setState(287);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(286);
        match(CypherParser::SP);
      }
      setState(289);
      match(CypherParser::T__0);
      break;
    }

    default:
      break;
    }
    setState(293);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(292);
      match(CypherParser::SP);
    }
    setState(295);
    match(CypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

CypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_QueryContext* CypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

CypherParser::KU_DDLContext* CypherParser::OC_StatementContext::kU_DDL() {
  return getRuleContext<CypherParser::KU_DDLContext>(0);
}

CypherParser::KU_CopyFromContext* CypherParser::OC_StatementContext::kU_CopyFrom() {
  return getRuleContext<CypherParser::KU_CopyFromContext>(0);
}

CypherParser::KU_CopyFromByColumnContext* CypherParser::OC_StatementContext::kU_CopyFromByColumn() {
  return getRuleContext<CypherParser::KU_CopyFromByColumnContext>(0);
}

CypherParser::KU_CopyTOContext* CypherParser::OC_StatementContext::kU_CopyTO() {
  return getRuleContext<CypherParser::KU_CopyTOContext>(0);
}

CypherParser::KU_StandaloneCallContext* CypherParser::OC_StatementContext::kU_StandaloneCall() {
  return getRuleContext<CypherParser::KU_StandaloneCallContext>(0);
}

CypherParser::KU_CreateMacroContext* CypherParser::OC_StatementContext::kU_CreateMacro() {
  return getRuleContext<CypherParser::KU_CreateMacroContext>(0);
}

CypherParser::KU_CommentOnContext* CypherParser::OC_StatementContext::kU_CommentOn() {
  return getRuleContext<CypherParser::KU_CommentOnContext>(0);
}

CypherParser::KU_TransactionContext* CypherParser::OC_StatementContext::kU_Transaction() {
  return getRuleContext<CypherParser::KU_TransactionContext>(0);
}


size_t CypherParser::OC_StatementContext::getRuleIndex() const {
  return CypherParser::RuleOC_Statement;
}


CypherParser::OC_StatementContext* CypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 2, CypherParser::RuleOC_Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(306);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(297);
      oC_Query();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(298);
      kU_DDL();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(299);
      kU_CopyFrom();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(300);
      kU_CopyFromByColumn();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(301);
      kU_CopyTO();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(302);
      kU_StandaloneCall();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(303);
      kU_CreateMacro();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(304);
      kU_CommentOn();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(305);
      kU_Transaction();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromContext ------------------------------------------------------------------

CypherParser::KU_CopyFromContext::KU_CopyFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_FilePathsContext* CypherParser::KU_CopyFromContext::kU_FilePaths() {
  return getRuleContext<CypherParser::KU_FilePathsContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_CopyFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFrom;
}


CypherParser::KU_CopyFromContext* CypherParser::kU_CopyFrom() {
  KU_CopyFromContext *_localctx = _tracker.createInstance<KU_CopyFromContext>(_ctx, getState());
  enterRule(_localctx, 4, CypherParser::RuleKU_CopyFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(308);
    match(CypherParser::COPY);
    setState(309);
    match(CypherParser::SP);
    setState(310);
    oC_SchemaName();
    setState(311);
    match(CypherParser::SP);
    setState(312);
    match(CypherParser::FROM);
    setState(313);
    match(CypherParser::SP);
    setState(314);
    kU_FilePaths();
    setState(328);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      setState(316);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(315);
        match(CypherParser::SP);
      }
      setState(318);
      match(CypherParser::T__1);
      setState(320);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(319);
        match(CypherParser::SP);
      }
      setState(322);
      kU_ParsingOptions();
      setState(324);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(323);
        match(CypherParser::SP);
      }
      setState(326);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromByColumnContext ------------------------------------------------------------------

CypherParser::KU_CopyFromByColumnContext::KU_CopyFromByColumnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromByColumnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COLUMN() {
  return getToken(CypherParser::COLUMN, 0);
}


size_t CypherParser::KU_CopyFromByColumnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFromByColumn;
}


CypherParser::KU_CopyFromByColumnContext* CypherParser::kU_CopyFromByColumn() {
  KU_CopyFromByColumnContext *_localctx = _tracker.createInstance<KU_CopyFromByColumnContext>(_ctx, getState());
  enterRule(_localctx, 6, CypherParser::RuleKU_CopyFromByColumn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(330);
    match(CypherParser::COPY);
    setState(331);
    match(CypherParser::SP);
    setState(332);
    oC_SchemaName();
    setState(333);
    match(CypherParser::SP);
    setState(334);
    match(CypherParser::FROM);
    setState(335);
    match(CypherParser::SP);
    setState(336);
    match(CypherParser::T__1);
    setState(338);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(337);
      match(CypherParser::SP);
    }
    setState(340);
    match(CypherParser::StringLiteral);
    setState(351);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__3 || _la == CypherParser::SP) {
      setState(342);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(341);
        match(CypherParser::SP);
      }
      setState(344);
      match(CypherParser::T__3);
      setState(346);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(345);
        match(CypherParser::SP);
      }
      setState(348);
      match(CypherParser::StringLiteral);
      setState(353);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(354);
    match(CypherParser::T__2);
    setState(355);
    match(CypherParser::SP);
    setState(356);
    match(CypherParser::BY);
    setState(357);
    match(CypherParser::SP);
    setState(358);
    match(CypherParser::COLUMN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyTOContext ------------------------------------------------------------------

CypherParser::KU_CopyTOContext::KU_CopyTOContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyTOContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_QueryContext* CypherParser::KU_CopyTOContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::TO() {
  return getToken(CypherParser::TO, 0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_CopyTOContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyTO;
}


CypherParser::KU_CopyTOContext* CypherParser::kU_CopyTO() {
  KU_CopyTOContext *_localctx = _tracker.createInstance<KU_CopyTOContext>(_ctx, getState());
  enterRule(_localctx, 8, CypherParser::RuleKU_CopyTO);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(360);
    match(CypherParser::COPY);
    setState(361);
    match(CypherParser::SP);
    setState(362);
    match(CypherParser::T__1);
    setState(364);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(363);
      match(CypherParser::SP);
    }
    setState(366);
    oC_Query();
    setState(368);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(367);
      match(CypherParser::SP);
    }
    setState(370);
    match(CypherParser::T__2);
    setState(371);
    match(CypherParser::SP);
    setState(372);
    match(CypherParser::TO);
    setState(373);
    match(CypherParser::SP);
    setState(374);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StandaloneCallContext ------------------------------------------------------------------

CypherParser::KU_StandaloneCallContext::KU_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StandaloneCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StandaloneCallContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_StandaloneCallContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}


size_t CypherParser::KU_StandaloneCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_StandaloneCall;
}


CypherParser::KU_StandaloneCallContext* CypherParser::kU_StandaloneCall() {
  KU_StandaloneCallContext *_localctx = _tracker.createInstance<KU_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 10, CypherParser::RuleKU_StandaloneCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(376);
    match(CypherParser::CALL);
    setState(377);
    match(CypherParser::SP);
    setState(378);
    oC_SymbolicName();
    setState(380);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(379);
      match(CypherParser::SP);
    }
    setState(382);
    match(CypherParser::T__4);
    setState(384);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(383);
      match(CypherParser::SP);
    }
    setState(386);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CommentOnContext ------------------------------------------------------------------

CypherParser::KU_CommentOnContext::KU_CommentOnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::COMMENT() {
  return getToken(CypherParser::COMMENT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CommentOnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::ON() {
  return getToken(CypherParser::ON, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CommentOnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_CommentOnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CommentOn;
}


CypherParser::KU_CommentOnContext* CypherParser::kU_CommentOn() {
  KU_CommentOnContext *_localctx = _tracker.createInstance<KU_CommentOnContext>(_ctx, getState());
  enterRule(_localctx, 12, CypherParser::RuleKU_CommentOn);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(388);
    match(CypherParser::COMMENT);
    setState(389);
    match(CypherParser::SP);
    setState(390);
    match(CypherParser::ON);
    setState(391);
    match(CypherParser::SP);
    setState(392);
    match(CypherParser::TABLE);
    setState(393);
    match(CypherParser::SP);
    setState(394);
    oC_SchemaName();
    setState(395);
    match(CypherParser::SP);
    setState(396);
    match(CypherParser::IS);
    setState(397);
    match(CypherParser::SP);
    setState(398);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateMacroContext ------------------------------------------------------------------

CypherParser::KU_CreateMacroContext::KU_CreateMacroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateMacroContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::MACRO() {
  return getToken(CypherParser::MACRO, 0);
}

CypherParser::OC_FunctionNameContext* CypherParser::KU_CreateMacroContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_CreateMacroContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::KU_PositionalArgsContext* CypherParser::KU_CreateMacroContext::kU_PositionalArgs() {
  return getRuleContext<CypherParser::KU_PositionalArgsContext>(0);
}

std::vector<CypherParser::KU_DefaultArgContext *> CypherParser::KU_CreateMacroContext::kU_DefaultArg() {
  return getRuleContexts<CypherParser::KU_DefaultArgContext>();
}

CypherParser::KU_DefaultArgContext* CypherParser::KU_CreateMacroContext::kU_DefaultArg(size_t i) {
  return getRuleContext<CypherParser::KU_DefaultArgContext>(i);
}


size_t CypherParser::KU_CreateMacroContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateMacro;
}


CypherParser::KU_CreateMacroContext* CypherParser::kU_CreateMacro() {
  KU_CreateMacroContext *_localctx = _tracker.createInstance<KU_CreateMacroContext>(_ctx, getState());
  enterRule(_localctx, 14, CypherParser::RuleKU_CreateMacro);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(400);
    match(CypherParser::CREATE);
    setState(401);
    match(CypherParser::SP);
    setState(402);
    match(CypherParser::MACRO);
    setState(403);
    match(CypherParser::SP);
    setState(404);
    oC_FunctionName();
    setState(406);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(405);
      match(CypherParser::SP);
    }
    setState(408);
    match(CypherParser::T__1);
    setState(410);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx)) {
    case 1: {
      setState(409);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(413);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      setState(412);
      kU_PositionalArgs();
      break;
    }

    default:
      break;
    }
    setState(416);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      setState(415);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(419);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COMMENT || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 1153) != 0)) {
      setState(418);
      kU_DefaultArg();
    }
    setState(431);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(422);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(421);
          match(CypherParser::SP);
        }
        setState(424);
        match(CypherParser::T__3);
        setState(426);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(425);
          match(CypherParser::SP);
        }
        setState(428);
        kU_DefaultArg(); 
      }
      setState(433);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    }
    setState(435);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(434);
      match(CypherParser::SP);
    }
    setState(437);
    match(CypherParser::T__2);
    setState(438);
    match(CypherParser::SP);
    setState(439);
    match(CypherParser::AS);
    setState(440);
    match(CypherParser::SP);
    setState(441);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PositionalArgsContext ------------------------------------------------------------------

CypherParser::KU_PositionalArgsContext::KU_PositionalArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_PositionalArgsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_PositionalArgsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PositionalArgsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PositionalArgsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PositionalArgsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PositionalArgs;
}


CypherParser::KU_PositionalArgsContext* CypherParser::kU_PositionalArgs() {
  KU_PositionalArgsContext *_localctx = _tracker.createInstance<KU_PositionalArgsContext>(_ctx, getState());
  enterRule(_localctx, 16, CypherParser::RuleKU_PositionalArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(443);
    oC_SymbolicName();
    setState(454);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(445);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(444);
          match(CypherParser::SP);
        }
        setState(447);
        match(CypherParser::T__3);
        setState(449);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(448);
          match(CypherParser::SP);
        }
        setState(451);
        oC_SymbolicName(); 
      }
      setState(456);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultArgContext ------------------------------------------------------------------

CypherParser::KU_DefaultArgContext::KU_DefaultArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DefaultArgContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_DefaultArgContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DefaultArgContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_DefaultArgContext::getRuleIndex() const {
  return CypherParser::RuleKU_DefaultArg;
}


CypherParser::KU_DefaultArgContext* CypherParser::kU_DefaultArg() {
  KU_DefaultArgContext *_localctx = _tracker.createInstance<KU_DefaultArgContext>(_ctx, getState());
  enterRule(_localctx, 18, CypherParser::RuleKU_DefaultArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(457);
    oC_SymbolicName();
    setState(459);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(458);
      match(CypherParser::SP);
    }
    setState(461);
    match(CypherParser::T__5);
    setState(462);
    match(CypherParser::T__4);
    setState(464);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(463);
      match(CypherParser::SP);
    }
    setState(466);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FilePathsContext ------------------------------------------------------------------

CypherParser::KU_FilePathsContext::KU_FilePathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::GLOB() {
  return getToken(CypherParser::GLOB, 0);
}


size_t CypherParser::KU_FilePathsContext::getRuleIndex() const {
  return CypherParser::RuleKU_FilePaths;
}


CypherParser::KU_FilePathsContext* CypherParser::kU_FilePaths() {
  KU_FilePathsContext *_localctx = _tracker.createInstance<KU_FilePathsContext>(_ctx, getState());
  enterRule(_localctx, 20, CypherParser::RuleKU_FilePaths);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(501);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 1);
        setState(468);
        match(CypherParser::T__6);
        setState(470);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(469);
          match(CypherParser::SP);
        }
        setState(472);
        match(CypherParser::StringLiteral);
        setState(483);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__3 || _la == CypherParser::SP) {
          setState(474);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(473);
            match(CypherParser::SP);
          }
          setState(476);
          match(CypherParser::T__3);
          setState(478);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(477);
            match(CypherParser::SP);
          }
          setState(480);
          match(CypherParser::StringLiteral);
          setState(485);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(486);
        match(CypherParser::T__7);
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(487);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::GLOB: {
        enterOuterAlt(_localctx, 3);
        setState(488);
        match(CypherParser::GLOB);
        setState(490);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(489);
          match(CypherParser::SP);
        }
        setState(492);
        match(CypherParser::T__1);
        setState(494);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(493);
          match(CypherParser::SP);
        }
        setState(496);
        match(CypherParser::StringLiteral);
        setState(498);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(497);
          match(CypherParser::SP);
        }
        setState(500);
        match(CypherParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ParsingOptionsContext ------------------------------------------------------------------

CypherParser::KU_ParsingOptionsContext::KU_ParsingOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ParsingOptionContext *> CypherParser::KU_ParsingOptionsContext::kU_ParsingOption() {
  return getRuleContexts<CypherParser::KU_ParsingOptionContext>();
}

CypherParser::KU_ParsingOptionContext* CypherParser::KU_ParsingOptionsContext::kU_ParsingOption(size_t i) {
  return getRuleContext<CypherParser::KU_ParsingOptionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ParsingOptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ParsingOptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ParsingOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_ParsingOptions;
}


CypherParser::KU_ParsingOptionsContext* CypherParser::kU_ParsingOptions() {
  KU_ParsingOptionsContext *_localctx = _tracker.createInstance<KU_ParsingOptionsContext>(_ctx, getState());
  enterRule(_localctx, 22, CypherParser::RuleKU_ParsingOptions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(503);
    kU_ParsingOption();
    setState(514);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(505);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(504);
          match(CypherParser::SP);
        }
        setState(507);
        match(CypherParser::T__3);
        setState(509);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(508);
          match(CypherParser::SP);
        }
        setState(511);
        kU_ParsingOption(); 
      }
      setState(516);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ParsingOptionContext ------------------------------------------------------------------

CypherParser::KU_ParsingOptionContext::KU_ParsingOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_ParsingOptionContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_ParsingOptionContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ParsingOptionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ParsingOptionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ParsingOptionContext::getRuleIndex() const {
  return CypherParser::RuleKU_ParsingOption;
}


CypherParser::KU_ParsingOptionContext* CypherParser::kU_ParsingOption() {
  KU_ParsingOptionContext *_localctx = _tracker.createInstance<KU_ParsingOptionContext>(_ctx, getState());
  enterRule(_localctx, 24, CypherParser::RuleKU_ParsingOption);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(517);
    oC_SymbolicName();
    setState(519);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(518);
      match(CypherParser::SP);
    }
    setState(521);
    match(CypherParser::T__4);
    setState(523);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(522);
      match(CypherParser::SP);
    }
    setState(525);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DDLContext ------------------------------------------------------------------

CypherParser::KU_DDLContext::KU_DDLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_CreateNodeTableContext* CypherParser::KU_DDLContext::kU_CreateNodeTable() {
  return getRuleContext<CypherParser::KU_CreateNodeTableContext>(0);
}

CypherParser::KU_CreateRelTableContext* CypherParser::KU_DDLContext::kU_CreateRelTable() {
  return getRuleContext<CypherParser::KU_CreateRelTableContext>(0);
}

CypherParser::KU_CreateRelTableGroupContext* CypherParser::KU_DDLContext::kU_CreateRelTableGroup() {
  return getRuleContext<CypherParser::KU_CreateRelTableGroupContext>(0);
}

CypherParser::KU_CreateRdfGraphContext* CypherParser::KU_DDLContext::kU_CreateRdfGraph() {
  return getRuleContext<CypherParser::KU_CreateRdfGraphContext>(0);
}

CypherParser::KU_DropTableContext* CypherParser::KU_DDLContext::kU_DropTable() {
  return getRuleContext<CypherParser::KU_DropTableContext>(0);
}

CypherParser::KU_AlterTableContext* CypherParser::KU_DDLContext::kU_AlterTable() {
  return getRuleContext<CypherParser::KU_AlterTableContext>(0);
}


size_t CypherParser::KU_DDLContext::getRuleIndex() const {
  return CypherParser::RuleKU_DDL;
}


CypherParser::KU_DDLContext* CypherParser::kU_DDL() {
  KU_DDLContext *_localctx = _tracker.createInstance<KU_DDLContext>(_ctx, getState());
  enterRule(_localctx, 26, CypherParser::RuleKU_DDL);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(533);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(527);
      kU_CreateNodeTable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(528);
      kU_CreateRelTable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(529);
      kU_CreateRelTableGroup();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(530);
      kU_CreateRdfGraph();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(531);
      kU_DropTable();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(532);
      kU_AlterTable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeTableContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeTableContext::KU_CreateNodeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateNodeTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateNodeTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_CreateNodeConstraintContext* CypherParser::KU_CreateNodeTableContext::kU_CreateNodeConstraint() {
  return getRuleContext<CypherParser::KU_CreateNodeConstraintContext>(0);
}


size_t CypherParser::KU_CreateNodeTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeTable;
}


CypherParser::KU_CreateNodeTableContext* CypherParser::kU_CreateNodeTable() {
  KU_CreateNodeTableContext *_localctx = _tracker.createInstance<KU_CreateNodeTableContext>(_ctx, getState());
  enterRule(_localctx, 28, CypherParser::RuleKU_CreateNodeTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(535);
    match(CypherParser::CREATE);
    setState(536);
    match(CypherParser::SP);
    setState(537);
    match(CypherParser::NODE);
    setState(538);
    match(CypherParser::SP);
    setState(539);
    match(CypherParser::TABLE);
    setState(540);
    match(CypherParser::SP);
    setState(541);
    oC_SchemaName();
    setState(543);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(542);
      match(CypherParser::SP);
    }
    setState(545);
    match(CypherParser::T__1);
    setState(547);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(546);
      match(CypherParser::SP);
    }
    setState(549);
    kU_PropertyDefinitions();
    setState(551);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(550);
      match(CypherParser::SP);
    }

    setState(553);
    match(CypherParser::T__3);
    setState(555);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(554);
      match(CypherParser::SP);
    }
    setState(557);
    kU_CreateNodeConstraint();
    setState(560);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(559);
      match(CypherParser::SP);
    }
    setState(562);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableContext::KU_CreateRelTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableContext::kU_RelTableConnection() {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTable;
}


CypherParser::KU_CreateRelTableContext* CypherParser::kU_CreateRelTable() {
  KU_CreateRelTableContext *_localctx = _tracker.createInstance<KU_CreateRelTableContext>(_ctx, getState());
  enterRule(_localctx, 30, CypherParser::RuleKU_CreateRelTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(564);
    match(CypherParser::CREATE);
    setState(565);
    match(CypherParser::SP);
    setState(566);
    match(CypherParser::REL);
    setState(567);
    match(CypherParser::SP);
    setState(568);
    match(CypherParser::TABLE);
    setState(569);
    match(CypherParser::SP);
    setState(570);
    oC_SchemaName();
    setState(572);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(571);
      match(CypherParser::SP);
    }
    setState(574);
    match(CypherParser::T__1);
    setState(576);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(575);
      match(CypherParser::SP);
    }
    setState(578);
    kU_RelTableConnection();
    setState(580);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(579);
      match(CypherParser::SP);
    }
    setState(590);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      setState(582);
      match(CypherParser::T__3);
      setState(584);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(583);
        match(CypherParser::SP);
      }
      setState(586);
      kU_PropertyDefinitions();
      setState(588);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(587);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(600);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__3) {
      setState(592);
      match(CypherParser::T__3);
      setState(594);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(593);
        match(CypherParser::SP);
      }
      setState(596);
      oC_SymbolicName();
      setState(598);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(597);
        match(CypherParser::SP);
      }
    }
    setState(602);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableGroupContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableGroupContext::KU_CreateRelTableGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableGroupContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::GROUP() {
  return getToken(CypherParser::GROUP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

std::vector<CypherParser::KU_RelTableConnectionContext *> CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection() {
  return getRuleContexts<CypherParser::KU_RelTableConnectionContext>();
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection(size_t i) {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(i);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableGroupContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableGroupContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTableGroup;
}


CypherParser::KU_CreateRelTableGroupContext* CypherParser::kU_CreateRelTableGroup() {
  KU_CreateRelTableGroupContext *_localctx = _tracker.createInstance<KU_CreateRelTableGroupContext>(_ctx, getState());
  enterRule(_localctx, 32, CypherParser::RuleKU_CreateRelTableGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(604);
    match(CypherParser::CREATE);
    setState(605);
    match(CypherParser::SP);
    setState(606);
    match(CypherParser::REL);
    setState(607);
    match(CypherParser::SP);
    setState(608);
    match(CypherParser::TABLE);
    setState(609);
    match(CypherParser::SP);
    setState(610);
    match(CypherParser::GROUP);
    setState(611);
    match(CypherParser::SP);
    setState(612);
    oC_SchemaName();
    setState(614);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(613);
      match(CypherParser::SP);
    }
    setState(616);
    match(CypherParser::T__1);
    setState(618);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(617);
      match(CypherParser::SP);
    }
    setState(620);
    kU_RelTableConnection();
    setState(622);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(621);
      match(CypherParser::SP);
    }
    setState(629); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(624);
              match(CypherParser::T__3);
              setState(626);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(625);
                match(CypherParser::SP);
              }
              setState(628);
              kU_RelTableConnection();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(631); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(634);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(633);
      match(CypherParser::SP);
    }
    setState(644);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
    case 1: {
      setState(636);
      match(CypherParser::T__3);
      setState(638);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(637);
        match(CypherParser::SP);
      }
      setState(640);
      kU_PropertyDefinitions();
      setState(642);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(641);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(654);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__3) {
      setState(646);
      match(CypherParser::T__3);
      setState(648);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(647);
        match(CypherParser::SP);
      }
      setState(650);
      oC_SymbolicName();
      setState(652);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(651);
        match(CypherParser::SP);
      }
    }
    setState(656);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RelTableConnectionContext ------------------------------------------------------------------

CypherParser::KU_RelTableConnectionContext::KU_RelTableConnectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RelTableConnectionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_RelTableConnectionContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RelTableConnectionContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RelTableConnectionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RelTableConnection;
}


CypherParser::KU_RelTableConnectionContext* CypherParser::kU_RelTableConnection() {
  KU_RelTableConnectionContext *_localctx = _tracker.createInstance<KU_RelTableConnectionContext>(_ctx, getState());
  enterRule(_localctx, 34, CypherParser::RuleKU_RelTableConnection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(658);
    match(CypherParser::FROM);
    setState(659);
    match(CypherParser::SP);
    setState(660);
    oC_SchemaName();
    setState(661);
    match(CypherParser::SP);
    setState(662);
    match(CypherParser::TO);
    setState(663);
    match(CypherParser::SP);
    setState(664);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRdfGraphContext ------------------------------------------------------------------

CypherParser::KU_CreateRdfGraphContext::KU_CreateRdfGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRdfGraphContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::RDF() {
  return getToken(CypherParser::RDF, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::GRAPH() {
  return getToken(CypherParser::GRAPH, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRdfGraphContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_CreateRdfGraphContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRdfGraph;
}


CypherParser::KU_CreateRdfGraphContext* CypherParser::kU_CreateRdfGraph() {
  KU_CreateRdfGraphContext *_localctx = _tracker.createInstance<KU_CreateRdfGraphContext>(_ctx, getState());
  enterRule(_localctx, 36, CypherParser::RuleKU_CreateRdfGraph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(666);
    match(CypherParser::CREATE);
    setState(667);
    match(CypherParser::SP);
    setState(668);
    match(CypherParser::RDF);
    setState(669);
    match(CypherParser::SP);
    setState(670);
    match(CypherParser::GRAPH);
    setState(671);
    match(CypherParser::SP);
    setState(672);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropTableContext ------------------------------------------------------------------

CypherParser::KU_DropTableContext::KU_DropTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropTableContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DropTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DropTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_DropTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DropTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_DropTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropTable;
}


CypherParser::KU_DropTableContext* CypherParser::kU_DropTable() {
  KU_DropTableContext *_localctx = _tracker.createInstance<KU_DropTableContext>(_ctx, getState());
  enterRule(_localctx, 38, CypherParser::RuleKU_DropTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(674);
    match(CypherParser::DROP);
    setState(675);
    match(CypherParser::SP);
    setState(676);
    match(CypherParser::TABLE);
    setState(677);
    match(CypherParser::SP);
    setState(678);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterTableContext ------------------------------------------------------------------

CypherParser::KU_AlterTableContext::KU_AlterTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AlterTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AlterTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_AlterOptionsContext* CypherParser::KU_AlterTableContext::kU_AlterOptions() {
  return getRuleContext<CypherParser::KU_AlterOptionsContext>(0);
}


size_t CypherParser::KU_AlterTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterTable;
}


CypherParser::KU_AlterTableContext* CypherParser::kU_AlterTable() {
  KU_AlterTableContext *_localctx = _tracker.createInstance<KU_AlterTableContext>(_ctx, getState());
  enterRule(_localctx, 40, CypherParser::RuleKU_AlterTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(680);
    match(CypherParser::ALTER);
    setState(681);
    match(CypherParser::SP);
    setState(682);
    match(CypherParser::TABLE);
    setState(683);
    match(CypherParser::SP);
    setState(684);
    oC_SchemaName();
    setState(685);
    match(CypherParser::SP);
    setState(686);
    kU_AlterOptions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterOptionsContext ------------------------------------------------------------------

CypherParser::KU_AlterOptionsContext::KU_AlterOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_AddPropertyContext* CypherParser::KU_AlterOptionsContext::kU_AddProperty() {
  return getRuleContext<CypherParser::KU_AddPropertyContext>(0);
}

CypherParser::KU_DropPropertyContext* CypherParser::KU_AlterOptionsContext::kU_DropProperty() {
  return getRuleContext<CypherParser::KU_DropPropertyContext>(0);
}

CypherParser::KU_RenameTableContext* CypherParser::KU_AlterOptionsContext::kU_RenameTable() {
  return getRuleContext<CypherParser::KU_RenameTableContext>(0);
}

CypherParser::KU_RenamePropertyContext* CypherParser::KU_AlterOptionsContext::kU_RenameProperty() {
  return getRuleContext<CypherParser::KU_RenamePropertyContext>(0);
}


size_t CypherParser::KU_AlterOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterOptions;
}


CypherParser::KU_AlterOptionsContext* CypherParser::kU_AlterOptions() {
  KU_AlterOptionsContext *_localctx = _tracker.createInstance<KU_AlterOptionsContext>(_ctx, getState());
  enterRule(_localctx, 42, CypherParser::RuleKU_AlterOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(692);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(688);
      kU_AddProperty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(689);
      kU_DropProperty();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(690);
      kU_RenameTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(691);
      kU_RenameProperty();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddPropertyContext ------------------------------------------------------------------

CypherParser::KU_AddPropertyContext::KU_AddPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AddPropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_AddPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_AddPropertyContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::DEFAULT() {
  return getToken(CypherParser::DEFAULT, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_AddPropertyContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_AddPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddProperty;
}


CypherParser::KU_AddPropertyContext* CypherParser::kU_AddProperty() {
  KU_AddPropertyContext *_localctx = _tracker.createInstance<KU_AddPropertyContext>(_ctx, getState());
  enterRule(_localctx, 44, CypherParser::RuleKU_AddProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(694);
    match(CypherParser::ADD);
    setState(695);
    match(CypherParser::SP);
    setState(696);
    oC_PropertyKeyName();
    setState(697);
    match(CypherParser::SP);
    setState(698);
    kU_DataType(0);
    setState(703);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      setState(699);
      match(CypherParser::SP);
      setState(700);
      match(CypherParser::DEFAULT);
      setState(701);
      match(CypherParser::SP);
      setState(702);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropPropertyContext ------------------------------------------------------------------

CypherParser::KU_DropPropertyContext::KU_DropPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_DropPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_DropPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropProperty;
}


CypherParser::KU_DropPropertyContext* CypherParser::kU_DropProperty() {
  KU_DropPropertyContext *_localctx = _tracker.createInstance<KU_DropPropertyContext>(_ctx, getState());
  enterRule(_localctx, 46, CypherParser::RuleKU_DropProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(705);
    match(CypherParser::DROP);
    setState(706);
    match(CypherParser::SP);
    setState(707);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenameTableContext ------------------------------------------------------------------

CypherParser::KU_RenameTableContext::KU_RenameTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenameTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::TO() {
  return getToken(CypherParser::TO, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RenameTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_RenameTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameTable;
}


CypherParser::KU_RenameTableContext* CypherParser::kU_RenameTable() {
  KU_RenameTableContext *_localctx = _tracker.createInstance<KU_RenameTableContext>(_ctx, getState());
  enterRule(_localctx, 48, CypherParser::RuleKU_RenameTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(709);
    match(CypherParser::RENAME);
    setState(710);
    match(CypherParser::SP);
    setState(711);
    match(CypherParser::TO);
    setState(712);
    match(CypherParser::SP);
    setState(713);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenamePropertyContext ------------------------------------------------------------------

CypherParser::KU_RenamePropertyContext::KU_RenamePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenamePropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RenamePropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameProperty;
}


CypherParser::KU_RenamePropertyContext* CypherParser::kU_RenameProperty() {
  KU_RenamePropertyContext *_localctx = _tracker.createInstance<KU_RenamePropertyContext>(_ctx, getState());
  enterRule(_localctx, 50, CypherParser::RuleKU_RenameProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(715);
    match(CypherParser::RENAME);
    setState(716);
    match(CypherParser::SP);
    setState(717);
    oC_PropertyKeyName();
    setState(718);
    match(CypherParser::SP);
    setState(719);
    match(CypherParser::TO);
    setState(720);
    match(CypherParser::SP);
    setState(721);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsContext::KU_PropertyDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionContext *> CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionContext>();
}

CypherParser::KU_PropertyDefinitionContext* CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitions;
}


CypherParser::KU_PropertyDefinitionsContext* CypherParser::kU_PropertyDefinitions() {
  KU_PropertyDefinitionsContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 52, CypherParser::RuleKU_PropertyDefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(723);
    kU_PropertyDefinition();
    setState(734);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(725);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(724);
          match(CypherParser::SP);
        }
        setState(727);
        match(CypherParser::T__3);
        setState(729);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(728);
          match(CypherParser::SP);
        }
        setState(731);
        kU_PropertyDefinition(); 
      }
      setState(736);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionContext::KU_PropertyDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertyDefinitionContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_PropertyDefinitionContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinition;
}


CypherParser::KU_PropertyDefinitionContext* CypherParser::kU_PropertyDefinition() {
  KU_PropertyDefinitionContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 54, CypherParser::RuleKU_PropertyDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(737);
    oC_PropertyKeyName();
    setState(738);
    match(CypherParser::SP);
    setState(739);
    kU_DataType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeConstraintContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeConstraintContext::KU_CreateNodeConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::PRIMARY() {
  return getToken(CypherParser::PRIMARY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeConstraintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_CreateNodeConstraintContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_CreateNodeConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeConstraint;
}


CypherParser::KU_CreateNodeConstraintContext* CypherParser::kU_CreateNodeConstraint() {
  KU_CreateNodeConstraintContext *_localctx = _tracker.createInstance<KU_CreateNodeConstraintContext>(_ctx, getState());
  enterRule(_localctx, 56, CypherParser::RuleKU_CreateNodeConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(741);
    match(CypherParser::PRIMARY);
    setState(742);
    match(CypherParser::SP);
    setState(743);
    match(CypherParser::KEY);
    setState(745);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(744);
      match(CypherParser::SP);
    }
    setState(747);
    match(CypherParser::T__1);
    setState(749);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(748);
      match(CypherParser::SP);
    }
    setState(751);
    oC_PropertyKeyName();
    setState(753);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(752);
      match(CypherParser::SP);
    }
    setState(755);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DataTypeContext ------------------------------------------------------------------

CypherParser::KU_DataTypeContext::KU_DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DataTypeContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_DataTypeContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DataTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::KU_DataTypeContext *> CypherParser::KU_DataTypeContext::kU_DataType() {
  return getRuleContexts<CypherParser::KU_DataTypeContext>();
}

CypherParser::KU_DataTypeContext* CypherParser::KU_DataTypeContext::kU_DataType(size_t i) {
  return getRuleContext<CypherParser::KU_DataTypeContext>(i);
}

CypherParser::KU_ListIdentifiersContext* CypherParser::KU_DataTypeContext::kU_ListIdentifiers() {
  return getRuleContext<CypherParser::KU_ListIdentifiersContext>(0);
}


size_t CypherParser::KU_DataTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_DataType;
}



CypherParser::KU_DataTypeContext* CypherParser::kU_DataType() {
   return kU_DataType(0);
}

CypherParser::KU_DataTypeContext* CypherParser::kU_DataType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_DataTypeContext *_localctx = _tracker.createInstance<KU_DataTypeContext>(_ctx, parentState);
  CypherParser::KU_DataTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 58;
  enterRecursionRule(_localctx, 58, CypherParser::RuleKU_DataType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(809);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
      setState(758);
      oC_SymbolicName();
      break;
    }

    case 2: {
      setState(759);
      match(CypherParser::UNION);
      setState(761);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(760);
        match(CypherParser::SP);
      }
      setState(763);
      match(CypherParser::T__1);
      setState(765);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(764);
        match(CypherParser::SP);
      }
      setState(767);
      kU_PropertyDefinitions();
      setState(769);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(768);
        match(CypherParser::SP);
      }
      setState(771);
      match(CypherParser::T__2);
      break;
    }

    case 3: {
      setState(773);
      oC_SymbolicName();
      setState(775);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(774);
        match(CypherParser::SP);
      }
      setState(777);
      match(CypherParser::T__1);
      setState(779);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(778);
        match(CypherParser::SP);
      }
      setState(781);
      kU_PropertyDefinitions();
      setState(783);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(782);
        match(CypherParser::SP);
      }
      setState(785);
      match(CypherParser::T__2);
      break;
    }

    case 4: {
      setState(787);
      oC_SymbolicName();
      setState(789);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(788);
        match(CypherParser::SP);
      }
      setState(791);
      match(CypherParser::T__1);
      setState(793);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(792);
        match(CypherParser::SP);
      }
      setState(795);
      kU_DataType(0);
      setState(797);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(796);
        match(CypherParser::SP);
      }
      setState(799);
      match(CypherParser::T__3);
      setState(801);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(800);
        match(CypherParser::SP);
      }
      setState(803);
      kU_DataType(0);
      setState(805);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(804);
        match(CypherParser::SP);
      }
      setState(807);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(815);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<KU_DataTypeContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleKU_DataType);
        setState(811);

        if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
        setState(812);
        kU_ListIdentifiers(); 
      }
      setState(817);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- KU_ListIdentifiersContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifiersContext::KU_ListIdentifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ListIdentifierContext *> CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier() {
  return getRuleContexts<CypherParser::KU_ListIdentifierContext>();
}

CypherParser::KU_ListIdentifierContext* CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier(size_t i) {
  return getRuleContext<CypherParser::KU_ListIdentifierContext>(i);
}


size_t CypherParser::KU_ListIdentifiersContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifiers;
}


CypherParser::KU_ListIdentifiersContext* CypherParser::kU_ListIdentifiers() {
  KU_ListIdentifiersContext *_localctx = _tracker.createInstance<KU_ListIdentifiersContext>(_ctx, getState());
  enterRule(_localctx, 60, CypherParser::RuleKU_ListIdentifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(818);
    kU_ListIdentifier();
    setState(822);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(819);
        kU_ListIdentifier(); 
      }
      setState(824);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListIdentifierContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifierContext::KU_ListIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_ListIdentifierContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::KU_ListIdentifierContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifier;
}


CypherParser::KU_ListIdentifierContext* CypherParser::kU_ListIdentifier() {
  KU_ListIdentifierContext *_localctx = _tracker.createInstance<KU_ListIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 62, CypherParser::RuleKU_ListIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(825);
    match(CypherParser::T__6);
    setState(827);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DecimalInteger) {
      setState(826);
      oC_IntegerLiteral();
    }
    setState(829);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnyCypherOptionContext ------------------------------------------------------------------

CypherParser::OC_AnyCypherOptionContext::OC_AnyCypherOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExplainContext* CypherParser::OC_AnyCypherOptionContext::oC_Explain() {
  return getRuleContext<CypherParser::OC_ExplainContext>(0);
}

CypherParser::OC_ProfileContext* CypherParser::OC_AnyCypherOptionContext::oC_Profile() {
  return getRuleContext<CypherParser::OC_ProfileContext>(0);
}


size_t CypherParser::OC_AnyCypherOptionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnyCypherOption;
}


CypherParser::OC_AnyCypherOptionContext* CypherParser::oC_AnyCypherOption() {
  OC_AnyCypherOptionContext *_localctx = _tracker.createInstance<OC_AnyCypherOptionContext>(_ctx, getState());
  enterRule(_localctx, 64, CypherParser::RuleOC_AnyCypherOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(833);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::EXPLAIN: {
        enterOuterAlt(_localctx, 1);
        setState(831);
        oC_Explain();
        break;
      }

      case CypherParser::PROFILE: {
        enterOuterAlt(_localctx, 2);
        setState(832);
        oC_Profile();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplainContext ------------------------------------------------------------------

CypherParser::OC_ExplainContext::OC_ExplainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExplainContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}


size_t CypherParser::OC_ExplainContext::getRuleIndex() const {
  return CypherParser::RuleOC_Explain;
}


CypherParser::OC_ExplainContext* CypherParser::oC_Explain() {
  OC_ExplainContext *_localctx = _tracker.createInstance<OC_ExplainContext>(_ctx, getState());
  enterRule(_localctx, 66, CypherParser::RuleOC_Explain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(835);
    match(CypherParser::EXPLAIN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProfileContext ------------------------------------------------------------------

CypherParser::OC_ProfileContext::OC_ProfileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProfileContext::PROFILE() {
  return getToken(CypherParser::PROFILE, 0);
}


size_t CypherParser::OC_ProfileContext::getRuleIndex() const {
  return CypherParser::RuleOC_Profile;
}


CypherParser::OC_ProfileContext* CypherParser::oC_Profile() {
  OC_ProfileContext *_localctx = _tracker.createInstance<OC_ProfileContext>(_ctx, getState());
  enterRule(_localctx, 68, CypherParser::RuleOC_Profile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(837);
    match(CypherParser::PROFILE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_TransactionContext ------------------------------------------------------------------

CypherParser::KU_TransactionContext::KU_TransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_TransactionContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_TransactionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ONLY() {
  return getToken(CypherParser::ONLY, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT_SKIP_CHECKPOINT() {
  return getToken(CypherParser::COMMIT_SKIP_CHECKPOINT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK_SKIP_CHECKPOINT() {
  return getToken(CypherParser::ROLLBACK_SKIP_CHECKPOINT, 0);
}


size_t CypherParser::KU_TransactionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Transaction;
}


CypherParser::KU_TransactionContext* CypherParser::kU_Transaction() {
  KU_TransactionContext *_localctx = _tracker.createInstance<KU_TransactionContext>(_ctx, getState());
  enterRule(_localctx, 70, CypherParser::RuleKU_Transaction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(853);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(839);
      match(CypherParser::BEGIN);
      setState(840);
      match(CypherParser::SP);
      setState(841);
      match(CypherParser::TRANSACTION);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(842);
      match(CypherParser::BEGIN);
      setState(843);
      match(CypherParser::SP);
      setState(844);
      match(CypherParser::TRANSACTION);
      setState(845);
      match(CypherParser::SP);
      setState(846);
      match(CypherParser::READ);
      setState(847);
      match(CypherParser::SP);
      setState(848);
      match(CypherParser::ONLY);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(849);
      match(CypherParser::COMMIT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(850);
      match(CypherParser::COMMIT_SKIP_CHECKPOINT);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(851);
      match(CypherParser::ROLLBACK);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(852);
      match(CypherParser::ROLLBACK_SKIP_CHECKPOINT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

CypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RegularQueryContext* CypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<CypherParser::OC_RegularQueryContext>(0);
}


size_t CypherParser::OC_QueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_Query;
}


CypherParser::OC_QueryContext* CypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
  enterRule(_localctx, 72, CypherParser::RuleOC_Query);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(855);
    oC_RegularQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

CypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}

std::vector<CypherParser::OC_UnionContext *> CypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<CypherParser::OC_UnionContext>();
}

CypherParser::OC_UnionContext* CypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<CypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RegularQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_ReturnContext *> CypherParser::OC_RegularQueryContext::oC_Return() {
  return getRuleContexts<CypherParser::OC_ReturnContext>();
}

CypherParser::OC_ReturnContext* CypherParser::OC_RegularQueryContext::oC_Return(size_t i) {
  return getRuleContext<CypherParser::OC_ReturnContext>(i);
}


size_t CypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularQuery;
}


CypherParser::OC_RegularQueryContext* CypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
  enterRule(_localctx, 74, CypherParser::RuleOC_RegularQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(878);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(857);
      oC_SingleQuery();
      setState(864);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(859);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(858);
            match(CypherParser::SP);
          }
          setState(861);
          oC_Union(); 
        }
        setState(866);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(871); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(867);
                oC_Return();
                setState(869);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(868);
                  match(CypherParser::SP);
                }
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(873); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(875);
      oC_SingleQuery();
       notifyReturnNotAtEnd(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

CypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnionContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnionContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}


size_t CypherParser::OC_UnionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Union;
}


CypherParser::OC_UnionContext* CypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
  enterRule(_localctx, 76, CypherParser::RuleOC_Union);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(892);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(880);
      match(CypherParser::UNION);
      setState(881);
      match(CypherParser::SP);
      setState(882);
      match(CypherParser::ALL);
      setState(884);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(883);
        match(CypherParser::SP);
      }
      setState(886);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(887);
      match(CypherParser::UNION);
      setState(889);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(888);
        match(CypherParser::SP);
      }
      setState(891);
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

CypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

CypherParser::OC_MultiPartQueryContext* CypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<CypherParser::OC_MultiPartQueryContext>(0);
}


size_t CypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SingleQuery;
}


CypherParser::OC_SingleQueryContext* CypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 78, CypherParser::RuleOC_SingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(896);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(894);
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(895);
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

CypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ReturnContext* CypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<CypherParser::OC_ReturnContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}


size_t CypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SinglePartQuery;
}


CypherParser::OC_SinglePartQueryContext* CypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
  enterRule(_localctx, 80, CypherParser::RuleOC_SinglePartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(943);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(904);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 47) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 47)) & 498216206337) != 0)) {
        setState(898);
        oC_ReadingClause();
        setState(900);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(899);
          match(CypherParser::SP);
        }
        setState(906);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(907);
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(914);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 47) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 47)) & 498216206337) != 0)) {
        setState(908);
        oC_ReadingClause();
        setState(910);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(909);
          match(CypherParser::SP);
        }
        setState(916);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(917);
      oC_UpdatingClause();
      setState(924);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(919);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(918);
            match(CypherParser::SP);
          }
          setState(921);
          oC_UpdatingClause(); 
        }
        setState(926);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
      }
      setState(931);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
      case 1: {
        setState(928);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(927);
          match(CypherParser::SP);
        }
        setState(930);
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(937); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(933);
        oC_ReadingClause();
        setState(935);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
        case 1: {
          setState(934);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(939); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (((((_la - 47) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 47)) & 498216206337) != 0));
       notifyQueryNotConcludeWithReturn(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

CypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<CypherParser::KU_QueryPartContext *> CypherParser::OC_MultiPartQueryContext::kU_QueryPart() {
  return getRuleContexts<CypherParser::KU_QueryPartContext>();
}

CypherParser::KU_QueryPartContext* CypherParser::OC_MultiPartQueryContext::kU_QueryPart(size_t i) {
  return getRuleContext<CypherParser::KU_QueryPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiPartQuery;
}


CypherParser::OC_MultiPartQueryContext* CypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
  enterRule(_localctx, 82, CypherParser::RuleOC_MultiPartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(949); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(945);
              kU_QueryPart();
              setState(947);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(946);
                match(CypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(951); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(953);
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_QueryPartContext ------------------------------------------------------------------

CypherParser::KU_QueryPartContext::KU_QueryPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_WithContext* CypherParser::KU_QueryPartContext::oC_With() {
  return getRuleContext<CypherParser::OC_WithContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::KU_QueryPartContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::KU_QueryPartContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::KU_QueryPartContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::KU_QueryPartContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_QueryPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_QueryPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_QueryPartContext::getRuleIndex() const {
  return CypherParser::RuleKU_QueryPart;
}


CypherParser::KU_QueryPartContext* CypherParser::kU_QueryPart() {
  KU_QueryPartContext *_localctx = _tracker.createInstance<KU_QueryPartContext>(_ctx, getState());
  enterRule(_localctx, 84, CypherParser::RuleKU_QueryPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(961);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & 498216206337) != 0)) {
      setState(955);
      oC_ReadingClause();
      setState(957);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(956);
        match(CypherParser::SP);
      }
      setState(963);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(970);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 86) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 86)) & 27) != 0)) {
      setState(964);
      oC_UpdatingClause();
      setState(966);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(965);
        match(CypherParser::SP);
      }
      setState(972);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(973);
    oC_With();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

CypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_CreateContext* CypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<CypherParser::OC_CreateContext>(0);
}

CypherParser::OC_MergeContext* CypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<CypherParser::OC_MergeContext>(0);
}

CypherParser::OC_SetContext* CypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

CypherParser::OC_DeleteContext* CypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<CypherParser::OC_DeleteContext>(0);
}


size_t CypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpdatingClause;
}


CypherParser::OC_UpdatingClauseContext* CypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
  enterRule(_localctx, 86, CypherParser::RuleOC_UpdatingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(979);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
        setState(975);
        oC_Create();
        break;
      }

      case CypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
        setState(976);
        oC_Merge();
        break;
      }

      case CypherParser::SET: {
        enterOuterAlt(_localctx, 3);
        setState(977);
        oC_Set();
        break;
      }

      case CypherParser::DELETE: {
        enterOuterAlt(_localctx, 4);
        setState(978);
        oC_Delete();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

CypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_MatchContext* CypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<CypherParser::OC_MatchContext>(0);
}

CypherParser::OC_UnwindContext* CypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<CypherParser::OC_UnwindContext>(0);
}

CypherParser::KU_InQueryCallContext* CypherParser::OC_ReadingClauseContext::kU_InQueryCall() {
  return getRuleContext<CypherParser::KU_InQueryCallContext>(0);
}

CypherParser::KU_LoadFromContext* CypherParser::OC_ReadingClauseContext::kU_LoadFrom() {
  return getRuleContext<CypherParser::KU_LoadFromContext>(0);
}


size_t CypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_ReadingClause;
}


CypherParser::OC_ReadingClauseContext* CypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 88, CypherParser::RuleOC_ReadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(985);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::OPTIONAL:
      case CypherParser::MATCH: {
        enterOuterAlt(_localctx, 1);
        setState(981);
        oC_Match();
        break;
      }

      case CypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
        setState(982);
        oC_Unwind();
        break;
      }

      case CypherParser::CALL: {
        enterOuterAlt(_localctx, 3);
        setState(983);
        kU_InQueryCall();
        break;
      }

      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 4);
        setState(984);
        kU_LoadFrom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadFromContext ------------------------------------------------------------------

CypherParser::KU_LoadFromContext::KU_LoadFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_FilePathsContext* CypherParser::KU_LoadFromContext::kU_FilePaths() {
  return getRuleContext<CypherParser::KU_FilePathsContext>(0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::HEADERS() {
  return getToken(CypherParser::HEADERS, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_LoadFromContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_LoadFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_LoadFromContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_LoadFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadFrom;
}


CypherParser::KU_LoadFromContext* CypherParser::kU_LoadFrom() {
  KU_LoadFromContext *_localctx = _tracker.createInstance<KU_LoadFromContext>(_ctx, getState());
  enterRule(_localctx, 90, CypherParser::RuleKU_LoadFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(987);
    match(CypherParser::LOAD);
    setState(1005);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx)) {
    case 1: {
      setState(988);
      match(CypherParser::SP);
      setState(989);
      match(CypherParser::WITH);
      setState(990);
      match(CypherParser::SP);
      setState(991);
      match(CypherParser::HEADERS);
      setState(993);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(992);
        match(CypherParser::SP);
      }
      setState(995);
      match(CypherParser::T__1);
      setState(997);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(996);
        match(CypherParser::SP);
      }
      setState(999);
      kU_PropertyDefinitions();
      setState(1001);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1000);
        match(CypherParser::SP);
      }
      setState(1003);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
    setState(1007);
    match(CypherParser::SP);
    setState(1008);
    match(CypherParser::FROM);
    setState(1009);
    match(CypherParser::SP);
    setState(1010);
    kU_FilePaths();
    setState(1024);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
    case 1: {
      setState(1012);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1011);
        match(CypherParser::SP);
      }
      setState(1014);
      match(CypherParser::T__1);
      setState(1016);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1015);
        match(CypherParser::SP);
      }
      setState(1018);
      kU_ParsingOptions();
      setState(1020);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1019);
        match(CypherParser::SP);
      }
      setState(1022);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
    setState(1030);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx)) {
    case 1: {
      setState(1027);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1026);
        match(CypherParser::SP);
      }
      setState(1029);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InQueryCallContext ------------------------------------------------------------------

CypherParser::KU_InQueryCallContext::KU_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::KU_InQueryCallContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}


size_t CypherParser::KU_InQueryCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_InQueryCall;
}


CypherParser::KU_InQueryCallContext* CypherParser::kU_InQueryCall() {
  KU_InQueryCallContext *_localctx = _tracker.createInstance<KU_InQueryCallContext>(_ctx, getState());
  enterRule(_localctx, 92, CypherParser::RuleKU_InQueryCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1032);
    match(CypherParser::CALL);
    setState(1033);
    match(CypherParser::SP);
    setState(1034);
    oC_FunctionInvocation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

CypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MatchContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_MatchContext::OPTIONAL() {
  return getToken(CypherParser::OPTIONAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MatchContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_MatchContext::getRuleIndex() const {
  return CypherParser::RuleOC_Match;
}


CypherParser::OC_MatchContext* CypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
  enterRule(_localctx, 94, CypherParser::RuleOC_Match);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1038);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::OPTIONAL) {
      setState(1036);
      match(CypherParser::OPTIONAL);
      setState(1037);
      match(CypherParser::SP);
    }
    setState(1040);
    match(CypherParser::MATCH);
    setState(1042);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1041);
      match(CypherParser::SP);
    }
    setState(1044);
    oC_Pattern();
    setState(1049);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      setState(1046);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1045);
        match(CypherParser::SP);
      }
      setState(1048);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

CypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnwindContext::UNWIND() {
  return getToken(CypherParser::UNWIND, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnwindContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_UnwindContext::getRuleIndex() const {
  return CypherParser::RuleOC_Unwind;
}


CypherParser::OC_UnwindContext* CypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
  enterRule(_localctx, 96, CypherParser::RuleOC_Unwind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1051);
    match(CypherParser::UNWIND);
    setState(1053);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1052);
      match(CypherParser::SP);
    }
    setState(1055);
    oC_Expression();
    setState(1056);
    match(CypherParser::SP);
    setState(1057);
    match(CypherParser::AS);
    setState(1058);
    match(CypherParser::SP);
    setState(1059);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

CypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CreateContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_CreateContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_CreateContext::getRuleIndex() const {
  return CypherParser::RuleOC_Create;
}


CypherParser::OC_CreateContext* CypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
  enterRule(_localctx, 98, CypherParser::RuleOC_Create);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1061);
    match(CypherParser::CREATE);
    setState(1063);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1062);
      match(CypherParser::SP);
    }
    setState(1065);
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

CypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MergeContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_MergeActionContext *> CypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<CypherParser::OC_MergeActionContext>();
}

CypherParser::OC_MergeActionContext* CypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<CypherParser::OC_MergeActionContext>(i);
}


size_t CypherParser::OC_MergeContext::getRuleIndex() const {
  return CypherParser::RuleOC_Merge;
}


CypherParser::OC_MergeContext* CypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
  enterRule(_localctx, 100, CypherParser::RuleOC_Merge);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1067);
    match(CypherParser::MERGE);
    setState(1069);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1068);
      match(CypherParser::SP);
    }
    setState(1071);
    oC_Pattern();
    setState(1076);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1072);
        match(CypherParser::SP);
        setState(1073);
        oC_MergeAction(); 
      }
      setState(1078);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

CypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::ON() {
  return getToken(CypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeActionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_SetContext* CypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}


size_t CypherParser::OC_MergeActionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MergeAction;
}


CypherParser::OC_MergeActionContext* CypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
  enterRule(_localctx, 102, CypherParser::RuleOC_MergeAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1089);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1079);
      match(CypherParser::ON);
      setState(1080);
      match(CypherParser::SP);
      setState(1081);
      match(CypherParser::MATCH);
      setState(1082);
      match(CypherParser::SP);
      setState(1083);
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1084);
      match(CypherParser::ON);
      setState(1085);
      match(CypherParser::SP);
      setState(1086);
      match(CypherParser::CREATE);
      setState(1087);
      match(CypherParser::SP);
      setState(1088);
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

CypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SetContext::SET() {
  return getToken(CypherParser::SET, 0);
}

std::vector<CypherParser::OC_SetItemContext *> CypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<CypherParser::OC_SetItemContext>();
}

CypherParser::OC_SetItemContext* CypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<CypherParser::OC_SetItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetContext::getRuleIndex() const {
  return CypherParser::RuleOC_Set;
}


CypherParser::OC_SetContext* CypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
  enterRule(_localctx, 104, CypherParser::RuleOC_Set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1091);
    match(CypherParser::SET);
    setState(1093);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1092);
      match(CypherParser::SP);
    }
    setState(1095);
    oC_SetItem();
    setState(1106);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1097);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1096);
          match(CypherParser::SP);
        }
        setState(1099);
        match(CypherParser::T__3);
        setState(1101);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1100);
          match(CypherParser::SP);
        }
        setState(1103);
        oC_SetItem(); 
      }
      setState(1108);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

CypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyExpressionContext* CypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<CypherParser::OC_PropertyExpressionContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SetItem;
}


CypherParser::OC_SetItemContext* CypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
  enterRule(_localctx, 106, CypherParser::RuleOC_SetItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1109);
    oC_PropertyExpression();
    setState(1111);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1110);
      match(CypherParser::SP);
    }
    setState(1113);
    match(CypherParser::T__4);
    setState(1115);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1114);
      match(CypherParser::SP);
    }
    setState(1117);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

CypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_DeleteContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_DeleteContext::getRuleIndex() const {
  return CypherParser::RuleOC_Delete;
}


CypherParser::OC_DeleteContext* CypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
  enterRule(_localctx, 108, CypherParser::RuleOC_Delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1119);
    match(CypherParser::DELETE);
    setState(1121);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1120);
      match(CypherParser::SP);
    }
    setState(1123);
    oC_Expression();
    setState(1134);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1125);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1124);
          match(CypherParser::SP);
        }
        setState(1127);
        match(CypherParser::T__3);
        setState(1129);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1128);
          match(CypherParser::SP);
        }
        setState(1131);
        oC_Expression(); 
      }
      setState(1136);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

CypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_WithContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_WithContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_WithContext::getRuleIndex() const {
  return CypherParser::RuleOC_With;
}


CypherParser::OC_WithContext* CypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
  enterRule(_localctx, 110, CypherParser::RuleOC_With);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1137);
    match(CypherParser::WITH);
    setState(1138);
    oC_ProjectionBody();
    setState(1143);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx)) {
    case 1: {
      setState(1140);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1139);
        match(CypherParser::SP);
      }
      setState(1142);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

CypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ReturnContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_ReturnContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}


size_t CypherParser::OC_ReturnContext::getRuleIndex() const {
  return CypherParser::RuleOC_Return;
}


CypherParser::OC_ReturnContext* CypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
  enterRule(_localctx, 112, CypherParser::RuleOC_Return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1145);
    match(CypherParser::RETURN);
    setState(1146);
    oC_ProjectionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionBodyContext ------------------------------------------------------------------

CypherParser::OC_ProjectionBodyContext::OC_ProjectionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionBodyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::OC_ProjectionBodyContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

CypherParser::OC_OrderContext* CypherParser::OC_ProjectionBodyContext::oC_Order() {
  return getRuleContext<CypherParser::OC_OrderContext>(0);
}

CypherParser::OC_SkipContext* CypherParser::OC_ProjectionBodyContext::oC_Skip() {
  return getRuleContext<CypherParser::OC_SkipContext>(0);
}

CypherParser::OC_LimitContext* CypherParser::OC_ProjectionBodyContext::oC_Limit() {
  return getRuleContext<CypherParser::OC_LimitContext>(0);
}


size_t CypherParser::OC_ProjectionBodyContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionBody;
}


CypherParser::OC_ProjectionBodyContext* CypherParser::oC_ProjectionBody() {
  OC_ProjectionBodyContext *_localctx = _tracker.createInstance<OC_ProjectionBodyContext>(_ctx, getState());
  enterRule(_localctx, 114, CypherParser::RuleOC_ProjectionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1152);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      setState(1149);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1148);
        match(CypherParser::SP);
      }
      setState(1151);
      match(CypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(1154);
    match(CypherParser::SP);
    setState(1155);
    oC_ProjectionItems();
    setState(1158);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx)) {
    case 1: {
      setState(1156);
      match(CypherParser::SP);
      setState(1157);
      oC_Order();
      break;
    }

    default:
      break;
    }
    setState(1162);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx)) {
    case 1: {
      setState(1160);
      match(CypherParser::SP);
      setState(1161);
      oC_Skip();
      break;
    }

    default:
      break;
    }
    setState(1166);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx)) {
    case 1: {
      setState(1164);
      match(CypherParser::SP);
      setState(1165);
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemsContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemsContext::OC_ProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<CypherParser::OC_ProjectionItemContext *> CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem() {
  return getRuleContexts<CypherParser::OC_ProjectionItemContext>();
}

CypherParser::OC_ProjectionItemContext* CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem(size_t i) {
  return getRuleContext<CypherParser::OC_ProjectionItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItems;
}


CypherParser::OC_ProjectionItemsContext* CypherParser::oC_ProjectionItems() {
  OC_ProjectionItemsContext *_localctx = _tracker.createInstance<OC_ProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 116, CypherParser::RuleOC_ProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1196);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1168);
        match(CypherParser::STAR);
        setState(1179);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1170);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1169);
              match(CypherParser::SP);
            }
            setState(1172);
            match(CypherParser::T__3);
            setState(1174);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1173);
              match(CypherParser::SP);
            }
            setState(1176);
            oC_ProjectionItem(); 
          }
          setState(1181);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx);
        }
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__6:
      case CypherParser::T__8:
      case CypherParser::T__26:
      case CypherParser::COMMENT:
      case CypherParser::NOT:
      case CypherParser::MINUS:
      case CypherParser::NULL_:
      case CypherParser::TRUE:
      case CypherParser::FALSE:
      case CypherParser::EXISTS:
      case CypherParser::CASE:
      case CypherParser::StringLiteral:
      case CypherParser::DecimalInteger:
      case CypherParser::HexLetter:
      case CypherParser::RegularDecimalReal:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(1182);
        oC_ProjectionItem();
        setState(1193);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1184);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1183);
              match(CypherParser::SP);
            }
            setState(1186);
            match(CypherParser::T__3);
            setState(1188);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1187);
              match(CypherParser::SP);
            }
            setState(1190);
            oC_ProjectionItem(); 
          }
          setState(1195);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemContext::OC_ProjectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ProjectionItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_ProjectionItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_ProjectionItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItem;
}


CypherParser::OC_ProjectionItemContext* CypherParser::oC_ProjectionItem() {
  OC_ProjectionItemContext *_localctx = _tracker.createInstance<OC_ProjectionItemContext>(_ctx, getState());
  enterRule(_localctx, 118, CypherParser::RuleOC_ProjectionItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1205);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1198);
      oC_Expression();
      setState(1199);
      match(CypherParser::SP);
      setState(1200);
      match(CypherParser::AS);
      setState(1201);
      match(CypherParser::SP);
      setState(1202);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1204);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

CypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_OrderContext::ORDER() {
  return getToken(CypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrderContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_OrderContext::BY() {
  return getToken(CypherParser::BY, 0);
}

std::vector<CypherParser::OC_SortItemContext *> CypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<CypherParser::OC_SortItemContext>();
}

CypherParser::OC_SortItemContext* CypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<CypherParser::OC_SortItemContext>(i);
}


size_t CypherParser::OC_OrderContext::getRuleIndex() const {
  return CypherParser::RuleOC_Order;
}


CypherParser::OC_OrderContext* CypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
  enterRule(_localctx, 120, CypherParser::RuleOC_Order);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1207);
    match(CypherParser::ORDER);
    setState(1208);
    match(CypherParser::SP);
    setState(1209);
    match(CypherParser::BY);
    setState(1210);
    match(CypherParser::SP);
    setState(1211);
    oC_SortItem();
    setState(1219);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__3) {
      setState(1212);
      match(CypherParser::T__3);
      setState(1214);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1213);
        match(CypherParser::SP);
      }
      setState(1216);
      oC_SortItem();
      setState(1221);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

CypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SkipContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::OC_SkipContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_SkipContext::getRuleIndex() const {
  return CypherParser::RuleOC_Skip;
}


CypherParser::OC_SkipContext* CypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
  enterRule(_localctx, 122, CypherParser::RuleOC_Skip);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1222);
    match(CypherParser::L_SKIP);
    setState(1223);
    match(CypherParser::SP);
    setState(1224);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

CypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LimitContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::OC_LimitContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_LimitContext::getRuleIndex() const {
  return CypherParser::RuleOC_Limit;
}


CypherParser::OC_LimitContext* CypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
  enterRule(_localctx, 124, CypherParser::RuleOC_Limit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1226);
    match(CypherParser::LIMIT);
    setState(1227);
    match(CypherParser::SP);
    setState(1228);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

CypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(CypherParser::ASCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASC() {
  return getToken(CypherParser::ASC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(CypherParser::DESCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESC() {
  return getToken(CypherParser::DESC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_SortItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SortItem;
}


CypherParser::OC_SortItemContext* CypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
  enterRule(_localctx, 126, CypherParser::RuleOC_SortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1230);
    oC_Expression();
    setState(1235);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx)) {
    case 1: {
      setState(1232);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1231);
        match(CypherParser::SP);
      }
      setState(1234);
      _la = _input->LA(1);
      if (!(((((_la - 100) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 100)) & 15) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

CypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WhereContext::WHERE() {
  return getToken(CypherParser::WHERE, 0);
}

tree::TerminalNode* CypherParser::OC_WhereContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_WhereContext::getRuleIndex() const {
  return CypherParser::RuleOC_Where;
}


CypherParser::OC_WhereContext* CypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
  enterRule(_localctx, 128, CypherParser::RuleOC_Where);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1237);
    match(CypherParser::WHERE);
    setState(1238);
    match(CypherParser::SP);
    setState(1239);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

CypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PatternPartContext *> CypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<CypherParser::OC_PatternPartContext>();
}

CypherParser::OC_PatternPartContext* CypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<CypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_Pattern;
}


CypherParser::OC_PatternContext* CypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
  enterRule(_localctx, 130, CypherParser::RuleOC_Pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1241);
    oC_PatternPart();
    setState(1252);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1243);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1242);
          match(CypherParser::SP);
        }
        setState(1245);
        match(CypherParser::T__3);
        setState(1247);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1246);
          match(CypherParser::SP);
        }
        setState(1249);
        oC_PatternPart(); 
      }
      setState(1254);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

CypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_AnonymousPatternPartContext* CypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<CypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternPart;
}


CypherParser::OC_PatternPartContext* CypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
  enterRule(_localctx, 132, CypherParser::RuleOC_PatternPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1266);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::COMMENT:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1255);
        oC_Variable();
        setState(1257);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1256);
          match(CypherParser::SP);
        }
        setState(1259);
        match(CypherParser::T__4);
        setState(1261);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1260);
          match(CypherParser::SP);
        }
        setState(1263);
        oC_AnonymousPatternPart();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(1265);
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

CypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PatternElementContext* CypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnonymousPatternPart;
}


CypherParser::OC_AnonymousPatternPartContext* CypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
  enterRule(_localctx, 134, CypherParser::RuleOC_AnonymousPatternPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1268);
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

CypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternElementContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PatternElementContext* CypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_PatternElementContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElement;
}


CypherParser::OC_PatternElementContext* CypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 136, CypherParser::RuleOC_PatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1284);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1270);
      oC_NodePattern();
      setState(1277);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1272);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1271);
            match(CypherParser::SP);
          }
          setState(1274);
          oC_PatternElementChain(); 
        }
        setState(1279);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1280);
      match(CypherParser::T__1);
      setState(1281);
      oC_PatternElement();
      setState(1282);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

CypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodePatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_NodePatternContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_NodePatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodePattern;
}


CypherParser::OC_NodePatternContext* CypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 138, CypherParser::RuleOC_NodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1286);
    match(CypherParser::T__1);
    setState(1288);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1287);
      match(CypherParser::SP);
    }
    setState(1294);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COMMENT || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 1153) != 0)) {
      setState(1290);
      oC_Variable();
      setState(1292);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1291);
        match(CypherParser::SP);
      }
    }
    setState(1300);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__5) {
      setState(1296);
      oC_NodeLabels();
      setState(1298);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1297);
        match(CypherParser::SP);
      }
    }
    setState(1306);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1302);
      kU_Properties();
      setState(1304);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1303);
        match(CypherParser::SP);
      }
    }
    setState(1308);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

CypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RelationshipPatternContext* CypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<CypherParser::OC_RelationshipPatternContext>(0);
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_PatternElementChainContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElementChain;
}


CypherParser::OC_PatternElementChainContext* CypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
  enterRule(_localctx, 140, CypherParser::RuleOC_PatternElementChain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1310);
    oC_RelationshipPattern();
    setState(1312);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1311);
      match(CypherParser::SP);
    }
    setState(1314);
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

CypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LeftArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<CypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<CypherParser::OC_DashContext *> CypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<CypherParser::OC_DashContext>();
}

CypherParser::OC_DashContext* CypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<CypherParser::OC_DashContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_RelationshipDetailContext* CypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<CypherParser::OC_RelationshipDetailContext>(0);
}

CypherParser::OC_RightArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<CypherParser::OC_RightArrowHeadContext>(0);
}


size_t CypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipPattern;
}


CypherParser::OC_RelationshipPatternContext* CypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
  enterRule(_localctx, 142, CypherParser::RuleOC_RelationshipPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1360);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1316);
      oC_LeftArrowHead();
      setState(1318);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1317);
        match(CypherParser::SP);
      }
      setState(1320);
      oC_Dash();
      setState(1322);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
      case 1: {
        setState(1321);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1325);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1324);
        oC_RelationshipDetail();
      }
      setState(1328);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1327);
        match(CypherParser::SP);
      }
      setState(1330);
      oC_Dash();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1332);
      oC_Dash();
      setState(1334);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
      case 1: {
        setState(1333);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1337);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1336);
        oC_RelationshipDetail();
      }
      setState(1340);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1339);
        match(CypherParser::SP);
      }
      setState(1342);
      oC_Dash();
      setState(1344);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1343);
        match(CypherParser::SP);
      }
      setState(1346);
      oC_RightArrowHead();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1348);
      oC_Dash();
      setState(1350);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
      case 1: {
        setState(1349);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1353);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1352);
        oC_RelationshipDetail();
      }
      setState(1356);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1355);
        match(CypherParser::SP);
      }
      setState(1358);
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

CypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_RelationshipTypesContext* CypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<CypherParser::OC_RelationshipTypesContext>(0);
}

CypherParser::OC_RangeLiteralContext* CypherParser::OC_RelationshipDetailContext::oC_RangeLiteral() {
  return getRuleContext<CypherParser::OC_RangeLiteralContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_RelationshipDetailContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipDetail;
}


CypherParser::OC_RelationshipDetailContext* CypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
  enterRule(_localctx, 144, CypherParser::RuleOC_RelationshipDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1362);
    match(CypherParser::T__6);
    setState(1364);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1363);
      match(CypherParser::SP);
    }
    setState(1370);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COMMENT || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 1153) != 0)) {
      setState(1366);
      oC_Variable();
      setState(1368);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1367);
        match(CypherParser::SP);
      }
    }
    setState(1376);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__5) {
      setState(1372);
      oC_RelationshipTypes();
      setState(1374);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1373);
        match(CypherParser::SP);
      }
    }
    setState(1382);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::STAR) {
      setState(1378);
      oC_RangeLiteral();
      setState(1380);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1379);
        match(CypherParser::SP);
      }
    }
    setState(1388);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1384);
      kU_Properties();
      setState(1386);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1385);
        match(CypherParser::SP);
      }
    }
    setState(1390);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertiesContext ------------------------------------------------------------------

CypherParser::KU_PropertiesContext::KU_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_PropertiesContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertiesContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::KU_PropertiesContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::KU_PropertiesContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::KU_PropertiesContext::getRuleIndex() const {
  return CypherParser::RuleKU_Properties;
}


CypherParser::KU_PropertiesContext* CypherParser::kU_Properties() {
  KU_PropertiesContext *_localctx = _tracker.createInstance<KU_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 146, CypherParser::RuleKU_Properties);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1392);
    match(CypherParser::T__8);
    setState(1394);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1393);
      match(CypherParser::SP);
    }
    setState(1429);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COMMENT || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 1153) != 0)) {
      setState(1396);
      oC_PropertyKeyName();
      setState(1398);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1397);
        match(CypherParser::SP);
      }
      setState(1400);
      match(CypherParser::T__5);
      setState(1402);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1401);
        match(CypherParser::SP);
      }
      setState(1404);
      oC_Expression();
      setState(1406);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1405);
        match(CypherParser::SP);
      }
      setState(1426);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__3) {
        setState(1408);
        match(CypherParser::T__3);
        setState(1410);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1409);
          match(CypherParser::SP);
        }
        setState(1412);
        oC_PropertyKeyName();
        setState(1414);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1413);
          match(CypherParser::SP);
        }
        setState(1416);
        match(CypherParser::T__5);
        setState(1418);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1417);
          match(CypherParser::SP);
        }
        setState(1420);
        oC_Expression();
        setState(1422);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1421);
          match(CypherParser::SP);
        }
        setState(1428);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1431);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

CypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_RelTypeNameContext *> CypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<CypherParser::OC_RelTypeNameContext>();
}

CypherParser::OC_RelTypeNameContext* CypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<CypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipTypes;
}


CypherParser::OC_RelationshipTypesContext* CypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
  enterRule(_localctx, 148, CypherParser::RuleOC_RelationshipTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1433);
    match(CypherParser::T__5);
    setState(1435);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1434);
      match(CypherParser::SP);
    }
    setState(1437);
    oC_RelTypeName();
    setState(1451);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1439);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1438);
          match(CypherParser::SP);
        }
        setState(1441);
        match(CypherParser::T__10);
        setState(1443);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::T__5) {
          setState(1442);
          match(CypherParser::T__5);
        }
        setState(1446);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1445);
          match(CypherParser::SP);
        }
        setState(1448);
        oC_RelTypeName(); 
      }
      setState(1453);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NodeLabelContext *> CypherParser::OC_NodeLabelsContext::oC_NodeLabel() {
  return getRuleContexts<CypherParser::OC_NodeLabelContext>();
}

CypherParser::OC_NodeLabelContext* CypherParser::OC_NodeLabelsContext::oC_NodeLabel(size_t i) {
  return getRuleContext<CypherParser::OC_NodeLabelContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabels;
}


CypherParser::OC_NodeLabelsContext* CypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
  enterRule(_localctx, 150, CypherParser::RuleOC_NodeLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1454);
    oC_NodeLabel();
    setState(1461);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1456);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1455);
          match(CypherParser::SP);
        }
        setState(1458);
        oC_NodeLabel(); 
      }
      setState(1463);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelContext::OC_NodeLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LabelNameContext* CypherParser::OC_NodeLabelContext::oC_LabelName() {
  return getRuleContext<CypherParser::OC_LabelNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_NodeLabelContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabel;
}


CypherParser::OC_NodeLabelContext* CypherParser::oC_NodeLabel() {
  OC_NodeLabelContext *_localctx = _tracker.createInstance<OC_NodeLabelContext>(_ctx, getState());
  enterRule(_localctx, 152, CypherParser::RuleOC_NodeLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1464);
    match(CypherParser::T__5);
    setState(1466);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1465);
      match(CypherParser::SP);
    }
    setState(1468);
    oC_LabelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

CypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SHORTEST() {
  return getToken(CypherParser::SHORTEST, 0);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::OC_RangeLiteralContext::kU_RecursiveRelationshipComprehension() {
  return getRuleContext<CypherParser::KU_RecursiveRelationshipComprehensionContext>(0);
}

CypherParser::OC_LowerBoundContext* CypherParser::OC_RangeLiteralContext::oC_LowerBound() {
  return getRuleContext<CypherParser::OC_LowerBoundContext>(0);
}

CypherParser::OC_UpperBoundContext* CypherParser::OC_RangeLiteralContext::oC_UpperBound() {
  return getRuleContext<CypherParser::OC_UpperBoundContext>(0);
}


size_t CypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_RangeLiteral;
}


CypherParser::OC_RangeLiteralContext* CypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 154, CypherParser::RuleOC_RangeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1470);
    match(CypherParser::STAR);
    setState(1472);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx)) {
    case 1: {
      setState(1471);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1478);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(1474);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::ALL: {
        setState(1475);
        match(CypherParser::ALL);
        setState(1476);
        match(CypherParser::SP);
        setState(1477);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__7:
      case CypherParser::T__8:
      case CypherParser::T__11:
      case CypherParser::DecimalInteger:
      case CypherParser::SP: {
        break;
      }

    default:
      break;
    }
    setState(1481);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx)) {
    case 1: {
      setState(1480);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1497);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
    case 1: {
      setState(1484);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(1483);
        oC_LowerBound();
      }
      setState(1487);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1486);
        match(CypherParser::SP);
      }
      setState(1489);
      match(CypherParser::T__11);
      setState(1491);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx)) {
      case 1: {
        setState(1490);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1494);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(1493);
        oC_UpperBound();
      }
      break;
    }

    case 2: {
      setState(1496);
      oC_IntegerLiteral();
      break;
    }

    default:
      break;
    }
    setState(1503);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 239, _ctx)) {
    case 1: {
      setState(1500);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1499);
        match(CypherParser::SP);
      }
      setState(1502);
      kU_RecursiveRelationshipComprehension();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RecursiveRelationshipComprehensionContext ------------------------------------------------------------------

CypherParser::KU_RecursiveRelationshipComprehensionContext::KU_RecursiveRelationshipComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_VariableContext *> CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable() {
  return getRuleContexts<CypherParser::OC_VariableContext>();
}

CypherParser::OC_VariableContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable(size_t i) {
  return getRuleContext<CypherParser::OC_VariableContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RecursiveRelationshipComprehensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RecursiveRelationshipComprehensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateRelProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateRelProjectionItemsContext>(0);
}

CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateNodeProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateNodeProjectionItemsContext>(0);
}


size_t CypherParser::KU_RecursiveRelationshipComprehensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RecursiveRelationshipComprehension;
}


CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::kU_RecursiveRelationshipComprehension() {
  KU_RecursiveRelationshipComprehensionContext *_localctx = _tracker.createInstance<KU_RecursiveRelationshipComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 156, CypherParser::RuleKU_RecursiveRelationshipComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1505);
    match(CypherParser::T__1);
    setState(1507);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1506);
      match(CypherParser::SP);
    }
    setState(1509);
    oC_Variable();
    setState(1511);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1510);
      match(CypherParser::SP);
    }
    setState(1513);
    match(CypherParser::T__3);
    setState(1515);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1514);
      match(CypherParser::SP);
    }
    setState(1517);
    oC_Variable();
    setState(1526);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 245, _ctx)) {
    case 1: {
      setState(1519);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1518);
        match(CypherParser::SP);
      }
      setState(1521);
      match(CypherParser::T__10);
      setState(1523);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1522);
        match(CypherParser::SP);
      }
      setState(1525);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(1547);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__10 || _la == CypherParser::SP) {
      setState(1529);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1528);
        match(CypherParser::SP);
      }
      setState(1531);
      match(CypherParser::T__10);
      setState(1533);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1532);
        match(CypherParser::SP);
      }
      setState(1535);
      kU_IntermediateRelProjectionItems();
      setState(1537);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1536);
        match(CypherParser::SP);
      }
      setState(1539);
      match(CypherParser::T__3);
      setState(1541);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1540);
        match(CypherParser::SP);
      }
      setState(1543);
      kU_IntermediateNodeProjectionItems();
      setState(1545);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1544);
        match(CypherParser::SP);
      }
    }
    setState(1549);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateNodeProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateNodeProjectionItemsContext::KU_IntermediateNodeProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateNodeProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateNodeProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateNodeProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateNodeProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateNodeProjectionItems;
}


CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::kU_IntermediateNodeProjectionItems() {
  KU_IntermediateNodeProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateNodeProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 158, CypherParser::RuleKU_IntermediateNodeProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1551);
    match(CypherParser::T__8);
    setState(1553);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx)) {
    case 1: {
      setState(1552);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1556);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 281475110929028) != 0) || ((((_la - 94) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 94)) & 41837536641025) != 0)) {
      setState(1555);
      oC_ProjectionItems();
    }
    setState(1559);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1558);
      match(CypherParser::SP);
    }
    setState(1561);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateRelProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateRelProjectionItemsContext::KU_IntermediateRelProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateRelProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateRelProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateRelProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateRelProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateRelProjectionItems;
}


CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::kU_IntermediateRelProjectionItems() {
  KU_IntermediateRelProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateRelProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 160, CypherParser::RuleKU_IntermediateRelProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1563);
    match(CypherParser::T__8);
    setState(1565);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx)) {
    case 1: {
      setState(1564);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1568);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 281475110929028) != 0) || ((((_la - 94) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 94)) & 41837536641025) != 0)) {
      setState(1567);
      oC_ProjectionItems();
    }
    setState(1571);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1570);
      match(CypherParser::SP);
    }
    setState(1573);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LowerBoundContext ------------------------------------------------------------------

CypherParser::OC_LowerBoundContext::OC_LowerBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LowerBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_LowerBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_LowerBound;
}


CypherParser::OC_LowerBoundContext* CypherParser::oC_LowerBound() {
  OC_LowerBoundContext *_localctx = _tracker.createInstance<OC_LowerBoundContext>(_ctx, getState());
  enterRule(_localctx, 162, CypherParser::RuleOC_LowerBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1575);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpperBoundContext ------------------------------------------------------------------

CypherParser::OC_UpperBoundContext::OC_UpperBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UpperBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_UpperBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpperBound;
}


CypherParser::OC_UpperBoundContext* CypherParser::oC_UpperBound() {
  OC_UpperBoundContext *_localctx = _tracker.createInstance<OC_UpperBoundContext>(_ctx, getState());
  enterRule(_localctx, 164, CypherParser::RuleOC_UpperBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1577);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

CypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_LabelNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_LabelName;
}


CypherParser::OC_LabelNameContext* CypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 166, CypherParser::RuleOC_LabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1579);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

CypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelTypeName;
}


CypherParser::OC_RelTypeNameContext* CypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 168, CypherParser::RuleOC_RelTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1581);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

CypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_OrExpressionContext* CypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<CypherParser::OC_OrExpressionContext>(0);
}


size_t CypherParser::OC_ExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Expression;
}


CypherParser::OC_ExpressionContext* CypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 170, CypherParser::RuleOC_Expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1583);
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

CypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_XorExpressionContext *> CypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<CypherParser::OC_XorExpressionContext>();
}

CypherParser::OC_XorExpressionContext* CypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::OR() {
  return getTokens(CypherParser::OR);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(CypherParser::OR, i);
}


size_t CypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_OrExpression;
}


CypherParser::OC_OrExpressionContext* CypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 172, CypherParser::RuleOC_OrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1585);
    oC_XorExpression();
    setState(1592);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1586);
        match(CypherParser::SP);
        setState(1587);
        match(CypherParser::OR);
        setState(1588);
        match(CypherParser::SP);
        setState(1589);
        oC_XorExpression(); 
      }
      setState(1594);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

CypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AndExpressionContext *> CypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<CypherParser::OC_AndExpressionContext>();
}

CypherParser::OC_AndExpressionContext* CypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(CypherParser::XOR);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(CypherParser::XOR, i);
}


size_t CypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_XorExpression;
}


CypherParser::OC_XorExpressionContext* CypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 174, CypherParser::RuleOC_XorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1595);
    oC_AndExpression();
    setState(1602);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1596);
        match(CypherParser::SP);
        setState(1597);
        match(CypherParser::XOR);
        setState(1598);
        match(CypherParser::SP);
        setState(1599);
        oC_AndExpression(); 
      }
      setState(1604);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

CypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NotExpressionContext *> CypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<CypherParser::OC_NotExpressionContext>();
}

CypherParser::OC_NotExpressionContext* CypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<CypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::AND() {
  return getTokens(CypherParser::AND);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(CypherParser::AND, i);
}


size_t CypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AndExpression;
}


CypherParser::OC_AndExpressionContext* CypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 176, CypherParser::RuleOC_AndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1605);
    oC_NotExpression();
    setState(1612);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 260, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1606);
        match(CypherParser::SP);
        setState(1607);
        match(CypherParser::AND);
        setState(1608);
        match(CypherParser::SP);
        setState(1609);
        oC_NotExpression(); 
      }
      setState(1614);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 260, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

CypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ComparisonExpressionContext* CypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<CypherParser::OC_ComparisonExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NotExpression;
}


CypherParser::OC_NotExpressionContext* CypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
  enterRule(_localctx, 178, CypherParser::RuleOC_NotExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1619);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::NOT) {
      setState(1615);
      match(CypherParser::NOT);
      setState(1617);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1616);
        match(CypherParser::SP);
      }
    }
    setState(1621);
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

CypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseOrOperatorExpressionContext *> CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseOrOperatorExpressionContext>();
}

CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseOrOperatorExpressionContext>(i);
}

std::vector<CypherParser::KU_ComparisonOperatorContext *> CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator() {
  return getRuleContexts<CypherParser::KU_ComparisonOperatorContext>();
}

CypherParser::KU_ComparisonOperatorContext* CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator(size_t i) {
  return getRuleContext<CypherParser::KU_ComparisonOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::INVALID_NOT_EQUAL() {
  return getToken(CypherParser::INVALID_NOT_EQUAL, 0);
}


size_t CypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ComparisonExpression;
}


CypherParser::OC_ComparisonExpressionContext* CypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 180, CypherParser::RuleOC_ComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1671);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 273, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1623);
      kU_BitwiseOrOperatorExpression();
      setState(1633);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 265, _ctx)) {
      case 1: {
        setState(1625);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1624);
          match(CypherParser::SP);
        }
        setState(1627);
        kU_ComparisonOperator();
        setState(1629);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1628);
          match(CypherParser::SP);
        }
        setState(1631);
        kU_BitwiseOrOperatorExpression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1635);
      kU_BitwiseOrOperatorExpression();

      setState(1637);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1636);
        match(CypherParser::SP);
      }
      setState(1639);
      antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken = match(CypherParser::INVALID_NOT_EQUAL);
      setState(1641);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1640);
        match(CypherParser::SP);
      }
      setState(1643);
      kU_BitwiseOrOperatorExpression();
       notifyInvalidNotEqualOperator(antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken); 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1647);
      kU_BitwiseOrOperatorExpression();
      setState(1649);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1648);
        match(CypherParser::SP);
      }
      setState(1651);
      kU_ComparisonOperator();
      setState(1653);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1652);
        match(CypherParser::SP);
      }
      setState(1655);
      kU_BitwiseOrOperatorExpression();
      setState(1665); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1657);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1656);
                  match(CypherParser::SP);
                }
                setState(1659);
                kU_ComparisonOperator();
                setState(1661);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1660);
                  match(CypherParser::SP);
                }
                setState(1663);
                kU_BitwiseOrOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1667); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 272, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
       notifyNonBinaryComparison(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ComparisonOperatorContext ------------------------------------------------------------------

CypherParser::KU_ComparisonOperatorContext::KU_ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_ComparisonOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_ComparisonOperator;
}


CypherParser::KU_ComparisonOperatorContext* CypherParser::kU_ComparisonOperator() {
  KU_ComparisonOperatorContext *_localctx = _tracker.createInstance<KU_ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 182, CypherParser::RuleKU_ComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1673);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 253984) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseOrOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseOrOperatorExpressionContext::KU_BitwiseOrOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseAndOperatorExpressionContext *> CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseAndOperatorExpressionContext>();
}

CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseAndOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseOrOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseOrOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseOrOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseOrOperatorExpression;
}


CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::kU_BitwiseOrOperatorExpression() {
  KU_BitwiseOrOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseOrOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 184, CypherParser::RuleKU_BitwiseOrOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1675);
    kU_BitwiseAndOperatorExpression();
    setState(1686);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1677);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1676);
          match(CypherParser::SP);
        }
        setState(1679);
        match(CypherParser::T__10);
        setState(1681);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1680);
          match(CypherParser::SP);
        }
        setState(1683);
        kU_BitwiseAndOperatorExpression(); 
      }
      setState(1688);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseAndOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseAndOperatorExpressionContext::KU_BitwiseAndOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitShiftOperatorExpressionContext *> CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorExpressionContext>();
}

CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseAndOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseAndOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseAndOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseAndOperatorExpression;
}


CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::kU_BitwiseAndOperatorExpression() {
  KU_BitwiseAndOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseAndOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 186, CypherParser::RuleKU_BitwiseAndOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1689);
    kU_BitShiftOperatorExpression();
    setState(1700);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1691);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1690);
          match(CypherParser::SP);
        }
        setState(1693);
        match(CypherParser::T__17);
        setState(1695);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1694);
          match(CypherParser::SP);
        }
        setState(1697);
        kU_BitShiftOperatorExpression(); 
      }
      setState(1702);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorExpressionContext::KU_BitShiftOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AddOrSubtractExpressionContext *> CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContexts<CypherParser::OC_AddOrSubtractExpressionContext>();
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AddOrSubtractExpressionContext>(i);
}

std::vector<CypherParser::KU_BitShiftOperatorContext *> CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorContext>();
}

CypherParser::KU_BitShiftOperatorContext* CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitShiftOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitShiftOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitShiftOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperatorExpression;
}


CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::kU_BitShiftOperatorExpression() {
  KU_BitShiftOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 188, CypherParser::RuleKU_BitShiftOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1703);
    oC_AddOrSubtractExpression();
    setState(1715);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 282, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1705);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1704);
          match(CypherParser::SP);
        }
        setState(1707);
        kU_BitShiftOperator();
        setState(1709);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1708);
          match(CypherParser::SP);
        }
        setState(1711);
        oC_AddOrSubtractExpression(); 
      }
      setState(1717);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 282, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorContext::KU_BitShiftOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_BitShiftOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperator;
}


CypherParser::KU_BitShiftOperatorContext* CypherParser::kU_BitShiftOperator() {
  KU_BitShiftOperatorContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorContext>(_ctx, getState());
  enterRule(_localctx, 190, CypherParser::RuleKU_BitShiftOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1718);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__18

    || _la == CypherParser::T__19)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

CypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_MultiplyDivideModuloExpressionContext *> CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<CypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<CypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<CypherParser::KU_AddOrSubtractOperatorContext *> CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator() {
  return getRuleContexts<CypherParser::KU_AddOrSubtractOperatorContext>();
}

CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator(size_t i) {
  return getRuleContext<CypherParser::KU_AddOrSubtractOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AddOrSubtractExpression;
}


CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 192, CypherParser::RuleOC_AddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1720);
    oC_MultiplyDivideModuloExpression();
    setState(1732);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 285, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1722);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1721);
          match(CypherParser::SP);
        }
        setState(1724);
        kU_AddOrSubtractOperator();
        setState(1726);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1725);
          match(CypherParser::SP);
        }
        setState(1728);
        oC_MultiplyDivideModuloExpression(); 
      }
      setState(1734);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 285, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddOrSubtractOperatorContext ------------------------------------------------------------------

CypherParser::KU_AddOrSubtractOperatorContext::KU_AddOrSubtractOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddOrSubtractOperatorContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_AddOrSubtractOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddOrSubtractOperator;
}


CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::kU_AddOrSubtractOperator() {
  KU_AddOrSubtractOperatorContext *_localctx = _tracker.createInstance<KU_AddOrSubtractOperatorContext>(_ctx, getState());
  enterRule(_localctx, 194, CypherParser::RuleKU_AddOrSubtractOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1735);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__20 || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

CypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PowerOfExpressionContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<CypherParser::OC_PowerOfExpressionContext>();
}

CypherParser::OC_PowerOfExpressionContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<CypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<CypherParser::KU_MultiplyDivideModuloOperatorContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator() {
  return getRuleContexts<CypherParser::KU_MultiplyDivideModuloOperatorContext>();
}

CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator(size_t i) {
  return getRuleContext<CypherParser::KU_MultiplyDivideModuloOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiplyDivideModuloExpression;
}


CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
  enterRule(_localctx, 196, CypherParser::RuleOC_MultiplyDivideModuloExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1737);
    oC_PowerOfExpression();
    setState(1749);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 288, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1739);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1738);
          match(CypherParser::SP);
        }
        setState(1741);
        kU_MultiplyDivideModuloOperator();
        setState(1743);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1742);
          match(CypherParser::SP);
        }
        setState(1745);
        oC_PowerOfExpression(); 
      }
      setState(1751);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 288, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MultiplyDivideModuloOperatorContext ------------------------------------------------------------------

CypherParser::KU_MultiplyDivideModuloOperatorContext::KU_MultiplyDivideModuloOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MultiplyDivideModuloOperatorContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}


size_t CypherParser::KU_MultiplyDivideModuloOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_MultiplyDivideModuloOperator;
}


CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::kU_MultiplyDivideModuloOperator() {
  KU_MultiplyDivideModuloOperatorContext *_localctx = _tracker.createInstance<KU_MultiplyDivideModuloOperatorContext>(_ctx, getState());
  enterRule(_localctx, 198, CypherParser::RuleKU_MultiplyDivideModuloOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1752);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__21

    || _la == CypherParser::T__22 || _la == CypherParser::STAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

CypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext *> CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression() {
  return getRuleContexts<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>();
}

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression(size_t i) {
  return getRuleContext<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PowerOfExpression;
}


CypherParser::OC_PowerOfExpressionContext* CypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
  enterRule(_localctx, 200, CypherParser::RuleOC_PowerOfExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1754);
    oC_UnaryAddSubtractOrFactorialExpression();
    setState(1765);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1756);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1755);
          match(CypherParser::SP);
        }
        setState(1758);
        match(CypherParser::T__23);
        setState(1760);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1759);
          match(CypherParser::SP);
        }
        setState(1762);
        oC_UnaryAddSubtractOrFactorialExpression(); 
      }
      setState(1767);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddSubtractOrFactorialExpressionContext ------------------------------------------------------------------

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::OC_UnaryAddSubtractOrFactorialExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::oC_StringListNullOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringListNullOperatorExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::FACTORIAL() {
  return getToken(CypherParser::FACTORIAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression;
}


CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::oC_UnaryAddSubtractOrFactorialExpression() {
  OC_UnaryAddSubtractOrFactorialExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddSubtractOrFactorialExpressionContext>(_ctx, getState());
  enterRule(_localctx, 202, CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1772);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(1768);
      match(CypherParser::MINUS);
      setState(1770);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1769);
        match(CypherParser::SP);
      }
    }
    setState(1774);
    oC_StringListNullOperatorExpression();
    setState(1779);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx)) {
    case 1: {
      setState(1776);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1775);
        match(CypherParser::SP);
      }
      setState(1778);
      match(CypherParser::FACTORIAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringListNullOperatorExpressionContext::OC_StringListNullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_StringOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringOperatorExpressionContext>(0);
}

CypherParser::OC_NullOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression() {
  return getRuleContext<CypherParser::OC_NullOperatorExpressionContext>(0);
}

std::vector<CypherParser::OC_ListOperatorExpressionContext *> CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<CypherParser::OC_ListOperatorExpressionContext>();
}

CypherParser::OC_ListOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_ListOperatorExpressionContext>(i);
}


size_t CypherParser::OC_StringListNullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringListNullOperatorExpression;
}


CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::oC_StringListNullOperatorExpression() {
  OC_StringListNullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 204, CypherParser::RuleOC_StringListNullOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1781);
    oC_PropertyOrLabelsExpression();
    setState(1789);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 297, _ctx)) {
    case 1: {
      setState(1782);
      oC_StringOperatorExpression();
      break;
    }

    case 2: {
      setState(1784); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1783);
        oC_ListOperatorExpression();
        setState(1786); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == CypherParser::T__6);
      break;
    }

    case 3: {
      setState(1788);
      oC_NullOperatorExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_ListExtractOperatorExpressionContext* CypherParser::OC_ListOperatorExpressionContext::kU_ListExtractOperatorExpression() {
  return getRuleContext<CypherParser::KU_ListExtractOperatorExpressionContext>(0);
}

CypherParser::KU_ListSliceOperatorExpressionContext* CypherParser::OC_ListOperatorExpressionContext::kU_ListSliceOperatorExpression() {
  return getRuleContext<CypherParser::KU_ListSliceOperatorExpressionContext>(0);
}


size_t CypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListOperatorExpression;
}


CypherParser::OC_ListOperatorExpressionContext* CypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 206, CypherParser::RuleOC_ListOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1793);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1791);
      kU_ListExtractOperatorExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1792);
      kU_ListSliceOperatorExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListExtractOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_ListExtractOperatorExpressionContext::KU_ListExtractOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListExtractOperatorExpressionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_ListExtractOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListExtractOperatorExpression;
}


CypherParser::KU_ListExtractOperatorExpressionContext* CypherParser::kU_ListExtractOperatorExpression() {
  KU_ListExtractOperatorExpressionContext *_localctx = _tracker.createInstance<KU_ListExtractOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 208, CypherParser::RuleKU_ListExtractOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1795);
    match(CypherParser::T__6);
    setState(1796);
    oC_Expression();
    setState(1797);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListSliceOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_ListSliceOperatorExpressionContext::KU_ListSliceOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::KU_ListSliceOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListSliceOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::KU_ListSliceOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListSliceOperatorExpression;
}


CypherParser::KU_ListSliceOperatorExpressionContext* CypherParser::kU_ListSliceOperatorExpression() {
  KU_ListSliceOperatorExpressionContext *_localctx = _tracker.createInstance<KU_ListSliceOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 210, CypherParser::RuleKU_ListSliceOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1799);
    match(CypherParser::T__6);
    setState(1801);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 281475110929028) != 0) || ((((_la - 109) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 109)) & 1276780293) != 0)) {
      setState(1800);
      oC_Expression();
    }
    setState(1803);
    match(CypherParser::T__5);
    setState(1805);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 281475110929028) != 0) || ((((_la - 109) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 109)) & 1276780293) != 0)) {
      setState(1804);
      oC_Expression();
    }
    setState(1807);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringOperatorExpressionContext::OC_StringOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_RegularExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_RegularExpression() {
  return getRuleContext<CypherParser::OC_RegularExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_StringOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::STARTS() {
  return getToken(CypherParser::STARTS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::ENDS() {
  return getToken(CypherParser::ENDS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}


size_t CypherParser::OC_StringOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringOperatorExpression;
}


CypherParser::OC_StringOperatorExpressionContext* CypherParser::oC_StringOperatorExpression() {
  OC_StringOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 212, CypherParser::RuleOC_StringOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1820);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx)) {
    case 1: {
      setState(1809);
      oC_RegularExpression();
      break;
    }

    case 2: {
      setState(1810);
      match(CypherParser::SP);
      setState(1811);
      match(CypherParser::STARTS);
      setState(1812);
      match(CypherParser::SP);
      setState(1813);
      match(CypherParser::WITH);
      break;
    }

    case 3: {
      setState(1814);
      match(CypherParser::SP);
      setState(1815);
      match(CypherParser::ENDS);
      setState(1816);
      match(CypherParser::SP);
      setState(1817);
      match(CypherParser::WITH);
      break;
    }

    case 4: {
      setState(1818);
      match(CypherParser::SP);
      setState(1819);
      match(CypherParser::CONTAINS);
      break;
    }

    default:
      break;
    }
    setState(1823);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1822);
      match(CypherParser::SP);
    }
    setState(1825);
    oC_PropertyOrLabelsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularExpressionContext ------------------------------------------------------------------

CypherParser::OC_RegularExpressionContext::OC_RegularExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RegularExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_RegularExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularExpression;
}


CypherParser::OC_RegularExpressionContext* CypherParser::oC_RegularExpression() {
  OC_RegularExpressionContext *_localctx = _tracker.createInstance<OC_RegularExpressionContext>(_ctx, getState());
  enterRule(_localctx, 214, CypherParser::RuleOC_RegularExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1828);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1827);
      match(CypherParser::SP);
    }
    setState(1830);
    match(CypherParser::T__24);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_NullOperatorExpressionContext::OC_NullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NullOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}


size_t CypherParser::OC_NullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NullOperatorExpression;
}


CypherParser::OC_NullOperatorExpressionContext* CypherParser::oC_NullOperatorExpression() {
  OC_NullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 216, CypherParser::RuleOC_NullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1842);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1832);
      match(CypherParser::SP);
      setState(1833);
      match(CypherParser::IS);
      setState(1834);
      match(CypherParser::SP);
      setState(1835);
      match(CypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1836);
      match(CypherParser::SP);
      setState(1837);
      match(CypherParser::IS);
      setState(1838);
      match(CypherParser::SP);
      setState(1839);
      match(CypherParser::NOT);
      setState(1840);
      match(CypherParser::SP);
      setState(1841);
      match(CypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyOrLabelsExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyOrLabelsExpressionContext::OC_PropertyOrLabelsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

std::vector<CypherParser::OC_PropertyLookupContext *> CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<CypherParser::OC_PropertyLookupContext>();
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PropertyOrLabelsExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PropertyOrLabelsExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PropertyOrLabelsExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyOrLabelsExpression;
}


CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::oC_PropertyOrLabelsExpression() {
  OC_PropertyOrLabelsExpressionContext *_localctx = _tracker.createInstance<OC_PropertyOrLabelsExpressionContext>(_ctx, getState());
  enterRule(_localctx, 218, CypherParser::RuleOC_PropertyOrLabelsExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1844);
    oC_Atom();
    setState(1851);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1846);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1845);
          match(CypherParser::SP);
        }
        setState(1848);
        oC_PropertyLookup(); 
      }
      setState(1853);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

CypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LiteralContext* CypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

CypherParser::OC_ParameterContext* CypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<CypherParser::OC_ParameterContext>(0);
}

CypherParser::OC_CaseExpressionContext* CypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<CypherParser::OC_CaseExpressionContext>(0);
}

CypherParser::OC_ParenthesizedExpressionContext* CypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<CypherParser::OC_ParenthesizedExpressionContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_ExistentialSubqueryContext* CypherParser::OC_AtomContext::oC_ExistentialSubquery() {
  return getRuleContext<CypherParser::OC_ExistentialSubqueryContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_AtomContext::getRuleIndex() const {
  return CypherParser::RuleOC_Atom;
}


CypherParser::OC_AtomContext* CypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
  enterRule(_localctx, 220, CypherParser::RuleOC_Atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1861);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1854);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1855);
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1856);
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1857);
      oC_ParenthesizedExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1858);
      oC_FunctionInvocation();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1859);
      oC_ExistentialSubquery();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1860);
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

CypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NumberLiteralContext* CypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<CypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_BooleanLiteralContext* CypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<CypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

CypherParser::OC_ListLiteralContext* CypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<CypherParser::OC_ListLiteralContext>(0);
}

CypherParser::KU_StructLiteralContext* CypherParser::OC_LiteralContext::kU_StructLiteral() {
  return getRuleContext<CypherParser::KU_StructLiteralContext>(0);
}


size_t CypherParser::OC_LiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_Literal;
}


CypherParser::OC_LiteralContext* CypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
  enterRule(_localctx, 222, CypherParser::RuleOC_Literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1869);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::DecimalInteger:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(1863);
        oC_NumberLiteral();
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(1864);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::TRUE:
      case CypherParser::FALSE: {
        enterOuterAlt(_localctx, 3);
        setState(1865);
        oC_BooleanLiteral();
        break;
      }

      case CypherParser::NULL_: {
        enterOuterAlt(_localctx, 4);
        setState(1866);
        match(CypherParser::NULL_);
        break;
      }

      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 5);
        setState(1867);
        oC_ListLiteral();
        break;
      }

      case CypherParser::T__8: {
        enterOuterAlt(_localctx, 6);
        setState(1868);
        kU_StructLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

CypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::TRUE() {
  return getToken(CypherParser::TRUE, 0);
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::FALSE() {
  return getToken(CypherParser::FALSE, 0);
}


size_t CypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_BooleanLiteral;
}


CypherParser::OC_BooleanLiteralContext* CypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 224, CypherParser::RuleOC_BooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1871);
    _la = _input->LA(1);
    if (!(_la == CypherParser::TRUE

    || _la == CypherParser::FALSE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

CypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<CypherParser::KU_ListEntryContext *> CypherParser::OC_ListLiteralContext::kU_ListEntry() {
  return getRuleContexts<CypherParser::KU_ListEntryContext>();
}

CypherParser::KU_ListEntryContext* CypherParser::OC_ListLiteralContext::kU_ListEntry(size_t i) {
  return getRuleContext<CypherParser::KU_ListEntryContext>(i);
}


size_t CypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListLiteral;
}


CypherParser::OC_ListLiteralContext* CypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 226, CypherParser::RuleOC_ListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1873);
    match(CypherParser::T__6);
    setState(1875);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1874);
      match(CypherParser::SP);
    }
    setState(1890);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 281475110929028) != 0) || ((((_la - 109) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 109)) & 1276780293) != 0)) {
      setState(1877);
      oC_Expression();
      setState(1879);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1878);
        match(CypherParser::SP);
      }
      setState(1887);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__3) {
        setState(1881);
        kU_ListEntry();
        setState(1883);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1882);
          match(CypherParser::SP);
        }
        setState(1889);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1892);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListEntryContext ------------------------------------------------------------------

CypherParser::KU_ListEntryContext::KU_ListEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ListEntryContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListEntryContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_ListEntryContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListEntry;
}


CypherParser::KU_ListEntryContext* CypherParser::kU_ListEntry() {
  KU_ListEntryContext *_localctx = _tracker.createInstance<KU_ListEntryContext>(_ctx, getState());
  enterRule(_localctx, 228, CypherParser::RuleKU_ListEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1894);
    match(CypherParser::T__3);
    setState(1896);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx)) {
    case 1: {
      setState(1895);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1899);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 281475110929028) != 0) || ((((_la - 109) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 109)) & 1276780293) != 0)) {
      setState(1898);
      oC_Expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructLiteralContext ------------------------------------------------------------------

CypherParser::KU_StructLiteralContext::KU_StructLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_StructFieldContext *> CypherParser::KU_StructLiteralContext::kU_StructField() {
  return getRuleContexts<CypherParser::KU_StructFieldContext>();
}

CypherParser::KU_StructFieldContext* CypherParser::KU_StructLiteralContext::kU_StructField(size_t i) {
  return getRuleContext<CypherParser::KU_StructFieldContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructLiteralContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructLiteral;
}


CypherParser::KU_StructLiteralContext* CypherParser::kU_StructLiteral() {
  KU_StructLiteralContext *_localctx = _tracker.createInstance<KU_StructLiteralContext>(_ctx, getState());
  enterRule(_localctx, 230, CypherParser::RuleKU_StructLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1901);
    match(CypherParser::T__8);
    setState(1903);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1902);
      match(CypherParser::SP);
    }
    setState(1905);
    kU_StructField();
    setState(1907);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1906);
      match(CypherParser::SP);
    }
    setState(1919);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__3) {
      setState(1909);
      match(CypherParser::T__3);
      setState(1911);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1910);
        match(CypherParser::SP);
      }
      setState(1913);
      kU_StructField();
      setState(1915);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1914);
        match(CypherParser::SP);
      }
      setState(1921);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1922);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructFieldContext ------------------------------------------------------------------

CypherParser::KU_StructFieldContext::KU_StructFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StructFieldContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StructFieldContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructFieldContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructFieldContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructField;
}


CypherParser::KU_StructFieldContext* CypherParser::kU_StructField() {
  KU_StructFieldContext *_localctx = _tracker.createInstance<KU_StructFieldContext>(_ctx, getState());
  enterRule(_localctx, 232, CypherParser::RuleKU_StructField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1926);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::COMMENT:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1924);
        oC_SymbolicName();
        break;
      }

      case CypherParser::StringLiteral: {
        setState(1925);
        match(CypherParser::StringLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1929);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1928);
      match(CypherParser::SP);
    }
    setState(1931);
    match(CypherParser::T__5);
    setState(1933);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1932);
      match(CypherParser::SP);
    }
    setState(1935);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

CypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ParenthesizedExpression;
}


CypherParser::OC_ParenthesizedExpressionContext* CypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 234, CypherParser::RuleOC_ParenthesizedExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1937);
    match(CypherParser::T__1);
    setState(1939);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1938);
      match(CypherParser::SP);
    }
    setState(1941);
    oC_Expression();
    setState(1943);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1942);
      match(CypherParser::SP);
    }
    setState(1945);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

CypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_FunctionNameContext* CypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

std::vector<CypherParser::KU_FunctionParameterContext *> CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter() {
  return getRuleContexts<CypherParser::KU_FunctionParameterContext>();
}

CypherParser::KU_FunctionParameterContext* CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter(size_t i) {
  return getRuleContext<CypherParser::KU_FunctionParameterContext>(i);
}


size_t CypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionInvocation;
}


CypherParser::OC_FunctionInvocationContext* CypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
  enterRule(_localctx, 236, CypherParser::RuleOC_FunctionInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1996);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1947);
      oC_FunctionName();
      setState(1949);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1948);
        match(CypherParser::SP);
      }
      setState(1951);
      match(CypherParser::T__1);
      setState(1953);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1952);
        match(CypherParser::SP);
      }
      setState(1955);
      match(CypherParser::STAR);
      setState(1957);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1956);
        match(CypherParser::SP);
      }
      setState(1959);
      match(CypherParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1961);
      oC_FunctionName();
      setState(1963);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1962);
        match(CypherParser::SP);
      }
      setState(1965);
      match(CypherParser::T__1);
      setState(1967);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1966);
        match(CypherParser::SP);
      }
      setState(1973);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DISTINCT) {
        setState(1969);
        match(CypherParser::DISTINCT);
        setState(1971);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1970);
          match(CypherParser::SP);
        }
      }
      setState(1992);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 281475110929028) != 0) || ((((_la - 109) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 109)) & 1276780293) != 0)) {
        setState(1975);
        kU_FunctionParameter();
        setState(1977);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1976);
          match(CypherParser::SP);
        }
        setState(1989);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__3) {
          setState(1979);
          match(CypherParser::T__3);
          setState(1981);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1980);
            match(CypherParser::SP);
          }
          setState(1983);
          kU_FunctionParameter();
          setState(1985);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1984);
            match(CypherParser::SP);
          }
          setState(1991);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(1994);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

CypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionName;
}


CypherParser::OC_FunctionNameContext* CypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 238, CypherParser::RuleOC_FunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1998);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FunctionParameterContext ------------------------------------------------------------------

CypherParser::KU_FunctionParameterContext::KU_FunctionParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_FunctionParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_FunctionParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FunctionParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_FunctionParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_FunctionParameter;
}


CypherParser::KU_FunctionParameterContext* CypherParser::kU_FunctionParameter() {
  KU_FunctionParameterContext *_localctx = _tracker.createInstance<KU_FunctionParameterContext>(_ctx, getState());
  enterRule(_localctx, 240, CypherParser::RuleKU_FunctionParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2009);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx)) {
    case 1: {
      setState(2000);
      oC_SymbolicName();
      setState(2002);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2001);
        match(CypherParser::SP);
      }
      setState(2004);
      match(CypherParser::T__5);
      setState(2005);
      match(CypherParser::T__4);
      setState(2007);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2006);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(2011);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExistentialSubqueryContext ------------------------------------------------------------------

CypherParser::OC_ExistentialSubqueryContext::OC_ExistentialSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExistentialSubqueryContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}

tree::TerminalNode* CypherParser::OC_ExistentialSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_ExistentialSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExistentialSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExistentialSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_ExistentialSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_ExistentialSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_ExistentialSubquery;
}


CypherParser::OC_ExistentialSubqueryContext* CypherParser::oC_ExistentialSubquery() {
  OC_ExistentialSubqueryContext *_localctx = _tracker.createInstance<OC_ExistentialSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 242, CypherParser::RuleOC_ExistentialSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2013);
    match(CypherParser::EXISTS);
    setState(2015);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2014);
      match(CypherParser::SP);
    }
    setState(2017);
    match(CypherParser::T__8);
    setState(2019);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2018);
      match(CypherParser::SP);
    }
    setState(2021);
    match(CypherParser::MATCH);
    setState(2023);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2022);
      match(CypherParser::SP);
    }
    setState(2025);
    oC_Pattern();
    setState(2030);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 346, _ctx)) {
    case 1: {
      setState(2027);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2026);
        match(CypherParser::SP);
      }
      setState(2029);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2033);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2032);
      match(CypherParser::SP);
    }
    setState(2035);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

CypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyLookup;
}


CypherParser::OC_PropertyLookupContext* CypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
  enterRule(_localctx, 244, CypherParser::RuleOC_PropertyLookup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2037);
    match(CypherParser::T__25);
    setState(2039);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2038);
      match(CypherParser::SP);
    }
    setState(2043);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::COMMENT:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2041);
        oC_PropertyKeyName();
        break;
      }

      case CypherParser::STAR: {
        setState(2042);
        match(CypherParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

CypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(CypherParser::ELSE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(CypherParser::CASE, 0);
}

std::vector<CypherParser::OC_CaseAlternativeContext *> CypherParser::OC_CaseExpressionContext::oC_CaseAlternative() {
  return getRuleContexts<CypherParser::OC_CaseAlternativeContext>();
}

CypherParser::OC_CaseAlternativeContext* CypherParser::OC_CaseExpressionContext::oC_CaseAlternative(size_t i) {
  return getRuleContext<CypherParser::OC_CaseAlternativeContext>(i);
}


size_t CypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseExpression;
}


CypherParser::OC_CaseExpressionContext* CypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 246, CypherParser::RuleOC_CaseExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2067);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 355, _ctx)) {
    case 1: {
      setState(2045);
      match(CypherParser::CASE);
      setState(2050); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2047);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2046);
                  match(CypherParser::SP);
                }
                setState(2049);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2052); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 351, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(2054);
      match(CypherParser::CASE);
      setState(2056);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2055);
        match(CypherParser::SP);
      }
      setState(2058);
      oC_Expression();
      setState(2063); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2060);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2059);
                  match(CypherParser::SP);
                }
                setState(2062);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2065); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 354, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
    setState(2077);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 358, _ctx)) {
    case 1: {
      setState(2070);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2069);
        match(CypherParser::SP);
      }
      setState(2072);
      match(CypherParser::ELSE);
      setState(2074);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2073);
        match(CypherParser::SP);
      }
      setState(2076);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(2080);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2079);
      match(CypherParser::SP);
    }
    setState(2082);
    match(CypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativeContext ------------------------------------------------------------------

CypherParser::OC_CaseAlternativeContext::OC_CaseAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::WHEN() {
  return getToken(CypherParser::WHEN, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseAlternativeContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseAlternativeContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::THEN() {
  return getToken(CypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseAlternativeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CaseAlternativeContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseAlternative;
}


CypherParser::OC_CaseAlternativeContext* CypherParser::oC_CaseAlternative() {
  OC_CaseAlternativeContext *_localctx = _tracker.createInstance<OC_CaseAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 248, CypherParser::RuleOC_CaseAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2084);
    match(CypherParser::WHEN);
    setState(2086);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2085);
      match(CypherParser::SP);
    }
    setState(2088);
    oC_Expression();
    setState(2090);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2089);
      match(CypherParser::SP);
    }
    setState(2092);
    match(CypherParser::THEN);
    setState(2094);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2093);
      match(CypherParser::SP);
    }
    setState(2096);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

CypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_VariableContext::getRuleIndex() const {
  return CypherParser::RuleOC_Variable;
}


CypherParser::OC_VariableContext* CypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
  enterRule(_localctx, 250, CypherParser::RuleOC_Variable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2098);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

CypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_DoubleLiteralContext* CypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<CypherParser::OC_DoubleLiteralContext>(0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_NumberLiteral;
}


CypherParser::OC_NumberLiteralContext* CypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 252, CypherParser::RuleOC_NumberLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2102);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2100);
        oC_DoubleLiteral();
        break;
      }

      case CypherParser::DecimalInteger: {
        enterOuterAlt(_localctx, 2);
        setState(2101);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

CypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_ParameterContext::getRuleIndex() const {
  return CypherParser::RuleOC_Parameter;
}


CypherParser::OC_ParameterContext* CypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
  enterRule(_localctx, 254, CypherParser::RuleOC_Parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2104);
    match(CypherParser::T__26);
    setState(2107);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::COMMENT:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2105);
        oC_SymbolicName();
        break;
      }

      case CypherParser::DecimalInteger: {
        setState(2106);
        match(CypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyExpression;
}


CypherParser::OC_PropertyExpressionContext* CypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 256, CypherParser::RuleOC_PropertyExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2109);
    oC_Atom();
    setState(2111);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2110);
      match(CypherParser::SP);
    }
    setState(2113);
    oC_PropertyLookup();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

CypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyKeyName;
}


CypherParser::OC_PropertyKeyNameContext* CypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
  enterRule(_localctx, 258, CypherParser::RuleOC_PropertyKeyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2115);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

CypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_IntegerLiteral;
}


CypherParser::OC_IntegerLiteralContext* CypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 260, CypherParser::RuleOC_IntegerLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2117);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

CypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(CypherParser::RegularDecimalReal, 0);
}


size_t CypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_DoubleLiteral;
}


CypherParser::OC_DoubleLiteralContext* CypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 262, CypherParser::RuleOC_DoubleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2119);
    match(CypherParser::RegularDecimalReal);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

CypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SchemaName;
}


CypherParser::OC_SchemaNameContext* CypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 264, CypherParser::RuleOC_SchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2121);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

CypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(CypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(CypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(CypherParser::HexLetter, 0);
}

CypherParser::KU_NonReservedKeywordsContext* CypherParser::OC_SymbolicNameContext::kU_NonReservedKeywords() {
  return getRuleContext<CypherParser::KU_NonReservedKeywordsContext>(0);
}


size_t CypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SymbolicName;
}


CypherParser::OC_SymbolicNameContext* CypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
  enterRule(_localctx, 266, CypherParser::RuleOC_SymbolicName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2128);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::UnescapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(2123);
        match(CypherParser::UnescapedSymbolicName);
        break;
      }

      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(2124);
        antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken = match(CypherParser::EscapedSymbolicName);
        if ((antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken != nullptr ? antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken->getText() : "") == "``") { notifyEmptyToken(antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken); }
        break;
      }

      case CypherParser::HexLetter: {
        enterOuterAlt(_localctx, 3);
        setState(2126);
        match(CypherParser::HexLetter);
        break;
      }

      case CypherParser::COMMENT: {
        enterOuterAlt(_localctx, 4);
        setState(2127);
        kU_NonReservedKeywords();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_NonReservedKeywordsContext ------------------------------------------------------------------

CypherParser::KU_NonReservedKeywordsContext::KU_NonReservedKeywordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMENT() {
  return getToken(CypherParser::COMMENT, 0);
}


size_t CypherParser::KU_NonReservedKeywordsContext::getRuleIndex() const {
  return CypherParser::RuleKU_NonReservedKeywords;
}


CypherParser::KU_NonReservedKeywordsContext* CypherParser::kU_NonReservedKeywords() {
  KU_NonReservedKeywordsContext *_localctx = _tracker.createInstance<KU_NonReservedKeywordsContext>(_ctx, getState());
  enterRule(_localctx, 268, CypherParser::RuleKU_NonReservedKeywords);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2130);
    match(CypherParser::COMMENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_LeftArrowHead;
}


CypherParser::OC_LeftArrowHeadContext* CypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 270, CypherParser::RuleOC_LeftArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2132);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4026548224) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_RightArrowHead;
}


CypherParser::OC_RightArrowHeadContext* CypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 272, CypherParser::RuleOC_RightArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2134);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 64424574976) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

CypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DashContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::OC_DashContext::getRuleIndex() const {
  return CypherParser::RuleOC_Dash;
}


CypherParser::OC_DashContext* CypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
  enterRule(_localctx, 274, CypherParser::RuleOC_Dash);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2136);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 140668768878592) != 0) || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CypherParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 29: return kU_DataTypeSempred(antlrcpp::downCast<KU_DataTypeContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_DataTypeSempred(KU_DataTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

void CypherParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cypherParserInitialize();
#else
  ::antlr4::internal::call_once(cypherParserOnceFlag, cypherParserInitialize);
#endif
}
