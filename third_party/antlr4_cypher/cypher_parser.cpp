
// Generated from Cypher.g4 by ANTLR 4.13.1



#include "cypher_parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct CypherParserStaticData final {
  CypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CypherParserStaticData(const CypherParserStaticData&) = delete;
  CypherParserStaticData(CypherParserStaticData&&) = delete;
  CypherParserStaticData& operator=(const CypherParserStaticData&) = delete;
  CypherParserStaticData& operator=(CypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cypherParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CypherParserStaticData *cypherParserStaticData = nullptr;

void cypherParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cypherParserStaticData != nullptr) {
    return;
  }
#else
  assert(cypherParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CypherParserStaticData>(
    std::vector<std::string>{
      "ku_Statements", "oC_Cypher", "oC_Statement", "kU_CopyFrom", "kU_ColumnNames", 
      "kU_ScanSource", "kU_CopyFromByColumn", "kU_CopyTO", "kU_ExportDatabase", 
      "kU_ImportDatabase", "kU_StandaloneCall", "kU_CommentOn", "kU_CreateMacro", 
      "kU_PositionalArgs", "kU_DefaultArg", "kU_FilePaths", "kU_ParsingOptions", 
      "kU_ParsingOption", "kU_DDL", "kU_CreateNodeTable", "kU_CreateRelTable", 
      "kU_CreateRelTableGroup", "kU_RelTableConnection", "kU_CreateRdfGraph", 
      "kU_DropTable", "kU_AlterTable", "kU_AlterOptions", "kU_AddProperty", 
      "kU_DropProperty", "kU_RenameTable", "kU_RenameProperty", "kU_PropertyDefinitions", 
      "kU_PropertyDefinition", "kU_CreateNodeConstraint", "kU_DataType", 
      "kU_ListIdentifiers", "kU_ListIdentifier", "oC_AnyCypherOption", "oC_Explain", 
      "oC_Profile", "kU_Transaction", "kU_Extension", "kU_LoadExtension", 
      "kU_InstallExtension", "oC_Query", "oC_RegularQuery", "oC_Union", 
      "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", "kU_QueryPart", 
      "oC_UpdatingClause", "oC_ReadingClause", "kU_LoadFrom", "kU_InQueryCall", 
      "oC_Match", "oC_Unwind", "oC_Create", "oC_Merge", "oC_MergeAction", 
      "oC_Set", "oC_SetItem", "oC_Delete", "oC_With", "oC_Return", "oC_ProjectionBody", 
      "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", "oC_Skip", 
      "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", "oC_PatternPart", 
      "oC_AnonymousPatternPart", "oC_PatternElement", "oC_NodePattern", 
      "oC_PatternElementChain", "oC_RelationshipPattern", "oC_RelationshipDetail", 
      "kU_Properties", "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
      "oC_RangeLiteral", "kU_RecursiveRelationshipComprehension", "kU_IntermediateNodeProjectionItems", 
      "kU_IntermediateRelProjectionItems", "oC_LowerBound", "oC_UpperBound", 
      "oC_LabelName", "oC_RelTypeName", "oC_Expression", "oC_OrExpression", 
      "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression", 
      "kU_ComparisonOperator", "kU_BitwiseOrOperatorExpression", "kU_BitwiseAndOperatorExpression", 
      "kU_BitShiftOperatorExpression", "kU_BitShiftOperator", "oC_AddOrSubtractExpression", 
      "kU_AddOrSubtractOperator", "oC_MultiplyDivideModuloExpression", "kU_MultiplyDivideModuloOperator", 
      "oC_PowerOfExpression", "oC_UnaryAddSubtractOrFactorialExpression", 
      "oC_StringListNullOperatorExpression", "oC_ListOperatorExpression", 
      "oC_StringOperatorExpression", "oC_RegularExpression", "oC_NullOperatorExpression", 
      "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Literal", "oC_BooleanLiteral", 
      "oC_ListLiteral", "kU_ListEntry", "kU_StructLiteral", "kU_StructField", 
      "oC_ParenthesizedExpression", "oC_FunctionInvocation", "oC_FunctionName", 
      "kU_FunctionParameter", "oC_PathPatterns", "oC_ExistSubquery", "kU_CountSubquery", 
      "oC_PropertyLookup", "oC_CaseExpression", "oC_CaseAlternative", "oC_Variable", 
      "oC_NumberLiteral", "oC_Parameter", "oC_PropertyExpression", "oC_PropertyKeyName", 
      "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_SchemaName", "oC_SymbolicName", 
      "kU_NonReservedKeywords", "oC_LeftArrowHead", "oC_RightArrowHead", 
      "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "'('", "','", "')'", "'='", "'['", "']'", "'{'", "'}'", 
      "'|'", "'..'", "'<>'", "'<'", "'<='", "'>'", "'>='", "'&'", "'>>'", 
      "'<<'", "'+'", "'/'", "'%'", "'^'", "'=~'", "'.'", "'$'", "'\\u27E8'", 
      "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", "'\\uFE65'", 
      "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", 
      "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", "'\\uFF0D'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "'*'", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "'!='", "'-'", "'!'", "':'", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "CALL", "COMMENT_", 
      "MACRO", "GLOB", "COPY", "FROM", "COLUMN", "EXPORT", "IMPORT", "DATABASE", 
      "NODE", "TABLE", "GROUP", "RDFGRAPH", "DROP", "ALTER", "DEFAULT", 
      "RENAME", "ADD", "PRIMARY", "KEY", "REL", "TO", "EXPLAIN", "PROFILE", 
      "BEGIN", "TRANSACTION", "READ", "ONLY", "WRITE", "COMMIT", "COMMIT_SKIP_CHECKPOINT", 
      "ROLLBACK", "ROLLBACK_SKIP_CHECKPOINT", "INSTALL", "EXTENSION", "UNION", 
      "ALL", "LOAD", "HEADERS", "OPTIONAL", "MATCH", "UNWIND", "CREATE", 
      "MERGE", "ON", "SET", "DETACH", "DELETE", "WITH", "RETURN", "DISTINCT", 
      "STAR", "AS", "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", 
      "DESCENDING", "DESC", "WHERE", "SHORTEST", "OR", "XOR", "AND", "NOT", 
      "INVALID_NOT_EQUAL", "MINUS", "FACTORIAL", "COLON", "IN", "STARTS", 
      "ENDS", "CONTAINS", "IS", "NULL_", "TRUE", "FALSE", "COUNT", "EXISTS", 
      "CASE", "ELSE", "END", "WHEN", "THEN", "StringLiteral", "EscapedChar", 
      "DecimalInteger", "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
      "NonZeroOctDigit", "ZeroDigit", "RegularDecimalReal", "UnescapedSymbolicName", 
      "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", "SP", 
      "WHITESPACE", "Comment", "Unknown"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,150,2294,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,1,0,
  	1,0,3,0,295,8,0,1,0,1,0,3,0,299,8,0,1,0,5,0,302,8,0,10,0,12,0,305,9,0,
  	1,0,3,0,308,8,0,1,0,1,0,1,1,3,1,313,8,1,1,1,3,1,316,8,1,1,1,1,1,3,1,320,
  	8,1,1,1,3,1,323,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
  	2,337,8,2,1,3,1,3,1,3,1,3,3,3,343,8,3,1,3,1,3,3,3,347,8,3,1,3,3,3,350,
  	8,3,1,3,1,3,1,3,1,3,3,3,356,8,3,1,3,3,3,359,8,3,1,4,1,4,3,4,363,8,4,1,
  	4,1,4,3,4,367,8,4,1,4,1,4,3,4,371,8,4,1,4,5,4,374,8,4,10,4,12,4,377,9,
  	4,1,4,3,4,380,8,4,1,4,1,4,1,5,1,5,1,5,3,5,387,8,5,1,5,1,5,3,5,391,8,5,
  	1,5,1,5,1,5,3,5,396,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,406,8,6,1,
  	6,1,6,3,6,410,8,6,1,6,1,6,3,6,414,8,6,1,6,5,6,417,8,6,10,6,12,6,420,9,
  	6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,3,7,432,8,7,1,7,1,7,3,7,436,
  	8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,444,8,7,1,7,3,7,447,8,7,1,8,1,8,1,8,1,
  	8,1,8,1,8,3,8,455,8,8,1,8,3,8,458,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,
  	10,1,10,1,10,3,10,470,8,10,1,10,1,10,3,10,474,8,10,1,10,1,10,1,11,1,11,
  	1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
  	1,12,1,12,3,12,496,8,12,1,12,1,12,3,12,500,8,12,1,12,3,12,503,8,12,1,
  	12,3,12,506,8,12,1,12,3,12,509,8,12,1,12,3,12,512,8,12,1,12,1,12,3,12,
  	516,8,12,1,12,5,12,519,8,12,10,12,12,12,522,9,12,1,12,3,12,525,8,12,1,
  	12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,3,13,535,8,13,1,13,1,13,3,13,539,
  	8,13,1,13,5,13,542,8,13,10,13,12,13,545,9,13,1,14,1,14,3,14,549,8,14,
  	1,14,1,14,1,14,3,14,554,8,14,1,14,1,14,1,15,1,15,3,15,560,8,15,1,15,1,
  	15,3,15,564,8,15,1,15,1,15,3,15,568,8,15,1,15,5,15,571,8,15,10,15,12,
  	15,574,9,15,1,15,1,15,1,15,1,15,3,15,580,8,15,1,15,1,15,3,15,584,8,15,
  	1,15,1,15,3,15,588,8,15,1,15,3,15,591,8,15,1,16,1,16,3,16,595,8,16,1,
  	16,1,16,3,16,599,8,16,1,16,1,16,3,16,603,8,16,1,16,5,16,606,8,16,10,16,
  	12,16,609,9,16,1,16,3,16,612,8,16,1,16,1,16,1,17,1,17,3,17,618,8,17,1,
  	17,1,17,3,17,622,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,632,
  	8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,642,8,19,1,19,1,19,
  	3,19,646,8,19,1,19,1,19,3,19,650,8,19,1,19,1,19,3,19,654,8,19,1,19,1,
  	19,1,19,3,19,659,8,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
  	20,3,20,671,8,20,1,20,1,20,3,20,675,8,20,1,20,1,20,3,20,679,8,20,1,20,
  	1,20,3,20,683,8,20,1,20,1,20,3,20,687,8,20,3,20,689,8,20,1,20,1,20,3,
  	20,693,8,20,1,20,1,20,3,20,697,8,20,3,20,699,8,20,1,20,1,20,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,713,8,21,1,21,1,21,3,21,
  	717,8,21,1,21,1,21,3,21,721,8,21,1,21,1,21,3,21,725,8,21,1,21,4,21,728,
  	8,21,11,21,12,21,729,1,21,3,21,733,8,21,1,21,1,21,3,21,737,8,21,1,21,
  	1,21,3,21,741,8,21,3,21,743,8,21,1,21,1,21,3,21,747,8,21,1,21,1,21,3,
  	21,751,8,21,3,21,753,8,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
  	1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,3,26,789,8,26,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,800,8,27,1,28,1,28,
  	1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,31,1,31,3,31,822,8,31,1,31,1,31,3,31,826,8,31,1,31,5,31,829,
  	8,31,10,31,12,31,832,9,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,3,33,
  	842,8,33,1,33,1,33,3,33,846,8,33,1,33,1,33,3,33,850,8,33,1,33,1,33,1,
  	34,1,34,1,34,1,34,3,34,858,8,34,1,34,1,34,3,34,862,8,34,1,34,1,34,3,34,
  	866,8,34,1,34,1,34,1,34,1,34,3,34,872,8,34,1,34,1,34,3,34,876,8,34,1,
  	34,1,34,3,34,880,8,34,1,34,1,34,1,34,1,34,3,34,886,8,34,1,34,1,34,3,34,
  	890,8,34,1,34,1,34,3,34,894,8,34,1,34,1,34,3,34,898,8,34,1,34,1,34,3,
  	34,902,8,34,1,34,1,34,3,34,906,8,34,1,34,1,34,5,34,910,8,34,10,34,12,
  	34,913,9,34,1,35,1,35,5,35,917,8,35,10,35,12,35,920,9,35,1,36,1,36,3,
  	36,924,8,36,1,36,1,36,1,37,1,37,3,37,930,8,37,1,38,1,38,1,39,1,39,1,40,
  	1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,
  	950,8,40,1,41,1,41,3,41,954,8,41,1,42,1,42,1,42,1,42,1,42,1,42,3,42,962,
  	8,42,1,43,1,43,1,43,1,43,1,44,1,44,1,45,1,45,3,45,972,8,45,1,45,5,45,
  	975,8,45,10,45,12,45,978,9,45,1,45,1,45,3,45,982,8,45,4,45,984,8,45,11,
  	45,12,45,985,1,45,1,45,1,45,3,45,991,8,45,1,46,1,46,1,46,1,46,3,46,997,
  	8,46,1,46,1,46,1,46,3,46,1002,8,46,1,46,3,46,1005,8,46,1,47,1,47,3,47,
  	1009,8,47,1,48,1,48,3,48,1013,8,48,5,48,1015,8,48,10,48,12,48,1018,9,
  	48,1,48,1,48,1,48,3,48,1023,8,48,5,48,1025,8,48,10,48,12,48,1028,9,48,
  	1,48,1,48,3,48,1032,8,48,1,48,5,48,1035,8,48,10,48,12,48,1038,9,48,1,
  	48,3,48,1041,8,48,1,48,3,48,1044,8,48,1,48,1,48,3,48,1048,8,48,4,48,1050,
  	8,48,11,48,12,48,1051,1,48,1,48,3,48,1056,8,48,1,49,1,49,3,49,1060,8,
  	49,4,49,1062,8,49,11,49,12,49,1063,1,49,1,49,1,50,1,50,3,50,1070,8,50,
  	5,50,1072,8,50,10,50,12,50,1075,9,50,1,50,1,50,3,50,1079,8,50,5,50,1081,
  	8,50,10,50,12,50,1084,9,50,1,50,1,50,1,51,1,51,1,51,1,51,3,51,1092,8,
  	51,1,52,1,52,1,52,1,52,3,52,1098,8,52,1,53,1,53,1,53,1,53,1,53,1,53,3,
  	53,1106,8,53,1,53,1,53,3,53,1110,8,53,1,53,1,53,3,53,1114,8,53,1,53,1,
  	53,3,53,1118,8,53,1,53,1,53,1,53,1,53,1,53,3,53,1125,8,53,1,53,3,53,1128,
  	8,53,1,53,3,53,1131,8,53,1,53,3,53,1134,8,53,1,54,1,54,1,54,1,54,3,54,
  	1140,8,54,1,54,3,54,1143,8,54,1,55,1,55,3,55,1147,8,55,1,55,1,55,3,55,
  	1151,8,55,1,55,1,55,3,55,1155,8,55,1,55,3,55,1158,8,55,1,56,1,56,3,56,
  	1162,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,3,57,1172,8,57,1,57,
  	1,57,1,58,1,58,3,58,1178,8,58,1,58,1,58,1,58,5,58,1183,8,58,10,58,12,
  	58,1186,9,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1198,
  	8,59,1,60,1,60,3,60,1202,8,60,1,60,1,60,3,60,1206,8,60,1,60,1,60,3,60,
  	1210,8,60,1,60,5,60,1213,8,60,10,60,12,60,1216,9,60,1,61,1,61,3,61,1220,
  	8,61,1,61,1,61,3,61,1224,8,61,1,61,1,61,1,62,1,62,3,62,1230,8,62,1,62,
  	1,62,3,62,1234,8,62,1,62,1,62,3,62,1238,8,62,1,62,1,62,3,62,1242,8,62,
  	1,62,5,62,1245,8,62,10,62,12,62,1248,9,62,1,63,1,63,1,63,3,63,1253,8,
  	63,1,63,3,63,1256,8,63,1,64,1,64,1,64,1,65,3,65,1262,8,65,1,65,3,65,1265,
  	8,65,1,65,1,65,1,65,1,65,3,65,1271,8,65,1,65,1,65,3,65,1275,8,65,1,65,
  	1,65,3,65,1279,8,65,1,66,1,66,3,66,1283,8,66,1,66,1,66,3,66,1287,8,66,
  	1,66,5,66,1290,8,66,10,66,12,66,1293,9,66,1,66,1,66,3,66,1297,8,66,1,
  	66,1,66,3,66,1301,8,66,1,66,5,66,1304,8,66,10,66,12,66,1307,9,66,3,66,
  	1309,8,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1318,8,67,1,68,1,68,
  	1,68,1,68,1,68,1,68,1,68,3,68,1327,8,68,1,68,5,68,1330,8,68,10,68,12,
  	68,1333,9,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,71,1,71,3,71,1345,
  	8,71,1,71,3,71,1348,8,71,1,72,1,72,1,72,1,72,1,73,1,73,3,73,1356,8,73,
  	1,73,1,73,3,73,1360,8,73,1,73,5,73,1363,8,73,10,73,12,73,1366,9,73,1,
  	74,1,74,3,74,1370,8,74,1,74,1,74,3,74,1374,8,74,1,74,1,74,1,74,3,74,1379,
  	8,74,1,75,1,75,1,76,1,76,3,76,1385,8,76,1,76,5,76,1388,8,76,10,76,12,
  	76,1391,9,76,1,76,1,76,1,76,1,76,3,76,1397,8,76,1,77,1,77,3,77,1401,8,
  	77,1,77,1,77,3,77,1405,8,77,3,77,1407,8,77,1,77,1,77,3,77,1411,8,77,3,
  	77,1413,8,77,1,77,1,77,3,77,1417,8,77,3,77,1419,8,77,1,77,1,77,1,78,1,
  	78,3,78,1425,8,78,1,78,1,78,1,79,1,79,3,79,1431,8,79,1,79,1,79,3,79,1435,
  	8,79,1,79,3,79,1438,8,79,1,79,3,79,1441,8,79,1,79,1,79,1,79,1,79,3,79,
  	1447,8,79,1,79,3,79,1450,8,79,1,79,3,79,1453,8,79,1,79,1,79,3,79,1457,
  	8,79,1,79,1,79,1,79,1,79,3,79,1463,8,79,1,79,3,79,1466,8,79,1,79,3,79,
  	1469,8,79,1,79,1,79,3,79,1473,8,79,1,80,1,80,3,80,1477,8,80,1,80,1,80,
  	3,80,1481,8,80,3,80,1483,8,80,1,80,1,80,3,80,1487,8,80,3,80,1489,8,80,
  	1,80,1,80,3,80,1493,8,80,3,80,1495,8,80,1,80,1,80,3,80,1499,8,80,3,80,
  	1501,8,80,1,80,1,80,1,81,1,81,3,81,1507,8,81,1,81,1,81,3,81,1511,8,81,
  	1,81,1,81,3,81,1515,8,81,1,81,1,81,3,81,1519,8,81,1,81,1,81,3,81,1523,
  	8,81,1,81,1,81,3,81,1527,8,81,1,81,1,81,3,81,1531,8,81,1,81,1,81,3,81,
  	1535,8,81,5,81,1537,8,81,10,81,12,81,1540,9,81,3,81,1542,8,81,1,81,1,
  	81,1,82,1,82,3,82,1548,8,82,1,82,1,82,3,82,1552,8,82,1,82,1,82,3,82,1556,
  	8,82,1,82,3,82,1559,8,82,1,82,5,82,1562,8,82,10,82,12,82,1565,9,82,1,
  	83,1,83,3,83,1569,8,83,1,83,5,83,1572,8,83,10,83,12,83,1575,9,83,1,84,
  	1,84,3,84,1579,8,84,1,84,1,84,1,85,1,85,3,85,1585,8,85,1,85,1,85,1,85,
  	1,85,3,85,1591,8,85,1,85,3,85,1594,8,85,1,85,3,85,1597,8,85,1,85,3,85,
  	1600,8,85,1,85,1,85,3,85,1604,8,85,1,85,3,85,1607,8,85,1,85,3,85,1610,
  	8,85,1,85,3,85,1613,8,85,1,85,3,85,1616,8,85,1,86,1,86,3,86,1620,8,86,
  	1,86,1,86,3,86,1624,8,86,1,86,1,86,3,86,1628,8,86,1,86,1,86,3,86,1632,
  	8,86,1,86,1,86,3,86,1636,8,86,1,86,3,86,1639,8,86,1,86,3,86,1642,8,86,
  	1,86,1,86,3,86,1646,8,86,1,86,1,86,3,86,1650,8,86,1,86,1,86,3,86,1654,
  	8,86,1,86,1,86,3,86,1658,8,86,3,86,1660,8,86,1,86,1,86,1,87,1,87,3,87,
  	1666,8,87,1,87,3,87,1669,8,87,1,87,3,87,1672,8,87,1,87,1,87,1,88,1,88,
  	3,88,1678,8,88,1,88,3,88,1681,8,88,1,88,3,88,1684,8,88,1,88,1,88,1,89,
  	1,89,1,90,1,90,1,91,1,91,1,92,1,92,1,93,1,93,1,94,1,94,1,94,1,94,1,94,
  	5,94,1703,8,94,10,94,12,94,1706,9,94,1,95,1,95,1,95,1,95,1,95,5,95,1713,
  	8,95,10,95,12,95,1716,9,95,1,96,1,96,1,96,1,96,1,96,5,96,1723,8,96,10,
  	96,12,96,1726,9,96,1,97,1,97,3,97,1730,8,97,5,97,1732,8,97,10,97,12,97,
  	1735,9,97,1,97,1,97,1,98,1,98,3,98,1741,8,98,1,98,1,98,3,98,1745,8,98,
  	1,98,1,98,3,98,1749,8,98,1,98,1,98,3,98,1753,8,98,1,98,1,98,3,98,1757,
  	8,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1765,8,98,1,98,1,98,3,98,1769,
  	8,98,1,98,1,98,3,98,1773,8,98,1,98,1,98,3,98,1777,8,98,1,98,1,98,4,98,
  	1781,8,98,11,98,12,98,1782,1,98,1,98,3,98,1787,8,98,1,99,1,99,1,100,1,
  	100,3,100,1793,8,100,1,100,1,100,3,100,1797,8,100,1,100,5,100,1800,8,
  	100,10,100,12,100,1803,9,100,1,101,1,101,3,101,1807,8,101,1,101,1,101,
  	3,101,1811,8,101,1,101,5,101,1814,8,101,10,101,12,101,1817,9,101,1,102,
  	1,102,3,102,1821,8,102,1,102,1,102,3,102,1825,8,102,1,102,1,102,5,102,
  	1829,8,102,10,102,12,102,1832,9,102,1,103,1,103,1,104,1,104,3,104,1838,
  	8,104,1,104,1,104,3,104,1842,8,104,1,104,1,104,5,104,1846,8,104,10,104,
  	12,104,1849,9,104,1,105,1,105,1,106,1,106,3,106,1855,8,106,1,106,1,106,
  	3,106,1859,8,106,1,106,1,106,5,106,1863,8,106,10,106,12,106,1866,9,106,
  	1,107,1,107,1,108,1,108,3,108,1872,8,108,1,108,1,108,3,108,1876,8,108,
  	1,108,5,108,1879,8,108,10,108,12,108,1882,9,108,1,109,1,109,3,109,1886,
  	8,109,5,109,1888,8,109,10,109,12,109,1891,9,109,1,109,1,109,3,109,1895,
  	8,109,1,109,3,109,1898,8,109,1,110,1,110,1,110,4,110,1903,8,110,11,110,
  	12,110,1904,1,110,3,110,1908,8,110,1,111,1,111,1,111,3,111,1913,8,111,
  	1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,1922,8,111,1,111,1,111,
  	3,111,1926,8,111,1,111,3,111,1929,8,111,1,112,1,112,1,112,1,112,1,112,
  	1,112,1,112,1,112,1,112,1,112,1,112,3,112,1942,8,112,1,112,3,112,1945,
  	8,112,1,112,1,112,1,113,3,113,1950,8,113,1,113,1,113,1,114,1,114,1,114,
  	1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,1964,8,114,1,115,1,115,
  	3,115,1968,8,115,1,115,5,115,1971,8,115,10,115,12,115,1974,9,115,1,116,
  	1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,1985,8,116,1,117,
  	1,117,1,117,1,117,1,117,1,117,3,117,1993,8,117,1,118,1,118,1,119,1,119,
  	3,119,1999,8,119,1,119,1,119,3,119,2003,8,119,1,119,1,119,3,119,2007,
  	8,119,5,119,2009,8,119,10,119,12,119,2012,9,119,3,119,2014,8,119,1,119,
  	1,119,1,120,1,120,3,120,2020,8,120,1,120,3,120,2023,8,120,1,121,1,121,
  	3,121,2027,8,121,1,121,1,121,3,121,2031,8,121,1,121,1,121,3,121,2035,
  	8,121,1,121,1,121,3,121,2039,8,121,5,121,2041,8,121,10,121,12,121,2044,
  	9,121,1,121,1,121,1,122,1,122,3,122,2050,8,122,1,122,3,122,2053,8,122,
  	1,122,1,122,3,122,2057,8,122,1,122,1,122,1,123,1,123,3,123,2063,8,123,
  	1,123,1,123,3,123,2067,8,123,1,123,1,123,1,124,1,124,3,124,2073,8,124,
  	1,124,1,124,3,124,2077,8,124,1,124,1,124,3,124,2081,8,124,1,124,1,124,
  	1,124,3,124,2086,8,124,1,124,1,124,3,124,2090,8,124,1,124,1,124,3,124,
  	2094,8,124,3,124,2096,8,124,1,124,1,124,3,124,2100,8,124,1,124,1,124,
  	3,124,2104,8,124,1,124,1,124,3,124,2108,8,124,5,124,2110,8,124,10,124,
  	12,124,2113,9,124,3,124,2115,8,124,1,124,1,124,3,124,2119,8,124,1,125,
  	1,125,1,126,1,126,3,126,2125,8,126,1,126,1,126,1,126,3,126,2130,8,126,
  	3,126,2132,8,126,1,126,1,126,1,127,1,127,3,127,2138,8,127,1,127,4,127,
  	2141,8,127,11,127,12,127,2142,1,128,1,128,3,128,2147,8,128,1,128,1,128,
  	3,128,2151,8,128,1,128,1,128,3,128,2155,8,128,1,128,1,128,3,128,2159,
  	8,128,1,128,3,128,2162,8,128,1,128,3,128,2165,8,128,1,128,1,128,1,129,
  	1,129,3,129,2171,8,129,1,129,1,129,3,129,2175,8,129,1,129,1,129,3,129,
  	2179,8,129,1,129,1,129,3,129,2183,8,129,1,129,3,129,2186,8,129,1,129,
  	3,129,2189,8,129,1,129,1,129,1,130,1,130,3,130,2195,8,130,1,130,1,130,
  	3,130,2199,8,130,1,131,1,131,3,131,2203,8,131,1,131,4,131,2206,8,131,
  	11,131,12,131,2207,1,131,1,131,3,131,2212,8,131,1,131,1,131,3,131,2216,
  	8,131,1,131,4,131,2219,8,131,11,131,12,131,2220,3,131,2223,8,131,1,131,
  	3,131,2226,8,131,1,131,1,131,3,131,2230,8,131,1,131,3,131,2233,8,131,
  	1,131,3,131,2236,8,131,1,131,1,131,1,132,1,132,3,132,2242,8,132,1,132,
  	1,132,3,132,2246,8,132,1,132,1,132,3,132,2250,8,132,1,132,1,132,1,133,
  	1,133,1,134,1,134,3,134,2258,8,134,1,135,1,135,1,135,3,135,2263,8,135,
  	1,136,1,136,3,136,2267,8,136,1,136,1,136,1,137,1,137,1,138,1,138,1,139,
  	1,139,1,140,1,140,1,141,1,141,1,141,1,141,1,141,3,141,2284,8,141,1,142,
  	1,142,1,143,1,143,1,144,1,144,1,145,1,145,1,145,0,1,68,146,0,2,4,6,8,
  	10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
  	56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
  	102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
  	138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
  	174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
  	210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,
  	246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
  	282,284,286,288,290,0,11,2,0,57,57,59,59,1,0,104,107,2,0,5,5,12,16,1,
  	0,18,19,2,0,20,20,115,115,2,0,21,22,98,98,1,0,124,125,7,0,47,47,53,56,
  	67,67,71,71,118,118,126,126,130,130,2,0,13,13,27,30,2,0,15,15,31,34,2,
  	0,35,45,115,115,2594,0,292,1,0,0,0,2,312,1,0,0,0,4,336,1,0,0,0,6,338,
  	1,0,0,0,8,360,1,0,0,0,10,395,1,0,0,0,12,397,1,0,0,0,14,427,1,0,0,0,16,
  	448,1,0,0,0,18,459,1,0,0,0,20,465,1,0,0,0,22,477,1,0,0,0,24,489,1,0,0,
  	0,26,532,1,0,0,0,28,546,1,0,0,0,30,590,1,0,0,0,32,592,1,0,0,0,34,615,
  	1,0,0,0,36,631,1,0,0,0,38,633,1,0,0,0,40,662,1,0,0,0,42,702,1,0,0,0,44,
  	756,1,0,0,0,46,764,1,0,0,0,48,770,1,0,0,0,50,776,1,0,0,0,52,788,1,0,0,
  	0,54,790,1,0,0,0,56,801,1,0,0,0,58,805,1,0,0,0,60,811,1,0,0,0,62,819,
  	1,0,0,0,64,833,1,0,0,0,66,837,1,0,0,0,68,905,1,0,0,0,70,914,1,0,0,0,72,
  	921,1,0,0,0,74,929,1,0,0,0,76,931,1,0,0,0,78,933,1,0,0,0,80,949,1,0,0,
  	0,82,953,1,0,0,0,84,955,1,0,0,0,86,963,1,0,0,0,88,967,1,0,0,0,90,990,
  	1,0,0,0,92,1004,1,0,0,0,94,1008,1,0,0,0,96,1055,1,0,0,0,98,1061,1,0,0,
  	0,100,1073,1,0,0,0,102,1091,1,0,0,0,104,1097,1,0,0,0,106,1099,1,0,0,0,
  	108,1135,1,0,0,0,110,1146,1,0,0,0,112,1159,1,0,0,0,114,1169,1,0,0,0,116,
  	1175,1,0,0,0,118,1197,1,0,0,0,120,1199,1,0,0,0,122,1217,1,0,0,0,124,1229,
  	1,0,0,0,126,1249,1,0,0,0,128,1257,1,0,0,0,130,1264,1,0,0,0,132,1308,1,
  	0,0,0,134,1317,1,0,0,0,136,1319,1,0,0,0,138,1334,1,0,0,0,140,1338,1,0,
  	0,0,142,1342,1,0,0,0,144,1349,1,0,0,0,146,1353,1,0,0,0,148,1378,1,0,0,
  	0,150,1380,1,0,0,0,152,1396,1,0,0,0,154,1398,1,0,0,0,156,1422,1,0,0,0,
  	158,1472,1,0,0,0,160,1474,1,0,0,0,162,1504,1,0,0,0,164,1545,1,0,0,0,166,
  	1566,1,0,0,0,168,1576,1,0,0,0,170,1582,1,0,0,0,172,1617,1,0,0,0,174,1663,
  	1,0,0,0,176,1675,1,0,0,0,178,1687,1,0,0,0,180,1689,1,0,0,0,182,1691,1,
  	0,0,0,184,1693,1,0,0,0,186,1695,1,0,0,0,188,1697,1,0,0,0,190,1707,1,0,
  	0,0,192,1717,1,0,0,0,194,1733,1,0,0,0,196,1786,1,0,0,0,198,1788,1,0,0,
  	0,200,1790,1,0,0,0,202,1804,1,0,0,0,204,1818,1,0,0,0,206,1833,1,0,0,0,
  	208,1835,1,0,0,0,210,1850,1,0,0,0,212,1852,1,0,0,0,214,1867,1,0,0,0,216,
  	1869,1,0,0,0,218,1889,1,0,0,0,220,1899,1,0,0,0,222,1928,1,0,0,0,224,1941,
  	1,0,0,0,226,1949,1,0,0,0,228,1963,1,0,0,0,230,1965,1,0,0,0,232,1984,1,
  	0,0,0,234,1992,1,0,0,0,236,1994,1,0,0,0,238,1996,1,0,0,0,240,2017,1,0,
  	0,0,242,2024,1,0,0,0,244,2049,1,0,0,0,246,2060,1,0,0,0,248,2118,1,0,0,
  	0,250,2120,1,0,0,0,252,2131,1,0,0,0,254,2135,1,0,0,0,256,2144,1,0,0,0,
  	258,2168,1,0,0,0,260,2192,1,0,0,0,262,2222,1,0,0,0,264,2239,1,0,0,0,266,
  	2253,1,0,0,0,268,2257,1,0,0,0,270,2259,1,0,0,0,272,2264,1,0,0,0,274,2270,
  	1,0,0,0,276,2272,1,0,0,0,278,2274,1,0,0,0,280,2276,1,0,0,0,282,2283,1,
  	0,0,0,284,2285,1,0,0,0,286,2287,1,0,0,0,288,2289,1,0,0,0,290,2291,1,0,
  	0,0,292,303,3,2,1,0,293,295,5,147,0,0,294,293,1,0,0,0,294,295,1,0,0,0,
  	295,296,1,0,0,0,296,298,5,1,0,0,297,299,5,147,0,0,298,297,1,0,0,0,298,
  	299,1,0,0,0,299,300,1,0,0,0,300,302,3,2,1,0,301,294,1,0,0,0,302,305,1,
  	0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,0,
  	306,308,5,147,0,0,307,306,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,
  	310,5,0,0,1,310,1,1,0,0,0,311,313,3,74,37,0,312,311,1,0,0,0,312,313,1,
  	0,0,0,313,315,1,0,0,0,314,316,5,147,0,0,315,314,1,0,0,0,315,316,1,0,0,
  	0,316,317,1,0,0,0,317,322,3,4,2,0,318,320,5,147,0,0,319,318,1,0,0,0,319,
  	320,1,0,0,0,320,321,1,0,0,0,321,323,5,1,0,0,322,319,1,0,0,0,322,323,1,
  	0,0,0,323,3,1,0,0,0,324,337,3,88,44,0,325,337,3,36,18,0,326,337,3,6,3,
  	0,327,337,3,12,6,0,328,337,3,14,7,0,329,337,3,20,10,0,330,337,3,24,12,
  	0,331,337,3,22,11,0,332,337,3,80,40,0,333,337,3,82,41,0,334,337,3,16,
  	8,0,335,337,3,18,9,0,336,324,1,0,0,0,336,325,1,0,0,0,336,326,1,0,0,0,
  	336,327,1,0,0,0,336,328,1,0,0,0,336,329,1,0,0,0,336,330,1,0,0,0,336,331,
  	1,0,0,0,336,332,1,0,0,0,336,333,1,0,0,0,336,334,1,0,0,0,336,335,1,0,0,
  	0,337,5,1,0,0,0,338,339,5,50,0,0,339,340,5,147,0,0,340,349,3,280,140,
  	0,341,343,5,147,0,0,342,341,1,0,0,0,342,343,1,0,0,0,343,344,1,0,0,0,344,
  	346,3,8,4,0,345,347,5,147,0,0,346,345,1,0,0,0,346,347,1,0,0,0,347,350,
  	1,0,0,0,348,350,5,147,0,0,349,342,1,0,0,0,349,348,1,0,0,0,350,351,1,0,
  	0,0,351,352,5,51,0,0,352,353,5,147,0,0,353,358,3,10,5,0,354,356,5,147,
  	0,0,355,354,1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,0,357,359,3,32,16,0,
  	358,355,1,0,0,0,358,359,1,0,0,0,359,7,1,0,0,0,360,362,5,2,0,0,361,363,
  	5,147,0,0,362,361,1,0,0,0,362,363,1,0,0,0,363,364,1,0,0,0,364,375,3,280,
  	140,0,365,367,5,147,0,0,366,365,1,0,0,0,366,367,1,0,0,0,367,368,1,0,0,
  	0,368,370,5,3,0,0,369,371,5,147,0,0,370,369,1,0,0,0,370,371,1,0,0,0,371,
  	372,1,0,0,0,372,374,3,280,140,0,373,366,1,0,0,0,374,377,1,0,0,0,375,373,
  	1,0,0,0,375,376,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,378,380,5,147,
  	0,0,379,378,1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,382,5,4,0,0,382,
  	9,1,0,0,0,383,396,3,30,15,0,384,386,5,2,0,0,385,387,5,147,0,0,386,385,
  	1,0,0,0,386,387,1,0,0,0,387,388,1,0,0,0,388,390,3,88,44,0,389,391,5,147,
  	0,0,390,389,1,0,0,0,390,391,1,0,0,0,391,392,1,0,0,0,392,393,5,4,0,0,393,
  	396,1,0,0,0,394,396,3,266,133,0,395,383,1,0,0,0,395,384,1,0,0,0,395,394,
  	1,0,0,0,396,11,1,0,0,0,397,398,5,50,0,0,398,399,5,147,0,0,399,400,3,280,
  	140,0,400,401,5,147,0,0,401,402,5,51,0,0,402,403,5,147,0,0,403,405,5,
  	2,0,0,404,406,5,147,0,0,405,404,1,0,0,0,405,406,1,0,0,0,406,407,1,0,0,
  	0,407,418,5,133,0,0,408,410,5,147,0,0,409,408,1,0,0,0,409,410,1,0,0,0,
  	410,411,1,0,0,0,411,413,5,3,0,0,412,414,5,147,0,0,413,412,1,0,0,0,413,
  	414,1,0,0,0,414,415,1,0,0,0,415,417,5,133,0,0,416,409,1,0,0,0,417,420,
  	1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,418,1,0,0,
  	0,421,422,5,4,0,0,422,423,5,147,0,0,423,424,5,101,0,0,424,425,5,147,0,
  	0,425,426,5,52,0,0,426,13,1,0,0,0,427,428,5,50,0,0,428,429,5,147,0,0,
  	429,431,5,2,0,0,430,432,5,147,0,0,431,430,1,0,0,0,431,432,1,0,0,0,432,
  	433,1,0,0,0,433,435,3,88,44,0,434,436,5,147,0,0,435,434,1,0,0,0,435,436,
  	1,0,0,0,436,437,1,0,0,0,437,438,5,4,0,0,438,439,5,147,0,0,439,440,5,68,
  	0,0,440,441,5,147,0,0,441,446,5,133,0,0,442,444,5,147,0,0,443,442,1,0,
  	0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,447,3,32,16,0,446,443,1,0,0,0,
  	446,447,1,0,0,0,447,15,1,0,0,0,448,449,5,53,0,0,449,450,5,147,0,0,450,
  	451,5,55,0,0,451,452,5,147,0,0,452,457,5,133,0,0,453,455,5,147,0,0,454,
  	453,1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,458,3,32,16,0,457,454,
  	1,0,0,0,457,458,1,0,0,0,458,17,1,0,0,0,459,460,5,54,0,0,460,461,5,147,
  	0,0,461,462,5,55,0,0,462,463,5,147,0,0,463,464,5,133,0,0,464,19,1,0,0,
  	0,465,466,5,46,0,0,466,467,5,147,0,0,467,469,3,282,141,0,468,470,5,147,
  	0,0,469,468,1,0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,473,5,5,0,0,472,
  	474,5,147,0,0,473,472,1,0,0,0,473,474,1,0,0,0,474,475,1,0,0,0,475,476,
  	3,234,117,0,476,21,1,0,0,0,477,478,5,47,0,0,478,479,5,147,0,0,479,480,
  	5,91,0,0,480,481,5,147,0,0,481,482,5,57,0,0,482,483,5,147,0,0,483,484,
  	3,280,140,0,484,485,5,147,0,0,485,486,5,122,0,0,486,487,5,147,0,0,487,
  	488,5,133,0,0,488,23,1,0,0,0,489,490,5,89,0,0,490,491,5,147,0,0,491,492,
  	5,48,0,0,492,493,5,147,0,0,493,495,3,250,125,0,494,496,5,147,0,0,495,
  	494,1,0,0,0,495,496,1,0,0,0,496,497,1,0,0,0,497,499,5,2,0,0,498,500,5,
  	147,0,0,499,498,1,0,0,0,499,500,1,0,0,0,500,502,1,0,0,0,501,503,3,26,
  	13,0,502,501,1,0,0,0,502,503,1,0,0,0,503,505,1,0,0,0,504,506,5,147,0,
  	0,505,504,1,0,0,0,505,506,1,0,0,0,506,508,1,0,0,0,507,509,3,28,14,0,508,
  	507,1,0,0,0,508,509,1,0,0,0,509,520,1,0,0,0,510,512,5,147,0,0,511,510,
  	1,0,0,0,511,512,1,0,0,0,512,513,1,0,0,0,513,515,5,3,0,0,514,516,5,147,
  	0,0,515,514,1,0,0,0,515,516,1,0,0,0,516,517,1,0,0,0,517,519,3,28,14,0,
  	518,511,1,0,0,0,519,522,1,0,0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,524,
  	1,0,0,0,522,520,1,0,0,0,523,525,5,147,0,0,524,523,1,0,0,0,524,525,1,0,
  	0,0,525,526,1,0,0,0,526,527,5,4,0,0,527,528,5,147,0,0,528,529,5,99,0,
  	0,529,530,5,147,0,0,530,531,3,186,93,0,531,25,1,0,0,0,532,543,3,282,141,
  	0,533,535,5,147,0,0,534,533,1,0,0,0,534,535,1,0,0,0,535,536,1,0,0,0,536,
  	538,5,3,0,0,537,539,5,147,0,0,538,537,1,0,0,0,538,539,1,0,0,0,539,540,
  	1,0,0,0,540,542,3,282,141,0,541,534,1,0,0,0,542,545,1,0,0,0,543,541,1,
  	0,0,0,543,544,1,0,0,0,544,27,1,0,0,0,545,543,1,0,0,0,546,548,3,282,141,
  	0,547,549,5,147,0,0,548,547,1,0,0,0,548,549,1,0,0,0,549,550,1,0,0,0,550,
  	551,5,117,0,0,551,553,5,5,0,0,552,554,5,147,0,0,553,552,1,0,0,0,553,554,
  	1,0,0,0,554,555,1,0,0,0,555,556,3,234,117,0,556,29,1,0,0,0,557,559,5,
  	6,0,0,558,560,5,147,0,0,559,558,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,
  	0,561,572,5,133,0,0,562,564,5,147,0,0,563,562,1,0,0,0,563,564,1,0,0,0,
  	564,565,1,0,0,0,565,567,5,3,0,0,566,568,5,147,0,0,567,566,1,0,0,0,567,
  	568,1,0,0,0,568,569,1,0,0,0,569,571,5,133,0,0,570,563,1,0,0,0,571,574,
  	1,0,0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,575,1,0,0,0,574,572,1,0,0,
  	0,575,591,5,7,0,0,576,591,5,133,0,0,577,579,5,49,0,0,578,580,5,147,0,
  	0,579,578,1,0,0,0,579,580,1,0,0,0,580,581,1,0,0,0,581,583,5,2,0,0,582,
  	584,5,147,0,0,583,582,1,0,0,0,583,584,1,0,0,0,584,585,1,0,0,0,585,587,
  	5,133,0,0,586,588,5,147,0,0,587,586,1,0,0,0,587,588,1,0,0,0,588,589,1,
  	0,0,0,589,591,5,4,0,0,590,557,1,0,0,0,590,576,1,0,0,0,590,577,1,0,0,0,
  	591,31,1,0,0,0,592,594,5,2,0,0,593,595,5,147,0,0,594,593,1,0,0,0,594,
  	595,1,0,0,0,595,596,1,0,0,0,596,607,3,34,17,0,597,599,5,147,0,0,598,597,
  	1,0,0,0,598,599,1,0,0,0,599,600,1,0,0,0,600,602,5,3,0,0,601,603,5,147,
  	0,0,602,601,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,606,3,34,17,0,
  	605,598,1,0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,611,
  	1,0,0,0,609,607,1,0,0,0,610,612,5,147,0,0,611,610,1,0,0,0,611,612,1,0,
  	0,0,612,613,1,0,0,0,613,614,5,4,0,0,614,33,1,0,0,0,615,617,3,282,141,
  	0,616,618,5,147,0,0,617,616,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,
  	621,5,5,0,0,620,622,5,147,0,0,621,620,1,0,0,0,621,622,1,0,0,0,622,623,
  	1,0,0,0,623,624,3,234,117,0,624,35,1,0,0,0,625,632,3,38,19,0,626,632,
  	3,40,20,0,627,632,3,42,21,0,628,632,3,46,23,0,629,632,3,48,24,0,630,632,
  	3,50,25,0,631,625,1,0,0,0,631,626,1,0,0,0,631,627,1,0,0,0,631,628,1,0,
  	0,0,631,629,1,0,0,0,631,630,1,0,0,0,632,37,1,0,0,0,633,634,5,89,0,0,634,
  	635,5,147,0,0,635,636,5,56,0,0,636,637,5,147,0,0,637,638,5,57,0,0,638,
  	639,5,147,0,0,639,641,3,280,140,0,640,642,5,147,0,0,641,640,1,0,0,0,641,
  	642,1,0,0,0,642,643,1,0,0,0,643,645,5,2,0,0,644,646,5,147,0,0,645,644,
  	1,0,0,0,645,646,1,0,0,0,646,647,1,0,0,0,647,649,3,62,31,0,648,650,5,147,
  	0,0,649,648,1,0,0,0,649,650,1,0,0,0,650,651,1,0,0,0,651,653,5,3,0,0,652,
  	654,5,147,0,0,653,652,1,0,0,0,653,654,1,0,0,0,654,655,1,0,0,0,655,656,
  	3,66,33,0,656,658,1,0,0,0,657,659,5,147,0,0,658,657,1,0,0,0,658,659,1,
  	0,0,0,659,660,1,0,0,0,660,661,5,4,0,0,661,39,1,0,0,0,662,663,5,89,0,0,
  	663,664,5,147,0,0,664,665,5,67,0,0,665,666,5,147,0,0,666,667,5,57,0,0,
  	667,668,5,147,0,0,668,670,3,280,140,0,669,671,5,147,0,0,670,669,1,0,0,
  	0,670,671,1,0,0,0,671,672,1,0,0,0,672,674,5,2,0,0,673,675,5,147,0,0,674,
  	673,1,0,0,0,674,675,1,0,0,0,675,676,1,0,0,0,676,678,3,44,22,0,677,679,
  	5,147,0,0,678,677,1,0,0,0,678,679,1,0,0,0,679,688,1,0,0,0,680,682,5,3,
  	0,0,681,683,5,147,0,0,682,681,1,0,0,0,682,683,1,0,0,0,683,684,1,0,0,0,
  	684,686,3,62,31,0,685,687,5,147,0,0,686,685,1,0,0,0,686,687,1,0,0,0,687,
  	689,1,0,0,0,688,680,1,0,0,0,688,689,1,0,0,0,689,698,1,0,0,0,690,692,5,
  	3,0,0,691,693,5,147,0,0,692,691,1,0,0,0,692,693,1,0,0,0,693,694,1,0,0,
  	0,694,696,3,282,141,0,695,697,5,147,0,0,696,695,1,0,0,0,696,697,1,0,0,
  	0,697,699,1,0,0,0,698,690,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,
  	701,5,4,0,0,701,41,1,0,0,0,702,703,5,89,0,0,703,704,5,147,0,0,704,705,
  	5,67,0,0,705,706,5,147,0,0,706,707,5,57,0,0,707,708,5,147,0,0,708,709,
  	5,58,0,0,709,710,5,147,0,0,710,712,3,280,140,0,711,713,5,147,0,0,712,
  	711,1,0,0,0,712,713,1,0,0,0,713,714,1,0,0,0,714,716,5,2,0,0,715,717,5,
  	147,0,0,716,715,1,0,0,0,716,717,1,0,0,0,717,718,1,0,0,0,718,720,3,44,
  	22,0,719,721,5,147,0,0,720,719,1,0,0,0,720,721,1,0,0,0,721,727,1,0,0,
  	0,722,724,5,3,0,0,723,725,5,147,0,0,724,723,1,0,0,0,724,725,1,0,0,0,725,
  	726,1,0,0,0,726,728,3,44,22,0,727,722,1,0,0,0,728,729,1,0,0,0,729,727,
  	1,0,0,0,729,730,1,0,0,0,730,732,1,0,0,0,731,733,5,147,0,0,732,731,1,0,
  	0,0,732,733,1,0,0,0,733,742,1,0,0,0,734,736,5,3,0,0,735,737,5,147,0,0,
  	736,735,1,0,0,0,736,737,1,0,0,0,737,738,1,0,0,0,738,740,3,62,31,0,739,
  	741,5,147,0,0,740,739,1,0,0,0,740,741,1,0,0,0,741,743,1,0,0,0,742,734,
  	1,0,0,0,742,743,1,0,0,0,743,752,1,0,0,0,744,746,5,3,0,0,745,747,5,147,
  	0,0,746,745,1,0,0,0,746,747,1,0,0,0,747,748,1,0,0,0,748,750,3,282,141,
  	0,749,751,5,147,0,0,750,749,1,0,0,0,750,751,1,0,0,0,751,753,1,0,0,0,752,
  	744,1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,755,5,4,0,0,755,43,1,
  	0,0,0,756,757,5,51,0,0,757,758,5,147,0,0,758,759,3,280,140,0,759,760,
  	5,147,0,0,760,761,5,68,0,0,761,762,5,147,0,0,762,763,3,280,140,0,763,
  	45,1,0,0,0,764,765,5,89,0,0,765,766,5,147,0,0,766,767,5,59,0,0,767,768,
  	5,147,0,0,768,769,3,280,140,0,769,47,1,0,0,0,770,771,5,60,0,0,771,772,
  	5,147,0,0,772,773,7,0,0,0,773,774,5,147,0,0,774,775,3,280,140,0,775,49,
  	1,0,0,0,776,777,5,61,0,0,777,778,5,147,0,0,778,779,5,57,0,0,779,780,5,
  	147,0,0,780,781,3,280,140,0,781,782,5,147,0,0,782,783,3,52,26,0,783,51,
  	1,0,0,0,784,789,3,54,27,0,785,789,3,56,28,0,786,789,3,58,29,0,787,789,
  	3,60,30,0,788,784,1,0,0,0,788,785,1,0,0,0,788,786,1,0,0,0,788,787,1,0,
  	0,0,789,53,1,0,0,0,790,791,5,64,0,0,791,792,5,147,0,0,792,793,3,274,137,
  	0,793,794,5,147,0,0,794,799,3,68,34,0,795,796,5,147,0,0,796,797,5,62,
  	0,0,797,798,5,147,0,0,798,800,3,186,93,0,799,795,1,0,0,0,799,800,1,0,
  	0,0,800,55,1,0,0,0,801,802,5,60,0,0,802,803,5,147,0,0,803,804,3,274,137,
  	0,804,57,1,0,0,0,805,806,5,63,0,0,806,807,5,147,0,0,807,808,5,68,0,0,
  	808,809,5,147,0,0,809,810,3,280,140,0,810,59,1,0,0,0,811,812,5,63,0,0,
  	812,813,5,147,0,0,813,814,3,274,137,0,814,815,5,147,0,0,815,816,5,68,
  	0,0,816,817,5,147,0,0,817,818,3,274,137,0,818,61,1,0,0,0,819,830,3,64,
  	32,0,820,822,5,147,0,0,821,820,1,0,0,0,821,822,1,0,0,0,822,823,1,0,0,
  	0,823,825,5,3,0,0,824,826,5,147,0,0,825,824,1,0,0,0,825,826,1,0,0,0,826,
  	827,1,0,0,0,827,829,3,64,32,0,828,821,1,0,0,0,829,832,1,0,0,0,830,828,
  	1,0,0,0,830,831,1,0,0,0,831,63,1,0,0,0,832,830,1,0,0,0,833,834,3,274,
  	137,0,834,835,5,147,0,0,835,836,3,68,34,0,836,65,1,0,0,0,837,838,5,65,
  	0,0,838,839,5,147,0,0,839,841,5,66,0,0,840,842,5,147,0,0,841,840,1,0,
  	0,0,841,842,1,0,0,0,842,843,1,0,0,0,843,845,5,2,0,0,844,846,5,147,0,0,
  	845,844,1,0,0,0,845,846,1,0,0,0,846,847,1,0,0,0,847,849,3,274,137,0,848,
  	850,5,147,0,0,849,848,1,0,0,0,849,850,1,0,0,0,850,851,1,0,0,0,851,852,
  	5,4,0,0,852,67,1,0,0,0,853,854,6,34,-1,0,854,906,3,282,141,0,855,857,
  	5,82,0,0,856,858,5,147,0,0,857,856,1,0,0,0,857,858,1,0,0,0,858,859,1,
  	0,0,0,859,861,5,2,0,0,860,862,5,147,0,0,861,860,1,0,0,0,861,862,1,0,0,
  	0,862,863,1,0,0,0,863,865,3,62,31,0,864,866,5,147,0,0,865,864,1,0,0,0,
  	865,866,1,0,0,0,866,867,1,0,0,0,867,868,5,4,0,0,868,906,1,0,0,0,869,871,
  	3,282,141,0,870,872,5,147,0,0,871,870,1,0,0,0,871,872,1,0,0,0,872,873,
  	1,0,0,0,873,875,5,2,0,0,874,876,5,147,0,0,875,874,1,0,0,0,875,876,1,0,
  	0,0,876,877,1,0,0,0,877,879,3,62,31,0,878,880,5,147,0,0,879,878,1,0,0,
  	0,879,880,1,0,0,0,880,881,1,0,0,0,881,882,5,4,0,0,882,906,1,0,0,0,883,
  	885,3,282,141,0,884,886,5,147,0,0,885,884,1,0,0,0,885,886,1,0,0,0,886,
  	887,1,0,0,0,887,889,5,2,0,0,888,890,5,147,0,0,889,888,1,0,0,0,889,890,
  	1,0,0,0,890,891,1,0,0,0,891,893,3,68,34,0,892,894,5,147,0,0,893,892,1,
  	0,0,0,893,894,1,0,0,0,894,895,1,0,0,0,895,897,5,3,0,0,896,898,5,147,0,
  	0,897,896,1,0,0,0,897,898,1,0,0,0,898,899,1,0,0,0,899,901,3,68,34,0,900,
  	902,5,147,0,0,901,900,1,0,0,0,901,902,1,0,0,0,902,903,1,0,0,0,903,904,
  	5,4,0,0,904,906,1,0,0,0,905,853,1,0,0,0,905,855,1,0,0,0,905,869,1,0,0,
  	0,905,883,1,0,0,0,906,911,1,0,0,0,907,908,10,4,0,0,908,910,3,70,35,0,
  	909,907,1,0,0,0,910,913,1,0,0,0,911,909,1,0,0,0,911,912,1,0,0,0,912,69,
  	1,0,0,0,913,911,1,0,0,0,914,918,3,72,36,0,915,917,3,72,36,0,916,915,1,
  	0,0,0,917,920,1,0,0,0,918,916,1,0,0,0,918,919,1,0,0,0,919,71,1,0,0,0,
  	920,918,1,0,0,0,921,923,5,6,0,0,922,924,3,276,138,0,923,922,1,0,0,0,923,
  	924,1,0,0,0,924,925,1,0,0,0,925,926,5,7,0,0,926,73,1,0,0,0,927,930,3,
  	76,38,0,928,930,3,78,39,0,929,927,1,0,0,0,929,928,1,0,0,0,930,75,1,0,
  	0,0,931,932,5,69,0,0,932,77,1,0,0,0,933,934,5,70,0,0,934,79,1,0,0,0,935,
  	936,5,71,0,0,936,937,5,147,0,0,937,950,5,72,0,0,938,939,5,71,0,0,939,
  	940,5,147,0,0,940,941,5,72,0,0,941,942,5,147,0,0,942,943,5,73,0,0,943,
  	944,5,147,0,0,944,950,5,74,0,0,945,950,5,76,0,0,946,950,5,77,0,0,947,
  	950,5,78,0,0,948,950,5,79,0,0,949,935,1,0,0,0,949,938,1,0,0,0,949,945,
  	1,0,0,0,949,946,1,0,0,0,949,947,1,0,0,0,949,948,1,0,0,0,950,81,1,0,0,
  	0,951,954,3,84,42,0,952,954,3,86,43,0,953,951,1,0,0,0,953,952,1,0,0,0,
  	954,83,1,0,0,0,955,956,5,84,0,0,956,957,5,147,0,0,957,958,5,81,0,0,958,
  	961,5,147,0,0,959,962,5,133,0,0,960,962,3,266,133,0,961,959,1,0,0,0,961,
  	960,1,0,0,0,962,85,1,0,0,0,963,964,5,80,0,0,964,965,5,147,0,0,965,966,
  	3,266,133,0,966,87,1,0,0,0,967,968,3,90,45,0,968,89,1,0,0,0,969,976,3,
  	94,47,0,970,972,5,147,0,0,971,970,1,0,0,0,971,972,1,0,0,0,972,973,1,0,
  	0,0,973,975,3,92,46,0,974,971,1,0,0,0,975,978,1,0,0,0,976,974,1,0,0,0,
  	976,977,1,0,0,0,977,991,1,0,0,0,978,976,1,0,0,0,979,981,3,128,64,0,980,
  	982,5,147,0,0,981,980,1,0,0,0,981,982,1,0,0,0,982,984,1,0,0,0,983,979,
  	1,0,0,0,984,985,1,0,0,0,985,983,1,0,0,0,985,986,1,0,0,0,986,987,1,0,0,
  	0,987,988,3,94,47,0,988,989,6,45,-1,0,989,991,1,0,0,0,990,969,1,0,0,0,
  	990,983,1,0,0,0,991,91,1,0,0,0,992,993,5,82,0,0,993,994,5,147,0,0,994,
  	996,5,83,0,0,995,997,5,147,0,0,996,995,1,0,0,0,996,997,1,0,0,0,997,998,
  	1,0,0,0,998,1005,3,94,47,0,999,1001,5,82,0,0,1000,1002,5,147,0,0,1001,
  	1000,1,0,0,0,1001,1002,1,0,0,0,1002,1003,1,0,0,0,1003,1005,3,94,47,0,
  	1004,992,1,0,0,0,1004,999,1,0,0,0,1005,93,1,0,0,0,1006,1009,3,96,48,0,
  	1007,1009,3,98,49,0,1008,1006,1,0,0,0,1008,1007,1,0,0,0,1009,95,1,0,0,
  	0,1010,1012,3,104,52,0,1011,1013,5,147,0,0,1012,1011,1,0,0,0,1012,1013,
  	1,0,0,0,1013,1015,1,0,0,0,1014,1010,1,0,0,0,1015,1018,1,0,0,0,1016,1014,
  	1,0,0,0,1016,1017,1,0,0,0,1017,1019,1,0,0,0,1018,1016,1,0,0,0,1019,1056,
  	3,128,64,0,1020,1022,3,104,52,0,1021,1023,5,147,0,0,1022,1021,1,0,0,0,
  	1022,1023,1,0,0,0,1023,1025,1,0,0,0,1024,1020,1,0,0,0,1025,1028,1,0,0,
  	0,1026,1024,1,0,0,0,1026,1027,1,0,0,0,1027,1029,1,0,0,0,1028,1026,1,0,
  	0,0,1029,1036,3,102,51,0,1030,1032,5,147,0,0,1031,1030,1,0,0,0,1031,1032,
  	1,0,0,0,1032,1033,1,0,0,0,1033,1035,3,102,51,0,1034,1031,1,0,0,0,1035,
  	1038,1,0,0,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,1043,1,0,0,0,1038,
  	1036,1,0,0,0,1039,1041,5,147,0,0,1040,1039,1,0,0,0,1040,1041,1,0,0,0,
  	1041,1042,1,0,0,0,1042,1044,3,128,64,0,1043,1040,1,0,0,0,1043,1044,1,
  	0,0,0,1044,1056,1,0,0,0,1045,1047,3,104,52,0,1046,1048,5,147,0,0,1047,
  	1046,1,0,0,0,1047,1048,1,0,0,0,1048,1050,1,0,0,0,1049,1045,1,0,0,0,1050,
  	1051,1,0,0,0,1051,1049,1,0,0,0,1051,1052,1,0,0,0,1052,1053,1,0,0,0,1053,
  	1054,6,48,-1,0,1054,1056,1,0,0,0,1055,1016,1,0,0,0,1055,1026,1,0,0,0,
  	1055,1049,1,0,0,0,1056,97,1,0,0,0,1057,1059,3,100,50,0,1058,1060,5,147,
  	0,0,1059,1058,1,0,0,0,1059,1060,1,0,0,0,1060,1062,1,0,0,0,1061,1057,1,
  	0,0,0,1062,1063,1,0,0,0,1063,1061,1,0,0,0,1063,1064,1,0,0,0,1064,1065,
  	1,0,0,0,1065,1066,3,96,48,0,1066,99,1,0,0,0,1067,1069,3,104,52,0,1068,
  	1070,5,147,0,0,1069,1068,1,0,0,0,1069,1070,1,0,0,0,1070,1072,1,0,0,0,
  	1071,1067,1,0,0,0,1072,1075,1,0,0,0,1073,1071,1,0,0,0,1073,1074,1,0,0,
  	0,1074,1082,1,0,0,0,1075,1073,1,0,0,0,1076,1078,3,102,51,0,1077,1079,
  	5,147,0,0,1078,1077,1,0,0,0,1078,1079,1,0,0,0,1079,1081,1,0,0,0,1080,
  	1076,1,0,0,0,1081,1084,1,0,0,0,1082,1080,1,0,0,0,1082,1083,1,0,0,0,1083,
  	1085,1,0,0,0,1084,1082,1,0,0,0,1085,1086,3,126,63,0,1086,101,1,0,0,0,
  	1087,1092,3,114,57,0,1088,1092,3,116,58,0,1089,1092,3,120,60,0,1090,1092,
  	3,124,62,0,1091,1087,1,0,0,0,1091,1088,1,0,0,0,1091,1089,1,0,0,0,1091,
  	1090,1,0,0,0,1092,103,1,0,0,0,1093,1098,3,110,55,0,1094,1098,3,112,56,
  	0,1095,1098,3,108,54,0,1096,1098,3,106,53,0,1097,1093,1,0,0,0,1097,1094,
  	1,0,0,0,1097,1095,1,0,0,0,1097,1096,1,0,0,0,1098,105,1,0,0,0,1099,1117,
  	5,84,0,0,1100,1101,5,147,0,0,1101,1102,5,95,0,0,1102,1103,5,147,0,0,1103,
  	1105,5,85,0,0,1104,1106,5,147,0,0,1105,1104,1,0,0,0,1105,1106,1,0,0,0,
  	1106,1107,1,0,0,0,1107,1109,5,2,0,0,1108,1110,5,147,0,0,1109,1108,1,0,
  	0,0,1109,1110,1,0,0,0,1110,1111,1,0,0,0,1111,1113,3,62,31,0,1112,1114,
  	5,147,0,0,1113,1112,1,0,0,0,1113,1114,1,0,0,0,1114,1115,1,0,0,0,1115,
  	1116,5,4,0,0,1116,1118,1,0,0,0,1117,1100,1,0,0,0,1117,1118,1,0,0,0,1118,
  	1119,1,0,0,0,1119,1120,5,147,0,0,1120,1121,5,51,0,0,1121,1122,5,147,0,
  	0,1122,1127,3,10,5,0,1123,1125,5,147,0,0,1124,1123,1,0,0,0,1124,1125,
  	1,0,0,0,1125,1126,1,0,0,0,1126,1128,3,32,16,0,1127,1124,1,0,0,0,1127,
  	1128,1,0,0,0,1128,1133,1,0,0,0,1129,1131,5,147,0,0,1130,1129,1,0,0,0,
  	1130,1131,1,0,0,0,1131,1132,1,0,0,0,1132,1134,3,144,72,0,1133,1130,1,
  	0,0,0,1133,1134,1,0,0,0,1134,107,1,0,0,0,1135,1136,5,46,0,0,1136,1137,
  	5,147,0,0,1137,1142,3,248,124,0,1138,1140,5,147,0,0,1139,1138,1,0,0,0,
  	1139,1140,1,0,0,0,1140,1141,1,0,0,0,1141,1143,3,144,72,0,1142,1139,1,
  	0,0,0,1142,1143,1,0,0,0,1143,109,1,0,0,0,1144,1145,5,86,0,0,1145,1147,
  	5,147,0,0,1146,1144,1,0,0,0,1146,1147,1,0,0,0,1147,1148,1,0,0,0,1148,
  	1150,5,87,0,0,1149,1151,5,147,0,0,1150,1149,1,0,0,0,1150,1151,1,0,0,0,
  	1151,1152,1,0,0,0,1152,1157,3,146,73,0,1153,1155,5,147,0,0,1154,1153,
  	1,0,0,0,1154,1155,1,0,0,0,1155,1156,1,0,0,0,1156,1158,3,144,72,0,1157,
  	1154,1,0,0,0,1157,1158,1,0,0,0,1158,111,1,0,0,0,1159,1161,5,88,0,0,1160,
  	1162,5,147,0,0,1161,1160,1,0,0,0,1161,1162,1,0,0,0,1162,1163,1,0,0,0,
  	1163,1164,3,186,93,0,1164,1165,5,147,0,0,1165,1166,5,99,0,0,1166,1167,
  	5,147,0,0,1167,1168,3,266,133,0,1168,113,1,0,0,0,1169,1171,5,89,0,0,1170,
  	1172,5,147,0,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,1173,1,0,0,0,
  	1173,1174,3,146,73,0,1174,115,1,0,0,0,1175,1177,5,90,0,0,1176,1178,5,
  	147,0,0,1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,1179,1,0,0,0,1179,1184,
  	3,146,73,0,1180,1181,5,147,0,0,1181,1183,3,118,59,0,1182,1180,1,0,0,0,
  	1183,1186,1,0,0,0,1184,1182,1,0,0,0,1184,1185,1,0,0,0,1185,117,1,0,0,
  	0,1186,1184,1,0,0,0,1187,1188,5,91,0,0,1188,1189,5,147,0,0,1189,1190,
  	5,87,0,0,1190,1191,5,147,0,0,1191,1198,3,120,60,0,1192,1193,5,91,0,0,
  	1193,1194,5,147,0,0,1194,1195,5,89,0,0,1195,1196,5,147,0,0,1196,1198,
  	3,120,60,0,1197,1187,1,0,0,0,1197,1192,1,0,0,0,1198,119,1,0,0,0,1199,
  	1201,5,92,0,0,1200,1202,5,147,0,0,1201,1200,1,0,0,0,1201,1202,1,0,0,0,
  	1202,1203,1,0,0,0,1203,1214,3,122,61,0,1204,1206,5,147,0,0,1205,1204,
  	1,0,0,0,1205,1206,1,0,0,0,1206,1207,1,0,0,0,1207,1209,5,3,0,0,1208,1210,
  	5,147,0,0,1209,1208,1,0,0,0,1209,1210,1,0,0,0,1210,1211,1,0,0,0,1211,
  	1213,3,122,61,0,1212,1205,1,0,0,0,1213,1216,1,0,0,0,1214,1212,1,0,0,0,
  	1214,1215,1,0,0,0,1215,121,1,0,0,0,1216,1214,1,0,0,0,1217,1219,3,272,
  	136,0,1218,1220,5,147,0,0,1219,1218,1,0,0,0,1219,1220,1,0,0,0,1220,1221,
  	1,0,0,0,1221,1223,5,5,0,0,1222,1224,5,147,0,0,1223,1222,1,0,0,0,1223,
  	1224,1,0,0,0,1224,1225,1,0,0,0,1225,1226,3,186,93,0,1226,123,1,0,0,0,
  	1227,1228,5,93,0,0,1228,1230,5,147,0,0,1229,1227,1,0,0,0,1229,1230,1,
  	0,0,0,1230,1231,1,0,0,0,1231,1233,5,94,0,0,1232,1234,5,147,0,0,1233,1232,
  	1,0,0,0,1233,1234,1,0,0,0,1234,1235,1,0,0,0,1235,1246,3,186,93,0,1236,
  	1238,5,147,0,0,1237,1236,1,0,0,0,1237,1238,1,0,0,0,1238,1239,1,0,0,0,
  	1239,1241,5,3,0,0,1240,1242,5,147,0,0,1241,1240,1,0,0,0,1241,1242,1,0,
  	0,0,1242,1243,1,0,0,0,1243,1245,3,186,93,0,1244,1237,1,0,0,0,1245,1248,
  	1,0,0,0,1246,1244,1,0,0,0,1246,1247,1,0,0,0,1247,125,1,0,0,0,1248,1246,
  	1,0,0,0,1249,1250,5,95,0,0,1250,1255,3,130,65,0,1251,1253,5,147,0,0,1252,
  	1251,1,0,0,0,1252,1253,1,0,0,0,1253,1254,1,0,0,0,1254,1256,3,144,72,0,
  	1255,1252,1,0,0,0,1255,1256,1,0,0,0,1256,127,1,0,0,0,1257,1258,5,96,0,
  	0,1258,1259,3,130,65,0,1259,129,1,0,0,0,1260,1262,5,147,0,0,1261,1260,
  	1,0,0,0,1261,1262,1,0,0,0,1262,1263,1,0,0,0,1263,1265,5,97,0,0,1264,1261,
  	1,0,0,0,1264,1265,1,0,0,0,1265,1266,1,0,0,0,1266,1267,5,147,0,0,1267,
  	1270,3,132,66,0,1268,1269,5,147,0,0,1269,1271,3,136,68,0,1270,1268,1,
  	0,0,0,1270,1271,1,0,0,0,1271,1274,1,0,0,0,1272,1273,5,147,0,0,1273,1275,
  	3,138,69,0,1274,1272,1,0,0,0,1274,1275,1,0,0,0,1275,1278,1,0,0,0,1276,
  	1277,5,147,0,0,1277,1279,3,140,70,0,1278,1276,1,0,0,0,1278,1279,1,0,0,
  	0,1279,131,1,0,0,0,1280,1291,5,98,0,0,1281,1283,5,147,0,0,1282,1281,1,
  	0,0,0,1282,1283,1,0,0,0,1283,1284,1,0,0,0,1284,1286,5,3,0,0,1285,1287,
  	5,147,0,0,1286,1285,1,0,0,0,1286,1287,1,0,0,0,1287,1288,1,0,0,0,1288,
  	1290,3,134,67,0,1289,1282,1,0,0,0,1290,1293,1,0,0,0,1291,1289,1,0,0,0,
  	1291,1292,1,0,0,0,1292,1309,1,0,0,0,1293,1291,1,0,0,0,1294,1305,3,134,
  	67,0,1295,1297,5,147,0,0,1296,1295,1,0,0,0,1296,1297,1,0,0,0,1297,1298,
  	1,0,0,0,1298,1300,5,3,0,0,1299,1301,5,147,0,0,1300,1299,1,0,0,0,1300,
  	1301,1,0,0,0,1301,1302,1,0,0,0,1302,1304,3,134,67,0,1303,1296,1,0,0,0,
  	1304,1307,1,0,0,0,1305,1303,1,0,0,0,1305,1306,1,0,0,0,1306,1309,1,0,0,
  	0,1307,1305,1,0,0,0,1308,1280,1,0,0,0,1308,1294,1,0,0,0,1309,133,1,0,
  	0,0,1310,1311,3,186,93,0,1311,1312,5,147,0,0,1312,1313,5,99,0,0,1313,
  	1314,5,147,0,0,1314,1315,3,266,133,0,1315,1318,1,0,0,0,1316,1318,3,186,
  	93,0,1317,1310,1,0,0,0,1317,1316,1,0,0,0,1318,135,1,0,0,0,1319,1320,5,
  	100,0,0,1320,1321,5,147,0,0,1321,1322,5,101,0,0,1322,1323,5,147,0,0,1323,
  	1331,3,142,71,0,1324,1326,5,3,0,0,1325,1327,5,147,0,0,1326,1325,1,0,0,
  	0,1326,1327,1,0,0,0,1327,1328,1,0,0,0,1328,1330,3,142,71,0,1329,1324,
  	1,0,0,0,1330,1333,1,0,0,0,1331,1329,1,0,0,0,1331,1332,1,0,0,0,1332,137,
  	1,0,0,0,1333,1331,1,0,0,0,1334,1335,5,102,0,0,1335,1336,5,147,0,0,1336,
  	1337,3,186,93,0,1337,139,1,0,0,0,1338,1339,5,103,0,0,1339,1340,5,147,
  	0,0,1340,1341,3,186,93,0,1341,141,1,0,0,0,1342,1347,3,186,93,0,1343,1345,
  	5,147,0,0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,1346,1,0,0,0,1346,
  	1348,7,1,0,0,1347,1344,1,0,0,0,1347,1348,1,0,0,0,1348,143,1,0,0,0,1349,
  	1350,5,108,0,0,1350,1351,5,147,0,0,1351,1352,3,186,93,0,1352,145,1,0,
  	0,0,1353,1364,3,148,74,0,1354,1356,5,147,0,0,1355,1354,1,0,0,0,1355,1356,
  	1,0,0,0,1356,1357,1,0,0,0,1357,1359,5,3,0,0,1358,1360,5,147,0,0,1359,
  	1358,1,0,0,0,1359,1360,1,0,0,0,1360,1361,1,0,0,0,1361,1363,3,148,74,0,
  	1362,1355,1,0,0,0,1363,1366,1,0,0,0,1364,1362,1,0,0,0,1364,1365,1,0,0,
  	0,1365,147,1,0,0,0,1366,1364,1,0,0,0,1367,1369,3,266,133,0,1368,1370,
  	5,147,0,0,1369,1368,1,0,0,0,1369,1370,1,0,0,0,1370,1371,1,0,0,0,1371,
  	1373,5,5,0,0,1372,1374,5,147,0,0,1373,1372,1,0,0,0,1373,1374,1,0,0,0,
  	1374,1375,1,0,0,0,1375,1376,3,150,75,0,1376,1379,1,0,0,0,1377,1379,3,
  	150,75,0,1378,1367,1,0,0,0,1378,1377,1,0,0,0,1379,149,1,0,0,0,1380,1381,
  	3,152,76,0,1381,151,1,0,0,0,1382,1389,3,154,77,0,1383,1385,5,147,0,0,
  	1384,1383,1,0,0,0,1384,1385,1,0,0,0,1385,1386,1,0,0,0,1386,1388,3,156,
  	78,0,1387,1384,1,0,0,0,1388,1391,1,0,0,0,1389,1387,1,0,0,0,1389,1390,
  	1,0,0,0,1390,1397,1,0,0,0,1391,1389,1,0,0,0,1392,1393,5,2,0,0,1393,1394,
  	3,152,76,0,1394,1395,5,4,0,0,1395,1397,1,0,0,0,1396,1382,1,0,0,0,1396,
  	1392,1,0,0,0,1397,153,1,0,0,0,1398,1400,5,2,0,0,1399,1401,5,147,0,0,1400,
  	1399,1,0,0,0,1400,1401,1,0,0,0,1401,1406,1,0,0,0,1402,1404,3,266,133,
  	0,1403,1405,5,147,0,0,1404,1403,1,0,0,0,1404,1405,1,0,0,0,1405,1407,1,
  	0,0,0,1406,1402,1,0,0,0,1406,1407,1,0,0,0,1407,1412,1,0,0,0,1408,1410,
  	3,166,83,0,1409,1411,5,147,0,0,1410,1409,1,0,0,0,1410,1411,1,0,0,0,1411,
  	1413,1,0,0,0,1412,1408,1,0,0,0,1412,1413,1,0,0,0,1413,1418,1,0,0,0,1414,
  	1416,3,162,81,0,1415,1417,5,147,0,0,1416,1415,1,0,0,0,1416,1417,1,0,0,
  	0,1417,1419,1,0,0,0,1418,1414,1,0,0,0,1418,1419,1,0,0,0,1419,1420,1,0,
  	0,0,1420,1421,5,4,0,0,1421,155,1,0,0,0,1422,1424,3,158,79,0,1423,1425,
  	5,147,0,0,1424,1423,1,0,0,0,1424,1425,1,0,0,0,1425,1426,1,0,0,0,1426,
  	1427,3,154,77,0,1427,157,1,0,0,0,1428,1430,3,286,143,0,1429,1431,5,147,
  	0,0,1430,1429,1,0,0,0,1430,1431,1,0,0,0,1431,1432,1,0,0,0,1432,1434,3,
  	290,145,0,1433,1435,5,147,0,0,1434,1433,1,0,0,0,1434,1435,1,0,0,0,1435,
  	1437,1,0,0,0,1436,1438,3,160,80,0,1437,1436,1,0,0,0,1437,1438,1,0,0,0,
  	1438,1440,1,0,0,0,1439,1441,5,147,0,0,1440,1439,1,0,0,0,1440,1441,1,0,
  	0,0,1441,1442,1,0,0,0,1442,1443,3,290,145,0,1443,1473,1,0,0,0,1444,1446,
  	3,290,145,0,1445,1447,5,147,0,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,1447,
  	1449,1,0,0,0,1448,1450,3,160,80,0,1449,1448,1,0,0,0,1449,1450,1,0,0,0,
  	1450,1452,1,0,0,0,1451,1453,5,147,0,0,1452,1451,1,0,0,0,1452,1453,1,0,
  	0,0,1453,1454,1,0,0,0,1454,1456,3,290,145,0,1455,1457,5,147,0,0,1456,
  	1455,1,0,0,0,1456,1457,1,0,0,0,1457,1458,1,0,0,0,1458,1459,3,288,144,
  	0,1459,1473,1,0,0,0,1460,1462,3,290,145,0,1461,1463,5,147,0,0,1462,1461,
  	1,0,0,0,1462,1463,1,0,0,0,1463,1465,1,0,0,0,1464,1466,3,160,80,0,1465,
  	1464,1,0,0,0,1465,1466,1,0,0,0,1466,1468,1,0,0,0,1467,1469,5,147,0,0,
  	1468,1467,1,0,0,0,1468,1469,1,0,0,0,1469,1470,1,0,0,0,1470,1471,3,290,
  	145,0,1471,1473,1,0,0,0,1472,1428,1,0,0,0,1472,1444,1,0,0,0,1472,1460,
  	1,0,0,0,1473,159,1,0,0,0,1474,1476,5,6,0,0,1475,1477,5,147,0,0,1476,1475,
  	1,0,0,0,1476,1477,1,0,0,0,1477,1482,1,0,0,0,1478,1480,3,266,133,0,1479,
  	1481,5,147,0,0,1480,1479,1,0,0,0,1480,1481,1,0,0,0,1481,1483,1,0,0,0,
  	1482,1478,1,0,0,0,1482,1483,1,0,0,0,1483,1488,1,0,0,0,1484,1486,3,164,
  	82,0,1485,1487,5,147,0,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1489,
  	1,0,0,0,1488,1484,1,0,0,0,1488,1489,1,0,0,0,1489,1494,1,0,0,0,1490,1492,
  	3,170,85,0,1491,1493,5,147,0,0,1492,1491,1,0,0,0,1492,1493,1,0,0,0,1493,
  	1495,1,0,0,0,1494,1490,1,0,0,0,1494,1495,1,0,0,0,1495,1500,1,0,0,0,1496,
  	1498,3,162,81,0,1497,1499,5,147,0,0,1498,1497,1,0,0,0,1498,1499,1,0,0,
  	0,1499,1501,1,0,0,0,1500,1496,1,0,0,0,1500,1501,1,0,0,0,1501,1502,1,0,
  	0,0,1502,1503,5,7,0,0,1503,161,1,0,0,0,1504,1506,5,8,0,0,1505,1507,5,
  	147,0,0,1506,1505,1,0,0,0,1506,1507,1,0,0,0,1507,1541,1,0,0,0,1508,1510,
  	3,274,137,0,1509,1511,5,147,0,0,1510,1509,1,0,0,0,1510,1511,1,0,0,0,1511,
  	1512,1,0,0,0,1512,1514,5,117,0,0,1513,1515,5,147,0,0,1514,1513,1,0,0,
  	0,1514,1515,1,0,0,0,1515,1516,1,0,0,0,1516,1518,3,186,93,0,1517,1519,
  	5,147,0,0,1518,1517,1,0,0,0,1518,1519,1,0,0,0,1519,1538,1,0,0,0,1520,
  	1522,5,3,0,0,1521,1523,5,147,0,0,1522,1521,1,0,0,0,1522,1523,1,0,0,0,
  	1523,1524,1,0,0,0,1524,1526,3,274,137,0,1525,1527,5,147,0,0,1526,1525,
  	1,0,0,0,1526,1527,1,0,0,0,1527,1528,1,0,0,0,1528,1530,5,117,0,0,1529,
  	1531,5,147,0,0,1530,1529,1,0,0,0,1530,1531,1,0,0,0,1531,1532,1,0,0,0,
  	1532,1534,3,186,93,0,1533,1535,5,147,0,0,1534,1533,1,0,0,0,1534,1535,
  	1,0,0,0,1535,1537,1,0,0,0,1536,1520,1,0,0,0,1537,1540,1,0,0,0,1538,1536,
  	1,0,0,0,1538,1539,1,0,0,0,1539,1542,1,0,0,0,1540,1538,1,0,0,0,1541,1508,
  	1,0,0,0,1541,1542,1,0,0,0,1542,1543,1,0,0,0,1543,1544,5,9,0,0,1544,163,
  	1,0,0,0,1545,1547,5,117,0,0,1546,1548,5,147,0,0,1547,1546,1,0,0,0,1547,
  	1548,1,0,0,0,1548,1549,1,0,0,0,1549,1563,3,184,92,0,1550,1552,5,147,0,
  	0,1551,1550,1,0,0,0,1551,1552,1,0,0,0,1552,1553,1,0,0,0,1553,1555,5,10,
  	0,0,1554,1556,5,117,0,0,1555,1554,1,0,0,0,1555,1556,1,0,0,0,1556,1558,
  	1,0,0,0,1557,1559,5,147,0,0,1558,1557,1,0,0,0,1558,1559,1,0,0,0,1559,
  	1560,1,0,0,0,1560,1562,3,184,92,0,1561,1551,1,0,0,0,1562,1565,1,0,0,0,
  	1563,1561,1,0,0,0,1563,1564,1,0,0,0,1564,165,1,0,0,0,1565,1563,1,0,0,
  	0,1566,1573,3,168,84,0,1567,1569,5,147,0,0,1568,1567,1,0,0,0,1568,1569,
  	1,0,0,0,1569,1570,1,0,0,0,1570,1572,3,168,84,0,1571,1568,1,0,0,0,1572,
  	1575,1,0,0,0,1573,1571,1,0,0,0,1573,1574,1,0,0,0,1574,167,1,0,0,0,1575,
  	1573,1,0,0,0,1576,1578,5,117,0,0,1577,1579,5,147,0,0,1578,1577,1,0,0,
  	0,1578,1579,1,0,0,0,1579,1580,1,0,0,0,1580,1581,3,182,91,0,1581,169,1,
  	0,0,0,1582,1584,5,98,0,0,1583,1585,5,147,0,0,1584,1583,1,0,0,0,1584,1585,
  	1,0,0,0,1585,1590,1,0,0,0,1586,1591,5,109,0,0,1587,1588,5,83,0,0,1588,
  	1589,5,147,0,0,1589,1591,5,109,0,0,1590,1586,1,0,0,0,1590,1587,1,0,0,
  	0,1590,1591,1,0,0,0,1591,1593,1,0,0,0,1592,1594,5,147,0,0,1593,1592,1,
  	0,0,0,1593,1594,1,0,0,0,1594,1609,1,0,0,0,1595,1597,3,178,89,0,1596,1595,
  	1,0,0,0,1596,1597,1,0,0,0,1597,1599,1,0,0,0,1598,1600,5,147,0,0,1599,
  	1598,1,0,0,0,1599,1600,1,0,0,0,1600,1601,1,0,0,0,1601,1603,5,11,0,0,1602,
  	1604,5,147,0,0,1603,1602,1,0,0,0,1603,1604,1,0,0,0,1604,1606,1,0,0,0,
  	1605,1607,3,180,90,0,1606,1605,1,0,0,0,1606,1607,1,0,0,0,1607,1610,1,
  	0,0,0,1608,1610,3,276,138,0,1609,1596,1,0,0,0,1609,1608,1,0,0,0,1609,
  	1610,1,0,0,0,1610,1615,1,0,0,0,1611,1613,5,147,0,0,1612,1611,1,0,0,0,
  	1612,1613,1,0,0,0,1613,1614,1,0,0,0,1614,1616,3,172,86,0,1615,1612,1,
  	0,0,0,1615,1616,1,0,0,0,1616,171,1,0,0,0,1617,1619,5,2,0,0,1618,1620,
  	5,147,0,0,1619,1618,1,0,0,0,1619,1620,1,0,0,0,1620,1621,1,0,0,0,1621,
  	1623,3,266,133,0,1622,1624,5,147,0,0,1623,1622,1,0,0,0,1623,1624,1,0,
  	0,0,1624,1625,1,0,0,0,1625,1627,5,3,0,0,1626,1628,5,147,0,0,1627,1626,
  	1,0,0,0,1627,1628,1,0,0,0,1628,1629,1,0,0,0,1629,1638,3,266,133,0,1630,
  	1632,5,147,0,0,1631,1630,1,0,0,0,1631,1632,1,0,0,0,1632,1633,1,0,0,0,
  	1633,1635,5,10,0,0,1634,1636,5,147,0,0,1635,1634,1,0,0,0,1635,1636,1,
  	0,0,0,1636,1637,1,0,0,0,1637,1639,3,144,72,0,1638,1631,1,0,0,0,1638,1639,
  	1,0,0,0,1639,1659,1,0,0,0,1640,1642,5,147,0,0,1641,1640,1,0,0,0,1641,
  	1642,1,0,0,0,1642,1643,1,0,0,0,1643,1645,5,10,0,0,1644,1646,5,147,0,0,
  	1645,1644,1,0,0,0,1645,1646,1,0,0,0,1646,1647,1,0,0,0,1647,1649,3,176,
  	88,0,1648,1650,5,147,0,0,1649,1648,1,0,0,0,1649,1650,1,0,0,0,1650,1651,
  	1,0,0,0,1651,1653,5,3,0,0,1652,1654,5,147,0,0,1653,1652,1,0,0,0,1653,
  	1654,1,0,0,0,1654,1655,1,0,0,0,1655,1657,3,174,87,0,1656,1658,5,147,0,
  	0,1657,1656,1,0,0,0,1657,1658,1,0,0,0,1658,1660,1,0,0,0,1659,1641,1,0,
  	0,0,1659,1660,1,0,0,0,1660,1661,1,0,0,0,1661,1662,5,4,0,0,1662,173,1,
  	0,0,0,1663,1665,5,8,0,0,1664,1666,5,147,0,0,1665,1664,1,0,0,0,1665,1666,
  	1,0,0,0,1666,1668,1,0,0,0,1667,1669,3,132,66,0,1668,1667,1,0,0,0,1668,
  	1669,1,0,0,0,1669,1671,1,0,0,0,1670,1672,5,147,0,0,1671,1670,1,0,0,0,
  	1671,1672,1,0,0,0,1672,1673,1,0,0,0,1673,1674,5,9,0,0,1674,175,1,0,0,
  	0,1675,1677,5,8,0,0,1676,1678,5,147,0,0,1677,1676,1,0,0,0,1677,1678,1,
  	0,0,0,1678,1680,1,0,0,0,1679,1681,3,132,66,0,1680,1679,1,0,0,0,1680,1681,
  	1,0,0,0,1681,1683,1,0,0,0,1682,1684,5,147,0,0,1683,1682,1,0,0,0,1683,
  	1684,1,0,0,0,1684,1685,1,0,0,0,1685,1686,5,9,0,0,1686,177,1,0,0,0,1687,
  	1688,5,135,0,0,1688,179,1,0,0,0,1689,1690,5,135,0,0,1690,181,1,0,0,0,
  	1691,1692,3,280,140,0,1692,183,1,0,0,0,1693,1694,3,280,140,0,1694,185,
  	1,0,0,0,1695,1696,3,188,94,0,1696,187,1,0,0,0,1697,1704,3,190,95,0,1698,
  	1699,5,147,0,0,1699,1700,5,110,0,0,1700,1701,5,147,0,0,1701,1703,3,190,
  	95,0,1702,1698,1,0,0,0,1703,1706,1,0,0,0,1704,1702,1,0,0,0,1704,1705,
  	1,0,0,0,1705,189,1,0,0,0,1706,1704,1,0,0,0,1707,1714,3,192,96,0,1708,
  	1709,5,147,0,0,1709,1710,5,111,0,0,1710,1711,5,147,0,0,1711,1713,3,192,
  	96,0,1712,1708,1,0,0,0,1713,1716,1,0,0,0,1714,1712,1,0,0,0,1714,1715,
  	1,0,0,0,1715,191,1,0,0,0,1716,1714,1,0,0,0,1717,1724,3,194,97,0,1718,
  	1719,5,147,0,0,1719,1720,5,112,0,0,1720,1721,5,147,0,0,1721,1723,3,194,
  	97,0,1722,1718,1,0,0,0,1723,1726,1,0,0,0,1724,1722,1,0,0,0,1724,1725,
  	1,0,0,0,1725,193,1,0,0,0,1726,1724,1,0,0,0,1727,1729,5,113,0,0,1728,1730,
  	5,147,0,0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1732,1,0,0,0,1731,
  	1727,1,0,0,0,1732,1735,1,0,0,0,1733,1731,1,0,0,0,1733,1734,1,0,0,0,1734,
  	1736,1,0,0,0,1735,1733,1,0,0,0,1736,1737,3,196,98,0,1737,195,1,0,0,0,
  	1738,1748,3,200,100,0,1739,1741,5,147,0,0,1740,1739,1,0,0,0,1740,1741,
  	1,0,0,0,1741,1742,1,0,0,0,1742,1744,3,198,99,0,1743,1745,5,147,0,0,1744,
  	1743,1,0,0,0,1744,1745,1,0,0,0,1745,1746,1,0,0,0,1746,1747,3,200,100,
  	0,1747,1749,1,0,0,0,1748,1740,1,0,0,0,1748,1749,1,0,0,0,1749,1787,1,0,
  	0,0,1750,1752,3,200,100,0,1751,1753,5,147,0,0,1752,1751,1,0,0,0,1752,
  	1753,1,0,0,0,1753,1754,1,0,0,0,1754,1756,5,114,0,0,1755,1757,5,147,0,
  	0,1756,1755,1,0,0,0,1756,1757,1,0,0,0,1757,1758,1,0,0,0,1758,1759,3,200,
  	100,0,1759,1760,1,0,0,0,1760,1761,6,98,-1,0,1761,1787,1,0,0,0,1762,1764,
  	3,200,100,0,1763,1765,5,147,0,0,1764,1763,1,0,0,0,1764,1765,1,0,0,0,1765,
  	1766,1,0,0,0,1766,1768,3,198,99,0,1767,1769,5,147,0,0,1768,1767,1,0,0,
  	0,1768,1769,1,0,0,0,1769,1770,1,0,0,0,1770,1780,3,200,100,0,1771,1773,
  	5,147,0,0,1772,1771,1,0,0,0,1772,1773,1,0,0,0,1773,1774,1,0,0,0,1774,
  	1776,3,198,99,0,1775,1777,5,147,0,0,1776,1775,1,0,0,0,1776,1777,1,0,0,
  	0,1777,1778,1,0,0,0,1778,1779,3,200,100,0,1779,1781,1,0,0,0,1780,1772,
  	1,0,0,0,1781,1782,1,0,0,0,1782,1780,1,0,0,0,1782,1783,1,0,0,0,1783,1784,
  	1,0,0,0,1784,1785,6,98,-1,0,1785,1787,1,0,0,0,1786,1738,1,0,0,0,1786,
  	1750,1,0,0,0,1786,1762,1,0,0,0,1787,197,1,0,0,0,1788,1789,7,2,0,0,1789,
  	199,1,0,0,0,1790,1801,3,202,101,0,1791,1793,5,147,0,0,1792,1791,1,0,0,
  	0,1792,1793,1,0,0,0,1793,1794,1,0,0,0,1794,1796,5,10,0,0,1795,1797,5,
  	147,0,0,1796,1795,1,0,0,0,1796,1797,1,0,0,0,1797,1798,1,0,0,0,1798,1800,
  	3,202,101,0,1799,1792,1,0,0,0,1800,1803,1,0,0,0,1801,1799,1,0,0,0,1801,
  	1802,1,0,0,0,1802,201,1,0,0,0,1803,1801,1,0,0,0,1804,1815,3,204,102,0,
  	1805,1807,5,147,0,0,1806,1805,1,0,0,0,1806,1807,1,0,0,0,1807,1808,1,0,
  	0,0,1808,1810,5,17,0,0,1809,1811,5,147,0,0,1810,1809,1,0,0,0,1810,1811,
  	1,0,0,0,1811,1812,1,0,0,0,1812,1814,3,204,102,0,1813,1806,1,0,0,0,1814,
  	1817,1,0,0,0,1815,1813,1,0,0,0,1815,1816,1,0,0,0,1816,203,1,0,0,0,1817,
  	1815,1,0,0,0,1818,1830,3,208,104,0,1819,1821,5,147,0,0,1820,1819,1,0,
  	0,0,1820,1821,1,0,0,0,1821,1822,1,0,0,0,1822,1824,3,206,103,0,1823,1825,
  	5,147,0,0,1824,1823,1,0,0,0,1824,1825,1,0,0,0,1825,1826,1,0,0,0,1826,
  	1827,3,208,104,0,1827,1829,1,0,0,0,1828,1820,1,0,0,0,1829,1832,1,0,0,
  	0,1830,1828,1,0,0,0,1830,1831,1,0,0,0,1831,205,1,0,0,0,1832,1830,1,0,
  	0,0,1833,1834,7,3,0,0,1834,207,1,0,0,0,1835,1847,3,212,106,0,1836,1838,
  	5,147,0,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,1839,1,0,0,0,1839,
  	1841,3,210,105,0,1840,1842,5,147,0,0,1841,1840,1,0,0,0,1841,1842,1,0,
  	0,0,1842,1843,1,0,0,0,1843,1844,3,212,106,0,1844,1846,1,0,0,0,1845,1837,
  	1,0,0,0,1846,1849,1,0,0,0,1847,1845,1,0,0,0,1847,1848,1,0,0,0,1848,209,
  	1,0,0,0,1849,1847,1,0,0,0,1850,1851,7,4,0,0,1851,211,1,0,0,0,1852,1864,
  	3,216,108,0,1853,1855,5,147,0,0,1854,1853,1,0,0,0,1854,1855,1,0,0,0,1855,
  	1856,1,0,0,0,1856,1858,3,214,107,0,1857,1859,5,147,0,0,1858,1857,1,0,
  	0,0,1858,1859,1,0,0,0,1859,1860,1,0,0,0,1860,1861,3,216,108,0,1861,1863,
  	1,0,0,0,1862,1854,1,0,0,0,1863,1866,1,0,0,0,1864,1862,1,0,0,0,1864,1865,
  	1,0,0,0,1865,213,1,0,0,0,1866,1864,1,0,0,0,1867,1868,7,5,0,0,1868,215,
  	1,0,0,0,1869,1880,3,218,109,0,1870,1872,5,147,0,0,1871,1870,1,0,0,0,1871,
  	1872,1,0,0,0,1872,1873,1,0,0,0,1873,1875,5,23,0,0,1874,1876,5,147,0,0,
  	1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,1877,1,0,0,0,1877,1879,3,218,
  	109,0,1878,1871,1,0,0,0,1879,1882,1,0,0,0,1880,1878,1,0,0,0,1880,1881,
  	1,0,0,0,1881,217,1,0,0,0,1882,1880,1,0,0,0,1883,1885,5,115,0,0,1884,1886,
  	5,147,0,0,1885,1884,1,0,0,0,1885,1886,1,0,0,0,1886,1888,1,0,0,0,1887,
  	1883,1,0,0,0,1888,1891,1,0,0,0,1889,1887,1,0,0,0,1889,1890,1,0,0,0,1890,
  	1892,1,0,0,0,1891,1889,1,0,0,0,1892,1897,3,220,110,0,1893,1895,5,147,
  	0,0,1894,1893,1,0,0,0,1894,1895,1,0,0,0,1895,1896,1,0,0,0,1896,1898,5,
  	116,0,0,1897,1894,1,0,0,0,1897,1898,1,0,0,0,1898,219,1,0,0,0,1899,1907,
  	3,230,115,0,1900,1908,3,224,112,0,1901,1903,3,222,111,0,1902,1901,1,0,
  	0,0,1903,1904,1,0,0,0,1904,1902,1,0,0,0,1904,1905,1,0,0,0,1905,1908,1,
  	0,0,0,1906,1908,3,228,114,0,1907,1900,1,0,0,0,1907,1902,1,0,0,0,1907,
  	1906,1,0,0,0,1907,1908,1,0,0,0,1908,221,1,0,0,0,1909,1910,5,147,0,0,1910,
  	1912,5,118,0,0,1911,1913,5,147,0,0,1912,1911,1,0,0,0,1912,1913,1,0,0,
  	0,1913,1914,1,0,0,0,1914,1929,3,230,115,0,1915,1916,5,6,0,0,1916,1917,
  	3,186,93,0,1917,1918,5,7,0,0,1918,1929,1,0,0,0,1919,1921,5,6,0,0,1920,
  	1922,3,186,93,0,1921,1920,1,0,0,0,1921,1922,1,0,0,0,1922,1923,1,0,0,0,
  	1923,1925,5,117,0,0,1924,1926,3,186,93,0,1925,1924,1,0,0,0,1925,1926,
  	1,0,0,0,1926,1927,1,0,0,0,1927,1929,5,7,0,0,1928,1909,1,0,0,0,1928,1915,
  	1,0,0,0,1928,1919,1,0,0,0,1929,223,1,0,0,0,1930,1942,3,226,113,0,1931,
  	1932,5,147,0,0,1932,1933,5,119,0,0,1933,1934,5,147,0,0,1934,1942,5,95,
  	0,0,1935,1936,5,147,0,0,1936,1937,5,120,0,0,1937,1938,5,147,0,0,1938,
  	1942,5,95,0,0,1939,1940,5,147,0,0,1940,1942,5,121,0,0,1941,1930,1,0,0,
  	0,1941,1931,1,0,0,0,1941,1935,1,0,0,0,1941,1939,1,0,0,0,1942,1944,1,0,
  	0,0,1943,1945,5,147,0,0,1944,1943,1,0,0,0,1944,1945,1,0,0,0,1945,1946,
  	1,0,0,0,1946,1947,3,230,115,0,1947,225,1,0,0,0,1948,1950,5,147,0,0,1949,
  	1948,1,0,0,0,1949,1950,1,0,0,0,1950,1951,1,0,0,0,1951,1952,5,24,0,0,1952,
  	227,1,0,0,0,1953,1954,5,147,0,0,1954,1955,5,122,0,0,1955,1956,5,147,0,
  	0,1956,1964,5,123,0,0,1957,1958,5,147,0,0,1958,1959,5,122,0,0,1959,1960,
  	5,147,0,0,1960,1961,5,113,0,0,1961,1962,5,147,0,0,1962,1964,5,123,0,0,
  	1963,1953,1,0,0,0,1963,1957,1,0,0,0,1964,229,1,0,0,0,1965,1972,3,232,
  	116,0,1966,1968,5,147,0,0,1967,1966,1,0,0,0,1967,1968,1,0,0,0,1968,1969,
  	1,0,0,0,1969,1971,3,260,130,0,1970,1967,1,0,0,0,1971,1974,1,0,0,0,1972,
  	1970,1,0,0,0,1972,1973,1,0,0,0,1973,231,1,0,0,0,1974,1972,1,0,0,0,1975,
  	1985,3,234,117,0,1976,1985,3,270,135,0,1977,1985,3,262,131,0,1978,1985,
  	3,246,123,0,1979,1985,3,248,124,0,1980,1985,3,254,127,0,1981,1985,3,256,
  	128,0,1982,1985,3,258,129,0,1983,1985,3,266,133,0,1984,1975,1,0,0,0,1984,
  	1976,1,0,0,0,1984,1977,1,0,0,0,1984,1978,1,0,0,0,1984,1979,1,0,0,0,1984,
  	1980,1,0,0,0,1984,1981,1,0,0,0,1984,1982,1,0,0,0,1984,1983,1,0,0,0,1985,
  	233,1,0,0,0,1986,1993,3,268,134,0,1987,1993,5,133,0,0,1988,1993,3,236,
  	118,0,1989,1993,5,123,0,0,1990,1993,3,238,119,0,1991,1993,3,242,121,0,
  	1992,1986,1,0,0,0,1992,1987,1,0,0,0,1992,1988,1,0,0,0,1992,1989,1,0,0,
  	0,1992,1990,1,0,0,0,1992,1991,1,0,0,0,1993,235,1,0,0,0,1994,1995,7,6,
  	0,0,1995,237,1,0,0,0,1996,1998,5,6,0,0,1997,1999,5,147,0,0,1998,1997,
  	1,0,0,0,1998,1999,1,0,0,0,1999,2013,1,0,0,0,2000,2002,3,186,93,0,2001,
  	2003,5,147,0,0,2002,2001,1,0,0,0,2002,2003,1,0,0,0,2003,2010,1,0,0,0,
  	2004,2006,3,240,120,0,2005,2007,5,147,0,0,2006,2005,1,0,0,0,2006,2007,
  	1,0,0,0,2007,2009,1,0,0,0,2008,2004,1,0,0,0,2009,2012,1,0,0,0,2010,2008,
  	1,0,0,0,2010,2011,1,0,0,0,2011,2014,1,0,0,0,2012,2010,1,0,0,0,2013,2000,
  	1,0,0,0,2013,2014,1,0,0,0,2014,2015,1,0,0,0,2015,2016,5,7,0,0,2016,239,
  	1,0,0,0,2017,2019,5,3,0,0,2018,2020,5,147,0,0,2019,2018,1,0,0,0,2019,
  	2020,1,0,0,0,2020,2022,1,0,0,0,2021,2023,3,186,93,0,2022,2021,1,0,0,0,
  	2022,2023,1,0,0,0,2023,241,1,0,0,0,2024,2026,5,8,0,0,2025,2027,5,147,
  	0,0,2026,2025,1,0,0,0,2026,2027,1,0,0,0,2027,2028,1,0,0,0,2028,2030,3,
  	244,122,0,2029,2031,5,147,0,0,2030,2029,1,0,0,0,2030,2031,1,0,0,0,2031,
  	2042,1,0,0,0,2032,2034,5,3,0,0,2033,2035,5,147,0,0,2034,2033,1,0,0,0,
  	2034,2035,1,0,0,0,2035,2036,1,0,0,0,2036,2038,3,244,122,0,2037,2039,5,
  	147,0,0,2038,2037,1,0,0,0,2038,2039,1,0,0,0,2039,2041,1,0,0,0,2040,2032,
  	1,0,0,0,2041,2044,1,0,0,0,2042,2040,1,0,0,0,2042,2043,1,0,0,0,2043,2045,
  	1,0,0,0,2044,2042,1,0,0,0,2045,2046,5,9,0,0,2046,243,1,0,0,0,2047,2050,
  	3,282,141,0,2048,2050,5,133,0,0,2049,2047,1,0,0,0,2049,2048,1,0,0,0,2050,
  	2052,1,0,0,0,2051,2053,5,147,0,0,2052,2051,1,0,0,0,2052,2053,1,0,0,0,
  	2053,2054,1,0,0,0,2054,2056,5,117,0,0,2055,2057,5,147,0,0,2056,2055,1,
  	0,0,0,2056,2057,1,0,0,0,2057,2058,1,0,0,0,2058,2059,3,186,93,0,2059,245,
  	1,0,0,0,2060,2062,5,2,0,0,2061,2063,5,147,0,0,2062,2061,1,0,0,0,2062,
  	2063,1,0,0,0,2063,2064,1,0,0,0,2064,2066,3,186,93,0,2065,2067,5,147,0,
  	0,2066,2065,1,0,0,0,2066,2067,1,0,0,0,2067,2068,1,0,0,0,2068,2069,5,4,
  	0,0,2069,247,1,0,0,0,2070,2072,5,126,0,0,2071,2073,5,147,0,0,2072,2071,
  	1,0,0,0,2072,2073,1,0,0,0,2073,2074,1,0,0,0,2074,2076,5,2,0,0,2075,2077,
  	5,147,0,0,2076,2075,1,0,0,0,2076,2077,1,0,0,0,2077,2078,1,0,0,0,2078,
  	2080,5,98,0,0,2079,2081,5,147,0,0,2080,2079,1,0,0,0,2080,2081,1,0,0,0,
  	2081,2082,1,0,0,0,2082,2119,5,4,0,0,2083,2085,3,250,125,0,2084,2086,5,
  	147,0,0,2085,2084,1,0,0,0,2085,2086,1,0,0,0,2086,2087,1,0,0,0,2087,2089,
  	5,2,0,0,2088,2090,5,147,0,0,2089,2088,1,0,0,0,2089,2090,1,0,0,0,2090,
  	2095,1,0,0,0,2091,2093,5,97,0,0,2092,2094,5,147,0,0,2093,2092,1,0,0,0,
  	2093,2094,1,0,0,0,2094,2096,1,0,0,0,2095,2091,1,0,0,0,2095,2096,1,0,0,
  	0,2096,2114,1,0,0,0,2097,2099,3,252,126,0,2098,2100,5,147,0,0,2099,2098,
  	1,0,0,0,2099,2100,1,0,0,0,2100,2111,1,0,0,0,2101,2103,5,3,0,0,2102,2104,
  	5,147,0,0,2103,2102,1,0,0,0,2103,2104,1,0,0,0,2104,2105,1,0,0,0,2105,
  	2107,3,252,126,0,2106,2108,5,147,0,0,2107,2106,1,0,0,0,2107,2108,1,0,
  	0,0,2108,2110,1,0,0,0,2109,2101,1,0,0,0,2110,2113,1,0,0,0,2111,2109,1,
  	0,0,0,2111,2112,1,0,0,0,2112,2115,1,0,0,0,2113,2111,1,0,0,0,2114,2097,
  	1,0,0,0,2114,2115,1,0,0,0,2115,2116,1,0,0,0,2116,2117,5,4,0,0,2117,2119,
  	1,0,0,0,2118,2070,1,0,0,0,2118,2083,1,0,0,0,2119,249,1,0,0,0,2120,2121,
  	3,282,141,0,2121,251,1,0,0,0,2122,2124,3,282,141,0,2123,2125,5,147,0,
  	0,2124,2123,1,0,0,0,2124,2125,1,0,0,0,2125,2126,1,0,0,0,2126,2127,5,117,
  	0,0,2127,2129,5,5,0,0,2128,2130,5,147,0,0,2129,2128,1,0,0,0,2129,2130,
  	1,0,0,0,2130,2132,1,0,0,0,2131,2122,1,0,0,0,2131,2132,1,0,0,0,2132,2133,
  	1,0,0,0,2133,2134,3,186,93,0,2134,253,1,0,0,0,2135,2140,3,154,77,0,2136,
  	2138,5,147,0,0,2137,2136,1,0,0,0,2137,2138,1,0,0,0,2138,2139,1,0,0,0,
  	2139,2141,3,156,78,0,2140,2137,1,0,0,0,2141,2142,1,0,0,0,2142,2140,1,
  	0,0,0,2142,2143,1,0,0,0,2143,255,1,0,0,0,2144,2146,5,127,0,0,2145,2147,
  	5,147,0,0,2146,2145,1,0,0,0,2146,2147,1,0,0,0,2147,2148,1,0,0,0,2148,
  	2150,5,8,0,0,2149,2151,5,147,0,0,2150,2149,1,0,0,0,2150,2151,1,0,0,0,
  	2151,2152,1,0,0,0,2152,2154,5,87,0,0,2153,2155,5,147,0,0,2154,2153,1,
  	0,0,0,2154,2155,1,0,0,0,2155,2156,1,0,0,0,2156,2161,3,146,73,0,2157,2159,
  	5,147,0,0,2158,2157,1,0,0,0,2158,2159,1,0,0,0,2159,2160,1,0,0,0,2160,
  	2162,3,144,72,0,2161,2158,1,0,0,0,2161,2162,1,0,0,0,2162,2164,1,0,0,0,
  	2163,2165,5,147,0,0,2164,2163,1,0,0,0,2164,2165,1,0,0,0,2165,2166,1,0,
  	0,0,2166,2167,5,9,0,0,2167,257,1,0,0,0,2168,2170,5,126,0,0,2169,2171,
  	5,147,0,0,2170,2169,1,0,0,0,2170,2171,1,0,0,0,2171,2172,1,0,0,0,2172,
  	2174,5,8,0,0,2173,2175,5,147,0,0,2174,2173,1,0,0,0,2174,2175,1,0,0,0,
  	2175,2176,1,0,0,0,2176,2178,5,87,0,0,2177,2179,5,147,0,0,2178,2177,1,
  	0,0,0,2178,2179,1,0,0,0,2179,2180,1,0,0,0,2180,2185,3,146,73,0,2181,2183,
  	5,147,0,0,2182,2181,1,0,0,0,2182,2183,1,0,0,0,2183,2184,1,0,0,0,2184,
  	2186,3,144,72,0,2185,2182,1,0,0,0,2185,2186,1,0,0,0,2186,2188,1,0,0,0,
  	2187,2189,5,147,0,0,2188,2187,1,0,0,0,2188,2189,1,0,0,0,2189,2190,1,0,
  	0,0,2190,2191,5,9,0,0,2191,259,1,0,0,0,2192,2194,5,25,0,0,2193,2195,5,
  	147,0,0,2194,2193,1,0,0,0,2194,2195,1,0,0,0,2195,2198,1,0,0,0,2196,2199,
  	3,274,137,0,2197,2199,5,98,0,0,2198,2196,1,0,0,0,2198,2197,1,0,0,0,2199,
  	261,1,0,0,0,2200,2205,5,128,0,0,2201,2203,5,147,0,0,2202,2201,1,0,0,0,
  	2202,2203,1,0,0,0,2203,2204,1,0,0,0,2204,2206,3,264,132,0,2205,2202,1,
  	0,0,0,2206,2207,1,0,0,0,2207,2205,1,0,0,0,2207,2208,1,0,0,0,2208,2223,
  	1,0,0,0,2209,2211,5,128,0,0,2210,2212,5,147,0,0,2211,2210,1,0,0,0,2211,
  	2212,1,0,0,0,2212,2213,1,0,0,0,2213,2218,3,186,93,0,2214,2216,5,147,0,
  	0,2215,2214,1,0,0,0,2215,2216,1,0,0,0,2216,2217,1,0,0,0,2217,2219,3,264,
  	132,0,2218,2215,1,0,0,0,2219,2220,1,0,0,0,2220,2218,1,0,0,0,2220,2221,
  	1,0,0,0,2221,2223,1,0,0,0,2222,2200,1,0,0,0,2222,2209,1,0,0,0,2223,2232,
  	1,0,0,0,2224,2226,5,147,0,0,2225,2224,1,0,0,0,2225,2226,1,0,0,0,2226,
  	2227,1,0,0,0,2227,2229,5,129,0,0,2228,2230,5,147,0,0,2229,2228,1,0,0,
  	0,2229,2230,1,0,0,0,2230,2231,1,0,0,0,2231,2233,3,186,93,0,2232,2225,
  	1,0,0,0,2232,2233,1,0,0,0,2233,2235,1,0,0,0,2234,2236,5,147,0,0,2235,
  	2234,1,0,0,0,2235,2236,1,0,0,0,2236,2237,1,0,0,0,2237,2238,5,130,0,0,
  	2238,263,1,0,0,0,2239,2241,5,131,0,0,2240,2242,5,147,0,0,2241,2240,1,
  	0,0,0,2241,2242,1,0,0,0,2242,2243,1,0,0,0,2243,2245,3,186,93,0,2244,2246,
  	5,147,0,0,2245,2244,1,0,0,0,2245,2246,1,0,0,0,2246,2247,1,0,0,0,2247,
  	2249,5,132,0,0,2248,2250,5,147,0,0,2249,2248,1,0,0,0,2249,2250,1,0,0,
  	0,2250,2251,1,0,0,0,2251,2252,3,186,93,0,2252,265,1,0,0,0,2253,2254,3,
  	282,141,0,2254,267,1,0,0,0,2255,2258,3,278,139,0,2256,2258,3,276,138,
  	0,2257,2255,1,0,0,0,2257,2256,1,0,0,0,2258,269,1,0,0,0,2259,2262,5,26,
  	0,0,2260,2263,3,282,141,0,2261,2263,5,135,0,0,2262,2260,1,0,0,0,2262,
  	2261,1,0,0,0,2263,271,1,0,0,0,2264,2266,3,232,116,0,2265,2267,5,147,0,
  	0,2266,2265,1,0,0,0,2266,2267,1,0,0,0,2267,2268,1,0,0,0,2268,2269,3,260,
  	130,0,2269,273,1,0,0,0,2270,2271,3,280,140,0,2271,275,1,0,0,0,2272,2273,
  	5,135,0,0,2273,277,1,0,0,0,2274,2275,5,142,0,0,2275,279,1,0,0,0,2276,
  	2277,3,282,141,0,2277,281,1,0,0,0,2278,2284,5,143,0,0,2279,2280,5,146,
  	0,0,2280,2284,6,141,-1,0,2281,2284,5,136,0,0,2282,2284,3,284,142,0,2283,
  	2278,1,0,0,0,2283,2279,1,0,0,0,2283,2281,1,0,0,0,2283,2282,1,0,0,0,2284,
  	283,1,0,0,0,2285,2286,7,7,0,0,2286,285,1,0,0,0,2287,2288,7,8,0,0,2288,
  	287,1,0,0,0,2289,2290,7,9,0,0,2290,289,1,0,0,0,2291,2292,7,10,0,0,2292,
  	291,1,0,0,0,396,294,298,303,307,312,315,319,322,336,342,346,349,355,358,
  	362,366,370,375,379,386,390,395,405,409,413,418,431,435,443,446,454,457,
  	469,473,495,499,502,505,508,511,515,520,524,534,538,543,548,553,559,563,
  	567,572,579,583,587,590,594,598,602,607,611,617,621,631,641,645,649,653,
  	658,670,674,678,682,686,688,692,696,698,712,716,720,724,729,732,736,740,
  	742,746,750,752,788,799,821,825,830,841,845,849,857,861,865,871,875,879,
  	885,889,893,897,901,905,911,918,923,929,949,953,961,971,976,981,985,990,
  	996,1001,1004,1008,1012,1016,1022,1026,1031,1036,1040,1043,1047,1051,
  	1055,1059,1063,1069,1073,1078,1082,1091,1097,1105,1109,1113,1117,1124,
  	1127,1130,1133,1139,1142,1146,1150,1154,1157,1161,1171,1177,1184,1197,
  	1201,1205,1209,1214,1219,1223,1229,1233,1237,1241,1246,1252,1255,1261,
  	1264,1270,1274,1278,1282,1286,1291,1296,1300,1305,1308,1317,1326,1331,
  	1344,1347,1355,1359,1364,1369,1373,1378,1384,1389,1396,1400,1404,1406,
  	1410,1412,1416,1418,1424,1430,1434,1437,1440,1446,1449,1452,1456,1462,
  	1465,1468,1472,1476,1480,1482,1486,1488,1492,1494,1498,1500,1506,1510,
  	1514,1518,1522,1526,1530,1534,1538,1541,1547,1551,1555,1558,1563,1568,
  	1573,1578,1584,1590,1593,1596,1599,1603,1606,1609,1612,1615,1619,1623,
  	1627,1631,1635,1638,1641,1645,1649,1653,1657,1659,1665,1668,1671,1677,
  	1680,1683,1704,1714,1724,1729,1733,1740,1744,1748,1752,1756,1764,1768,
  	1772,1776,1782,1786,1792,1796,1801,1806,1810,1815,1820,1824,1830,1837,
  	1841,1847,1854,1858,1864,1871,1875,1880,1885,1889,1894,1897,1904,1907,
  	1912,1921,1925,1928,1941,1944,1949,1963,1967,1972,1984,1992,1998,2002,
  	2006,2010,2013,2019,2022,2026,2030,2034,2038,2042,2049,2052,2056,2062,
  	2066,2072,2076,2080,2085,2089,2093,2095,2099,2103,2107,2111,2114,2118,
  	2124,2129,2131,2137,2142,2146,2150,2154,2158,2161,2164,2170,2174,2178,
  	2182,2185,2188,2194,2198,2202,2207,2211,2215,2220,2222,2225,2229,2232,
  	2235,2241,2245,2249,2257,2262,2266,2283
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cypherParserStaticData = staticData.release();
}

}

CypherParser::CypherParser(TokenStream *input) : CypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CypherParser::CypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  CypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *cypherParserStaticData->atn, cypherParserStaticData->decisionToDFA, cypherParserStaticData->sharedContextCache, options);
}

CypherParser::~CypherParser() {
  delete _interpreter;
}

const atn::ATN& CypherParser::getATN() const {
  return *cypherParserStaticData->atn;
}

std::string CypherParser::getGrammarFileName() const {
  return "Cypher.g4";
}

const std::vector<std::string>& CypherParser::getRuleNames() const {
  return cypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& CypherParser::getVocabulary() const {
  return cypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CypherParser::getSerializedATN() const {
  return cypherParserStaticData->serializedATN;
}


//----------------- Ku_StatementsContext ------------------------------------------------------------------

CypherParser::Ku_StatementsContext::Ku_StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_CypherContext *> CypherParser::Ku_StatementsContext::oC_Cypher() {
  return getRuleContexts<CypherParser::OC_CypherContext>();
}

CypherParser::OC_CypherContext* CypherParser::Ku_StatementsContext::oC_Cypher(size_t i) {
  return getRuleContext<CypherParser::OC_CypherContext>(i);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::EOF() {
  return getToken(CypherParser::EOF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::Ku_StatementsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::Ku_StatementsContext::getRuleIndex() const {
  return CypherParser::RuleKu_Statements;
}


CypherParser::Ku_StatementsContext* CypherParser::ku_Statements() {
  Ku_StatementsContext *_localctx = _tracker.createInstance<Ku_StatementsContext>(_ctx, getState());
  enterRule(_localctx, 0, CypherParser::RuleKu_Statements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(292);
    oC_Cypher();
    setState(303);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(294);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(293);
          match(CypherParser::SP);
        }
        setState(296);
        match(CypherParser::T__0);
        setState(298);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
        case 1: {
          setState(297);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(300);
        oC_Cypher(); 
      }
      setState(305);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    }
    setState(307);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(306);
      match(CypherParser::SP);
    }
    setState(309);
    match(CypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CypherContext ------------------------------------------------------------------

CypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StatementContext* CypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<CypherParser::OC_StatementContext>(0);
}

CypherParser::OC_AnyCypherOptionContext* CypherParser::OC_CypherContext::oC_AnyCypherOption() {
  return getRuleContext<CypherParser::OC_AnyCypherOptionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CypherContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CypherContext::getRuleIndex() const {
  return CypherParser::RuleOC_Cypher;
}


CypherParser::OC_CypherContext* CypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 2, CypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(312);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::EXPLAIN

    || _la == CypherParser::PROFILE) {
      setState(311);
      oC_AnyCypherOption();
    }
    setState(315);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(314);
      match(CypherParser::SP);
    }

    setState(317);
    oC_Statement();
    setState(322);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(319);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(318);
        match(CypherParser::SP);
      }
      setState(321);
      match(CypherParser::T__0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

CypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_QueryContext* CypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

CypherParser::KU_DDLContext* CypherParser::OC_StatementContext::kU_DDL() {
  return getRuleContext<CypherParser::KU_DDLContext>(0);
}

CypherParser::KU_CopyFromContext* CypherParser::OC_StatementContext::kU_CopyFrom() {
  return getRuleContext<CypherParser::KU_CopyFromContext>(0);
}

CypherParser::KU_CopyFromByColumnContext* CypherParser::OC_StatementContext::kU_CopyFromByColumn() {
  return getRuleContext<CypherParser::KU_CopyFromByColumnContext>(0);
}

CypherParser::KU_CopyTOContext* CypherParser::OC_StatementContext::kU_CopyTO() {
  return getRuleContext<CypherParser::KU_CopyTOContext>(0);
}

CypherParser::KU_StandaloneCallContext* CypherParser::OC_StatementContext::kU_StandaloneCall() {
  return getRuleContext<CypherParser::KU_StandaloneCallContext>(0);
}

CypherParser::KU_CreateMacroContext* CypherParser::OC_StatementContext::kU_CreateMacro() {
  return getRuleContext<CypherParser::KU_CreateMacroContext>(0);
}

CypherParser::KU_CommentOnContext* CypherParser::OC_StatementContext::kU_CommentOn() {
  return getRuleContext<CypherParser::KU_CommentOnContext>(0);
}

CypherParser::KU_TransactionContext* CypherParser::OC_StatementContext::kU_Transaction() {
  return getRuleContext<CypherParser::KU_TransactionContext>(0);
}

CypherParser::KU_ExtensionContext* CypherParser::OC_StatementContext::kU_Extension() {
  return getRuleContext<CypherParser::KU_ExtensionContext>(0);
}

CypherParser::KU_ExportDatabaseContext* CypherParser::OC_StatementContext::kU_ExportDatabase() {
  return getRuleContext<CypherParser::KU_ExportDatabaseContext>(0);
}

CypherParser::KU_ImportDatabaseContext* CypherParser::OC_StatementContext::kU_ImportDatabase() {
  return getRuleContext<CypherParser::KU_ImportDatabaseContext>(0);
}


size_t CypherParser::OC_StatementContext::getRuleIndex() const {
  return CypherParser::RuleOC_Statement;
}


CypherParser::OC_StatementContext* CypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, CypherParser::RuleOC_Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(336);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(324);
      oC_Query();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(325);
      kU_DDL();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(326);
      kU_CopyFrom();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(327);
      kU_CopyFromByColumn();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(328);
      kU_CopyTO();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(329);
      kU_StandaloneCall();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(330);
      kU_CreateMacro();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(331);
      kU_CommentOn();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(332);
      kU_Transaction();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(333);
      kU_Extension();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(334);
      kU_ExportDatabase();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(335);
      kU_ImportDatabase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromContext ------------------------------------------------------------------

CypherParser::KU_CopyFromContext::KU_CopyFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_CopyFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::KU_ColumnNamesContext* CypherParser::KU_CopyFromContext::kU_ColumnNames() {
  return getRuleContext<CypherParser::KU_ColumnNamesContext>(0);
}


size_t CypherParser::KU_CopyFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFrom;
}


CypherParser::KU_CopyFromContext* CypherParser::kU_CopyFrom() {
  KU_CopyFromContext *_localctx = _tracker.createInstance<KU_CopyFromContext>(_ctx, getState());
  enterRule(_localctx, 6, CypherParser::RuleKU_CopyFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(338);
    match(CypherParser::COPY);
    setState(339);
    match(CypherParser::SP);
    setState(340);
    oC_SchemaName();
    setState(349);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(342);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(341);
        match(CypherParser::SP);
      }
      setState(344);
      kU_ColumnNames();
      setState(346);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(345);
        match(CypherParser::SP);
      }
      break;
    }

    case 2: {
      setState(348);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(351);
    match(CypherParser::FROM);
    setState(352);
    match(CypherParser::SP);
    setState(353);
    kU_ScanSource();
    setState(358);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      setState(355);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(354);
        match(CypherParser::SP);
      }
      setState(357);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnNamesContext ------------------------------------------------------------------

CypherParser::KU_ColumnNamesContext::KU_ColumnNamesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_ColumnNamesContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ColumnNamesContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ColumnNamesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ColumnNamesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ColumnNamesContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnNames;
}


CypherParser::KU_ColumnNamesContext* CypherParser::kU_ColumnNames() {
  KU_ColumnNamesContext *_localctx = _tracker.createInstance<KU_ColumnNamesContext>(_ctx, getState());
  enterRule(_localctx, 8, CypherParser::RuleKU_ColumnNames);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(360);
    match(CypherParser::T__1);
    setState(362);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(361);
      match(CypherParser::SP);
    }
    setState(364);
    oC_SchemaName();
    setState(375);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(366);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(365);
          match(CypherParser::SP);
        }
        setState(368);
        match(CypherParser::T__2);
        setState(370);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(369);
          match(CypherParser::SP);
        }
        setState(372);
        oC_SchemaName(); 
      }
      setState(377);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    }
    setState(379);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(378);
      match(CypherParser::SP);
    }
    setState(381);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ScanSourceContext ------------------------------------------------------------------

CypherParser::KU_ScanSourceContext::KU_ScanSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_FilePathsContext* CypherParser::KU_ScanSourceContext::kU_FilePaths() {
  return getRuleContext<CypherParser::KU_FilePathsContext>(0);
}

CypherParser::OC_QueryContext* CypherParser::KU_ScanSourceContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ScanSourceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ScanSourceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::KU_ScanSourceContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_ScanSourceContext::getRuleIndex() const {
  return CypherParser::RuleKU_ScanSource;
}


CypherParser::KU_ScanSourceContext* CypherParser::kU_ScanSource() {
  KU_ScanSourceContext *_localctx = _tracker.createInstance<KU_ScanSourceContext>(_ctx, getState());
  enterRule(_localctx, 10, CypherParser::RuleKU_ScanSource);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(395);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__5:
      case CypherParser::GLOB:
      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 1);
        setState(383);
        kU_FilePaths();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(384);
        match(CypherParser::T__1);
        setState(386);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(385);
          match(CypherParser::SP);
        }
        setState(388);
        oC_Query();
        setState(390);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(389);
          match(CypherParser::SP);
        }
        setState(392);
        match(CypherParser::T__3);
        break;
      }

      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 3);
        setState(394);
        oC_Variable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromByColumnContext ------------------------------------------------------------------

CypherParser::KU_CopyFromByColumnContext::KU_CopyFromByColumnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromByColumnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COLUMN() {
  return getToken(CypherParser::COLUMN, 0);
}


size_t CypherParser::KU_CopyFromByColumnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFromByColumn;
}


CypherParser::KU_CopyFromByColumnContext* CypherParser::kU_CopyFromByColumn() {
  KU_CopyFromByColumnContext *_localctx = _tracker.createInstance<KU_CopyFromByColumnContext>(_ctx, getState());
  enterRule(_localctx, 12, CypherParser::RuleKU_CopyFromByColumn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(397);
    match(CypherParser::COPY);
    setState(398);
    match(CypherParser::SP);
    setState(399);
    oC_SchemaName();
    setState(400);
    match(CypherParser::SP);
    setState(401);
    match(CypherParser::FROM);
    setState(402);
    match(CypherParser::SP);
    setState(403);
    match(CypherParser::T__1);
    setState(405);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(404);
      match(CypherParser::SP);
    }
    setState(407);
    match(CypherParser::StringLiteral);
    setState(418);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
      setState(409);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(408);
        match(CypherParser::SP);
      }
      setState(411);
      match(CypherParser::T__2);
      setState(413);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(412);
        match(CypherParser::SP);
      }
      setState(415);
      match(CypherParser::StringLiteral);
      setState(420);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(421);
    match(CypherParser::T__3);
    setState(422);
    match(CypherParser::SP);
    setState(423);
    match(CypherParser::BY);
    setState(424);
    match(CypherParser::SP);
    setState(425);
    match(CypherParser::COLUMN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyTOContext ------------------------------------------------------------------

CypherParser::KU_CopyTOContext::KU_CopyTOContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyTOContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_QueryContext* CypherParser::KU_CopyTOContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::TO() {
  return getToken(CypherParser::TO, 0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyTOContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_CopyTOContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyTO;
}


CypherParser::KU_CopyTOContext* CypherParser::kU_CopyTO() {
  KU_CopyTOContext *_localctx = _tracker.createInstance<KU_CopyTOContext>(_ctx, getState());
  enterRule(_localctx, 14, CypherParser::RuleKU_CopyTO);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(427);
    match(CypherParser::COPY);
    setState(428);
    match(CypherParser::SP);
    setState(429);
    match(CypherParser::T__1);
    setState(431);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(430);
      match(CypherParser::SP);
    }
    setState(433);
    oC_Query();
    setState(435);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(434);
      match(CypherParser::SP);
    }
    setState(437);
    match(CypherParser::T__3);
    setState(438);
    match(CypherParser::SP);
    setState(439);
    match(CypherParser::TO);
    setState(440);
    match(CypherParser::SP);
    setState(441);
    match(CypherParser::StringLiteral);
    setState(446);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
    case 1: {
      setState(443);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(442);
        match(CypherParser::SP);
      }
      setState(445);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ExportDatabaseContext::KU_ExportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ExportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_ExportDatabaseContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_ExportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ExportDatabase;
}


CypherParser::KU_ExportDatabaseContext* CypherParser::kU_ExportDatabase() {
  KU_ExportDatabaseContext *_localctx = _tracker.createInstance<KU_ExportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 16, CypherParser::RuleKU_ExportDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(448);
    match(CypherParser::EXPORT);
    setState(449);
    match(CypherParser::SP);
    setState(450);
    match(CypherParser::DATABASE);
    setState(451);
    match(CypherParser::SP);
    setState(452);
    match(CypherParser::StringLiteral);
    setState(457);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      setState(454);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(453);
        match(CypherParser::SP);
      }
      setState(456);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ImportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ImportDatabaseContext::KU_ImportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ImportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_ImportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ImportDatabase;
}


CypherParser::KU_ImportDatabaseContext* CypherParser::kU_ImportDatabase() {
  KU_ImportDatabaseContext *_localctx = _tracker.createInstance<KU_ImportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 18, CypherParser::RuleKU_ImportDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(459);
    match(CypherParser::IMPORT);
    setState(460);
    match(CypherParser::SP);
    setState(461);
    match(CypherParser::DATABASE);
    setState(462);
    match(CypherParser::SP);
    setState(463);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StandaloneCallContext ------------------------------------------------------------------

CypherParser::KU_StandaloneCallContext::KU_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StandaloneCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StandaloneCallContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_StandaloneCallContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}


size_t CypherParser::KU_StandaloneCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_StandaloneCall;
}


CypherParser::KU_StandaloneCallContext* CypherParser::kU_StandaloneCall() {
  KU_StandaloneCallContext *_localctx = _tracker.createInstance<KU_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 20, CypherParser::RuleKU_StandaloneCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(465);
    match(CypherParser::CALL);
    setState(466);
    match(CypherParser::SP);
    setState(467);
    oC_SymbolicName();
    setState(469);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(468);
      match(CypherParser::SP);
    }
    setState(471);
    match(CypherParser::T__4);
    setState(473);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(472);
      match(CypherParser::SP);
    }
    setState(475);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CommentOnContext ------------------------------------------------------------------

CypherParser::KU_CommentOnContext::KU_CommentOnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::COMMENT_() {
  return getToken(CypherParser::COMMENT_, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CommentOnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::ON() {
  return getToken(CypherParser::ON, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CommentOnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_CommentOnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CommentOn;
}


CypherParser::KU_CommentOnContext* CypherParser::kU_CommentOn() {
  KU_CommentOnContext *_localctx = _tracker.createInstance<KU_CommentOnContext>(_ctx, getState());
  enterRule(_localctx, 22, CypherParser::RuleKU_CommentOn);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(477);
    match(CypherParser::COMMENT_);
    setState(478);
    match(CypherParser::SP);
    setState(479);
    match(CypherParser::ON);
    setState(480);
    match(CypherParser::SP);
    setState(481);
    match(CypherParser::TABLE);
    setState(482);
    match(CypherParser::SP);
    setState(483);
    oC_SchemaName();
    setState(484);
    match(CypherParser::SP);
    setState(485);
    match(CypherParser::IS);
    setState(486);
    match(CypherParser::SP);
    setState(487);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateMacroContext ------------------------------------------------------------------

CypherParser::KU_CreateMacroContext::KU_CreateMacroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateMacroContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::MACRO() {
  return getToken(CypherParser::MACRO, 0);
}

CypherParser::OC_FunctionNameContext* CypherParser::KU_CreateMacroContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_CreateMacroContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::KU_PositionalArgsContext* CypherParser::KU_CreateMacroContext::kU_PositionalArgs() {
  return getRuleContext<CypherParser::KU_PositionalArgsContext>(0);
}

std::vector<CypherParser::KU_DefaultArgContext *> CypherParser::KU_CreateMacroContext::kU_DefaultArg() {
  return getRuleContexts<CypherParser::KU_DefaultArgContext>();
}

CypherParser::KU_DefaultArgContext* CypherParser::KU_CreateMacroContext::kU_DefaultArg(size_t i) {
  return getRuleContext<CypherParser::KU_DefaultArgContext>(i);
}


size_t CypherParser::KU_CreateMacroContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateMacro;
}


CypherParser::KU_CreateMacroContext* CypherParser::kU_CreateMacro() {
  KU_CreateMacroContext *_localctx = _tracker.createInstance<KU_CreateMacroContext>(_ctx, getState());
  enterRule(_localctx, 24, CypherParser::RuleKU_CreateMacro);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(489);
    match(CypherParser::CREATE);
    setState(490);
    match(CypherParser::SP);
    setState(491);
    match(CypherParser::MACRO);
    setState(492);
    match(CypherParser::SP);
    setState(493);
    oC_FunctionName();
    setState(495);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(494);
      match(CypherParser::SP);
    }
    setState(497);
    match(CypherParser::T__1);
    setState(499);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      setState(498);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(502);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      setState(501);
      kU_PositionalArgs();
      break;
    }

    default:
      break;
    }
    setState(505);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      setState(504);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(508);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & 17826753) != 0) || ((((_la - 118) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 118)) & 302256385) != 0)) {
      setState(507);
      kU_DefaultArg();
    }
    setState(520);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(511);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(510);
          match(CypherParser::SP);
        }
        setState(513);
        match(CypherParser::T__2);
        setState(515);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(514);
          match(CypherParser::SP);
        }
        setState(517);
        kU_DefaultArg(); 
      }
      setState(522);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx);
    }
    setState(524);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(523);
      match(CypherParser::SP);
    }
    setState(526);
    match(CypherParser::T__3);
    setState(527);
    match(CypherParser::SP);
    setState(528);
    match(CypherParser::AS);
    setState(529);
    match(CypherParser::SP);
    setState(530);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PositionalArgsContext ------------------------------------------------------------------

CypherParser::KU_PositionalArgsContext::KU_PositionalArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_PositionalArgsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_PositionalArgsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PositionalArgsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PositionalArgsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PositionalArgsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PositionalArgs;
}


CypherParser::KU_PositionalArgsContext* CypherParser::kU_PositionalArgs() {
  KU_PositionalArgsContext *_localctx = _tracker.createInstance<KU_PositionalArgsContext>(_ctx, getState());
  enterRule(_localctx, 26, CypherParser::RuleKU_PositionalArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(532);
    oC_SymbolicName();
    setState(543);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(534);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(533);
          match(CypherParser::SP);
        }
        setState(536);
        match(CypherParser::T__2);
        setState(538);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(537);
          match(CypherParser::SP);
        }
        setState(540);
        oC_SymbolicName(); 
      }
      setState(545);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultArgContext ------------------------------------------------------------------

CypherParser::KU_DefaultArgContext::KU_DefaultArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DefaultArgContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_DefaultArgContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DefaultArgContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_DefaultArgContext::getRuleIndex() const {
  return CypherParser::RuleKU_DefaultArg;
}


CypherParser::KU_DefaultArgContext* CypherParser::kU_DefaultArg() {
  KU_DefaultArgContext *_localctx = _tracker.createInstance<KU_DefaultArgContext>(_ctx, getState());
  enterRule(_localctx, 28, CypherParser::RuleKU_DefaultArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(546);
    oC_SymbolicName();
    setState(548);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(547);
      match(CypherParser::SP);
    }
    setState(550);
    match(CypherParser::COLON);
    setState(551);
    match(CypherParser::T__4);
    setState(553);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(552);
      match(CypherParser::SP);
    }
    setState(555);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FilePathsContext ------------------------------------------------------------------

CypherParser::KU_FilePathsContext::KU_FilePathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::GLOB() {
  return getToken(CypherParser::GLOB, 0);
}


size_t CypherParser::KU_FilePathsContext::getRuleIndex() const {
  return CypherParser::RuleKU_FilePaths;
}


CypherParser::KU_FilePathsContext* CypherParser::kU_FilePaths() {
  KU_FilePathsContext *_localctx = _tracker.createInstance<KU_FilePathsContext>(_ctx, getState());
  enterRule(_localctx, 30, CypherParser::RuleKU_FilePaths);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(590);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__5: {
        enterOuterAlt(_localctx, 1);
        setState(557);
        match(CypherParser::T__5);
        setState(559);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(558);
          match(CypherParser::SP);
        }
        setState(561);
        match(CypherParser::StringLiteral);
        setState(572);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
          setState(563);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(562);
            match(CypherParser::SP);
          }
          setState(565);
          match(CypherParser::T__2);
          setState(567);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(566);
            match(CypherParser::SP);
          }
          setState(569);
          match(CypherParser::StringLiteral);
          setState(574);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(575);
        match(CypherParser::T__6);
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(576);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::GLOB: {
        enterOuterAlt(_localctx, 3);
        setState(577);
        match(CypherParser::GLOB);
        setState(579);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(578);
          match(CypherParser::SP);
        }
        setState(581);
        match(CypherParser::T__1);
        setState(583);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(582);
          match(CypherParser::SP);
        }
        setState(585);
        match(CypherParser::StringLiteral);
        setState(587);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(586);
          match(CypherParser::SP);
        }
        setState(589);
        match(CypherParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ParsingOptionsContext ------------------------------------------------------------------

CypherParser::KU_ParsingOptionsContext::KU_ParsingOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ParsingOptionContext *> CypherParser::KU_ParsingOptionsContext::kU_ParsingOption() {
  return getRuleContexts<CypherParser::KU_ParsingOptionContext>();
}

CypherParser::KU_ParsingOptionContext* CypherParser::KU_ParsingOptionsContext::kU_ParsingOption(size_t i) {
  return getRuleContext<CypherParser::KU_ParsingOptionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ParsingOptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ParsingOptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ParsingOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_ParsingOptions;
}


CypherParser::KU_ParsingOptionsContext* CypherParser::kU_ParsingOptions() {
  KU_ParsingOptionsContext *_localctx = _tracker.createInstance<KU_ParsingOptionsContext>(_ctx, getState());
  enterRule(_localctx, 32, CypherParser::RuleKU_ParsingOptions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(592);
    match(CypherParser::T__1);
    setState(594);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(593);
      match(CypherParser::SP);
    }
    setState(596);
    kU_ParsingOption();
    setState(607);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(598);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(597);
          match(CypherParser::SP);
        }
        setState(600);
        match(CypherParser::T__2);
        setState(602);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(601);
          match(CypherParser::SP);
        }
        setState(604);
        kU_ParsingOption(); 
      }
      setState(609);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx);
    }
    setState(611);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(610);
      match(CypherParser::SP);
    }
    setState(613);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ParsingOptionContext ------------------------------------------------------------------

CypherParser::KU_ParsingOptionContext::KU_ParsingOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_ParsingOptionContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_ParsingOptionContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ParsingOptionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ParsingOptionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ParsingOptionContext::getRuleIndex() const {
  return CypherParser::RuleKU_ParsingOption;
}


CypherParser::KU_ParsingOptionContext* CypherParser::kU_ParsingOption() {
  KU_ParsingOptionContext *_localctx = _tracker.createInstance<KU_ParsingOptionContext>(_ctx, getState());
  enterRule(_localctx, 34, CypherParser::RuleKU_ParsingOption);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(615);
    oC_SymbolicName();
    setState(617);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(616);
      match(CypherParser::SP);
    }
    setState(619);
    match(CypherParser::T__4);
    setState(621);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(620);
      match(CypherParser::SP);
    }
    setState(623);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DDLContext ------------------------------------------------------------------

CypherParser::KU_DDLContext::KU_DDLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_CreateNodeTableContext* CypherParser::KU_DDLContext::kU_CreateNodeTable() {
  return getRuleContext<CypherParser::KU_CreateNodeTableContext>(0);
}

CypherParser::KU_CreateRelTableContext* CypherParser::KU_DDLContext::kU_CreateRelTable() {
  return getRuleContext<CypherParser::KU_CreateRelTableContext>(0);
}

CypherParser::KU_CreateRelTableGroupContext* CypherParser::KU_DDLContext::kU_CreateRelTableGroup() {
  return getRuleContext<CypherParser::KU_CreateRelTableGroupContext>(0);
}

CypherParser::KU_CreateRdfGraphContext* CypherParser::KU_DDLContext::kU_CreateRdfGraph() {
  return getRuleContext<CypherParser::KU_CreateRdfGraphContext>(0);
}

CypherParser::KU_DropTableContext* CypherParser::KU_DDLContext::kU_DropTable() {
  return getRuleContext<CypherParser::KU_DropTableContext>(0);
}

CypherParser::KU_AlterTableContext* CypherParser::KU_DDLContext::kU_AlterTable() {
  return getRuleContext<CypherParser::KU_AlterTableContext>(0);
}


size_t CypherParser::KU_DDLContext::getRuleIndex() const {
  return CypherParser::RuleKU_DDL;
}


CypherParser::KU_DDLContext* CypherParser::kU_DDL() {
  KU_DDLContext *_localctx = _tracker.createInstance<KU_DDLContext>(_ctx, getState());
  enterRule(_localctx, 36, CypherParser::RuleKU_DDL);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(631);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(625);
      kU_CreateNodeTable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(626);
      kU_CreateRelTable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(627);
      kU_CreateRelTableGroup();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(628);
      kU_CreateRdfGraph();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(629);
      kU_DropTable();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(630);
      kU_AlterTable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeTableContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeTableContext::KU_CreateNodeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateNodeTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateNodeTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_CreateNodeConstraintContext* CypherParser::KU_CreateNodeTableContext::kU_CreateNodeConstraint() {
  return getRuleContext<CypherParser::KU_CreateNodeConstraintContext>(0);
}


size_t CypherParser::KU_CreateNodeTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeTable;
}


CypherParser::KU_CreateNodeTableContext* CypherParser::kU_CreateNodeTable() {
  KU_CreateNodeTableContext *_localctx = _tracker.createInstance<KU_CreateNodeTableContext>(_ctx, getState());
  enterRule(_localctx, 38, CypherParser::RuleKU_CreateNodeTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(633);
    match(CypherParser::CREATE);
    setState(634);
    match(CypherParser::SP);
    setState(635);
    match(CypherParser::NODE);
    setState(636);
    match(CypherParser::SP);
    setState(637);
    match(CypherParser::TABLE);
    setState(638);
    match(CypherParser::SP);
    setState(639);
    oC_SchemaName();
    setState(641);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(640);
      match(CypherParser::SP);
    }
    setState(643);
    match(CypherParser::T__1);
    setState(645);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(644);
      match(CypherParser::SP);
    }
    setState(647);
    kU_PropertyDefinitions();
    setState(649);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(648);
      match(CypherParser::SP);
    }

    setState(651);
    match(CypherParser::T__2);
    setState(653);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(652);
      match(CypherParser::SP);
    }
    setState(655);
    kU_CreateNodeConstraint();
    setState(658);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(657);
      match(CypherParser::SP);
    }
    setState(660);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableContext::KU_CreateRelTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableContext::kU_RelTableConnection() {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTable;
}


CypherParser::KU_CreateRelTableContext* CypherParser::kU_CreateRelTable() {
  KU_CreateRelTableContext *_localctx = _tracker.createInstance<KU_CreateRelTableContext>(_ctx, getState());
  enterRule(_localctx, 40, CypherParser::RuleKU_CreateRelTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(662);
    match(CypherParser::CREATE);
    setState(663);
    match(CypherParser::SP);
    setState(664);
    match(CypherParser::REL);
    setState(665);
    match(CypherParser::SP);
    setState(666);
    match(CypherParser::TABLE);
    setState(667);
    match(CypherParser::SP);
    setState(668);
    oC_SchemaName();
    setState(670);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(669);
      match(CypherParser::SP);
    }
    setState(672);
    match(CypherParser::T__1);
    setState(674);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(673);
      match(CypherParser::SP);
    }
    setState(676);
    kU_RelTableConnection();
    setState(678);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(677);
      match(CypherParser::SP);
    }
    setState(688);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      setState(680);
      match(CypherParser::T__2);
      setState(682);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(681);
        match(CypherParser::SP);
      }
      setState(684);
      kU_PropertyDefinitions();
      setState(686);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(685);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(698);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
      setState(690);
      match(CypherParser::T__2);
      setState(692);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(691);
        match(CypherParser::SP);
      }
      setState(694);
      oC_SymbolicName();
      setState(696);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(695);
        match(CypherParser::SP);
      }
    }
    setState(700);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableGroupContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableGroupContext::KU_CreateRelTableGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableGroupContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::GROUP() {
  return getToken(CypherParser::GROUP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

std::vector<CypherParser::KU_RelTableConnectionContext *> CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection() {
  return getRuleContexts<CypherParser::KU_RelTableConnectionContext>();
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection(size_t i) {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(i);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableGroupContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableGroupContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTableGroup;
}


CypherParser::KU_CreateRelTableGroupContext* CypherParser::kU_CreateRelTableGroup() {
  KU_CreateRelTableGroupContext *_localctx = _tracker.createInstance<KU_CreateRelTableGroupContext>(_ctx, getState());
  enterRule(_localctx, 42, CypherParser::RuleKU_CreateRelTableGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(702);
    match(CypherParser::CREATE);
    setState(703);
    match(CypherParser::SP);
    setState(704);
    match(CypherParser::REL);
    setState(705);
    match(CypherParser::SP);
    setState(706);
    match(CypherParser::TABLE);
    setState(707);
    match(CypherParser::SP);
    setState(708);
    match(CypherParser::GROUP);
    setState(709);
    match(CypherParser::SP);
    setState(710);
    oC_SchemaName();
    setState(712);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(711);
      match(CypherParser::SP);
    }
    setState(714);
    match(CypherParser::T__1);
    setState(716);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(715);
      match(CypherParser::SP);
    }
    setState(718);
    kU_RelTableConnection();
    setState(720);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(719);
      match(CypherParser::SP);
    }
    setState(727); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(722);
              match(CypherParser::T__2);
              setState(724);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(723);
                match(CypherParser::SP);
              }
              setState(726);
              kU_RelTableConnection();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(729); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(732);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(731);
      match(CypherParser::SP);
    }
    setState(742);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      setState(734);
      match(CypherParser::T__2);
      setState(736);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(735);
        match(CypherParser::SP);
      }
      setState(738);
      kU_PropertyDefinitions();
      setState(740);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(739);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(752);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
      setState(744);
      match(CypherParser::T__2);
      setState(746);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(745);
        match(CypherParser::SP);
      }
      setState(748);
      oC_SymbolicName();
      setState(750);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(749);
        match(CypherParser::SP);
      }
    }
    setState(754);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RelTableConnectionContext ------------------------------------------------------------------

CypherParser::KU_RelTableConnectionContext::KU_RelTableConnectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RelTableConnectionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_RelTableConnectionContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RelTableConnectionContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RelTableConnectionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RelTableConnection;
}


CypherParser::KU_RelTableConnectionContext* CypherParser::kU_RelTableConnection() {
  KU_RelTableConnectionContext *_localctx = _tracker.createInstance<KU_RelTableConnectionContext>(_ctx, getState());
  enterRule(_localctx, 44, CypherParser::RuleKU_RelTableConnection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(756);
    match(CypherParser::FROM);
    setState(757);
    match(CypherParser::SP);
    setState(758);
    oC_SchemaName();
    setState(759);
    match(CypherParser::SP);
    setState(760);
    match(CypherParser::TO);
    setState(761);
    match(CypherParser::SP);
    setState(762);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRdfGraphContext ------------------------------------------------------------------

CypherParser::KU_CreateRdfGraphContext::KU_CreateRdfGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRdfGraphContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRdfGraphContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_CreateRdfGraphContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRdfGraph;
}


CypherParser::KU_CreateRdfGraphContext* CypherParser::kU_CreateRdfGraph() {
  KU_CreateRdfGraphContext *_localctx = _tracker.createInstance<KU_CreateRdfGraphContext>(_ctx, getState());
  enterRule(_localctx, 46, CypherParser::RuleKU_CreateRdfGraph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(764);
    match(CypherParser::CREATE);
    setState(765);
    match(CypherParser::SP);
    setState(766);
    match(CypherParser::RDFGRAPH);
    setState(767);
    match(CypherParser::SP);
    setState(768);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropTableContext ------------------------------------------------------------------

CypherParser::KU_DropTableContext::KU_DropTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropTableContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DropTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DropTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DropTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DropTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_DropTableContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}


size_t CypherParser::KU_DropTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropTable;
}


CypherParser::KU_DropTableContext* CypherParser::kU_DropTable() {
  KU_DropTableContext *_localctx = _tracker.createInstance<KU_DropTableContext>(_ctx, getState());
  enterRule(_localctx, 48, CypherParser::RuleKU_DropTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(770);
    match(CypherParser::DROP);
    setState(771);
    match(CypherParser::SP);
    setState(772);
    _la = _input->LA(1);
    if (!(_la == CypherParser::TABLE

    || _la == CypherParser::RDFGRAPH)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(773);
    match(CypherParser::SP);
    setState(774);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterTableContext ------------------------------------------------------------------

CypherParser::KU_AlterTableContext::KU_AlterTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AlterTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AlterTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_AlterOptionsContext* CypherParser::KU_AlterTableContext::kU_AlterOptions() {
  return getRuleContext<CypherParser::KU_AlterOptionsContext>(0);
}


size_t CypherParser::KU_AlterTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterTable;
}


CypherParser::KU_AlterTableContext* CypherParser::kU_AlterTable() {
  KU_AlterTableContext *_localctx = _tracker.createInstance<KU_AlterTableContext>(_ctx, getState());
  enterRule(_localctx, 50, CypherParser::RuleKU_AlterTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(776);
    match(CypherParser::ALTER);
    setState(777);
    match(CypherParser::SP);
    setState(778);
    match(CypherParser::TABLE);
    setState(779);
    match(CypherParser::SP);
    setState(780);
    oC_SchemaName();
    setState(781);
    match(CypherParser::SP);
    setState(782);
    kU_AlterOptions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterOptionsContext ------------------------------------------------------------------

CypherParser::KU_AlterOptionsContext::KU_AlterOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_AddPropertyContext* CypherParser::KU_AlterOptionsContext::kU_AddProperty() {
  return getRuleContext<CypherParser::KU_AddPropertyContext>(0);
}

CypherParser::KU_DropPropertyContext* CypherParser::KU_AlterOptionsContext::kU_DropProperty() {
  return getRuleContext<CypherParser::KU_DropPropertyContext>(0);
}

CypherParser::KU_RenameTableContext* CypherParser::KU_AlterOptionsContext::kU_RenameTable() {
  return getRuleContext<CypherParser::KU_RenameTableContext>(0);
}

CypherParser::KU_RenamePropertyContext* CypherParser::KU_AlterOptionsContext::kU_RenameProperty() {
  return getRuleContext<CypherParser::KU_RenamePropertyContext>(0);
}


size_t CypherParser::KU_AlterOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterOptions;
}


CypherParser::KU_AlterOptionsContext* CypherParser::kU_AlterOptions() {
  KU_AlterOptionsContext *_localctx = _tracker.createInstance<KU_AlterOptionsContext>(_ctx, getState());
  enterRule(_localctx, 52, CypherParser::RuleKU_AlterOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(788);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(784);
      kU_AddProperty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(785);
      kU_DropProperty();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(786);
      kU_RenameTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(787);
      kU_RenameProperty();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddPropertyContext ------------------------------------------------------------------

CypherParser::KU_AddPropertyContext::KU_AddPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AddPropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_AddPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_AddPropertyContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::DEFAULT() {
  return getToken(CypherParser::DEFAULT, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_AddPropertyContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_AddPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddProperty;
}


CypherParser::KU_AddPropertyContext* CypherParser::kU_AddProperty() {
  KU_AddPropertyContext *_localctx = _tracker.createInstance<KU_AddPropertyContext>(_ctx, getState());
  enterRule(_localctx, 54, CypherParser::RuleKU_AddProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(790);
    match(CypherParser::ADD);
    setState(791);
    match(CypherParser::SP);
    setState(792);
    oC_PropertyKeyName();
    setState(793);
    match(CypherParser::SP);
    setState(794);
    kU_DataType(0);
    setState(799);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
    case 1: {
      setState(795);
      match(CypherParser::SP);
      setState(796);
      match(CypherParser::DEFAULT);
      setState(797);
      match(CypherParser::SP);
      setState(798);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropPropertyContext ------------------------------------------------------------------

CypherParser::KU_DropPropertyContext::KU_DropPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_DropPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_DropPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropProperty;
}


CypherParser::KU_DropPropertyContext* CypherParser::kU_DropProperty() {
  KU_DropPropertyContext *_localctx = _tracker.createInstance<KU_DropPropertyContext>(_ctx, getState());
  enterRule(_localctx, 56, CypherParser::RuleKU_DropProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(801);
    match(CypherParser::DROP);
    setState(802);
    match(CypherParser::SP);
    setState(803);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenameTableContext ------------------------------------------------------------------

CypherParser::KU_RenameTableContext::KU_RenameTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenameTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::TO() {
  return getToken(CypherParser::TO, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RenameTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_RenameTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameTable;
}


CypherParser::KU_RenameTableContext* CypherParser::kU_RenameTable() {
  KU_RenameTableContext *_localctx = _tracker.createInstance<KU_RenameTableContext>(_ctx, getState());
  enterRule(_localctx, 58, CypherParser::RuleKU_RenameTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(805);
    match(CypherParser::RENAME);
    setState(806);
    match(CypherParser::SP);
    setState(807);
    match(CypherParser::TO);
    setState(808);
    match(CypherParser::SP);
    setState(809);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenamePropertyContext ------------------------------------------------------------------

CypherParser::KU_RenamePropertyContext::KU_RenamePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenamePropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RenamePropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameProperty;
}


CypherParser::KU_RenamePropertyContext* CypherParser::kU_RenameProperty() {
  KU_RenamePropertyContext *_localctx = _tracker.createInstance<KU_RenamePropertyContext>(_ctx, getState());
  enterRule(_localctx, 60, CypherParser::RuleKU_RenameProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(811);
    match(CypherParser::RENAME);
    setState(812);
    match(CypherParser::SP);
    setState(813);
    oC_PropertyKeyName();
    setState(814);
    match(CypherParser::SP);
    setState(815);
    match(CypherParser::TO);
    setState(816);
    match(CypherParser::SP);
    setState(817);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsContext::KU_PropertyDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionContext *> CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionContext>();
}

CypherParser::KU_PropertyDefinitionContext* CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitions;
}


CypherParser::KU_PropertyDefinitionsContext* CypherParser::kU_PropertyDefinitions() {
  KU_PropertyDefinitionsContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 62, CypherParser::RuleKU_PropertyDefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(819);
    kU_PropertyDefinition();
    setState(830);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(821);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(820);
          match(CypherParser::SP);
        }
        setState(823);
        match(CypherParser::T__2);
        setState(825);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(824);
          match(CypherParser::SP);
        }
        setState(827);
        kU_PropertyDefinition(); 
      }
      setState(832);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionContext::KU_PropertyDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertyDefinitionContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_PropertyDefinitionContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinition;
}


CypherParser::KU_PropertyDefinitionContext* CypherParser::kU_PropertyDefinition() {
  KU_PropertyDefinitionContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 64, CypherParser::RuleKU_PropertyDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(833);
    oC_PropertyKeyName();
    setState(834);
    match(CypherParser::SP);
    setState(835);
    kU_DataType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeConstraintContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeConstraintContext::KU_CreateNodeConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::PRIMARY() {
  return getToken(CypherParser::PRIMARY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeConstraintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_CreateNodeConstraintContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_CreateNodeConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeConstraint;
}


CypherParser::KU_CreateNodeConstraintContext* CypherParser::kU_CreateNodeConstraint() {
  KU_CreateNodeConstraintContext *_localctx = _tracker.createInstance<KU_CreateNodeConstraintContext>(_ctx, getState());
  enterRule(_localctx, 66, CypherParser::RuleKU_CreateNodeConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(837);
    match(CypherParser::PRIMARY);
    setState(838);
    match(CypherParser::SP);
    setState(839);
    match(CypherParser::KEY);
    setState(841);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(840);
      match(CypherParser::SP);
    }
    setState(843);
    match(CypherParser::T__1);
    setState(845);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(844);
      match(CypherParser::SP);
    }
    setState(847);
    oC_PropertyKeyName();
    setState(849);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(848);
      match(CypherParser::SP);
    }
    setState(851);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DataTypeContext ------------------------------------------------------------------

CypherParser::KU_DataTypeContext::KU_DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DataTypeContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_DataTypeContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DataTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::KU_DataTypeContext *> CypherParser::KU_DataTypeContext::kU_DataType() {
  return getRuleContexts<CypherParser::KU_DataTypeContext>();
}

CypherParser::KU_DataTypeContext* CypherParser::KU_DataTypeContext::kU_DataType(size_t i) {
  return getRuleContext<CypherParser::KU_DataTypeContext>(i);
}

CypherParser::KU_ListIdentifiersContext* CypherParser::KU_DataTypeContext::kU_ListIdentifiers() {
  return getRuleContext<CypherParser::KU_ListIdentifiersContext>(0);
}


size_t CypherParser::KU_DataTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_DataType;
}



CypherParser::KU_DataTypeContext* CypherParser::kU_DataType() {
   return kU_DataType(0);
}

CypherParser::KU_DataTypeContext* CypherParser::kU_DataType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_DataTypeContext *_localctx = _tracker.createInstance<KU_DataTypeContext>(_ctx, parentState);
  CypherParser::KU_DataTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 68;
  enterRecursionRule(_localctx, 68, CypherParser::RuleKU_DataType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(905);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx)) {
    case 1: {
      setState(854);
      oC_SymbolicName();
      break;
    }

    case 2: {
      setState(855);
      match(CypherParser::UNION);
      setState(857);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(856);
        match(CypherParser::SP);
      }
      setState(859);
      match(CypherParser::T__1);
      setState(861);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(860);
        match(CypherParser::SP);
      }
      setState(863);
      kU_PropertyDefinitions();
      setState(865);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(864);
        match(CypherParser::SP);
      }
      setState(867);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      setState(869);
      oC_SymbolicName();
      setState(871);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(870);
        match(CypherParser::SP);
      }
      setState(873);
      match(CypherParser::T__1);
      setState(875);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(874);
        match(CypherParser::SP);
      }
      setState(877);
      kU_PropertyDefinitions();
      setState(879);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(878);
        match(CypherParser::SP);
      }
      setState(881);
      match(CypherParser::T__3);
      break;
    }

    case 4: {
      setState(883);
      oC_SymbolicName();
      setState(885);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(884);
        match(CypherParser::SP);
      }
      setState(887);
      match(CypherParser::T__1);
      setState(889);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(888);
        match(CypherParser::SP);
      }
      setState(891);
      kU_DataType(0);
      setState(893);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(892);
        match(CypherParser::SP);
      }
      setState(895);
      match(CypherParser::T__2);
      setState(897);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(896);
        match(CypherParser::SP);
      }
      setState(899);
      kU_DataType(0);
      setState(901);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(900);
        match(CypherParser::SP);
      }
      setState(903);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(911);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<KU_DataTypeContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleKU_DataType);
        setState(907);

        if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
        setState(908);
        kU_ListIdentifiers(); 
      }
      setState(913);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- KU_ListIdentifiersContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifiersContext::KU_ListIdentifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ListIdentifierContext *> CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier() {
  return getRuleContexts<CypherParser::KU_ListIdentifierContext>();
}

CypherParser::KU_ListIdentifierContext* CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier(size_t i) {
  return getRuleContext<CypherParser::KU_ListIdentifierContext>(i);
}


size_t CypherParser::KU_ListIdentifiersContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifiers;
}


CypherParser::KU_ListIdentifiersContext* CypherParser::kU_ListIdentifiers() {
  KU_ListIdentifiersContext *_localctx = _tracker.createInstance<KU_ListIdentifiersContext>(_ctx, getState());
  enterRule(_localctx, 70, CypherParser::RuleKU_ListIdentifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(914);
    kU_ListIdentifier();
    setState(918);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(915);
        kU_ListIdentifier(); 
      }
      setState(920);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListIdentifierContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifierContext::KU_ListIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_ListIdentifierContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::KU_ListIdentifierContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifier;
}


CypherParser::KU_ListIdentifierContext* CypherParser::kU_ListIdentifier() {
  KU_ListIdentifierContext *_localctx = _tracker.createInstance<KU_ListIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 72, CypherParser::RuleKU_ListIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(921);
    match(CypherParser::T__5);
    setState(923);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DecimalInteger) {
      setState(922);
      oC_IntegerLiteral();
    }
    setState(925);
    match(CypherParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnyCypherOptionContext ------------------------------------------------------------------

CypherParser::OC_AnyCypherOptionContext::OC_AnyCypherOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExplainContext* CypherParser::OC_AnyCypherOptionContext::oC_Explain() {
  return getRuleContext<CypherParser::OC_ExplainContext>(0);
}

CypherParser::OC_ProfileContext* CypherParser::OC_AnyCypherOptionContext::oC_Profile() {
  return getRuleContext<CypherParser::OC_ProfileContext>(0);
}


size_t CypherParser::OC_AnyCypherOptionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnyCypherOption;
}


CypherParser::OC_AnyCypherOptionContext* CypherParser::oC_AnyCypherOption() {
  OC_AnyCypherOptionContext *_localctx = _tracker.createInstance<OC_AnyCypherOptionContext>(_ctx, getState());
  enterRule(_localctx, 74, CypherParser::RuleOC_AnyCypherOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(929);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::EXPLAIN: {
        enterOuterAlt(_localctx, 1);
        setState(927);
        oC_Explain();
        break;
      }

      case CypherParser::PROFILE: {
        enterOuterAlt(_localctx, 2);
        setState(928);
        oC_Profile();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplainContext ------------------------------------------------------------------

CypherParser::OC_ExplainContext::OC_ExplainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExplainContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}


size_t CypherParser::OC_ExplainContext::getRuleIndex() const {
  return CypherParser::RuleOC_Explain;
}


CypherParser::OC_ExplainContext* CypherParser::oC_Explain() {
  OC_ExplainContext *_localctx = _tracker.createInstance<OC_ExplainContext>(_ctx, getState());
  enterRule(_localctx, 76, CypherParser::RuleOC_Explain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(931);
    match(CypherParser::EXPLAIN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProfileContext ------------------------------------------------------------------

CypherParser::OC_ProfileContext::OC_ProfileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProfileContext::PROFILE() {
  return getToken(CypherParser::PROFILE, 0);
}


size_t CypherParser::OC_ProfileContext::getRuleIndex() const {
  return CypherParser::RuleOC_Profile;
}


CypherParser::OC_ProfileContext* CypherParser::oC_Profile() {
  OC_ProfileContext *_localctx = _tracker.createInstance<OC_ProfileContext>(_ctx, getState());
  enterRule(_localctx, 78, CypherParser::RuleOC_Profile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(933);
    match(CypherParser::PROFILE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_TransactionContext ------------------------------------------------------------------

CypherParser::KU_TransactionContext::KU_TransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_TransactionContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_TransactionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ONLY() {
  return getToken(CypherParser::ONLY, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT_SKIP_CHECKPOINT() {
  return getToken(CypherParser::COMMIT_SKIP_CHECKPOINT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK_SKIP_CHECKPOINT() {
  return getToken(CypherParser::ROLLBACK_SKIP_CHECKPOINT, 0);
}


size_t CypherParser::KU_TransactionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Transaction;
}


CypherParser::KU_TransactionContext* CypherParser::kU_Transaction() {
  KU_TransactionContext *_localctx = _tracker.createInstance<KU_TransactionContext>(_ctx, getState());
  enterRule(_localctx, 80, CypherParser::RuleKU_Transaction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(949);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(935);
      match(CypherParser::BEGIN);
      setState(936);
      match(CypherParser::SP);
      setState(937);
      match(CypherParser::TRANSACTION);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(938);
      match(CypherParser::BEGIN);
      setState(939);
      match(CypherParser::SP);
      setState(940);
      match(CypherParser::TRANSACTION);
      setState(941);
      match(CypherParser::SP);
      setState(942);
      match(CypherParser::READ);
      setState(943);
      match(CypherParser::SP);
      setState(944);
      match(CypherParser::ONLY);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(945);
      match(CypherParser::COMMIT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(946);
      match(CypherParser::COMMIT_SKIP_CHECKPOINT);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(947);
      match(CypherParser::ROLLBACK);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(948);
      match(CypherParser::ROLLBACK_SKIP_CHECKPOINT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExtensionContext ------------------------------------------------------------------

CypherParser::KU_ExtensionContext::KU_ExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LoadExtensionContext* CypherParser::KU_ExtensionContext::kU_LoadExtension() {
  return getRuleContext<CypherParser::KU_LoadExtensionContext>(0);
}

CypherParser::KU_InstallExtensionContext* CypherParser::KU_ExtensionContext::kU_InstallExtension() {
  return getRuleContext<CypherParser::KU_InstallExtensionContext>(0);
}


size_t CypherParser::KU_ExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Extension;
}


CypherParser::KU_ExtensionContext* CypherParser::kU_Extension() {
  KU_ExtensionContext *_localctx = _tracker.createInstance<KU_ExtensionContext>(_ctx, getState());
  enterRule(_localctx, 82, CypherParser::RuleKU_Extension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(953);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 1);
        setState(951);
        kU_LoadExtension();
        break;
      }

      case CypherParser::INSTALL: {
        enterOuterAlt(_localctx, 2);
        setState(952);
        kU_InstallExtension();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadExtensionContext ------------------------------------------------------------------

CypherParser::KU_LoadExtensionContext::KU_LoadExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadExtensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_LoadExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_LoadExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadExtension;
}


CypherParser::KU_LoadExtensionContext* CypherParser::kU_LoadExtension() {
  KU_LoadExtensionContext *_localctx = _tracker.createInstance<KU_LoadExtensionContext>(_ctx, getState());
  enterRule(_localctx, 84, CypherParser::RuleKU_LoadExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(955);
    match(CypherParser::LOAD);
    setState(956);
    match(CypherParser::SP);
    setState(957);
    match(CypherParser::EXTENSION);
    setState(958);
    match(CypherParser::SP);
    setState(961);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::StringLiteral: {
        setState(959);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(960);
        oC_Variable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InstallExtensionContext ------------------------------------------------------------------

CypherParser::KU_InstallExtensionContext::KU_InstallExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::INSTALL() {
  return getToken(CypherParser::INSTALL, 0);
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_InstallExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_InstallExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_InstallExtension;
}


CypherParser::KU_InstallExtensionContext* CypherParser::kU_InstallExtension() {
  KU_InstallExtensionContext *_localctx = _tracker.createInstance<KU_InstallExtensionContext>(_ctx, getState());
  enterRule(_localctx, 86, CypherParser::RuleKU_InstallExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(963);
    match(CypherParser::INSTALL);
    setState(964);
    match(CypherParser::SP);
    setState(965);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

CypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RegularQueryContext* CypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<CypherParser::OC_RegularQueryContext>(0);
}


size_t CypherParser::OC_QueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_Query;
}


CypherParser::OC_QueryContext* CypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
  enterRule(_localctx, 88, CypherParser::RuleOC_Query);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(967);
    oC_RegularQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

CypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}

std::vector<CypherParser::OC_UnionContext *> CypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<CypherParser::OC_UnionContext>();
}

CypherParser::OC_UnionContext* CypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<CypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RegularQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_ReturnContext *> CypherParser::OC_RegularQueryContext::oC_Return() {
  return getRuleContexts<CypherParser::OC_ReturnContext>();
}

CypherParser::OC_ReturnContext* CypherParser::OC_RegularQueryContext::oC_Return(size_t i) {
  return getRuleContext<CypherParser::OC_ReturnContext>(i);
}


size_t CypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularQuery;
}


CypherParser::OC_RegularQueryContext* CypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
  enterRule(_localctx, 90, CypherParser::RuleOC_RegularQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(990);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(969);
      oC_SingleQuery();
      setState(976);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(971);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(970);
            match(CypherParser::SP);
          }
          setState(973);
          oC_Union(); 
        }
        setState(978);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(983); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(979);
                oC_Return();
                setState(981);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(980);
                  match(CypherParser::SP);
                }
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(985); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(987);
      oC_SingleQuery();
       notifyReturnNotAtEnd(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

CypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnionContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnionContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}


size_t CypherParser::OC_UnionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Union;
}


CypherParser::OC_UnionContext* CypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
  enterRule(_localctx, 92, CypherParser::RuleOC_Union);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1004);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(992);
      match(CypherParser::UNION);
      setState(993);
      match(CypherParser::SP);
      setState(994);
      match(CypherParser::ALL);
      setState(996);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(995);
        match(CypherParser::SP);
      }
      setState(998);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(999);
      match(CypherParser::UNION);
      setState(1001);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1000);
        match(CypherParser::SP);
      }
      setState(1003);
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

CypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

CypherParser::OC_MultiPartQueryContext* CypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<CypherParser::OC_MultiPartQueryContext>(0);
}


size_t CypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SingleQuery;
}


CypherParser::OC_SingleQueryContext* CypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 94, CypherParser::RuleOC_SingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1008);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1006);
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1007);
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

CypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ReturnContext* CypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<CypherParser::OC_ReturnContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}


size_t CypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SinglePartQuery;
}


CypherParser::OC_SinglePartQueryContext* CypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
  enterRule(_localctx, 96, CypherParser::RuleOC_SinglePartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1055);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1016);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 46) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 46)) & 7971459301377) != 0)) {
        setState(1010);
        oC_ReadingClause();
        setState(1012);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1011);
          match(CypherParser::SP);
        }
        setState(1018);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1019);
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1026);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 46) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 46)) & 7971459301377) != 0)) {
        setState(1020);
        oC_ReadingClause();
        setState(1022);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1021);
          match(CypherParser::SP);
        }
        setState(1028);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1029);
      oC_UpdatingClause();
      setState(1036);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1031);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1030);
            match(CypherParser::SP);
          }
          setState(1033);
          oC_UpdatingClause(); 
        }
        setState(1038);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx);
      }
      setState(1043);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
      case 1: {
        setState(1040);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1039);
          match(CypherParser::SP);
        }
        setState(1042);
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1049); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1045);
        oC_ReadingClause();
        setState(1047);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx)) {
        case 1: {
          setState(1046);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(1051); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (((((_la - 46) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 46)) & 7971459301377) != 0));
       notifyQueryNotConcludeWithReturn(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

CypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<CypherParser::KU_QueryPartContext *> CypherParser::OC_MultiPartQueryContext::kU_QueryPart() {
  return getRuleContexts<CypherParser::KU_QueryPartContext>();
}

CypherParser::KU_QueryPartContext* CypherParser::OC_MultiPartQueryContext::kU_QueryPart(size_t i) {
  return getRuleContext<CypherParser::KU_QueryPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiPartQuery;
}


CypherParser::OC_MultiPartQueryContext* CypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
  enterRule(_localctx, 98, CypherParser::RuleOC_MultiPartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1061); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1057);
              kU_QueryPart();
              setState(1059);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(1058);
                match(CypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1063); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1065);
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_QueryPartContext ------------------------------------------------------------------

CypherParser::KU_QueryPartContext::KU_QueryPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_WithContext* CypherParser::KU_QueryPartContext::oC_With() {
  return getRuleContext<CypherParser::OC_WithContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::KU_QueryPartContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::KU_QueryPartContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::KU_QueryPartContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::KU_QueryPartContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_QueryPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_QueryPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_QueryPartContext::getRuleIndex() const {
  return CypherParser::RuleKU_QueryPart;
}


CypherParser::KU_QueryPartContext* CypherParser::kU_QueryPart() {
  KU_QueryPartContext *_localctx = _tracker.createInstance<KU_QueryPartContext>(_ctx, getState());
  enterRule(_localctx, 100, CypherParser::RuleKU_QueryPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1073);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 46) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 46)) & 7971459301377) != 0)) {
      setState(1067);
      oC_ReadingClause();
      setState(1069);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1068);
        match(CypherParser::SP);
      }
      setState(1075);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1082);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 89) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 89)) & 59) != 0)) {
      setState(1076);
      oC_UpdatingClause();
      setState(1078);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1077);
        match(CypherParser::SP);
      }
      setState(1084);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1085);
    oC_With();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

CypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_CreateContext* CypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<CypherParser::OC_CreateContext>(0);
}

CypherParser::OC_MergeContext* CypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<CypherParser::OC_MergeContext>(0);
}

CypherParser::OC_SetContext* CypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

CypherParser::OC_DeleteContext* CypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<CypherParser::OC_DeleteContext>(0);
}


size_t CypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpdatingClause;
}


CypherParser::OC_UpdatingClauseContext* CypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
  enterRule(_localctx, 102, CypherParser::RuleOC_UpdatingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1091);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
        setState(1087);
        oC_Create();
        break;
      }

      case CypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
        setState(1088);
        oC_Merge();
        break;
      }

      case CypherParser::SET: {
        enterOuterAlt(_localctx, 3);
        setState(1089);
        oC_Set();
        break;
      }

      case CypherParser::DETACH:
      case CypherParser::DELETE: {
        enterOuterAlt(_localctx, 4);
        setState(1090);
        oC_Delete();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

CypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_MatchContext* CypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<CypherParser::OC_MatchContext>(0);
}

CypherParser::OC_UnwindContext* CypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<CypherParser::OC_UnwindContext>(0);
}

CypherParser::KU_InQueryCallContext* CypherParser::OC_ReadingClauseContext::kU_InQueryCall() {
  return getRuleContext<CypherParser::KU_InQueryCallContext>(0);
}

CypherParser::KU_LoadFromContext* CypherParser::OC_ReadingClauseContext::kU_LoadFrom() {
  return getRuleContext<CypherParser::KU_LoadFromContext>(0);
}


size_t CypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_ReadingClause;
}


CypherParser::OC_ReadingClauseContext* CypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 104, CypherParser::RuleOC_ReadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1097);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::OPTIONAL:
      case CypherParser::MATCH: {
        enterOuterAlt(_localctx, 1);
        setState(1093);
        oC_Match();
        break;
      }

      case CypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
        setState(1094);
        oC_Unwind();
        break;
      }

      case CypherParser::CALL: {
        enterOuterAlt(_localctx, 3);
        setState(1095);
        kU_InQueryCall();
        break;
      }

      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 4);
        setState(1096);
        kU_LoadFrom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadFromContext ------------------------------------------------------------------

CypherParser::KU_LoadFromContext::KU_LoadFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_LoadFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::HEADERS() {
  return getToken(CypherParser::HEADERS, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_LoadFromContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_LoadFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_LoadFromContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_LoadFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadFrom;
}


CypherParser::KU_LoadFromContext* CypherParser::kU_LoadFrom() {
  KU_LoadFromContext *_localctx = _tracker.createInstance<KU_LoadFromContext>(_ctx, getState());
  enterRule(_localctx, 106, CypherParser::RuleKU_LoadFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1099);
    match(CypherParser::LOAD);
    setState(1117);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
    case 1: {
      setState(1100);
      match(CypherParser::SP);
      setState(1101);
      match(CypherParser::WITH);
      setState(1102);
      match(CypherParser::SP);
      setState(1103);
      match(CypherParser::HEADERS);
      setState(1105);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1104);
        match(CypherParser::SP);
      }
      setState(1107);
      match(CypherParser::T__1);
      setState(1109);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1108);
        match(CypherParser::SP);
      }
      setState(1111);
      kU_PropertyDefinitions();
      setState(1113);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1112);
        match(CypherParser::SP);
      }
      setState(1115);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    setState(1119);
    match(CypherParser::SP);
    setState(1120);
    match(CypherParser::FROM);
    setState(1121);
    match(CypherParser::SP);
    setState(1122);
    kU_ScanSource();
    setState(1127);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx)) {
    case 1: {
      setState(1124);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1123);
        match(CypherParser::SP);
      }
      setState(1126);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
    setState(1133);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
    case 1: {
      setState(1130);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1129);
        match(CypherParser::SP);
      }
      setState(1132);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InQueryCallContext ------------------------------------------------------------------

CypherParser::KU_InQueryCallContext::KU_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_InQueryCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::KU_InQueryCallContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_InQueryCallContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_InQueryCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_InQueryCall;
}


CypherParser::KU_InQueryCallContext* CypherParser::kU_InQueryCall() {
  KU_InQueryCallContext *_localctx = _tracker.createInstance<KU_InQueryCallContext>(_ctx, getState());
  enterRule(_localctx, 108, CypherParser::RuleKU_InQueryCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1135);
    match(CypherParser::CALL);
    setState(1136);
    match(CypherParser::SP);
    setState(1137);
    oC_FunctionInvocation();
    setState(1142);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx)) {
    case 1: {
      setState(1139);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1138);
        match(CypherParser::SP);
      }
      setState(1141);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

CypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MatchContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_MatchContext::OPTIONAL() {
  return getToken(CypherParser::OPTIONAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MatchContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_MatchContext::getRuleIndex() const {
  return CypherParser::RuleOC_Match;
}


CypherParser::OC_MatchContext* CypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
  enterRule(_localctx, 110, CypherParser::RuleOC_Match);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1146);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::OPTIONAL) {
      setState(1144);
      match(CypherParser::OPTIONAL);
      setState(1145);
      match(CypherParser::SP);
    }
    setState(1148);
    match(CypherParser::MATCH);
    setState(1150);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1149);
      match(CypherParser::SP);
    }
    setState(1152);
    oC_Pattern();
    setState(1157);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      setState(1154);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1153);
        match(CypherParser::SP);
      }
      setState(1156);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

CypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnwindContext::UNWIND() {
  return getToken(CypherParser::UNWIND, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnwindContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_UnwindContext::getRuleIndex() const {
  return CypherParser::RuleOC_Unwind;
}


CypherParser::OC_UnwindContext* CypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
  enterRule(_localctx, 112, CypherParser::RuleOC_Unwind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1159);
    match(CypherParser::UNWIND);
    setState(1161);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1160);
      match(CypherParser::SP);
    }
    setState(1163);
    oC_Expression();
    setState(1164);
    match(CypherParser::SP);
    setState(1165);
    match(CypherParser::AS);
    setState(1166);
    match(CypherParser::SP);
    setState(1167);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

CypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CreateContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_CreateContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_CreateContext::getRuleIndex() const {
  return CypherParser::RuleOC_Create;
}


CypherParser::OC_CreateContext* CypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
  enterRule(_localctx, 114, CypherParser::RuleOC_Create);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1169);
    match(CypherParser::CREATE);
    setState(1171);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1170);
      match(CypherParser::SP);
    }
    setState(1173);
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

CypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MergeContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_MergeActionContext *> CypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<CypherParser::OC_MergeActionContext>();
}

CypherParser::OC_MergeActionContext* CypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<CypherParser::OC_MergeActionContext>(i);
}


size_t CypherParser::OC_MergeContext::getRuleIndex() const {
  return CypherParser::RuleOC_Merge;
}


CypherParser::OC_MergeContext* CypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
  enterRule(_localctx, 116, CypherParser::RuleOC_Merge);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1175);
    match(CypherParser::MERGE);
    setState(1177);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1176);
      match(CypherParser::SP);
    }
    setState(1179);
    oC_Pattern();
    setState(1184);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1180);
        match(CypherParser::SP);
        setState(1181);
        oC_MergeAction(); 
      }
      setState(1186);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

CypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::ON() {
  return getToken(CypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeActionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_SetContext* CypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}


size_t CypherParser::OC_MergeActionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MergeAction;
}


CypherParser::OC_MergeActionContext* CypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
  enterRule(_localctx, 118, CypherParser::RuleOC_MergeAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1197);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1187);
      match(CypherParser::ON);
      setState(1188);
      match(CypherParser::SP);
      setState(1189);
      match(CypherParser::MATCH);
      setState(1190);
      match(CypherParser::SP);
      setState(1191);
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1192);
      match(CypherParser::ON);
      setState(1193);
      match(CypherParser::SP);
      setState(1194);
      match(CypherParser::CREATE);
      setState(1195);
      match(CypherParser::SP);
      setState(1196);
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

CypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SetContext::SET() {
  return getToken(CypherParser::SET, 0);
}

std::vector<CypherParser::OC_SetItemContext *> CypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<CypherParser::OC_SetItemContext>();
}

CypherParser::OC_SetItemContext* CypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<CypherParser::OC_SetItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetContext::getRuleIndex() const {
  return CypherParser::RuleOC_Set;
}


CypherParser::OC_SetContext* CypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
  enterRule(_localctx, 120, CypherParser::RuleOC_Set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1199);
    match(CypherParser::SET);
    setState(1201);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1200);
      match(CypherParser::SP);
    }
    setState(1203);
    oC_SetItem();
    setState(1214);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1205);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1204);
          match(CypherParser::SP);
        }
        setState(1207);
        match(CypherParser::T__2);
        setState(1209);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1208);
          match(CypherParser::SP);
        }
        setState(1211);
        oC_SetItem(); 
      }
      setState(1216);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

CypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyExpressionContext* CypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<CypherParser::OC_PropertyExpressionContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SetItem;
}


CypherParser::OC_SetItemContext* CypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
  enterRule(_localctx, 122, CypherParser::RuleOC_SetItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1217);
    oC_PropertyExpression();
    setState(1219);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1218);
      match(CypherParser::SP);
    }
    setState(1221);
    match(CypherParser::T__4);
    setState(1223);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1222);
      match(CypherParser::SP);
    }
    setState(1225);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

CypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_DeleteContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_DeleteContext::getRuleIndex() const {
  return CypherParser::RuleOC_Delete;
}


CypherParser::OC_DeleteContext* CypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
  enterRule(_localctx, 124, CypherParser::RuleOC_Delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1229);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DETACH) {
      setState(1227);
      match(CypherParser::DETACH);
      setState(1228);
      match(CypherParser::SP);
    }
    setState(1231);
    match(CypherParser::DELETE);
    setState(1233);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1232);
      match(CypherParser::SP);
    }
    setState(1235);
    oC_Expression();
    setState(1246);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1237);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1236);
          match(CypherParser::SP);
        }
        setState(1239);
        match(CypherParser::T__2);
        setState(1241);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1240);
          match(CypherParser::SP);
        }
        setState(1243);
        oC_Expression(); 
      }
      setState(1248);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

CypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_WithContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_WithContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_WithContext::getRuleIndex() const {
  return CypherParser::RuleOC_With;
}


CypherParser::OC_WithContext* CypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
  enterRule(_localctx, 126, CypherParser::RuleOC_With);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1249);
    match(CypherParser::WITH);
    setState(1250);
    oC_ProjectionBody();
    setState(1255);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
    case 1: {
      setState(1252);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1251);
        match(CypherParser::SP);
      }
      setState(1254);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

CypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ReturnContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_ReturnContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}


size_t CypherParser::OC_ReturnContext::getRuleIndex() const {
  return CypherParser::RuleOC_Return;
}


CypherParser::OC_ReturnContext* CypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
  enterRule(_localctx, 128, CypherParser::RuleOC_Return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1257);
    match(CypherParser::RETURN);
    setState(1258);
    oC_ProjectionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionBodyContext ------------------------------------------------------------------

CypherParser::OC_ProjectionBodyContext::OC_ProjectionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionBodyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::OC_ProjectionBodyContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

CypherParser::OC_OrderContext* CypherParser::OC_ProjectionBodyContext::oC_Order() {
  return getRuleContext<CypherParser::OC_OrderContext>(0);
}

CypherParser::OC_SkipContext* CypherParser::OC_ProjectionBodyContext::oC_Skip() {
  return getRuleContext<CypherParser::OC_SkipContext>(0);
}

CypherParser::OC_LimitContext* CypherParser::OC_ProjectionBodyContext::oC_Limit() {
  return getRuleContext<CypherParser::OC_LimitContext>(0);
}


size_t CypherParser::OC_ProjectionBodyContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionBody;
}


CypherParser::OC_ProjectionBodyContext* CypherParser::oC_ProjectionBody() {
  OC_ProjectionBodyContext *_localctx = _tracker.createInstance<OC_ProjectionBodyContext>(_ctx, getState());
  enterRule(_localctx, 130, CypherParser::RuleOC_ProjectionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1264);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
    case 1: {
      setState(1261);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1260);
        match(CypherParser::SP);
      }
      setState(1263);
      match(CypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(1266);
    match(CypherParser::SP);
    setState(1267);
    oC_ProjectionItems();
    setState(1270);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      setState(1268);
      match(CypherParser::SP);
      setState(1269);
      oC_Order();
      break;
    }

    default:
      break;
    }
    setState(1274);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx)) {
    case 1: {
      setState(1272);
      match(CypherParser::SP);
      setState(1273);
      oC_Skip();
      break;
    }

    default:
      break;
    }
    setState(1278);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx)) {
    case 1: {
      setState(1276);
      match(CypherParser::SP);
      setState(1277);
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemsContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemsContext::OC_ProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<CypherParser::OC_ProjectionItemContext *> CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem() {
  return getRuleContexts<CypherParser::OC_ProjectionItemContext>();
}

CypherParser::OC_ProjectionItemContext* CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem(size_t i) {
  return getRuleContext<CypherParser::OC_ProjectionItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItems;
}


CypherParser::OC_ProjectionItemsContext* CypherParser::oC_ProjectionItems() {
  OC_ProjectionItemsContext *_localctx = _tracker.createInstance<OC_ProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 132, CypherParser::RuleOC_ProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1308);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1280);
        match(CypherParser::STAR);
        setState(1291);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1282);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1281);
              match(CypherParser::SP);
            }
            setState(1284);
            match(CypherParser::T__2);
            setState(1286);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1285);
              match(CypherParser::SP);
            }
            setState(1288);
            oC_ProjectionItem(); 
          }
          setState(1293);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx);
        }
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__5:
      case CypherParser::T__7:
      case CypherParser::T__25:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::NOT:
      case CypherParser::MINUS:
      case CypherParser::IN:
      case CypherParser::NULL_:
      case CypherParser::TRUE:
      case CypherParser::FALSE:
      case CypherParser::COUNT:
      case CypherParser::EXISTS:
      case CypherParser::CASE:
      case CypherParser::END:
      case CypherParser::StringLiteral:
      case CypherParser::DecimalInteger:
      case CypherParser::HexLetter:
      case CypherParser::RegularDecimalReal:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(1294);
        oC_ProjectionItem();
        setState(1305);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1296);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1295);
              match(CypherParser::SP);
            }
            setState(1298);
            match(CypherParser::T__2);
            setState(1300);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1299);
              match(CypherParser::SP);
            }
            setState(1302);
            oC_ProjectionItem(); 
          }
          setState(1307);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemContext::OC_ProjectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ProjectionItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_ProjectionItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_ProjectionItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItem;
}


CypherParser::OC_ProjectionItemContext* CypherParser::oC_ProjectionItem() {
  OC_ProjectionItemContext *_localctx = _tracker.createInstance<OC_ProjectionItemContext>(_ctx, getState());
  enterRule(_localctx, 134, CypherParser::RuleOC_ProjectionItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1317);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1310);
      oC_Expression();
      setState(1311);
      match(CypherParser::SP);
      setState(1312);
      match(CypherParser::AS);
      setState(1313);
      match(CypherParser::SP);
      setState(1314);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1316);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

CypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_OrderContext::ORDER() {
  return getToken(CypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrderContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_OrderContext::BY() {
  return getToken(CypherParser::BY, 0);
}

std::vector<CypherParser::OC_SortItemContext *> CypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<CypherParser::OC_SortItemContext>();
}

CypherParser::OC_SortItemContext* CypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<CypherParser::OC_SortItemContext>(i);
}


size_t CypherParser::OC_OrderContext::getRuleIndex() const {
  return CypherParser::RuleOC_Order;
}


CypherParser::OC_OrderContext* CypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
  enterRule(_localctx, 136, CypherParser::RuleOC_Order);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1319);
    match(CypherParser::ORDER);
    setState(1320);
    match(CypherParser::SP);
    setState(1321);
    match(CypherParser::BY);
    setState(1322);
    match(CypherParser::SP);
    setState(1323);
    oC_SortItem();
    setState(1331);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(1324);
      match(CypherParser::T__2);
      setState(1326);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1325);
        match(CypherParser::SP);
      }
      setState(1328);
      oC_SortItem();
      setState(1333);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

CypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SkipContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::OC_SkipContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_SkipContext::getRuleIndex() const {
  return CypherParser::RuleOC_Skip;
}


CypherParser::OC_SkipContext* CypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
  enterRule(_localctx, 138, CypherParser::RuleOC_Skip);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1334);
    match(CypherParser::L_SKIP);
    setState(1335);
    match(CypherParser::SP);
    setState(1336);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

CypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LimitContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::OC_LimitContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_LimitContext::getRuleIndex() const {
  return CypherParser::RuleOC_Limit;
}


CypherParser::OC_LimitContext* CypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
  enterRule(_localctx, 140, CypherParser::RuleOC_Limit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1338);
    match(CypherParser::LIMIT);
    setState(1339);
    match(CypherParser::SP);
    setState(1340);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

CypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(CypherParser::ASCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASC() {
  return getToken(CypherParser::ASC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(CypherParser::DESCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESC() {
  return getToken(CypherParser::DESC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_SortItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SortItem;
}


CypherParser::OC_SortItemContext* CypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
  enterRule(_localctx, 142, CypherParser::RuleOC_SortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1342);
    oC_Expression();
    setState(1347);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx)) {
    case 1: {
      setState(1344);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1343);
        match(CypherParser::SP);
      }
      setState(1346);
      _la = _input->LA(1);
      if (!(((((_la - 104) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 104)) & 15) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

CypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WhereContext::WHERE() {
  return getToken(CypherParser::WHERE, 0);
}

tree::TerminalNode* CypherParser::OC_WhereContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_WhereContext::getRuleIndex() const {
  return CypherParser::RuleOC_Where;
}


CypherParser::OC_WhereContext* CypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
  enterRule(_localctx, 144, CypherParser::RuleOC_Where);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1349);
    match(CypherParser::WHERE);
    setState(1350);
    match(CypherParser::SP);
    setState(1351);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

CypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PatternPartContext *> CypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<CypherParser::OC_PatternPartContext>();
}

CypherParser::OC_PatternPartContext* CypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<CypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_Pattern;
}


CypherParser::OC_PatternContext* CypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
  enterRule(_localctx, 146, CypherParser::RuleOC_Pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1353);
    oC_PatternPart();
    setState(1364);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1355);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1354);
          match(CypherParser::SP);
        }
        setState(1357);
        match(CypherParser::T__2);
        setState(1359);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1358);
          match(CypherParser::SP);
        }
        setState(1361);
        oC_PatternPart(); 
      }
      setState(1366);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

CypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_AnonymousPatternPartContext* CypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<CypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternPart;
}


CypherParser::OC_PatternPartContext* CypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
  enterRule(_localctx, 148, CypherParser::RuleOC_PatternPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1378);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1367);
        oC_Variable();
        setState(1369);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1368);
          match(CypherParser::SP);
        }
        setState(1371);
        match(CypherParser::T__4);
        setState(1373);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1372);
          match(CypherParser::SP);
        }
        setState(1375);
        oC_AnonymousPatternPart();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(1377);
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

CypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PatternElementContext* CypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnonymousPatternPart;
}


CypherParser::OC_AnonymousPatternPartContext* CypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
  enterRule(_localctx, 150, CypherParser::RuleOC_AnonymousPatternPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1380);
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

CypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternElementContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PatternElementContext* CypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_PatternElementContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElement;
}


CypherParser::OC_PatternElementContext* CypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 152, CypherParser::RuleOC_PatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1396);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1382);
      oC_NodePattern();
      setState(1389);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1384);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1383);
            match(CypherParser::SP);
          }
          setState(1386);
          oC_PatternElementChain(); 
        }
        setState(1391);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1392);
      match(CypherParser::T__1);
      setState(1393);
      oC_PatternElement();
      setState(1394);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

CypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodePatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_NodePatternContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_NodePatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodePattern;
}


CypherParser::OC_NodePatternContext* CypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 154, CypherParser::RuleOC_NodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1398);
    match(CypherParser::T__1);
    setState(1400);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1399);
      match(CypherParser::SP);
    }
    setState(1406);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & 17826753) != 0) || ((((_la - 118) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 118)) & 302256385) != 0)) {
      setState(1402);
      oC_Variable();
      setState(1404);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1403);
        match(CypherParser::SP);
      }
    }
    setState(1412);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1408);
      oC_NodeLabels();
      setState(1410);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1409);
        match(CypherParser::SP);
      }
    }
    setState(1418);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__7) {
      setState(1414);
      kU_Properties();
      setState(1416);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1415);
        match(CypherParser::SP);
      }
    }
    setState(1420);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

CypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RelationshipPatternContext* CypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<CypherParser::OC_RelationshipPatternContext>(0);
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_PatternElementChainContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElementChain;
}


CypherParser::OC_PatternElementChainContext* CypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
  enterRule(_localctx, 156, CypherParser::RuleOC_PatternElementChain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1422);
    oC_RelationshipPattern();
    setState(1424);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1423);
      match(CypherParser::SP);
    }
    setState(1426);
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

CypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LeftArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<CypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<CypherParser::OC_DashContext *> CypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<CypherParser::OC_DashContext>();
}

CypherParser::OC_DashContext* CypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<CypherParser::OC_DashContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_RelationshipDetailContext* CypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<CypherParser::OC_RelationshipDetailContext>(0);
}

CypherParser::OC_RightArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<CypherParser::OC_RightArrowHeadContext>(0);
}


size_t CypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipPattern;
}


CypherParser::OC_RelationshipPatternContext* CypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
  enterRule(_localctx, 158, CypherParser::RuleOC_RelationshipPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1472);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1428);
      oC_LeftArrowHead();
      setState(1430);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1429);
        match(CypherParser::SP);
      }
      setState(1432);
      oC_Dash();
      setState(1434);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
      case 1: {
        setState(1433);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1437);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__5) {
        setState(1436);
        oC_RelationshipDetail();
      }
      setState(1440);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1439);
        match(CypherParser::SP);
      }
      setState(1442);
      oC_Dash();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1444);
      oC_Dash();
      setState(1446);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx)) {
      case 1: {
        setState(1445);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1449);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__5) {
        setState(1448);
        oC_RelationshipDetail();
      }
      setState(1452);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1451);
        match(CypherParser::SP);
      }
      setState(1454);
      oC_Dash();
      setState(1456);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1455);
        match(CypherParser::SP);
      }
      setState(1458);
      oC_RightArrowHead();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1460);
      oC_Dash();
      setState(1462);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 219, _ctx)) {
      case 1: {
        setState(1461);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1465);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__5) {
        setState(1464);
        oC_RelationshipDetail();
      }
      setState(1468);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1467);
        match(CypherParser::SP);
      }
      setState(1470);
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

CypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_RelationshipTypesContext* CypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<CypherParser::OC_RelationshipTypesContext>(0);
}

CypherParser::OC_RangeLiteralContext* CypherParser::OC_RelationshipDetailContext::oC_RangeLiteral() {
  return getRuleContext<CypherParser::OC_RangeLiteralContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_RelationshipDetailContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipDetail;
}


CypherParser::OC_RelationshipDetailContext* CypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
  enterRule(_localctx, 160, CypherParser::RuleOC_RelationshipDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1474);
    match(CypherParser::T__5);
    setState(1476);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1475);
      match(CypherParser::SP);
    }
    setState(1482);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & 17826753) != 0) || ((((_la - 118) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 118)) & 302256385) != 0)) {
      setState(1478);
      oC_Variable();
      setState(1480);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1479);
        match(CypherParser::SP);
      }
    }
    setState(1488);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1484);
      oC_RelationshipTypes();
      setState(1486);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1485);
        match(CypherParser::SP);
      }
    }
    setState(1494);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::STAR) {
      setState(1490);
      oC_RangeLiteral();
      setState(1492);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1491);
        match(CypherParser::SP);
      }
    }
    setState(1500);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__7) {
      setState(1496);
      kU_Properties();
      setState(1498);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1497);
        match(CypherParser::SP);
      }
    }
    setState(1502);
    match(CypherParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertiesContext ------------------------------------------------------------------

CypherParser::KU_PropertiesContext::KU_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_PropertiesContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertiesContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::KU_PropertiesContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::KU_PropertiesContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::KU_PropertiesContext::getRuleIndex() const {
  return CypherParser::RuleKU_Properties;
}


CypherParser::KU_PropertiesContext* CypherParser::kU_Properties() {
  KU_PropertiesContext *_localctx = _tracker.createInstance<KU_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 162, CypherParser::RuleKU_Properties);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1504);
    match(CypherParser::T__7);
    setState(1506);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1505);
      match(CypherParser::SP);
    }
    setState(1541);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & 17826753) != 0) || ((((_la - 118) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 118)) & 302256385) != 0)) {
      setState(1508);
      oC_PropertyKeyName();
      setState(1510);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1509);
        match(CypherParser::SP);
      }
      setState(1512);
      match(CypherParser::COLON);
      setState(1514);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1513);
        match(CypherParser::SP);
      }
      setState(1516);
      oC_Expression();
      setState(1518);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1517);
        match(CypherParser::SP);
      }
      setState(1538);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(1520);
        match(CypherParser::T__2);
        setState(1522);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1521);
          match(CypherParser::SP);
        }
        setState(1524);
        oC_PropertyKeyName();
        setState(1526);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1525);
          match(CypherParser::SP);
        }
        setState(1528);
        match(CypherParser::COLON);
        setState(1530);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1529);
          match(CypherParser::SP);
        }
        setState(1532);
        oC_Expression();
        setState(1534);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1533);
          match(CypherParser::SP);
        }
        setState(1540);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1543);
    match(CypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

CypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_RelTypeNameContext *> CypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<CypherParser::OC_RelTypeNameContext>();
}

CypherParser::OC_RelTypeNameContext* CypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<CypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipTypes;
}


CypherParser::OC_RelationshipTypesContext* CypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
  enterRule(_localctx, 164, CypherParser::RuleOC_RelationshipTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1545);
    match(CypherParser::COLON);
    setState(1547);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1546);
      match(CypherParser::SP);
    }
    setState(1549);
    oC_RelTypeName();
    setState(1563);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1551);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1550);
          match(CypherParser::SP);
        }
        setState(1553);
        match(CypherParser::T__9);
        setState(1555);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::COLON) {
          setState(1554);
          match(CypherParser::COLON);
        }
        setState(1558);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1557);
          match(CypherParser::SP);
        }
        setState(1560);
        oC_RelTypeName(); 
      }
      setState(1565);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NodeLabelContext *> CypherParser::OC_NodeLabelsContext::oC_NodeLabel() {
  return getRuleContexts<CypherParser::OC_NodeLabelContext>();
}

CypherParser::OC_NodeLabelContext* CypherParser::OC_NodeLabelsContext::oC_NodeLabel(size_t i) {
  return getRuleContext<CypherParser::OC_NodeLabelContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabels;
}


CypherParser::OC_NodeLabelsContext* CypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
  enterRule(_localctx, 166, CypherParser::RuleOC_NodeLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1566);
    oC_NodeLabel();
    setState(1573);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 248, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1568);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1567);
          match(CypherParser::SP);
        }
        setState(1570);
        oC_NodeLabel(); 
      }
      setState(1575);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 248, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelContext::OC_NodeLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LabelNameContext* CypherParser::OC_NodeLabelContext::oC_LabelName() {
  return getRuleContext<CypherParser::OC_LabelNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_NodeLabelContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabel;
}


CypherParser::OC_NodeLabelContext* CypherParser::oC_NodeLabel() {
  OC_NodeLabelContext *_localctx = _tracker.createInstance<OC_NodeLabelContext>(_ctx, getState());
  enterRule(_localctx, 168, CypherParser::RuleOC_NodeLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1576);
    match(CypherParser::COLON);
    setState(1578);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1577);
      match(CypherParser::SP);
    }
    setState(1580);
    oC_LabelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

CypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SHORTEST() {
  return getToken(CypherParser::SHORTEST, 0);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::OC_RangeLiteralContext::kU_RecursiveRelationshipComprehension() {
  return getRuleContext<CypherParser::KU_RecursiveRelationshipComprehensionContext>(0);
}

CypherParser::OC_LowerBoundContext* CypherParser::OC_RangeLiteralContext::oC_LowerBound() {
  return getRuleContext<CypherParser::OC_LowerBoundContext>(0);
}

CypherParser::OC_UpperBoundContext* CypherParser::OC_RangeLiteralContext::oC_UpperBound() {
  return getRuleContext<CypherParser::OC_UpperBoundContext>(0);
}


size_t CypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_RangeLiteral;
}


CypherParser::OC_RangeLiteralContext* CypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 170, CypherParser::RuleOC_RangeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1582);
    match(CypherParser::STAR);
    setState(1584);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 250, _ctx)) {
    case 1: {
      setState(1583);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1590);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(1586);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::ALL: {
        setState(1587);
        match(CypherParser::ALL);
        setState(1588);
        match(CypherParser::SP);
        setState(1589);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__6:
      case CypherParser::T__7:
      case CypherParser::T__10:
      case CypherParser::DecimalInteger:
      case CypherParser::SP: {
        break;
      }

    default:
      break;
    }
    setState(1593);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx)) {
    case 1: {
      setState(1592);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1609);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx)) {
    case 1: {
      setState(1596);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(1595);
        oC_LowerBound();
      }
      setState(1599);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1598);
        match(CypherParser::SP);
      }
      setState(1601);
      match(CypherParser::T__10);
      setState(1603);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx)) {
      case 1: {
        setState(1602);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1606);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(1605);
        oC_UpperBound();
      }
      break;
    }

    case 2: {
      setState(1608);
      oC_IntegerLiteral();
      break;
    }

    default:
      break;
    }
    setState(1615);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx)) {
    case 1: {
      setState(1612);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1611);
        match(CypherParser::SP);
      }
      setState(1614);
      kU_RecursiveRelationshipComprehension();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RecursiveRelationshipComprehensionContext ------------------------------------------------------------------

CypherParser::KU_RecursiveRelationshipComprehensionContext::KU_RecursiveRelationshipComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_VariableContext *> CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable() {
  return getRuleContexts<CypherParser::OC_VariableContext>();
}

CypherParser::OC_VariableContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable(size_t i) {
  return getRuleContext<CypherParser::OC_VariableContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RecursiveRelationshipComprehensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RecursiveRelationshipComprehensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateRelProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateRelProjectionItemsContext>(0);
}

CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateNodeProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateNodeProjectionItemsContext>(0);
}


size_t CypherParser::KU_RecursiveRelationshipComprehensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RecursiveRelationshipComprehension;
}


CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::kU_RecursiveRelationshipComprehension() {
  KU_RecursiveRelationshipComprehensionContext *_localctx = _tracker.createInstance<KU_RecursiveRelationshipComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 172, CypherParser::RuleKU_RecursiveRelationshipComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1617);
    match(CypherParser::T__1);
    setState(1619);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1618);
      match(CypherParser::SP);
    }
    setState(1621);
    oC_Variable();
    setState(1623);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1622);
      match(CypherParser::SP);
    }
    setState(1625);
    match(CypherParser::T__2);
    setState(1627);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1626);
      match(CypherParser::SP);
    }
    setState(1629);
    oC_Variable();
    setState(1638);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 265, _ctx)) {
    case 1: {
      setState(1631);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1630);
        match(CypherParser::SP);
      }
      setState(1633);
      match(CypherParser::T__9);
      setState(1635);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1634);
        match(CypherParser::SP);
      }
      setState(1637);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(1659);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__9 || _la == CypherParser::SP) {
      setState(1641);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1640);
        match(CypherParser::SP);
      }
      setState(1643);
      match(CypherParser::T__9);
      setState(1645);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1644);
        match(CypherParser::SP);
      }
      setState(1647);
      kU_IntermediateRelProjectionItems();
      setState(1649);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1648);
        match(CypherParser::SP);
      }
      setState(1651);
      match(CypherParser::T__2);
      setState(1653);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1652);
        match(CypherParser::SP);
      }
      setState(1655);
      kU_IntermediateNodeProjectionItems();
      setState(1657);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1656);
        match(CypherParser::SP);
      }
    }
    setState(1661);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateNodeProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateNodeProjectionItemsContext::KU_IntermediateNodeProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateNodeProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateNodeProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateNodeProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateNodeProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateNodeProjectionItems;
}


CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::kU_IntermediateNodeProjectionItems() {
  KU_IntermediateNodeProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateNodeProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 174, CypherParser::RuleKU_IntermediateNodeProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1663);
    match(CypherParser::T__7);
    setState(1665);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 272, _ctx)) {
    case 1: {
      setState(1664);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1668);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 135248726376579396) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & -4681139966783258607) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 133)) & 9741) != 0)) {
      setState(1667);
      oC_ProjectionItems();
    }
    setState(1671);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1670);
      match(CypherParser::SP);
    }
    setState(1673);
    match(CypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateRelProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateRelProjectionItemsContext::KU_IntermediateRelProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateRelProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateRelProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateRelProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateRelProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateRelProjectionItems;
}


CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::kU_IntermediateRelProjectionItems() {
  KU_IntermediateRelProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateRelProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 176, CypherParser::RuleKU_IntermediateRelProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1675);
    match(CypherParser::T__7);
    setState(1677);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 275, _ctx)) {
    case 1: {
      setState(1676);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1680);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 135248726376579396) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & -4681139966783258607) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 133)) & 9741) != 0)) {
      setState(1679);
      oC_ProjectionItems();
    }
    setState(1683);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1682);
      match(CypherParser::SP);
    }
    setState(1685);
    match(CypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LowerBoundContext ------------------------------------------------------------------

CypherParser::OC_LowerBoundContext::OC_LowerBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LowerBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_LowerBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_LowerBound;
}


CypherParser::OC_LowerBoundContext* CypherParser::oC_LowerBound() {
  OC_LowerBoundContext *_localctx = _tracker.createInstance<OC_LowerBoundContext>(_ctx, getState());
  enterRule(_localctx, 178, CypherParser::RuleOC_LowerBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1687);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpperBoundContext ------------------------------------------------------------------

CypherParser::OC_UpperBoundContext::OC_UpperBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UpperBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_UpperBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpperBound;
}


CypherParser::OC_UpperBoundContext* CypherParser::oC_UpperBound() {
  OC_UpperBoundContext *_localctx = _tracker.createInstance<OC_UpperBoundContext>(_ctx, getState());
  enterRule(_localctx, 180, CypherParser::RuleOC_UpperBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1689);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

CypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_LabelNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_LabelName;
}


CypherParser::OC_LabelNameContext* CypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 182, CypherParser::RuleOC_LabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1691);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

CypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelTypeName;
}


CypherParser::OC_RelTypeNameContext* CypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 184, CypherParser::RuleOC_RelTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1693);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

CypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_OrExpressionContext* CypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<CypherParser::OC_OrExpressionContext>(0);
}


size_t CypherParser::OC_ExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Expression;
}


CypherParser::OC_ExpressionContext* CypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 186, CypherParser::RuleOC_Expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1695);
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

CypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_XorExpressionContext *> CypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<CypherParser::OC_XorExpressionContext>();
}

CypherParser::OC_XorExpressionContext* CypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::OR() {
  return getTokens(CypherParser::OR);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(CypherParser::OR, i);
}


size_t CypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_OrExpression;
}


CypherParser::OC_OrExpressionContext* CypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 188, CypherParser::RuleOC_OrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1697);
    oC_XorExpression();
    setState(1704);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1698);
        match(CypherParser::SP);
        setState(1699);
        match(CypherParser::OR);
        setState(1700);
        match(CypherParser::SP);
        setState(1701);
        oC_XorExpression(); 
      }
      setState(1706);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

CypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AndExpressionContext *> CypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<CypherParser::OC_AndExpressionContext>();
}

CypherParser::OC_AndExpressionContext* CypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(CypherParser::XOR);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(CypherParser::XOR, i);
}


size_t CypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_XorExpression;
}


CypherParser::OC_XorExpressionContext* CypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 190, CypherParser::RuleOC_XorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1707);
    oC_AndExpression();
    setState(1714);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1708);
        match(CypherParser::SP);
        setState(1709);
        match(CypherParser::XOR);
        setState(1710);
        match(CypherParser::SP);
        setState(1711);
        oC_AndExpression(); 
      }
      setState(1716);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

CypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NotExpressionContext *> CypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<CypherParser::OC_NotExpressionContext>();
}

CypherParser::OC_NotExpressionContext* CypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<CypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::AND() {
  return getTokens(CypherParser::AND);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(CypherParser::AND, i);
}


size_t CypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AndExpression;
}


CypherParser::OC_AndExpressionContext* CypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 192, CypherParser::RuleOC_AndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1717);
    oC_NotExpression();
    setState(1724);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 280, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1718);
        match(CypherParser::SP);
        setState(1719);
        match(CypherParser::AND);
        setState(1720);
        match(CypherParser::SP);
        setState(1721);
        oC_NotExpression(); 
      }
      setState(1726);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 280, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

CypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ComparisonExpressionContext* CypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<CypherParser::OC_ComparisonExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::NOT() {
  return getTokens(CypherParser::NOT);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::NOT(size_t i) {
  return getToken(CypherParser::NOT, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NotExpression;
}


CypherParser::OC_NotExpressionContext* CypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
  enterRule(_localctx, 194, CypherParser::RuleOC_NotExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1733);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::NOT) {
      setState(1727);
      match(CypherParser::NOT);
      setState(1729);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1728);
        match(CypherParser::SP);
      }
      setState(1735);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1736);
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

CypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseOrOperatorExpressionContext *> CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseOrOperatorExpressionContext>();
}

CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseOrOperatorExpressionContext>(i);
}

std::vector<CypherParser::KU_ComparisonOperatorContext *> CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator() {
  return getRuleContexts<CypherParser::KU_ComparisonOperatorContext>();
}

CypherParser::KU_ComparisonOperatorContext* CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator(size_t i) {
  return getRuleContext<CypherParser::KU_ComparisonOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::INVALID_NOT_EQUAL() {
  return getToken(CypherParser::INVALID_NOT_EQUAL, 0);
}


size_t CypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ComparisonExpression;
}


CypherParser::OC_ComparisonExpressionContext* CypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 196, CypherParser::RuleOC_ComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1786);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1738);
      kU_BitwiseOrOperatorExpression();
      setState(1748);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 285, _ctx)) {
      case 1: {
        setState(1740);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1739);
          match(CypherParser::SP);
        }
        setState(1742);
        kU_ComparisonOperator();
        setState(1744);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1743);
          match(CypherParser::SP);
        }
        setState(1746);
        kU_BitwiseOrOperatorExpression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1750);
      kU_BitwiseOrOperatorExpression();

      setState(1752);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1751);
        match(CypherParser::SP);
      }
      setState(1754);
      antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken = match(CypherParser::INVALID_NOT_EQUAL);
      setState(1756);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1755);
        match(CypherParser::SP);
      }
      setState(1758);
      kU_BitwiseOrOperatorExpression();
       notifyInvalidNotEqualOperator(antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken); 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1762);
      kU_BitwiseOrOperatorExpression();
      setState(1764);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1763);
        match(CypherParser::SP);
      }
      setState(1766);
      kU_ComparisonOperator();
      setState(1768);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1767);
        match(CypherParser::SP);
      }
      setState(1770);
      kU_BitwiseOrOperatorExpression();
      setState(1780); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1772);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1771);
                  match(CypherParser::SP);
                }
                setState(1774);
                kU_ComparisonOperator();
                setState(1776);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1775);
                  match(CypherParser::SP);
                }
                setState(1778);
                kU_BitwiseOrOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1782); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
       notifyNonBinaryComparison(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ComparisonOperatorContext ------------------------------------------------------------------

CypherParser::KU_ComparisonOperatorContext::KU_ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_ComparisonOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_ComparisonOperator;
}


CypherParser::KU_ComparisonOperatorContext* CypherParser::kU_ComparisonOperator() {
  KU_ComparisonOperatorContext *_localctx = _tracker.createInstance<KU_ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 198, CypherParser::RuleKU_ComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1788);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 127008) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseOrOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseOrOperatorExpressionContext::KU_BitwiseOrOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseAndOperatorExpressionContext *> CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseAndOperatorExpressionContext>();
}

CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseAndOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseOrOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseOrOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseOrOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseOrOperatorExpression;
}


CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::kU_BitwiseOrOperatorExpression() {
  KU_BitwiseOrOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseOrOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 200, CypherParser::RuleKU_BitwiseOrOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1790);
    kU_BitwiseAndOperatorExpression();
    setState(1801);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1792);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1791);
          match(CypherParser::SP);
        }
        setState(1794);
        match(CypherParser::T__9);
        setState(1796);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1795);
          match(CypherParser::SP);
        }
        setState(1798);
        kU_BitwiseAndOperatorExpression(); 
      }
      setState(1803);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseAndOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseAndOperatorExpressionContext::KU_BitwiseAndOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitShiftOperatorExpressionContext *> CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorExpressionContext>();
}

CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseAndOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseAndOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseAndOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseAndOperatorExpression;
}


CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::kU_BitwiseAndOperatorExpression() {
  KU_BitwiseAndOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseAndOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 202, CypherParser::RuleKU_BitwiseAndOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1804);
    kU_BitShiftOperatorExpression();
    setState(1815);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 299, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1806);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1805);
          match(CypherParser::SP);
        }
        setState(1808);
        match(CypherParser::T__16);
        setState(1810);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1809);
          match(CypherParser::SP);
        }
        setState(1812);
        kU_BitShiftOperatorExpression(); 
      }
      setState(1817);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 299, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorExpressionContext::KU_BitShiftOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AddOrSubtractExpressionContext *> CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContexts<CypherParser::OC_AddOrSubtractExpressionContext>();
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AddOrSubtractExpressionContext>(i);
}

std::vector<CypherParser::KU_BitShiftOperatorContext *> CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorContext>();
}

CypherParser::KU_BitShiftOperatorContext* CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitShiftOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitShiftOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitShiftOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperatorExpression;
}


CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::kU_BitShiftOperatorExpression() {
  KU_BitShiftOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 204, CypherParser::RuleKU_BitShiftOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1818);
    oC_AddOrSubtractExpression();
    setState(1830);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1820);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1819);
          match(CypherParser::SP);
        }
        setState(1822);
        kU_BitShiftOperator();
        setState(1824);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1823);
          match(CypherParser::SP);
        }
        setState(1826);
        oC_AddOrSubtractExpression(); 
      }
      setState(1832);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorContext::KU_BitShiftOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_BitShiftOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperator;
}


CypherParser::KU_BitShiftOperatorContext* CypherParser::kU_BitShiftOperator() {
  KU_BitShiftOperatorContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorContext>(_ctx, getState());
  enterRule(_localctx, 206, CypherParser::RuleKU_BitShiftOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1833);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__17

    || _la == CypherParser::T__18)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

CypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_MultiplyDivideModuloExpressionContext *> CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<CypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<CypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<CypherParser::KU_AddOrSubtractOperatorContext *> CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator() {
  return getRuleContexts<CypherParser::KU_AddOrSubtractOperatorContext>();
}

CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator(size_t i) {
  return getRuleContext<CypherParser::KU_AddOrSubtractOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AddOrSubtractExpression;
}


CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 208, CypherParser::RuleOC_AddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1835);
    oC_MultiplyDivideModuloExpression();
    setState(1847);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1837);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1836);
          match(CypherParser::SP);
        }
        setState(1839);
        kU_AddOrSubtractOperator();
        setState(1841);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1840);
          match(CypherParser::SP);
        }
        setState(1843);
        oC_MultiplyDivideModuloExpression(); 
      }
      setState(1849);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddOrSubtractOperatorContext ------------------------------------------------------------------

CypherParser::KU_AddOrSubtractOperatorContext::KU_AddOrSubtractOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddOrSubtractOperatorContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_AddOrSubtractOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddOrSubtractOperator;
}


CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::kU_AddOrSubtractOperator() {
  KU_AddOrSubtractOperatorContext *_localctx = _tracker.createInstance<KU_AddOrSubtractOperatorContext>(_ctx, getState());
  enterRule(_localctx, 210, CypherParser::RuleKU_AddOrSubtractOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1850);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__19 || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

CypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PowerOfExpressionContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<CypherParser::OC_PowerOfExpressionContext>();
}

CypherParser::OC_PowerOfExpressionContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<CypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<CypherParser::KU_MultiplyDivideModuloOperatorContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator() {
  return getRuleContexts<CypherParser::KU_MultiplyDivideModuloOperatorContext>();
}

CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator(size_t i) {
  return getRuleContext<CypherParser::KU_MultiplyDivideModuloOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiplyDivideModuloExpression;
}


CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
  enterRule(_localctx, 212, CypherParser::RuleOC_MultiplyDivideModuloExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1852);
    oC_PowerOfExpression();
    setState(1864);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 308, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1854);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1853);
          match(CypherParser::SP);
        }
        setState(1856);
        kU_MultiplyDivideModuloOperator();
        setState(1858);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1857);
          match(CypherParser::SP);
        }
        setState(1860);
        oC_PowerOfExpression(); 
      }
      setState(1866);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 308, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MultiplyDivideModuloOperatorContext ------------------------------------------------------------------

CypherParser::KU_MultiplyDivideModuloOperatorContext::KU_MultiplyDivideModuloOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MultiplyDivideModuloOperatorContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}


size_t CypherParser::KU_MultiplyDivideModuloOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_MultiplyDivideModuloOperator;
}


CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::kU_MultiplyDivideModuloOperator() {
  KU_MultiplyDivideModuloOperatorContext *_localctx = _tracker.createInstance<KU_MultiplyDivideModuloOperatorContext>(_ctx, getState());
  enterRule(_localctx, 214, CypherParser::RuleKU_MultiplyDivideModuloOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1867);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__20

    || _la == CypherParser::T__21 || _la == CypherParser::STAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

CypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext *> CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression() {
  return getRuleContexts<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>();
}

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression(size_t i) {
  return getRuleContext<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PowerOfExpression;
}


CypherParser::OC_PowerOfExpressionContext* CypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
  enterRule(_localctx, 216, CypherParser::RuleOC_PowerOfExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1869);
    oC_UnaryAddSubtractOrFactorialExpression();
    setState(1880);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1871);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1870);
          match(CypherParser::SP);
        }
        setState(1873);
        match(CypherParser::T__22);
        setState(1875);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1874);
          match(CypherParser::SP);
        }
        setState(1877);
        oC_UnaryAddSubtractOrFactorialExpression(); 
      }
      setState(1882);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddSubtractOrFactorialExpressionContext ------------------------------------------------------------------

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::OC_UnaryAddSubtractOrFactorialExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::oC_StringListNullOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringListNullOperatorExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS() {
  return getTokens(CypherParser::MINUS);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS(size_t i) {
  return getToken(CypherParser::MINUS, i);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::FACTORIAL() {
  return getToken(CypherParser::FACTORIAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression;
}


CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::oC_UnaryAddSubtractOrFactorialExpression() {
  OC_UnaryAddSubtractOrFactorialExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddSubtractOrFactorialExpressionContext>(_ctx, getState());
  enterRule(_localctx, 218, CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1889);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::MINUS) {
      setState(1883);
      match(CypherParser::MINUS);
      setState(1885);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1884);
        match(CypherParser::SP);
      }
      setState(1891);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1892);
    oC_StringListNullOperatorExpression();
    setState(1897);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx)) {
    case 1: {
      setState(1894);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1893);
        match(CypherParser::SP);
      }
      setState(1896);
      match(CypherParser::FACTORIAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringListNullOperatorExpressionContext::OC_StringListNullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_StringOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringOperatorExpressionContext>(0);
}

CypherParser::OC_NullOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression() {
  return getRuleContext<CypherParser::OC_NullOperatorExpressionContext>(0);
}

std::vector<CypherParser::OC_ListOperatorExpressionContext *> CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<CypherParser::OC_ListOperatorExpressionContext>();
}

CypherParser::OC_ListOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_ListOperatorExpressionContext>(i);
}


size_t CypherParser::OC_StringListNullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringListNullOperatorExpression;
}


CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::oC_StringListNullOperatorExpression() {
  OC_StringListNullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 220, CypherParser::RuleOC_StringListNullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1899);
    oC_PropertyOrLabelsExpression();
    setState(1907);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx)) {
    case 1: {
      setState(1900);
      oC_StringOperatorExpression();
      break;
    }

    case 2: {
      setState(1902); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1901);
                oC_ListOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1904); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 316, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 3: {
      setState(1906);
      oC_NullOperatorExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::IN() {
  return getToken(CypherParser::IN, 0);
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_ListOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}


size_t CypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListOperatorExpression;
}


CypherParser::OC_ListOperatorExpressionContext* CypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 222, CypherParser::RuleOC_ListOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1928);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1909);
      match(CypherParser::SP);
      setState(1910);
      match(CypherParser::IN);
      setState(1912);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1911);
        match(CypherParser::SP);
      }
      setState(1914);
      oC_PropertyOrLabelsExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1915);
      match(CypherParser::T__5);
      setState(1916);
      oC_Expression();
      setState(1917);
      match(CypherParser::T__6);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1919);
      match(CypherParser::T__5);
      setState(1921);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 135248726376579396) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & -4681139968930742255) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 133)) & 9741) != 0)) {
        setState(1920);
        oC_Expression();
      }
      setState(1923);
      match(CypherParser::COLON);
      setState(1925);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 135248726376579396) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & -4681139968930742255) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 133)) & 9741) != 0)) {
        setState(1924);
        oC_Expression();
      }
      setState(1927);
      match(CypherParser::T__6);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringOperatorExpressionContext::OC_StringOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_RegularExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_RegularExpression() {
  return getRuleContext<CypherParser::OC_RegularExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_StringOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::STARTS() {
  return getToken(CypherParser::STARTS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::ENDS() {
  return getToken(CypherParser::ENDS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}


size_t CypherParser::OC_StringOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringOperatorExpression;
}


CypherParser::OC_StringOperatorExpressionContext* CypherParser::oC_StringOperatorExpression() {
  OC_StringOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 224, CypherParser::RuleOC_StringOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1941);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 322, _ctx)) {
    case 1: {
      setState(1930);
      oC_RegularExpression();
      break;
    }

    case 2: {
      setState(1931);
      match(CypherParser::SP);
      setState(1932);
      match(CypherParser::STARTS);
      setState(1933);
      match(CypherParser::SP);
      setState(1934);
      match(CypherParser::WITH);
      break;
    }

    case 3: {
      setState(1935);
      match(CypherParser::SP);
      setState(1936);
      match(CypherParser::ENDS);
      setState(1937);
      match(CypherParser::SP);
      setState(1938);
      match(CypherParser::WITH);
      break;
    }

    case 4: {
      setState(1939);
      match(CypherParser::SP);
      setState(1940);
      match(CypherParser::CONTAINS);
      break;
    }

    default:
      break;
    }
    setState(1944);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1943);
      match(CypherParser::SP);
    }
    setState(1946);
    oC_PropertyOrLabelsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularExpressionContext ------------------------------------------------------------------

CypherParser::OC_RegularExpressionContext::OC_RegularExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RegularExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_RegularExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularExpression;
}


CypherParser::OC_RegularExpressionContext* CypherParser::oC_RegularExpression() {
  OC_RegularExpressionContext *_localctx = _tracker.createInstance<OC_RegularExpressionContext>(_ctx, getState());
  enterRule(_localctx, 226, CypherParser::RuleOC_RegularExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1949);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1948);
      match(CypherParser::SP);
    }
    setState(1951);
    match(CypherParser::T__23);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_NullOperatorExpressionContext::OC_NullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NullOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}


size_t CypherParser::OC_NullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NullOperatorExpression;
}


CypherParser::OC_NullOperatorExpressionContext* CypherParser::oC_NullOperatorExpression() {
  OC_NullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 228, CypherParser::RuleOC_NullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1963);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1953);
      match(CypherParser::SP);
      setState(1954);
      match(CypherParser::IS);
      setState(1955);
      match(CypherParser::SP);
      setState(1956);
      match(CypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1957);
      match(CypherParser::SP);
      setState(1958);
      match(CypherParser::IS);
      setState(1959);
      match(CypherParser::SP);
      setState(1960);
      match(CypherParser::NOT);
      setState(1961);
      match(CypherParser::SP);
      setState(1962);
      match(CypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyOrLabelsExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyOrLabelsExpressionContext::OC_PropertyOrLabelsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

std::vector<CypherParser::OC_PropertyLookupContext *> CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<CypherParser::OC_PropertyLookupContext>();
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PropertyOrLabelsExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PropertyOrLabelsExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PropertyOrLabelsExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyOrLabelsExpression;
}


CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::oC_PropertyOrLabelsExpression() {
  OC_PropertyOrLabelsExpressionContext *_localctx = _tracker.createInstance<OC_PropertyOrLabelsExpressionContext>(_ctx, getState());
  enterRule(_localctx, 230, CypherParser::RuleOC_PropertyOrLabelsExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1965);
    oC_Atom();
    setState(1972);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1967);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1966);
          match(CypherParser::SP);
        }
        setState(1969);
        oC_PropertyLookup(); 
      }
      setState(1974);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

CypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LiteralContext* CypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

CypherParser::OC_ParameterContext* CypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<CypherParser::OC_ParameterContext>(0);
}

CypherParser::OC_CaseExpressionContext* CypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<CypherParser::OC_CaseExpressionContext>(0);
}

CypherParser::OC_ParenthesizedExpressionContext* CypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<CypherParser::OC_ParenthesizedExpressionContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_PathPatternsContext* CypherParser::OC_AtomContext::oC_PathPatterns() {
  return getRuleContext<CypherParser::OC_PathPatternsContext>(0);
}

CypherParser::OC_ExistSubqueryContext* CypherParser::OC_AtomContext::oC_ExistSubquery() {
  return getRuleContext<CypherParser::OC_ExistSubqueryContext>(0);
}

CypherParser::KU_CountSubqueryContext* CypherParser::OC_AtomContext::kU_CountSubquery() {
  return getRuleContext<CypherParser::KU_CountSubqueryContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_AtomContext::getRuleIndex() const {
  return CypherParser::RuleOC_Atom;
}


CypherParser::OC_AtomContext* CypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
  enterRule(_localctx, 232, CypherParser::RuleOC_Atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1984);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1975);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1976);
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1977);
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1978);
      oC_ParenthesizedExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1979);
      oC_FunctionInvocation();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1980);
      oC_PathPatterns();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1981);
      oC_ExistSubquery();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1982);
      kU_CountSubquery();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1983);
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

CypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NumberLiteralContext* CypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<CypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_BooleanLiteralContext* CypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<CypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

CypherParser::OC_ListLiteralContext* CypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<CypherParser::OC_ListLiteralContext>(0);
}

CypherParser::KU_StructLiteralContext* CypherParser::OC_LiteralContext::kU_StructLiteral() {
  return getRuleContext<CypherParser::KU_StructLiteralContext>(0);
}


size_t CypherParser::OC_LiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_Literal;
}


CypherParser::OC_LiteralContext* CypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
  enterRule(_localctx, 234, CypherParser::RuleOC_Literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1992);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::DecimalInteger:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(1986);
        oC_NumberLiteral();
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(1987);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::TRUE:
      case CypherParser::FALSE: {
        enterOuterAlt(_localctx, 3);
        setState(1988);
        oC_BooleanLiteral();
        break;
      }

      case CypherParser::NULL_: {
        enterOuterAlt(_localctx, 4);
        setState(1989);
        match(CypherParser::NULL_);
        break;
      }

      case CypherParser::T__5: {
        enterOuterAlt(_localctx, 5);
        setState(1990);
        oC_ListLiteral();
        break;
      }

      case CypherParser::T__7: {
        enterOuterAlt(_localctx, 6);
        setState(1991);
        kU_StructLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

CypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::TRUE() {
  return getToken(CypherParser::TRUE, 0);
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::FALSE() {
  return getToken(CypherParser::FALSE, 0);
}


size_t CypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_BooleanLiteral;
}


CypherParser::OC_BooleanLiteralContext* CypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 236, CypherParser::RuleOC_BooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1994);
    _la = _input->LA(1);
    if (!(_la == CypherParser::TRUE

    || _la == CypherParser::FALSE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

CypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<CypherParser::KU_ListEntryContext *> CypherParser::OC_ListLiteralContext::kU_ListEntry() {
  return getRuleContexts<CypherParser::KU_ListEntryContext>();
}

CypherParser::KU_ListEntryContext* CypherParser::OC_ListLiteralContext::kU_ListEntry(size_t i) {
  return getRuleContext<CypherParser::KU_ListEntryContext>(i);
}


size_t CypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListLiteral;
}


CypherParser::OC_ListLiteralContext* CypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 238, CypherParser::RuleOC_ListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1996);
    match(CypherParser::T__5);
    setState(1998);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1997);
      match(CypherParser::SP);
    }
    setState(2013);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 135248726376579396) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & -4681139968930742255) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 133)) & 9741) != 0)) {
      setState(2000);
      oC_Expression();
      setState(2002);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2001);
        match(CypherParser::SP);
      }
      setState(2010);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(2004);
        kU_ListEntry();
        setState(2006);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2005);
          match(CypherParser::SP);
        }
        setState(2012);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2015);
    match(CypherParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListEntryContext ------------------------------------------------------------------

CypherParser::KU_ListEntryContext::KU_ListEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ListEntryContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListEntryContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_ListEntryContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListEntry;
}


CypherParser::KU_ListEntryContext* CypherParser::kU_ListEntry() {
  KU_ListEntryContext *_localctx = _tracker.createInstance<KU_ListEntryContext>(_ctx, getState());
  enterRule(_localctx, 240, CypherParser::RuleKU_ListEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2017);
    match(CypherParser::T__2);
    setState(2019);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx)) {
    case 1: {
      setState(2018);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2022);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 135248726376579396) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & -4681139968930742255) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 133)) & 9741) != 0)) {
      setState(2021);
      oC_Expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructLiteralContext ------------------------------------------------------------------

CypherParser::KU_StructLiteralContext::KU_StructLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_StructFieldContext *> CypherParser::KU_StructLiteralContext::kU_StructField() {
  return getRuleContexts<CypherParser::KU_StructFieldContext>();
}

CypherParser::KU_StructFieldContext* CypherParser::KU_StructLiteralContext::kU_StructField(size_t i) {
  return getRuleContext<CypherParser::KU_StructFieldContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructLiteralContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructLiteral;
}


CypherParser::KU_StructLiteralContext* CypherParser::kU_StructLiteral() {
  KU_StructLiteralContext *_localctx = _tracker.createInstance<KU_StructLiteralContext>(_ctx, getState());
  enterRule(_localctx, 242, CypherParser::RuleKU_StructLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2024);
    match(CypherParser::T__7);
    setState(2026);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2025);
      match(CypherParser::SP);
    }
    setState(2028);
    kU_StructField();
    setState(2030);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2029);
      match(CypherParser::SP);
    }
    setState(2042);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(2032);
      match(CypherParser::T__2);
      setState(2034);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2033);
        match(CypherParser::SP);
      }
      setState(2036);
      kU_StructField();
      setState(2038);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2037);
        match(CypherParser::SP);
      }
      setState(2044);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2045);
    match(CypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructFieldContext ------------------------------------------------------------------

CypherParser::KU_StructFieldContext::KU_StructFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StructFieldContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StructFieldContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructFieldContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructFieldContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructField;
}


CypherParser::KU_StructFieldContext* CypherParser::kU_StructField() {
  KU_StructFieldContext *_localctx = _tracker.createInstance<KU_StructFieldContext>(_ctx, getState());
  enterRule(_localctx, 244, CypherParser::RuleKU_StructField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2049);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2047);
        oC_SymbolicName();
        break;
      }

      case CypherParser::StringLiteral: {
        setState(2048);
        match(CypherParser::StringLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2052);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2051);
      match(CypherParser::SP);
    }
    setState(2054);
    match(CypherParser::COLON);
    setState(2056);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2055);
      match(CypherParser::SP);
    }
    setState(2058);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

CypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ParenthesizedExpression;
}


CypherParser::OC_ParenthesizedExpressionContext* CypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 246, CypherParser::RuleOC_ParenthesizedExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2060);
    match(CypherParser::T__1);
    setState(2062);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2061);
      match(CypherParser::SP);
    }
    setState(2064);
    oC_Expression();
    setState(2066);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2065);
      match(CypherParser::SP);
    }
    setState(2068);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

CypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionNameContext* CypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

std::vector<CypherParser::KU_FunctionParameterContext *> CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter() {
  return getRuleContexts<CypherParser::KU_FunctionParameterContext>();
}

CypherParser::KU_FunctionParameterContext* CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter(size_t i) {
  return getRuleContext<CypherParser::KU_FunctionParameterContext>(i);
}


size_t CypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionInvocation;
}


CypherParser::OC_FunctionInvocationContext* CypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
  enterRule(_localctx, 248, CypherParser::RuleOC_FunctionInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2118);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2070);
      match(CypherParser::COUNT);
      setState(2072);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2071);
        match(CypherParser::SP);
      }
      setState(2074);
      match(CypherParser::T__1);
      setState(2076);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2075);
        match(CypherParser::SP);
      }
      setState(2078);
      match(CypherParser::STAR);
      setState(2080);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2079);
        match(CypherParser::SP);
      }
      setState(2082);
      match(CypherParser::T__3);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2083);
      oC_FunctionName();
      setState(2085);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2084);
        match(CypherParser::SP);
      }
      setState(2087);
      match(CypherParser::T__1);
      setState(2089);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2088);
        match(CypherParser::SP);
      }
      setState(2095);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DISTINCT) {
        setState(2091);
        match(CypherParser::DISTINCT);
        setState(2093);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2092);
          match(CypherParser::SP);
        }
      }
      setState(2114);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 135248726376579396) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & -4681139968930742255) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 133)) & 9741) != 0)) {
        setState(2097);
        kU_FunctionParameter();
        setState(2099);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2098);
          match(CypherParser::SP);
        }
        setState(2111);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2) {
          setState(2101);
          match(CypherParser::T__2);
          setState(2103);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2102);
            match(CypherParser::SP);
          }
          setState(2105);
          kU_FunctionParameter();
          setState(2107);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2106);
            match(CypherParser::SP);
          }
          setState(2113);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(2116);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

CypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionName;
}


CypherParser::OC_FunctionNameContext* CypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 250, CypherParser::RuleOC_FunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2120);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FunctionParameterContext ------------------------------------------------------------------

CypherParser::KU_FunctionParameterContext::KU_FunctionParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_FunctionParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_FunctionParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FunctionParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_FunctionParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_FunctionParameter;
}


CypherParser::KU_FunctionParameterContext* CypherParser::kU_FunctionParameter() {
  KU_FunctionParameterContext *_localctx = _tracker.createInstance<KU_FunctionParameterContext>(_ctx, getState());
  enterRule(_localctx, 252, CypherParser::RuleKU_FunctionParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2131);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 362, _ctx)) {
    case 1: {
      setState(2122);
      oC_SymbolicName();
      setState(2124);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2123);
        match(CypherParser::SP);
      }
      setState(2126);
      match(CypherParser::COLON);
      setState(2127);
      match(CypherParser::T__4);
      setState(2129);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2128);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(2133);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PathPatternsContext ------------------------------------------------------------------

CypherParser::OC_PathPatternsContext::OC_PathPatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PathPatternsContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PathPatternsContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PathPatternsContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PathPatternsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PathPatternsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PathPatternsContext::getRuleIndex() const {
  return CypherParser::RuleOC_PathPatterns;
}


CypherParser::OC_PathPatternsContext* CypherParser::oC_PathPatterns() {
  OC_PathPatternsContext *_localctx = _tracker.createInstance<OC_PathPatternsContext>(_ctx, getState());
  enterRule(_localctx, 254, CypherParser::RuleOC_PathPatterns);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2135);
    oC_NodePattern();
    setState(2140); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2137);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(2136);
                match(CypherParser::SP);
              }
              setState(2139);
              oC_PatternElementChain();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2142); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 364, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExistSubqueryContext ------------------------------------------------------------------

CypherParser::OC_ExistSubqueryContext::OC_ExistSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_ExistSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExistSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_ExistSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_ExistSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_ExistSubquery;
}


CypherParser::OC_ExistSubqueryContext* CypherParser::oC_ExistSubquery() {
  OC_ExistSubqueryContext *_localctx = _tracker.createInstance<OC_ExistSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 256, CypherParser::RuleOC_ExistSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2144);
    match(CypherParser::EXISTS);
    setState(2146);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2145);
      match(CypherParser::SP);
    }
    setState(2148);
    match(CypherParser::T__7);
    setState(2150);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2149);
      match(CypherParser::SP);
    }
    setState(2152);
    match(CypherParser::MATCH);
    setState(2154);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2153);
      match(CypherParser::SP);
    }
    setState(2156);
    oC_Pattern();
    setState(2161);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 369, _ctx)) {
    case 1: {
      setState(2158);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2157);
        match(CypherParser::SP);
      }
      setState(2160);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2164);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2163);
      match(CypherParser::SP);
    }
    setState(2166);
    match(CypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CountSubqueryContext ------------------------------------------------------------------

CypherParser::KU_CountSubqueryContext::KU_CountSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::KU_CountSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CountSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_CountSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_CountSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleKU_CountSubquery;
}


CypherParser::KU_CountSubqueryContext* CypherParser::kU_CountSubquery() {
  KU_CountSubqueryContext *_localctx = _tracker.createInstance<KU_CountSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 258, CypherParser::RuleKU_CountSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2168);
    match(CypherParser::COUNT);
    setState(2170);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2169);
      match(CypherParser::SP);
    }
    setState(2172);
    match(CypherParser::T__7);
    setState(2174);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2173);
      match(CypherParser::SP);
    }
    setState(2176);
    match(CypherParser::MATCH);
    setState(2178);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2177);
      match(CypherParser::SP);
    }
    setState(2180);
    oC_Pattern();
    setState(2185);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 375, _ctx)) {
    case 1: {
      setState(2182);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2181);
        match(CypherParser::SP);
      }
      setState(2184);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2188);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2187);
      match(CypherParser::SP);
    }
    setState(2190);
    match(CypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

CypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyLookup;
}


CypherParser::OC_PropertyLookupContext* CypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
  enterRule(_localctx, 260, CypherParser::RuleOC_PropertyLookup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2192);
    match(CypherParser::T__24);
    setState(2194);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2193);
      match(CypherParser::SP);
    }
    setState(2198);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2196);
        oC_PropertyKeyName();
        break;
      }

      case CypherParser::STAR: {
        setState(2197);
        match(CypherParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

CypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(CypherParser::ELSE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(CypherParser::CASE, 0);
}

std::vector<CypherParser::OC_CaseAlternativeContext *> CypherParser::OC_CaseExpressionContext::oC_CaseAlternative() {
  return getRuleContexts<CypherParser::OC_CaseAlternativeContext>();
}

CypherParser::OC_CaseAlternativeContext* CypherParser::OC_CaseExpressionContext::oC_CaseAlternative(size_t i) {
  return getRuleContext<CypherParser::OC_CaseAlternativeContext>(i);
}


size_t CypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseExpression;
}


CypherParser::OC_CaseExpressionContext* CypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 262, CypherParser::RuleOC_CaseExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2222);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 384, _ctx)) {
    case 1: {
      setState(2200);
      match(CypherParser::CASE);
      setState(2205); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2202);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2201);
                  match(CypherParser::SP);
                }
                setState(2204);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2207); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 380, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(2209);
      match(CypherParser::CASE);
      setState(2211);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2210);
        match(CypherParser::SP);
      }
      setState(2213);
      oC_Expression();
      setState(2218); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2215);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2214);
                  match(CypherParser::SP);
                }
                setState(2217);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2220); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 383, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
    setState(2232);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 387, _ctx)) {
    case 1: {
      setState(2225);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2224);
        match(CypherParser::SP);
      }
      setState(2227);
      match(CypherParser::ELSE);
      setState(2229);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2228);
        match(CypherParser::SP);
      }
      setState(2231);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(2235);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2234);
      match(CypherParser::SP);
    }
    setState(2237);
    match(CypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativeContext ------------------------------------------------------------------

CypherParser::OC_CaseAlternativeContext::OC_CaseAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::WHEN() {
  return getToken(CypherParser::WHEN, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseAlternativeContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseAlternativeContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::THEN() {
  return getToken(CypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseAlternativeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CaseAlternativeContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseAlternative;
}


CypherParser::OC_CaseAlternativeContext* CypherParser::oC_CaseAlternative() {
  OC_CaseAlternativeContext *_localctx = _tracker.createInstance<OC_CaseAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 264, CypherParser::RuleOC_CaseAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2239);
    match(CypherParser::WHEN);
    setState(2241);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2240);
      match(CypherParser::SP);
    }
    setState(2243);
    oC_Expression();
    setState(2245);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2244);
      match(CypherParser::SP);
    }
    setState(2247);
    match(CypherParser::THEN);
    setState(2249);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2248);
      match(CypherParser::SP);
    }
    setState(2251);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

CypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_VariableContext::getRuleIndex() const {
  return CypherParser::RuleOC_Variable;
}


CypherParser::OC_VariableContext* CypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
  enterRule(_localctx, 266, CypherParser::RuleOC_Variable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2253);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

CypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_DoubleLiteralContext* CypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<CypherParser::OC_DoubleLiteralContext>(0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_NumberLiteral;
}


CypherParser::OC_NumberLiteralContext* CypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 268, CypherParser::RuleOC_NumberLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2257);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2255);
        oC_DoubleLiteral();
        break;
      }

      case CypherParser::DecimalInteger: {
        enterOuterAlt(_localctx, 2);
        setState(2256);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

CypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_ParameterContext::getRuleIndex() const {
  return CypherParser::RuleOC_Parameter;
}


CypherParser::OC_ParameterContext* CypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
  enterRule(_localctx, 270, CypherParser::RuleOC_Parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2259);
    match(CypherParser::T__25);
    setState(2262);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2260);
        oC_SymbolicName();
        break;
      }

      case CypherParser::DecimalInteger: {
        setState(2261);
        match(CypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyExpression;
}


CypherParser::OC_PropertyExpressionContext* CypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 272, CypherParser::RuleOC_PropertyExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2264);
    oC_Atom();
    setState(2266);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2265);
      match(CypherParser::SP);
    }
    setState(2268);
    oC_PropertyLookup();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

CypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyKeyName;
}


CypherParser::OC_PropertyKeyNameContext* CypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
  enterRule(_localctx, 274, CypherParser::RuleOC_PropertyKeyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2270);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

CypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_IntegerLiteral;
}


CypherParser::OC_IntegerLiteralContext* CypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 276, CypherParser::RuleOC_IntegerLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2272);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

CypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(CypherParser::RegularDecimalReal, 0);
}


size_t CypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_DoubleLiteral;
}


CypherParser::OC_DoubleLiteralContext* CypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 278, CypherParser::RuleOC_DoubleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2274);
    match(CypherParser::RegularDecimalReal);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

CypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SchemaName;
}


CypherParser::OC_SchemaNameContext* CypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 280, CypherParser::RuleOC_SchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2276);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

CypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(CypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(CypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(CypherParser::HexLetter, 0);
}

CypherParser::KU_NonReservedKeywordsContext* CypherParser::OC_SymbolicNameContext::kU_NonReservedKeywords() {
  return getRuleContext<CypherParser::KU_NonReservedKeywordsContext>(0);
}


size_t CypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SymbolicName;
}


CypherParser::OC_SymbolicNameContext* CypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
  enterRule(_localctx, 282, CypherParser::RuleOC_SymbolicName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2283);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::UnescapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(2278);
        match(CypherParser::UnescapedSymbolicName);
        break;
      }

      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(2279);
        antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken = match(CypherParser::EscapedSymbolicName);
        if ((antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken != nullptr ? antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken->getText() : "") == "``") { notifyEmptyToken(antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken); }
        break;
      }

      case CypherParser::HexLetter: {
        enterOuterAlt(_localctx, 3);
        setState(2281);
        match(CypherParser::HexLetter);
        break;
      }

      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::IN:
      case CypherParser::COUNT:
      case CypherParser::END: {
        enterOuterAlt(_localctx, 4);
        setState(2282);
        kU_NonReservedKeywords();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_NonReservedKeywordsContext ------------------------------------------------------------------

CypherParser::KU_NonReservedKeywordsContext::KU_NonReservedKeywordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMENT_() {
  return getToken(CypherParser::COMMENT_, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IN() {
  return getToken(CypherParser::IN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}


size_t CypherParser::KU_NonReservedKeywordsContext::getRuleIndex() const {
  return CypherParser::RuleKU_NonReservedKeywords;
}


CypherParser::KU_NonReservedKeywordsContext* CypherParser::kU_NonReservedKeywords() {
  KU_NonReservedKeywordsContext *_localctx = _tracker.createInstance<KU_NonReservedKeywordsContext>(_ctx, getState());
  enterRule(_localctx, 284, CypherParser::RuleKU_NonReservedKeywords);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2285);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 135248726309470208) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & -8644659484737667055) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_LeftArrowHead;
}


CypherParser::OC_LeftArrowHeadContext* CypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 286, CypherParser::RuleOC_LeftArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2287);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2013274112) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_RightArrowHead;
}


CypherParser::OC_RightArrowHeadContext* CypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 288, CypherParser::RuleOC_RightArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2289);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 32212287488) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

CypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DashContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::OC_DashContext::getRuleIndex() const {
  return CypherParser::RuleOC_Dash;
}


CypherParser::OC_DashContext* CypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
  enterRule(_localctx, 290, CypherParser::RuleOC_Dash);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2291);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 70334384439296) != 0) || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CypherParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 34: return kU_DataTypeSempred(antlrcpp::downCast<KU_DataTypeContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_DataTypeSempred(KU_DataTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

void CypherParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cypherParserInitialize();
#else
  ::antlr4::internal::call_once(cypherParserOnceFlag, cypherParserInitialize);
#endif
}
