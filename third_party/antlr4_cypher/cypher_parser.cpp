
// Generated from Cypher.g4 by ANTLR 4.13.1



#include "cypher_parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct CypherParserStaticData final {
  CypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CypherParserStaticData(const CypherParserStaticData&) = delete;
  CypherParserStaticData(CypherParserStaticData&&) = delete;
  CypherParserStaticData& operator=(const CypherParserStaticData&) = delete;
  CypherParserStaticData& operator=(CypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cypherParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CypherParserStaticData *cypherParserStaticData = nullptr;

void cypherParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cypherParserStaticData != nullptr) {
    return;
  }
#else
  assert(cypherParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CypherParserStaticData>(
    std::vector<std::string>{
      "ku_Statements", "oC_Cypher", "oC_Statement", "kU_CopyFrom", "kU_ColumnNames", 
      "kU_ScanSource", "kU_CopyFromByColumn", "kU_CopyTO", "kU_ExportDatabase", 
      "kU_ImportDatabase", "kU_AttachDatabase", "kU_Option", "kU_Options", 
      "kU_DetachDatabase", "kU_UseDatabase", "kU_StandaloneCall", "kU_CommentOn", 
      "kU_CreateMacro", "kU_PositionalArgs", "kU_DefaultArg", "kU_FilePaths", 
      "kU_ParsingOptions", "kU_CreateNodeTable", "kU_CreateRelTable", "kU_CreateRelTableGroup", 
      "kU_RelTableConnection", "kU_CreateRdfGraph", "kU_CreateSequence", 
      "kU_CreateType", "kU_SequenceOptions", "kU_IncrementBy", "kU_MinValue", 
      "kU_MaxValue", "kU_StartWith", "kU_Cycle", "kU_Drop", "kU_AlterTable", 
      "kU_AlterOptions", "kU_AddProperty", "kU_Default", "kU_DropProperty", 
      "kU_RenameTable", "kU_RenameProperty", "kU_PropertyDefinitions", "kU_PropertyDefinition", 
      "kU_PropertyDefinitionsDDL", "kU_PropertyDefinitionDDL", "kU_CreateNodeConstraint", 
      "kU_DataType", "kU_ListIdentifiers", "kU_ListIdentifier", "oC_AnyCypherOption", 
      "oC_Explain", "oC_Profile", "kU_Transaction", "kU_Extension", "kU_LoadExtension", 
      "kU_InstallExtension", "oC_Query", "oC_RegularQuery", "oC_Union", 
      "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", "kU_QueryPart", 
      "oC_UpdatingClause", "oC_ReadingClause", "kU_LoadFrom", "kU_InQueryCall", 
      "kU_ProjectGraph", "kU_GraphProjectionTableItems", "kU_GraphProjectionTableItem", 
      "kU_GraphProjectionColumnItems", "kU_GraphProjectionColumnItem", "oC_Match", 
      "oC_Unwind", "oC_Create", "oC_Merge", "oC_MergeAction", "oC_Set", 
      "oC_SetItem", "oC_Delete", "oC_With", "oC_Return", "oC_ProjectionBody", 
      "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", "oC_Skip", 
      "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", "oC_PatternPart", 
      "oC_AnonymousPatternPart", "oC_PatternElement", "oC_NodePattern", 
      "oC_PatternElementChain", "oC_RelationshipPattern", "oC_RelationshipDetail", 
      "kU_Properties", "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
      "oC_RangeLiteral", "kU_RecursiveRelationshipComprehension", "kU_IntermediateNodeProjectionItems", 
      "kU_IntermediateRelProjectionItems", "oC_LowerBound", "oC_UpperBound", 
      "oC_LabelName", "oC_RelTypeName", "oC_Expression", "oC_OrExpression", 
      "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression", 
      "kU_ComparisonOperator", "kU_BitwiseOrOperatorExpression", "kU_BitwiseAndOperatorExpression", 
      "kU_BitShiftOperatorExpression", "kU_BitShiftOperator", "oC_AddOrSubtractExpression", 
      "kU_AddOrSubtractOperator", "oC_MultiplyDivideModuloExpression", "kU_MultiplyDivideModuloOperator", 
      "oC_PowerOfExpression", "oC_UnaryAddSubtractOrFactorialExpression", 
      "oC_StringListNullOperatorExpression", "oC_ListOperatorExpression", 
      "oC_StringOperatorExpression", "oC_RegularExpression", "oC_NullOperatorExpression", 
      "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Literal", "oC_BooleanLiteral", 
      "oC_ListLiteral", "kU_ListEntry", "kU_StructLiteral", "kU_StructField", 
      "oC_ParenthesizedExpression", "oC_FunctionInvocation", "oC_FunctionName", 
      "kU_FunctionParameter", "oC_PathPatterns", "oC_ExistSubquery", "kU_CountSubquery", 
      "oC_PropertyLookup", "oC_CaseExpression", "oC_CaseAlternative", "oC_Variable", 
      "oC_NumberLiteral", "oC_Parameter", "oC_PropertyExpression", "oC_PropertyKeyName", 
      "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_SchemaName", "oC_SymbolicName", 
      "kU_NonReservedKeywords", "oC_LeftArrowHead", "oC_RightArrowHead", 
      "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "'('", "','", "')'", "'.'", "'='", "'['", "']'", "'{'", 
      "'}'", "'|'", "'..'", "'<>'", "'<'", "'<='", "'>'", "'>='", "'&'", 
      "'>>'", "'<<'", "'+'", "'/'", "'%'", "'^'", "'=~'", "'$'", "'\\u27E8'", 
      "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", "'\\uFE65'", 
      "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", 
      "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", "'\\uFF0D'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'*'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'!='", 
      "'-'", "'!'", "':'", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "ATTACH", "DBTYPE", 
      "USE", "CALL", "COMMENT_", "MACRO", "GLOB", "COPY", "FROM", "COLUMN", 
      "EXPORT", "IMPORT", "DATABASE", "NODE", "TABLE", "GROUP", "RDFGRAPH", 
      "SEQUENCE", "TYPE", "INCREMENT", "MINVALUE", "MAXVALUE", "START", 
      "NO", "CYCLE", "DROP", "ALTER", "DEFAULT", "RENAME", "ADD", "PRIMARY", 
      "KEY", "REL", "TO", "DECIMAL", "EXPLAIN", "PROFILE", "BEGIN", "TRANSACTION", 
      "READ", "ONLY", "WRITE", "COMMIT", "COMMIT_SKIP_CHECKPOINT", "ROLLBACK", 
      "ROLLBACK_SKIP_CHECKPOINT", "INSTALL", "EXTENSION", "UNION", "ALL", 
      "LOAD", "HEADERS", "PROJECT", "GRAPH", "OPTIONAL", "MATCH", "UNWIND", 
      "CREATE", "MERGE", "ON", "SET", "DETACH", "DELETE", "WITH", "RETURN", 
      "DISTINCT", "STAR", "AS", "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", 
      "ASC", "DESCENDING", "DESC", "WHERE", "SHORTEST", "OR", "XOR", "AND", 
      "NOT", "INVALID_NOT_EQUAL", "MINUS", "FACTORIAL", "COLON", "IN", "STARTS", 
      "ENDS", "CONTAINS", "IS", "NULL_", "TRUE", "FALSE", "CAST", "COUNT", 
      "EXISTS", "CASE", "ELSE", "END", "WHEN", "THEN", "StringLiteral", 
      "EscapedChar", "DecimalInteger", "HexLetter", "HexDigit", "Digit", 
      "NonZeroDigit", "NonZeroOctDigit", "ZeroDigit", "RegularDecimalReal", 
      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", 
      "SP", "WHITESPACE", "Comment", "Unknown"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,165,2612,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,1,0,1,0,3,0,333,8,0,1,0,1,0,3,0,337,8,0,1,0,5,0,340,8,0,10,0,12,
  	0,343,9,0,1,0,3,0,346,8,0,1,0,1,0,1,1,3,1,351,8,1,1,1,3,1,354,8,1,1,1,
  	1,1,3,1,358,8,1,1,1,3,1,361,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,385,8,2,1,3,1,3,
  	1,3,1,3,3,3,391,8,3,1,3,1,3,3,3,395,8,3,1,3,3,3,398,8,3,1,3,1,3,1,3,1,
  	3,3,3,404,8,3,1,3,3,3,407,8,3,1,4,1,4,3,4,411,8,4,1,4,1,4,3,4,415,8,4,
  	1,4,1,4,3,4,419,8,4,1,4,5,4,422,8,4,10,4,12,4,425,9,4,1,4,3,4,428,8,4,
  	1,4,1,4,1,5,1,5,1,5,3,5,435,8,5,1,5,1,5,3,5,439,8,5,1,5,1,5,1,5,1,5,1,
  	5,1,5,3,5,447,8,5,1,5,1,5,3,5,451,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
  	3,6,461,8,6,1,6,1,6,3,6,465,8,6,1,6,1,6,3,6,469,8,6,1,6,5,6,472,8,6,10,
  	6,12,6,475,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,3,7,487,8,7,1,
  	7,1,7,3,7,491,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,499,8,7,1,7,3,7,502,8,7,
  	1,8,1,8,1,8,1,8,1,8,1,8,3,8,510,8,8,1,8,3,8,513,8,8,1,9,1,9,1,9,1,9,1,
  	9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,528,8,10,1,10,1,10,1,10,
  	3,10,533,8,10,1,10,1,10,1,10,1,10,3,10,539,8,10,1,10,1,10,3,10,543,8,
  	10,1,10,3,10,546,8,10,1,10,3,10,549,8,10,1,10,1,10,1,11,1,11,3,11,555,
  	8,11,1,11,1,11,3,11,559,8,11,1,11,1,11,1,12,1,12,3,12,565,8,12,1,12,1,
  	12,3,12,569,8,12,1,12,5,12,572,8,12,10,12,12,12,575,9,12,1,13,1,13,1,
  	13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,589,8,15,1,15,1,
  	15,3,15,593,8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
  	16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,615,8,17,1,17,1,
  	17,3,17,619,8,17,1,17,3,17,622,8,17,1,17,3,17,625,8,17,1,17,3,17,628,
  	8,17,1,17,3,17,631,8,17,1,17,1,17,3,17,635,8,17,1,17,5,17,638,8,17,10,
  	17,12,17,641,9,17,1,17,3,17,644,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
  	18,1,18,3,18,654,8,18,1,18,1,18,3,18,658,8,18,1,18,5,18,661,8,18,10,18,
  	12,18,664,9,18,1,19,1,19,3,19,668,8,19,1,19,1,19,1,19,3,19,673,8,19,1,
  	19,1,19,1,20,1,20,3,20,679,8,20,1,20,1,20,3,20,683,8,20,1,20,1,20,3,20,
  	687,8,20,1,20,5,20,690,8,20,10,20,12,20,693,9,20,1,20,1,20,1,20,1,20,
  	3,20,699,8,20,1,20,1,20,3,20,703,8,20,1,20,1,20,3,20,707,8,20,1,20,3,
  	20,710,8,20,1,21,1,21,3,21,714,8,21,1,21,1,21,3,21,718,8,21,1,21,1,21,
  	1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,730,8,22,1,22,1,22,3,22,
  	734,8,22,1,22,1,22,3,22,738,8,22,1,22,1,22,3,22,742,8,22,1,22,1,22,1,
  	22,3,22,747,8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,
  	23,759,8,23,1,23,1,23,3,23,763,8,23,1,23,1,23,3,23,767,8,23,1,23,1,23,
  	3,23,771,8,23,1,23,1,23,3,23,775,8,23,3,23,777,8,23,1,23,1,23,3,23,781,
  	8,23,1,23,1,23,3,23,785,8,23,3,23,787,8,23,1,23,1,23,1,24,1,24,1,24,1,
  	24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,801,8,24,1,24,1,24,3,24,805,8,24,
  	1,24,1,24,3,24,809,8,24,1,24,1,24,3,24,813,8,24,1,24,4,24,816,8,24,11,
  	24,12,24,817,1,24,3,24,821,8,24,1,24,1,24,3,24,825,8,24,1,24,1,24,3,24,
  	829,8,24,3,24,831,8,24,1,24,1,24,3,24,835,8,24,1,24,1,24,3,24,839,8,24,
  	3,24,841,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,866,
  	8,27,10,27,12,27,869,9,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,3,28,881,8,28,1,29,1,29,1,29,1,29,1,29,3,29,888,8,29,1,30,1,30,1,
  	30,1,30,3,30,894,8,30,1,30,3,30,897,8,30,1,30,1,30,1,31,1,31,1,31,1,31,
  	1,31,1,31,3,31,907,8,31,1,31,3,31,910,8,31,1,32,1,32,1,32,1,32,1,32,1,
  	32,3,32,918,8,32,1,32,3,32,921,8,32,1,33,1,33,1,33,1,33,3,33,927,8,33,
  	1,33,3,33,930,8,33,1,33,1,33,1,34,1,34,3,34,936,8,34,1,34,1,34,1,35,1,
  	35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,
  	37,1,37,1,37,3,37,958,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,967,
  	8,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,
  	1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,3,43,993,8,43,
  	1,43,1,43,3,43,997,8,43,1,43,5,43,1000,8,43,10,43,12,43,1003,9,43,1,44,
  	1,44,1,44,1,44,1,45,1,45,3,45,1011,8,45,1,45,1,45,3,45,1015,8,45,1,45,
  	5,45,1018,8,45,10,45,12,45,1021,9,45,1,46,1,46,1,46,1,46,1,46,3,46,1028,
  	8,46,1,47,1,47,1,47,1,47,3,47,1034,8,47,1,47,1,47,3,47,1038,8,47,1,47,
  	1,47,3,47,1042,8,47,1,47,1,47,1,48,1,48,1,48,1,48,3,48,1050,8,48,1,48,
  	1,48,3,48,1054,8,48,1,48,1,48,3,48,1058,8,48,1,48,1,48,1,48,1,48,3,48,
  	1064,8,48,1,48,1,48,3,48,1068,8,48,1,48,1,48,3,48,1072,8,48,1,48,1,48,
  	1,48,1,48,3,48,1078,8,48,1,48,1,48,3,48,1082,8,48,1,48,1,48,3,48,1086,
  	8,48,1,48,1,48,3,48,1090,8,48,1,48,1,48,3,48,1094,8,48,1,48,1,48,1,48,
  	1,48,3,48,1100,8,48,1,48,1,48,3,48,1104,8,48,1,48,1,48,3,48,1108,8,48,
  	1,48,1,48,3,48,1112,8,48,1,48,1,48,3,48,1116,8,48,1,48,1,48,3,48,1120,
  	8,48,1,48,1,48,5,48,1124,8,48,10,48,12,48,1127,9,48,1,49,1,49,5,49,1131,
  	8,49,10,49,12,49,1134,9,49,1,50,1,50,3,50,1138,8,50,1,50,1,50,1,51,1,
  	51,3,51,1144,8,51,1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,
  	54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1164,8,54,1,55,1,55,3,55,1168,
  	8,55,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1176,8,56,1,57,1,57,1,57,1,57,
  	1,58,1,58,1,59,1,59,3,59,1186,8,59,1,59,5,59,1189,8,59,10,59,12,59,1192,
  	9,59,1,59,1,59,3,59,1196,8,59,4,59,1198,8,59,11,59,12,59,1199,1,59,1,
  	59,1,59,3,59,1205,8,59,1,60,1,60,1,60,1,60,3,60,1211,8,60,1,60,1,60,1,
  	60,3,60,1216,8,60,1,60,3,60,1219,8,60,1,61,1,61,3,61,1223,8,61,1,62,1,
  	62,3,62,1227,8,62,5,62,1229,8,62,10,62,12,62,1232,9,62,1,62,1,62,1,62,
  	3,62,1237,8,62,5,62,1239,8,62,10,62,12,62,1242,9,62,1,62,1,62,3,62,1246,
  	8,62,1,62,5,62,1249,8,62,10,62,12,62,1252,9,62,1,62,3,62,1255,8,62,1,
  	62,3,62,1258,8,62,1,62,1,62,3,62,1262,8,62,4,62,1264,8,62,11,62,12,62,
  	1265,1,62,1,62,3,62,1270,8,62,1,63,1,63,3,63,1274,8,63,4,63,1276,8,63,
  	11,63,12,63,1277,1,63,1,63,1,64,1,64,3,64,1284,8,64,5,64,1286,8,64,10,
  	64,12,64,1289,9,64,1,64,1,64,3,64,1293,8,64,5,64,1295,8,64,10,64,12,64,
  	1298,9,64,1,64,1,64,1,65,1,65,1,65,1,65,3,65,1306,8,65,1,66,1,66,1,66,
  	1,66,3,66,1312,8,66,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1320,8,67,1,67,
  	1,67,3,67,1324,8,67,1,67,1,67,3,67,1328,8,67,1,67,1,67,3,67,1332,8,67,
  	1,67,1,67,1,67,1,67,1,67,3,67,1339,8,67,1,67,3,67,1342,8,67,1,67,3,67,
  	1345,8,67,1,67,3,67,1348,8,67,1,68,1,68,3,68,1352,8,68,3,68,1354,8,68,
  	1,68,1,68,1,68,1,68,3,68,1360,8,68,1,68,3,68,1363,8,68,1,69,1,69,1,69,
  	1,69,1,69,1,69,3,69,1371,8,69,1,69,1,69,3,69,1375,8,69,1,69,1,69,3,69,
  	1379,8,69,1,69,1,69,1,70,1,70,3,70,1385,8,70,1,70,1,70,3,70,1389,8,70,
  	1,70,5,70,1392,8,70,10,70,12,70,1395,9,70,1,71,1,71,3,71,1399,8,71,1,
  	71,1,71,3,71,1403,8,71,1,71,1,71,3,71,1407,8,71,1,71,1,71,3,71,1411,8,
  	71,1,72,1,72,3,72,1415,8,72,1,72,1,72,3,72,1419,8,72,1,72,5,72,1422,8,
  	72,10,72,12,72,1425,9,72,1,73,1,73,1,73,3,73,1430,8,73,1,73,1,73,3,73,
  	1434,8,73,1,74,1,74,3,74,1438,8,74,1,74,1,74,3,74,1442,8,74,1,74,1,74,
  	1,74,3,74,1447,8,74,1,75,1,75,3,75,1451,8,75,1,75,1,75,1,75,1,75,1,75,
  	1,75,1,76,1,76,3,76,1461,8,76,1,76,1,76,1,77,1,77,3,77,1467,8,77,1,77,
  	1,77,1,77,5,77,1472,8,77,10,77,12,77,1475,9,77,1,78,1,78,1,78,1,78,1,
  	78,1,78,1,78,1,78,1,78,1,78,3,78,1487,8,78,1,79,1,79,3,79,1491,8,79,1,
  	79,1,79,3,79,1495,8,79,1,79,1,79,3,79,1499,8,79,1,79,5,79,1502,8,79,10,
  	79,12,79,1505,9,79,1,80,1,80,3,80,1509,8,80,1,80,1,80,3,80,1513,8,80,
  	1,80,1,80,1,81,1,81,3,81,1519,8,81,1,81,1,81,3,81,1523,8,81,1,81,1,81,
  	3,81,1527,8,81,1,81,1,81,3,81,1531,8,81,1,81,5,81,1534,8,81,10,81,12,
  	81,1537,9,81,1,82,1,82,1,82,3,82,1542,8,82,1,82,3,82,1545,8,82,1,83,1,
  	83,1,83,1,84,3,84,1551,8,84,1,84,3,84,1554,8,84,1,84,1,84,1,84,1,84,3,
  	84,1560,8,84,1,84,1,84,3,84,1564,8,84,1,84,1,84,3,84,1568,8,84,1,85,1,
  	85,3,85,1572,8,85,1,85,1,85,3,85,1576,8,85,1,85,5,85,1579,8,85,10,85,
  	12,85,1582,9,85,1,85,1,85,3,85,1586,8,85,1,85,1,85,3,85,1590,8,85,1,85,
  	5,85,1593,8,85,10,85,12,85,1596,9,85,3,85,1598,8,85,1,86,1,86,1,86,1,
  	86,1,86,1,86,1,86,3,86,1607,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,
  	87,1616,8,87,1,87,5,87,1619,8,87,10,87,12,87,1622,9,87,1,88,1,88,1,88,
  	1,88,1,89,1,89,1,89,1,89,1,90,1,90,3,90,1634,8,90,1,90,3,90,1637,8,90,
  	1,91,1,91,1,91,1,91,1,92,1,92,3,92,1645,8,92,1,92,1,92,3,92,1649,8,92,
  	1,92,5,92,1652,8,92,10,92,12,92,1655,9,92,1,93,1,93,3,93,1659,8,93,1,
  	93,1,93,3,93,1663,8,93,1,93,1,93,1,93,3,93,1668,8,93,1,94,1,94,1,95,1,
  	95,3,95,1674,8,95,1,95,5,95,1677,8,95,10,95,12,95,1680,9,95,1,95,1,95,
  	1,95,1,95,3,95,1686,8,95,1,96,1,96,3,96,1690,8,96,1,96,1,96,3,96,1694,
  	8,96,3,96,1696,8,96,1,96,1,96,3,96,1700,8,96,3,96,1702,8,96,1,96,1,96,
  	3,96,1706,8,96,3,96,1708,8,96,1,96,1,96,1,97,1,97,3,97,1714,8,97,1,97,
  	1,97,1,98,1,98,3,98,1720,8,98,1,98,1,98,3,98,1724,8,98,1,98,3,98,1727,
  	8,98,1,98,3,98,1730,8,98,1,98,1,98,1,98,1,98,3,98,1736,8,98,1,98,3,98,
  	1739,8,98,1,98,3,98,1742,8,98,1,98,1,98,3,98,1746,8,98,1,98,1,98,1,98,
  	1,98,3,98,1752,8,98,1,98,3,98,1755,8,98,1,98,3,98,1758,8,98,1,98,1,98,
  	3,98,1762,8,98,1,99,1,99,3,99,1766,8,99,1,99,1,99,3,99,1770,8,99,3,99,
  	1772,8,99,1,99,1,99,3,99,1776,8,99,3,99,1778,8,99,1,99,1,99,3,99,1782,
  	8,99,3,99,1784,8,99,1,99,1,99,3,99,1788,8,99,3,99,1790,8,99,1,99,1,99,
  	1,100,1,100,3,100,1796,8,100,1,100,1,100,3,100,1800,8,100,1,100,1,100,
  	3,100,1804,8,100,1,100,1,100,3,100,1808,8,100,1,100,1,100,3,100,1812,
  	8,100,1,100,1,100,3,100,1816,8,100,1,100,1,100,3,100,1820,8,100,1,100,
  	1,100,3,100,1824,8,100,5,100,1826,8,100,10,100,12,100,1829,9,100,3,100,
  	1831,8,100,1,100,1,100,1,101,1,101,3,101,1837,8,101,1,101,1,101,3,101,
  	1841,8,101,1,101,1,101,3,101,1845,8,101,1,101,3,101,1848,8,101,1,101,
  	5,101,1851,8,101,10,101,12,101,1854,9,101,1,102,1,102,3,102,1858,8,102,
  	1,102,5,102,1861,8,102,10,102,12,102,1864,9,102,1,103,1,103,3,103,1868,
  	8,103,1,103,1,103,1,104,1,104,3,104,1874,8,104,1,104,1,104,1,104,1,104,
  	3,104,1880,8,104,1,104,3,104,1883,8,104,1,104,3,104,1886,8,104,1,104,
  	3,104,1889,8,104,1,104,1,104,3,104,1893,8,104,1,104,3,104,1896,8,104,
  	1,104,3,104,1899,8,104,1,104,3,104,1902,8,104,1,104,3,104,1905,8,104,
  	1,105,1,105,3,105,1909,8,105,1,105,1,105,3,105,1913,8,105,1,105,1,105,
  	3,105,1917,8,105,1,105,1,105,3,105,1921,8,105,1,105,1,105,3,105,1925,
  	8,105,1,105,3,105,1928,8,105,1,105,3,105,1931,8,105,1,105,1,105,3,105,
  	1935,8,105,1,105,1,105,3,105,1939,8,105,1,105,1,105,3,105,1943,8,105,
  	1,105,1,105,3,105,1947,8,105,3,105,1949,8,105,1,105,1,105,1,106,1,106,
  	3,106,1955,8,106,1,106,3,106,1958,8,106,1,106,3,106,1961,8,106,1,106,
  	1,106,1,107,1,107,3,107,1967,8,107,1,107,3,107,1970,8,107,1,107,3,107,
  	1973,8,107,1,107,1,107,1,108,1,108,1,109,1,109,1,110,1,110,1,111,1,111,
  	1,112,1,112,1,113,1,113,1,113,1,113,1,113,5,113,1992,8,113,10,113,12,
  	113,1995,9,113,1,114,1,114,1,114,1,114,1,114,5,114,2002,8,114,10,114,
  	12,114,2005,9,114,1,115,1,115,1,115,1,115,1,115,5,115,2012,8,115,10,115,
  	12,115,2015,9,115,1,116,1,116,3,116,2019,8,116,5,116,2021,8,116,10,116,
  	12,116,2024,9,116,1,116,1,116,1,117,1,117,3,117,2030,8,117,1,117,1,117,
  	3,117,2034,8,117,1,117,1,117,3,117,2038,8,117,1,117,1,117,3,117,2042,
  	8,117,1,117,1,117,3,117,2046,8,117,1,117,1,117,1,117,1,117,1,117,1,117,
  	3,117,2054,8,117,1,117,1,117,3,117,2058,8,117,1,117,1,117,3,117,2062,
  	8,117,1,117,1,117,3,117,2066,8,117,1,117,1,117,4,117,2070,8,117,11,117,
  	12,117,2071,1,117,1,117,3,117,2076,8,117,1,118,1,118,1,119,1,119,3,119,
  	2082,8,119,1,119,1,119,3,119,2086,8,119,1,119,5,119,2089,8,119,10,119,
  	12,119,2092,9,119,1,120,1,120,3,120,2096,8,120,1,120,1,120,3,120,2100,
  	8,120,1,120,5,120,2103,8,120,10,120,12,120,2106,9,120,1,121,1,121,3,121,
  	2110,8,121,1,121,1,121,3,121,2114,8,121,1,121,1,121,5,121,2118,8,121,
  	10,121,12,121,2121,9,121,1,122,1,122,1,123,1,123,3,123,2127,8,123,1,123,
  	1,123,3,123,2131,8,123,1,123,1,123,5,123,2135,8,123,10,123,12,123,2138,
  	9,123,1,124,1,124,1,125,1,125,3,125,2144,8,125,1,125,1,125,3,125,2148,
  	8,125,1,125,1,125,5,125,2152,8,125,10,125,12,125,2155,9,125,1,126,1,126,
  	1,127,1,127,3,127,2161,8,127,1,127,1,127,3,127,2165,8,127,1,127,5,127,
  	2168,8,127,10,127,12,127,2171,9,127,1,128,1,128,3,128,2175,8,128,5,128,
  	2177,8,128,10,128,12,128,2180,9,128,1,128,1,128,3,128,2184,8,128,1,128,
  	3,128,2187,8,128,1,129,1,129,1,129,4,129,2192,8,129,11,129,12,129,2193,
  	1,129,3,129,2197,8,129,1,130,1,130,1,130,3,130,2202,8,130,1,130,1,130,
  	1,130,1,130,1,130,1,130,1,130,3,130,2211,8,130,1,130,1,130,3,130,2215,
  	8,130,1,130,3,130,2218,8,130,1,131,1,131,1,131,1,131,1,131,1,131,1,131,
  	1,131,1,131,1,131,1,131,3,131,2231,8,131,1,131,3,131,2234,8,131,1,131,
  	1,131,1,132,3,132,2239,8,132,1,132,1,132,1,133,1,133,1,133,1,133,1,133,
  	1,133,1,133,1,133,1,133,1,133,3,133,2253,8,133,1,134,1,134,3,134,2257,
  	8,134,1,134,5,134,2260,8,134,10,134,12,134,2263,9,134,1,135,1,135,1,135,
  	1,135,1,135,1,135,1,135,1,135,1,135,3,135,2274,8,135,1,136,1,136,1,136,
  	1,136,1,136,1,136,3,136,2282,8,136,1,137,1,137,1,138,1,138,3,138,2288,
  	8,138,1,138,1,138,3,138,2292,8,138,1,138,1,138,3,138,2296,8,138,5,138,
  	2298,8,138,10,138,12,138,2301,9,138,3,138,2303,8,138,1,138,1,138,1,139,
  	1,139,3,139,2309,8,139,1,139,3,139,2312,8,139,1,140,1,140,3,140,2316,
  	8,140,1,140,1,140,3,140,2320,8,140,1,140,1,140,3,140,2324,8,140,1,140,
  	1,140,3,140,2328,8,140,5,140,2330,8,140,10,140,12,140,2333,9,140,1,140,
  	1,140,1,141,1,141,3,141,2339,8,141,1,141,3,141,2342,8,141,1,141,1,141,
  	3,141,2346,8,141,1,141,1,141,1,142,1,142,3,142,2352,8,142,1,142,1,142,
  	3,142,2356,8,142,1,142,1,142,1,143,1,143,3,143,2362,8,143,1,143,1,143,
  	3,143,2366,8,143,1,143,1,143,3,143,2370,8,143,1,143,1,143,1,143,3,143,
  	2375,8,143,1,143,1,143,3,143,2379,8,143,1,143,1,143,3,143,2383,8,143,
  	1,143,1,143,3,143,2387,8,143,1,143,1,143,1,143,3,143,2392,8,143,1,143,
  	3,143,2395,8,143,1,143,3,143,2398,8,143,1,143,1,143,1,143,1,143,3,143,
  	2404,8,143,1,143,1,143,3,143,2408,8,143,1,143,1,143,3,143,2412,8,143,
  	3,143,2414,8,143,1,143,1,143,3,143,2418,8,143,1,143,1,143,3,143,2422,
  	8,143,1,143,1,143,3,143,2426,8,143,5,143,2428,8,143,10,143,12,143,2431,
  	9,143,3,143,2433,8,143,1,143,1,143,3,143,2437,8,143,1,144,1,144,1,145,
  	1,145,3,145,2443,8,145,1,145,1,145,1,145,3,145,2448,8,145,3,145,2450,
  	8,145,1,145,1,145,1,146,1,146,3,146,2456,8,146,1,146,4,146,2459,8,146,
  	11,146,12,146,2460,1,147,1,147,3,147,2465,8,147,1,147,1,147,3,147,2469,
  	8,147,1,147,1,147,3,147,2473,8,147,1,147,1,147,3,147,2477,8,147,1,147,
  	3,147,2480,8,147,1,147,3,147,2483,8,147,1,147,1,147,1,148,1,148,3,148,
  	2489,8,148,1,148,1,148,3,148,2493,8,148,1,148,1,148,3,148,2497,8,148,
  	1,148,1,148,3,148,2501,8,148,1,148,3,148,2504,8,148,1,148,3,148,2507,
  	8,148,1,148,1,148,1,149,1,149,3,149,2513,8,149,1,149,1,149,3,149,2517,
  	8,149,1,150,1,150,3,150,2521,8,150,1,150,4,150,2524,8,150,11,150,12,150,
  	2525,1,150,1,150,3,150,2530,8,150,1,150,1,150,3,150,2534,8,150,1,150,
  	4,150,2537,8,150,11,150,12,150,2538,3,150,2541,8,150,1,150,3,150,2544,
  	8,150,1,150,1,150,3,150,2548,8,150,1,150,3,150,2551,8,150,1,150,3,150,
  	2554,8,150,1,150,1,150,1,151,1,151,3,151,2560,8,151,1,151,1,151,3,151,
  	2564,8,151,1,151,1,151,3,151,2568,8,151,1,151,1,151,1,152,1,152,1,153,
  	1,153,3,153,2576,8,153,1,154,1,154,1,154,3,154,2581,8,154,1,155,1,155,
  	3,155,2585,8,155,1,155,1,155,1,156,1,156,1,157,1,157,1,158,1,158,1,159,
  	1,159,1,160,1,160,1,160,1,160,1,160,3,160,2602,8,160,1,161,1,161,1,162,
  	1,162,1,163,1,163,1,164,1,164,1,164,0,1,96,165,0,2,4,6,8,10,12,14,16,
  	18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
  	64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
  	108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
  	144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
  	180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
  	216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,
  	252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,
  	288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,
  	324,326,328,0,11,2,0,60,60,62,63,1,0,118,121,2,0,6,6,13,17,1,0,19,20,
  	2,0,21,21,129,129,2,0,22,23,112,112,1,0,138,139,14,0,48,48,50,50,56,59,
  	63,70,73,73,78,78,80,80,83,83,98,99,113,113,132,132,135,135,141,141,145,
  	145,2,0,14,14,27,30,2,0,16,16,31,34,2,0,35,45,129,129,2955,0,330,1,0,
  	0,0,2,350,1,0,0,0,4,384,1,0,0,0,6,386,1,0,0,0,8,408,1,0,0,0,10,450,1,
  	0,0,0,12,452,1,0,0,0,14,482,1,0,0,0,16,503,1,0,0,0,18,514,1,0,0,0,20,
  	520,1,0,0,0,22,552,1,0,0,0,24,562,1,0,0,0,26,576,1,0,0,0,28,580,1,0,0,
  	0,30,584,1,0,0,0,32,596,1,0,0,0,34,608,1,0,0,0,36,651,1,0,0,0,38,665,
  	1,0,0,0,40,709,1,0,0,0,42,711,1,0,0,0,44,721,1,0,0,0,46,750,1,0,0,0,48,
  	790,1,0,0,0,50,844,1,0,0,0,52,852,1,0,0,0,54,858,1,0,0,0,56,870,1,0,0,
  	0,58,887,1,0,0,0,60,889,1,0,0,0,62,909,1,0,0,0,64,920,1,0,0,0,66,922,
  	1,0,0,0,68,935,1,0,0,0,70,939,1,0,0,0,72,945,1,0,0,0,74,957,1,0,0,0,76,
  	959,1,0,0,0,78,968,1,0,0,0,80,972,1,0,0,0,82,976,1,0,0,0,84,982,1,0,0,
  	0,86,990,1,0,0,0,88,1004,1,0,0,0,90,1008,1,0,0,0,92,1022,1,0,0,0,94,1029,
  	1,0,0,0,96,1119,1,0,0,0,98,1128,1,0,0,0,100,1135,1,0,0,0,102,1143,1,0,
  	0,0,104,1145,1,0,0,0,106,1147,1,0,0,0,108,1163,1,0,0,0,110,1167,1,0,0,
  	0,112,1169,1,0,0,0,114,1177,1,0,0,0,116,1181,1,0,0,0,118,1204,1,0,0,0,
  	120,1218,1,0,0,0,122,1222,1,0,0,0,124,1269,1,0,0,0,126,1275,1,0,0,0,128,
  	1287,1,0,0,0,130,1305,1,0,0,0,132,1311,1,0,0,0,134,1313,1,0,0,0,136,1353,
  	1,0,0,0,138,1364,1,0,0,0,140,1382,1,0,0,0,142,1396,1,0,0,0,144,1412,1,
  	0,0,0,146,1426,1,0,0,0,148,1437,1,0,0,0,150,1448,1,0,0,0,152,1458,1,0,
  	0,0,154,1464,1,0,0,0,156,1486,1,0,0,0,158,1488,1,0,0,0,160,1506,1,0,0,
  	0,162,1518,1,0,0,0,164,1538,1,0,0,0,166,1546,1,0,0,0,168,1553,1,0,0,0,
  	170,1597,1,0,0,0,172,1606,1,0,0,0,174,1608,1,0,0,0,176,1623,1,0,0,0,178,
  	1627,1,0,0,0,180,1631,1,0,0,0,182,1638,1,0,0,0,184,1642,1,0,0,0,186,1667,
  	1,0,0,0,188,1669,1,0,0,0,190,1685,1,0,0,0,192,1687,1,0,0,0,194,1711,1,
  	0,0,0,196,1761,1,0,0,0,198,1763,1,0,0,0,200,1793,1,0,0,0,202,1834,1,0,
  	0,0,204,1855,1,0,0,0,206,1865,1,0,0,0,208,1871,1,0,0,0,210,1906,1,0,0,
  	0,212,1952,1,0,0,0,214,1964,1,0,0,0,216,1976,1,0,0,0,218,1978,1,0,0,0,
  	220,1980,1,0,0,0,222,1982,1,0,0,0,224,1984,1,0,0,0,226,1986,1,0,0,0,228,
  	1996,1,0,0,0,230,2006,1,0,0,0,232,2022,1,0,0,0,234,2075,1,0,0,0,236,2077,
  	1,0,0,0,238,2079,1,0,0,0,240,2093,1,0,0,0,242,2107,1,0,0,0,244,2122,1,
  	0,0,0,246,2124,1,0,0,0,248,2139,1,0,0,0,250,2141,1,0,0,0,252,2156,1,0,
  	0,0,254,2158,1,0,0,0,256,2178,1,0,0,0,258,2188,1,0,0,0,260,2217,1,0,0,
  	0,262,2230,1,0,0,0,264,2238,1,0,0,0,266,2252,1,0,0,0,268,2254,1,0,0,0,
  	270,2273,1,0,0,0,272,2281,1,0,0,0,274,2283,1,0,0,0,276,2285,1,0,0,0,278,
  	2306,1,0,0,0,280,2313,1,0,0,0,282,2338,1,0,0,0,284,2349,1,0,0,0,286,2436,
  	1,0,0,0,288,2438,1,0,0,0,290,2449,1,0,0,0,292,2453,1,0,0,0,294,2462,1,
  	0,0,0,296,2486,1,0,0,0,298,2510,1,0,0,0,300,2540,1,0,0,0,302,2557,1,0,
  	0,0,304,2571,1,0,0,0,306,2575,1,0,0,0,308,2577,1,0,0,0,310,2582,1,0,0,
  	0,312,2588,1,0,0,0,314,2590,1,0,0,0,316,2592,1,0,0,0,318,2594,1,0,0,0,
  	320,2601,1,0,0,0,322,2603,1,0,0,0,324,2605,1,0,0,0,326,2607,1,0,0,0,328,
  	2609,1,0,0,0,330,341,3,2,1,0,331,333,5,162,0,0,332,331,1,0,0,0,332,333,
  	1,0,0,0,333,334,1,0,0,0,334,336,5,1,0,0,335,337,5,162,0,0,336,335,1,0,
  	0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,340,3,2,1,0,339,332,1,0,0,0,340,
  	343,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,345,1,0,0,0,343,341,1,
  	0,0,0,344,346,5,162,0,0,345,344,1,0,0,0,345,346,1,0,0,0,346,347,1,0,0,
  	0,347,348,5,0,0,1,348,1,1,0,0,0,349,351,3,102,51,0,350,349,1,0,0,0,350,
  	351,1,0,0,0,351,353,1,0,0,0,352,354,5,162,0,0,353,352,1,0,0,0,353,354,
  	1,0,0,0,354,355,1,0,0,0,355,360,3,4,2,0,356,358,5,162,0,0,357,356,1,0,
  	0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,361,5,1,0,0,360,357,1,0,0,0,360,
  	361,1,0,0,0,361,3,1,0,0,0,362,385,3,116,58,0,363,385,3,44,22,0,364,385,
  	3,46,23,0,365,385,3,48,24,0,366,385,3,52,26,0,367,385,3,54,27,0,368,385,
  	3,56,28,0,369,385,3,70,35,0,370,385,3,72,36,0,371,385,3,6,3,0,372,385,
  	3,12,6,0,373,385,3,14,7,0,374,385,3,30,15,0,375,385,3,34,17,0,376,385,
  	3,32,16,0,377,385,3,108,54,0,378,385,3,110,55,0,379,385,3,16,8,0,380,
  	385,3,18,9,0,381,385,3,20,10,0,382,385,3,26,13,0,383,385,3,28,14,0,384,
  	362,1,0,0,0,384,363,1,0,0,0,384,364,1,0,0,0,384,365,1,0,0,0,384,366,1,
  	0,0,0,384,367,1,0,0,0,384,368,1,0,0,0,384,369,1,0,0,0,384,370,1,0,0,0,
  	384,371,1,0,0,0,384,372,1,0,0,0,384,373,1,0,0,0,384,374,1,0,0,0,384,375,
  	1,0,0,0,384,376,1,0,0,0,384,377,1,0,0,0,384,378,1,0,0,0,384,379,1,0,0,
  	0,384,380,1,0,0,0,384,381,1,0,0,0,384,382,1,0,0,0,384,383,1,0,0,0,385,
  	5,1,0,0,0,386,387,5,53,0,0,387,388,5,162,0,0,388,397,3,318,159,0,389,
  	391,5,162,0,0,390,389,1,0,0,0,390,391,1,0,0,0,391,392,1,0,0,0,392,394,
  	3,8,4,0,393,395,5,162,0,0,394,393,1,0,0,0,394,395,1,0,0,0,395,398,1,0,
  	0,0,396,398,5,162,0,0,397,390,1,0,0,0,397,396,1,0,0,0,398,399,1,0,0,0,
  	399,400,5,54,0,0,400,401,5,162,0,0,401,406,3,10,5,0,402,404,5,162,0,0,
  	403,402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,407,3,42,21,0,406,
  	403,1,0,0,0,406,407,1,0,0,0,407,7,1,0,0,0,408,410,5,2,0,0,409,411,5,162,
  	0,0,410,409,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,423,3,318,159,
  	0,413,415,5,162,0,0,414,413,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,
  	418,5,3,0,0,417,419,5,162,0,0,418,417,1,0,0,0,418,419,1,0,0,0,419,420,
  	1,0,0,0,420,422,3,318,159,0,421,414,1,0,0,0,422,425,1,0,0,0,423,421,1,
  	0,0,0,423,424,1,0,0,0,424,427,1,0,0,0,425,423,1,0,0,0,426,428,5,162,0,
  	0,427,426,1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,430,5,4,0,0,430,
  	9,1,0,0,0,431,451,3,40,20,0,432,434,5,2,0,0,433,435,5,162,0,0,434,433,
  	1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,438,3,116,58,0,437,439,5,
  	162,0,0,438,437,1,0,0,0,438,439,1,0,0,0,439,440,1,0,0,0,440,441,5,4,0,
  	0,441,451,1,0,0,0,442,451,3,304,152,0,443,444,3,304,152,0,444,446,5,5,
  	0,0,445,447,5,162,0,0,446,445,1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,
  	448,449,3,318,159,0,449,451,1,0,0,0,450,431,1,0,0,0,450,432,1,0,0,0,450,
  	442,1,0,0,0,450,443,1,0,0,0,451,11,1,0,0,0,452,453,5,53,0,0,453,454,5,
  	162,0,0,454,455,3,318,159,0,455,456,5,162,0,0,456,457,5,54,0,0,457,458,
  	5,162,0,0,458,460,5,2,0,0,459,461,5,162,0,0,460,459,1,0,0,0,460,461,1,
  	0,0,0,461,462,1,0,0,0,462,473,5,148,0,0,463,465,5,162,0,0,464,463,1,0,
  	0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,468,5,3,0,0,467,469,5,162,0,0,
  	468,467,1,0,0,0,468,469,1,0,0,0,469,470,1,0,0,0,470,472,5,148,0,0,471,
  	464,1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,476,1,
  	0,0,0,475,473,1,0,0,0,476,477,5,4,0,0,477,478,5,162,0,0,478,479,5,115,
  	0,0,479,480,5,162,0,0,480,481,5,55,0,0,481,13,1,0,0,0,482,483,5,53,0,
  	0,483,484,5,162,0,0,484,486,5,2,0,0,485,487,5,162,0,0,486,485,1,0,0,0,
  	486,487,1,0,0,0,487,488,1,0,0,0,488,490,3,116,58,0,489,491,5,162,0,0,
  	490,489,1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,493,5,4,0,0,493,494,
  	5,162,0,0,494,495,5,79,0,0,495,496,5,162,0,0,496,501,5,148,0,0,497,499,
  	5,162,0,0,498,497,1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,502,3,42,
  	21,0,501,498,1,0,0,0,501,502,1,0,0,0,502,15,1,0,0,0,503,504,5,56,0,0,
  	504,505,5,162,0,0,505,506,5,58,0,0,506,507,5,162,0,0,507,512,5,148,0,
  	0,508,510,5,162,0,0,509,508,1,0,0,0,509,510,1,0,0,0,510,511,1,0,0,0,511,
  	513,3,42,21,0,512,509,1,0,0,0,512,513,1,0,0,0,513,17,1,0,0,0,514,515,
  	5,57,0,0,515,516,5,162,0,0,516,517,5,58,0,0,517,518,5,162,0,0,518,519,
  	5,148,0,0,519,19,1,0,0,0,520,521,5,46,0,0,521,522,5,162,0,0,522,527,5,
  	148,0,0,523,524,5,162,0,0,524,525,5,113,0,0,525,526,5,162,0,0,526,528,
  	3,318,159,0,527,523,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,530,5,
  	162,0,0,530,532,5,2,0,0,531,533,5,162,0,0,532,531,1,0,0,0,532,533,1,0,
  	0,0,533,534,1,0,0,0,534,535,5,47,0,0,535,536,5,162,0,0,536,545,3,320,
  	160,0,537,539,5,162,0,0,538,537,1,0,0,0,538,539,1,0,0,0,539,540,1,0,0,
  	0,540,542,5,3,0,0,541,543,5,162,0,0,542,541,1,0,0,0,542,543,1,0,0,0,543,
  	544,1,0,0,0,544,546,3,24,12,0,545,538,1,0,0,0,545,546,1,0,0,0,546,548,
  	1,0,0,0,547,549,5,162,0,0,548,547,1,0,0,0,548,549,1,0,0,0,549,550,1,0,
  	0,0,550,551,5,4,0,0,551,21,1,0,0,0,552,554,3,320,160,0,553,555,5,162,
  	0,0,554,553,1,0,0,0,554,555,1,0,0,0,555,556,1,0,0,0,556,558,5,6,0,0,557,
  	559,5,162,0,0,558,557,1,0,0,0,558,559,1,0,0,0,559,560,1,0,0,0,560,561,
  	3,272,136,0,561,23,1,0,0,0,562,573,3,22,11,0,563,565,5,162,0,0,564,563,
  	1,0,0,0,564,565,1,0,0,0,565,566,1,0,0,0,566,568,5,3,0,0,567,569,5,162,
  	0,0,568,567,1,0,0,0,568,569,1,0,0,0,569,570,1,0,0,0,570,572,3,22,11,0,
  	571,564,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,25,
  	1,0,0,0,575,573,1,0,0,0,576,577,5,107,0,0,577,578,5,162,0,0,578,579,3,
  	318,159,0,579,27,1,0,0,0,580,581,5,48,0,0,581,582,5,162,0,0,582,583,3,
  	318,159,0,583,29,1,0,0,0,584,585,5,49,0,0,585,586,5,162,0,0,586,588,3,
  	320,160,0,587,589,5,162,0,0,588,587,1,0,0,0,588,589,1,0,0,0,589,590,1,
  	0,0,0,590,592,5,6,0,0,591,593,5,162,0,0,592,591,1,0,0,0,592,593,1,0,0,
  	0,593,594,1,0,0,0,594,595,3,224,112,0,595,31,1,0,0,0,596,597,5,50,0,0,
  	597,598,5,162,0,0,598,599,5,105,0,0,599,600,5,162,0,0,600,601,5,60,0,
  	0,601,602,5,162,0,0,602,603,3,318,159,0,603,604,5,162,0,0,604,605,5,136,
  	0,0,605,606,5,162,0,0,606,607,5,148,0,0,607,33,1,0,0,0,608,609,5,103,
  	0,0,609,610,5,162,0,0,610,611,5,51,0,0,611,612,5,162,0,0,612,614,3,288,
  	144,0,613,615,5,162,0,0,614,613,1,0,0,0,614,615,1,0,0,0,615,616,1,0,0,
  	0,616,618,5,2,0,0,617,619,5,162,0,0,618,617,1,0,0,0,618,619,1,0,0,0,619,
  	621,1,0,0,0,620,622,3,36,18,0,621,620,1,0,0,0,621,622,1,0,0,0,622,624,
  	1,0,0,0,623,625,5,162,0,0,624,623,1,0,0,0,624,625,1,0,0,0,625,627,1,0,
  	0,0,626,628,3,38,19,0,627,626,1,0,0,0,627,628,1,0,0,0,628,639,1,0,0,0,
  	629,631,5,162,0,0,630,629,1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,
  	634,5,3,0,0,633,635,5,162,0,0,634,633,1,0,0,0,634,635,1,0,0,0,635,636,
  	1,0,0,0,636,638,3,38,19,0,637,630,1,0,0,0,638,641,1,0,0,0,639,637,1,0,
  	0,0,639,640,1,0,0,0,640,643,1,0,0,0,641,639,1,0,0,0,642,644,5,162,0,0,
  	643,642,1,0,0,0,643,644,1,0,0,0,644,645,1,0,0,0,645,646,5,4,0,0,646,647,
  	5,162,0,0,647,648,5,113,0,0,648,649,5,162,0,0,649,650,3,224,112,0,650,
  	35,1,0,0,0,651,662,3,320,160,0,652,654,5,162,0,0,653,652,1,0,0,0,653,
  	654,1,0,0,0,654,655,1,0,0,0,655,657,5,3,0,0,656,658,5,162,0,0,657,656,
  	1,0,0,0,657,658,1,0,0,0,658,659,1,0,0,0,659,661,3,320,160,0,660,653,1,
  	0,0,0,661,664,1,0,0,0,662,660,1,0,0,0,662,663,1,0,0,0,663,37,1,0,0,0,
  	664,662,1,0,0,0,665,667,3,320,160,0,666,668,5,162,0,0,667,666,1,0,0,0,
  	667,668,1,0,0,0,668,669,1,0,0,0,669,670,5,131,0,0,670,672,5,6,0,0,671,
  	673,5,162,0,0,672,671,1,0,0,0,672,673,1,0,0,0,673,674,1,0,0,0,674,675,
  	3,272,136,0,675,39,1,0,0,0,676,678,5,7,0,0,677,679,5,162,0,0,678,677,
  	1,0,0,0,678,679,1,0,0,0,679,680,1,0,0,0,680,691,5,148,0,0,681,683,5,162,
  	0,0,682,681,1,0,0,0,682,683,1,0,0,0,683,684,1,0,0,0,684,686,5,3,0,0,685,
  	687,5,162,0,0,686,685,1,0,0,0,686,687,1,0,0,0,687,688,1,0,0,0,688,690,
  	5,148,0,0,689,682,1,0,0,0,690,693,1,0,0,0,691,689,1,0,0,0,691,692,1,0,
  	0,0,692,694,1,0,0,0,693,691,1,0,0,0,694,710,5,8,0,0,695,710,5,148,0,0,
  	696,698,5,52,0,0,697,699,5,162,0,0,698,697,1,0,0,0,698,699,1,0,0,0,699,
  	700,1,0,0,0,700,702,5,2,0,0,701,703,5,162,0,0,702,701,1,0,0,0,702,703,
  	1,0,0,0,703,704,1,0,0,0,704,706,5,148,0,0,705,707,5,162,0,0,706,705,1,
  	0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,710,5,4,0,0,709,676,1,0,0,0,
  	709,695,1,0,0,0,709,696,1,0,0,0,710,41,1,0,0,0,711,713,5,2,0,0,712,714,
  	5,162,0,0,713,712,1,0,0,0,713,714,1,0,0,0,714,715,1,0,0,0,715,717,3,24,
  	12,0,716,718,5,162,0,0,717,716,1,0,0,0,717,718,1,0,0,0,718,719,1,0,0,
  	0,719,720,5,4,0,0,720,43,1,0,0,0,721,722,5,103,0,0,722,723,5,162,0,0,
  	723,724,5,59,0,0,724,725,5,162,0,0,725,726,5,60,0,0,726,727,5,162,0,0,
  	727,729,3,318,159,0,728,730,5,162,0,0,729,728,1,0,0,0,729,730,1,0,0,0,
  	730,731,1,0,0,0,731,733,5,2,0,0,732,734,5,162,0,0,733,732,1,0,0,0,733,
  	734,1,0,0,0,734,735,1,0,0,0,735,737,3,90,45,0,736,738,5,162,0,0,737,736,
  	1,0,0,0,737,738,1,0,0,0,738,739,1,0,0,0,739,741,5,3,0,0,740,742,5,162,
  	0,0,741,740,1,0,0,0,741,742,1,0,0,0,742,743,1,0,0,0,743,744,3,94,47,0,
  	744,746,1,0,0,0,745,747,5,162,0,0,746,745,1,0,0,0,746,747,1,0,0,0,747,
  	748,1,0,0,0,748,749,5,4,0,0,749,45,1,0,0,0,750,751,5,103,0,0,751,752,
  	5,162,0,0,752,753,5,78,0,0,753,754,5,162,0,0,754,755,5,60,0,0,755,756,
  	5,162,0,0,756,758,3,318,159,0,757,759,5,162,0,0,758,757,1,0,0,0,758,759,
  	1,0,0,0,759,760,1,0,0,0,760,762,5,2,0,0,761,763,5,162,0,0,762,761,1,0,
  	0,0,762,763,1,0,0,0,763,764,1,0,0,0,764,766,3,50,25,0,765,767,5,162,0,
  	0,766,765,1,0,0,0,766,767,1,0,0,0,767,776,1,0,0,0,768,770,5,3,0,0,769,
  	771,5,162,0,0,770,769,1,0,0,0,770,771,1,0,0,0,771,772,1,0,0,0,772,774,
  	3,90,45,0,773,775,5,162,0,0,774,773,1,0,0,0,774,775,1,0,0,0,775,777,1,
  	0,0,0,776,768,1,0,0,0,776,777,1,0,0,0,777,786,1,0,0,0,778,780,5,3,0,0,
  	779,781,5,162,0,0,780,779,1,0,0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,
  	784,3,320,160,0,783,785,5,162,0,0,784,783,1,0,0,0,784,785,1,0,0,0,785,
  	787,1,0,0,0,786,778,1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,0,788,789,5,
  	4,0,0,789,47,1,0,0,0,790,791,5,103,0,0,791,792,5,162,0,0,792,793,5,78,
  	0,0,793,794,5,162,0,0,794,795,5,60,0,0,795,796,5,162,0,0,796,797,5,61,
  	0,0,797,798,5,162,0,0,798,800,3,318,159,0,799,801,5,162,0,0,800,799,1,
  	0,0,0,800,801,1,0,0,0,801,802,1,0,0,0,802,804,5,2,0,0,803,805,5,162,0,
  	0,804,803,1,0,0,0,804,805,1,0,0,0,805,806,1,0,0,0,806,815,3,50,25,0,807,
  	809,5,162,0,0,808,807,1,0,0,0,808,809,1,0,0,0,809,810,1,0,0,0,810,812,
  	5,3,0,0,811,813,5,162,0,0,812,811,1,0,0,0,812,813,1,0,0,0,813,814,1,0,
  	0,0,814,816,3,50,25,0,815,808,1,0,0,0,816,817,1,0,0,0,817,815,1,0,0,0,
  	817,818,1,0,0,0,818,820,1,0,0,0,819,821,5,162,0,0,820,819,1,0,0,0,820,
  	821,1,0,0,0,821,830,1,0,0,0,822,824,5,3,0,0,823,825,5,162,0,0,824,823,
  	1,0,0,0,824,825,1,0,0,0,825,826,1,0,0,0,826,828,3,90,45,0,827,829,5,162,
  	0,0,828,827,1,0,0,0,828,829,1,0,0,0,829,831,1,0,0,0,830,822,1,0,0,0,830,
  	831,1,0,0,0,831,840,1,0,0,0,832,834,5,3,0,0,833,835,5,162,0,0,834,833,
  	1,0,0,0,834,835,1,0,0,0,835,836,1,0,0,0,836,838,3,320,160,0,837,839,5,
  	162,0,0,838,837,1,0,0,0,838,839,1,0,0,0,839,841,1,0,0,0,840,832,1,0,0,
  	0,840,841,1,0,0,0,841,842,1,0,0,0,842,843,5,4,0,0,843,49,1,0,0,0,844,
  	845,5,54,0,0,845,846,5,162,0,0,846,847,3,318,159,0,847,848,5,162,0,0,
  	848,849,5,79,0,0,849,850,5,162,0,0,850,851,3,318,159,0,851,51,1,0,0,0,
  	852,853,5,103,0,0,853,854,5,162,0,0,854,855,5,62,0,0,855,856,5,162,0,
  	0,856,857,3,318,159,0,857,53,1,0,0,0,858,859,5,103,0,0,859,860,5,162,
  	0,0,860,861,5,63,0,0,861,862,5,162,0,0,862,867,3,318,159,0,863,864,5,
  	162,0,0,864,866,3,58,29,0,865,863,1,0,0,0,866,869,1,0,0,0,867,865,1,0,
  	0,0,867,868,1,0,0,0,868,55,1,0,0,0,869,867,1,0,0,0,870,871,5,103,0,0,
  	871,872,5,162,0,0,872,873,5,64,0,0,873,874,5,162,0,0,874,875,3,318,159,
  	0,875,876,5,162,0,0,876,877,5,113,0,0,877,878,5,162,0,0,878,880,3,96,
  	48,0,879,881,5,162,0,0,880,879,1,0,0,0,880,881,1,0,0,0,881,57,1,0,0,0,
  	882,888,3,60,30,0,883,888,3,62,31,0,884,888,3,64,32,0,885,888,3,66,33,
  	0,886,888,3,68,34,0,887,882,1,0,0,0,887,883,1,0,0,0,887,884,1,0,0,0,887,
  	885,1,0,0,0,887,886,1,0,0,0,888,59,1,0,0,0,889,890,5,65,0,0,890,893,5,
  	162,0,0,891,892,5,115,0,0,892,894,5,162,0,0,893,891,1,0,0,0,893,894,1,
  	0,0,0,894,896,1,0,0,0,895,897,5,129,0,0,896,895,1,0,0,0,896,897,1,0,0,
  	0,897,898,1,0,0,0,898,899,3,314,157,0,899,61,1,0,0,0,900,901,5,69,0,0,
  	901,902,5,162,0,0,902,910,5,66,0,0,903,904,5,66,0,0,904,906,5,162,0,0,
  	905,907,5,129,0,0,906,905,1,0,0,0,906,907,1,0,0,0,907,908,1,0,0,0,908,
  	910,3,314,157,0,909,900,1,0,0,0,909,903,1,0,0,0,910,63,1,0,0,0,911,912,
  	5,69,0,0,912,913,5,162,0,0,913,921,5,67,0,0,914,915,5,67,0,0,915,917,
  	5,162,0,0,916,918,5,129,0,0,917,916,1,0,0,0,917,918,1,0,0,0,918,919,1,
  	0,0,0,919,921,3,314,157,0,920,911,1,0,0,0,920,914,1,0,0,0,921,65,1,0,
  	0,0,922,923,5,68,0,0,923,926,5,162,0,0,924,925,5,109,0,0,925,927,5,162,
  	0,0,926,924,1,0,0,0,926,927,1,0,0,0,927,929,1,0,0,0,928,930,5,129,0,0,
  	929,928,1,0,0,0,929,930,1,0,0,0,930,931,1,0,0,0,931,932,3,314,157,0,932,
  	67,1,0,0,0,933,934,5,69,0,0,934,936,5,162,0,0,935,933,1,0,0,0,935,936,
  	1,0,0,0,936,937,1,0,0,0,937,938,5,70,0,0,938,69,1,0,0,0,939,940,5,71,
  	0,0,940,941,5,162,0,0,941,942,7,0,0,0,942,943,5,162,0,0,943,944,3,318,
  	159,0,944,71,1,0,0,0,945,946,5,72,0,0,946,947,5,162,0,0,947,948,5,60,
  	0,0,948,949,5,162,0,0,949,950,3,318,159,0,950,951,5,162,0,0,951,952,3,
  	74,37,0,952,73,1,0,0,0,953,958,3,76,38,0,954,958,3,80,40,0,955,958,3,
  	82,41,0,956,958,3,84,42,0,957,953,1,0,0,0,957,954,1,0,0,0,957,955,1,0,
  	0,0,957,956,1,0,0,0,958,75,1,0,0,0,959,960,5,75,0,0,960,961,5,162,0,0,
  	961,962,3,312,156,0,962,963,5,162,0,0,963,966,3,96,48,0,964,965,5,162,
  	0,0,965,967,3,78,39,0,966,964,1,0,0,0,966,967,1,0,0,0,967,77,1,0,0,0,
  	968,969,5,73,0,0,969,970,5,162,0,0,970,971,3,224,112,0,971,79,1,0,0,0,
  	972,973,5,71,0,0,973,974,5,162,0,0,974,975,3,312,156,0,975,81,1,0,0,0,
  	976,977,5,74,0,0,977,978,5,162,0,0,978,979,5,79,0,0,979,980,5,162,0,0,
  	980,981,3,318,159,0,981,83,1,0,0,0,982,983,5,74,0,0,983,984,5,162,0,0,
  	984,985,3,312,156,0,985,986,5,162,0,0,986,987,5,79,0,0,987,988,5,162,
  	0,0,988,989,3,312,156,0,989,85,1,0,0,0,990,1001,3,88,44,0,991,993,5,162,
  	0,0,992,991,1,0,0,0,992,993,1,0,0,0,993,994,1,0,0,0,994,996,5,3,0,0,995,
  	997,5,162,0,0,996,995,1,0,0,0,996,997,1,0,0,0,997,998,1,0,0,0,998,1000,
  	3,88,44,0,999,992,1,0,0,0,1000,1003,1,0,0,0,1001,999,1,0,0,0,1001,1002,
  	1,0,0,0,1002,87,1,0,0,0,1003,1001,1,0,0,0,1004,1005,3,312,156,0,1005,
  	1006,5,162,0,0,1006,1007,3,96,48,0,1007,89,1,0,0,0,1008,1019,3,92,46,
  	0,1009,1011,5,162,0,0,1010,1009,1,0,0,0,1010,1011,1,0,0,0,1011,1012,1,
  	0,0,0,1012,1014,5,3,0,0,1013,1015,5,162,0,0,1014,1013,1,0,0,0,1014,1015,
  	1,0,0,0,1015,1016,1,0,0,0,1016,1018,3,92,46,0,1017,1010,1,0,0,0,1018,
  	1021,1,0,0,0,1019,1017,1,0,0,0,1019,1020,1,0,0,0,1020,91,1,0,0,0,1021,
  	1019,1,0,0,0,1022,1023,3,312,156,0,1023,1024,5,162,0,0,1024,1027,3,96,
  	48,0,1025,1026,5,162,0,0,1026,1028,3,78,39,0,1027,1025,1,0,0,0,1027,1028,
  	1,0,0,0,1028,93,1,0,0,0,1029,1030,5,76,0,0,1030,1031,5,162,0,0,1031,1033,
  	5,77,0,0,1032,1034,5,162,0,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,
  	1035,1,0,0,0,1035,1037,5,2,0,0,1036,1038,5,162,0,0,1037,1036,1,0,0,0,
  	1037,1038,1,0,0,0,1038,1039,1,0,0,0,1039,1041,3,312,156,0,1040,1042,5,
  	162,0,0,1041,1040,1,0,0,0,1041,1042,1,0,0,0,1042,1043,1,0,0,0,1043,1044,
  	5,4,0,0,1044,95,1,0,0,0,1045,1046,6,48,-1,0,1046,1120,3,320,160,0,1047,
  	1049,5,94,0,0,1048,1050,5,162,0,0,1049,1048,1,0,0,0,1049,1050,1,0,0,0,
  	1050,1051,1,0,0,0,1051,1053,5,2,0,0,1052,1054,5,162,0,0,1053,1052,1,0,
  	0,0,1053,1054,1,0,0,0,1054,1055,1,0,0,0,1055,1057,3,86,43,0,1056,1058,
  	5,162,0,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,1059,1,0,0,0,1059,
  	1060,5,4,0,0,1060,1120,1,0,0,0,1061,1063,3,320,160,0,1062,1064,5,162,
  	0,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,1065,1,0,0,0,1065,1067,5,
  	2,0,0,1066,1068,5,162,0,0,1067,1066,1,0,0,0,1067,1068,1,0,0,0,1068,1069,
  	1,0,0,0,1069,1071,3,86,43,0,1070,1072,5,162,0,0,1071,1070,1,0,0,0,1071,
  	1072,1,0,0,0,1072,1073,1,0,0,0,1073,1074,5,4,0,0,1074,1120,1,0,0,0,1075,
  	1077,3,320,160,0,1076,1078,5,162,0,0,1077,1076,1,0,0,0,1077,1078,1,0,
  	0,0,1078,1079,1,0,0,0,1079,1081,5,2,0,0,1080,1082,5,162,0,0,1081,1080,
  	1,0,0,0,1081,1082,1,0,0,0,1082,1083,1,0,0,0,1083,1085,3,96,48,0,1084,
  	1086,5,162,0,0,1085,1084,1,0,0,0,1085,1086,1,0,0,0,1086,1087,1,0,0,0,
  	1087,1089,5,3,0,0,1088,1090,5,162,0,0,1089,1088,1,0,0,0,1089,1090,1,0,
  	0,0,1090,1091,1,0,0,0,1091,1093,3,96,48,0,1092,1094,5,162,0,0,1093,1092,
  	1,0,0,0,1093,1094,1,0,0,0,1094,1095,1,0,0,0,1095,1096,5,4,0,0,1096,1120,
  	1,0,0,0,1097,1099,5,80,0,0,1098,1100,5,162,0,0,1099,1098,1,0,0,0,1099,
  	1100,1,0,0,0,1100,1101,1,0,0,0,1101,1103,5,2,0,0,1102,1104,5,162,0,0,
  	1103,1102,1,0,0,0,1103,1104,1,0,0,0,1104,1105,1,0,0,0,1105,1107,3,314,
  	157,0,1106,1108,5,162,0,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,1109,
  	1,0,0,0,1109,1111,5,3,0,0,1110,1112,5,162,0,0,1111,1110,1,0,0,0,1111,
  	1112,1,0,0,0,1112,1113,1,0,0,0,1113,1115,3,314,157,0,1114,1116,5,162,
  	0,0,1115,1114,1,0,0,0,1115,1116,1,0,0,0,1116,1117,1,0,0,0,1117,1118,5,
  	4,0,0,1118,1120,1,0,0,0,1119,1045,1,0,0,0,1119,1047,1,0,0,0,1119,1061,
  	1,0,0,0,1119,1075,1,0,0,0,1119,1097,1,0,0,0,1120,1125,1,0,0,0,1121,1122,
  	10,5,0,0,1122,1124,3,98,49,0,1123,1121,1,0,0,0,1124,1127,1,0,0,0,1125,
  	1123,1,0,0,0,1125,1126,1,0,0,0,1126,97,1,0,0,0,1127,1125,1,0,0,0,1128,
  	1132,3,100,50,0,1129,1131,3,100,50,0,1130,1129,1,0,0,0,1131,1134,1,0,
  	0,0,1132,1130,1,0,0,0,1132,1133,1,0,0,0,1133,99,1,0,0,0,1134,1132,1,0,
  	0,0,1135,1137,5,7,0,0,1136,1138,3,314,157,0,1137,1136,1,0,0,0,1137,1138,
  	1,0,0,0,1138,1139,1,0,0,0,1139,1140,5,8,0,0,1140,101,1,0,0,0,1141,1144,
  	3,104,52,0,1142,1144,3,106,53,0,1143,1141,1,0,0,0,1143,1142,1,0,0,0,1144,
  	103,1,0,0,0,1145,1146,5,81,0,0,1146,105,1,0,0,0,1147,1148,5,82,0,0,1148,
  	107,1,0,0,0,1149,1150,5,83,0,0,1150,1151,5,162,0,0,1151,1164,5,84,0,0,
  	1152,1153,5,83,0,0,1153,1154,5,162,0,0,1154,1155,5,84,0,0,1155,1156,5,
  	162,0,0,1156,1157,5,85,0,0,1157,1158,5,162,0,0,1158,1164,5,86,0,0,1159,
  	1164,5,88,0,0,1160,1164,5,89,0,0,1161,1164,5,90,0,0,1162,1164,5,91,0,
  	0,1163,1149,1,0,0,0,1163,1152,1,0,0,0,1163,1159,1,0,0,0,1163,1160,1,0,
  	0,0,1163,1161,1,0,0,0,1163,1162,1,0,0,0,1164,109,1,0,0,0,1165,1168,3,
  	112,56,0,1166,1168,3,114,57,0,1167,1165,1,0,0,0,1167,1166,1,0,0,0,1168,
  	111,1,0,0,0,1169,1170,5,96,0,0,1170,1171,5,162,0,0,1171,1172,5,93,0,0,
  	1172,1175,5,162,0,0,1173,1176,5,148,0,0,1174,1176,3,304,152,0,1175,1173,
  	1,0,0,0,1175,1174,1,0,0,0,1176,113,1,0,0,0,1177,1178,5,92,0,0,1178,1179,
  	5,162,0,0,1179,1180,3,304,152,0,1180,115,1,0,0,0,1181,1182,3,118,59,0,
  	1182,117,1,0,0,0,1183,1190,3,122,61,0,1184,1186,5,162,0,0,1185,1184,1,
  	0,0,0,1185,1186,1,0,0,0,1186,1187,1,0,0,0,1187,1189,3,120,60,0,1188,1185,
  	1,0,0,0,1189,1192,1,0,0,0,1190,1188,1,0,0,0,1190,1191,1,0,0,0,1191,1205,
  	1,0,0,0,1192,1190,1,0,0,0,1193,1195,3,166,83,0,1194,1196,5,162,0,0,1195,
  	1194,1,0,0,0,1195,1196,1,0,0,0,1196,1198,1,0,0,0,1197,1193,1,0,0,0,1198,
  	1199,1,0,0,0,1199,1197,1,0,0,0,1199,1200,1,0,0,0,1200,1201,1,0,0,0,1201,
  	1202,3,122,61,0,1202,1203,6,59,-1,0,1203,1205,1,0,0,0,1204,1183,1,0,0,
  	0,1204,1197,1,0,0,0,1205,119,1,0,0,0,1206,1207,5,94,0,0,1207,1208,5,162,
  	0,0,1208,1210,5,95,0,0,1209,1211,5,162,0,0,1210,1209,1,0,0,0,1210,1211,
  	1,0,0,0,1211,1212,1,0,0,0,1212,1219,3,122,61,0,1213,1215,5,94,0,0,1214,
  	1216,5,162,0,0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,1217,1,0,0,0,
  	1217,1219,3,122,61,0,1218,1206,1,0,0,0,1218,1213,1,0,0,0,1219,121,1,0,
  	0,0,1220,1223,3,124,62,0,1221,1223,3,126,63,0,1222,1220,1,0,0,0,1222,
  	1221,1,0,0,0,1223,123,1,0,0,0,1224,1226,3,132,66,0,1225,1227,5,162,0,
  	0,1226,1225,1,0,0,0,1226,1227,1,0,0,0,1227,1229,1,0,0,0,1228,1224,1,0,
  	0,0,1229,1232,1,0,0,0,1230,1228,1,0,0,0,1230,1231,1,0,0,0,1231,1233,1,
  	0,0,0,1232,1230,1,0,0,0,1233,1270,3,166,83,0,1234,1236,3,132,66,0,1235,
  	1237,5,162,0,0,1236,1235,1,0,0,0,1236,1237,1,0,0,0,1237,1239,1,0,0,0,
  	1238,1234,1,0,0,0,1239,1242,1,0,0,0,1240,1238,1,0,0,0,1240,1241,1,0,0,
  	0,1241,1243,1,0,0,0,1242,1240,1,0,0,0,1243,1250,3,130,65,0,1244,1246,
  	5,162,0,0,1245,1244,1,0,0,0,1245,1246,1,0,0,0,1246,1247,1,0,0,0,1247,
  	1249,3,130,65,0,1248,1245,1,0,0,0,1249,1252,1,0,0,0,1250,1248,1,0,0,0,
  	1250,1251,1,0,0,0,1251,1257,1,0,0,0,1252,1250,1,0,0,0,1253,1255,5,162,
  	0,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,1256,1,0,0,0,1256,1258,3,
  	166,83,0,1257,1254,1,0,0,0,1257,1258,1,0,0,0,1258,1270,1,0,0,0,1259,1261,
  	3,132,66,0,1260,1262,5,162,0,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,
  	1264,1,0,0,0,1263,1259,1,0,0,0,1264,1265,1,0,0,0,1265,1263,1,0,0,0,1265,
  	1266,1,0,0,0,1266,1267,1,0,0,0,1267,1268,6,62,-1,0,1268,1270,1,0,0,0,
  	1269,1230,1,0,0,0,1269,1240,1,0,0,0,1269,1263,1,0,0,0,1270,125,1,0,0,
  	0,1271,1273,3,128,64,0,1272,1274,5,162,0,0,1273,1272,1,0,0,0,1273,1274,
  	1,0,0,0,1274,1276,1,0,0,0,1275,1271,1,0,0,0,1276,1277,1,0,0,0,1277,1275,
  	1,0,0,0,1277,1278,1,0,0,0,1278,1279,1,0,0,0,1279,1280,3,124,62,0,1280,
  	127,1,0,0,0,1281,1283,3,132,66,0,1282,1284,5,162,0,0,1283,1282,1,0,0,
  	0,1283,1284,1,0,0,0,1284,1286,1,0,0,0,1285,1281,1,0,0,0,1286,1289,1,0,
  	0,0,1287,1285,1,0,0,0,1287,1288,1,0,0,0,1288,1296,1,0,0,0,1289,1287,1,
  	0,0,0,1290,1292,3,130,65,0,1291,1293,5,162,0,0,1292,1291,1,0,0,0,1292,
  	1293,1,0,0,0,1293,1295,1,0,0,0,1294,1290,1,0,0,0,1295,1298,1,0,0,0,1296,
  	1294,1,0,0,0,1296,1297,1,0,0,0,1297,1299,1,0,0,0,1298,1296,1,0,0,0,1299,
  	1300,3,164,82,0,1300,129,1,0,0,0,1301,1306,3,152,76,0,1302,1306,3,154,
  	77,0,1303,1306,3,158,79,0,1304,1306,3,162,81,0,1305,1301,1,0,0,0,1305,
  	1302,1,0,0,0,1305,1303,1,0,0,0,1305,1304,1,0,0,0,1306,131,1,0,0,0,1307,
  	1312,3,148,74,0,1308,1312,3,150,75,0,1309,1312,3,136,68,0,1310,1312,3,
  	134,67,0,1311,1307,1,0,0,0,1311,1308,1,0,0,0,1311,1309,1,0,0,0,1311,1310,
  	1,0,0,0,1312,133,1,0,0,0,1313,1331,5,96,0,0,1314,1315,5,162,0,0,1315,
  	1316,5,109,0,0,1316,1317,5,162,0,0,1317,1319,5,97,0,0,1318,1320,5,162,
  	0,0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,1321,1,0,0,0,1321,1323,5,
  	2,0,0,1322,1324,5,162,0,0,1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,1325,
  	1,0,0,0,1325,1327,3,86,43,0,1326,1328,5,162,0,0,1327,1326,1,0,0,0,1327,
  	1328,1,0,0,0,1328,1329,1,0,0,0,1329,1330,5,4,0,0,1330,1332,1,0,0,0,1331,
  	1314,1,0,0,0,1331,1332,1,0,0,0,1332,1333,1,0,0,0,1333,1334,5,162,0,0,
  	1334,1335,5,54,0,0,1335,1336,5,162,0,0,1336,1341,3,10,5,0,1337,1339,5,
  	162,0,0,1338,1337,1,0,0,0,1338,1339,1,0,0,0,1339,1340,1,0,0,0,1340,1342,
  	3,42,21,0,1341,1338,1,0,0,0,1341,1342,1,0,0,0,1342,1347,1,0,0,0,1343,
  	1345,5,162,0,0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,1346,1,0,0,0,
  	1346,1348,3,182,91,0,1347,1344,1,0,0,0,1347,1348,1,0,0,0,1348,135,1,0,
  	0,0,1349,1351,3,138,69,0,1350,1352,5,162,0,0,1351,1350,1,0,0,0,1351,1352,
  	1,0,0,0,1352,1354,1,0,0,0,1353,1349,1,0,0,0,1353,1354,1,0,0,0,1354,1355,
  	1,0,0,0,1355,1356,5,49,0,0,1356,1357,5,162,0,0,1357,1362,3,286,143,0,
  	1358,1360,5,162,0,0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,1361,1,0,
  	0,0,1361,1363,3,182,91,0,1362,1359,1,0,0,0,1362,1363,1,0,0,0,1363,137,
  	1,0,0,0,1364,1365,5,98,0,0,1365,1366,5,162,0,0,1366,1367,5,99,0,0,1367,
  	1368,5,162,0,0,1368,1370,3,318,159,0,1369,1371,5,162,0,0,1370,1369,1,
  	0,0,0,1370,1371,1,0,0,0,1371,1372,1,0,0,0,1372,1374,5,2,0,0,1373,1375,
  	5,162,0,0,1374,1373,1,0,0,0,1374,1375,1,0,0,0,1375,1376,1,0,0,0,1376,
  	1378,3,140,70,0,1377,1379,5,162,0,0,1378,1377,1,0,0,0,1378,1379,1,0,0,
  	0,1379,1380,1,0,0,0,1380,1381,5,4,0,0,1381,139,1,0,0,0,1382,1393,3,142,
  	71,0,1383,1385,5,162,0,0,1384,1383,1,0,0,0,1384,1385,1,0,0,0,1385,1386,
  	1,0,0,0,1386,1388,5,3,0,0,1387,1389,5,162,0,0,1388,1387,1,0,0,0,1388,
  	1389,1,0,0,0,1389,1390,1,0,0,0,1390,1392,3,142,71,0,1391,1384,1,0,0,0,
  	1392,1395,1,0,0,0,1393,1391,1,0,0,0,1393,1394,1,0,0,0,1394,141,1,0,0,
  	0,1395,1393,1,0,0,0,1396,1410,3,318,159,0,1397,1399,5,162,0,0,1398,1397,
  	1,0,0,0,1398,1399,1,0,0,0,1399,1400,1,0,0,0,1400,1402,5,9,0,0,1401,1403,
  	5,162,0,0,1402,1401,1,0,0,0,1402,1403,1,0,0,0,1403,1404,1,0,0,0,1404,
  	1406,3,144,72,0,1405,1407,5,162,0,0,1406,1405,1,0,0,0,1406,1407,1,0,0,
  	0,1407,1408,1,0,0,0,1408,1409,5,10,0,0,1409,1411,1,0,0,0,1410,1398,1,
  	0,0,0,1410,1411,1,0,0,0,1411,143,1,0,0,0,1412,1423,3,146,73,0,1413,1415,
  	5,162,0,0,1414,1413,1,0,0,0,1414,1415,1,0,0,0,1415,1416,1,0,0,0,1416,
  	1418,5,3,0,0,1417,1419,5,162,0,0,1418,1417,1,0,0,0,1418,1419,1,0,0,0,
  	1419,1420,1,0,0,0,1420,1422,3,146,73,0,1421,1414,1,0,0,0,1422,1425,1,
  	0,0,0,1423,1421,1,0,0,0,1423,1424,1,0,0,0,1424,145,1,0,0,0,1425,1423,
  	1,0,0,0,1426,1429,3,312,156,0,1427,1428,5,162,0,0,1428,1430,3,78,39,0,
  	1429,1427,1,0,0,0,1429,1430,1,0,0,0,1430,1433,1,0,0,0,1431,1432,5,162,
  	0,0,1432,1434,3,182,91,0,1433,1431,1,0,0,0,1433,1434,1,0,0,0,1434,147,
  	1,0,0,0,1435,1436,5,100,0,0,1436,1438,5,162,0,0,1437,1435,1,0,0,0,1437,
  	1438,1,0,0,0,1438,1439,1,0,0,0,1439,1441,5,101,0,0,1440,1442,5,162,0,
  	0,1441,1440,1,0,0,0,1441,1442,1,0,0,0,1442,1443,1,0,0,0,1443,1446,3,184,
  	92,0,1444,1445,5,162,0,0,1445,1447,3,182,91,0,1446,1444,1,0,0,0,1446,
  	1447,1,0,0,0,1447,149,1,0,0,0,1448,1450,5,102,0,0,1449,1451,5,162,0,0,
  	1450,1449,1,0,0,0,1450,1451,1,0,0,0,1451,1452,1,0,0,0,1452,1453,3,224,
  	112,0,1453,1454,5,162,0,0,1454,1455,5,113,0,0,1455,1456,5,162,0,0,1456,
  	1457,3,304,152,0,1457,151,1,0,0,0,1458,1460,5,103,0,0,1459,1461,5,162,
  	0,0,1460,1459,1,0,0,0,1460,1461,1,0,0,0,1461,1462,1,0,0,0,1462,1463,3,
  	184,92,0,1463,153,1,0,0,0,1464,1466,5,104,0,0,1465,1467,5,162,0,0,1466,
  	1465,1,0,0,0,1466,1467,1,0,0,0,1467,1468,1,0,0,0,1468,1473,3,184,92,0,
  	1469,1470,5,162,0,0,1470,1472,3,156,78,0,1471,1469,1,0,0,0,1472,1475,
  	1,0,0,0,1473,1471,1,0,0,0,1473,1474,1,0,0,0,1474,155,1,0,0,0,1475,1473,
  	1,0,0,0,1476,1477,5,105,0,0,1477,1478,5,162,0,0,1478,1479,5,101,0,0,1479,
  	1480,5,162,0,0,1480,1487,3,158,79,0,1481,1482,5,105,0,0,1482,1483,5,162,
  	0,0,1483,1484,5,103,0,0,1484,1485,5,162,0,0,1485,1487,3,158,79,0,1486,
  	1476,1,0,0,0,1486,1481,1,0,0,0,1487,157,1,0,0,0,1488,1490,5,106,0,0,1489,
  	1491,5,162,0,0,1490,1489,1,0,0,0,1490,1491,1,0,0,0,1491,1492,1,0,0,0,
  	1492,1503,3,160,80,0,1493,1495,5,162,0,0,1494,1493,1,0,0,0,1494,1495,
  	1,0,0,0,1495,1496,1,0,0,0,1496,1498,5,3,0,0,1497,1499,5,162,0,0,1498,
  	1497,1,0,0,0,1498,1499,1,0,0,0,1499,1500,1,0,0,0,1500,1502,3,160,80,0,
  	1501,1494,1,0,0,0,1502,1505,1,0,0,0,1503,1501,1,0,0,0,1503,1504,1,0,0,
  	0,1504,159,1,0,0,0,1505,1503,1,0,0,0,1506,1508,3,310,155,0,1507,1509,
  	5,162,0,0,1508,1507,1,0,0,0,1508,1509,1,0,0,0,1509,1510,1,0,0,0,1510,
  	1512,5,6,0,0,1511,1513,5,162,0,0,1512,1511,1,0,0,0,1512,1513,1,0,0,0,
  	1513,1514,1,0,0,0,1514,1515,3,224,112,0,1515,161,1,0,0,0,1516,1517,5,
  	107,0,0,1517,1519,5,162,0,0,1518,1516,1,0,0,0,1518,1519,1,0,0,0,1519,
  	1520,1,0,0,0,1520,1522,5,108,0,0,1521,1523,5,162,0,0,1522,1521,1,0,0,
  	0,1522,1523,1,0,0,0,1523,1524,1,0,0,0,1524,1535,3,224,112,0,1525,1527,
  	5,162,0,0,1526,1525,1,0,0,0,1526,1527,1,0,0,0,1527,1528,1,0,0,0,1528,
  	1530,5,3,0,0,1529,1531,5,162,0,0,1530,1529,1,0,0,0,1530,1531,1,0,0,0,
  	1531,1532,1,0,0,0,1532,1534,3,224,112,0,1533,1526,1,0,0,0,1534,1537,1,
  	0,0,0,1535,1533,1,0,0,0,1535,1536,1,0,0,0,1536,163,1,0,0,0,1537,1535,
  	1,0,0,0,1538,1539,5,109,0,0,1539,1544,3,168,84,0,1540,1542,5,162,0,0,
  	1541,1540,1,0,0,0,1541,1542,1,0,0,0,1542,1543,1,0,0,0,1543,1545,3,182,
  	91,0,1544,1541,1,0,0,0,1544,1545,1,0,0,0,1545,165,1,0,0,0,1546,1547,5,
  	110,0,0,1547,1548,3,168,84,0,1548,167,1,0,0,0,1549,1551,5,162,0,0,1550,
  	1549,1,0,0,0,1550,1551,1,0,0,0,1551,1552,1,0,0,0,1552,1554,5,111,0,0,
  	1553,1550,1,0,0,0,1553,1554,1,0,0,0,1554,1555,1,0,0,0,1555,1556,5,162,
  	0,0,1556,1559,3,170,85,0,1557,1558,5,162,0,0,1558,1560,3,174,87,0,1559,
  	1557,1,0,0,0,1559,1560,1,0,0,0,1560,1563,1,0,0,0,1561,1562,5,162,0,0,
  	1562,1564,3,176,88,0,1563,1561,1,0,0,0,1563,1564,1,0,0,0,1564,1567,1,
  	0,0,0,1565,1566,5,162,0,0,1566,1568,3,178,89,0,1567,1565,1,0,0,0,1567,
  	1568,1,0,0,0,1568,169,1,0,0,0,1569,1580,5,112,0,0,1570,1572,5,162,0,0,
  	1571,1570,1,0,0,0,1571,1572,1,0,0,0,1572,1573,1,0,0,0,1573,1575,5,3,0,
  	0,1574,1576,5,162,0,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,1577,1,
  	0,0,0,1577,1579,3,172,86,0,1578,1571,1,0,0,0,1579,1582,1,0,0,0,1580,1578,
  	1,0,0,0,1580,1581,1,0,0,0,1581,1598,1,0,0,0,1582,1580,1,0,0,0,1583,1594,
  	3,172,86,0,1584,1586,5,162,0,0,1585,1584,1,0,0,0,1585,1586,1,0,0,0,1586,
  	1587,1,0,0,0,1587,1589,5,3,0,0,1588,1590,5,162,0,0,1589,1588,1,0,0,0,
  	1589,1590,1,0,0,0,1590,1591,1,0,0,0,1591,1593,3,172,86,0,1592,1585,1,
  	0,0,0,1593,1596,1,0,0,0,1594,1592,1,0,0,0,1594,1595,1,0,0,0,1595,1598,
  	1,0,0,0,1596,1594,1,0,0,0,1597,1569,1,0,0,0,1597,1583,1,0,0,0,1598,171,
  	1,0,0,0,1599,1600,3,224,112,0,1600,1601,5,162,0,0,1601,1602,5,113,0,0,
  	1602,1603,5,162,0,0,1603,1604,3,304,152,0,1604,1607,1,0,0,0,1605,1607,
  	3,224,112,0,1606,1599,1,0,0,0,1606,1605,1,0,0,0,1607,173,1,0,0,0,1608,
  	1609,5,114,0,0,1609,1610,5,162,0,0,1610,1611,5,115,0,0,1611,1612,5,162,
  	0,0,1612,1620,3,180,90,0,1613,1615,5,3,0,0,1614,1616,5,162,0,0,1615,1614,
  	1,0,0,0,1615,1616,1,0,0,0,1616,1617,1,0,0,0,1617,1619,3,180,90,0,1618,
  	1613,1,0,0,0,1619,1622,1,0,0,0,1620,1618,1,0,0,0,1620,1621,1,0,0,0,1621,
  	175,1,0,0,0,1622,1620,1,0,0,0,1623,1624,5,116,0,0,1624,1625,5,162,0,0,
  	1625,1626,3,224,112,0,1626,177,1,0,0,0,1627,1628,5,117,0,0,1628,1629,
  	5,162,0,0,1629,1630,3,224,112,0,1630,179,1,0,0,0,1631,1636,3,224,112,
  	0,1632,1634,5,162,0,0,1633,1632,1,0,0,0,1633,1634,1,0,0,0,1634,1635,1,
  	0,0,0,1635,1637,7,1,0,0,1636,1633,1,0,0,0,1636,1637,1,0,0,0,1637,181,
  	1,0,0,0,1638,1639,5,122,0,0,1639,1640,5,162,0,0,1640,1641,3,224,112,0,
  	1641,183,1,0,0,0,1642,1653,3,186,93,0,1643,1645,5,162,0,0,1644,1643,1,
  	0,0,0,1644,1645,1,0,0,0,1645,1646,1,0,0,0,1646,1648,5,3,0,0,1647,1649,
  	5,162,0,0,1648,1647,1,0,0,0,1648,1649,1,0,0,0,1649,1650,1,0,0,0,1650,
  	1652,3,186,93,0,1651,1644,1,0,0,0,1652,1655,1,0,0,0,1653,1651,1,0,0,0,
  	1653,1654,1,0,0,0,1654,185,1,0,0,0,1655,1653,1,0,0,0,1656,1658,3,304,
  	152,0,1657,1659,5,162,0,0,1658,1657,1,0,0,0,1658,1659,1,0,0,0,1659,1660,
  	1,0,0,0,1660,1662,5,6,0,0,1661,1663,5,162,0,0,1662,1661,1,0,0,0,1662,
  	1663,1,0,0,0,1663,1664,1,0,0,0,1664,1665,3,188,94,0,1665,1668,1,0,0,0,
  	1666,1668,3,188,94,0,1667,1656,1,0,0,0,1667,1666,1,0,0,0,1668,187,1,0,
  	0,0,1669,1670,3,190,95,0,1670,189,1,0,0,0,1671,1678,3,192,96,0,1672,1674,
  	5,162,0,0,1673,1672,1,0,0,0,1673,1674,1,0,0,0,1674,1675,1,0,0,0,1675,
  	1677,3,194,97,0,1676,1673,1,0,0,0,1677,1680,1,0,0,0,1678,1676,1,0,0,0,
  	1678,1679,1,0,0,0,1679,1686,1,0,0,0,1680,1678,1,0,0,0,1681,1682,5,2,0,
  	0,1682,1683,3,190,95,0,1683,1684,5,4,0,0,1684,1686,1,0,0,0,1685,1671,
  	1,0,0,0,1685,1681,1,0,0,0,1686,191,1,0,0,0,1687,1689,5,2,0,0,1688,1690,
  	5,162,0,0,1689,1688,1,0,0,0,1689,1690,1,0,0,0,1690,1695,1,0,0,0,1691,
  	1693,3,304,152,0,1692,1694,5,162,0,0,1693,1692,1,0,0,0,1693,1694,1,0,
  	0,0,1694,1696,1,0,0,0,1695,1691,1,0,0,0,1695,1696,1,0,0,0,1696,1701,1,
  	0,0,0,1697,1699,3,204,102,0,1698,1700,5,162,0,0,1699,1698,1,0,0,0,1699,
  	1700,1,0,0,0,1700,1702,1,0,0,0,1701,1697,1,0,0,0,1701,1702,1,0,0,0,1702,
  	1707,1,0,0,0,1703,1705,3,200,100,0,1704,1706,5,162,0,0,1705,1704,1,0,
  	0,0,1705,1706,1,0,0,0,1706,1708,1,0,0,0,1707,1703,1,0,0,0,1707,1708,1,
  	0,0,0,1708,1709,1,0,0,0,1709,1710,5,4,0,0,1710,193,1,0,0,0,1711,1713,
  	3,196,98,0,1712,1714,5,162,0,0,1713,1712,1,0,0,0,1713,1714,1,0,0,0,1714,
  	1715,1,0,0,0,1715,1716,3,192,96,0,1716,195,1,0,0,0,1717,1719,3,324,162,
  	0,1718,1720,5,162,0,0,1719,1718,1,0,0,0,1719,1720,1,0,0,0,1720,1721,1,
  	0,0,0,1721,1723,3,328,164,0,1722,1724,5,162,0,0,1723,1722,1,0,0,0,1723,
  	1724,1,0,0,0,1724,1726,1,0,0,0,1725,1727,3,198,99,0,1726,1725,1,0,0,0,
  	1726,1727,1,0,0,0,1727,1729,1,0,0,0,1728,1730,5,162,0,0,1729,1728,1,0,
  	0,0,1729,1730,1,0,0,0,1730,1731,1,0,0,0,1731,1732,3,328,164,0,1732,1762,
  	1,0,0,0,1733,1735,3,328,164,0,1734,1736,5,162,0,0,1735,1734,1,0,0,0,1735,
  	1736,1,0,0,0,1736,1738,1,0,0,0,1737,1739,3,198,99,0,1738,1737,1,0,0,0,
  	1738,1739,1,0,0,0,1739,1741,1,0,0,0,1740,1742,5,162,0,0,1741,1740,1,0,
  	0,0,1741,1742,1,0,0,0,1742,1743,1,0,0,0,1743,1745,3,328,164,0,1744,1746,
  	5,162,0,0,1745,1744,1,0,0,0,1745,1746,1,0,0,0,1746,1747,1,0,0,0,1747,
  	1748,3,326,163,0,1748,1762,1,0,0,0,1749,1751,3,328,164,0,1750,1752,5,
  	162,0,0,1751,1750,1,0,0,0,1751,1752,1,0,0,0,1752,1754,1,0,0,0,1753,1755,
  	3,198,99,0,1754,1753,1,0,0,0,1754,1755,1,0,0,0,1755,1757,1,0,0,0,1756,
  	1758,5,162,0,0,1757,1756,1,0,0,0,1757,1758,1,0,0,0,1758,1759,1,0,0,0,
  	1759,1760,3,328,164,0,1760,1762,1,0,0,0,1761,1717,1,0,0,0,1761,1733,1,
  	0,0,0,1761,1749,1,0,0,0,1762,197,1,0,0,0,1763,1765,5,7,0,0,1764,1766,
  	5,162,0,0,1765,1764,1,0,0,0,1765,1766,1,0,0,0,1766,1771,1,0,0,0,1767,
  	1769,3,304,152,0,1768,1770,5,162,0,0,1769,1768,1,0,0,0,1769,1770,1,0,
  	0,0,1770,1772,1,0,0,0,1771,1767,1,0,0,0,1771,1772,1,0,0,0,1772,1777,1,
  	0,0,0,1773,1775,3,202,101,0,1774,1776,5,162,0,0,1775,1774,1,0,0,0,1775,
  	1776,1,0,0,0,1776,1778,1,0,0,0,1777,1773,1,0,0,0,1777,1778,1,0,0,0,1778,
  	1783,1,0,0,0,1779,1781,3,208,104,0,1780,1782,5,162,0,0,1781,1780,1,0,
  	0,0,1781,1782,1,0,0,0,1782,1784,1,0,0,0,1783,1779,1,0,0,0,1783,1784,1,
  	0,0,0,1784,1789,1,0,0,0,1785,1787,3,200,100,0,1786,1788,5,162,0,0,1787,
  	1786,1,0,0,0,1787,1788,1,0,0,0,1788,1790,1,0,0,0,1789,1785,1,0,0,0,1789,
  	1790,1,0,0,0,1790,1791,1,0,0,0,1791,1792,5,8,0,0,1792,199,1,0,0,0,1793,
  	1795,5,9,0,0,1794,1796,5,162,0,0,1795,1794,1,0,0,0,1795,1796,1,0,0,0,
  	1796,1830,1,0,0,0,1797,1799,3,312,156,0,1798,1800,5,162,0,0,1799,1798,
  	1,0,0,0,1799,1800,1,0,0,0,1800,1801,1,0,0,0,1801,1803,5,131,0,0,1802,
  	1804,5,162,0,0,1803,1802,1,0,0,0,1803,1804,1,0,0,0,1804,1805,1,0,0,0,
  	1805,1807,3,224,112,0,1806,1808,5,162,0,0,1807,1806,1,0,0,0,1807,1808,
  	1,0,0,0,1808,1827,1,0,0,0,1809,1811,5,3,0,0,1810,1812,5,162,0,0,1811,
  	1810,1,0,0,0,1811,1812,1,0,0,0,1812,1813,1,0,0,0,1813,1815,3,312,156,
  	0,1814,1816,5,162,0,0,1815,1814,1,0,0,0,1815,1816,1,0,0,0,1816,1817,1,
  	0,0,0,1817,1819,5,131,0,0,1818,1820,5,162,0,0,1819,1818,1,0,0,0,1819,
  	1820,1,0,0,0,1820,1821,1,0,0,0,1821,1823,3,224,112,0,1822,1824,5,162,
  	0,0,1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,1826,1,0,0,0,1825,1809,1,
  	0,0,0,1826,1829,1,0,0,0,1827,1825,1,0,0,0,1827,1828,1,0,0,0,1828,1831,
  	1,0,0,0,1829,1827,1,0,0,0,1830,1797,1,0,0,0,1830,1831,1,0,0,0,1831,1832,
  	1,0,0,0,1832,1833,5,10,0,0,1833,201,1,0,0,0,1834,1836,5,131,0,0,1835,
  	1837,5,162,0,0,1836,1835,1,0,0,0,1836,1837,1,0,0,0,1837,1838,1,0,0,0,
  	1838,1852,3,222,111,0,1839,1841,5,162,0,0,1840,1839,1,0,0,0,1840,1841,
  	1,0,0,0,1841,1842,1,0,0,0,1842,1844,5,11,0,0,1843,1845,5,131,0,0,1844,
  	1843,1,0,0,0,1844,1845,1,0,0,0,1845,1847,1,0,0,0,1846,1848,5,162,0,0,
  	1847,1846,1,0,0,0,1847,1848,1,0,0,0,1848,1849,1,0,0,0,1849,1851,3,222,
  	111,0,1850,1840,1,0,0,0,1851,1854,1,0,0,0,1852,1850,1,0,0,0,1852,1853,
  	1,0,0,0,1853,203,1,0,0,0,1854,1852,1,0,0,0,1855,1862,3,206,103,0,1856,
  	1858,5,162,0,0,1857,1856,1,0,0,0,1857,1858,1,0,0,0,1858,1859,1,0,0,0,
  	1859,1861,3,206,103,0,1860,1857,1,0,0,0,1861,1864,1,0,0,0,1862,1860,1,
  	0,0,0,1862,1863,1,0,0,0,1863,205,1,0,0,0,1864,1862,1,0,0,0,1865,1867,
  	5,131,0,0,1866,1868,5,162,0,0,1867,1866,1,0,0,0,1867,1868,1,0,0,0,1868,
  	1869,1,0,0,0,1869,1870,3,220,110,0,1870,207,1,0,0,0,1871,1873,5,112,0,
  	0,1872,1874,5,162,0,0,1873,1872,1,0,0,0,1873,1874,1,0,0,0,1874,1879,1,
  	0,0,0,1875,1880,5,123,0,0,1876,1877,5,95,0,0,1877,1878,5,162,0,0,1878,
  	1880,5,123,0,0,1879,1875,1,0,0,0,1879,1876,1,0,0,0,1879,1880,1,0,0,0,
  	1880,1882,1,0,0,0,1881,1883,5,162,0,0,1882,1881,1,0,0,0,1882,1883,1,0,
  	0,0,1883,1898,1,0,0,0,1884,1886,3,216,108,0,1885,1884,1,0,0,0,1885,1886,
  	1,0,0,0,1886,1888,1,0,0,0,1887,1889,5,162,0,0,1888,1887,1,0,0,0,1888,
  	1889,1,0,0,0,1889,1890,1,0,0,0,1890,1892,5,12,0,0,1891,1893,5,162,0,0,
  	1892,1891,1,0,0,0,1892,1893,1,0,0,0,1893,1895,1,0,0,0,1894,1896,3,218,
  	109,0,1895,1894,1,0,0,0,1895,1896,1,0,0,0,1896,1899,1,0,0,0,1897,1899,
  	3,314,157,0,1898,1885,1,0,0,0,1898,1897,1,0,0,0,1898,1899,1,0,0,0,1899,
  	1904,1,0,0,0,1900,1902,5,162,0,0,1901,1900,1,0,0,0,1901,1902,1,0,0,0,
  	1902,1903,1,0,0,0,1903,1905,3,210,105,0,1904,1901,1,0,0,0,1904,1905,1,
  	0,0,0,1905,209,1,0,0,0,1906,1908,5,2,0,0,1907,1909,5,162,0,0,1908,1907,
  	1,0,0,0,1908,1909,1,0,0,0,1909,1910,1,0,0,0,1910,1912,3,304,152,0,1911,
  	1913,5,162,0,0,1912,1911,1,0,0,0,1912,1913,1,0,0,0,1913,1914,1,0,0,0,
  	1914,1916,5,3,0,0,1915,1917,5,162,0,0,1916,1915,1,0,0,0,1916,1917,1,0,
  	0,0,1917,1918,1,0,0,0,1918,1927,3,304,152,0,1919,1921,5,162,0,0,1920,
  	1919,1,0,0,0,1920,1921,1,0,0,0,1921,1922,1,0,0,0,1922,1924,5,11,0,0,1923,
  	1925,5,162,0,0,1924,1923,1,0,0,0,1924,1925,1,0,0,0,1925,1926,1,0,0,0,
  	1926,1928,3,182,91,0,1927,1920,1,0,0,0,1927,1928,1,0,0,0,1928,1948,1,
  	0,0,0,1929,1931,5,162,0,0,1930,1929,1,0,0,0,1930,1931,1,0,0,0,1931,1932,
  	1,0,0,0,1932,1934,5,11,0,0,1933,1935,5,162,0,0,1934,1933,1,0,0,0,1934,
  	1935,1,0,0,0,1935,1936,1,0,0,0,1936,1938,3,214,107,0,1937,1939,5,162,
  	0,0,1938,1937,1,0,0,0,1938,1939,1,0,0,0,1939,1940,1,0,0,0,1940,1942,5,
  	3,0,0,1941,1943,5,162,0,0,1942,1941,1,0,0,0,1942,1943,1,0,0,0,1943,1944,
  	1,0,0,0,1944,1946,3,212,106,0,1945,1947,5,162,0,0,1946,1945,1,0,0,0,1946,
  	1947,1,0,0,0,1947,1949,1,0,0,0,1948,1930,1,0,0,0,1948,1949,1,0,0,0,1949,
  	1950,1,0,0,0,1950,1951,5,4,0,0,1951,211,1,0,0,0,1952,1954,5,9,0,0,1953,
  	1955,5,162,0,0,1954,1953,1,0,0,0,1954,1955,1,0,0,0,1955,1957,1,0,0,0,
  	1956,1958,3,170,85,0,1957,1956,1,0,0,0,1957,1958,1,0,0,0,1958,1960,1,
  	0,0,0,1959,1961,5,162,0,0,1960,1959,1,0,0,0,1960,1961,1,0,0,0,1961,1962,
  	1,0,0,0,1962,1963,5,10,0,0,1963,213,1,0,0,0,1964,1966,5,9,0,0,1965,1967,
  	5,162,0,0,1966,1965,1,0,0,0,1966,1967,1,0,0,0,1967,1969,1,0,0,0,1968,
  	1970,3,170,85,0,1969,1968,1,0,0,0,1969,1970,1,0,0,0,1970,1972,1,0,0,0,
  	1971,1973,5,162,0,0,1972,1971,1,0,0,0,1972,1973,1,0,0,0,1973,1974,1,0,
  	0,0,1974,1975,5,10,0,0,1975,215,1,0,0,0,1976,1977,5,150,0,0,1977,217,
  	1,0,0,0,1978,1979,5,150,0,0,1979,219,1,0,0,0,1980,1981,3,318,159,0,1981,
  	221,1,0,0,0,1982,1983,3,318,159,0,1983,223,1,0,0,0,1984,1985,3,226,113,
  	0,1985,225,1,0,0,0,1986,1993,3,228,114,0,1987,1988,5,162,0,0,1988,1989,
  	5,124,0,0,1989,1990,5,162,0,0,1990,1992,3,228,114,0,1991,1987,1,0,0,0,
  	1992,1995,1,0,0,0,1993,1991,1,0,0,0,1993,1994,1,0,0,0,1994,227,1,0,0,
  	0,1995,1993,1,0,0,0,1996,2003,3,230,115,0,1997,1998,5,162,0,0,1998,1999,
  	5,125,0,0,1999,2000,5,162,0,0,2000,2002,3,230,115,0,2001,1997,1,0,0,0,
  	2002,2005,1,0,0,0,2003,2001,1,0,0,0,2003,2004,1,0,0,0,2004,229,1,0,0,
  	0,2005,2003,1,0,0,0,2006,2013,3,232,116,0,2007,2008,5,162,0,0,2008,2009,
  	5,126,0,0,2009,2010,5,162,0,0,2010,2012,3,232,116,0,2011,2007,1,0,0,0,
  	2012,2015,1,0,0,0,2013,2011,1,0,0,0,2013,2014,1,0,0,0,2014,231,1,0,0,
  	0,2015,2013,1,0,0,0,2016,2018,5,127,0,0,2017,2019,5,162,0,0,2018,2017,
  	1,0,0,0,2018,2019,1,0,0,0,2019,2021,1,0,0,0,2020,2016,1,0,0,0,2021,2024,
  	1,0,0,0,2022,2020,1,0,0,0,2022,2023,1,0,0,0,2023,2025,1,0,0,0,2024,2022,
  	1,0,0,0,2025,2026,3,234,117,0,2026,233,1,0,0,0,2027,2037,3,238,119,0,
  	2028,2030,5,162,0,0,2029,2028,1,0,0,0,2029,2030,1,0,0,0,2030,2031,1,0,
  	0,0,2031,2033,3,236,118,0,2032,2034,5,162,0,0,2033,2032,1,0,0,0,2033,
  	2034,1,0,0,0,2034,2035,1,0,0,0,2035,2036,3,238,119,0,2036,2038,1,0,0,
  	0,2037,2029,1,0,0,0,2037,2038,1,0,0,0,2038,2076,1,0,0,0,2039,2041,3,238,
  	119,0,2040,2042,5,162,0,0,2041,2040,1,0,0,0,2041,2042,1,0,0,0,2042,2043,
  	1,0,0,0,2043,2045,5,128,0,0,2044,2046,5,162,0,0,2045,2044,1,0,0,0,2045,
  	2046,1,0,0,0,2046,2047,1,0,0,0,2047,2048,3,238,119,0,2048,2049,1,0,0,
  	0,2049,2050,6,117,-1,0,2050,2076,1,0,0,0,2051,2053,3,238,119,0,2052,2054,
  	5,162,0,0,2053,2052,1,0,0,0,2053,2054,1,0,0,0,2054,2055,1,0,0,0,2055,
  	2057,3,236,118,0,2056,2058,5,162,0,0,2057,2056,1,0,0,0,2057,2058,1,0,
  	0,0,2058,2059,1,0,0,0,2059,2069,3,238,119,0,2060,2062,5,162,0,0,2061,
  	2060,1,0,0,0,2061,2062,1,0,0,0,2062,2063,1,0,0,0,2063,2065,3,236,118,
  	0,2064,2066,5,162,0,0,2065,2064,1,0,0,0,2065,2066,1,0,0,0,2066,2067,1,
  	0,0,0,2067,2068,3,238,119,0,2068,2070,1,0,0,0,2069,2061,1,0,0,0,2070,
  	2071,1,0,0,0,2071,2069,1,0,0,0,2071,2072,1,0,0,0,2072,2073,1,0,0,0,2073,
  	2074,6,117,-1,0,2074,2076,1,0,0,0,2075,2027,1,0,0,0,2075,2039,1,0,0,0,
  	2075,2051,1,0,0,0,2076,235,1,0,0,0,2077,2078,7,2,0,0,2078,237,1,0,0,0,
  	2079,2090,3,240,120,0,2080,2082,5,162,0,0,2081,2080,1,0,0,0,2081,2082,
  	1,0,0,0,2082,2083,1,0,0,0,2083,2085,5,11,0,0,2084,2086,5,162,0,0,2085,
  	2084,1,0,0,0,2085,2086,1,0,0,0,2086,2087,1,0,0,0,2087,2089,3,240,120,
  	0,2088,2081,1,0,0,0,2089,2092,1,0,0,0,2090,2088,1,0,0,0,2090,2091,1,0,
  	0,0,2091,239,1,0,0,0,2092,2090,1,0,0,0,2093,2104,3,242,121,0,2094,2096,
  	5,162,0,0,2095,2094,1,0,0,0,2095,2096,1,0,0,0,2096,2097,1,0,0,0,2097,
  	2099,5,18,0,0,2098,2100,5,162,0,0,2099,2098,1,0,0,0,2099,2100,1,0,0,0,
  	2100,2101,1,0,0,0,2101,2103,3,242,121,0,2102,2095,1,0,0,0,2103,2106,1,
  	0,0,0,2104,2102,1,0,0,0,2104,2105,1,0,0,0,2105,241,1,0,0,0,2106,2104,
  	1,0,0,0,2107,2119,3,246,123,0,2108,2110,5,162,0,0,2109,2108,1,0,0,0,2109,
  	2110,1,0,0,0,2110,2111,1,0,0,0,2111,2113,3,244,122,0,2112,2114,5,162,
  	0,0,2113,2112,1,0,0,0,2113,2114,1,0,0,0,2114,2115,1,0,0,0,2115,2116,3,
  	246,123,0,2116,2118,1,0,0,0,2117,2109,1,0,0,0,2118,2121,1,0,0,0,2119,
  	2117,1,0,0,0,2119,2120,1,0,0,0,2120,243,1,0,0,0,2121,2119,1,0,0,0,2122,
  	2123,7,3,0,0,2123,245,1,0,0,0,2124,2136,3,250,125,0,2125,2127,5,162,0,
  	0,2126,2125,1,0,0,0,2126,2127,1,0,0,0,2127,2128,1,0,0,0,2128,2130,3,248,
  	124,0,2129,2131,5,162,0,0,2130,2129,1,0,0,0,2130,2131,1,0,0,0,2131,2132,
  	1,0,0,0,2132,2133,3,250,125,0,2133,2135,1,0,0,0,2134,2126,1,0,0,0,2135,
  	2138,1,0,0,0,2136,2134,1,0,0,0,2136,2137,1,0,0,0,2137,247,1,0,0,0,2138,
  	2136,1,0,0,0,2139,2140,7,4,0,0,2140,249,1,0,0,0,2141,2153,3,254,127,0,
  	2142,2144,5,162,0,0,2143,2142,1,0,0,0,2143,2144,1,0,0,0,2144,2145,1,0,
  	0,0,2145,2147,3,252,126,0,2146,2148,5,162,0,0,2147,2146,1,0,0,0,2147,
  	2148,1,0,0,0,2148,2149,1,0,0,0,2149,2150,3,254,127,0,2150,2152,1,0,0,
  	0,2151,2143,1,0,0,0,2152,2155,1,0,0,0,2153,2151,1,0,0,0,2153,2154,1,0,
  	0,0,2154,251,1,0,0,0,2155,2153,1,0,0,0,2156,2157,7,5,0,0,2157,253,1,0,
  	0,0,2158,2169,3,256,128,0,2159,2161,5,162,0,0,2160,2159,1,0,0,0,2160,
  	2161,1,0,0,0,2161,2162,1,0,0,0,2162,2164,5,24,0,0,2163,2165,5,162,0,0,
  	2164,2163,1,0,0,0,2164,2165,1,0,0,0,2165,2166,1,0,0,0,2166,2168,3,256,
  	128,0,2167,2160,1,0,0,0,2168,2171,1,0,0,0,2169,2167,1,0,0,0,2169,2170,
  	1,0,0,0,2170,255,1,0,0,0,2171,2169,1,0,0,0,2172,2174,5,129,0,0,2173,2175,
  	5,162,0,0,2174,2173,1,0,0,0,2174,2175,1,0,0,0,2175,2177,1,0,0,0,2176,
  	2172,1,0,0,0,2177,2180,1,0,0,0,2178,2176,1,0,0,0,2178,2179,1,0,0,0,2179,
  	2181,1,0,0,0,2180,2178,1,0,0,0,2181,2186,3,258,129,0,2182,2184,5,162,
  	0,0,2183,2182,1,0,0,0,2183,2184,1,0,0,0,2184,2185,1,0,0,0,2185,2187,5,
  	130,0,0,2186,2183,1,0,0,0,2186,2187,1,0,0,0,2187,257,1,0,0,0,2188,2196,
  	3,268,134,0,2189,2197,3,262,131,0,2190,2192,3,260,130,0,2191,2190,1,0,
  	0,0,2192,2193,1,0,0,0,2193,2191,1,0,0,0,2193,2194,1,0,0,0,2194,2197,1,
  	0,0,0,2195,2197,3,266,133,0,2196,2189,1,0,0,0,2196,2191,1,0,0,0,2196,
  	2195,1,0,0,0,2196,2197,1,0,0,0,2197,259,1,0,0,0,2198,2199,5,162,0,0,2199,
  	2201,5,132,0,0,2200,2202,5,162,0,0,2201,2200,1,0,0,0,2201,2202,1,0,0,
  	0,2202,2203,1,0,0,0,2203,2218,3,268,134,0,2204,2205,5,7,0,0,2205,2206,
  	3,224,112,0,2206,2207,5,8,0,0,2207,2218,1,0,0,0,2208,2210,5,7,0,0,2209,
  	2211,3,224,112,0,2210,2209,1,0,0,0,2210,2211,1,0,0,0,2211,2212,1,0,0,
  	0,2212,2214,5,131,0,0,2213,2215,3,224,112,0,2214,2213,1,0,0,0,2214,2215,
  	1,0,0,0,2215,2216,1,0,0,0,2216,2218,5,8,0,0,2217,2198,1,0,0,0,2217,2204,
  	1,0,0,0,2217,2208,1,0,0,0,2218,261,1,0,0,0,2219,2231,3,264,132,0,2220,
  	2221,5,162,0,0,2221,2222,5,133,0,0,2222,2223,5,162,0,0,2223,2231,5,109,
  	0,0,2224,2225,5,162,0,0,2225,2226,5,134,0,0,2226,2227,5,162,0,0,2227,
  	2231,5,109,0,0,2228,2229,5,162,0,0,2229,2231,5,135,0,0,2230,2219,1,0,
  	0,0,2230,2220,1,0,0,0,2230,2224,1,0,0,0,2230,2228,1,0,0,0,2231,2233,1,
  	0,0,0,2232,2234,5,162,0,0,2233,2232,1,0,0,0,2233,2234,1,0,0,0,2234,2235,
  	1,0,0,0,2235,2236,3,268,134,0,2236,263,1,0,0,0,2237,2239,5,162,0,0,2238,
  	2237,1,0,0,0,2238,2239,1,0,0,0,2239,2240,1,0,0,0,2240,2241,5,25,0,0,2241,
  	265,1,0,0,0,2242,2243,5,162,0,0,2243,2244,5,136,0,0,2244,2245,5,162,0,
  	0,2245,2253,5,137,0,0,2246,2247,5,162,0,0,2247,2248,5,136,0,0,2248,2249,
  	5,162,0,0,2249,2250,5,127,0,0,2250,2251,5,162,0,0,2251,2253,5,137,0,0,
  	2252,2242,1,0,0,0,2252,2246,1,0,0,0,2253,267,1,0,0,0,2254,2261,3,270,
  	135,0,2255,2257,5,162,0,0,2256,2255,1,0,0,0,2256,2257,1,0,0,0,2257,2258,
  	1,0,0,0,2258,2260,3,298,149,0,2259,2256,1,0,0,0,2260,2263,1,0,0,0,2261,
  	2259,1,0,0,0,2261,2262,1,0,0,0,2262,269,1,0,0,0,2263,2261,1,0,0,0,2264,
  	2274,3,272,136,0,2265,2274,3,308,154,0,2266,2274,3,300,150,0,2267,2274,
  	3,284,142,0,2268,2274,3,286,143,0,2269,2274,3,292,146,0,2270,2274,3,294,
  	147,0,2271,2274,3,296,148,0,2272,2274,3,304,152,0,2273,2264,1,0,0,0,2273,
  	2265,1,0,0,0,2273,2266,1,0,0,0,2273,2267,1,0,0,0,2273,2268,1,0,0,0,2273,
  	2269,1,0,0,0,2273,2270,1,0,0,0,2273,2271,1,0,0,0,2273,2272,1,0,0,0,2274,
  	271,1,0,0,0,2275,2282,3,306,153,0,2276,2282,5,148,0,0,2277,2282,3,274,
  	137,0,2278,2282,5,137,0,0,2279,2282,3,276,138,0,2280,2282,3,280,140,0,
  	2281,2275,1,0,0,0,2281,2276,1,0,0,0,2281,2277,1,0,0,0,2281,2278,1,0,0,
  	0,2281,2279,1,0,0,0,2281,2280,1,0,0,0,2282,273,1,0,0,0,2283,2284,7,6,
  	0,0,2284,275,1,0,0,0,2285,2287,5,7,0,0,2286,2288,5,162,0,0,2287,2286,
  	1,0,0,0,2287,2288,1,0,0,0,2288,2302,1,0,0,0,2289,2291,3,224,112,0,2290,
  	2292,5,162,0,0,2291,2290,1,0,0,0,2291,2292,1,0,0,0,2292,2299,1,0,0,0,
  	2293,2295,3,278,139,0,2294,2296,5,162,0,0,2295,2294,1,0,0,0,2295,2296,
  	1,0,0,0,2296,2298,1,0,0,0,2297,2293,1,0,0,0,2298,2301,1,0,0,0,2299,2297,
  	1,0,0,0,2299,2300,1,0,0,0,2300,2303,1,0,0,0,2301,2299,1,0,0,0,2302,2289,
  	1,0,0,0,2302,2303,1,0,0,0,2303,2304,1,0,0,0,2304,2305,5,8,0,0,2305,277,
  	1,0,0,0,2306,2308,5,3,0,0,2307,2309,5,162,0,0,2308,2307,1,0,0,0,2308,
  	2309,1,0,0,0,2309,2311,1,0,0,0,2310,2312,3,224,112,0,2311,2310,1,0,0,
  	0,2311,2312,1,0,0,0,2312,279,1,0,0,0,2313,2315,5,9,0,0,2314,2316,5,162,
  	0,0,2315,2314,1,0,0,0,2315,2316,1,0,0,0,2316,2317,1,0,0,0,2317,2319,3,
  	282,141,0,2318,2320,5,162,0,0,2319,2318,1,0,0,0,2319,2320,1,0,0,0,2320,
  	2331,1,0,0,0,2321,2323,5,3,0,0,2322,2324,5,162,0,0,2323,2322,1,0,0,0,
  	2323,2324,1,0,0,0,2324,2325,1,0,0,0,2325,2327,3,282,141,0,2326,2328,5,
  	162,0,0,2327,2326,1,0,0,0,2327,2328,1,0,0,0,2328,2330,1,0,0,0,2329,2321,
  	1,0,0,0,2330,2333,1,0,0,0,2331,2329,1,0,0,0,2331,2332,1,0,0,0,2332,2334,
  	1,0,0,0,2333,2331,1,0,0,0,2334,2335,5,10,0,0,2335,281,1,0,0,0,2336,2339,
  	3,320,160,0,2337,2339,5,148,0,0,2338,2336,1,0,0,0,2338,2337,1,0,0,0,2339,
  	2341,1,0,0,0,2340,2342,5,162,0,0,2341,2340,1,0,0,0,2341,2342,1,0,0,0,
  	2342,2343,1,0,0,0,2343,2345,5,131,0,0,2344,2346,5,162,0,0,2345,2344,1,
  	0,0,0,2345,2346,1,0,0,0,2346,2347,1,0,0,0,2347,2348,3,224,112,0,2348,
  	283,1,0,0,0,2349,2351,5,2,0,0,2350,2352,5,162,0,0,2351,2350,1,0,0,0,2351,
  	2352,1,0,0,0,2352,2353,1,0,0,0,2353,2355,3,224,112,0,2354,2356,5,162,
  	0,0,2355,2354,1,0,0,0,2355,2356,1,0,0,0,2356,2357,1,0,0,0,2357,2358,5,
  	4,0,0,2358,285,1,0,0,0,2359,2361,5,141,0,0,2360,2362,5,162,0,0,2361,2360,
  	1,0,0,0,2361,2362,1,0,0,0,2362,2363,1,0,0,0,2363,2365,5,2,0,0,2364,2366,
  	5,162,0,0,2365,2364,1,0,0,0,2365,2366,1,0,0,0,2366,2367,1,0,0,0,2367,
  	2369,5,112,0,0,2368,2370,5,162,0,0,2369,2368,1,0,0,0,2369,2370,1,0,0,
  	0,2370,2371,1,0,0,0,2371,2437,5,4,0,0,2372,2374,5,140,0,0,2373,2375,5,
  	162,0,0,2374,2373,1,0,0,0,2374,2375,1,0,0,0,2375,2376,1,0,0,0,2376,2378,
  	5,2,0,0,2377,2379,5,162,0,0,2378,2377,1,0,0,0,2378,2379,1,0,0,0,2379,
  	2380,1,0,0,0,2380,2382,3,290,145,0,2381,2383,5,162,0,0,2382,2381,1,0,
  	0,0,2382,2383,1,0,0,0,2383,2394,1,0,0,0,2384,2386,5,113,0,0,2385,2387,
  	5,162,0,0,2386,2385,1,0,0,0,2386,2387,1,0,0,0,2387,2388,1,0,0,0,2388,
  	2395,3,96,48,0,2389,2391,5,3,0,0,2390,2392,5,162,0,0,2391,2390,1,0,0,
  	0,2391,2392,1,0,0,0,2392,2393,1,0,0,0,2393,2395,3,290,145,0,2394,2384,
  	1,0,0,0,2394,2389,1,0,0,0,2395,2397,1,0,0,0,2396,2398,5,162,0,0,2397,
  	2396,1,0,0,0,2397,2398,1,0,0,0,2398,2399,1,0,0,0,2399,2400,5,4,0,0,2400,
  	2437,1,0,0,0,2401,2403,3,288,144,0,2402,2404,5,162,0,0,2403,2402,1,0,
  	0,0,2403,2404,1,0,0,0,2404,2405,1,0,0,0,2405,2407,5,2,0,0,2406,2408,5,
  	162,0,0,2407,2406,1,0,0,0,2407,2408,1,0,0,0,2408,2413,1,0,0,0,2409,2411,
  	5,111,0,0,2410,2412,5,162,0,0,2411,2410,1,0,0,0,2411,2412,1,0,0,0,2412,
  	2414,1,0,0,0,2413,2409,1,0,0,0,2413,2414,1,0,0,0,2414,2432,1,0,0,0,2415,
  	2417,3,290,145,0,2416,2418,5,162,0,0,2417,2416,1,0,0,0,2417,2418,1,0,
  	0,0,2418,2429,1,0,0,0,2419,2421,5,3,0,0,2420,2422,5,162,0,0,2421,2420,
  	1,0,0,0,2421,2422,1,0,0,0,2422,2423,1,0,0,0,2423,2425,3,290,145,0,2424,
  	2426,5,162,0,0,2425,2424,1,0,0,0,2425,2426,1,0,0,0,2426,2428,1,0,0,0,
  	2427,2419,1,0,0,0,2428,2431,1,0,0,0,2429,2427,1,0,0,0,2429,2430,1,0,0,
  	0,2430,2433,1,0,0,0,2431,2429,1,0,0,0,2432,2415,1,0,0,0,2432,2433,1,0,
  	0,0,2433,2434,1,0,0,0,2434,2435,5,4,0,0,2435,2437,1,0,0,0,2436,2359,1,
  	0,0,0,2436,2372,1,0,0,0,2436,2401,1,0,0,0,2437,287,1,0,0,0,2438,2439,
  	3,320,160,0,2439,289,1,0,0,0,2440,2442,3,320,160,0,2441,2443,5,162,0,
  	0,2442,2441,1,0,0,0,2442,2443,1,0,0,0,2443,2444,1,0,0,0,2444,2445,5,131,
  	0,0,2445,2447,5,6,0,0,2446,2448,5,162,0,0,2447,2446,1,0,0,0,2447,2448,
  	1,0,0,0,2448,2450,1,0,0,0,2449,2440,1,0,0,0,2449,2450,1,0,0,0,2450,2451,
  	1,0,0,0,2451,2452,3,224,112,0,2452,291,1,0,0,0,2453,2458,3,192,96,0,2454,
  	2456,5,162,0,0,2455,2454,1,0,0,0,2455,2456,1,0,0,0,2456,2457,1,0,0,0,
  	2457,2459,3,194,97,0,2458,2455,1,0,0,0,2459,2460,1,0,0,0,2460,2458,1,
  	0,0,0,2460,2461,1,0,0,0,2461,293,1,0,0,0,2462,2464,5,142,0,0,2463,2465,
  	5,162,0,0,2464,2463,1,0,0,0,2464,2465,1,0,0,0,2465,2466,1,0,0,0,2466,
  	2468,5,9,0,0,2467,2469,5,162,0,0,2468,2467,1,0,0,0,2468,2469,1,0,0,0,
  	2469,2470,1,0,0,0,2470,2472,5,101,0,0,2471,2473,5,162,0,0,2472,2471,1,
  	0,0,0,2472,2473,1,0,0,0,2473,2474,1,0,0,0,2474,2479,3,184,92,0,2475,2477,
  	5,162,0,0,2476,2475,1,0,0,0,2476,2477,1,0,0,0,2477,2478,1,0,0,0,2478,
  	2480,3,182,91,0,2479,2476,1,0,0,0,2479,2480,1,0,0,0,2480,2482,1,0,0,0,
  	2481,2483,5,162,0,0,2482,2481,1,0,0,0,2482,2483,1,0,0,0,2483,2484,1,0,
  	0,0,2484,2485,5,10,0,0,2485,295,1,0,0,0,2486,2488,5,141,0,0,2487,2489,
  	5,162,0,0,2488,2487,1,0,0,0,2488,2489,1,0,0,0,2489,2490,1,0,0,0,2490,
  	2492,5,9,0,0,2491,2493,5,162,0,0,2492,2491,1,0,0,0,2492,2493,1,0,0,0,
  	2493,2494,1,0,0,0,2494,2496,5,101,0,0,2495,2497,5,162,0,0,2496,2495,1,
  	0,0,0,2496,2497,1,0,0,0,2497,2498,1,0,0,0,2498,2503,3,184,92,0,2499,2501,
  	5,162,0,0,2500,2499,1,0,0,0,2500,2501,1,0,0,0,2501,2502,1,0,0,0,2502,
  	2504,3,182,91,0,2503,2500,1,0,0,0,2503,2504,1,0,0,0,2504,2506,1,0,0,0,
  	2505,2507,5,162,0,0,2506,2505,1,0,0,0,2506,2507,1,0,0,0,2507,2508,1,0,
  	0,0,2508,2509,5,10,0,0,2509,297,1,0,0,0,2510,2512,5,5,0,0,2511,2513,5,
  	162,0,0,2512,2511,1,0,0,0,2512,2513,1,0,0,0,2513,2516,1,0,0,0,2514,2517,
  	3,312,156,0,2515,2517,5,112,0,0,2516,2514,1,0,0,0,2516,2515,1,0,0,0,2517,
  	299,1,0,0,0,2518,2523,5,143,0,0,2519,2521,5,162,0,0,2520,2519,1,0,0,0,
  	2520,2521,1,0,0,0,2521,2522,1,0,0,0,2522,2524,3,302,151,0,2523,2520,1,
  	0,0,0,2524,2525,1,0,0,0,2525,2523,1,0,0,0,2525,2526,1,0,0,0,2526,2541,
  	1,0,0,0,2527,2529,5,143,0,0,2528,2530,5,162,0,0,2529,2528,1,0,0,0,2529,
  	2530,1,0,0,0,2530,2531,1,0,0,0,2531,2536,3,224,112,0,2532,2534,5,162,
  	0,0,2533,2532,1,0,0,0,2533,2534,1,0,0,0,2534,2535,1,0,0,0,2535,2537,3,
  	302,151,0,2536,2533,1,0,0,0,2537,2538,1,0,0,0,2538,2536,1,0,0,0,2538,
  	2539,1,0,0,0,2539,2541,1,0,0,0,2540,2518,1,0,0,0,2540,2527,1,0,0,0,2541,
  	2550,1,0,0,0,2542,2544,5,162,0,0,2543,2542,1,0,0,0,2543,2544,1,0,0,0,
  	2544,2545,1,0,0,0,2545,2547,5,144,0,0,2546,2548,5,162,0,0,2547,2546,1,
  	0,0,0,2547,2548,1,0,0,0,2548,2549,1,0,0,0,2549,2551,3,224,112,0,2550,
  	2543,1,0,0,0,2550,2551,1,0,0,0,2551,2553,1,0,0,0,2552,2554,5,162,0,0,
  	2553,2552,1,0,0,0,2553,2554,1,0,0,0,2554,2555,1,0,0,0,2555,2556,5,145,
  	0,0,2556,301,1,0,0,0,2557,2559,5,146,0,0,2558,2560,5,162,0,0,2559,2558,
  	1,0,0,0,2559,2560,1,0,0,0,2560,2561,1,0,0,0,2561,2563,3,224,112,0,2562,
  	2564,5,162,0,0,2563,2562,1,0,0,0,2563,2564,1,0,0,0,2564,2565,1,0,0,0,
  	2565,2567,5,147,0,0,2566,2568,5,162,0,0,2567,2566,1,0,0,0,2567,2568,1,
  	0,0,0,2568,2569,1,0,0,0,2569,2570,3,224,112,0,2570,303,1,0,0,0,2571,2572,
  	3,320,160,0,2572,305,1,0,0,0,2573,2576,3,316,158,0,2574,2576,3,314,157,
  	0,2575,2573,1,0,0,0,2575,2574,1,0,0,0,2576,307,1,0,0,0,2577,2580,5,26,
  	0,0,2578,2581,3,320,160,0,2579,2581,5,150,0,0,2580,2578,1,0,0,0,2580,
  	2579,1,0,0,0,2581,309,1,0,0,0,2582,2584,3,270,135,0,2583,2585,5,162,0,
  	0,2584,2583,1,0,0,0,2584,2585,1,0,0,0,2585,2586,1,0,0,0,2586,2587,3,298,
  	149,0,2587,311,1,0,0,0,2588,2589,3,318,159,0,2589,313,1,0,0,0,2590,2591,
  	5,150,0,0,2591,315,1,0,0,0,2592,2593,5,157,0,0,2593,317,1,0,0,0,2594,
  	2595,3,320,160,0,2595,319,1,0,0,0,2596,2602,5,158,0,0,2597,2598,5,161,
  	0,0,2598,2602,6,160,-1,0,2599,2602,5,151,0,0,2600,2602,3,322,161,0,2601,
  	2596,1,0,0,0,2601,2597,1,0,0,0,2601,2599,1,0,0,0,2601,2600,1,0,0,0,2602,
  	321,1,0,0,0,2603,2604,7,7,0,0,2604,323,1,0,0,0,2605,2606,7,8,0,0,2606,
  	325,1,0,0,0,2607,2608,7,9,0,0,2608,327,1,0,0,0,2609,2610,7,10,0,0,2610,
  	329,1,0,0,0,446,332,336,341,345,350,353,357,360,384,390,394,397,403,406,
  	410,414,418,423,427,434,438,446,450,460,464,468,473,486,490,498,501,509,
  	512,527,532,538,542,545,548,554,558,564,568,573,588,592,614,618,621,624,
  	627,630,634,639,643,653,657,662,667,672,678,682,686,691,698,702,706,709,
  	713,717,729,733,737,741,746,758,762,766,770,774,776,780,784,786,800,804,
  	808,812,817,820,824,828,830,834,838,840,867,880,887,893,896,906,909,917,
  	920,926,929,935,957,966,992,996,1001,1010,1014,1019,1027,1033,1037,1041,
  	1049,1053,1057,1063,1067,1071,1077,1081,1085,1089,1093,1099,1103,1107,
  	1111,1115,1119,1125,1132,1137,1143,1163,1167,1175,1185,1190,1195,1199,
  	1204,1210,1215,1218,1222,1226,1230,1236,1240,1245,1250,1254,1257,1261,
  	1265,1269,1273,1277,1283,1287,1292,1296,1305,1311,1319,1323,1327,1331,
  	1338,1341,1344,1347,1351,1353,1359,1362,1370,1374,1378,1384,1388,1393,
  	1398,1402,1406,1410,1414,1418,1423,1429,1433,1437,1441,1446,1450,1460,
  	1466,1473,1486,1490,1494,1498,1503,1508,1512,1518,1522,1526,1530,1535,
  	1541,1544,1550,1553,1559,1563,1567,1571,1575,1580,1585,1589,1594,1597,
  	1606,1615,1620,1633,1636,1644,1648,1653,1658,1662,1667,1673,1678,1685,
  	1689,1693,1695,1699,1701,1705,1707,1713,1719,1723,1726,1729,1735,1738,
  	1741,1745,1751,1754,1757,1761,1765,1769,1771,1775,1777,1781,1783,1787,
  	1789,1795,1799,1803,1807,1811,1815,1819,1823,1827,1830,1836,1840,1844,
  	1847,1852,1857,1862,1867,1873,1879,1882,1885,1888,1892,1895,1898,1901,
  	1904,1908,1912,1916,1920,1924,1927,1930,1934,1938,1942,1946,1948,1954,
  	1957,1960,1966,1969,1972,1993,2003,2013,2018,2022,2029,2033,2037,2041,
  	2045,2053,2057,2061,2065,2071,2075,2081,2085,2090,2095,2099,2104,2109,
  	2113,2119,2126,2130,2136,2143,2147,2153,2160,2164,2169,2174,2178,2183,
  	2186,2193,2196,2201,2210,2214,2217,2230,2233,2238,2252,2256,2261,2273,
  	2281,2287,2291,2295,2299,2302,2308,2311,2315,2319,2323,2327,2331,2338,
  	2341,2345,2351,2355,2361,2365,2369,2374,2378,2382,2386,2391,2394,2397,
  	2403,2407,2411,2413,2417,2421,2425,2429,2432,2436,2442,2447,2449,2455,
  	2460,2464,2468,2472,2476,2479,2482,2488,2492,2496,2500,2503,2506,2512,
  	2516,2520,2525,2529,2533,2538,2540,2543,2547,2550,2553,2559,2563,2567,
  	2575,2580,2584,2601
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cypherParserStaticData = staticData.release();
}

}

CypherParser::CypherParser(TokenStream *input) : CypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CypherParser::CypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  CypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *cypherParserStaticData->atn, cypherParserStaticData->decisionToDFA, cypherParserStaticData->sharedContextCache, options);
}

CypherParser::~CypherParser() {
  delete _interpreter;
}

const atn::ATN& CypherParser::getATN() const {
  return *cypherParserStaticData->atn;
}

std::string CypherParser::getGrammarFileName() const {
  return "Cypher.g4";
}

const std::vector<std::string>& CypherParser::getRuleNames() const {
  return cypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& CypherParser::getVocabulary() const {
  return cypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CypherParser::getSerializedATN() const {
  return cypherParserStaticData->serializedATN;
}


//----------------- Ku_StatementsContext ------------------------------------------------------------------

CypherParser::Ku_StatementsContext::Ku_StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_CypherContext *> CypherParser::Ku_StatementsContext::oC_Cypher() {
  return getRuleContexts<CypherParser::OC_CypherContext>();
}

CypherParser::OC_CypherContext* CypherParser::Ku_StatementsContext::oC_Cypher(size_t i) {
  return getRuleContext<CypherParser::OC_CypherContext>(i);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::EOF() {
  return getToken(CypherParser::EOF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::Ku_StatementsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::Ku_StatementsContext::getRuleIndex() const {
  return CypherParser::RuleKu_Statements;
}


CypherParser::Ku_StatementsContext* CypherParser::ku_Statements() {
  Ku_StatementsContext *_localctx = _tracker.createInstance<Ku_StatementsContext>(_ctx, getState());
  enterRule(_localctx, 0, CypherParser::RuleKu_Statements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(330);
    oC_Cypher();
    setState(341);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(332);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(331);
          match(CypherParser::SP);
        }
        setState(334);
        match(CypherParser::T__0);
        setState(336);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
        case 1: {
          setState(335);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(338);
        oC_Cypher(); 
      }
      setState(343);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    }
    setState(345);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(344);
      match(CypherParser::SP);
    }
    setState(347);
    match(CypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CypherContext ------------------------------------------------------------------

CypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StatementContext* CypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<CypherParser::OC_StatementContext>(0);
}

CypherParser::OC_AnyCypherOptionContext* CypherParser::OC_CypherContext::oC_AnyCypherOption() {
  return getRuleContext<CypherParser::OC_AnyCypherOptionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CypherContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CypherContext::getRuleIndex() const {
  return CypherParser::RuleOC_Cypher;
}


CypherParser::OC_CypherContext* CypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 2, CypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(350);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::EXPLAIN

    || _la == CypherParser::PROFILE) {
      setState(349);
      oC_AnyCypherOption();
    }
    setState(353);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(352);
      match(CypherParser::SP);
    }

    setState(355);
    oC_Statement();
    setState(360);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(357);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(356);
        match(CypherParser::SP);
      }
      setState(359);
      match(CypherParser::T__0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

CypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_QueryContext* CypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

CypherParser::KU_CreateNodeTableContext* CypherParser::OC_StatementContext::kU_CreateNodeTable() {
  return getRuleContext<CypherParser::KU_CreateNodeTableContext>(0);
}

CypherParser::KU_CreateRelTableContext* CypherParser::OC_StatementContext::kU_CreateRelTable() {
  return getRuleContext<CypherParser::KU_CreateRelTableContext>(0);
}

CypherParser::KU_CreateRelTableGroupContext* CypherParser::OC_StatementContext::kU_CreateRelTableGroup() {
  return getRuleContext<CypherParser::KU_CreateRelTableGroupContext>(0);
}

CypherParser::KU_CreateRdfGraphContext* CypherParser::OC_StatementContext::kU_CreateRdfGraph() {
  return getRuleContext<CypherParser::KU_CreateRdfGraphContext>(0);
}

CypherParser::KU_CreateSequenceContext* CypherParser::OC_StatementContext::kU_CreateSequence() {
  return getRuleContext<CypherParser::KU_CreateSequenceContext>(0);
}

CypherParser::KU_CreateTypeContext* CypherParser::OC_StatementContext::kU_CreateType() {
  return getRuleContext<CypherParser::KU_CreateTypeContext>(0);
}

CypherParser::KU_DropContext* CypherParser::OC_StatementContext::kU_Drop() {
  return getRuleContext<CypherParser::KU_DropContext>(0);
}

CypherParser::KU_AlterTableContext* CypherParser::OC_StatementContext::kU_AlterTable() {
  return getRuleContext<CypherParser::KU_AlterTableContext>(0);
}

CypherParser::KU_CopyFromContext* CypherParser::OC_StatementContext::kU_CopyFrom() {
  return getRuleContext<CypherParser::KU_CopyFromContext>(0);
}

CypherParser::KU_CopyFromByColumnContext* CypherParser::OC_StatementContext::kU_CopyFromByColumn() {
  return getRuleContext<CypherParser::KU_CopyFromByColumnContext>(0);
}

CypherParser::KU_CopyTOContext* CypherParser::OC_StatementContext::kU_CopyTO() {
  return getRuleContext<CypherParser::KU_CopyTOContext>(0);
}

CypherParser::KU_StandaloneCallContext* CypherParser::OC_StatementContext::kU_StandaloneCall() {
  return getRuleContext<CypherParser::KU_StandaloneCallContext>(0);
}

CypherParser::KU_CreateMacroContext* CypherParser::OC_StatementContext::kU_CreateMacro() {
  return getRuleContext<CypherParser::KU_CreateMacroContext>(0);
}

CypherParser::KU_CommentOnContext* CypherParser::OC_StatementContext::kU_CommentOn() {
  return getRuleContext<CypherParser::KU_CommentOnContext>(0);
}

CypherParser::KU_TransactionContext* CypherParser::OC_StatementContext::kU_Transaction() {
  return getRuleContext<CypherParser::KU_TransactionContext>(0);
}

CypherParser::KU_ExtensionContext* CypherParser::OC_StatementContext::kU_Extension() {
  return getRuleContext<CypherParser::KU_ExtensionContext>(0);
}

CypherParser::KU_ExportDatabaseContext* CypherParser::OC_StatementContext::kU_ExportDatabase() {
  return getRuleContext<CypherParser::KU_ExportDatabaseContext>(0);
}

CypherParser::KU_ImportDatabaseContext* CypherParser::OC_StatementContext::kU_ImportDatabase() {
  return getRuleContext<CypherParser::KU_ImportDatabaseContext>(0);
}

CypherParser::KU_AttachDatabaseContext* CypherParser::OC_StatementContext::kU_AttachDatabase() {
  return getRuleContext<CypherParser::KU_AttachDatabaseContext>(0);
}

CypherParser::KU_DetachDatabaseContext* CypherParser::OC_StatementContext::kU_DetachDatabase() {
  return getRuleContext<CypherParser::KU_DetachDatabaseContext>(0);
}

CypherParser::KU_UseDatabaseContext* CypherParser::OC_StatementContext::kU_UseDatabase() {
  return getRuleContext<CypherParser::KU_UseDatabaseContext>(0);
}


size_t CypherParser::OC_StatementContext::getRuleIndex() const {
  return CypherParser::RuleOC_Statement;
}


CypherParser::OC_StatementContext* CypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, CypherParser::RuleOC_Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(384);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(362);
      oC_Query();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(363);
      kU_CreateNodeTable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(364);
      kU_CreateRelTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(365);
      kU_CreateRelTableGroup();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(366);
      kU_CreateRdfGraph();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(367);
      kU_CreateSequence();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(368);
      kU_CreateType();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(369);
      kU_Drop();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(370);
      kU_AlterTable();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(371);
      kU_CopyFrom();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(372);
      kU_CopyFromByColumn();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(373);
      kU_CopyTO();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(374);
      kU_StandaloneCall();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(375);
      kU_CreateMacro();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(376);
      kU_CommentOn();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(377);
      kU_Transaction();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(378);
      kU_Extension();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(379);
      kU_ExportDatabase();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(380);
      kU_ImportDatabase();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(381);
      kU_AttachDatabase();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(382);
      kU_DetachDatabase();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(383);
      kU_UseDatabase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromContext ------------------------------------------------------------------

CypherParser::KU_CopyFromContext::KU_CopyFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_CopyFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::KU_ColumnNamesContext* CypherParser::KU_CopyFromContext::kU_ColumnNames() {
  return getRuleContext<CypherParser::KU_ColumnNamesContext>(0);
}


size_t CypherParser::KU_CopyFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFrom;
}


CypherParser::KU_CopyFromContext* CypherParser::kU_CopyFrom() {
  KU_CopyFromContext *_localctx = _tracker.createInstance<KU_CopyFromContext>(_ctx, getState());
  enterRule(_localctx, 6, CypherParser::RuleKU_CopyFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(386);
    match(CypherParser::COPY);
    setState(387);
    match(CypherParser::SP);
    setState(388);
    oC_SchemaName();
    setState(397);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(390);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(389);
        match(CypherParser::SP);
      }
      setState(392);
      kU_ColumnNames();
      setState(394);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(393);
        match(CypherParser::SP);
      }
      break;
    }

    case 2: {
      setState(396);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(399);
    match(CypherParser::FROM);
    setState(400);
    match(CypherParser::SP);
    setState(401);
    kU_ScanSource();
    setState(406);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      setState(403);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(402);
        match(CypherParser::SP);
      }
      setState(405);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnNamesContext ------------------------------------------------------------------

CypherParser::KU_ColumnNamesContext::KU_ColumnNamesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_ColumnNamesContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ColumnNamesContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ColumnNamesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ColumnNamesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ColumnNamesContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnNames;
}


CypherParser::KU_ColumnNamesContext* CypherParser::kU_ColumnNames() {
  KU_ColumnNamesContext *_localctx = _tracker.createInstance<KU_ColumnNamesContext>(_ctx, getState());
  enterRule(_localctx, 8, CypherParser::RuleKU_ColumnNames);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(408);
    match(CypherParser::T__1);
    setState(410);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(409);
      match(CypherParser::SP);
    }
    setState(412);
    oC_SchemaName();
    setState(423);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(414);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(413);
          match(CypherParser::SP);
        }
        setState(416);
        match(CypherParser::T__2);
        setState(418);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(417);
          match(CypherParser::SP);
        }
        setState(420);
        oC_SchemaName(); 
      }
      setState(425);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    }
    setState(427);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(426);
      match(CypherParser::SP);
    }
    setState(429);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ScanSourceContext ------------------------------------------------------------------

CypherParser::KU_ScanSourceContext::KU_ScanSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_FilePathsContext* CypherParser::KU_ScanSourceContext::kU_FilePaths() {
  return getRuleContext<CypherParser::KU_FilePathsContext>(0);
}

CypherParser::OC_QueryContext* CypherParser::KU_ScanSourceContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ScanSourceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ScanSourceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::KU_ScanSourceContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ScanSourceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_ScanSourceContext::getRuleIndex() const {
  return CypherParser::RuleKU_ScanSource;
}


CypherParser::KU_ScanSourceContext* CypherParser::kU_ScanSource() {
  KU_ScanSourceContext *_localctx = _tracker.createInstance<KU_ScanSourceContext>(_ctx, getState());
  enterRule(_localctx, 10, CypherParser::RuleKU_ScanSource);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(450);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(431);
      kU_FilePaths();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(432);
      match(CypherParser::T__1);
      setState(434);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(433);
        match(CypherParser::SP);
      }
      setState(436);
      oC_Query();
      setState(438);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(437);
        match(CypherParser::SP);
      }
      setState(440);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(442);
      oC_Variable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(443);
      oC_Variable();
      setState(444);
      match(CypherParser::T__4);
      setState(446);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(445);
        match(CypherParser::SP);
      }
      setState(448);
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromByColumnContext ------------------------------------------------------------------

CypherParser::KU_CopyFromByColumnContext::KU_CopyFromByColumnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromByColumnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COLUMN() {
  return getToken(CypherParser::COLUMN, 0);
}


size_t CypherParser::KU_CopyFromByColumnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFromByColumn;
}


CypherParser::KU_CopyFromByColumnContext* CypherParser::kU_CopyFromByColumn() {
  KU_CopyFromByColumnContext *_localctx = _tracker.createInstance<KU_CopyFromByColumnContext>(_ctx, getState());
  enterRule(_localctx, 12, CypherParser::RuleKU_CopyFromByColumn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(452);
    match(CypherParser::COPY);
    setState(453);
    match(CypherParser::SP);
    setState(454);
    oC_SchemaName();
    setState(455);
    match(CypherParser::SP);
    setState(456);
    match(CypherParser::FROM);
    setState(457);
    match(CypherParser::SP);
    setState(458);
    match(CypherParser::T__1);
    setState(460);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(459);
      match(CypherParser::SP);
    }
    setState(462);
    match(CypherParser::StringLiteral);
    setState(473);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
      setState(464);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(463);
        match(CypherParser::SP);
      }
      setState(466);
      match(CypherParser::T__2);
      setState(468);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(467);
        match(CypherParser::SP);
      }
      setState(470);
      match(CypherParser::StringLiteral);
      setState(475);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(476);
    match(CypherParser::T__3);
    setState(477);
    match(CypherParser::SP);
    setState(478);
    match(CypherParser::BY);
    setState(479);
    match(CypherParser::SP);
    setState(480);
    match(CypherParser::COLUMN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyTOContext ------------------------------------------------------------------

CypherParser::KU_CopyTOContext::KU_CopyTOContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyTOContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_QueryContext* CypherParser::KU_CopyTOContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::TO() {
  return getToken(CypherParser::TO, 0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyTOContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_CopyTOContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyTO;
}


CypherParser::KU_CopyTOContext* CypherParser::kU_CopyTO() {
  KU_CopyTOContext *_localctx = _tracker.createInstance<KU_CopyTOContext>(_ctx, getState());
  enterRule(_localctx, 14, CypherParser::RuleKU_CopyTO);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(482);
    match(CypherParser::COPY);
    setState(483);
    match(CypherParser::SP);
    setState(484);
    match(CypherParser::T__1);
    setState(486);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(485);
      match(CypherParser::SP);
    }
    setState(488);
    oC_Query();
    setState(490);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(489);
      match(CypherParser::SP);
    }
    setState(492);
    match(CypherParser::T__3);
    setState(493);
    match(CypherParser::SP);
    setState(494);
    match(CypherParser::TO);
    setState(495);
    match(CypherParser::SP);
    setState(496);
    match(CypherParser::StringLiteral);
    setState(501);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      setState(498);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(497);
        match(CypherParser::SP);
      }
      setState(500);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ExportDatabaseContext::KU_ExportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ExportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_ExportDatabaseContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_ExportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ExportDatabase;
}


CypherParser::KU_ExportDatabaseContext* CypherParser::kU_ExportDatabase() {
  KU_ExportDatabaseContext *_localctx = _tracker.createInstance<KU_ExportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 16, CypherParser::RuleKU_ExportDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(503);
    match(CypherParser::EXPORT);
    setState(504);
    match(CypherParser::SP);
    setState(505);
    match(CypherParser::DATABASE);
    setState(506);
    match(CypherParser::SP);
    setState(507);
    match(CypherParser::StringLiteral);
    setState(512);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      setState(509);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(508);
        match(CypherParser::SP);
      }
      setState(511);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ImportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ImportDatabaseContext::KU_ImportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ImportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_ImportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ImportDatabase;
}


CypherParser::KU_ImportDatabaseContext* CypherParser::kU_ImportDatabase() {
  KU_ImportDatabaseContext *_localctx = _tracker.createInstance<KU_ImportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 18, CypherParser::RuleKU_ImportDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(514);
    match(CypherParser::IMPORT);
    setState(515);
    match(CypherParser::SP);
    setState(516);
    match(CypherParser::DATABASE);
    setState(517);
    match(CypherParser::SP);
    setState(518);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AttachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_AttachDatabaseContext::KU_AttachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::ATTACH() {
  return getToken(CypherParser::ATTACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AttachDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::DBTYPE() {
  return getToken(CypherParser::DBTYPE, 0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_AttachDatabaseContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AttachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_AttachDatabaseContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}


size_t CypherParser::KU_AttachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_AttachDatabase;
}


CypherParser::KU_AttachDatabaseContext* CypherParser::kU_AttachDatabase() {
  KU_AttachDatabaseContext *_localctx = _tracker.createInstance<KU_AttachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 20, CypherParser::RuleKU_AttachDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(520);
    match(CypherParser::ATTACH);
    setState(521);
    match(CypherParser::SP);
    setState(522);
    match(CypherParser::StringLiteral);
    setState(527);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(523);
      match(CypherParser::SP);
      setState(524);
      match(CypherParser::AS);
      setState(525);
      match(CypherParser::SP);
      setState(526);
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
    setState(529);
    match(CypherParser::SP);
    setState(530);
    match(CypherParser::T__1);
    setState(532);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(531);
      match(CypherParser::SP);
    }
    setState(534);
    match(CypherParser::DBTYPE);
    setState(535);
    match(CypherParser::SP);
    setState(536);
    oC_SymbolicName();
    setState(545);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      setState(538);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(537);
        match(CypherParser::SP);
      }
      setState(540);
      match(CypherParser::T__2);
      setState(542);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(541);
        match(CypherParser::SP);
      }
      setState(544);
      kU_Options();
      break;
    }

    default:
      break;
    }
    setState(548);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(547);
      match(CypherParser::SP);
    }
    setState(550);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionContext ------------------------------------------------------------------

CypherParser::KU_OptionContext::KU_OptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_OptionContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_OptionContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Option;
}


CypherParser::KU_OptionContext* CypherParser::kU_Option() {
  KU_OptionContext *_localctx = _tracker.createInstance<KU_OptionContext>(_ctx, getState());
  enterRule(_localctx, 22, CypherParser::RuleKU_Option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(552);
    oC_SymbolicName();
    setState(554);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(553);
      match(CypherParser::SP);
    }
    setState(556);
    match(CypherParser::T__5);
    setState(558);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(557);
      match(CypherParser::SP);
    }
    setState(560);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionsContext ------------------------------------------------------------------

CypherParser::KU_OptionsContext::KU_OptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_OptionContext *> CypherParser::KU_OptionsContext::kU_Option() {
  return getRuleContexts<CypherParser::KU_OptionContext>();
}

CypherParser::KU_OptionContext* CypherParser::KU_OptionsContext::kU_Option(size_t i) {
  return getRuleContext<CypherParser::KU_OptionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_Options;
}


CypherParser::KU_OptionsContext* CypherParser::kU_Options() {
  KU_OptionsContext *_localctx = _tracker.createInstance<KU_OptionsContext>(_ctx, getState());
  enterRule(_localctx, 24, CypherParser::RuleKU_Options);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(562);
    kU_Option();
    setState(573);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(564);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(563);
          match(CypherParser::SP);
        }
        setState(566);
        match(CypherParser::T__2);
        setState(568);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(567);
          match(CypherParser::SP);
        }
        setState(570);
        kU_Option(); 
      }
      setState(575);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DetachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_DetachDatabaseContext::KU_DetachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DetachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_DetachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_DetachDatabase;
}


CypherParser::KU_DetachDatabaseContext* CypherParser::kU_DetachDatabase() {
  KU_DetachDatabaseContext *_localctx = _tracker.createInstance<KU_DetachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 26, CypherParser::RuleKU_DetachDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(576);
    match(CypherParser::DETACH);
    setState(577);
    match(CypherParser::SP);
    setState(578);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_UseDatabaseContext ------------------------------------------------------------------

CypherParser::KU_UseDatabaseContext::KU_UseDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_UseDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_UseDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_UseDatabase;
}


CypherParser::KU_UseDatabaseContext* CypherParser::kU_UseDatabase() {
  KU_UseDatabaseContext *_localctx = _tracker.createInstance<KU_UseDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 28, CypherParser::RuleKU_UseDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(580);
    match(CypherParser::USE);
    setState(581);
    match(CypherParser::SP);
    setState(582);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StandaloneCallContext ------------------------------------------------------------------

CypherParser::KU_StandaloneCallContext::KU_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StandaloneCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StandaloneCallContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StandaloneCallContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_StandaloneCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_StandaloneCall;
}


CypherParser::KU_StandaloneCallContext* CypherParser::kU_StandaloneCall() {
  KU_StandaloneCallContext *_localctx = _tracker.createInstance<KU_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 30, CypherParser::RuleKU_StandaloneCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(584);
    match(CypherParser::CALL);
    setState(585);
    match(CypherParser::SP);
    setState(586);
    oC_SymbolicName();
    setState(588);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(587);
      match(CypherParser::SP);
    }
    setState(590);
    match(CypherParser::T__5);
    setState(592);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(591);
      match(CypherParser::SP);
    }
    setState(594);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CommentOnContext ------------------------------------------------------------------

CypherParser::KU_CommentOnContext::KU_CommentOnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::COMMENT_() {
  return getToken(CypherParser::COMMENT_, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CommentOnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::ON() {
  return getToken(CypherParser::ON, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CommentOnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_CommentOnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CommentOn;
}


CypherParser::KU_CommentOnContext* CypherParser::kU_CommentOn() {
  KU_CommentOnContext *_localctx = _tracker.createInstance<KU_CommentOnContext>(_ctx, getState());
  enterRule(_localctx, 32, CypherParser::RuleKU_CommentOn);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(596);
    match(CypherParser::COMMENT_);
    setState(597);
    match(CypherParser::SP);
    setState(598);
    match(CypherParser::ON);
    setState(599);
    match(CypherParser::SP);
    setState(600);
    match(CypherParser::TABLE);
    setState(601);
    match(CypherParser::SP);
    setState(602);
    oC_SchemaName();
    setState(603);
    match(CypherParser::SP);
    setState(604);
    match(CypherParser::IS);
    setState(605);
    match(CypherParser::SP);
    setState(606);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateMacroContext ------------------------------------------------------------------

CypherParser::KU_CreateMacroContext::KU_CreateMacroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateMacroContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::MACRO() {
  return getToken(CypherParser::MACRO, 0);
}

CypherParser::OC_FunctionNameContext* CypherParser::KU_CreateMacroContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_CreateMacroContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::KU_PositionalArgsContext* CypherParser::KU_CreateMacroContext::kU_PositionalArgs() {
  return getRuleContext<CypherParser::KU_PositionalArgsContext>(0);
}

std::vector<CypherParser::KU_DefaultArgContext *> CypherParser::KU_CreateMacroContext::kU_DefaultArg() {
  return getRuleContexts<CypherParser::KU_DefaultArgContext>();
}

CypherParser::KU_DefaultArgContext* CypherParser::KU_CreateMacroContext::kU_DefaultArg(size_t i) {
  return getRuleContext<CypherParser::KU_DefaultArgContext>(i);
}


size_t CypherParser::KU_CreateMacroContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateMacro;
}


CypherParser::KU_CreateMacroContext* CypherParser::kU_CreateMacro() {
  KU_CreateMacroContext *_localctx = _tracker.createInstance<KU_CreateMacroContext>(_ctx, getState());
  enterRule(_localctx, 34, CypherParser::RuleKU_CreateMacro);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(608);
    match(CypherParser::CREATE);
    setState(609);
    match(CypherParser::SP);
    setState(610);
    match(CypherParser::MACRO);
    setState(611);
    match(CypherParser::SP);
    setState(612);
    oC_FunctionName();
    setState(614);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(613);
      match(CypherParser::SP);
    }
    setState(616);
    match(CypherParser::T__1);
    setState(618);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      setState(617);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(621);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      setState(620);
      kU_PositionalArgs();
      break;
    }

    default:
      break;
    }
    setState(624);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      setState(623);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(627);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & 3377739490889477) != 0) || ((((_la - 113) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 113)) & 316938794827777) != 0)) {
      setState(626);
      kU_DefaultArg();
    }
    setState(639);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(630);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(629);
          match(CypherParser::SP);
        }
        setState(632);
        match(CypherParser::T__2);
        setState(634);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(633);
          match(CypherParser::SP);
        }
        setState(636);
        kU_DefaultArg(); 
      }
      setState(641);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    }
    setState(643);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(642);
      match(CypherParser::SP);
    }
    setState(645);
    match(CypherParser::T__3);
    setState(646);
    match(CypherParser::SP);
    setState(647);
    match(CypherParser::AS);
    setState(648);
    match(CypherParser::SP);
    setState(649);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PositionalArgsContext ------------------------------------------------------------------

CypherParser::KU_PositionalArgsContext::KU_PositionalArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_PositionalArgsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_PositionalArgsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PositionalArgsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PositionalArgsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PositionalArgsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PositionalArgs;
}


CypherParser::KU_PositionalArgsContext* CypherParser::kU_PositionalArgs() {
  KU_PositionalArgsContext *_localctx = _tracker.createInstance<KU_PositionalArgsContext>(_ctx, getState());
  enterRule(_localctx, 36, CypherParser::RuleKU_PositionalArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(651);
    oC_SymbolicName();
    setState(662);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(653);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(652);
          match(CypherParser::SP);
        }
        setState(655);
        match(CypherParser::T__2);
        setState(657);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(656);
          match(CypherParser::SP);
        }
        setState(659);
        oC_SymbolicName(); 
      }
      setState(664);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultArgContext ------------------------------------------------------------------

CypherParser::KU_DefaultArgContext::KU_DefaultArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DefaultArgContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_DefaultArgContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DefaultArgContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_DefaultArgContext::getRuleIndex() const {
  return CypherParser::RuleKU_DefaultArg;
}


CypherParser::KU_DefaultArgContext* CypherParser::kU_DefaultArg() {
  KU_DefaultArgContext *_localctx = _tracker.createInstance<KU_DefaultArgContext>(_ctx, getState());
  enterRule(_localctx, 38, CypherParser::RuleKU_DefaultArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(665);
    oC_SymbolicName();
    setState(667);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(666);
      match(CypherParser::SP);
    }
    setState(669);
    match(CypherParser::COLON);
    setState(670);
    match(CypherParser::T__5);
    setState(672);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(671);
      match(CypherParser::SP);
    }
    setState(674);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FilePathsContext ------------------------------------------------------------------

CypherParser::KU_FilePathsContext::KU_FilePathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::GLOB() {
  return getToken(CypherParser::GLOB, 0);
}


size_t CypherParser::KU_FilePathsContext::getRuleIndex() const {
  return CypherParser::RuleKU_FilePaths;
}


CypherParser::KU_FilePathsContext* CypherParser::kU_FilePaths() {
  KU_FilePathsContext *_localctx = _tracker.createInstance<KU_FilePathsContext>(_ctx, getState());
  enterRule(_localctx, 40, CypherParser::RuleKU_FilePaths);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(709);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 1);
        setState(676);
        match(CypherParser::T__6);
        setState(678);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(677);
          match(CypherParser::SP);
        }
        setState(680);
        match(CypherParser::StringLiteral);
        setState(691);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
          setState(682);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(681);
            match(CypherParser::SP);
          }
          setState(684);
          match(CypherParser::T__2);
          setState(686);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(685);
            match(CypherParser::SP);
          }
          setState(688);
          match(CypherParser::StringLiteral);
          setState(693);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(694);
        match(CypherParser::T__7);
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(695);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::GLOB: {
        enterOuterAlt(_localctx, 3);
        setState(696);
        match(CypherParser::GLOB);
        setState(698);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(697);
          match(CypherParser::SP);
        }
        setState(700);
        match(CypherParser::T__1);
        setState(702);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(701);
          match(CypherParser::SP);
        }
        setState(704);
        match(CypherParser::StringLiteral);
        setState(706);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(705);
          match(CypherParser::SP);
        }
        setState(708);
        match(CypherParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ParsingOptionsContext ------------------------------------------------------------------

CypherParser::KU_ParsingOptionsContext::KU_ParsingOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_OptionsContext* CypherParser::KU_ParsingOptionsContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ParsingOptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ParsingOptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ParsingOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_ParsingOptions;
}


CypherParser::KU_ParsingOptionsContext* CypherParser::kU_ParsingOptions() {
  KU_ParsingOptionsContext *_localctx = _tracker.createInstance<KU_ParsingOptionsContext>(_ctx, getState());
  enterRule(_localctx, 42, CypherParser::RuleKU_ParsingOptions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(711);
    match(CypherParser::T__1);
    setState(713);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(712);
      match(CypherParser::SP);
    }
    setState(715);
    kU_Options();
    setState(717);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(716);
      match(CypherParser::SP);
    }
    setState(719);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeTableContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeTableContext::KU_CreateNodeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateNodeTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_PropertyDefinitionsDDLContext* CypherParser::KU_CreateNodeTableContext::kU_PropertyDefinitionsDDL() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsDDLContext>(0);
}

CypherParser::KU_CreateNodeConstraintContext* CypherParser::KU_CreateNodeTableContext::kU_CreateNodeConstraint() {
  return getRuleContext<CypherParser::KU_CreateNodeConstraintContext>(0);
}


size_t CypherParser::KU_CreateNodeTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeTable;
}


CypherParser::KU_CreateNodeTableContext* CypherParser::kU_CreateNodeTable() {
  KU_CreateNodeTableContext *_localctx = _tracker.createInstance<KU_CreateNodeTableContext>(_ctx, getState());
  enterRule(_localctx, 44, CypherParser::RuleKU_CreateNodeTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(721);
    match(CypherParser::CREATE);
    setState(722);
    match(CypherParser::SP);
    setState(723);
    match(CypherParser::NODE);
    setState(724);
    match(CypherParser::SP);
    setState(725);
    match(CypherParser::TABLE);
    setState(726);
    match(CypherParser::SP);
    setState(727);
    oC_SchemaName();
    setState(729);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(728);
      match(CypherParser::SP);
    }
    setState(731);
    match(CypherParser::T__1);
    setState(733);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(732);
      match(CypherParser::SP);
    }
    setState(735);
    kU_PropertyDefinitionsDDL();
    setState(737);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(736);
      match(CypherParser::SP);
    }

    setState(739);
    match(CypherParser::T__2);
    setState(741);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(740);
      match(CypherParser::SP);
    }
    setState(743);
    kU_CreateNodeConstraint();
    setState(746);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(745);
      match(CypherParser::SP);
    }
    setState(748);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableContext::KU_CreateRelTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableContext::kU_RelTableConnection() {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(0);
}

CypherParser::KU_PropertyDefinitionsDDLContext* CypherParser::KU_CreateRelTableContext::kU_PropertyDefinitionsDDL() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsDDLContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTable;
}


CypherParser::KU_CreateRelTableContext* CypherParser::kU_CreateRelTable() {
  KU_CreateRelTableContext *_localctx = _tracker.createInstance<KU_CreateRelTableContext>(_ctx, getState());
  enterRule(_localctx, 46, CypherParser::RuleKU_CreateRelTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(750);
    match(CypherParser::CREATE);
    setState(751);
    match(CypherParser::SP);
    setState(752);
    match(CypherParser::REL);
    setState(753);
    match(CypherParser::SP);
    setState(754);
    match(CypherParser::TABLE);
    setState(755);
    match(CypherParser::SP);
    setState(756);
    oC_SchemaName();
    setState(758);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(757);
      match(CypherParser::SP);
    }
    setState(760);
    match(CypherParser::T__1);
    setState(762);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(761);
      match(CypherParser::SP);
    }
    setState(764);
    kU_RelTableConnection();
    setState(766);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(765);
      match(CypherParser::SP);
    }
    setState(776);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      setState(768);
      match(CypherParser::T__2);
      setState(770);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(769);
        match(CypherParser::SP);
      }
      setState(772);
      kU_PropertyDefinitionsDDL();
      setState(774);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(773);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(786);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
      setState(778);
      match(CypherParser::T__2);
      setState(780);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(779);
        match(CypherParser::SP);
      }
      setState(782);
      oC_SymbolicName();
      setState(784);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(783);
        match(CypherParser::SP);
      }
    }
    setState(788);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableGroupContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableGroupContext::KU_CreateRelTableGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableGroupContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::GROUP() {
  return getToken(CypherParser::GROUP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

std::vector<CypherParser::KU_RelTableConnectionContext *> CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection() {
  return getRuleContexts<CypherParser::KU_RelTableConnectionContext>();
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection(size_t i) {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(i);
}

CypherParser::KU_PropertyDefinitionsDDLContext* CypherParser::KU_CreateRelTableGroupContext::kU_PropertyDefinitionsDDL() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsDDLContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableGroupContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTableGroup;
}


CypherParser::KU_CreateRelTableGroupContext* CypherParser::kU_CreateRelTableGroup() {
  KU_CreateRelTableGroupContext *_localctx = _tracker.createInstance<KU_CreateRelTableGroupContext>(_ctx, getState());
  enterRule(_localctx, 48, CypherParser::RuleKU_CreateRelTableGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(790);
    match(CypherParser::CREATE);
    setState(791);
    match(CypherParser::SP);
    setState(792);
    match(CypherParser::REL);
    setState(793);
    match(CypherParser::SP);
    setState(794);
    match(CypherParser::TABLE);
    setState(795);
    match(CypherParser::SP);
    setState(796);
    match(CypherParser::GROUP);
    setState(797);
    match(CypherParser::SP);
    setState(798);
    oC_SchemaName();
    setState(800);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(799);
      match(CypherParser::SP);
    }
    setState(802);
    match(CypherParser::T__1);
    setState(804);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(803);
      match(CypherParser::SP);
    }
    setState(806);
    kU_RelTableConnection();
    setState(815); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(808);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(807);
                match(CypherParser::SP);
              }
              setState(810);
              match(CypherParser::T__2);
              setState(812);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(811);
                match(CypherParser::SP);
              }
              setState(814);
              kU_RelTableConnection();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(817); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(820);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(819);
      match(CypherParser::SP);
    }
    setState(830);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
      setState(822);
      match(CypherParser::T__2);
      setState(824);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(823);
        match(CypherParser::SP);
      }
      setState(826);
      kU_PropertyDefinitionsDDL();
      setState(828);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(827);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(840);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
      setState(832);
      match(CypherParser::T__2);
      setState(834);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(833);
        match(CypherParser::SP);
      }
      setState(836);
      oC_SymbolicName();
      setState(838);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(837);
        match(CypherParser::SP);
      }
    }
    setState(842);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RelTableConnectionContext ------------------------------------------------------------------

CypherParser::KU_RelTableConnectionContext::KU_RelTableConnectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RelTableConnectionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_RelTableConnectionContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RelTableConnectionContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RelTableConnectionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RelTableConnection;
}


CypherParser::KU_RelTableConnectionContext* CypherParser::kU_RelTableConnection() {
  KU_RelTableConnectionContext *_localctx = _tracker.createInstance<KU_RelTableConnectionContext>(_ctx, getState());
  enterRule(_localctx, 50, CypherParser::RuleKU_RelTableConnection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(844);
    match(CypherParser::FROM);
    setState(845);
    match(CypherParser::SP);
    setState(846);
    oC_SchemaName();
    setState(847);
    match(CypherParser::SP);
    setState(848);
    match(CypherParser::TO);
    setState(849);
    match(CypherParser::SP);
    setState(850);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRdfGraphContext ------------------------------------------------------------------

CypherParser::KU_CreateRdfGraphContext::KU_CreateRdfGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRdfGraphContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRdfGraphContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_CreateRdfGraphContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRdfGraph;
}


CypherParser::KU_CreateRdfGraphContext* CypherParser::kU_CreateRdfGraph() {
  KU_CreateRdfGraphContext *_localctx = _tracker.createInstance<KU_CreateRdfGraphContext>(_ctx, getState());
  enterRule(_localctx, 52, CypherParser::RuleKU_CreateRdfGraph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(852);
    match(CypherParser::CREATE);
    setState(853);
    match(CypherParser::SP);
    setState(854);
    match(CypherParser::RDFGRAPH);
    setState(855);
    match(CypherParser::SP);
    setState(856);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateSequenceContext ------------------------------------------------------------------

CypherParser::KU_CreateSequenceContext::KU_CreateSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateSequenceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateSequenceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

std::vector<CypherParser::KU_SequenceOptionsContext *> CypherParser::KU_CreateSequenceContext::kU_SequenceOptions() {
  return getRuleContexts<CypherParser::KU_SequenceOptionsContext>();
}

CypherParser::KU_SequenceOptionsContext* CypherParser::KU_CreateSequenceContext::kU_SequenceOptions(size_t i) {
  return getRuleContext<CypherParser::KU_SequenceOptionsContext>(i);
}


size_t CypherParser::KU_CreateSequenceContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateSequence;
}


CypherParser::KU_CreateSequenceContext* CypherParser::kU_CreateSequence() {
  KU_CreateSequenceContext *_localctx = _tracker.createInstance<KU_CreateSequenceContext>(_ctx, getState());
  enterRule(_localctx, 54, CypherParser::RuleKU_CreateSequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(858);
    match(CypherParser::CREATE);
    setState(859);
    match(CypherParser::SP);
    setState(860);
    match(CypherParser::SEQUENCE);
    setState(861);
    match(CypherParser::SP);
    setState(862);
    oC_SchemaName();
    setState(867);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(863);
        match(CypherParser::SP);
        setState(864);
        kU_SequenceOptions(); 
      }
      setState(869);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateTypeContext ------------------------------------------------------------------

CypherParser::KU_CreateTypeContext::KU_CreateTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::TYPE() {
  return getToken(CypherParser::TYPE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateTypeContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_CreateTypeContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_CreateTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateType;
}


CypherParser::KU_CreateTypeContext* CypherParser::kU_CreateType() {
  KU_CreateTypeContext *_localctx = _tracker.createInstance<KU_CreateTypeContext>(_ctx, getState());
  enterRule(_localctx, 56, CypherParser::RuleKU_CreateType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(870);
    match(CypherParser::CREATE);
    setState(871);
    match(CypherParser::SP);
    setState(872);
    match(CypherParser::TYPE);
    setState(873);
    match(CypherParser::SP);
    setState(874);
    oC_SchemaName();
    setState(875);
    match(CypherParser::SP);
    setState(876);
    match(CypherParser::AS);
    setState(877);
    match(CypherParser::SP);
    setState(878);
    kU_DataType(0);
    setState(880);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
    case 1: {
      setState(879);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_SequenceOptionsContext ------------------------------------------------------------------

CypherParser::KU_SequenceOptionsContext::KU_SequenceOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_IncrementByContext* CypherParser::KU_SequenceOptionsContext::kU_IncrementBy() {
  return getRuleContext<CypherParser::KU_IncrementByContext>(0);
}

CypherParser::KU_MinValueContext* CypherParser::KU_SequenceOptionsContext::kU_MinValue() {
  return getRuleContext<CypherParser::KU_MinValueContext>(0);
}

CypherParser::KU_MaxValueContext* CypherParser::KU_SequenceOptionsContext::kU_MaxValue() {
  return getRuleContext<CypherParser::KU_MaxValueContext>(0);
}

CypherParser::KU_StartWithContext* CypherParser::KU_SequenceOptionsContext::kU_StartWith() {
  return getRuleContext<CypherParser::KU_StartWithContext>(0);
}

CypherParser::KU_CycleContext* CypherParser::KU_SequenceOptionsContext::kU_Cycle() {
  return getRuleContext<CypherParser::KU_CycleContext>(0);
}


size_t CypherParser::KU_SequenceOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_SequenceOptions;
}


CypherParser::KU_SequenceOptionsContext* CypherParser::kU_SequenceOptions() {
  KU_SequenceOptionsContext *_localctx = _tracker.createInstance<KU_SequenceOptionsContext>(_ctx, getState());
  enterRule(_localctx, 58, CypherParser::RuleKU_SequenceOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(887);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(882);
      kU_IncrementBy();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(883);
      kU_MinValue();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(884);
      kU_MaxValue();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(885);
      kU_StartWith();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(886);
      kU_Cycle();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IncrementByContext ------------------------------------------------------------------

CypherParser::KU_IncrementByContext::KU_IncrementByContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_IncrementByContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_IncrementByContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_IncrementByContext::getRuleIndex() const {
  return CypherParser::RuleKU_IncrementBy;
}


CypherParser::KU_IncrementByContext* CypherParser::kU_IncrementBy() {
  KU_IncrementByContext *_localctx = _tracker.createInstance<KU_IncrementByContext>(_ctx, getState());
  enterRule(_localctx, 60, CypherParser::RuleKU_IncrementBy);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(889);
    match(CypherParser::INCREMENT);
    setState(890);
    match(CypherParser::SP);
    setState(893);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::BY) {
      setState(891);
      match(CypherParser::BY);
      setState(892);
      match(CypherParser::SP);
    }
    setState(896);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(895);
      match(CypherParser::MINUS);
    }
    setState(898);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MinValueContext ------------------------------------------------------------------

CypherParser::KU_MinValueContext::KU_MinValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MinValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MinValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MinValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MinValue;
}


CypherParser::KU_MinValueContext* CypherParser::kU_MinValue() {
  KU_MinValueContext *_localctx = _tracker.createInstance<KU_MinValueContext>(_ctx, getState());
  enterRule(_localctx, 62, CypherParser::RuleKU_MinValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(909);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(900);
        match(CypherParser::NO);
        setState(901);
        match(CypherParser::SP);
        setState(902);
        match(CypherParser::MINVALUE);
        break;
      }

      case CypherParser::MINVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(903);
        match(CypherParser::MINVALUE);
        setState(904);
        match(CypherParser::SP);
        setState(906);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(905);
          match(CypherParser::MINUS);
        }
        setState(908);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MaxValueContext ------------------------------------------------------------------

CypherParser::KU_MaxValueContext::KU_MaxValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MaxValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MaxValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MaxValue;
}


CypherParser::KU_MaxValueContext* CypherParser::kU_MaxValue() {
  KU_MaxValueContext *_localctx = _tracker.createInstance<KU_MaxValueContext>(_ctx, getState());
  enterRule(_localctx, 64, CypherParser::RuleKU_MaxValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(920);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(911);
        match(CypherParser::NO);
        setState(912);
        match(CypherParser::SP);
        setState(913);
        match(CypherParser::MAXVALUE);
        break;
      }

      case CypherParser::MAXVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(914);
        match(CypherParser::MAXVALUE);
        setState(915);
        match(CypherParser::SP);
        setState(917);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(916);
          match(CypherParser::MINUS);
        }
        setState(919);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StartWithContext ------------------------------------------------------------------

CypherParser::KU_StartWithContext::KU_StartWithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StartWithContext::START() {
  return getToken(CypherParser::START, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StartWithContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_StartWithContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_StartWithContext::getRuleIndex() const {
  return CypherParser::RuleKU_StartWith;
}


CypherParser::KU_StartWithContext* CypherParser::kU_StartWith() {
  KU_StartWithContext *_localctx = _tracker.createInstance<KU_StartWithContext>(_ctx, getState());
  enterRule(_localctx, 66, CypherParser::RuleKU_StartWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(922);
    match(CypherParser::START);
    setState(923);
    match(CypherParser::SP);
    setState(926);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::WITH) {
      setState(924);
      match(CypherParser::WITH);
      setState(925);
      match(CypherParser::SP);
    }
    setState(929);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(928);
      match(CypherParser::MINUS);
    }
    setState(931);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CycleContext ------------------------------------------------------------------

CypherParser::KU_CycleContext::KU_CycleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CycleContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::KU_CycleContext::getRuleIndex() const {
  return CypherParser::RuleKU_Cycle;
}


CypherParser::KU_CycleContext* CypherParser::kU_Cycle() {
  KU_CycleContext *_localctx = _tracker.createInstance<KU_CycleContext>(_ctx, getState());
  enterRule(_localctx, 68, CypherParser::RuleKU_Cycle);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(935);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::NO) {
      setState(933);
      match(CypherParser::NO);
      setState(934);
      match(CypherParser::SP);
    }
    setState(937);
    match(CypherParser::CYCLE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropContext ------------------------------------------------------------------

CypherParser::KU_DropContext::KU_DropContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DropContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DropContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DropContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DropContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_DropContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}

tree::TerminalNode* CypherParser::KU_DropContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}


size_t CypherParser::KU_DropContext::getRuleIndex() const {
  return CypherParser::RuleKU_Drop;
}


CypherParser::KU_DropContext* CypherParser::kU_Drop() {
  KU_DropContext *_localctx = _tracker.createInstance<KU_DropContext>(_ctx, getState());
  enterRule(_localctx, 70, CypherParser::RuleKU_Drop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(939);
    match(CypherParser::DROP);
    setState(940);
    match(CypherParser::SP);
    setState(941);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -3458764513820540928) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(942);
    match(CypherParser::SP);
    setState(943);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterTableContext ------------------------------------------------------------------

CypherParser::KU_AlterTableContext::KU_AlterTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AlterTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AlterTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_AlterOptionsContext* CypherParser::KU_AlterTableContext::kU_AlterOptions() {
  return getRuleContext<CypherParser::KU_AlterOptionsContext>(0);
}


size_t CypherParser::KU_AlterTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterTable;
}


CypherParser::KU_AlterTableContext* CypherParser::kU_AlterTable() {
  KU_AlterTableContext *_localctx = _tracker.createInstance<KU_AlterTableContext>(_ctx, getState());
  enterRule(_localctx, 72, CypherParser::RuleKU_AlterTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(945);
    match(CypherParser::ALTER);
    setState(946);
    match(CypherParser::SP);
    setState(947);
    match(CypherParser::TABLE);
    setState(948);
    match(CypherParser::SP);
    setState(949);
    oC_SchemaName();
    setState(950);
    match(CypherParser::SP);
    setState(951);
    kU_AlterOptions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterOptionsContext ------------------------------------------------------------------

CypherParser::KU_AlterOptionsContext::KU_AlterOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_AddPropertyContext* CypherParser::KU_AlterOptionsContext::kU_AddProperty() {
  return getRuleContext<CypherParser::KU_AddPropertyContext>(0);
}

CypherParser::KU_DropPropertyContext* CypherParser::KU_AlterOptionsContext::kU_DropProperty() {
  return getRuleContext<CypherParser::KU_DropPropertyContext>(0);
}

CypherParser::KU_RenameTableContext* CypherParser::KU_AlterOptionsContext::kU_RenameTable() {
  return getRuleContext<CypherParser::KU_RenameTableContext>(0);
}

CypherParser::KU_RenamePropertyContext* CypherParser::KU_AlterOptionsContext::kU_RenameProperty() {
  return getRuleContext<CypherParser::KU_RenamePropertyContext>(0);
}


size_t CypherParser::KU_AlterOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterOptions;
}


CypherParser::KU_AlterOptionsContext* CypherParser::kU_AlterOptions() {
  KU_AlterOptionsContext *_localctx = _tracker.createInstance<KU_AlterOptionsContext>(_ctx, getState());
  enterRule(_localctx, 74, CypherParser::RuleKU_AlterOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(957);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(953);
      kU_AddProperty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(954);
      kU_DropProperty();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(955);
      kU_RenameTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(956);
      kU_RenameProperty();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddPropertyContext ------------------------------------------------------------------

CypherParser::KU_AddPropertyContext::KU_AddPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AddPropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_AddPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_AddPropertyContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

CypherParser::KU_DefaultContext* CypherParser::KU_AddPropertyContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}


size_t CypherParser::KU_AddPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddProperty;
}


CypherParser::KU_AddPropertyContext* CypherParser::kU_AddProperty() {
  KU_AddPropertyContext *_localctx = _tracker.createInstance<KU_AddPropertyContext>(_ctx, getState());
  enterRule(_localctx, 76, CypherParser::RuleKU_AddProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(959);
    match(CypherParser::ADD);
    setState(960);
    match(CypherParser::SP);
    setState(961);
    oC_PropertyKeyName();
    setState(962);
    match(CypherParser::SP);
    setState(963);
    kU_DataType(0);
    setState(966);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx)) {
    case 1: {
      setState(964);
      match(CypherParser::SP);
      setState(965);
      kU_Default();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultContext ------------------------------------------------------------------

CypherParser::KU_DefaultContext::KU_DefaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DefaultContext::DEFAULT() {
  return getToken(CypherParser::DEFAULT, 0);
}

tree::TerminalNode* CypherParser::KU_DefaultContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_DefaultContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_DefaultContext::getRuleIndex() const {
  return CypherParser::RuleKU_Default;
}


CypherParser::KU_DefaultContext* CypherParser::kU_Default() {
  KU_DefaultContext *_localctx = _tracker.createInstance<KU_DefaultContext>(_ctx, getState());
  enterRule(_localctx, 78, CypherParser::RuleKU_Default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(968);
    match(CypherParser::DEFAULT);
    setState(969);
    match(CypherParser::SP);
    setState(970);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropPropertyContext ------------------------------------------------------------------

CypherParser::KU_DropPropertyContext::KU_DropPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_DropPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_DropPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropProperty;
}


CypherParser::KU_DropPropertyContext* CypherParser::kU_DropProperty() {
  KU_DropPropertyContext *_localctx = _tracker.createInstance<KU_DropPropertyContext>(_ctx, getState());
  enterRule(_localctx, 80, CypherParser::RuleKU_DropProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(972);
    match(CypherParser::DROP);
    setState(973);
    match(CypherParser::SP);
    setState(974);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenameTableContext ------------------------------------------------------------------

CypherParser::KU_RenameTableContext::KU_RenameTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenameTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::TO() {
  return getToken(CypherParser::TO, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RenameTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_RenameTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameTable;
}


CypherParser::KU_RenameTableContext* CypherParser::kU_RenameTable() {
  KU_RenameTableContext *_localctx = _tracker.createInstance<KU_RenameTableContext>(_ctx, getState());
  enterRule(_localctx, 82, CypherParser::RuleKU_RenameTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(976);
    match(CypherParser::RENAME);
    setState(977);
    match(CypherParser::SP);
    setState(978);
    match(CypherParser::TO);
    setState(979);
    match(CypherParser::SP);
    setState(980);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenamePropertyContext ------------------------------------------------------------------

CypherParser::KU_RenamePropertyContext::KU_RenamePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenamePropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RenamePropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameProperty;
}


CypherParser::KU_RenamePropertyContext* CypherParser::kU_RenameProperty() {
  KU_RenamePropertyContext *_localctx = _tracker.createInstance<KU_RenamePropertyContext>(_ctx, getState());
  enterRule(_localctx, 84, CypherParser::RuleKU_RenameProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(982);
    match(CypherParser::RENAME);
    setState(983);
    match(CypherParser::SP);
    setState(984);
    oC_PropertyKeyName();
    setState(985);
    match(CypherParser::SP);
    setState(986);
    match(CypherParser::TO);
    setState(987);
    match(CypherParser::SP);
    setState(988);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsContext::KU_PropertyDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionContext *> CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionContext>();
}

CypherParser::KU_PropertyDefinitionContext* CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitions;
}


CypherParser::KU_PropertyDefinitionsContext* CypherParser::kU_PropertyDefinitions() {
  KU_PropertyDefinitionsContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 86, CypherParser::RuleKU_PropertyDefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(990);
    kU_PropertyDefinition();
    setState(1001);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(992);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(991);
          match(CypherParser::SP);
        }
        setState(994);
        match(CypherParser::T__2);
        setState(996);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(995);
          match(CypherParser::SP);
        }
        setState(998);
        kU_PropertyDefinition(); 
      }
      setState(1003);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionContext::KU_PropertyDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertyDefinitionContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_PropertyDefinitionContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinition;
}


CypherParser::KU_PropertyDefinitionContext* CypherParser::kU_PropertyDefinition() {
  KU_PropertyDefinitionContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 88, CypherParser::RuleKU_PropertyDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1004);
    oC_PropertyKeyName();
    setState(1005);
    match(CypherParser::SP);
    setState(1006);
    kU_DataType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsDDLContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsDDLContext::KU_PropertyDefinitionsDDLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionDDLContext *> CypherParser::KU_PropertyDefinitionsDDLContext::kU_PropertyDefinitionDDL() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionDDLContext>();
}

CypherParser::KU_PropertyDefinitionDDLContext* CypherParser::KU_PropertyDefinitionsDDLContext::kU_PropertyDefinitionDDL(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionDDLContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsDDLContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsDDLContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsDDLContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitionsDDL;
}


CypherParser::KU_PropertyDefinitionsDDLContext* CypherParser::kU_PropertyDefinitionsDDL() {
  KU_PropertyDefinitionsDDLContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsDDLContext>(_ctx, getState());
  enterRule(_localctx, 90, CypherParser::RuleKU_PropertyDefinitionsDDL);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1008);
    kU_PropertyDefinitionDDL();
    setState(1019);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1010);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1009);
          match(CypherParser::SP);
        }
        setState(1012);
        match(CypherParser::T__2);
        setState(1014);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1013);
          match(CypherParser::SP);
        }
        setState(1016);
        kU_PropertyDefinitionDDL(); 
      }
      setState(1021);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionDDLContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionDDLContext::KU_PropertyDefinitionDDLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertyDefinitionDDLContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionDDLContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionDDLContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_PropertyDefinitionDDLContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

CypherParser::KU_DefaultContext* CypherParser::KU_PropertyDefinitionDDLContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionDDLContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitionDDL;
}


CypherParser::KU_PropertyDefinitionDDLContext* CypherParser::kU_PropertyDefinitionDDL() {
  KU_PropertyDefinitionDDLContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionDDLContext>(_ctx, getState());
  enterRule(_localctx, 92, CypherParser::RuleKU_PropertyDefinitionDDL);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1022);
    oC_PropertyKeyName();
    setState(1023);
    match(CypherParser::SP);
    setState(1024);
    kU_DataType(0);
    setState(1027);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx)) {
    case 1: {
      setState(1025);
      match(CypherParser::SP);
      setState(1026);
      kU_Default();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeConstraintContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeConstraintContext::KU_CreateNodeConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::PRIMARY() {
  return getToken(CypherParser::PRIMARY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeConstraintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_CreateNodeConstraintContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_CreateNodeConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeConstraint;
}


CypherParser::KU_CreateNodeConstraintContext* CypherParser::kU_CreateNodeConstraint() {
  KU_CreateNodeConstraintContext *_localctx = _tracker.createInstance<KU_CreateNodeConstraintContext>(_ctx, getState());
  enterRule(_localctx, 94, CypherParser::RuleKU_CreateNodeConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1029);
    match(CypherParser::PRIMARY);
    setState(1030);
    match(CypherParser::SP);
    setState(1031);
    match(CypherParser::KEY);
    setState(1033);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1032);
      match(CypherParser::SP);
    }
    setState(1035);
    match(CypherParser::T__1);
    setState(1037);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1036);
      match(CypherParser::SP);
    }
    setState(1039);
    oC_PropertyKeyName();
    setState(1041);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1040);
      match(CypherParser::SP);
    }
    setState(1043);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DataTypeContext ------------------------------------------------------------------

CypherParser::KU_DataTypeContext::KU_DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DataTypeContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_DataTypeContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DataTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::KU_DataTypeContext *> CypherParser::KU_DataTypeContext::kU_DataType() {
  return getRuleContexts<CypherParser::KU_DataTypeContext>();
}

CypherParser::KU_DataTypeContext* CypherParser::KU_DataTypeContext::kU_DataType(size_t i) {
  return getRuleContext<CypherParser::KU_DataTypeContext>(i);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::DECIMAL() {
  return getToken(CypherParser::DECIMAL, 0);
}

std::vector<CypherParser::OC_IntegerLiteralContext *> CypherParser::KU_DataTypeContext::oC_IntegerLiteral() {
  return getRuleContexts<CypherParser::OC_IntegerLiteralContext>();
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_DataTypeContext::oC_IntegerLiteral(size_t i) {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(i);
}

CypherParser::KU_ListIdentifiersContext* CypherParser::KU_DataTypeContext::kU_ListIdentifiers() {
  return getRuleContext<CypherParser::KU_ListIdentifiersContext>(0);
}


size_t CypherParser::KU_DataTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_DataType;
}



CypherParser::KU_DataTypeContext* CypherParser::kU_DataType() {
   return kU_DataType(0);
}

CypherParser::KU_DataTypeContext* CypherParser::kU_DataType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_DataTypeContext *_localctx = _tracker.createInstance<KU_DataTypeContext>(_ctx, parentState);
  CypherParser::KU_DataTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 96;
  enterRecursionRule(_localctx, 96, CypherParser::RuleKU_DataType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1119);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      setState(1046);
      oC_SymbolicName();
      break;
    }

    case 2: {
      setState(1047);
      match(CypherParser::UNION);
      setState(1049);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1048);
        match(CypherParser::SP);
      }
      setState(1051);
      match(CypherParser::T__1);
      setState(1053);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1052);
        match(CypherParser::SP);
      }
      setState(1055);
      kU_PropertyDefinitions();
      setState(1057);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1056);
        match(CypherParser::SP);
      }
      setState(1059);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      setState(1061);
      oC_SymbolicName();
      setState(1063);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1062);
        match(CypherParser::SP);
      }
      setState(1065);
      match(CypherParser::T__1);
      setState(1067);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1066);
        match(CypherParser::SP);
      }
      setState(1069);
      kU_PropertyDefinitions();
      setState(1071);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1070);
        match(CypherParser::SP);
      }
      setState(1073);
      match(CypherParser::T__3);
      break;
    }

    case 4: {
      setState(1075);
      oC_SymbolicName();
      setState(1077);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1076);
        match(CypherParser::SP);
      }
      setState(1079);
      match(CypherParser::T__1);
      setState(1081);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1080);
        match(CypherParser::SP);
      }
      setState(1083);
      kU_DataType(0);
      setState(1085);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1084);
        match(CypherParser::SP);
      }
      setState(1087);
      match(CypherParser::T__2);
      setState(1089);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1088);
        match(CypherParser::SP);
      }
      setState(1091);
      kU_DataType(0);
      setState(1093);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1092);
        match(CypherParser::SP);
      }
      setState(1095);
      match(CypherParser::T__3);
      break;
    }

    case 5: {
      setState(1097);
      match(CypherParser::DECIMAL);
      setState(1099);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1098);
        match(CypherParser::SP);
      }
      setState(1101);
      match(CypherParser::T__1);
      setState(1103);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1102);
        match(CypherParser::SP);
      }
      setState(1105);
      oC_IntegerLiteral();
      setState(1107);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1106);
        match(CypherParser::SP);
      }
      setState(1109);
      match(CypherParser::T__2);
      setState(1111);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1110);
        match(CypherParser::SP);
      }
      setState(1113);
      oC_IntegerLiteral();
      setState(1115);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1114);
        match(CypherParser::SP);
      }
      setState(1117);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1125);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<KU_DataTypeContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleKU_DataType);
        setState(1121);

        if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
        setState(1122);
        kU_ListIdentifiers(); 
      }
      setState(1127);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- KU_ListIdentifiersContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifiersContext::KU_ListIdentifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ListIdentifierContext *> CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier() {
  return getRuleContexts<CypherParser::KU_ListIdentifierContext>();
}

CypherParser::KU_ListIdentifierContext* CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier(size_t i) {
  return getRuleContext<CypherParser::KU_ListIdentifierContext>(i);
}


size_t CypherParser::KU_ListIdentifiersContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifiers;
}


CypherParser::KU_ListIdentifiersContext* CypherParser::kU_ListIdentifiers() {
  KU_ListIdentifiersContext *_localctx = _tracker.createInstance<KU_ListIdentifiersContext>(_ctx, getState());
  enterRule(_localctx, 98, CypherParser::RuleKU_ListIdentifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1128);
    kU_ListIdentifier();
    setState(1132);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1129);
        kU_ListIdentifier(); 
      }
      setState(1134);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListIdentifierContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifierContext::KU_ListIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_ListIdentifierContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::KU_ListIdentifierContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifier;
}


CypherParser::KU_ListIdentifierContext* CypherParser::kU_ListIdentifier() {
  KU_ListIdentifierContext *_localctx = _tracker.createInstance<KU_ListIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 100, CypherParser::RuleKU_ListIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1135);
    match(CypherParser::T__6);
    setState(1137);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DecimalInteger) {
      setState(1136);
      oC_IntegerLiteral();
    }
    setState(1139);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnyCypherOptionContext ------------------------------------------------------------------

CypherParser::OC_AnyCypherOptionContext::OC_AnyCypherOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExplainContext* CypherParser::OC_AnyCypherOptionContext::oC_Explain() {
  return getRuleContext<CypherParser::OC_ExplainContext>(0);
}

CypherParser::OC_ProfileContext* CypherParser::OC_AnyCypherOptionContext::oC_Profile() {
  return getRuleContext<CypherParser::OC_ProfileContext>(0);
}


size_t CypherParser::OC_AnyCypherOptionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnyCypherOption;
}


CypherParser::OC_AnyCypherOptionContext* CypherParser::oC_AnyCypherOption() {
  OC_AnyCypherOptionContext *_localctx = _tracker.createInstance<OC_AnyCypherOptionContext>(_ctx, getState());
  enterRule(_localctx, 102, CypherParser::RuleOC_AnyCypherOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1143);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::EXPLAIN: {
        enterOuterAlt(_localctx, 1);
        setState(1141);
        oC_Explain();
        break;
      }

      case CypherParser::PROFILE: {
        enterOuterAlt(_localctx, 2);
        setState(1142);
        oC_Profile();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplainContext ------------------------------------------------------------------

CypherParser::OC_ExplainContext::OC_ExplainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExplainContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}


size_t CypherParser::OC_ExplainContext::getRuleIndex() const {
  return CypherParser::RuleOC_Explain;
}


CypherParser::OC_ExplainContext* CypherParser::oC_Explain() {
  OC_ExplainContext *_localctx = _tracker.createInstance<OC_ExplainContext>(_ctx, getState());
  enterRule(_localctx, 104, CypherParser::RuleOC_Explain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1145);
    match(CypherParser::EXPLAIN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProfileContext ------------------------------------------------------------------

CypherParser::OC_ProfileContext::OC_ProfileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProfileContext::PROFILE() {
  return getToken(CypherParser::PROFILE, 0);
}


size_t CypherParser::OC_ProfileContext::getRuleIndex() const {
  return CypherParser::RuleOC_Profile;
}


CypherParser::OC_ProfileContext* CypherParser::oC_Profile() {
  OC_ProfileContext *_localctx = _tracker.createInstance<OC_ProfileContext>(_ctx, getState());
  enterRule(_localctx, 106, CypherParser::RuleOC_Profile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1147);
    match(CypherParser::PROFILE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_TransactionContext ------------------------------------------------------------------

CypherParser::KU_TransactionContext::KU_TransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_TransactionContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_TransactionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ONLY() {
  return getToken(CypherParser::ONLY, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT_SKIP_CHECKPOINT() {
  return getToken(CypherParser::COMMIT_SKIP_CHECKPOINT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK_SKIP_CHECKPOINT() {
  return getToken(CypherParser::ROLLBACK_SKIP_CHECKPOINT, 0);
}


size_t CypherParser::KU_TransactionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Transaction;
}


CypherParser::KU_TransactionContext* CypherParser::kU_Transaction() {
  KU_TransactionContext *_localctx = _tracker.createInstance<KU_TransactionContext>(_ctx, getState());
  enterRule(_localctx, 108, CypherParser::RuleKU_Transaction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1163);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1149);
      match(CypherParser::BEGIN);
      setState(1150);
      match(CypherParser::SP);
      setState(1151);
      match(CypherParser::TRANSACTION);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1152);
      match(CypherParser::BEGIN);
      setState(1153);
      match(CypherParser::SP);
      setState(1154);
      match(CypherParser::TRANSACTION);
      setState(1155);
      match(CypherParser::SP);
      setState(1156);
      match(CypherParser::READ);
      setState(1157);
      match(CypherParser::SP);
      setState(1158);
      match(CypherParser::ONLY);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1159);
      match(CypherParser::COMMIT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1160);
      match(CypherParser::COMMIT_SKIP_CHECKPOINT);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1161);
      match(CypherParser::ROLLBACK);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1162);
      match(CypherParser::ROLLBACK_SKIP_CHECKPOINT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExtensionContext ------------------------------------------------------------------

CypherParser::KU_ExtensionContext::KU_ExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LoadExtensionContext* CypherParser::KU_ExtensionContext::kU_LoadExtension() {
  return getRuleContext<CypherParser::KU_LoadExtensionContext>(0);
}

CypherParser::KU_InstallExtensionContext* CypherParser::KU_ExtensionContext::kU_InstallExtension() {
  return getRuleContext<CypherParser::KU_InstallExtensionContext>(0);
}


size_t CypherParser::KU_ExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Extension;
}


CypherParser::KU_ExtensionContext* CypherParser::kU_Extension() {
  KU_ExtensionContext *_localctx = _tracker.createInstance<KU_ExtensionContext>(_ctx, getState());
  enterRule(_localctx, 110, CypherParser::RuleKU_Extension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1167);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 1);
        setState(1165);
        kU_LoadExtension();
        break;
      }

      case CypherParser::INSTALL: {
        enterOuterAlt(_localctx, 2);
        setState(1166);
        kU_InstallExtension();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadExtensionContext ------------------------------------------------------------------

CypherParser::KU_LoadExtensionContext::KU_LoadExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadExtensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_LoadExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_LoadExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadExtension;
}


CypherParser::KU_LoadExtensionContext* CypherParser::kU_LoadExtension() {
  KU_LoadExtensionContext *_localctx = _tracker.createInstance<KU_LoadExtensionContext>(_ctx, getState());
  enterRule(_localctx, 112, CypherParser::RuleKU_LoadExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1169);
    match(CypherParser::LOAD);
    setState(1170);
    match(CypherParser::SP);
    setState(1171);
    match(CypherParser::EXTENSION);
    setState(1172);
    match(CypherParser::SP);
    setState(1175);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::StringLiteral: {
        setState(1173);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::TYPE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::DEFAULT:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::PROJECT:
      case CypherParser::GRAPH:
      case CypherParser::AS:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1174);
        oC_Variable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InstallExtensionContext ------------------------------------------------------------------

CypherParser::KU_InstallExtensionContext::KU_InstallExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::INSTALL() {
  return getToken(CypherParser::INSTALL, 0);
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_InstallExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_InstallExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_InstallExtension;
}


CypherParser::KU_InstallExtensionContext* CypherParser::kU_InstallExtension() {
  KU_InstallExtensionContext *_localctx = _tracker.createInstance<KU_InstallExtensionContext>(_ctx, getState());
  enterRule(_localctx, 114, CypherParser::RuleKU_InstallExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1177);
    match(CypherParser::INSTALL);
    setState(1178);
    match(CypherParser::SP);
    setState(1179);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

CypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RegularQueryContext* CypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<CypherParser::OC_RegularQueryContext>(0);
}


size_t CypherParser::OC_QueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_Query;
}


CypherParser::OC_QueryContext* CypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
  enterRule(_localctx, 116, CypherParser::RuleOC_Query);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1181);
    oC_RegularQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

CypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}

std::vector<CypherParser::OC_UnionContext *> CypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<CypherParser::OC_UnionContext>();
}

CypherParser::OC_UnionContext* CypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<CypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RegularQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_ReturnContext *> CypherParser::OC_RegularQueryContext::oC_Return() {
  return getRuleContexts<CypherParser::OC_ReturnContext>();
}

CypherParser::OC_ReturnContext* CypherParser::OC_RegularQueryContext::oC_Return(size_t i) {
  return getRuleContext<CypherParser::OC_ReturnContext>(i);
}


size_t CypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularQuery;
}


CypherParser::OC_RegularQueryContext* CypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
  enterRule(_localctx, 118, CypherParser::RuleOC_RegularQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1204);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1183);
      oC_SingleQuery();
      setState(1190);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1185);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1184);
            match(CypherParser::SP);
          }
          setState(1187);
          oC_Union(); 
        }
        setState(1192);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1197); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1193);
                oC_Return();
                setState(1195);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1194);
                  match(CypherParser::SP);
                }
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1199); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1201);
      oC_SingleQuery();
       notifyReturnNotAtEnd(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

CypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnionContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnionContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}


size_t CypherParser::OC_UnionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Union;
}


CypherParser::OC_UnionContext* CypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
  enterRule(_localctx, 120, CypherParser::RuleOC_Union);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1218);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1206);
      match(CypherParser::UNION);
      setState(1207);
      match(CypherParser::SP);
      setState(1208);
      match(CypherParser::ALL);
      setState(1210);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1209);
        match(CypherParser::SP);
      }
      setState(1212);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1213);
      match(CypherParser::UNION);
      setState(1215);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1214);
        match(CypherParser::SP);
      }
      setState(1217);
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

CypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

CypherParser::OC_MultiPartQueryContext* CypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<CypherParser::OC_MultiPartQueryContext>(0);
}


size_t CypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SingleQuery;
}


CypherParser::OC_SingleQueryContext* CypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 122, CypherParser::RuleOC_SingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1222);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1220);
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1221);
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

CypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ReturnContext* CypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<CypherParser::OC_ReturnContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}


size_t CypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SinglePartQuery;
}


CypherParser::OC_SinglePartQueryContext* CypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
  enterRule(_localctx, 124, CypherParser::RuleOC_SinglePartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1269);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1230);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 49) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 49)) & 16466286137573377) != 0)) {
        setState(1224);
        oC_ReadingClause();
        setState(1226);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1225);
          match(CypherParser::SP);
        }
        setState(1232);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1233);
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1240);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 49) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 49)) & 16466286137573377) != 0)) {
        setState(1234);
        oC_ReadingClause();
        setState(1236);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1235);
          match(CypherParser::SP);
        }
        setState(1242);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1243);
      oC_UpdatingClause();
      setState(1250);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1245);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1244);
            match(CypherParser::SP);
          }
          setState(1247);
          oC_UpdatingClause(); 
        }
        setState(1252);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx);
      }
      setState(1257);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx)) {
      case 1: {
        setState(1254);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1253);
          match(CypherParser::SP);
        }
        setState(1256);
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1263); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1259);
        oC_ReadingClause();
        setState(1261);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx)) {
        case 1: {
          setState(1260);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(1265); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (((((_la - 49) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 49)) & 16466286137573377) != 0));
       notifyQueryNotConcludeWithReturn(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

CypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<CypherParser::KU_QueryPartContext *> CypherParser::OC_MultiPartQueryContext::kU_QueryPart() {
  return getRuleContexts<CypherParser::KU_QueryPartContext>();
}

CypherParser::KU_QueryPartContext* CypherParser::OC_MultiPartQueryContext::kU_QueryPart(size_t i) {
  return getRuleContext<CypherParser::KU_QueryPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiPartQuery;
}


CypherParser::OC_MultiPartQueryContext* CypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
  enterRule(_localctx, 126, CypherParser::RuleOC_MultiPartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1275); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1271);
              kU_QueryPart();
              setState(1273);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(1272);
                match(CypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1277); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1279);
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_QueryPartContext ------------------------------------------------------------------

CypherParser::KU_QueryPartContext::KU_QueryPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_WithContext* CypherParser::KU_QueryPartContext::oC_With() {
  return getRuleContext<CypherParser::OC_WithContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::KU_QueryPartContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::KU_QueryPartContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::KU_QueryPartContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::KU_QueryPartContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_QueryPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_QueryPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_QueryPartContext::getRuleIndex() const {
  return CypherParser::RuleKU_QueryPart;
}


CypherParser::KU_QueryPartContext* CypherParser::kU_QueryPart() {
  KU_QueryPartContext *_localctx = _tracker.createInstance<KU_QueryPartContext>(_ctx, getState());
  enterRule(_localctx, 128, CypherParser::RuleKU_QueryPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1287);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 49) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 49)) & 16466286137573377) != 0)) {
      setState(1281);
      oC_ReadingClause();
      setState(1283);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1282);
        match(CypherParser::SP);
      }
      setState(1289);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1296);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 103) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 103)) & 59) != 0)) {
      setState(1290);
      oC_UpdatingClause();
      setState(1292);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1291);
        match(CypherParser::SP);
      }
      setState(1298);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1299);
    oC_With();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

CypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_CreateContext* CypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<CypherParser::OC_CreateContext>(0);
}

CypherParser::OC_MergeContext* CypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<CypherParser::OC_MergeContext>(0);
}

CypherParser::OC_SetContext* CypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

CypherParser::OC_DeleteContext* CypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<CypherParser::OC_DeleteContext>(0);
}


size_t CypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpdatingClause;
}


CypherParser::OC_UpdatingClauseContext* CypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
  enterRule(_localctx, 130, CypherParser::RuleOC_UpdatingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1305);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
        setState(1301);
        oC_Create();
        break;
      }

      case CypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
        setState(1302);
        oC_Merge();
        break;
      }

      case CypherParser::SET: {
        enterOuterAlt(_localctx, 3);
        setState(1303);
        oC_Set();
        break;
      }

      case CypherParser::DETACH:
      case CypherParser::DELETE: {
        enterOuterAlt(_localctx, 4);
        setState(1304);
        oC_Delete();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

CypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_MatchContext* CypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<CypherParser::OC_MatchContext>(0);
}

CypherParser::OC_UnwindContext* CypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<CypherParser::OC_UnwindContext>(0);
}

CypherParser::KU_InQueryCallContext* CypherParser::OC_ReadingClauseContext::kU_InQueryCall() {
  return getRuleContext<CypherParser::KU_InQueryCallContext>(0);
}

CypherParser::KU_LoadFromContext* CypherParser::OC_ReadingClauseContext::kU_LoadFrom() {
  return getRuleContext<CypherParser::KU_LoadFromContext>(0);
}


size_t CypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_ReadingClause;
}


CypherParser::OC_ReadingClauseContext* CypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 132, CypherParser::RuleOC_ReadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1311);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::OPTIONAL:
      case CypherParser::MATCH: {
        enterOuterAlt(_localctx, 1);
        setState(1307);
        oC_Match();
        break;
      }

      case CypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
        setState(1308);
        oC_Unwind();
        break;
      }

      case CypherParser::CALL:
      case CypherParser::PROJECT: {
        enterOuterAlt(_localctx, 3);
        setState(1309);
        kU_InQueryCall();
        break;
      }

      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 4);
        setState(1310);
        kU_LoadFrom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadFromContext ------------------------------------------------------------------

CypherParser::KU_LoadFromContext::KU_LoadFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_LoadFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::HEADERS() {
  return getToken(CypherParser::HEADERS, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_LoadFromContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_LoadFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_LoadFromContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_LoadFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadFrom;
}


CypherParser::KU_LoadFromContext* CypherParser::kU_LoadFrom() {
  KU_LoadFromContext *_localctx = _tracker.createInstance<KU_LoadFromContext>(_ctx, getState());
  enterRule(_localctx, 134, CypherParser::RuleKU_LoadFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1313);
    match(CypherParser::LOAD);
    setState(1331);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
    case 1: {
      setState(1314);
      match(CypherParser::SP);
      setState(1315);
      match(CypherParser::WITH);
      setState(1316);
      match(CypherParser::SP);
      setState(1317);
      match(CypherParser::HEADERS);
      setState(1319);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1318);
        match(CypherParser::SP);
      }
      setState(1321);
      match(CypherParser::T__1);
      setState(1323);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1322);
        match(CypherParser::SP);
      }
      setState(1325);
      kU_PropertyDefinitions();
      setState(1327);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1326);
        match(CypherParser::SP);
      }
      setState(1329);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    setState(1333);
    match(CypherParser::SP);
    setState(1334);
    match(CypherParser::FROM);
    setState(1335);
    match(CypherParser::SP);
    setState(1336);
    kU_ScanSource();
    setState(1341);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx)) {
    case 1: {
      setState(1338);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1337);
        match(CypherParser::SP);
      }
      setState(1340);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
    setState(1347);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      setState(1344);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1343);
        match(CypherParser::SP);
      }
      setState(1346);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InQueryCallContext ------------------------------------------------------------------

CypherParser::KU_InQueryCallContext::KU_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_InQueryCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::KU_InQueryCallContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::KU_ProjectGraphContext* CypherParser::KU_InQueryCallContext::kU_ProjectGraph() {
  return getRuleContext<CypherParser::KU_ProjectGraphContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_InQueryCallContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_InQueryCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_InQueryCall;
}


CypherParser::KU_InQueryCallContext* CypherParser::kU_InQueryCall() {
  KU_InQueryCallContext *_localctx = _tracker.createInstance<KU_InQueryCallContext>(_ctx, getState());
  enterRule(_localctx, 136, CypherParser::RuleKU_InQueryCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1353);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::PROJECT) {
      setState(1349);
      kU_ProjectGraph();
      setState(1351);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1350);
        match(CypherParser::SP);
      }
    }
    setState(1355);
    match(CypherParser::CALL);
    setState(1356);
    match(CypherParser::SP);
    setState(1357);
    oC_FunctionInvocation();
    setState(1362);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx)) {
    case 1: {
      setState(1359);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1358);
        match(CypherParser::SP);
      }
      setState(1361);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ProjectGraphContext ------------------------------------------------------------------

CypherParser::KU_ProjectGraphContext::KU_ProjectGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ProjectGraphContext::PROJECT() {
  return getToken(CypherParser::PROJECT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ProjectGraphContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ProjectGraphContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ProjectGraphContext::GRAPH() {
  return getToken(CypherParser::GRAPH, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ProjectGraphContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_GraphProjectionTableItemsContext* CypherParser::KU_ProjectGraphContext::kU_GraphProjectionTableItems() {
  return getRuleContext<CypherParser::KU_GraphProjectionTableItemsContext>(0);
}


size_t CypherParser::KU_ProjectGraphContext::getRuleIndex() const {
  return CypherParser::RuleKU_ProjectGraph;
}


CypherParser::KU_ProjectGraphContext* CypherParser::kU_ProjectGraph() {
  KU_ProjectGraphContext *_localctx = _tracker.createInstance<KU_ProjectGraphContext>(_ctx, getState());
  enterRule(_localctx, 138, CypherParser::RuleKU_ProjectGraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1364);
    match(CypherParser::PROJECT);
    setState(1365);
    match(CypherParser::SP);
    setState(1366);
    match(CypherParser::GRAPH);
    setState(1367);
    match(CypherParser::SP);
    setState(1368);
    oC_SchemaName();
    setState(1370);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1369);
      match(CypherParser::SP);
    }
    setState(1372);
    match(CypherParser::T__1);
    setState(1374);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1373);
      match(CypherParser::SP);
    }
    setState(1376);
    kU_GraphProjectionTableItems();
    setState(1378);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1377);
      match(CypherParser::SP);
    }
    setState(1380);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_GraphProjectionTableItemsContext ------------------------------------------------------------------

CypherParser::KU_GraphProjectionTableItemsContext::KU_GraphProjectionTableItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_GraphProjectionTableItemContext *> CypherParser::KU_GraphProjectionTableItemsContext::kU_GraphProjectionTableItem() {
  return getRuleContexts<CypherParser::KU_GraphProjectionTableItemContext>();
}

CypherParser::KU_GraphProjectionTableItemContext* CypherParser::KU_GraphProjectionTableItemsContext::kU_GraphProjectionTableItem(size_t i) {
  return getRuleContext<CypherParser::KU_GraphProjectionTableItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_GraphProjectionTableItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_GraphProjectionTableItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_GraphProjectionTableItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_GraphProjectionTableItems;
}


CypherParser::KU_GraphProjectionTableItemsContext* CypherParser::kU_GraphProjectionTableItems() {
  KU_GraphProjectionTableItemsContext *_localctx = _tracker.createInstance<KU_GraphProjectionTableItemsContext>(_ctx, getState());
  enterRule(_localctx, 140, CypherParser::RuleKU_GraphProjectionTableItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1382);
    kU_GraphProjectionTableItem();
    setState(1393);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1384);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1383);
          match(CypherParser::SP);
        }
        setState(1386);
        match(CypherParser::T__2);
        setState(1388);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1387);
          match(CypherParser::SP);
        }
        setState(1390);
        kU_GraphProjectionTableItem(); 
      }
      setState(1395);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_GraphProjectionTableItemContext ------------------------------------------------------------------

CypherParser::KU_GraphProjectionTableItemContext::KU_GraphProjectionTableItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_GraphProjectionTableItemContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_GraphProjectionColumnItemsContext* CypherParser::KU_GraphProjectionTableItemContext::kU_GraphProjectionColumnItems() {
  return getRuleContext<CypherParser::KU_GraphProjectionColumnItemsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_GraphProjectionTableItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_GraphProjectionTableItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_GraphProjectionTableItemContext::getRuleIndex() const {
  return CypherParser::RuleKU_GraphProjectionTableItem;
}


CypherParser::KU_GraphProjectionTableItemContext* CypherParser::kU_GraphProjectionTableItem() {
  KU_GraphProjectionTableItemContext *_localctx = _tracker.createInstance<KU_GraphProjectionTableItemContext>(_ctx, getState());
  enterRule(_localctx, 142, CypherParser::RuleKU_GraphProjectionTableItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1396);
    oC_SchemaName();
    setState(1410);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx)) {
    case 1: {
      setState(1398);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1397);
        match(CypherParser::SP);
      }
      setState(1400);
      match(CypherParser::T__8);
      setState(1402);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1401);
        match(CypherParser::SP);
      }
      setState(1404);
      kU_GraphProjectionColumnItems();
      setState(1406);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1405);
        match(CypherParser::SP);
      }
      setState(1408);
      match(CypherParser::T__9);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_GraphProjectionColumnItemsContext ------------------------------------------------------------------

CypherParser::KU_GraphProjectionColumnItemsContext::KU_GraphProjectionColumnItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_GraphProjectionColumnItemContext *> CypherParser::KU_GraphProjectionColumnItemsContext::kU_GraphProjectionColumnItem() {
  return getRuleContexts<CypherParser::KU_GraphProjectionColumnItemContext>();
}

CypherParser::KU_GraphProjectionColumnItemContext* CypherParser::KU_GraphProjectionColumnItemsContext::kU_GraphProjectionColumnItem(size_t i) {
  return getRuleContext<CypherParser::KU_GraphProjectionColumnItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_GraphProjectionColumnItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_GraphProjectionColumnItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_GraphProjectionColumnItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_GraphProjectionColumnItems;
}


CypherParser::KU_GraphProjectionColumnItemsContext* CypherParser::kU_GraphProjectionColumnItems() {
  KU_GraphProjectionColumnItemsContext *_localctx = _tracker.createInstance<KU_GraphProjectionColumnItemsContext>(_ctx, getState());
  enterRule(_localctx, 144, CypherParser::RuleKU_GraphProjectionColumnItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1412);
    kU_GraphProjectionColumnItem();
    setState(1423);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1414);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1413);
          match(CypherParser::SP);
        }
        setState(1416);
        match(CypherParser::T__2);
        setState(1418);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1417);
          match(CypherParser::SP);
        }
        setState(1420);
        kU_GraphProjectionColumnItem(); 
      }
      setState(1425);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_GraphProjectionColumnItemContext ------------------------------------------------------------------

CypherParser::KU_GraphProjectionColumnItemContext::KU_GraphProjectionColumnItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_GraphProjectionColumnItemContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_GraphProjectionColumnItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_GraphProjectionColumnItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::KU_DefaultContext* CypherParser::KU_GraphProjectionColumnItemContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_GraphProjectionColumnItemContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_GraphProjectionColumnItemContext::getRuleIndex() const {
  return CypherParser::RuleKU_GraphProjectionColumnItem;
}


CypherParser::KU_GraphProjectionColumnItemContext* CypherParser::kU_GraphProjectionColumnItem() {
  KU_GraphProjectionColumnItemContext *_localctx = _tracker.createInstance<KU_GraphProjectionColumnItemContext>(_ctx, getState());
  enterRule(_localctx, 146, CypherParser::RuleKU_GraphProjectionColumnItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1426);
    oC_PropertyKeyName();
    setState(1429);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
    case 1: {
      setState(1427);
      match(CypherParser::SP);
      setState(1428);
      kU_Default();
      break;
    }

    default:
      break;
    }
    setState(1433);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx)) {
    case 1: {
      setState(1431);
      match(CypherParser::SP);
      setState(1432);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

CypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MatchContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_MatchContext::OPTIONAL() {
  return getToken(CypherParser::OPTIONAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MatchContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_MatchContext::getRuleIndex() const {
  return CypherParser::RuleOC_Match;
}


CypherParser::OC_MatchContext* CypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
  enterRule(_localctx, 148, CypherParser::RuleOC_Match);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1437);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::OPTIONAL) {
      setState(1435);
      match(CypherParser::OPTIONAL);
      setState(1436);
      match(CypherParser::SP);
    }
    setState(1439);
    match(CypherParser::MATCH);
    setState(1441);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1440);
      match(CypherParser::SP);
    }
    setState(1443);
    oC_Pattern();
    setState(1446);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
    case 1: {
      setState(1444);
      match(CypherParser::SP);
      setState(1445);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

CypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnwindContext::UNWIND() {
  return getToken(CypherParser::UNWIND, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnwindContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_UnwindContext::getRuleIndex() const {
  return CypherParser::RuleOC_Unwind;
}


CypherParser::OC_UnwindContext* CypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
  enterRule(_localctx, 150, CypherParser::RuleOC_Unwind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1448);
    match(CypherParser::UNWIND);
    setState(1450);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1449);
      match(CypherParser::SP);
    }
    setState(1452);
    oC_Expression();
    setState(1453);
    match(CypherParser::SP);
    setState(1454);
    match(CypherParser::AS);
    setState(1455);
    match(CypherParser::SP);
    setState(1456);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

CypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CreateContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_CreateContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_CreateContext::getRuleIndex() const {
  return CypherParser::RuleOC_Create;
}


CypherParser::OC_CreateContext* CypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
  enterRule(_localctx, 152, CypherParser::RuleOC_Create);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1458);
    match(CypherParser::CREATE);
    setState(1460);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1459);
      match(CypherParser::SP);
    }
    setState(1462);
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

CypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MergeContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_MergeActionContext *> CypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<CypherParser::OC_MergeActionContext>();
}

CypherParser::OC_MergeActionContext* CypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<CypherParser::OC_MergeActionContext>(i);
}


size_t CypherParser::OC_MergeContext::getRuleIndex() const {
  return CypherParser::RuleOC_Merge;
}


CypherParser::OC_MergeContext* CypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
  enterRule(_localctx, 154, CypherParser::RuleOC_Merge);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1464);
    match(CypherParser::MERGE);
    setState(1466);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1465);
      match(CypherParser::SP);
    }
    setState(1468);
    oC_Pattern();
    setState(1473);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1469);
        match(CypherParser::SP);
        setState(1470);
        oC_MergeAction(); 
      }
      setState(1475);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

CypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::ON() {
  return getToken(CypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeActionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_SetContext* CypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}


size_t CypherParser::OC_MergeActionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MergeAction;
}


CypherParser::OC_MergeActionContext* CypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
  enterRule(_localctx, 156, CypherParser::RuleOC_MergeAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1486);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1476);
      match(CypherParser::ON);
      setState(1477);
      match(CypherParser::SP);
      setState(1478);
      match(CypherParser::MATCH);
      setState(1479);
      match(CypherParser::SP);
      setState(1480);
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1481);
      match(CypherParser::ON);
      setState(1482);
      match(CypherParser::SP);
      setState(1483);
      match(CypherParser::CREATE);
      setState(1484);
      match(CypherParser::SP);
      setState(1485);
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

CypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SetContext::SET() {
  return getToken(CypherParser::SET, 0);
}

std::vector<CypherParser::OC_SetItemContext *> CypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<CypherParser::OC_SetItemContext>();
}

CypherParser::OC_SetItemContext* CypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<CypherParser::OC_SetItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetContext::getRuleIndex() const {
  return CypherParser::RuleOC_Set;
}


CypherParser::OC_SetContext* CypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
  enterRule(_localctx, 158, CypherParser::RuleOC_Set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1488);
    match(CypherParser::SET);
    setState(1490);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1489);
      match(CypherParser::SP);
    }
    setState(1492);
    oC_SetItem();
    setState(1503);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1494);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1493);
          match(CypherParser::SP);
        }
        setState(1496);
        match(CypherParser::T__2);
        setState(1498);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1497);
          match(CypherParser::SP);
        }
        setState(1500);
        oC_SetItem(); 
      }
      setState(1505);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

CypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyExpressionContext* CypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<CypherParser::OC_PropertyExpressionContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SetItem;
}


CypherParser::OC_SetItemContext* CypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
  enterRule(_localctx, 160, CypherParser::RuleOC_SetItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1506);
    oC_PropertyExpression();
    setState(1508);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1507);
      match(CypherParser::SP);
    }
    setState(1510);
    match(CypherParser::T__5);
    setState(1512);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1511);
      match(CypherParser::SP);
    }
    setState(1514);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

CypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_DeleteContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_DeleteContext::getRuleIndex() const {
  return CypherParser::RuleOC_Delete;
}


CypherParser::OC_DeleteContext* CypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
  enterRule(_localctx, 162, CypherParser::RuleOC_Delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1518);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DETACH) {
      setState(1516);
      match(CypherParser::DETACH);
      setState(1517);
      match(CypherParser::SP);
    }
    setState(1520);
    match(CypherParser::DELETE);
    setState(1522);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1521);
      match(CypherParser::SP);
    }
    setState(1524);
    oC_Expression();
    setState(1535);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1526);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1525);
          match(CypherParser::SP);
        }
        setState(1528);
        match(CypherParser::T__2);
        setState(1530);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1529);
          match(CypherParser::SP);
        }
        setState(1532);
        oC_Expression(); 
      }
      setState(1537);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

CypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_WithContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_WithContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_WithContext::getRuleIndex() const {
  return CypherParser::RuleOC_With;
}


CypherParser::OC_WithContext* CypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
  enterRule(_localctx, 164, CypherParser::RuleOC_With);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1538);
    match(CypherParser::WITH);
    setState(1539);
    oC_ProjectionBody();
    setState(1544);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 219, _ctx)) {
    case 1: {
      setState(1541);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1540);
        match(CypherParser::SP);
      }
      setState(1543);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

CypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ReturnContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_ReturnContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}


size_t CypherParser::OC_ReturnContext::getRuleIndex() const {
  return CypherParser::RuleOC_Return;
}


CypherParser::OC_ReturnContext* CypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
  enterRule(_localctx, 166, CypherParser::RuleOC_Return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1546);
    match(CypherParser::RETURN);
    setState(1547);
    oC_ProjectionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionBodyContext ------------------------------------------------------------------

CypherParser::OC_ProjectionBodyContext::OC_ProjectionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionBodyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::OC_ProjectionBodyContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

CypherParser::OC_OrderContext* CypherParser::OC_ProjectionBodyContext::oC_Order() {
  return getRuleContext<CypherParser::OC_OrderContext>(0);
}

CypherParser::OC_SkipContext* CypherParser::OC_ProjectionBodyContext::oC_Skip() {
  return getRuleContext<CypherParser::OC_SkipContext>(0);
}

CypherParser::OC_LimitContext* CypherParser::OC_ProjectionBodyContext::oC_Limit() {
  return getRuleContext<CypherParser::OC_LimitContext>(0);
}


size_t CypherParser::OC_ProjectionBodyContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionBody;
}


CypherParser::OC_ProjectionBodyContext* CypherParser::oC_ProjectionBody() {
  OC_ProjectionBodyContext *_localctx = _tracker.createInstance<OC_ProjectionBodyContext>(_ctx, getState());
  enterRule(_localctx, 168, CypherParser::RuleOC_ProjectionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1553);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx)) {
    case 1: {
      setState(1550);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1549);
        match(CypherParser::SP);
      }
      setState(1552);
      match(CypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(1555);
    match(CypherParser::SP);
    setState(1556);
    oC_ProjectionItems();
    setState(1559);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx)) {
    case 1: {
      setState(1557);
      match(CypherParser::SP);
      setState(1558);
      oC_Order();
      break;
    }

    default:
      break;
    }
    setState(1563);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 223, _ctx)) {
    case 1: {
      setState(1561);
      match(CypherParser::SP);
      setState(1562);
      oC_Skip();
      break;
    }

    default:
      break;
    }
    setState(1567);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx)) {
    case 1: {
      setState(1565);
      match(CypherParser::SP);
      setState(1566);
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemsContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemsContext::OC_ProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<CypherParser::OC_ProjectionItemContext *> CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem() {
  return getRuleContexts<CypherParser::OC_ProjectionItemContext>();
}

CypherParser::OC_ProjectionItemContext* CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem(size_t i) {
  return getRuleContext<CypherParser::OC_ProjectionItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItems;
}


CypherParser::OC_ProjectionItemsContext* CypherParser::oC_ProjectionItems() {
  OC_ProjectionItemsContext *_localctx = _tracker.createInstance<OC_ProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 170, CypherParser::RuleOC_ProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1597);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1569);
        match(CypherParser::STAR);
        setState(1580);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1571);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1570);
              match(CypherParser::SP);
            }
            setState(1573);
            match(CypherParser::T__2);
            setState(1575);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1574);
              match(CypherParser::SP);
            }
            setState(1577);
            oC_ProjectionItem(); 
          }
          setState(1582);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx);
        }
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__6:
      case CypherParser::T__8:
      case CypherParser::T__25:
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::TYPE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::DEFAULT:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::PROJECT:
      case CypherParser::GRAPH:
      case CypherParser::AS:
      case CypherParser::NOT:
      case CypherParser::MINUS:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::NULL_:
      case CypherParser::TRUE:
      case CypherParser::FALSE:
      case CypherParser::CAST:
      case CypherParser::COUNT:
      case CypherParser::EXISTS:
      case CypherParser::CASE:
      case CypherParser::END:
      case CypherParser::StringLiteral:
      case CypherParser::DecimalInteger:
      case CypherParser::HexLetter:
      case CypherParser::RegularDecimalReal:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(1583);
        oC_ProjectionItem();
        setState(1594);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1585);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1584);
              match(CypherParser::SP);
            }
            setState(1587);
            match(CypherParser::T__2);
            setState(1589);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1588);
              match(CypherParser::SP);
            }
            setState(1591);
            oC_ProjectionItem(); 
          }
          setState(1596);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemContext::OC_ProjectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ProjectionItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_ProjectionItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_ProjectionItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItem;
}


CypherParser::OC_ProjectionItemContext* CypherParser::oC_ProjectionItem() {
  OC_ProjectionItemContext *_localctx = _tracker.createInstance<OC_ProjectionItemContext>(_ctx, getState());
  enterRule(_localctx, 172, CypherParser::RuleOC_ProjectionItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1606);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1599);
      oC_Expression();
      setState(1600);
      match(CypherParser::SP);
      setState(1601);
      match(CypherParser::AS);
      setState(1602);
      match(CypherParser::SP);
      setState(1603);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1605);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

CypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_OrderContext::ORDER() {
  return getToken(CypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrderContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_OrderContext::BY() {
  return getToken(CypherParser::BY, 0);
}

std::vector<CypherParser::OC_SortItemContext *> CypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<CypherParser::OC_SortItemContext>();
}

CypherParser::OC_SortItemContext* CypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<CypherParser::OC_SortItemContext>(i);
}


size_t CypherParser::OC_OrderContext::getRuleIndex() const {
  return CypherParser::RuleOC_Order;
}


CypherParser::OC_OrderContext* CypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
  enterRule(_localctx, 174, CypherParser::RuleOC_Order);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1608);
    match(CypherParser::ORDER);
    setState(1609);
    match(CypherParser::SP);
    setState(1610);
    match(CypherParser::BY);
    setState(1611);
    match(CypherParser::SP);
    setState(1612);
    oC_SortItem();
    setState(1620);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(1613);
      match(CypherParser::T__2);
      setState(1615);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1614);
        match(CypherParser::SP);
      }
      setState(1617);
      oC_SortItem();
      setState(1622);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

CypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SkipContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::OC_SkipContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_SkipContext::getRuleIndex() const {
  return CypherParser::RuleOC_Skip;
}


CypherParser::OC_SkipContext* CypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
  enterRule(_localctx, 176, CypherParser::RuleOC_Skip);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1623);
    match(CypherParser::L_SKIP);
    setState(1624);
    match(CypherParser::SP);
    setState(1625);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

CypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LimitContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::OC_LimitContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_LimitContext::getRuleIndex() const {
  return CypherParser::RuleOC_Limit;
}


CypherParser::OC_LimitContext* CypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
  enterRule(_localctx, 178, CypherParser::RuleOC_Limit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1627);
    match(CypherParser::LIMIT);
    setState(1628);
    match(CypherParser::SP);
    setState(1629);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

CypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(CypherParser::ASCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASC() {
  return getToken(CypherParser::ASC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(CypherParser::DESCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESC() {
  return getToken(CypherParser::DESC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_SortItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SortItem;
}


CypherParser::OC_SortItemContext* CypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
  enterRule(_localctx, 180, CypherParser::RuleOC_SortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1631);
    oC_Expression();
    setState(1636);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
    case 1: {
      setState(1633);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1632);
        match(CypherParser::SP);
      }
      setState(1635);
      _la = _input->LA(1);
      if (!(((((_la - 118) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 118)) & 15) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

CypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WhereContext::WHERE() {
  return getToken(CypherParser::WHERE, 0);
}

tree::TerminalNode* CypherParser::OC_WhereContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_WhereContext::getRuleIndex() const {
  return CypherParser::RuleOC_Where;
}


CypherParser::OC_WhereContext* CypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
  enterRule(_localctx, 182, CypherParser::RuleOC_Where);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1638);
    match(CypherParser::WHERE);
    setState(1639);
    match(CypherParser::SP);
    setState(1640);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

CypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PatternPartContext *> CypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<CypherParser::OC_PatternPartContext>();
}

CypherParser::OC_PatternPartContext* CypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<CypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_Pattern;
}


CypherParser::OC_PatternContext* CypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
  enterRule(_localctx, 184, CypherParser::RuleOC_Pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1642);
    oC_PatternPart();
    setState(1653);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 239, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1644);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1643);
          match(CypherParser::SP);
        }
        setState(1646);
        match(CypherParser::T__2);
        setState(1648);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1647);
          match(CypherParser::SP);
        }
        setState(1650);
        oC_PatternPart(); 
      }
      setState(1655);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 239, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

CypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_AnonymousPatternPartContext* CypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<CypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternPart;
}


CypherParser::OC_PatternPartContext* CypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
  enterRule(_localctx, 186, CypherParser::RuleOC_PatternPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1667);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::TYPE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::DEFAULT:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::PROJECT:
      case CypherParser::GRAPH:
      case CypherParser::AS:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1656);
        oC_Variable();
        setState(1658);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1657);
          match(CypherParser::SP);
        }
        setState(1660);
        match(CypherParser::T__5);
        setState(1662);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1661);
          match(CypherParser::SP);
        }
        setState(1664);
        oC_AnonymousPatternPart();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(1666);
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

CypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PatternElementContext* CypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnonymousPatternPart;
}


CypherParser::OC_AnonymousPatternPartContext* CypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
  enterRule(_localctx, 188, CypherParser::RuleOC_AnonymousPatternPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1669);
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

CypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternElementContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PatternElementContext* CypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_PatternElementContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElement;
}


CypherParser::OC_PatternElementContext* CypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 190, CypherParser::RuleOC_PatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1685);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 245, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1671);
      oC_NodePattern();
      setState(1678);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1673);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1672);
            match(CypherParser::SP);
          }
          setState(1675);
          oC_PatternElementChain(); 
        }
        setState(1680);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1681);
      match(CypherParser::T__1);
      setState(1682);
      oC_PatternElement();
      setState(1683);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

CypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodePatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_NodePatternContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_NodePatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodePattern;
}


CypherParser::OC_NodePatternContext* CypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 192, CypherParser::RuleOC_NodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1687);
    match(CypherParser::T__1);
    setState(1689);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1688);
      match(CypherParser::SP);
    }
    setState(1695);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & 3377739490889477) != 0) || ((((_la - 113) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 113)) & 316938794827777) != 0)) {
      setState(1691);
      oC_Variable();
      setState(1693);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1692);
        match(CypherParser::SP);
      }
    }
    setState(1701);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1697);
      oC_NodeLabels();
      setState(1699);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1698);
        match(CypherParser::SP);
      }
    }
    setState(1707);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1703);
      kU_Properties();
      setState(1705);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1704);
        match(CypherParser::SP);
      }
    }
    setState(1709);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

CypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RelationshipPatternContext* CypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<CypherParser::OC_RelationshipPatternContext>(0);
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_PatternElementChainContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElementChain;
}


CypherParser::OC_PatternElementChainContext* CypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
  enterRule(_localctx, 194, CypherParser::RuleOC_PatternElementChain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1711);
    oC_RelationshipPattern();
    setState(1713);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1712);
      match(CypherParser::SP);
    }
    setState(1715);
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

CypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LeftArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<CypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<CypherParser::OC_DashContext *> CypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<CypherParser::OC_DashContext>();
}

CypherParser::OC_DashContext* CypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<CypherParser::OC_DashContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_RelationshipDetailContext* CypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<CypherParser::OC_RelationshipDetailContext>(0);
}

CypherParser::OC_RightArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<CypherParser::OC_RightArrowHeadContext>(0);
}


size_t CypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipPattern;
}


CypherParser::OC_RelationshipPatternContext* CypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
  enterRule(_localctx, 196, CypherParser::RuleOC_RelationshipPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1761);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 265, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1717);
      oC_LeftArrowHead();
      setState(1719);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1718);
        match(CypherParser::SP);
      }
      setState(1721);
      oC_Dash();
      setState(1723);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx)) {
      case 1: {
        setState(1722);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1726);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1725);
        oC_RelationshipDetail();
      }
      setState(1729);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1728);
        match(CypherParser::SP);
      }
      setState(1731);
      oC_Dash();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1733);
      oC_Dash();
      setState(1735);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx)) {
      case 1: {
        setState(1734);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1738);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1737);
        oC_RelationshipDetail();
      }
      setState(1741);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1740);
        match(CypherParser::SP);
      }
      setState(1743);
      oC_Dash();
      setState(1745);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1744);
        match(CypherParser::SP);
      }
      setState(1747);
      oC_RightArrowHead();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1749);
      oC_Dash();
      setState(1751);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 262, _ctx)) {
      case 1: {
        setState(1750);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1754);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1753);
        oC_RelationshipDetail();
      }
      setState(1757);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1756);
        match(CypherParser::SP);
      }
      setState(1759);
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

CypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_RelationshipTypesContext* CypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<CypherParser::OC_RelationshipTypesContext>(0);
}

CypherParser::OC_RangeLiteralContext* CypherParser::OC_RelationshipDetailContext::oC_RangeLiteral() {
  return getRuleContext<CypherParser::OC_RangeLiteralContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_RelationshipDetailContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipDetail;
}


CypherParser::OC_RelationshipDetailContext* CypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
  enterRule(_localctx, 198, CypherParser::RuleOC_RelationshipDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1763);
    match(CypherParser::T__6);
    setState(1765);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1764);
      match(CypherParser::SP);
    }
    setState(1771);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & 3377739490889477) != 0) || ((((_la - 113) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 113)) & 316938794827777) != 0)) {
      setState(1767);
      oC_Variable();
      setState(1769);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1768);
        match(CypherParser::SP);
      }
    }
    setState(1777);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1773);
      oC_RelationshipTypes();
      setState(1775);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1774);
        match(CypherParser::SP);
      }
    }
    setState(1783);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::STAR) {
      setState(1779);
      oC_RangeLiteral();
      setState(1781);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1780);
        match(CypherParser::SP);
      }
    }
    setState(1789);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1785);
      kU_Properties();
      setState(1787);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1786);
        match(CypherParser::SP);
      }
    }
    setState(1791);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertiesContext ------------------------------------------------------------------

CypherParser::KU_PropertiesContext::KU_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_PropertiesContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertiesContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::KU_PropertiesContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::KU_PropertiesContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::KU_PropertiesContext::getRuleIndex() const {
  return CypherParser::RuleKU_Properties;
}


CypherParser::KU_PropertiesContext* CypherParser::kU_Properties() {
  KU_PropertiesContext *_localctx = _tracker.createInstance<KU_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 200, CypherParser::RuleKU_Properties);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1793);
    match(CypherParser::T__8);
    setState(1795);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1794);
      match(CypherParser::SP);
    }
    setState(1830);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & 3377739490889477) != 0) || ((((_la - 113) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 113)) & 316938794827777) != 0)) {
      setState(1797);
      oC_PropertyKeyName();
      setState(1799);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1798);
        match(CypherParser::SP);
      }
      setState(1801);
      match(CypherParser::COLON);
      setState(1803);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1802);
        match(CypherParser::SP);
      }
      setState(1805);
      oC_Expression();
      setState(1807);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1806);
        match(CypherParser::SP);
      }
      setState(1827);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(1809);
        match(CypherParser::T__2);
        setState(1811);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1810);
          match(CypherParser::SP);
        }
        setState(1813);
        oC_PropertyKeyName();
        setState(1815);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1814);
          match(CypherParser::SP);
        }
        setState(1817);
        match(CypherParser::COLON);
        setState(1819);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1818);
          match(CypherParser::SP);
        }
        setState(1821);
        oC_Expression();
        setState(1823);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1822);
          match(CypherParser::SP);
        }
        setState(1829);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1832);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

CypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_RelTypeNameContext *> CypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<CypherParser::OC_RelTypeNameContext>();
}

CypherParser::OC_RelTypeNameContext* CypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<CypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipTypes;
}


CypherParser::OC_RelationshipTypesContext* CypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
  enterRule(_localctx, 202, CypherParser::RuleOC_RelationshipTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1834);
    match(CypherParser::COLON);
    setState(1836);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1835);
      match(CypherParser::SP);
    }
    setState(1838);
    oC_RelTypeName();
    setState(1852);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 289, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1840);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1839);
          match(CypherParser::SP);
        }
        setState(1842);
        match(CypherParser::T__10);
        setState(1844);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::COLON) {
          setState(1843);
          match(CypherParser::COLON);
        }
        setState(1847);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1846);
          match(CypherParser::SP);
        }
        setState(1849);
        oC_RelTypeName(); 
      }
      setState(1854);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 289, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NodeLabelContext *> CypherParser::OC_NodeLabelsContext::oC_NodeLabel() {
  return getRuleContexts<CypherParser::OC_NodeLabelContext>();
}

CypherParser::OC_NodeLabelContext* CypherParser::OC_NodeLabelsContext::oC_NodeLabel(size_t i) {
  return getRuleContext<CypherParser::OC_NodeLabelContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabels;
}


CypherParser::OC_NodeLabelsContext* CypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
  enterRule(_localctx, 204, CypherParser::RuleOC_NodeLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1855);
    oC_NodeLabel();
    setState(1862);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1857);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1856);
          match(CypherParser::SP);
        }
        setState(1859);
        oC_NodeLabel(); 
      }
      setState(1864);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelContext::OC_NodeLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LabelNameContext* CypherParser::OC_NodeLabelContext::oC_LabelName() {
  return getRuleContext<CypherParser::OC_LabelNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_NodeLabelContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabel;
}


CypherParser::OC_NodeLabelContext* CypherParser::oC_NodeLabel() {
  OC_NodeLabelContext *_localctx = _tracker.createInstance<OC_NodeLabelContext>(_ctx, getState());
  enterRule(_localctx, 206, CypherParser::RuleOC_NodeLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1865);
    match(CypherParser::COLON);
    setState(1867);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1866);
      match(CypherParser::SP);
    }
    setState(1869);
    oC_LabelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

CypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SHORTEST() {
  return getToken(CypherParser::SHORTEST, 0);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::OC_RangeLiteralContext::kU_RecursiveRelationshipComprehension() {
  return getRuleContext<CypherParser::KU_RecursiveRelationshipComprehensionContext>(0);
}

CypherParser::OC_LowerBoundContext* CypherParser::OC_RangeLiteralContext::oC_LowerBound() {
  return getRuleContext<CypherParser::OC_LowerBoundContext>(0);
}

CypherParser::OC_UpperBoundContext* CypherParser::OC_RangeLiteralContext::oC_UpperBound() {
  return getRuleContext<CypherParser::OC_UpperBoundContext>(0);
}


size_t CypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_RangeLiteral;
}


CypherParser::OC_RangeLiteralContext* CypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 208, CypherParser::RuleOC_RangeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1871);
    match(CypherParser::STAR);
    setState(1873);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx)) {
    case 1: {
      setState(1872);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1879);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(1875);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::ALL: {
        setState(1876);
        match(CypherParser::ALL);
        setState(1877);
        match(CypherParser::SP);
        setState(1878);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__7:
      case CypherParser::T__8:
      case CypherParser::T__11:
      case CypherParser::DecimalInteger:
      case CypherParser::SP: {
        break;
      }

    default:
      break;
    }
    setState(1882);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx)) {
    case 1: {
      setState(1881);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1898);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 300, _ctx)) {
    case 1: {
      setState(1885);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(1884);
        oC_LowerBound();
      }
      setState(1888);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1887);
        match(CypherParser::SP);
      }
      setState(1890);
      match(CypherParser::T__11);
      setState(1892);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx)) {
      case 1: {
        setState(1891);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1895);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(1894);
        oC_UpperBound();
      }
      break;
    }

    case 2: {
      setState(1897);
      oC_IntegerLiteral();
      break;
    }

    default:
      break;
    }
    setState(1904);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx)) {
    case 1: {
      setState(1901);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1900);
        match(CypherParser::SP);
      }
      setState(1903);
      kU_RecursiveRelationshipComprehension();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RecursiveRelationshipComprehensionContext ------------------------------------------------------------------

CypherParser::KU_RecursiveRelationshipComprehensionContext::KU_RecursiveRelationshipComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_VariableContext *> CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable() {
  return getRuleContexts<CypherParser::OC_VariableContext>();
}

CypherParser::OC_VariableContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable(size_t i) {
  return getRuleContext<CypherParser::OC_VariableContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RecursiveRelationshipComprehensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RecursiveRelationshipComprehensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateRelProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateRelProjectionItemsContext>(0);
}

CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateNodeProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateNodeProjectionItemsContext>(0);
}


size_t CypherParser::KU_RecursiveRelationshipComprehensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RecursiveRelationshipComprehension;
}


CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::kU_RecursiveRelationshipComprehension() {
  KU_RecursiveRelationshipComprehensionContext *_localctx = _tracker.createInstance<KU_RecursiveRelationshipComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 210, CypherParser::RuleKU_RecursiveRelationshipComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1906);
    match(CypherParser::T__1);
    setState(1908);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1907);
      match(CypherParser::SP);
    }
    setState(1910);
    oC_Variable();
    setState(1912);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1911);
      match(CypherParser::SP);
    }
    setState(1914);
    match(CypherParser::T__2);
    setState(1916);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1915);
      match(CypherParser::SP);
    }
    setState(1918);
    oC_Variable();
    setState(1927);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 308, _ctx)) {
    case 1: {
      setState(1920);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1919);
        match(CypherParser::SP);
      }
      setState(1922);
      match(CypherParser::T__10);
      setState(1924);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1923);
        match(CypherParser::SP);
      }
      setState(1926);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(1948);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__10 || _la == CypherParser::SP) {
      setState(1930);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1929);
        match(CypherParser::SP);
      }
      setState(1932);
      match(CypherParser::T__10);
      setState(1934);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1933);
        match(CypherParser::SP);
      }
      setState(1936);
      kU_IntermediateRelProjectionItems();
      setState(1938);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1937);
        match(CypherParser::SP);
      }
      setState(1940);
      match(CypherParser::T__2);
      setState(1942);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1941);
        match(CypherParser::SP);
      }
      setState(1944);
      kU_IntermediateNodeProjectionItems();
      setState(1946);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1945);
        match(CypherParser::SP);
      }
    }
    setState(1950);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateNodeProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateNodeProjectionItemsContext::KU_IntermediateNodeProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateNodeProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateNodeProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateNodeProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateNodeProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateNodeProjectionItems;
}


CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::kU_IntermediateNodeProjectionItems() {
  KU_IntermediateNodeProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateNodeProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 212, CypherParser::RuleKU_IntermediateNodeProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1952);
    match(CypherParser::T__8);
    setState(1954);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx)) {
    case 1: {
      setState(1953);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1957);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8141100751335193980) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -9222527560384429441) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 5107187529) != 0)) {
      setState(1956);
      oC_ProjectionItems();
    }
    setState(1960);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1959);
      match(CypherParser::SP);
    }
    setState(1962);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateRelProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateRelProjectionItemsContext::KU_IntermediateRelProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateRelProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateRelProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateRelProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateRelProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateRelProjectionItems;
}


CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::kU_IntermediateRelProjectionItems() {
  KU_IntermediateRelProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateRelProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 214, CypherParser::RuleKU_IntermediateRelProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1964);
    match(CypherParser::T__8);
    setState(1966);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx)) {
    case 1: {
      setState(1965);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1969);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8141100751335193980) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -9222527560384429441) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 5107187529) != 0)) {
      setState(1968);
      oC_ProjectionItems();
    }
    setState(1972);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1971);
      match(CypherParser::SP);
    }
    setState(1974);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LowerBoundContext ------------------------------------------------------------------

CypherParser::OC_LowerBoundContext::OC_LowerBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LowerBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_LowerBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_LowerBound;
}


CypherParser::OC_LowerBoundContext* CypherParser::oC_LowerBound() {
  OC_LowerBoundContext *_localctx = _tracker.createInstance<OC_LowerBoundContext>(_ctx, getState());
  enterRule(_localctx, 216, CypherParser::RuleOC_LowerBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1976);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpperBoundContext ------------------------------------------------------------------

CypherParser::OC_UpperBoundContext::OC_UpperBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UpperBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_UpperBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpperBound;
}


CypherParser::OC_UpperBoundContext* CypherParser::oC_UpperBound() {
  OC_UpperBoundContext *_localctx = _tracker.createInstance<OC_UpperBoundContext>(_ctx, getState());
  enterRule(_localctx, 218, CypherParser::RuleOC_UpperBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1978);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

CypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_LabelNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_LabelName;
}


CypherParser::OC_LabelNameContext* CypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 220, CypherParser::RuleOC_LabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1980);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

CypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelTypeName;
}


CypherParser::OC_RelTypeNameContext* CypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 222, CypherParser::RuleOC_RelTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1982);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

CypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_OrExpressionContext* CypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<CypherParser::OC_OrExpressionContext>(0);
}


size_t CypherParser::OC_ExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Expression;
}


CypherParser::OC_ExpressionContext* CypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 224, CypherParser::RuleOC_Expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1984);
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

CypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_XorExpressionContext *> CypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<CypherParser::OC_XorExpressionContext>();
}

CypherParser::OC_XorExpressionContext* CypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::OR() {
  return getTokens(CypherParser::OR);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(CypherParser::OR, i);
}


size_t CypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_OrExpression;
}


CypherParser::OC_OrExpressionContext* CypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 226, CypherParser::RuleOC_OrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1986);
    oC_XorExpression();
    setState(1993);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1987);
        match(CypherParser::SP);
        setState(1988);
        match(CypherParser::OR);
        setState(1989);
        match(CypherParser::SP);
        setState(1990);
        oC_XorExpression(); 
      }
      setState(1995);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

CypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AndExpressionContext *> CypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<CypherParser::OC_AndExpressionContext>();
}

CypherParser::OC_AndExpressionContext* CypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(CypherParser::XOR);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(CypherParser::XOR, i);
}


size_t CypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_XorExpression;
}


CypherParser::OC_XorExpressionContext* CypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 228, CypherParser::RuleOC_XorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1996);
    oC_AndExpression();
    setState(2003);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 322, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1997);
        match(CypherParser::SP);
        setState(1998);
        match(CypherParser::XOR);
        setState(1999);
        match(CypherParser::SP);
        setState(2000);
        oC_AndExpression(); 
      }
      setState(2005);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 322, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

CypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NotExpressionContext *> CypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<CypherParser::OC_NotExpressionContext>();
}

CypherParser::OC_NotExpressionContext* CypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<CypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::AND() {
  return getTokens(CypherParser::AND);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(CypherParser::AND, i);
}


size_t CypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AndExpression;
}


CypherParser::OC_AndExpressionContext* CypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 230, CypherParser::RuleOC_AndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2006);
    oC_NotExpression();
    setState(2013);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2007);
        match(CypherParser::SP);
        setState(2008);
        match(CypherParser::AND);
        setState(2009);
        match(CypherParser::SP);
        setState(2010);
        oC_NotExpression(); 
      }
      setState(2015);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

CypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ComparisonExpressionContext* CypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<CypherParser::OC_ComparisonExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::NOT() {
  return getTokens(CypherParser::NOT);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::NOT(size_t i) {
  return getToken(CypherParser::NOT, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NotExpression;
}


CypherParser::OC_NotExpressionContext* CypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
  enterRule(_localctx, 232, CypherParser::RuleOC_NotExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2022);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::NOT) {
      setState(2016);
      match(CypherParser::NOT);
      setState(2018);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2017);
        match(CypherParser::SP);
      }
      setState(2024);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2025);
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

CypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseOrOperatorExpressionContext *> CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseOrOperatorExpressionContext>();
}

CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseOrOperatorExpressionContext>(i);
}

std::vector<CypherParser::KU_ComparisonOperatorContext *> CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator() {
  return getRuleContexts<CypherParser::KU_ComparisonOperatorContext>();
}

CypherParser::KU_ComparisonOperatorContext* CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator(size_t i) {
  return getRuleContext<CypherParser::KU_ComparisonOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::INVALID_NOT_EQUAL() {
  return getToken(CypherParser::INVALID_NOT_EQUAL, 0);
}


size_t CypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ComparisonExpression;
}


CypherParser::OC_ComparisonExpressionContext* CypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 234, CypherParser::RuleOC_ComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2075);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2027);
      kU_BitwiseOrOperatorExpression();
      setState(2037);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx)) {
      case 1: {
        setState(2029);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2028);
          match(CypherParser::SP);
        }
        setState(2031);
        kU_ComparisonOperator();
        setState(2033);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2032);
          match(CypherParser::SP);
        }
        setState(2035);
        kU_BitwiseOrOperatorExpression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2039);
      kU_BitwiseOrOperatorExpression();

      setState(2041);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2040);
        match(CypherParser::SP);
      }
      setState(2043);
      antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken = match(CypherParser::INVALID_NOT_EQUAL);
      setState(2045);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2044);
        match(CypherParser::SP);
      }
      setState(2047);
      kU_BitwiseOrOperatorExpression();
       notifyInvalidNotEqualOperator(antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken); 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2051);
      kU_BitwiseOrOperatorExpression();
      setState(2053);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2052);
        match(CypherParser::SP);
      }
      setState(2055);
      kU_ComparisonOperator();
      setState(2057);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2056);
        match(CypherParser::SP);
      }
      setState(2059);
      kU_BitwiseOrOperatorExpression();
      setState(2069); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2061);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2060);
                  match(CypherParser::SP);
                }
                setState(2063);
                kU_ComparisonOperator();
                setState(2065);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2064);
                  match(CypherParser::SP);
                }
                setState(2067);
                kU_BitwiseOrOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2071); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
       notifyNonBinaryComparison(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ComparisonOperatorContext ------------------------------------------------------------------

CypherParser::KU_ComparisonOperatorContext::KU_ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_ComparisonOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_ComparisonOperator;
}


CypherParser::KU_ComparisonOperatorContext* CypherParser::kU_ComparisonOperator() {
  KU_ComparisonOperatorContext *_localctx = _tracker.createInstance<KU_ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 236, CypherParser::RuleKU_ComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2077);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 254016) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseOrOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseOrOperatorExpressionContext::KU_BitwiseOrOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseAndOperatorExpressionContext *> CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseAndOperatorExpressionContext>();
}

CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseAndOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseOrOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseOrOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseOrOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseOrOperatorExpression;
}


CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::kU_BitwiseOrOperatorExpression() {
  KU_BitwiseOrOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseOrOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 238, CypherParser::RuleKU_BitwiseOrOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2079);
    kU_BitwiseAndOperatorExpression();
    setState(2090);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2081);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2080);
          match(CypherParser::SP);
        }
        setState(2083);
        match(CypherParser::T__10);
        setState(2085);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2084);
          match(CypherParser::SP);
        }
        setState(2087);
        kU_BitwiseAndOperatorExpression(); 
      }
      setState(2092);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseAndOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseAndOperatorExpressionContext::KU_BitwiseAndOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitShiftOperatorExpressionContext *> CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorExpressionContext>();
}

CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseAndOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseAndOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseAndOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseAndOperatorExpression;
}


CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::kU_BitwiseAndOperatorExpression() {
  KU_BitwiseAndOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseAndOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 240, CypherParser::RuleKU_BitwiseAndOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2093);
    kU_BitShiftOperatorExpression();
    setState(2104);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2095);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2094);
          match(CypherParser::SP);
        }
        setState(2097);
        match(CypherParser::T__17);
        setState(2099);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2098);
          match(CypherParser::SP);
        }
        setState(2101);
        kU_BitShiftOperatorExpression(); 
      }
      setState(2106);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorExpressionContext::KU_BitShiftOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AddOrSubtractExpressionContext *> CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContexts<CypherParser::OC_AddOrSubtractExpressionContext>();
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AddOrSubtractExpressionContext>(i);
}

std::vector<CypherParser::KU_BitShiftOperatorContext *> CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorContext>();
}

CypherParser::KU_BitShiftOperatorContext* CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitShiftOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitShiftOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitShiftOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperatorExpression;
}


CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::kU_BitShiftOperatorExpression() {
  KU_BitShiftOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 242, CypherParser::RuleKU_BitShiftOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2107);
    oC_AddOrSubtractExpression();
    setState(2119);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 345, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2109);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2108);
          match(CypherParser::SP);
        }
        setState(2111);
        kU_BitShiftOperator();
        setState(2113);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2112);
          match(CypherParser::SP);
        }
        setState(2115);
        oC_AddOrSubtractExpression(); 
      }
      setState(2121);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 345, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorContext::KU_BitShiftOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_BitShiftOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperator;
}


CypherParser::KU_BitShiftOperatorContext* CypherParser::kU_BitShiftOperator() {
  KU_BitShiftOperatorContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorContext>(_ctx, getState());
  enterRule(_localctx, 244, CypherParser::RuleKU_BitShiftOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2122);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__18

    || _la == CypherParser::T__19)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

CypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_MultiplyDivideModuloExpressionContext *> CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<CypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<CypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<CypherParser::KU_AddOrSubtractOperatorContext *> CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator() {
  return getRuleContexts<CypherParser::KU_AddOrSubtractOperatorContext>();
}

CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator(size_t i) {
  return getRuleContext<CypherParser::KU_AddOrSubtractOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AddOrSubtractExpression;
}


CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 246, CypherParser::RuleOC_AddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2124);
    oC_MultiplyDivideModuloExpression();
    setState(2136);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2126);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2125);
          match(CypherParser::SP);
        }
        setState(2128);
        kU_AddOrSubtractOperator();
        setState(2130);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2129);
          match(CypherParser::SP);
        }
        setState(2132);
        oC_MultiplyDivideModuloExpression(); 
      }
      setState(2138);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddOrSubtractOperatorContext ------------------------------------------------------------------

CypherParser::KU_AddOrSubtractOperatorContext::KU_AddOrSubtractOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddOrSubtractOperatorContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_AddOrSubtractOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddOrSubtractOperator;
}


CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::kU_AddOrSubtractOperator() {
  KU_AddOrSubtractOperatorContext *_localctx = _tracker.createInstance<KU_AddOrSubtractOperatorContext>(_ctx, getState());
  enterRule(_localctx, 248, CypherParser::RuleKU_AddOrSubtractOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2139);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__20 || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

CypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PowerOfExpressionContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<CypherParser::OC_PowerOfExpressionContext>();
}

CypherParser::OC_PowerOfExpressionContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<CypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<CypherParser::KU_MultiplyDivideModuloOperatorContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator() {
  return getRuleContexts<CypherParser::KU_MultiplyDivideModuloOperatorContext>();
}

CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator(size_t i) {
  return getRuleContext<CypherParser::KU_MultiplyDivideModuloOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiplyDivideModuloExpression;
}


CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
  enterRule(_localctx, 250, CypherParser::RuleOC_MultiplyDivideModuloExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2141);
    oC_PowerOfExpression();
    setState(2153);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 351, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2143);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2142);
          match(CypherParser::SP);
        }
        setState(2145);
        kU_MultiplyDivideModuloOperator();
        setState(2147);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2146);
          match(CypherParser::SP);
        }
        setState(2149);
        oC_PowerOfExpression(); 
      }
      setState(2155);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 351, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MultiplyDivideModuloOperatorContext ------------------------------------------------------------------

CypherParser::KU_MultiplyDivideModuloOperatorContext::KU_MultiplyDivideModuloOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MultiplyDivideModuloOperatorContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}


size_t CypherParser::KU_MultiplyDivideModuloOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_MultiplyDivideModuloOperator;
}


CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::kU_MultiplyDivideModuloOperator() {
  KU_MultiplyDivideModuloOperatorContext *_localctx = _tracker.createInstance<KU_MultiplyDivideModuloOperatorContext>(_ctx, getState());
  enterRule(_localctx, 252, CypherParser::RuleKU_MultiplyDivideModuloOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2156);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__21

    || _la == CypherParser::T__22 || _la == CypherParser::STAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

CypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext *> CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression() {
  return getRuleContexts<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>();
}

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression(size_t i) {
  return getRuleContext<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PowerOfExpression;
}


CypherParser::OC_PowerOfExpressionContext* CypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
  enterRule(_localctx, 254, CypherParser::RuleOC_PowerOfExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2158);
    oC_UnaryAddSubtractOrFactorialExpression();
    setState(2169);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 354, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2160);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2159);
          match(CypherParser::SP);
        }
        setState(2162);
        match(CypherParser::T__23);
        setState(2164);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2163);
          match(CypherParser::SP);
        }
        setState(2166);
        oC_UnaryAddSubtractOrFactorialExpression(); 
      }
      setState(2171);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 354, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddSubtractOrFactorialExpressionContext ------------------------------------------------------------------

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::OC_UnaryAddSubtractOrFactorialExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::oC_StringListNullOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringListNullOperatorExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS() {
  return getTokens(CypherParser::MINUS);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS(size_t i) {
  return getToken(CypherParser::MINUS, i);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::FACTORIAL() {
  return getToken(CypherParser::FACTORIAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression;
}


CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::oC_UnaryAddSubtractOrFactorialExpression() {
  OC_UnaryAddSubtractOrFactorialExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddSubtractOrFactorialExpressionContext>(_ctx, getState());
  enterRule(_localctx, 256, CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2178);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::MINUS) {
      setState(2172);
      match(CypherParser::MINUS);
      setState(2174);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2173);
        match(CypherParser::SP);
      }
      setState(2180);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2181);
    oC_StringListNullOperatorExpression();
    setState(2186);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 358, _ctx)) {
    case 1: {
      setState(2183);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2182);
        match(CypherParser::SP);
      }
      setState(2185);
      match(CypherParser::FACTORIAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringListNullOperatorExpressionContext::OC_StringListNullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_StringOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringOperatorExpressionContext>(0);
}

CypherParser::OC_NullOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression() {
  return getRuleContext<CypherParser::OC_NullOperatorExpressionContext>(0);
}

std::vector<CypherParser::OC_ListOperatorExpressionContext *> CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<CypherParser::OC_ListOperatorExpressionContext>();
}

CypherParser::OC_ListOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_ListOperatorExpressionContext>(i);
}


size_t CypherParser::OC_StringListNullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringListNullOperatorExpression;
}


CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::oC_StringListNullOperatorExpression() {
  OC_StringListNullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 258, CypherParser::RuleOC_StringListNullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2188);
    oC_PropertyOrLabelsExpression();
    setState(2196);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 360, _ctx)) {
    case 1: {
      setState(2189);
      oC_StringOperatorExpression();
      break;
    }

    case 2: {
      setState(2191); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2190);
                oC_ListOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2193); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 3: {
      setState(2195);
      oC_NullOperatorExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::IN() {
  return getToken(CypherParser::IN, 0);
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_ListOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}


size_t CypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListOperatorExpression;
}


CypherParser::OC_ListOperatorExpressionContext* CypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 260, CypherParser::RuleOC_ListOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2217);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 364, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2198);
      match(CypherParser::SP);
      setState(2199);
      match(CypherParser::IN);
      setState(2201);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2200);
        match(CypherParser::SP);
      }
      setState(2203);
      oC_PropertyOrLabelsExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2204);
      match(CypherParser::T__6);
      setState(2205);
      oC_Expression();
      setState(2206);
      match(CypherParser::T__7);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2208);
      match(CypherParser::T__6);
      setState(2210);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -8141100751335193980) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -9222809035361140097) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 5107187529) != 0)) {
        setState(2209);
        oC_Expression();
      }
      setState(2212);
      match(CypherParser::COLON);
      setState(2214);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -8141100751335193980) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -9222809035361140097) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 5107187529) != 0)) {
        setState(2213);
        oC_Expression();
      }
      setState(2216);
      match(CypherParser::T__7);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringOperatorExpressionContext::OC_StringOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_RegularExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_RegularExpression() {
  return getRuleContext<CypherParser::OC_RegularExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_StringOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::STARTS() {
  return getToken(CypherParser::STARTS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::ENDS() {
  return getToken(CypherParser::ENDS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}


size_t CypherParser::OC_StringOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringOperatorExpression;
}


CypherParser::OC_StringOperatorExpressionContext* CypherParser::oC_StringOperatorExpression() {
  OC_StringOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 262, CypherParser::RuleOC_StringOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2230);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 365, _ctx)) {
    case 1: {
      setState(2219);
      oC_RegularExpression();
      break;
    }

    case 2: {
      setState(2220);
      match(CypherParser::SP);
      setState(2221);
      match(CypherParser::STARTS);
      setState(2222);
      match(CypherParser::SP);
      setState(2223);
      match(CypherParser::WITH);
      break;
    }

    case 3: {
      setState(2224);
      match(CypherParser::SP);
      setState(2225);
      match(CypherParser::ENDS);
      setState(2226);
      match(CypherParser::SP);
      setState(2227);
      match(CypherParser::WITH);
      break;
    }

    case 4: {
      setState(2228);
      match(CypherParser::SP);
      setState(2229);
      match(CypherParser::CONTAINS);
      break;
    }

    default:
      break;
    }
    setState(2233);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2232);
      match(CypherParser::SP);
    }
    setState(2235);
    oC_PropertyOrLabelsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularExpressionContext ------------------------------------------------------------------

CypherParser::OC_RegularExpressionContext::OC_RegularExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RegularExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_RegularExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularExpression;
}


CypherParser::OC_RegularExpressionContext* CypherParser::oC_RegularExpression() {
  OC_RegularExpressionContext *_localctx = _tracker.createInstance<OC_RegularExpressionContext>(_ctx, getState());
  enterRule(_localctx, 264, CypherParser::RuleOC_RegularExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2238);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2237);
      match(CypherParser::SP);
    }
    setState(2240);
    match(CypherParser::T__24);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_NullOperatorExpressionContext::OC_NullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NullOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}


size_t CypherParser::OC_NullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NullOperatorExpression;
}


CypherParser::OC_NullOperatorExpressionContext* CypherParser::oC_NullOperatorExpression() {
  OC_NullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 266, CypherParser::RuleOC_NullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2252);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2242);
      match(CypherParser::SP);
      setState(2243);
      match(CypherParser::IS);
      setState(2244);
      match(CypherParser::SP);
      setState(2245);
      match(CypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2246);
      match(CypherParser::SP);
      setState(2247);
      match(CypherParser::IS);
      setState(2248);
      match(CypherParser::SP);
      setState(2249);
      match(CypherParser::NOT);
      setState(2250);
      match(CypherParser::SP);
      setState(2251);
      match(CypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyOrLabelsExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyOrLabelsExpressionContext::OC_PropertyOrLabelsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

std::vector<CypherParser::OC_PropertyLookupContext *> CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<CypherParser::OC_PropertyLookupContext>();
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PropertyOrLabelsExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PropertyOrLabelsExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PropertyOrLabelsExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyOrLabelsExpression;
}


CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::oC_PropertyOrLabelsExpression() {
  OC_PropertyOrLabelsExpressionContext *_localctx = _tracker.createInstance<OC_PropertyOrLabelsExpressionContext>(_ctx, getState());
  enterRule(_localctx, 268, CypherParser::RuleOC_PropertyOrLabelsExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2254);
    oC_Atom();
    setState(2261);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2256);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2255);
          match(CypherParser::SP);
        }
        setState(2258);
        oC_PropertyLookup(); 
      }
      setState(2263);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

CypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LiteralContext* CypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

CypherParser::OC_ParameterContext* CypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<CypherParser::OC_ParameterContext>(0);
}

CypherParser::OC_CaseExpressionContext* CypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<CypherParser::OC_CaseExpressionContext>(0);
}

CypherParser::OC_ParenthesizedExpressionContext* CypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<CypherParser::OC_ParenthesizedExpressionContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_PathPatternsContext* CypherParser::OC_AtomContext::oC_PathPatterns() {
  return getRuleContext<CypherParser::OC_PathPatternsContext>(0);
}

CypherParser::OC_ExistSubqueryContext* CypherParser::OC_AtomContext::oC_ExistSubquery() {
  return getRuleContext<CypherParser::OC_ExistSubqueryContext>(0);
}

CypherParser::KU_CountSubqueryContext* CypherParser::OC_AtomContext::kU_CountSubquery() {
  return getRuleContext<CypherParser::KU_CountSubqueryContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_AtomContext::getRuleIndex() const {
  return CypherParser::RuleOC_Atom;
}


CypherParser::OC_AtomContext* CypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
  enterRule(_localctx, 270, CypherParser::RuleOC_Atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2273);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 371, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2264);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2265);
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2266);
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2267);
      oC_ParenthesizedExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2268);
      oC_FunctionInvocation();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2269);
      oC_PathPatterns();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2270);
      oC_ExistSubquery();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2271);
      kU_CountSubquery();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2272);
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

CypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NumberLiteralContext* CypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<CypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_BooleanLiteralContext* CypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<CypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

CypherParser::OC_ListLiteralContext* CypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<CypherParser::OC_ListLiteralContext>(0);
}

CypherParser::KU_StructLiteralContext* CypherParser::OC_LiteralContext::kU_StructLiteral() {
  return getRuleContext<CypherParser::KU_StructLiteralContext>(0);
}


size_t CypherParser::OC_LiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_Literal;
}


CypherParser::OC_LiteralContext* CypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
  enterRule(_localctx, 272, CypherParser::RuleOC_Literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2281);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::DecimalInteger:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2275);
        oC_NumberLiteral();
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(2276);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::TRUE:
      case CypherParser::FALSE: {
        enterOuterAlt(_localctx, 3);
        setState(2277);
        oC_BooleanLiteral();
        break;
      }

      case CypherParser::NULL_: {
        enterOuterAlt(_localctx, 4);
        setState(2278);
        match(CypherParser::NULL_);
        break;
      }

      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 5);
        setState(2279);
        oC_ListLiteral();
        break;
      }

      case CypherParser::T__8: {
        enterOuterAlt(_localctx, 6);
        setState(2280);
        kU_StructLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

CypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::TRUE() {
  return getToken(CypherParser::TRUE, 0);
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::FALSE() {
  return getToken(CypherParser::FALSE, 0);
}


size_t CypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_BooleanLiteral;
}


CypherParser::OC_BooleanLiteralContext* CypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 274, CypherParser::RuleOC_BooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2283);
    _la = _input->LA(1);
    if (!(_la == CypherParser::TRUE

    || _la == CypherParser::FALSE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

CypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<CypherParser::KU_ListEntryContext *> CypherParser::OC_ListLiteralContext::kU_ListEntry() {
  return getRuleContexts<CypherParser::KU_ListEntryContext>();
}

CypherParser::KU_ListEntryContext* CypherParser::OC_ListLiteralContext::kU_ListEntry(size_t i) {
  return getRuleContext<CypherParser::KU_ListEntryContext>(i);
}


size_t CypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListLiteral;
}


CypherParser::OC_ListLiteralContext* CypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 276, CypherParser::RuleOC_ListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2285);
    match(CypherParser::T__6);
    setState(2287);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2286);
      match(CypherParser::SP);
    }
    setState(2302);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8141100751335193980) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -9222809035361140097) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 5107187529) != 0)) {
      setState(2289);
      oC_Expression();
      setState(2291);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2290);
        match(CypherParser::SP);
      }
      setState(2299);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(2293);
        kU_ListEntry();
        setState(2295);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2294);
          match(CypherParser::SP);
        }
        setState(2301);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2304);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListEntryContext ------------------------------------------------------------------

CypherParser::KU_ListEntryContext::KU_ListEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ListEntryContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListEntryContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_ListEntryContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListEntry;
}


CypherParser::KU_ListEntryContext* CypherParser::kU_ListEntry() {
  KU_ListEntryContext *_localctx = _tracker.createInstance<KU_ListEntryContext>(_ctx, getState());
  enterRule(_localctx, 278, CypherParser::RuleKU_ListEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2306);
    match(CypherParser::T__2);
    setState(2308);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 378, _ctx)) {
    case 1: {
      setState(2307);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2311);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8141100751335193980) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -9222809035361140097) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 5107187529) != 0)) {
      setState(2310);
      oC_Expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructLiteralContext ------------------------------------------------------------------

CypherParser::KU_StructLiteralContext::KU_StructLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_StructFieldContext *> CypherParser::KU_StructLiteralContext::kU_StructField() {
  return getRuleContexts<CypherParser::KU_StructFieldContext>();
}

CypherParser::KU_StructFieldContext* CypherParser::KU_StructLiteralContext::kU_StructField(size_t i) {
  return getRuleContext<CypherParser::KU_StructFieldContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructLiteralContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructLiteral;
}


CypherParser::KU_StructLiteralContext* CypherParser::kU_StructLiteral() {
  KU_StructLiteralContext *_localctx = _tracker.createInstance<KU_StructLiteralContext>(_ctx, getState());
  enterRule(_localctx, 280, CypherParser::RuleKU_StructLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2313);
    match(CypherParser::T__8);
    setState(2315);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2314);
      match(CypherParser::SP);
    }
    setState(2317);
    kU_StructField();
    setState(2319);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2318);
      match(CypherParser::SP);
    }
    setState(2331);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(2321);
      match(CypherParser::T__2);
      setState(2323);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2322);
        match(CypherParser::SP);
      }
      setState(2325);
      kU_StructField();
      setState(2327);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2326);
        match(CypherParser::SP);
      }
      setState(2333);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2334);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructFieldContext ------------------------------------------------------------------

CypherParser::KU_StructFieldContext::KU_StructFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StructFieldContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StructFieldContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructFieldContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructFieldContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructField;
}


CypherParser::KU_StructFieldContext* CypherParser::kU_StructField() {
  KU_StructFieldContext *_localctx = _tracker.createInstance<KU_StructFieldContext>(_ctx, getState());
  enterRule(_localctx, 282, CypherParser::RuleKU_StructField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2338);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::TYPE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::DEFAULT:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::PROJECT:
      case CypherParser::GRAPH:
      case CypherParser::AS:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2336);
        oC_SymbolicName();
        break;
      }

      case CypherParser::StringLiteral: {
        setState(2337);
        match(CypherParser::StringLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2341);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2340);
      match(CypherParser::SP);
    }
    setState(2343);
    match(CypherParser::COLON);
    setState(2345);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2344);
      match(CypherParser::SP);
    }
    setState(2347);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

CypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ParenthesizedExpression;
}


CypherParser::OC_ParenthesizedExpressionContext* CypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 284, CypherParser::RuleOC_ParenthesizedExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2349);
    match(CypherParser::T__1);
    setState(2351);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2350);
      match(CypherParser::SP);
    }
    setState(2353);
    oC_Expression();
    setState(2355);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2354);
      match(CypherParser::SP);
    }
    setState(2357);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

CypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::CAST() {
  return getToken(CypherParser::CAST, 0);
}

std::vector<CypherParser::KU_FunctionParameterContext *> CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter() {
  return getRuleContexts<CypherParser::KU_FunctionParameterContext>();
}

CypherParser::KU_FunctionParameterContext* CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter(size_t i) {
  return getRuleContext<CypherParser::KU_FunctionParameterContext>(i);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::OC_FunctionInvocationContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

CypherParser::OC_FunctionNameContext* CypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}


size_t CypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionInvocation;
}


CypherParser::OC_FunctionInvocationContext* CypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
  enterRule(_localctx, 286, CypherParser::RuleOC_FunctionInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2436);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 409, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2359);
      match(CypherParser::COUNT);
      setState(2361);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2360);
        match(CypherParser::SP);
      }
      setState(2363);
      match(CypherParser::T__1);
      setState(2365);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2364);
        match(CypherParser::SP);
      }
      setState(2367);
      match(CypherParser::STAR);
      setState(2369);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2368);
        match(CypherParser::SP);
      }
      setState(2371);
      match(CypherParser::T__3);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2372);
      match(CypherParser::CAST);
      setState(2374);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2373);
        match(CypherParser::SP);
      }
      setState(2376);
      match(CypherParser::T__1);
      setState(2378);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2377);
        match(CypherParser::SP);
      }
      setState(2380);
      kU_FunctionParameter();
      setState(2382);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2381);
        match(CypherParser::SP);
      }
      setState(2394);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CypherParser::AS: {
          setState(2384);
          match(CypherParser::AS);
          setState(2386);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2385);
            match(CypherParser::SP);
          }
          setState(2388);
          kU_DataType(0);
          break;
        }

        case CypherParser::T__2: {
          setState(2389);
          match(CypherParser::T__2);
          setState(2391);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2390);
            match(CypherParser::SP);
          }
          setState(2393);
          kU_FunctionParameter();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2397);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2396);
        match(CypherParser::SP);
      }
      setState(2399);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2401);
      oC_FunctionName();
      setState(2403);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2402);
        match(CypherParser::SP);
      }
      setState(2405);
      match(CypherParser::T__1);
      setState(2407);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2406);
        match(CypherParser::SP);
      }
      setState(2413);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DISTINCT) {
        setState(2409);
        match(CypherParser::DISTINCT);
        setState(2411);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2410);
          match(CypherParser::SP);
        }
      }
      setState(2432);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -8141100751335193980) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -9222809035361140097) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 5107187529) != 0)) {
        setState(2415);
        kU_FunctionParameter();
        setState(2417);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2416);
          match(CypherParser::SP);
        }
        setState(2429);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2) {
          setState(2419);
          match(CypherParser::T__2);
          setState(2421);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2420);
            match(CypherParser::SP);
          }
          setState(2423);
          kU_FunctionParameter();
          setState(2425);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2424);
            match(CypherParser::SP);
          }
          setState(2431);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(2434);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

CypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionName;
}


CypherParser::OC_FunctionNameContext* CypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 288, CypherParser::RuleOC_FunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2438);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FunctionParameterContext ------------------------------------------------------------------

CypherParser::KU_FunctionParameterContext::KU_FunctionParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_FunctionParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_FunctionParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FunctionParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_FunctionParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_FunctionParameter;
}


CypherParser::KU_FunctionParameterContext* CypherParser::kU_FunctionParameter() {
  KU_FunctionParameterContext *_localctx = _tracker.createInstance<KU_FunctionParameterContext>(_ctx, getState());
  enterRule(_localctx, 290, CypherParser::RuleKU_FunctionParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2449);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 412, _ctx)) {
    case 1: {
      setState(2440);
      oC_SymbolicName();
      setState(2442);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2441);
        match(CypherParser::SP);
      }
      setState(2444);
      match(CypherParser::COLON);
      setState(2445);
      match(CypherParser::T__5);
      setState(2447);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2446);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(2451);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PathPatternsContext ------------------------------------------------------------------

CypherParser::OC_PathPatternsContext::OC_PathPatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PathPatternsContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PathPatternsContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PathPatternsContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PathPatternsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PathPatternsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PathPatternsContext::getRuleIndex() const {
  return CypherParser::RuleOC_PathPatterns;
}


CypherParser::OC_PathPatternsContext* CypherParser::oC_PathPatterns() {
  OC_PathPatternsContext *_localctx = _tracker.createInstance<OC_PathPatternsContext>(_ctx, getState());
  enterRule(_localctx, 292, CypherParser::RuleOC_PathPatterns);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2453);
    oC_NodePattern();
    setState(2458); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2455);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(2454);
                match(CypherParser::SP);
              }
              setState(2457);
              oC_PatternElementChain();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2460); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 414, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExistSubqueryContext ------------------------------------------------------------------

CypherParser::OC_ExistSubqueryContext::OC_ExistSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_ExistSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExistSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_ExistSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_ExistSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_ExistSubquery;
}


CypherParser::OC_ExistSubqueryContext* CypherParser::oC_ExistSubquery() {
  OC_ExistSubqueryContext *_localctx = _tracker.createInstance<OC_ExistSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 294, CypherParser::RuleOC_ExistSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2462);
    match(CypherParser::EXISTS);
    setState(2464);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2463);
      match(CypherParser::SP);
    }
    setState(2466);
    match(CypherParser::T__8);
    setState(2468);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2467);
      match(CypherParser::SP);
    }
    setState(2470);
    match(CypherParser::MATCH);
    setState(2472);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2471);
      match(CypherParser::SP);
    }
    setState(2474);
    oC_Pattern();
    setState(2479);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 419, _ctx)) {
    case 1: {
      setState(2476);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2475);
        match(CypherParser::SP);
      }
      setState(2478);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2482);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2481);
      match(CypherParser::SP);
    }
    setState(2484);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CountSubqueryContext ------------------------------------------------------------------

CypherParser::KU_CountSubqueryContext::KU_CountSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::KU_CountSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CountSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_CountSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_CountSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleKU_CountSubquery;
}


CypherParser::KU_CountSubqueryContext* CypherParser::kU_CountSubquery() {
  KU_CountSubqueryContext *_localctx = _tracker.createInstance<KU_CountSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 296, CypherParser::RuleKU_CountSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2486);
    match(CypherParser::COUNT);
    setState(2488);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2487);
      match(CypherParser::SP);
    }
    setState(2490);
    match(CypherParser::T__8);
    setState(2492);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2491);
      match(CypherParser::SP);
    }
    setState(2494);
    match(CypherParser::MATCH);
    setState(2496);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2495);
      match(CypherParser::SP);
    }
    setState(2498);
    oC_Pattern();
    setState(2503);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 425, _ctx)) {
    case 1: {
      setState(2500);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2499);
        match(CypherParser::SP);
      }
      setState(2502);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2506);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2505);
      match(CypherParser::SP);
    }
    setState(2508);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

CypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyLookup;
}


CypherParser::OC_PropertyLookupContext* CypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
  enterRule(_localctx, 298, CypherParser::RuleOC_PropertyLookup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2510);
    match(CypherParser::T__4);
    setState(2512);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2511);
      match(CypherParser::SP);
    }
    setState(2516);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::TYPE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::DEFAULT:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::PROJECT:
      case CypherParser::GRAPH:
      case CypherParser::AS:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2514);
        oC_PropertyKeyName();
        break;
      }

      case CypherParser::STAR: {
        setState(2515);
        match(CypherParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

CypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(CypherParser::ELSE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(CypherParser::CASE, 0);
}

std::vector<CypherParser::OC_CaseAlternativeContext *> CypherParser::OC_CaseExpressionContext::oC_CaseAlternative() {
  return getRuleContexts<CypherParser::OC_CaseAlternativeContext>();
}

CypherParser::OC_CaseAlternativeContext* CypherParser::OC_CaseExpressionContext::oC_CaseAlternative(size_t i) {
  return getRuleContext<CypherParser::OC_CaseAlternativeContext>(i);
}


size_t CypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseExpression;
}


CypherParser::OC_CaseExpressionContext* CypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 300, CypherParser::RuleOC_CaseExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2540);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 434, _ctx)) {
    case 1: {
      setState(2518);
      match(CypherParser::CASE);
      setState(2523); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2520);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2519);
                  match(CypherParser::SP);
                }
                setState(2522);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2525); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 430, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(2527);
      match(CypherParser::CASE);
      setState(2529);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2528);
        match(CypherParser::SP);
      }
      setState(2531);
      oC_Expression();
      setState(2536); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2533);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2532);
                  match(CypherParser::SP);
                }
                setState(2535);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2538); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 433, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
    setState(2550);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 437, _ctx)) {
    case 1: {
      setState(2543);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2542);
        match(CypherParser::SP);
      }
      setState(2545);
      match(CypherParser::ELSE);
      setState(2547);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2546);
        match(CypherParser::SP);
      }
      setState(2549);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(2553);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2552);
      match(CypherParser::SP);
    }
    setState(2555);
    match(CypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativeContext ------------------------------------------------------------------

CypherParser::OC_CaseAlternativeContext::OC_CaseAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::WHEN() {
  return getToken(CypherParser::WHEN, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseAlternativeContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseAlternativeContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::THEN() {
  return getToken(CypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseAlternativeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CaseAlternativeContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseAlternative;
}


CypherParser::OC_CaseAlternativeContext* CypherParser::oC_CaseAlternative() {
  OC_CaseAlternativeContext *_localctx = _tracker.createInstance<OC_CaseAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 302, CypherParser::RuleOC_CaseAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2557);
    match(CypherParser::WHEN);
    setState(2559);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2558);
      match(CypherParser::SP);
    }
    setState(2561);
    oC_Expression();
    setState(2563);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2562);
      match(CypherParser::SP);
    }
    setState(2565);
    match(CypherParser::THEN);
    setState(2567);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2566);
      match(CypherParser::SP);
    }
    setState(2569);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

CypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_VariableContext::getRuleIndex() const {
  return CypherParser::RuleOC_Variable;
}


CypherParser::OC_VariableContext* CypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
  enterRule(_localctx, 304, CypherParser::RuleOC_Variable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2571);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

CypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_DoubleLiteralContext* CypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<CypherParser::OC_DoubleLiteralContext>(0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_NumberLiteral;
}


CypherParser::OC_NumberLiteralContext* CypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 306, CypherParser::RuleOC_NumberLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2575);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2573);
        oC_DoubleLiteral();
        break;
      }

      case CypherParser::DecimalInteger: {
        enterOuterAlt(_localctx, 2);
        setState(2574);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

CypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_ParameterContext::getRuleIndex() const {
  return CypherParser::RuleOC_Parameter;
}


CypherParser::OC_ParameterContext* CypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
  enterRule(_localctx, 308, CypherParser::RuleOC_Parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2577);
    match(CypherParser::T__25);
    setState(2580);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::TYPE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::DEFAULT:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::PROJECT:
      case CypherParser::GRAPH:
      case CypherParser::AS:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2578);
        oC_SymbolicName();
        break;
      }

      case CypherParser::DecimalInteger: {
        setState(2579);
        match(CypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyExpression;
}


CypherParser::OC_PropertyExpressionContext* CypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 310, CypherParser::RuleOC_PropertyExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2582);
    oC_Atom();
    setState(2584);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2583);
      match(CypherParser::SP);
    }
    setState(2586);
    oC_PropertyLookup();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

CypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyKeyName;
}


CypherParser::OC_PropertyKeyNameContext* CypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
  enterRule(_localctx, 312, CypherParser::RuleOC_PropertyKeyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2588);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

CypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_IntegerLiteral;
}


CypherParser::OC_IntegerLiteralContext* CypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 314, CypherParser::RuleOC_IntegerLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2590);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

CypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(CypherParser::RegularDecimalReal, 0);
}


size_t CypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_DoubleLiteral;
}


CypherParser::OC_DoubleLiteralContext* CypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 316, CypherParser::RuleOC_DoubleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2592);
    match(CypherParser::RegularDecimalReal);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

CypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SchemaName;
}


CypherParser::OC_SchemaNameContext* CypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 318, CypherParser::RuleOC_SchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2594);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

CypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(CypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(CypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(CypherParser::HexLetter, 0);
}

CypherParser::KU_NonReservedKeywordsContext* CypherParser::OC_SymbolicNameContext::kU_NonReservedKeywords() {
  return getRuleContext<CypherParser::KU_NonReservedKeywordsContext>(0);
}


size_t CypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SymbolicName;
}


CypherParser::OC_SymbolicNameContext* CypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
  enterRule(_localctx, 320, CypherParser::RuleOC_SymbolicName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2601);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::UnescapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(2596);
        match(CypherParser::UnescapedSymbolicName);
        break;
      }

      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(2597);
        antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken = match(CypherParser::EscapedSymbolicName);
        if ((antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken != nullptr ? antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken->getText() : "") == "``") { notifyEmptyToken(antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken); }
        break;
      }

      case CypherParser::HexLetter: {
        enterOuterAlt(_localctx, 3);
        setState(2599);
        match(CypherParser::HexLetter);
        break;
      }

      case CypherParser::USE:
      case CypherParser::COMMENT_:
      case CypherParser::EXPORT:
      case CypherParser::IMPORT:
      case CypherParser::DATABASE:
      case CypherParser::NODE:
      case CypherParser::SEQUENCE:
      case CypherParser::TYPE:
      case CypherParser::INCREMENT:
      case CypherParser::MINVALUE:
      case CypherParser::MAXVALUE:
      case CypherParser::START:
      case CypherParser::NO:
      case CypherParser::CYCLE:
      case CypherParser::DEFAULT:
      case CypherParser::REL:
      case CypherParser::DECIMAL:
      case CypherParser::BEGIN:
      case CypherParser::PROJECT:
      case CypherParser::GRAPH:
      case CypherParser::AS:
      case CypherParser::IN:
      case CypherParser::CONTAINS:
      case CypherParser::COUNT:
      case CypherParser::END: {
        enterOuterAlt(_localctx, 4);
        setState(2600);
        kU_NonReservedKeywords();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_NonReservedKeywordsContext ------------------------------------------------------------------

CypherParser::KU_NonReservedKeywordsContext::KU_NonReservedKeywordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMENT_() {
  return getToken(CypherParser::COMMENT_, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IN() {
  return getToken(CypherParser::IN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::START() {
  return getToken(CypherParser::START, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DECIMAL() {
  return getToken(CypherParser::DECIMAL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::TYPE() {
  return getToken(CypherParser::TYPE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DEFAULT() {
  return getToken(CypherParser::DEFAULT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::PROJECT() {
  return getToken(CypherParser::PROJECT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::GRAPH() {
  return getToken(CypherParser::GRAPH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::AS() {
  return getToken(CypherParser::AS, 0);
}


size_t CypherParser::KU_NonReservedKeywordsContext::getRuleIndex() const {
  return CypherParser::RuleKU_NonReservedKeywords;
}


CypherParser::KU_NonReservedKeywordsContext* CypherParser::kU_NonReservedKeywords() {
  KU_NonReservedKeywordsContext *_localctx = _tracker.createInstance<KU_NonReservedKeywordsContext>(_ctx, getState());
  enterRule(_localctx, 322, CypherParser::RuleKU_NonReservedKeywords);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2603);
    _la = _input->LA(1);
    if (!(((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & 3377739490889477) != 0) || ((((_la - 113) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 113)) & 4568121345) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_LeftArrowHead;
}


CypherParser::OC_LeftArrowHeadContext* CypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 324, CypherParser::RuleOC_LeftArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2605);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2013282304) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_RightArrowHead;
}


CypherParser::OC_RightArrowHeadContext* CypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 326, CypherParser::RuleOC_RightArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2607);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 32212320256) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

CypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DashContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::OC_DashContext::getRuleIndex() const {
  return CypherParser::RuleOC_Dash;
}


CypherParser::OC_DashContext* CypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
  enterRule(_localctx, 328, CypherParser::RuleOC_Dash);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2609);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 70334384439296) != 0) || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CypherParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 48: return kU_DataTypeSempred(antlrcpp::downCast<KU_DataTypeContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_DataTypeSempred(KU_DataTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 5);

  default:
    break;
  }
  return true;
}

void CypherParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cypherParserInitialize();
#else
  ::antlr4::internal::call_once(cypherParserOnceFlag, cypherParserInitialize);
#endif
}
