
// Generated from Cypher.g4 by ANTLR 4.13.1



#include "cypher_parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct CypherParserStaticData final {
  CypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CypherParserStaticData(const CypherParserStaticData&) = delete;
  CypherParserStaticData(CypherParserStaticData&&) = delete;
  CypherParserStaticData& operator=(const CypherParserStaticData&) = delete;
  CypherParserStaticData& operator=(CypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cypherParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CypherParserStaticData *cypherParserStaticData = nullptr;

void cypherParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cypherParserStaticData != nullptr) {
    return;
  }
#else
  assert(cypherParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CypherParserStaticData>(
    std::vector<std::string>{
      "ku_Statements", "oC_Cypher", "oC_Statement", "kU_CopyFrom", "kU_ColumnNames", 
      "kU_ScanSource", "kU_CopyFromByColumn", "kU_CopyTO", "kU_ExportDatabase", 
      "kU_ImportDatabase", "kU_AttachDatabase", "kU_Option", "kU_Options", 
      "kU_DetachDatabase", "kU_UseDatabase", "kU_StandaloneCall", "kU_CommentOn", 
      "kU_CreateMacro", "kU_PositionalArgs", "kU_DefaultArg", "kU_FilePaths", 
      "kU_IfNotExists", "kU_CreateNodeTable", "kU_CreateRelTable", "kU_CreateRelTableGroup", 
      "kU_RelTableConnection", "kU_CreateSequence", "kU_CreateType", "kU_SequenceOptions", 
      "kU_IncrementBy", "kU_MinValue", "kU_MaxValue", "kU_StartWith", "kU_Cycle", 
      "kU_IfExists", "kU_Drop", "kU_AlterTable", "kU_AlterOptions", "kU_AddProperty", 
      "kU_Default", "kU_DropProperty", "kU_RenameTable", "kU_RenameProperty", 
      "kU_ColumnDefinitions", "kU_ColumnDefinition", "kU_PropertyDefinitions", 
      "kU_PropertyDefinition", "kU_CreateNodeConstraint", "kU_DataType", 
      "kU_ListIdentifiers", "kU_ListIdentifier", "oC_AnyCypherOption", "oC_Explain", 
      "oC_Profile", "kU_Transaction", "kU_Extension", "kU_LoadExtension", 
      "kU_InstallExtension", "oC_Query", "oC_RegularQuery", "oC_Union", 
      "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", "kU_QueryPart", 
      "oC_UpdatingClause", "oC_ReadingClause", "kU_LoadFrom", "kU_InQueryCall", 
      "oC_Match", "kU_Hint", "kU_JoinNode", "oC_Unwind", "oC_Create", "oC_Merge", 
      "oC_MergeAction", "oC_Set", "oC_SetItem", "oC_Delete", "oC_With", 
      "oC_Return", "oC_ProjectionBody", "oC_ProjectionItems", "oC_ProjectionItem", 
      "oC_Order", "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
      "oC_PatternPart", "oC_AnonymousPatternPart", "oC_PatternElement", 
      "oC_NodePattern", "oC_PatternElementChain", "oC_RelationshipPattern", 
      "oC_RelationshipDetail", "kU_Properties", "oC_RelationshipTypes", 
      "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "kU_RecursiveRelationshipComprehension", 
      "kU_IntermediateNodeProjectionItems", "kU_IntermediateRelProjectionItems", 
      "oC_LowerBound", "oC_UpperBound", "oC_LabelName", "oC_RelTypeName", 
      "oC_Expression", "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
      "oC_NotExpression", "oC_ComparisonExpression", "kU_ComparisonOperator", 
      "kU_BitwiseOrOperatorExpression", "kU_BitwiseAndOperatorExpression", 
      "kU_BitShiftOperatorExpression", "kU_BitShiftOperator", "oC_AddOrSubtractExpression", 
      "kU_AddOrSubtractOperator", "oC_MultiplyDivideModuloExpression", "kU_MultiplyDivideModuloOperator", 
      "oC_PowerOfExpression", "oC_UnaryAddSubtractOrFactorialExpression", 
      "oC_StringListNullOperatorExpression", "oC_ListOperatorExpression", 
      "oC_StringOperatorExpression", "oC_RegularExpression", "oC_NullOperatorExpression", 
      "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Quantifier", "oC_FilterExpression", 
      "oC_IdInColl", "oC_Literal", "oC_BooleanLiteral", "oC_ListLiteral", 
      "kU_ListEntry", "kU_StructLiteral", "kU_StructField", "oC_ParenthesizedExpression", 
      "oC_FunctionInvocation", "oC_FunctionName", "kU_FunctionParameter", 
      "kU_LambdaParameter", "kU_LambdaVars", "oC_PathPatterns", "oC_ExistSubquery", 
      "kU_CountSubquery", "oC_PropertyLookup", "oC_CaseExpression", "oC_CaseAlternative", 
      "oC_Variable", "oC_NumberLiteral", "oC_Parameter", "oC_PropertyExpression", 
      "oC_PropertyKeyName", "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_SchemaName", 
      "oC_SymbolicName", "kU_NonReservedKeywords", "oC_LeftArrowHead", "oC_RightArrowHead", 
      "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "'('", "')'", "','", "'.'", "'='", "'['", "']'", "'{'", 
      "'}'", "'|'", "'..'", "'<>'", "'<'", "'<='", "'>'", "'>='", "'&'", 
      "'>>'", "'<<'", "'+'", "'/'", "'%'", "'^'", "'=~'", "'$'", "'\\u27E8'", 
      "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", "'\\uFE65'", 
      "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", 
      "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", "'\\uFF0D'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "'*'", "", "'!='", "'-'", "'!'", "':'", "", "", "", 
      "", "", "", "", "", "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "ACYCLIC", "ANY", 
      "ADD", "ALL", "ALTER", "AND", "AS", "ASC", "ASCENDING", "ATTACH", 
      "BEGIN", "BY", "CALL", "CASE", "CAST", "CHECKPOINT", "COLUMN", "COMMENT", 
      "COMMIT", "COMMIT_SKIP_CHECKPOINT", "CONTAINS", "COPY", "COUNT", "CREATE", 
      "CYCLE", "DATABASE", "DBTYPE", "DEFAULT", "DELETE", "DESC", "DESCENDING", 
      "DETACH", "DISTINCT", "DROP", "ELSE", "END", "ENDS", "EXISTS", "EXPLAIN", 
      "EXPORT", "EXTENSION", "FALSE", "FROM", "GLOB", "GRAPH", "GROUP", 
      "HEADERS", "HINT", "IMPORT", "IF", "IN", "INCREMENT", "INSTALL", "IS", 
      "JOIN", "KEY", "LIMIT", "LOAD", "LOGICAL", "MACRO", "MATCH", "MAXVALUE", 
      "MERGE", "MINVALUE", "MULTI_JOIN", "NO", "NODE", "NOT", "NONE", "NULL", 
      "ON", "ONLY", "OPTIONAL", "OR", "ORDER", "PRIMARY", "PROFILE", "PROJECT", 
      "READ", "REL", "RENAME", "RETURN", "ROLLBACK", "ROLLBACK_SKIP_CHECKPOINT", 
      "SEQUENCE", "SET", "SHORTEST", "START", "STARTS", "TABLE", "THEN", 
      "TO", "TRAIL", "TRANSACTION", "TRUE", "TYPE", "UNION", "UNWIND", "USE", 
      "WHEN", "WHERE", "WITH", "WRITE", "XOR", "SINGLE", "DECIMAL", "STAR", 
      "L_SKIP", "INVALID_NOT_EQUAL", "MINUS", "FACTORIAL", "COLON", "StringLiteral", 
      "EscapedChar", "DecimalInteger", "HexLetter", "HexDigit", "Digit", 
      "NonZeroDigit", "NonZeroOctDigit", "ZeroDigit", "ExponentDecimalReal", 
      "RegularDecimalReal", "UnescapedSymbolicName", "IdentifierStart", 
      "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "CypherComment", 
      "Unknown"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,176,2791,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,1,0,1,0,3,0,337,8,0,1,0,1,0,3,0,341,8,0,
  	1,0,5,0,344,8,0,10,0,12,0,347,9,0,1,0,3,0,350,8,0,1,0,1,0,1,1,3,1,355,
  	8,1,1,1,3,1,358,8,1,1,1,1,1,3,1,362,8,1,1,1,3,1,365,8,1,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
  	3,2,388,8,2,1,3,1,3,1,3,1,3,3,3,394,8,3,1,3,1,3,3,3,398,8,3,1,3,3,3,401,
  	8,3,1,3,1,3,1,3,1,3,3,3,407,8,3,1,3,1,3,3,3,411,8,3,1,3,1,3,3,3,415,8,
  	3,1,3,1,3,3,3,419,8,3,1,4,1,4,3,4,423,8,4,1,4,1,4,3,4,427,8,4,1,4,1,4,
  	3,4,431,8,4,1,4,5,4,434,8,4,10,4,12,4,437,9,4,1,4,3,4,440,8,4,1,4,1,4,
  	1,5,1,5,1,5,3,5,447,8,5,1,5,1,5,3,5,451,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,
  	5,459,8,5,1,5,1,5,3,5,463,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,473,
  	8,6,1,6,1,6,3,6,477,8,6,1,6,1,6,3,6,481,8,6,1,6,5,6,484,8,6,10,6,12,6,
  	487,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,3,7,499,8,7,1,7,1,7,3,
  	7,503,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,511,8,7,1,7,1,7,3,7,515,8,7,1,7,
  	1,7,3,7,519,8,7,1,7,1,7,3,7,523,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,531,8,
  	8,1,8,1,8,3,8,535,8,8,1,8,1,8,3,8,539,8,8,1,8,1,8,3,8,543,8,8,1,9,1,9,
  	1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,558,8,10,1,10,
  	1,10,1,10,3,10,563,8,10,1,10,1,10,1,10,1,10,3,10,569,8,10,1,10,1,10,3,
  	10,573,8,10,1,10,3,10,576,8,10,1,10,3,10,579,8,10,1,10,1,10,1,11,1,11,
  	3,11,585,8,11,1,11,1,11,3,11,589,8,11,1,11,5,11,592,8,11,10,11,12,11,
  	595,9,11,3,11,597,8,11,1,11,1,11,1,11,3,11,602,8,11,1,12,1,12,3,12,606,
  	8,12,1,12,1,12,3,12,610,8,12,1,12,5,12,613,8,12,10,12,12,12,616,9,12,
  	1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,630,
  	8,15,1,15,1,15,3,15,634,8,15,1,15,1,15,1,15,1,15,1,15,3,15,641,8,15,1,
  	16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
  	17,1,17,1,17,1,17,3,17,661,8,17,1,17,1,17,3,17,665,8,17,1,17,3,17,668,
  	8,17,1,17,3,17,671,8,17,1,17,3,17,674,8,17,1,17,3,17,677,8,17,1,17,1,
  	17,3,17,681,8,17,1,17,5,17,684,8,17,10,17,12,17,687,9,17,1,17,3,17,690,
  	8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,3,18,700,8,18,1,18,1,18,
  	3,18,704,8,18,1,18,5,18,707,8,18,10,18,12,18,710,9,18,1,19,1,19,3,19,
  	714,8,19,1,19,1,19,1,19,3,19,719,8,19,1,19,1,19,1,20,1,20,3,20,725,8,
  	20,1,20,1,20,3,20,729,8,20,1,20,1,20,3,20,733,8,20,1,20,5,20,736,8,20,
  	10,20,12,20,739,9,20,1,20,1,20,1,20,1,20,3,20,745,8,20,1,20,1,20,3,20,
  	749,8,20,1,20,1,20,3,20,753,8,20,1,20,3,20,756,8,20,1,21,1,21,1,21,1,
  	21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,773,8,
  	22,1,22,1,22,3,22,777,8,22,1,22,1,22,3,22,781,8,22,1,22,1,22,3,22,785,
  	8,22,1,22,1,22,3,22,789,8,22,1,22,3,22,792,8,22,1,22,3,22,795,8,22,1,
  	22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,808,8,23,1,
  	23,1,23,3,23,812,8,23,1,23,1,23,3,23,816,8,23,1,23,1,23,3,23,820,8,23,
  	1,23,1,23,3,23,824,8,23,1,23,1,23,3,23,828,8,23,3,23,830,8,23,1,23,1,
  	23,3,23,834,8,23,1,23,1,23,3,23,838,8,23,3,23,840,8,23,1,23,1,23,1,23,
  	1,23,3,23,846,8,23,1,23,1,23,3,23,850,8,23,1,23,1,23,3,23,854,8,23,1,
  	23,1,23,3,23,858,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
  	24,1,24,3,24,871,8,24,1,24,1,24,3,24,875,8,24,1,24,1,24,3,24,879,8,24,
  	1,24,1,24,3,24,883,8,24,1,24,1,24,3,24,887,8,24,1,24,4,24,890,8,24,11,
  	24,12,24,891,1,24,3,24,895,8,24,1,24,1,24,3,24,899,8,24,1,24,1,24,3,24,
  	903,8,24,3,24,905,8,24,1,24,1,24,3,24,909,8,24,1,24,1,24,3,24,913,8,24,
  	3,24,915,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,26,3,26,934,8,26,1,26,1,26,1,26,5,26,939,8,
  	26,10,26,12,26,942,9,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,3,27,954,8,27,1,28,1,28,1,28,1,28,1,28,3,28,961,8,28,1,29,1,29,1,
  	29,1,29,3,29,967,8,29,1,29,3,29,970,8,29,1,29,1,29,1,30,1,30,1,30,1,30,
  	1,30,1,30,3,30,980,8,30,1,30,3,30,983,8,30,1,31,1,31,1,31,1,31,1,31,1,
  	31,3,31,991,8,31,1,31,3,31,994,8,31,1,32,1,32,1,32,1,32,3,32,1000,8,32,
  	1,32,3,32,1003,8,32,1,32,1,32,1,33,1,33,3,33,1009,8,33,1,33,1,33,1,34,
  	1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1024,8,35,1,35,
  	1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,3,37,
  	1040,8,37,1,38,1,38,1,38,1,38,1,38,3,38,1047,8,38,1,38,1,38,1,38,1,38,
  	1,38,3,38,1054,8,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,3,40,
  	1065,8,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,
  	1,42,1,42,1,42,1,42,1,43,1,43,3,43,1085,8,43,1,43,1,43,3,43,1089,8,43,
  	1,43,5,43,1092,8,43,10,43,12,43,1095,9,43,1,44,1,44,1,44,1,44,1,45,1,
  	45,3,45,1103,8,45,1,45,1,45,3,45,1107,8,45,1,45,5,45,1110,8,45,10,45,
  	12,45,1113,9,45,1,46,1,46,1,46,3,46,1118,8,46,1,46,1,46,1,46,1,46,3,46,
  	1124,8,46,1,47,1,47,1,47,1,47,3,47,1130,8,47,1,47,1,47,3,47,1134,8,47,
  	1,47,1,47,3,47,1138,8,47,1,47,1,47,1,48,1,48,1,48,1,48,3,48,1146,8,48,
  	1,48,1,48,3,48,1150,8,48,1,48,1,48,3,48,1154,8,48,1,48,1,48,1,48,1,48,
  	3,48,1160,8,48,1,48,1,48,3,48,1164,8,48,1,48,1,48,3,48,1168,8,48,1,48,
  	1,48,1,48,1,48,3,48,1174,8,48,1,48,1,48,3,48,1178,8,48,1,48,1,48,3,48,
  	1182,8,48,1,48,1,48,3,48,1186,8,48,1,48,1,48,3,48,1190,8,48,1,48,1,48,
  	1,48,1,48,3,48,1196,8,48,1,48,1,48,3,48,1200,8,48,1,48,1,48,3,48,1204,
  	8,48,1,48,1,48,3,48,1208,8,48,1,48,1,48,3,48,1212,8,48,1,48,1,48,3,48,
  	1216,8,48,1,48,1,48,5,48,1220,8,48,10,48,12,48,1223,9,48,1,49,1,49,5,
  	49,1227,8,49,10,49,12,49,1230,9,49,1,50,1,50,3,50,1234,8,50,1,50,1,50,
  	1,51,1,51,3,51,1240,8,51,1,52,1,52,1,52,3,52,1245,8,52,1,53,1,53,1,54,
  	1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1262,
  	8,54,1,55,1,55,3,55,1266,8,55,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1274,
  	8,56,1,57,1,57,1,57,1,57,1,58,1,58,1,59,1,59,3,59,1284,8,59,1,59,5,59,
  	1287,8,59,10,59,12,59,1290,9,59,1,59,1,59,3,59,1294,8,59,4,59,1296,8,
  	59,11,59,12,59,1297,1,59,1,59,1,59,3,59,1303,8,59,1,60,1,60,1,60,1,60,
  	3,60,1309,8,60,1,60,1,60,1,60,3,60,1314,8,60,1,60,3,60,1317,8,60,1,61,
  	1,61,3,61,1321,8,61,1,62,1,62,3,62,1325,8,62,5,62,1327,8,62,10,62,12,
  	62,1330,9,62,1,62,1,62,1,62,3,62,1335,8,62,5,62,1337,8,62,10,62,12,62,
  	1340,9,62,1,62,1,62,3,62,1344,8,62,1,62,5,62,1347,8,62,10,62,12,62,1350,
  	9,62,1,62,3,62,1353,8,62,1,62,3,62,1356,8,62,3,62,1358,8,62,1,63,1,63,
  	3,63,1362,8,63,4,63,1364,8,63,11,63,12,63,1365,1,63,1,63,1,64,1,64,3,
  	64,1372,8,64,5,64,1374,8,64,10,64,12,64,1377,9,64,1,64,1,64,3,64,1381,
  	8,64,5,64,1383,8,64,10,64,12,64,1386,9,64,1,64,1,64,1,65,1,65,1,65,1,
  	65,3,65,1394,8,65,1,66,1,66,1,66,1,66,3,66,1400,8,66,1,67,1,67,1,67,1,
  	67,1,67,1,67,3,67,1408,8,67,1,67,1,67,3,67,1412,8,67,1,67,1,67,3,67,1416,
  	8,67,1,67,1,67,3,67,1420,8,67,1,67,1,67,1,67,1,67,1,67,3,67,1427,8,67,
  	1,67,1,67,3,67,1431,8,67,1,67,1,67,3,67,1435,8,67,1,67,1,67,3,67,1439,
  	8,67,1,67,3,67,1442,8,67,1,67,3,67,1445,8,67,1,68,1,68,1,68,1,68,3,68,
  	1451,8,68,1,68,3,68,1454,8,68,1,69,1,69,3,69,1458,8,69,1,69,1,69,3,69,
  	1462,8,69,1,69,1,69,1,69,3,69,1467,8,69,1,69,1,69,3,69,1471,8,69,1,70,
  	1,70,1,70,1,70,1,71,1,71,1,71,3,71,1480,8,71,1,71,1,71,3,71,1484,8,71,
  	1,71,1,71,1,71,3,71,1489,8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
  	1,71,1,71,4,71,1501,8,71,11,71,12,71,1502,5,71,1505,8,71,10,71,12,71,
  	1508,9,71,1,72,1,72,3,72,1512,8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,73,
  	1,73,3,73,1522,8,73,1,73,1,73,1,74,1,74,3,74,1528,8,74,1,74,1,74,1,74,
  	5,74,1533,8,74,10,74,12,74,1536,9,74,1,75,1,75,1,75,1,75,1,75,1,75,1,
  	75,1,75,1,75,1,75,3,75,1548,8,75,1,76,1,76,3,76,1552,8,76,1,76,1,76,3,
  	76,1556,8,76,1,76,1,76,3,76,1560,8,76,1,76,5,76,1563,8,76,10,76,12,76,
  	1566,9,76,1,77,1,77,3,77,1570,8,77,1,77,1,77,3,77,1574,8,77,1,77,1,77,
  	1,78,1,78,3,78,1580,8,78,1,78,1,78,3,78,1584,8,78,1,78,1,78,3,78,1588,
  	8,78,1,78,1,78,3,78,1592,8,78,1,78,5,78,1595,8,78,10,78,12,78,1598,9,
  	78,1,79,1,79,1,79,3,79,1603,8,79,1,79,3,79,1606,8,79,1,80,1,80,1,80,1,
  	81,3,81,1612,8,81,1,81,3,81,1615,8,81,1,81,1,81,1,81,1,81,3,81,1621,8,
  	81,1,81,1,81,3,81,1625,8,81,1,81,1,81,3,81,1629,8,81,1,82,1,82,3,82,1633,
  	8,82,1,82,1,82,3,82,1637,8,82,1,82,5,82,1640,8,82,10,82,12,82,1643,9,
  	82,1,82,1,82,3,82,1647,8,82,1,82,1,82,3,82,1651,8,82,1,82,5,82,1654,8,
  	82,10,82,12,82,1657,9,82,3,82,1659,8,82,1,83,1,83,1,83,1,83,1,83,1,83,
  	1,83,3,83,1668,8,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1677,8,84,
  	1,84,5,84,1680,8,84,10,84,12,84,1683,9,84,1,85,1,85,1,85,1,85,1,86,1,
  	86,1,86,1,86,1,87,1,87,3,87,1695,8,87,1,87,3,87,1698,8,87,1,88,1,88,1,
  	88,1,88,1,89,1,89,3,89,1706,8,89,1,89,1,89,3,89,1710,8,89,1,89,5,89,1713,
  	8,89,10,89,12,89,1716,9,89,1,90,1,90,3,90,1720,8,90,1,90,1,90,3,90,1724,
  	8,90,1,90,1,90,1,90,3,90,1729,8,90,1,91,1,91,1,92,1,92,3,92,1735,8,92,
  	1,92,5,92,1738,8,92,10,92,12,92,1741,9,92,1,92,1,92,1,92,1,92,3,92,1747,
  	8,92,1,93,1,93,3,93,1751,8,93,1,93,1,93,3,93,1755,8,93,3,93,1757,8,93,
  	1,93,1,93,3,93,1761,8,93,3,93,1763,8,93,1,93,1,93,3,93,1767,8,93,3,93,
  	1769,8,93,1,93,1,93,1,94,1,94,3,94,1775,8,94,1,94,1,94,1,95,1,95,3,95,
  	1781,8,95,1,95,1,95,3,95,1785,8,95,1,95,3,95,1788,8,95,1,95,3,95,1791,
  	8,95,1,95,1,95,1,95,1,95,3,95,1797,8,95,1,95,3,95,1800,8,95,1,95,3,95,
  	1803,8,95,1,95,1,95,3,95,1807,8,95,1,95,1,95,1,95,1,95,3,95,1813,8,95,
  	1,95,3,95,1816,8,95,1,95,3,95,1819,8,95,1,95,1,95,3,95,1823,8,95,1,96,
  	1,96,3,96,1827,8,96,1,96,1,96,3,96,1831,8,96,3,96,1833,8,96,1,96,1,96,
  	3,96,1837,8,96,3,96,1839,8,96,1,96,1,96,3,96,1843,8,96,3,96,1845,8,96,
  	1,96,1,96,3,96,1849,8,96,3,96,1851,8,96,1,96,1,96,1,97,1,97,3,97,1857,
  	8,97,1,97,1,97,3,97,1861,8,97,1,97,1,97,3,97,1865,8,97,1,97,1,97,3,97,
  	1869,8,97,1,97,1,97,3,97,1873,8,97,1,97,1,97,3,97,1877,8,97,1,97,1,97,
  	3,97,1881,8,97,1,97,1,97,3,97,1885,8,97,5,97,1887,8,97,10,97,12,97,1890,
  	9,97,3,97,1892,8,97,1,97,1,97,1,98,1,98,3,98,1898,8,98,1,98,1,98,3,98,
  	1902,8,98,1,98,1,98,3,98,1906,8,98,1,98,3,98,1909,8,98,1,98,5,98,1912,
  	8,98,10,98,12,98,1915,9,98,1,99,1,99,3,99,1919,8,99,1,99,5,99,1922,8,
  	99,10,99,12,99,1925,9,99,1,100,1,100,3,100,1929,8,100,1,100,1,100,1,101,
  	1,101,3,101,1935,8,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1943,
  	8,101,1,101,3,101,1946,8,101,1,101,3,101,1949,8,101,1,101,3,101,1952,
  	8,101,1,101,1,101,3,101,1956,8,101,1,101,3,101,1959,8,101,1,101,3,101,
  	1962,8,101,1,101,3,101,1965,8,101,1,101,3,101,1968,8,101,1,102,1,102,
  	3,102,1972,8,102,1,102,1,102,3,102,1976,8,102,1,102,1,102,3,102,1980,
  	8,102,1,102,1,102,3,102,1984,8,102,1,102,1,102,3,102,1988,8,102,1,102,
  	1,102,3,102,1992,8,102,3,102,1994,8,102,1,102,3,102,1997,8,102,1,102,
  	1,102,3,102,2001,8,102,1,102,1,102,3,102,2005,8,102,1,102,1,102,3,102,
  	2009,8,102,1,102,1,102,3,102,2013,8,102,3,102,2015,8,102,1,102,1,102,
  	1,103,1,103,3,103,2021,8,103,1,103,3,103,2024,8,103,1,103,3,103,2027,
  	8,103,1,103,1,103,1,104,1,104,3,104,2033,8,104,1,104,3,104,2036,8,104,
  	1,104,3,104,2039,8,104,1,104,1,104,1,105,1,105,1,106,1,106,1,107,1,107,
  	1,108,1,108,1,109,1,109,1,110,1,110,1,110,1,110,1,110,5,110,2058,8,110,
  	10,110,12,110,2061,9,110,1,111,1,111,1,111,1,111,1,111,5,111,2068,8,111,
  	10,111,12,111,2071,9,111,1,112,1,112,1,112,1,112,1,112,5,112,2078,8,112,
  	10,112,12,112,2081,9,112,1,113,1,113,3,113,2085,8,113,5,113,2087,8,113,
  	10,113,12,113,2090,9,113,1,113,1,113,1,114,1,114,3,114,2096,8,114,1,114,
  	1,114,3,114,2100,8,114,1,114,1,114,3,114,2104,8,114,1,114,1,114,3,114,
  	2108,8,114,1,114,1,114,3,114,2112,8,114,1,114,1,114,1,114,1,114,1,114,
  	1,114,3,114,2120,8,114,1,114,1,114,3,114,2124,8,114,1,114,1,114,3,114,
  	2128,8,114,1,114,1,114,3,114,2132,8,114,1,114,1,114,4,114,2136,8,114,
  	11,114,12,114,2137,1,114,1,114,3,114,2142,8,114,1,115,1,115,1,116,1,116,
  	3,116,2148,8,116,1,116,1,116,3,116,2152,8,116,1,116,5,116,2155,8,116,
  	10,116,12,116,2158,9,116,1,117,1,117,3,117,2162,8,117,1,117,1,117,3,117,
  	2166,8,117,1,117,5,117,2169,8,117,10,117,12,117,2172,9,117,1,118,1,118,
  	3,118,2176,8,118,1,118,1,118,3,118,2180,8,118,1,118,1,118,5,118,2184,
  	8,118,10,118,12,118,2187,9,118,1,119,1,119,1,120,1,120,3,120,2193,8,120,
  	1,120,1,120,3,120,2197,8,120,1,120,1,120,5,120,2201,8,120,10,120,12,120,
  	2204,9,120,1,121,1,121,1,122,1,122,3,122,2210,8,122,1,122,1,122,3,122,
  	2214,8,122,1,122,1,122,5,122,2218,8,122,10,122,12,122,2221,9,122,1,123,
  	1,123,1,124,1,124,3,124,2227,8,124,1,124,1,124,3,124,2231,8,124,1,124,
  	5,124,2234,8,124,10,124,12,124,2237,9,124,1,125,1,125,3,125,2241,8,125,
  	5,125,2243,8,125,10,125,12,125,2246,9,125,1,125,1,125,3,125,2250,8,125,
  	1,125,3,125,2253,8,125,1,126,1,126,1,126,4,126,2258,8,126,11,126,12,126,
  	2259,1,126,3,126,2263,8,126,1,127,1,127,1,127,3,127,2268,8,127,1,127,
  	1,127,1,127,1,127,1,127,1,127,1,127,3,127,2277,8,127,1,127,1,127,3,127,
  	2281,8,127,1,127,3,127,2284,8,127,1,128,1,128,1,128,1,128,1,128,1,128,
  	1,128,1,128,1,128,1,128,1,128,3,128,2297,8,128,1,128,3,128,2300,8,128,
  	1,128,1,128,1,129,3,129,2305,8,129,1,129,1,129,1,130,1,130,1,130,1,130,
  	1,130,1,130,1,130,1,130,1,130,1,130,3,130,2319,8,130,1,131,1,131,3,131,
  	2323,8,131,1,131,5,131,2326,8,131,10,131,12,131,2329,9,131,1,132,1,132,
  	1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,3,132,2341,8,132,1,133,
  	1,133,3,133,2345,8,133,1,133,1,133,3,133,2349,8,133,1,133,1,133,3,133,
  	2353,8,133,1,133,1,133,1,133,1,133,3,133,2359,8,133,1,133,1,133,3,133,
  	2363,8,133,1,133,1,133,3,133,2367,8,133,1,133,1,133,1,133,1,133,3,133,
  	2373,8,133,1,133,1,133,3,133,2377,8,133,1,133,1,133,3,133,2381,8,133,
  	1,133,1,133,1,133,1,133,3,133,2387,8,133,1,133,1,133,3,133,2391,8,133,
  	1,133,1,133,3,133,2395,8,133,1,133,1,133,3,133,2399,8,133,1,134,1,134,
  	3,134,2403,8,134,1,134,3,134,2406,8,134,1,135,1,135,1,135,1,135,1,135,
  	1,135,1,136,1,136,1,136,1,136,1,136,1,136,3,136,2420,8,136,1,137,1,137,
  	1,138,1,138,3,138,2426,8,138,1,138,1,138,3,138,2430,8,138,1,138,1,138,
  	3,138,2434,8,138,5,138,2436,8,138,10,138,12,138,2439,9,138,3,138,2441,
  	8,138,1,138,1,138,1,139,1,139,3,139,2447,8,139,1,139,3,139,2450,8,139,
  	1,140,1,140,3,140,2454,8,140,1,140,1,140,3,140,2458,8,140,1,140,1,140,
  	3,140,2462,8,140,1,140,1,140,3,140,2466,8,140,5,140,2468,8,140,10,140,
  	12,140,2471,9,140,1,140,1,140,1,141,1,141,3,141,2477,8,141,1,141,3,141,
  	2480,8,141,1,141,1,141,3,141,2484,8,141,1,141,1,141,1,142,1,142,3,142,
  	2490,8,142,1,142,1,142,3,142,2494,8,142,1,142,1,142,1,143,1,143,3,143,
  	2500,8,143,1,143,1,143,3,143,2504,8,143,1,143,1,143,3,143,2508,8,143,
  	1,143,1,143,1,143,3,143,2513,8,143,1,143,1,143,3,143,2517,8,143,1,143,
  	1,143,3,143,2521,8,143,1,143,1,143,3,143,2525,8,143,1,143,1,143,1,143,
  	3,143,2530,8,143,1,143,3,143,2533,8,143,1,143,3,143,2536,8,143,1,143,
  	1,143,1,143,1,143,3,143,2542,8,143,1,143,1,143,3,143,2546,8,143,1,143,
  	1,143,3,143,2550,8,143,3,143,2552,8,143,1,143,1,143,3,143,2556,8,143,
  	1,143,1,143,3,143,2560,8,143,1,143,1,143,3,143,2564,8,143,5,143,2566,
  	8,143,10,143,12,143,2569,9,143,3,143,2571,8,143,1,143,1,143,3,143,2575,
  	8,143,1,144,1,144,1,145,1,145,3,145,2581,8,145,1,145,1,145,1,145,3,145,
  	2586,8,145,3,145,2588,8,145,1,145,1,145,3,145,2592,8,145,1,146,1,146,
  	3,146,2596,8,146,1,146,1,146,1,146,3,146,2601,8,146,1,146,1,146,3,146,
  	2605,8,146,1,147,1,147,1,147,3,147,2610,8,147,1,147,1,147,3,147,2614,
  	8,147,1,147,1,147,3,147,2618,8,147,1,147,1,147,3,147,2622,8,147,5,147,
  	2624,8,147,10,147,12,147,2627,9,147,1,147,1,147,3,147,2631,8,147,1,148,
  	1,148,3,148,2635,8,148,1,148,4,148,2638,8,148,11,148,12,148,2639,1,149,
  	1,149,3,149,2644,8,149,1,149,1,149,3,149,2648,8,149,1,149,1,149,3,149,
  	2652,8,149,1,149,1,149,3,149,2656,8,149,1,149,3,149,2659,8,149,1,149,
  	3,149,2662,8,149,1,149,1,149,1,150,1,150,3,150,2668,8,150,1,150,1,150,
  	3,150,2672,8,150,1,150,1,150,3,150,2676,8,150,1,150,1,150,3,150,2680,
  	8,150,1,150,3,150,2683,8,150,1,150,3,150,2686,8,150,1,150,1,150,1,151,
  	1,151,3,151,2692,8,151,1,151,1,151,3,151,2696,8,151,1,152,1,152,3,152,
  	2700,8,152,1,152,4,152,2703,8,152,11,152,12,152,2704,1,152,1,152,3,152,
  	2709,8,152,1,152,1,152,3,152,2713,8,152,1,152,4,152,2716,8,152,11,152,
  	12,152,2717,3,152,2720,8,152,1,152,3,152,2723,8,152,1,152,1,152,3,152,
  	2727,8,152,1,152,3,152,2730,8,152,1,152,3,152,2733,8,152,1,152,1,152,
  	1,153,1,153,3,153,2739,8,153,1,153,1,153,3,153,2743,8,153,1,153,1,153,
  	3,153,2747,8,153,1,153,1,153,1,154,1,154,1,155,1,155,3,155,2755,8,155,
  	1,156,1,156,1,156,3,156,2760,8,156,1,157,1,157,3,157,2764,8,157,1,157,
  	1,157,1,158,1,158,1,159,1,159,1,160,1,160,1,161,1,161,1,162,1,162,1,162,
  	1,162,1,162,3,162,2781,8,162,1,163,1,163,1,164,1,164,1,165,1,165,1,166,
  	1,166,1,166,0,2,96,142,167,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
  	32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
  	78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
  	118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
  	154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
  	190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
  	226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
  	262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,
  	298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,
  	0,12,2,0,130,130,135,135,2,0,53,54,75,76,2,0,6,6,13,17,1,0,19,20,2,0,
  	21,21,155,155,2,0,22,23,152,152,2,0,87,87,140,140,1,0,167,168,28,0,48,
  	48,50,50,52,52,55,58,61,61,63,64,66,68,70,71,74,74,77,77,79,79,84,86,
  	90,90,94,95,97,97,99,99,101,104,106,109,111,112,123,128,130,131,133,133,
  	139,139,141,141,144,144,148,148,151,151,153,153,2,0,14,14,27,30,2,0,16,
  	16,31,34,2,0,35,45,155,155,3172,0,334,1,0,0,0,2,354,1,0,0,0,4,387,1,0,
  	0,0,6,389,1,0,0,0,8,420,1,0,0,0,10,462,1,0,0,0,12,464,1,0,0,0,14,494,
  	1,0,0,0,16,524,1,0,0,0,18,544,1,0,0,0,20,550,1,0,0,0,22,601,1,0,0,0,24,
  	603,1,0,0,0,26,617,1,0,0,0,28,621,1,0,0,0,30,640,1,0,0,0,32,642,1,0,0,
  	0,34,654,1,0,0,0,36,697,1,0,0,0,38,711,1,0,0,0,40,755,1,0,0,0,42,757,
  	1,0,0,0,44,763,1,0,0,0,46,798,1,0,0,0,48,859,1,0,0,0,50,918,1,0,0,0,52,
  	926,1,0,0,0,54,943,1,0,0,0,56,960,1,0,0,0,58,962,1,0,0,0,60,982,1,0,0,
  	0,62,993,1,0,0,0,64,995,1,0,0,0,66,1008,1,0,0,0,68,1012,1,0,0,0,70,1016,
  	1,0,0,0,72,1027,1,0,0,0,74,1039,1,0,0,0,76,1041,1,0,0,0,78,1055,1,0,0,
  	0,80,1059,1,0,0,0,82,1068,1,0,0,0,84,1074,1,0,0,0,86,1082,1,0,0,0,88,
  	1096,1,0,0,0,90,1100,1,0,0,0,92,1114,1,0,0,0,94,1125,1,0,0,0,96,1215,
  	1,0,0,0,98,1224,1,0,0,0,100,1231,1,0,0,0,102,1239,1,0,0,0,104,1241,1,
  	0,0,0,106,1246,1,0,0,0,108,1261,1,0,0,0,110,1265,1,0,0,0,112,1267,1,0,
  	0,0,114,1275,1,0,0,0,116,1279,1,0,0,0,118,1302,1,0,0,0,120,1316,1,0,0,
  	0,122,1320,1,0,0,0,124,1357,1,0,0,0,126,1363,1,0,0,0,128,1375,1,0,0,0,
  	130,1393,1,0,0,0,132,1399,1,0,0,0,134,1401,1,0,0,0,136,1446,1,0,0,0,138,
  	1457,1,0,0,0,140,1472,1,0,0,0,142,1488,1,0,0,0,144,1509,1,0,0,0,146,1519,
  	1,0,0,0,148,1525,1,0,0,0,150,1547,1,0,0,0,152,1549,1,0,0,0,154,1567,1,
  	0,0,0,156,1579,1,0,0,0,158,1599,1,0,0,0,160,1607,1,0,0,0,162,1614,1,0,
  	0,0,164,1658,1,0,0,0,166,1667,1,0,0,0,168,1669,1,0,0,0,170,1684,1,0,0,
  	0,172,1688,1,0,0,0,174,1692,1,0,0,0,176,1699,1,0,0,0,178,1703,1,0,0,0,
  	180,1728,1,0,0,0,182,1730,1,0,0,0,184,1746,1,0,0,0,186,1748,1,0,0,0,188,
  	1772,1,0,0,0,190,1822,1,0,0,0,192,1824,1,0,0,0,194,1854,1,0,0,0,196,1895,
  	1,0,0,0,198,1916,1,0,0,0,200,1926,1,0,0,0,202,1932,1,0,0,0,204,1969,1,
  	0,0,0,206,2018,1,0,0,0,208,2030,1,0,0,0,210,2042,1,0,0,0,212,2044,1,0,
  	0,0,214,2046,1,0,0,0,216,2048,1,0,0,0,218,2050,1,0,0,0,220,2052,1,0,0,
  	0,222,2062,1,0,0,0,224,2072,1,0,0,0,226,2088,1,0,0,0,228,2141,1,0,0,0,
  	230,2143,1,0,0,0,232,2145,1,0,0,0,234,2159,1,0,0,0,236,2173,1,0,0,0,238,
  	2188,1,0,0,0,240,2190,1,0,0,0,242,2205,1,0,0,0,244,2207,1,0,0,0,246,2222,
  	1,0,0,0,248,2224,1,0,0,0,250,2244,1,0,0,0,252,2254,1,0,0,0,254,2283,1,
  	0,0,0,256,2296,1,0,0,0,258,2304,1,0,0,0,260,2318,1,0,0,0,262,2320,1,0,
  	0,0,264,2340,1,0,0,0,266,2398,1,0,0,0,268,2400,1,0,0,0,270,2407,1,0,0,
  	0,272,2419,1,0,0,0,274,2421,1,0,0,0,276,2423,1,0,0,0,278,2444,1,0,0,0,
  	280,2451,1,0,0,0,282,2476,1,0,0,0,284,2487,1,0,0,0,286,2574,1,0,0,0,288,
  	2576,1,0,0,0,290,2591,1,0,0,0,292,2593,1,0,0,0,294,2630,1,0,0,0,296,2632,
  	1,0,0,0,298,2641,1,0,0,0,300,2665,1,0,0,0,302,2689,1,0,0,0,304,2719,1,
  	0,0,0,306,2736,1,0,0,0,308,2750,1,0,0,0,310,2754,1,0,0,0,312,2756,1,0,
  	0,0,314,2761,1,0,0,0,316,2767,1,0,0,0,318,2769,1,0,0,0,320,2771,1,0,0,
  	0,322,2773,1,0,0,0,324,2780,1,0,0,0,326,2782,1,0,0,0,328,2784,1,0,0,0,
  	330,2786,1,0,0,0,332,2788,1,0,0,0,334,345,3,2,1,0,335,337,5,173,0,0,336,
  	335,1,0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,340,5,1,0,0,339,341,5,
  	173,0,0,340,339,1,0,0,0,340,341,1,0,0,0,341,342,1,0,0,0,342,344,3,2,1,
  	0,343,336,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,
  	349,1,0,0,0,347,345,1,0,0,0,348,350,5,173,0,0,349,348,1,0,0,0,349,350,
  	1,0,0,0,350,351,1,0,0,0,351,352,5,0,0,1,352,1,1,0,0,0,353,355,3,102,51,
  	0,354,353,1,0,0,0,354,355,1,0,0,0,355,357,1,0,0,0,356,358,5,173,0,0,357,
  	356,1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,364,3,4,2,0,360,362,5,
  	173,0,0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,365,5,1,0,
  	0,364,361,1,0,0,0,364,365,1,0,0,0,365,3,1,0,0,0,366,388,3,116,58,0,367,
  	388,3,44,22,0,368,388,3,46,23,0,369,388,3,48,24,0,370,388,3,52,26,0,371,
  	388,3,54,27,0,372,388,3,70,35,0,373,388,3,72,36,0,374,388,3,6,3,0,375,
  	388,3,12,6,0,376,388,3,14,7,0,377,388,3,30,15,0,378,388,3,34,17,0,379,
  	388,3,32,16,0,380,388,3,108,54,0,381,388,3,110,55,0,382,388,3,16,8,0,
  	383,388,3,18,9,0,384,388,3,20,10,0,385,388,3,26,13,0,386,388,3,28,14,
  	0,387,366,1,0,0,0,387,367,1,0,0,0,387,368,1,0,0,0,387,369,1,0,0,0,387,
  	370,1,0,0,0,387,371,1,0,0,0,387,372,1,0,0,0,387,373,1,0,0,0,387,374,1,
  	0,0,0,387,375,1,0,0,0,387,376,1,0,0,0,387,377,1,0,0,0,387,378,1,0,0,0,
  	387,379,1,0,0,0,387,380,1,0,0,0,387,381,1,0,0,0,387,382,1,0,0,0,387,383,
  	1,0,0,0,387,384,1,0,0,0,387,385,1,0,0,0,387,386,1,0,0,0,388,5,1,0,0,0,
  	389,390,5,67,0,0,390,391,5,173,0,0,391,400,3,322,161,0,392,394,5,173,
  	0,0,393,392,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,397,3,8,4,0,396,
  	398,5,173,0,0,397,396,1,0,0,0,397,398,1,0,0,0,398,401,1,0,0,0,399,401,
  	5,173,0,0,400,393,1,0,0,0,400,399,1,0,0,0,401,402,1,0,0,0,402,403,5,88,
  	0,0,403,404,5,173,0,0,404,418,3,10,5,0,405,407,5,173,0,0,406,405,1,0,
  	0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,410,5,2,0,0,409,411,5,173,0,0,
  	410,409,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,414,3,24,12,0,413,
  	415,5,173,0,0,414,413,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,417,
  	5,3,0,0,417,419,1,0,0,0,418,406,1,0,0,0,418,419,1,0,0,0,419,7,1,0,0,0,
  	420,422,5,2,0,0,421,423,5,173,0,0,422,421,1,0,0,0,422,423,1,0,0,0,423,
  	424,1,0,0,0,424,435,3,322,161,0,425,427,5,173,0,0,426,425,1,0,0,0,426,
  	427,1,0,0,0,427,428,1,0,0,0,428,430,5,4,0,0,429,431,5,173,0,0,430,429,
  	1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,434,3,322,161,0,433,426,1,
  	0,0,0,434,437,1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,439,1,0,0,0,
  	437,435,1,0,0,0,438,440,5,173,0,0,439,438,1,0,0,0,439,440,1,0,0,0,440,
  	441,1,0,0,0,441,442,5,3,0,0,442,9,1,0,0,0,443,463,3,40,20,0,444,446,5,
  	2,0,0,445,447,5,173,0,0,446,445,1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,
  	0,448,450,3,116,58,0,449,451,5,173,0,0,450,449,1,0,0,0,450,451,1,0,0,
  	0,451,452,1,0,0,0,452,453,5,3,0,0,453,463,1,0,0,0,454,463,3,308,154,0,
  	455,456,3,308,154,0,456,458,5,5,0,0,457,459,5,173,0,0,458,457,1,0,0,0,
  	458,459,1,0,0,0,459,460,1,0,0,0,460,461,3,322,161,0,461,463,1,0,0,0,462,
  	443,1,0,0,0,462,444,1,0,0,0,462,454,1,0,0,0,462,455,1,0,0,0,463,11,1,
  	0,0,0,464,465,5,67,0,0,465,466,5,173,0,0,466,467,3,322,161,0,467,468,
  	5,173,0,0,468,469,5,88,0,0,469,470,5,173,0,0,470,472,5,2,0,0,471,473,
  	5,173,0,0,472,471,1,0,0,0,472,473,1,0,0,0,473,474,1,0,0,0,474,485,5,158,
  	0,0,475,477,5,173,0,0,476,475,1,0,0,0,476,477,1,0,0,0,477,478,1,0,0,0,
  	478,480,5,4,0,0,479,481,5,173,0,0,480,479,1,0,0,0,480,481,1,0,0,0,481,
  	482,1,0,0,0,482,484,5,158,0,0,483,476,1,0,0,0,484,487,1,0,0,0,485,483,
  	1,0,0,0,485,486,1,0,0,0,486,488,1,0,0,0,487,485,1,0,0,0,488,489,5,3,0,
  	0,489,490,5,173,0,0,490,491,5,57,0,0,491,492,5,173,0,0,492,493,5,62,0,
  	0,493,13,1,0,0,0,494,495,5,67,0,0,495,496,5,173,0,0,496,498,5,2,0,0,497,
  	499,5,173,0,0,498,497,1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,502,
  	3,116,58,0,501,503,5,173,0,0,502,501,1,0,0,0,502,503,1,0,0,0,503,504,
  	1,0,0,0,504,505,5,3,0,0,505,506,5,173,0,0,506,507,5,137,0,0,507,508,5,
  	173,0,0,508,522,5,158,0,0,509,511,5,173,0,0,510,509,1,0,0,0,510,511,1,
  	0,0,0,511,512,1,0,0,0,512,514,5,2,0,0,513,515,5,173,0,0,514,513,1,0,0,
  	0,514,515,1,0,0,0,515,516,1,0,0,0,516,518,3,24,12,0,517,519,5,173,0,0,
  	518,517,1,0,0,0,518,519,1,0,0,0,519,520,1,0,0,0,520,521,5,3,0,0,521,523,
  	1,0,0,0,522,510,1,0,0,0,522,523,1,0,0,0,523,15,1,0,0,0,524,525,5,85,0,
  	0,525,526,5,173,0,0,526,527,5,71,0,0,527,528,5,173,0,0,528,542,5,158,
  	0,0,529,531,5,173,0,0,530,529,1,0,0,0,530,531,1,0,0,0,531,532,1,0,0,0,
  	532,534,5,2,0,0,533,535,5,173,0,0,534,533,1,0,0,0,534,535,1,0,0,0,535,
  	536,1,0,0,0,536,538,3,24,12,0,537,539,5,173,0,0,538,537,1,0,0,0,538,539,
  	1,0,0,0,539,540,1,0,0,0,540,541,5,3,0,0,541,543,1,0,0,0,542,530,1,0,0,
  	0,542,543,1,0,0,0,543,17,1,0,0,0,544,545,5,94,0,0,545,546,5,173,0,0,546,
  	547,5,71,0,0,547,548,5,173,0,0,548,549,5,158,0,0,549,19,1,0,0,0,550,551,
  	5,55,0,0,551,552,5,173,0,0,552,557,5,158,0,0,553,554,5,173,0,0,554,555,
  	5,52,0,0,555,556,5,173,0,0,556,558,3,322,161,0,557,553,1,0,0,0,557,558,
  	1,0,0,0,558,559,1,0,0,0,559,560,5,173,0,0,560,562,5,2,0,0,561,563,5,173,
  	0,0,562,561,1,0,0,0,562,563,1,0,0,0,563,564,1,0,0,0,564,565,5,72,0,0,
  	565,566,5,173,0,0,566,575,3,324,162,0,567,569,5,173,0,0,568,567,1,0,0,
  	0,568,569,1,0,0,0,569,570,1,0,0,0,570,572,5,4,0,0,571,573,5,173,0,0,572,
  	571,1,0,0,0,572,573,1,0,0,0,573,574,1,0,0,0,574,576,3,24,12,0,575,568,
  	1,0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,579,5,173,0,0,578,577,1,0,
  	0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,581,5,3,0,0,581,21,1,0,0,0,582,
  	596,3,324,162,0,583,585,5,173,0,0,584,583,1,0,0,0,584,585,1,0,0,0,585,
  	586,1,0,0,0,586,588,5,6,0,0,587,589,5,173,0,0,588,587,1,0,0,0,588,589,
  	1,0,0,0,589,597,1,0,0,0,590,592,5,173,0,0,591,590,1,0,0,0,592,595,1,0,
  	0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,597,1,0,0,0,595,593,1,0,0,0,596,
  	584,1,0,0,0,596,593,1,0,0,0,597,598,1,0,0,0,598,599,3,272,136,0,599,602,
  	1,0,0,0,600,602,3,324,162,0,601,582,1,0,0,0,601,600,1,0,0,0,602,23,1,
  	0,0,0,603,614,3,22,11,0,604,606,5,173,0,0,605,604,1,0,0,0,605,606,1,0,
  	0,0,606,607,1,0,0,0,607,609,5,4,0,0,608,610,5,173,0,0,609,608,1,0,0,0,
  	609,610,1,0,0,0,610,611,1,0,0,0,611,613,3,22,11,0,612,605,1,0,0,0,613,
  	616,1,0,0,0,614,612,1,0,0,0,614,615,1,0,0,0,615,25,1,0,0,0,616,614,1,
  	0,0,0,617,618,5,77,0,0,618,619,5,173,0,0,619,620,3,322,161,0,620,27,1,
  	0,0,0,621,622,5,144,0,0,622,623,5,173,0,0,623,624,3,322,161,0,624,29,
  	1,0,0,0,625,626,5,58,0,0,626,627,5,173,0,0,627,629,3,324,162,0,628,630,
  	5,173,0,0,629,628,1,0,0,0,629,630,1,0,0,0,630,631,1,0,0,0,631,633,5,6,
  	0,0,632,634,5,173,0,0,633,632,1,0,0,0,633,634,1,0,0,0,634,635,1,0,0,0,
  	635,636,3,218,109,0,636,641,1,0,0,0,637,638,5,58,0,0,638,639,5,173,0,
  	0,639,641,3,286,143,0,640,625,1,0,0,0,640,637,1,0,0,0,641,31,1,0,0,0,
  	642,643,5,63,0,0,643,644,5,173,0,0,644,645,5,116,0,0,645,646,5,173,0,
  	0,646,647,5,135,0,0,647,648,5,173,0,0,648,649,3,322,161,0,649,650,5,173,
  	0,0,650,651,5,99,0,0,651,652,5,173,0,0,652,653,5,158,0,0,653,33,1,0,0,
  	0,654,655,5,69,0,0,655,656,5,173,0,0,656,657,5,105,0,0,657,658,5,173,
  	0,0,658,660,3,288,144,0,659,661,5,173,0,0,660,659,1,0,0,0,660,661,1,0,
  	0,0,661,662,1,0,0,0,662,664,5,2,0,0,663,665,5,173,0,0,664,663,1,0,0,0,
  	664,665,1,0,0,0,665,667,1,0,0,0,666,668,3,36,18,0,667,666,1,0,0,0,667,
  	668,1,0,0,0,668,670,1,0,0,0,669,671,5,173,0,0,670,669,1,0,0,0,670,671,
  	1,0,0,0,671,673,1,0,0,0,672,674,3,38,19,0,673,672,1,0,0,0,673,674,1,0,
  	0,0,674,685,1,0,0,0,675,677,5,173,0,0,676,675,1,0,0,0,676,677,1,0,0,0,
  	677,678,1,0,0,0,678,680,5,4,0,0,679,681,5,173,0,0,680,679,1,0,0,0,680,
  	681,1,0,0,0,681,682,1,0,0,0,682,684,3,38,19,0,683,676,1,0,0,0,684,687,
  	1,0,0,0,685,683,1,0,0,0,685,686,1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,
  	0,688,690,5,173,0,0,689,688,1,0,0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,
  	692,5,3,0,0,692,693,5,173,0,0,693,694,5,52,0,0,694,695,5,173,0,0,695,
  	696,3,218,109,0,696,35,1,0,0,0,697,708,3,324,162,0,698,700,5,173,0,0,
  	699,698,1,0,0,0,699,700,1,0,0,0,700,701,1,0,0,0,701,703,5,4,0,0,702,704,
  	5,173,0,0,703,702,1,0,0,0,703,704,1,0,0,0,704,705,1,0,0,0,705,707,3,324,
  	162,0,706,699,1,0,0,0,707,710,1,0,0,0,708,706,1,0,0,0,708,709,1,0,0,0,
  	709,37,1,0,0,0,710,708,1,0,0,0,711,713,3,324,162,0,712,714,5,173,0,0,
  	713,712,1,0,0,0,713,714,1,0,0,0,714,715,1,0,0,0,715,716,5,157,0,0,716,
  	718,5,6,0,0,717,719,5,173,0,0,718,717,1,0,0,0,718,719,1,0,0,0,719,720,
  	1,0,0,0,720,721,3,272,136,0,721,39,1,0,0,0,722,724,5,7,0,0,723,725,5,
  	173,0,0,724,723,1,0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,737,5,158,
  	0,0,727,729,5,173,0,0,728,727,1,0,0,0,728,729,1,0,0,0,729,730,1,0,0,0,
  	730,732,5,4,0,0,731,733,5,173,0,0,732,731,1,0,0,0,732,733,1,0,0,0,733,
  	734,1,0,0,0,734,736,5,158,0,0,735,728,1,0,0,0,736,739,1,0,0,0,737,735,
  	1,0,0,0,737,738,1,0,0,0,738,740,1,0,0,0,739,737,1,0,0,0,740,756,5,8,0,
  	0,741,756,5,158,0,0,742,744,5,89,0,0,743,745,5,173,0,0,744,743,1,0,0,
  	0,744,745,1,0,0,0,745,746,1,0,0,0,746,748,5,2,0,0,747,749,5,173,0,0,748,
  	747,1,0,0,0,748,749,1,0,0,0,749,750,1,0,0,0,750,752,5,158,0,0,751,753,
  	5,173,0,0,752,751,1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,756,5,3,
  	0,0,755,722,1,0,0,0,755,741,1,0,0,0,755,742,1,0,0,0,756,41,1,0,0,0,757,
  	758,5,95,0,0,758,759,5,173,0,0,759,760,5,113,0,0,760,761,5,173,0,0,761,
  	762,5,83,0,0,762,43,1,0,0,0,763,764,5,69,0,0,764,765,5,173,0,0,765,766,
  	5,112,0,0,766,767,5,173,0,0,767,768,5,135,0,0,768,772,5,173,0,0,769,770,
  	3,42,21,0,770,771,5,173,0,0,771,773,1,0,0,0,772,769,1,0,0,0,772,773,1,
  	0,0,0,773,774,1,0,0,0,774,776,3,322,161,0,775,777,5,173,0,0,776,775,1,
  	0,0,0,776,777,1,0,0,0,777,778,1,0,0,0,778,780,5,2,0,0,779,781,5,173,0,
  	0,780,779,1,0,0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,784,3,90,45,0,783,
  	785,5,173,0,0,784,783,1,0,0,0,784,785,1,0,0,0,785,791,1,0,0,0,786,788,
  	5,4,0,0,787,789,5,173,0,0,788,787,1,0,0,0,788,789,1,0,0,0,789,790,1,0,
  	0,0,790,792,3,94,47,0,791,786,1,0,0,0,791,792,1,0,0,0,792,794,1,0,0,0,
  	793,795,5,173,0,0,794,793,1,0,0,0,794,795,1,0,0,0,795,796,1,0,0,0,796,
  	797,5,3,0,0,797,45,1,0,0,0,798,799,5,69,0,0,799,800,5,173,0,0,800,801,
  	5,125,0,0,801,802,5,173,0,0,802,803,5,135,0,0,803,807,5,173,0,0,804,805,
  	3,42,21,0,805,806,5,173,0,0,806,808,1,0,0,0,807,804,1,0,0,0,807,808,1,
  	0,0,0,808,809,1,0,0,0,809,811,3,322,161,0,810,812,5,173,0,0,811,810,1,
  	0,0,0,811,812,1,0,0,0,812,813,1,0,0,0,813,815,5,2,0,0,814,816,5,173,0,
  	0,815,814,1,0,0,0,815,816,1,0,0,0,816,817,1,0,0,0,817,819,3,50,25,0,818,
  	820,5,173,0,0,819,818,1,0,0,0,819,820,1,0,0,0,820,829,1,0,0,0,821,823,
  	5,4,0,0,822,824,5,173,0,0,823,822,1,0,0,0,823,824,1,0,0,0,824,825,1,0,
  	0,0,825,827,3,90,45,0,826,828,5,173,0,0,827,826,1,0,0,0,827,828,1,0,0,
  	0,828,830,1,0,0,0,829,821,1,0,0,0,829,830,1,0,0,0,830,839,1,0,0,0,831,
  	833,5,4,0,0,832,834,5,173,0,0,833,832,1,0,0,0,833,834,1,0,0,0,834,835,
  	1,0,0,0,835,837,3,324,162,0,836,838,5,173,0,0,837,836,1,0,0,0,837,838,
  	1,0,0,0,838,840,1,0,0,0,839,831,1,0,0,0,839,840,1,0,0,0,840,841,1,0,0,
  	0,841,857,5,3,0,0,842,843,5,173,0,0,843,845,5,147,0,0,844,846,5,173,0,
  	0,845,844,1,0,0,0,845,846,1,0,0,0,846,847,1,0,0,0,847,849,5,2,0,0,848,
  	850,5,173,0,0,849,848,1,0,0,0,849,850,1,0,0,0,850,851,1,0,0,0,851,853,
  	3,24,12,0,852,854,5,173,0,0,853,852,1,0,0,0,853,854,1,0,0,0,854,855,1,
  	0,0,0,855,856,5,3,0,0,856,858,1,0,0,0,857,842,1,0,0,0,857,858,1,0,0,0,
  	858,47,1,0,0,0,859,860,5,69,0,0,860,861,5,173,0,0,861,862,5,125,0,0,862,
  	863,5,173,0,0,863,864,5,135,0,0,864,865,5,173,0,0,865,866,5,91,0,0,866,
  	870,5,173,0,0,867,868,3,42,21,0,868,869,5,173,0,0,869,871,1,0,0,0,870,
  	867,1,0,0,0,870,871,1,0,0,0,871,872,1,0,0,0,872,874,3,322,161,0,873,875,
  	5,173,0,0,874,873,1,0,0,0,874,875,1,0,0,0,875,876,1,0,0,0,876,878,5,2,
  	0,0,877,879,5,173,0,0,878,877,1,0,0,0,878,879,1,0,0,0,879,880,1,0,0,0,
  	880,889,3,50,25,0,881,883,5,173,0,0,882,881,1,0,0,0,882,883,1,0,0,0,883,
  	884,1,0,0,0,884,886,5,4,0,0,885,887,5,173,0,0,886,885,1,0,0,0,886,887,
  	1,0,0,0,887,888,1,0,0,0,888,890,3,50,25,0,889,882,1,0,0,0,890,891,1,0,
  	0,0,891,889,1,0,0,0,891,892,1,0,0,0,892,894,1,0,0,0,893,895,5,173,0,0,
  	894,893,1,0,0,0,894,895,1,0,0,0,895,904,1,0,0,0,896,898,5,4,0,0,897,899,
  	5,173,0,0,898,897,1,0,0,0,898,899,1,0,0,0,899,900,1,0,0,0,900,902,3,90,
  	45,0,901,903,5,173,0,0,902,901,1,0,0,0,902,903,1,0,0,0,903,905,1,0,0,
  	0,904,896,1,0,0,0,904,905,1,0,0,0,905,914,1,0,0,0,906,908,5,4,0,0,907,
  	909,5,173,0,0,908,907,1,0,0,0,908,909,1,0,0,0,909,910,1,0,0,0,910,912,
  	3,324,162,0,911,913,5,173,0,0,912,911,1,0,0,0,912,913,1,0,0,0,913,915,
  	1,0,0,0,914,906,1,0,0,0,914,915,1,0,0,0,915,916,1,0,0,0,916,917,5,3,0,
  	0,917,49,1,0,0,0,918,919,5,88,0,0,919,920,5,173,0,0,920,921,3,322,161,
  	0,921,922,5,173,0,0,922,923,5,137,0,0,923,924,5,173,0,0,924,925,3,322,
  	161,0,925,51,1,0,0,0,926,927,5,69,0,0,927,928,5,173,0,0,928,929,5,130,
  	0,0,929,933,5,173,0,0,930,931,3,42,21,0,931,932,5,173,0,0,932,934,1,0,
  	0,0,933,930,1,0,0,0,933,934,1,0,0,0,934,935,1,0,0,0,935,940,3,322,161,
  	0,936,937,5,173,0,0,937,939,3,56,28,0,938,936,1,0,0,0,939,942,1,0,0,0,
  	940,938,1,0,0,0,940,941,1,0,0,0,941,53,1,0,0,0,942,940,1,0,0,0,943,944,
  	5,69,0,0,944,945,5,173,0,0,945,946,5,141,0,0,946,947,5,173,0,0,947,948,
  	3,322,161,0,948,949,5,173,0,0,949,950,5,52,0,0,950,951,5,173,0,0,951,
  	953,3,96,48,0,952,954,5,173,0,0,953,952,1,0,0,0,953,954,1,0,0,0,954,55,
  	1,0,0,0,955,961,3,58,29,0,956,961,3,60,30,0,957,961,3,62,31,0,958,961,
  	3,64,32,0,959,961,3,66,33,0,960,955,1,0,0,0,960,956,1,0,0,0,960,957,1,
  	0,0,0,960,958,1,0,0,0,960,959,1,0,0,0,961,57,1,0,0,0,962,963,5,97,0,0,
  	963,966,5,173,0,0,964,965,5,57,0,0,965,967,5,173,0,0,966,964,1,0,0,0,
  	966,967,1,0,0,0,967,969,1,0,0,0,968,970,5,155,0,0,969,968,1,0,0,0,969,
  	970,1,0,0,0,970,971,1,0,0,0,971,972,3,318,159,0,972,59,1,0,0,0,973,974,
  	5,111,0,0,974,975,5,173,0,0,975,983,5,109,0,0,976,977,5,109,0,0,977,979,
  	5,173,0,0,978,980,5,155,0,0,979,978,1,0,0,0,979,980,1,0,0,0,980,981,1,
  	0,0,0,981,983,3,318,159,0,982,973,1,0,0,0,982,976,1,0,0,0,983,61,1,0,
  	0,0,984,985,5,111,0,0,985,986,5,173,0,0,986,994,5,107,0,0,987,988,5,107,
  	0,0,988,990,5,173,0,0,989,991,5,155,0,0,990,989,1,0,0,0,990,991,1,0,0,
  	0,991,992,1,0,0,0,992,994,3,318,159,0,993,984,1,0,0,0,993,987,1,0,0,0,
  	994,63,1,0,0,0,995,996,5,133,0,0,996,999,5,173,0,0,997,998,5,147,0,0,
  	998,1000,5,173,0,0,999,997,1,0,0,0,999,1000,1,0,0,0,1000,1002,1,0,0,0,
  	1001,1003,5,155,0,0,1002,1001,1,0,0,0,1002,1003,1,0,0,0,1003,1004,1,0,
  	0,0,1004,1005,3,318,159,0,1005,65,1,0,0,0,1006,1007,5,111,0,0,1007,1009,
  	5,173,0,0,1008,1006,1,0,0,0,1008,1009,1,0,0,0,1009,1010,1,0,0,0,1010,
  	1011,5,70,0,0,1011,67,1,0,0,0,1012,1013,5,95,0,0,1013,1014,5,173,0,0,
  	1014,1015,5,83,0,0,1015,69,1,0,0,0,1016,1017,5,79,0,0,1017,1018,5,173,
  	0,0,1018,1019,7,0,0,0,1019,1023,5,173,0,0,1020,1021,3,68,34,0,1021,1022,
  	5,173,0,0,1022,1024,1,0,0,0,1023,1020,1,0,0,0,1023,1024,1,0,0,0,1024,
  	1025,1,0,0,0,1025,1026,3,322,161,0,1026,71,1,0,0,0,1027,1028,5,50,0,0,
  	1028,1029,5,173,0,0,1029,1030,5,135,0,0,1030,1031,5,173,0,0,1031,1032,
  	3,322,161,0,1032,1033,5,173,0,0,1033,1034,3,74,37,0,1034,73,1,0,0,0,1035,
  	1040,3,76,38,0,1036,1040,3,80,40,0,1037,1040,3,82,41,0,1038,1040,3,84,
  	42,0,1039,1035,1,0,0,0,1039,1036,1,0,0,0,1039,1037,1,0,0,0,1039,1038,
  	1,0,0,0,1040,75,1,0,0,0,1041,1042,5,48,0,0,1042,1046,5,173,0,0,1043,1044,
  	3,42,21,0,1044,1045,5,173,0,0,1045,1047,1,0,0,0,1046,1043,1,0,0,0,1046,
  	1047,1,0,0,0,1047,1048,1,0,0,0,1048,1049,3,316,158,0,1049,1050,5,173,
  	0,0,1050,1053,3,96,48,0,1051,1052,5,173,0,0,1052,1054,3,78,39,0,1053,
  	1051,1,0,0,0,1053,1054,1,0,0,0,1054,77,1,0,0,0,1055,1056,5,73,0,0,1056,
  	1057,5,173,0,0,1057,1058,3,218,109,0,1058,79,1,0,0,0,1059,1060,5,79,0,
  	0,1060,1064,5,173,0,0,1061,1062,3,68,34,0,1062,1063,5,173,0,0,1063,1065,
  	1,0,0,0,1064,1061,1,0,0,0,1064,1065,1,0,0,0,1065,1066,1,0,0,0,1066,1067,
  	3,316,158,0,1067,81,1,0,0,0,1068,1069,5,126,0,0,1069,1070,5,173,0,0,1070,
  	1071,5,137,0,0,1071,1072,5,173,0,0,1072,1073,3,322,161,0,1073,83,1,0,
  	0,0,1074,1075,5,126,0,0,1075,1076,5,173,0,0,1076,1077,3,316,158,0,1077,
  	1078,5,173,0,0,1078,1079,5,137,0,0,1079,1080,5,173,0,0,1080,1081,3,316,
  	158,0,1081,85,1,0,0,0,1082,1093,3,88,44,0,1083,1085,5,173,0,0,1084,1083,
  	1,0,0,0,1084,1085,1,0,0,0,1085,1086,1,0,0,0,1086,1088,5,4,0,0,1087,1089,
  	5,173,0,0,1088,1087,1,0,0,0,1088,1089,1,0,0,0,1089,1090,1,0,0,0,1090,
  	1092,3,88,44,0,1091,1084,1,0,0,0,1092,1095,1,0,0,0,1093,1091,1,0,0,0,
  	1093,1094,1,0,0,0,1094,87,1,0,0,0,1095,1093,1,0,0,0,1096,1097,3,316,158,
  	0,1097,1098,5,173,0,0,1098,1099,3,96,48,0,1099,89,1,0,0,0,1100,1111,3,
  	92,46,0,1101,1103,5,173,0,0,1102,1101,1,0,0,0,1102,1103,1,0,0,0,1103,
  	1104,1,0,0,0,1104,1106,5,4,0,0,1105,1107,5,173,0,0,1106,1105,1,0,0,0,
  	1106,1107,1,0,0,0,1107,1108,1,0,0,0,1108,1110,3,92,46,0,1109,1102,1,0,
  	0,0,1110,1113,1,0,0,0,1111,1109,1,0,0,0,1111,1112,1,0,0,0,1112,91,1,0,
  	0,0,1113,1111,1,0,0,0,1114,1117,3,88,44,0,1115,1116,5,173,0,0,1116,1118,
  	3,78,39,0,1117,1115,1,0,0,0,1117,1118,1,0,0,0,1118,1123,1,0,0,0,1119,
  	1120,5,173,0,0,1120,1121,5,121,0,0,1121,1122,5,173,0,0,1122,1124,5,101,
  	0,0,1123,1119,1,0,0,0,1123,1124,1,0,0,0,1124,93,1,0,0,0,1125,1126,5,121,
  	0,0,1126,1127,5,173,0,0,1127,1129,5,101,0,0,1128,1130,5,173,0,0,1129,
  	1128,1,0,0,0,1129,1130,1,0,0,0,1130,1131,1,0,0,0,1131,1133,5,2,0,0,1132,
  	1134,5,173,0,0,1133,1132,1,0,0,0,1133,1134,1,0,0,0,1134,1135,1,0,0,0,
  	1135,1137,3,316,158,0,1136,1138,5,173,0,0,1137,1136,1,0,0,0,1137,1138,
  	1,0,0,0,1138,1139,1,0,0,0,1139,1140,5,3,0,0,1140,95,1,0,0,0,1141,1142,
  	6,48,-1,0,1142,1216,3,324,162,0,1143,1145,5,142,0,0,1144,1146,5,173,0,
  	0,1145,1144,1,0,0,0,1145,1146,1,0,0,0,1146,1147,1,0,0,0,1147,1149,5,2,
  	0,0,1148,1150,5,173,0,0,1149,1148,1,0,0,0,1149,1150,1,0,0,0,1150,1151,
  	1,0,0,0,1151,1153,3,86,43,0,1152,1154,5,173,0,0,1153,1152,1,0,0,0,1153,
  	1154,1,0,0,0,1154,1155,1,0,0,0,1155,1156,5,3,0,0,1156,1216,1,0,0,0,1157,
  	1159,3,324,162,0,1158,1160,5,173,0,0,1159,1158,1,0,0,0,1159,1160,1,0,
  	0,0,1160,1161,1,0,0,0,1161,1163,5,2,0,0,1162,1164,5,173,0,0,1163,1162,
  	1,0,0,0,1163,1164,1,0,0,0,1164,1165,1,0,0,0,1165,1167,3,86,43,0,1166,
  	1168,5,173,0,0,1167,1166,1,0,0,0,1167,1168,1,0,0,0,1168,1169,1,0,0,0,
  	1169,1170,5,3,0,0,1170,1216,1,0,0,0,1171,1173,3,324,162,0,1172,1174,5,
  	173,0,0,1173,1172,1,0,0,0,1173,1174,1,0,0,0,1174,1175,1,0,0,0,1175,1177,
  	5,2,0,0,1176,1178,5,173,0,0,1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,
  	1179,1,0,0,0,1179,1181,3,96,48,0,1180,1182,5,173,0,0,1181,1180,1,0,0,
  	0,1181,1182,1,0,0,0,1182,1183,1,0,0,0,1183,1185,5,4,0,0,1184,1186,5,173,
  	0,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1187,1,0,0,0,1187,1189,3,
  	96,48,0,1188,1190,5,173,0,0,1189,1188,1,0,0,0,1189,1190,1,0,0,0,1190,
  	1191,1,0,0,0,1191,1192,5,3,0,0,1192,1216,1,0,0,0,1193,1195,5,151,0,0,
  	1194,1196,5,173,0,0,1195,1194,1,0,0,0,1195,1196,1,0,0,0,1196,1197,1,0,
  	0,0,1197,1199,5,2,0,0,1198,1200,5,173,0,0,1199,1198,1,0,0,0,1199,1200,
  	1,0,0,0,1200,1201,1,0,0,0,1201,1203,3,318,159,0,1202,1204,5,173,0,0,1203,
  	1202,1,0,0,0,1203,1204,1,0,0,0,1204,1205,1,0,0,0,1205,1207,5,4,0,0,1206,
  	1208,5,173,0,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1209,1,0,0,0,
  	1209,1211,3,318,159,0,1210,1212,5,173,0,0,1211,1210,1,0,0,0,1211,1212,
  	1,0,0,0,1212,1213,1,0,0,0,1213,1214,5,3,0,0,1214,1216,1,0,0,0,1215,1141,
  	1,0,0,0,1215,1143,1,0,0,0,1215,1157,1,0,0,0,1215,1171,1,0,0,0,1215,1193,
  	1,0,0,0,1216,1221,1,0,0,0,1217,1218,10,5,0,0,1218,1220,3,98,49,0,1219,
  	1217,1,0,0,0,1220,1223,1,0,0,0,1221,1219,1,0,0,0,1221,1222,1,0,0,0,1222,
  	97,1,0,0,0,1223,1221,1,0,0,0,1224,1228,3,100,50,0,1225,1227,3,100,50,
  	0,1226,1225,1,0,0,0,1227,1230,1,0,0,0,1228,1226,1,0,0,0,1228,1229,1,0,
  	0,0,1229,99,1,0,0,0,1230,1228,1,0,0,0,1231,1233,5,7,0,0,1232,1234,3,318,
  	159,0,1233,1232,1,0,0,0,1233,1234,1,0,0,0,1234,1235,1,0,0,0,1235,1236,
  	5,8,0,0,1236,101,1,0,0,0,1237,1240,3,104,52,0,1238,1240,3,106,53,0,1239,
  	1237,1,0,0,0,1239,1238,1,0,0,0,1240,103,1,0,0,0,1241,1244,5,84,0,0,1242,
  	1243,5,173,0,0,1243,1245,5,104,0,0,1244,1242,1,0,0,0,1244,1245,1,0,0,
  	0,1245,105,1,0,0,0,1246,1247,5,122,0,0,1247,107,1,0,0,0,1248,1249,5,56,
  	0,0,1249,1250,5,173,0,0,1250,1262,5,139,0,0,1251,1252,5,56,0,0,1252,1253,
  	5,173,0,0,1253,1254,5,139,0,0,1254,1255,5,173,0,0,1255,1256,5,124,0,0,
  	1256,1257,5,173,0,0,1257,1262,5,117,0,0,1258,1262,5,64,0,0,1259,1262,
  	5,128,0,0,1260,1262,5,61,0,0,1261,1248,1,0,0,0,1261,1251,1,0,0,0,1261,
  	1258,1,0,0,0,1261,1259,1,0,0,0,1261,1260,1,0,0,0,1262,109,1,0,0,0,1263,
  	1266,3,112,56,0,1264,1266,3,114,57,0,1265,1263,1,0,0,0,1265,1264,1,0,
  	0,0,1266,111,1,0,0,0,1267,1268,5,103,0,0,1268,1269,5,173,0,0,1269,1270,
  	5,86,0,0,1270,1273,5,173,0,0,1271,1274,5,158,0,0,1272,1274,3,308,154,
  	0,1273,1271,1,0,0,0,1273,1272,1,0,0,0,1274,113,1,0,0,0,1275,1276,5,98,
  	0,0,1276,1277,5,173,0,0,1277,1278,3,308,154,0,1278,115,1,0,0,0,1279,1280,
  	3,118,59,0,1280,117,1,0,0,0,1281,1288,3,122,61,0,1282,1284,5,173,0,0,
  	1283,1282,1,0,0,0,1283,1284,1,0,0,0,1284,1285,1,0,0,0,1285,1287,3,120,
  	60,0,1286,1283,1,0,0,0,1287,1290,1,0,0,0,1288,1286,1,0,0,0,1288,1289,
  	1,0,0,0,1289,1303,1,0,0,0,1290,1288,1,0,0,0,1291,1293,3,160,80,0,1292,
  	1294,5,173,0,0,1293,1292,1,0,0,0,1293,1294,1,0,0,0,1294,1296,1,0,0,0,
  	1295,1291,1,0,0,0,1296,1297,1,0,0,0,1297,1295,1,0,0,0,1297,1298,1,0,0,
  	0,1298,1299,1,0,0,0,1299,1300,3,122,61,0,1300,1301,6,59,-1,0,1301,1303,
  	1,0,0,0,1302,1281,1,0,0,0,1302,1295,1,0,0,0,1303,119,1,0,0,0,1304,1305,
  	5,142,0,0,1305,1306,5,173,0,0,1306,1308,5,49,0,0,1307,1309,5,173,0,0,
  	1308,1307,1,0,0,0,1308,1309,1,0,0,0,1309,1310,1,0,0,0,1310,1317,3,122,
  	61,0,1311,1313,5,142,0,0,1312,1314,5,173,0,0,1313,1312,1,0,0,0,1313,1314,
  	1,0,0,0,1314,1315,1,0,0,0,1315,1317,3,122,61,0,1316,1304,1,0,0,0,1316,
  	1311,1,0,0,0,1317,121,1,0,0,0,1318,1321,3,124,62,0,1319,1321,3,126,63,
  	0,1320,1318,1,0,0,0,1320,1319,1,0,0,0,1321,123,1,0,0,0,1322,1324,3,132,
  	66,0,1323,1325,5,173,0,0,1324,1323,1,0,0,0,1324,1325,1,0,0,0,1325,1327,
  	1,0,0,0,1326,1322,1,0,0,0,1327,1330,1,0,0,0,1328,1326,1,0,0,0,1328,1329,
  	1,0,0,0,1329,1331,1,0,0,0,1330,1328,1,0,0,0,1331,1358,3,160,80,0,1332,
  	1334,3,132,66,0,1333,1335,5,173,0,0,1334,1333,1,0,0,0,1334,1335,1,0,0,
  	0,1335,1337,1,0,0,0,1336,1332,1,0,0,0,1337,1340,1,0,0,0,1338,1336,1,0,
  	0,0,1338,1339,1,0,0,0,1339,1341,1,0,0,0,1340,1338,1,0,0,0,1341,1348,3,
  	130,65,0,1342,1344,5,173,0,0,1343,1342,1,0,0,0,1343,1344,1,0,0,0,1344,
  	1345,1,0,0,0,1345,1347,3,130,65,0,1346,1343,1,0,0,0,1347,1350,1,0,0,0,
  	1348,1346,1,0,0,0,1348,1349,1,0,0,0,1349,1355,1,0,0,0,1350,1348,1,0,0,
  	0,1351,1353,5,173,0,0,1352,1351,1,0,0,0,1352,1353,1,0,0,0,1353,1354,1,
  	0,0,0,1354,1356,3,160,80,0,1355,1352,1,0,0,0,1355,1356,1,0,0,0,1356,1358,
  	1,0,0,0,1357,1328,1,0,0,0,1357,1338,1,0,0,0,1358,125,1,0,0,0,1359,1361,
  	3,128,64,0,1360,1362,5,173,0,0,1361,1360,1,0,0,0,1361,1362,1,0,0,0,1362,
  	1364,1,0,0,0,1363,1359,1,0,0,0,1364,1365,1,0,0,0,1365,1363,1,0,0,0,1365,
  	1366,1,0,0,0,1366,1367,1,0,0,0,1367,1368,3,124,62,0,1368,127,1,0,0,0,
  	1369,1371,3,132,66,0,1370,1372,5,173,0,0,1371,1370,1,0,0,0,1371,1372,
  	1,0,0,0,1372,1374,1,0,0,0,1373,1369,1,0,0,0,1374,1377,1,0,0,0,1375,1373,
  	1,0,0,0,1375,1376,1,0,0,0,1376,1384,1,0,0,0,1377,1375,1,0,0,0,1378,1380,
  	3,130,65,0,1379,1381,5,173,0,0,1380,1379,1,0,0,0,1380,1381,1,0,0,0,1381,
  	1383,1,0,0,0,1382,1378,1,0,0,0,1383,1386,1,0,0,0,1384,1382,1,0,0,0,1384,
  	1385,1,0,0,0,1385,1387,1,0,0,0,1386,1384,1,0,0,0,1387,1388,3,158,79,0,
  	1388,129,1,0,0,0,1389,1394,3,146,73,0,1390,1394,3,148,74,0,1391,1394,
  	3,152,76,0,1392,1394,3,156,78,0,1393,1389,1,0,0,0,1393,1390,1,0,0,0,1393,
  	1391,1,0,0,0,1393,1392,1,0,0,0,1394,131,1,0,0,0,1395,1400,3,138,69,0,
  	1396,1400,3,144,72,0,1397,1400,3,136,68,0,1398,1400,3,134,67,0,1399,1395,
  	1,0,0,0,1399,1396,1,0,0,0,1399,1397,1,0,0,0,1399,1398,1,0,0,0,1400,133,
  	1,0,0,0,1401,1419,5,103,0,0,1402,1403,5,173,0,0,1403,1404,5,147,0,0,1404,
  	1405,5,173,0,0,1405,1407,5,92,0,0,1406,1408,5,173,0,0,1407,1406,1,0,0,
  	0,1407,1408,1,0,0,0,1408,1409,1,0,0,0,1409,1411,5,2,0,0,1410,1412,5,173,
  	0,0,1411,1410,1,0,0,0,1411,1412,1,0,0,0,1412,1413,1,0,0,0,1413,1415,3,
  	86,43,0,1414,1416,5,173,0,0,1415,1414,1,0,0,0,1415,1416,1,0,0,0,1416,
  	1417,1,0,0,0,1417,1418,5,3,0,0,1418,1420,1,0,0,0,1419,1402,1,0,0,0,1419,
  	1420,1,0,0,0,1420,1421,1,0,0,0,1421,1422,5,173,0,0,1422,1423,5,88,0,0,
  	1423,1424,5,173,0,0,1424,1438,3,10,5,0,1425,1427,5,173,0,0,1426,1425,
  	1,0,0,0,1426,1427,1,0,0,0,1427,1428,1,0,0,0,1428,1430,5,2,0,0,1429,1431,
  	5,173,0,0,1430,1429,1,0,0,0,1430,1431,1,0,0,0,1431,1432,1,0,0,0,1432,
  	1434,3,24,12,0,1433,1435,5,173,0,0,1434,1433,1,0,0,0,1434,1435,1,0,0,
  	0,1435,1436,1,0,0,0,1436,1437,5,3,0,0,1437,1439,1,0,0,0,1438,1426,1,0,
  	0,0,1438,1439,1,0,0,0,1439,1444,1,0,0,0,1440,1442,5,173,0,0,1441,1440,
  	1,0,0,0,1441,1442,1,0,0,0,1442,1443,1,0,0,0,1443,1445,3,176,88,0,1444,
  	1441,1,0,0,0,1444,1445,1,0,0,0,1445,135,1,0,0,0,1446,1447,5,58,0,0,1447,
  	1448,5,173,0,0,1448,1453,3,286,143,0,1449,1451,5,173,0,0,1450,1449,1,
  	0,0,0,1450,1451,1,0,0,0,1451,1452,1,0,0,0,1452,1454,3,176,88,0,1453,1450,
  	1,0,0,0,1453,1454,1,0,0,0,1454,137,1,0,0,0,1455,1456,5,118,0,0,1456,1458,
  	5,173,0,0,1457,1455,1,0,0,0,1457,1458,1,0,0,0,1458,1459,1,0,0,0,1459,
  	1461,5,106,0,0,1460,1462,5,173,0,0,1461,1460,1,0,0,0,1461,1462,1,0,0,
  	0,1462,1463,1,0,0,0,1463,1466,3,178,89,0,1464,1465,5,173,0,0,1465,1467,
  	3,176,88,0,1466,1464,1,0,0,0,1466,1467,1,0,0,0,1467,1470,1,0,0,0,1468,
  	1469,5,173,0,0,1469,1471,3,140,70,0,1470,1468,1,0,0,0,1470,1471,1,0,0,
  	0,1471,139,1,0,0,0,1472,1473,5,93,0,0,1473,1474,5,173,0,0,1474,1475,3,
  	142,71,0,1475,141,1,0,0,0,1476,1477,6,71,-1,0,1477,1479,5,2,0,0,1478,
  	1480,5,173,0,0,1479,1478,1,0,0,0,1479,1480,1,0,0,0,1480,1481,1,0,0,0,
  	1481,1483,3,142,71,0,1482,1484,5,173,0,0,1483,1482,1,0,0,0,1483,1484,
  	1,0,0,0,1484,1485,1,0,0,0,1485,1486,5,3,0,0,1486,1489,1,0,0,0,1487,1489,
  	3,322,161,0,1488,1476,1,0,0,0,1488,1487,1,0,0,0,1489,1506,1,0,0,0,1490,
  	1491,10,4,0,0,1491,1492,5,173,0,0,1492,1493,5,100,0,0,1493,1494,5,173,
  	0,0,1494,1505,3,142,71,5,1495,1500,10,3,0,0,1496,1497,5,173,0,0,1497,
  	1498,5,110,0,0,1498,1499,5,173,0,0,1499,1501,3,322,161,0,1500,1496,1,
  	0,0,0,1501,1502,1,0,0,0,1502,1500,1,0,0,0,1502,1503,1,0,0,0,1503,1505,
  	1,0,0,0,1504,1490,1,0,0,0,1504,1495,1,0,0,0,1505,1508,1,0,0,0,1506,1504,
  	1,0,0,0,1506,1507,1,0,0,0,1507,143,1,0,0,0,1508,1506,1,0,0,0,1509,1511,
  	5,143,0,0,1510,1512,5,173,0,0,1511,1510,1,0,0,0,1511,1512,1,0,0,0,1512,
  	1513,1,0,0,0,1513,1514,3,218,109,0,1514,1515,5,173,0,0,1515,1516,5,52,
  	0,0,1516,1517,5,173,0,0,1517,1518,3,308,154,0,1518,145,1,0,0,0,1519,1521,
  	5,69,0,0,1520,1522,5,173,0,0,1521,1520,1,0,0,0,1521,1522,1,0,0,0,1522,
  	1523,1,0,0,0,1523,1524,3,178,89,0,1524,147,1,0,0,0,1525,1527,5,108,0,
  	0,1526,1528,5,173,0,0,1527,1526,1,0,0,0,1527,1528,1,0,0,0,1528,1529,1,
  	0,0,0,1529,1534,3,178,89,0,1530,1531,5,173,0,0,1531,1533,3,150,75,0,1532,
  	1530,1,0,0,0,1533,1536,1,0,0,0,1534,1532,1,0,0,0,1534,1535,1,0,0,0,1535,
  	149,1,0,0,0,1536,1534,1,0,0,0,1537,1538,5,116,0,0,1538,1539,5,173,0,0,
  	1539,1540,5,106,0,0,1540,1541,5,173,0,0,1541,1548,3,152,76,0,1542,1543,
  	5,116,0,0,1543,1544,5,173,0,0,1544,1545,5,69,0,0,1545,1546,5,173,0,0,
  	1546,1548,3,152,76,0,1547,1537,1,0,0,0,1547,1542,1,0,0,0,1548,151,1,0,
  	0,0,1549,1551,5,131,0,0,1550,1552,5,173,0,0,1551,1550,1,0,0,0,1551,1552,
  	1,0,0,0,1552,1553,1,0,0,0,1553,1564,3,154,77,0,1554,1556,5,173,0,0,1555,
  	1554,1,0,0,0,1555,1556,1,0,0,0,1556,1557,1,0,0,0,1557,1559,5,4,0,0,1558,
  	1560,5,173,0,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,1560,1561,1,0,0,0,
  	1561,1563,3,154,77,0,1562,1555,1,0,0,0,1563,1566,1,0,0,0,1564,1562,1,
  	0,0,0,1564,1565,1,0,0,0,1565,153,1,0,0,0,1566,1564,1,0,0,0,1567,1569,
  	3,314,157,0,1568,1570,5,173,0,0,1569,1568,1,0,0,0,1569,1570,1,0,0,0,1570,
  	1571,1,0,0,0,1571,1573,5,6,0,0,1572,1574,5,173,0,0,1573,1572,1,0,0,0,
  	1573,1574,1,0,0,0,1574,1575,1,0,0,0,1575,1576,3,218,109,0,1576,155,1,
  	0,0,0,1577,1578,5,77,0,0,1578,1580,5,173,0,0,1579,1577,1,0,0,0,1579,1580,
  	1,0,0,0,1580,1581,1,0,0,0,1581,1583,5,74,0,0,1582,1584,5,173,0,0,1583,
  	1582,1,0,0,0,1583,1584,1,0,0,0,1584,1585,1,0,0,0,1585,1596,3,218,109,
  	0,1586,1588,5,173,0,0,1587,1586,1,0,0,0,1587,1588,1,0,0,0,1588,1589,1,
  	0,0,0,1589,1591,5,4,0,0,1590,1592,5,173,0,0,1591,1590,1,0,0,0,1591,1592,
  	1,0,0,0,1592,1593,1,0,0,0,1593,1595,3,218,109,0,1594,1587,1,0,0,0,1595,
  	1598,1,0,0,0,1596,1594,1,0,0,0,1596,1597,1,0,0,0,1597,157,1,0,0,0,1598,
  	1596,1,0,0,0,1599,1600,5,147,0,0,1600,1605,3,162,81,0,1601,1603,5,173,
  	0,0,1602,1601,1,0,0,0,1602,1603,1,0,0,0,1603,1604,1,0,0,0,1604,1606,3,
  	176,88,0,1605,1602,1,0,0,0,1605,1606,1,0,0,0,1606,159,1,0,0,0,1607,1608,
  	5,127,0,0,1608,1609,3,162,81,0,1609,161,1,0,0,0,1610,1612,5,173,0,0,1611,
  	1610,1,0,0,0,1611,1612,1,0,0,0,1612,1613,1,0,0,0,1613,1615,5,78,0,0,1614,
  	1611,1,0,0,0,1614,1615,1,0,0,0,1615,1616,1,0,0,0,1616,1617,5,173,0,0,
  	1617,1620,3,164,82,0,1618,1619,5,173,0,0,1619,1621,3,168,84,0,1620,1618,
  	1,0,0,0,1620,1621,1,0,0,0,1621,1624,1,0,0,0,1622,1623,5,173,0,0,1623,
  	1625,3,170,85,0,1624,1622,1,0,0,0,1624,1625,1,0,0,0,1625,1628,1,0,0,0,
  	1626,1627,5,173,0,0,1627,1629,3,172,86,0,1628,1626,1,0,0,0,1628,1629,
  	1,0,0,0,1629,163,1,0,0,0,1630,1641,5,152,0,0,1631,1633,5,173,0,0,1632,
  	1631,1,0,0,0,1632,1633,1,0,0,0,1633,1634,1,0,0,0,1634,1636,5,4,0,0,1635,
  	1637,5,173,0,0,1636,1635,1,0,0,0,1636,1637,1,0,0,0,1637,1638,1,0,0,0,
  	1638,1640,3,166,83,0,1639,1632,1,0,0,0,1640,1643,1,0,0,0,1641,1639,1,
  	0,0,0,1641,1642,1,0,0,0,1642,1659,1,0,0,0,1643,1641,1,0,0,0,1644,1655,
  	3,166,83,0,1645,1647,5,173,0,0,1646,1645,1,0,0,0,1646,1647,1,0,0,0,1647,
  	1648,1,0,0,0,1648,1650,5,4,0,0,1649,1651,5,173,0,0,1650,1649,1,0,0,0,
  	1650,1651,1,0,0,0,1651,1652,1,0,0,0,1652,1654,3,166,83,0,1653,1646,1,
  	0,0,0,1654,1657,1,0,0,0,1655,1653,1,0,0,0,1655,1656,1,0,0,0,1656,1659,
  	1,0,0,0,1657,1655,1,0,0,0,1658,1630,1,0,0,0,1658,1644,1,0,0,0,1659,165,
  	1,0,0,0,1660,1661,3,218,109,0,1661,1662,5,173,0,0,1662,1663,5,52,0,0,
  	1663,1664,5,173,0,0,1664,1665,3,308,154,0,1665,1668,1,0,0,0,1666,1668,
  	3,218,109,0,1667,1660,1,0,0,0,1667,1666,1,0,0,0,1668,167,1,0,0,0,1669,
  	1670,5,120,0,0,1670,1671,5,173,0,0,1671,1672,5,57,0,0,1672,1673,5,173,
  	0,0,1673,1681,3,174,87,0,1674,1676,5,4,0,0,1675,1677,5,173,0,0,1676,1675,
  	1,0,0,0,1676,1677,1,0,0,0,1677,1678,1,0,0,0,1678,1680,3,174,87,0,1679,
  	1674,1,0,0,0,1680,1683,1,0,0,0,1681,1679,1,0,0,0,1681,1682,1,0,0,0,1682,
  	169,1,0,0,0,1683,1681,1,0,0,0,1684,1685,5,153,0,0,1685,1686,5,173,0,0,
  	1686,1687,3,218,109,0,1687,171,1,0,0,0,1688,1689,5,102,0,0,1689,1690,
  	5,173,0,0,1690,1691,3,218,109,0,1691,173,1,0,0,0,1692,1697,3,218,109,
  	0,1693,1695,5,173,0,0,1694,1693,1,0,0,0,1694,1695,1,0,0,0,1695,1696,1,
  	0,0,0,1696,1698,7,1,0,0,1697,1694,1,0,0,0,1697,1698,1,0,0,0,1698,175,
  	1,0,0,0,1699,1700,5,146,0,0,1700,1701,5,173,0,0,1701,1702,3,218,109,0,
  	1702,177,1,0,0,0,1703,1714,3,180,90,0,1704,1706,5,173,0,0,1705,1704,1,
  	0,0,0,1705,1706,1,0,0,0,1706,1707,1,0,0,0,1707,1709,5,4,0,0,1708,1710,
  	5,173,0,0,1709,1708,1,0,0,0,1709,1710,1,0,0,0,1710,1711,1,0,0,0,1711,
  	1713,3,180,90,0,1712,1705,1,0,0,0,1713,1716,1,0,0,0,1714,1712,1,0,0,0,
  	1714,1715,1,0,0,0,1715,179,1,0,0,0,1716,1714,1,0,0,0,1717,1719,3,308,
  	154,0,1718,1720,5,173,0,0,1719,1718,1,0,0,0,1719,1720,1,0,0,0,1720,1721,
  	1,0,0,0,1721,1723,5,6,0,0,1722,1724,5,173,0,0,1723,1722,1,0,0,0,1723,
  	1724,1,0,0,0,1724,1725,1,0,0,0,1725,1726,3,182,91,0,1726,1729,1,0,0,0,
  	1727,1729,3,182,91,0,1728,1717,1,0,0,0,1728,1727,1,0,0,0,1729,181,1,0,
  	0,0,1730,1731,3,184,92,0,1731,183,1,0,0,0,1732,1739,3,186,93,0,1733,1735,
  	5,173,0,0,1734,1733,1,0,0,0,1734,1735,1,0,0,0,1735,1736,1,0,0,0,1736,
  	1738,3,188,94,0,1737,1734,1,0,0,0,1738,1741,1,0,0,0,1739,1737,1,0,0,0,
  	1739,1740,1,0,0,0,1740,1747,1,0,0,0,1741,1739,1,0,0,0,1742,1743,5,2,0,
  	0,1743,1744,3,184,92,0,1744,1745,5,3,0,0,1745,1747,1,0,0,0,1746,1732,
  	1,0,0,0,1746,1742,1,0,0,0,1747,185,1,0,0,0,1748,1750,5,2,0,0,1749,1751,
  	5,173,0,0,1750,1749,1,0,0,0,1750,1751,1,0,0,0,1751,1756,1,0,0,0,1752,
  	1754,3,308,154,0,1753,1755,5,173,0,0,1754,1753,1,0,0,0,1754,1755,1,0,
  	0,0,1755,1757,1,0,0,0,1756,1752,1,0,0,0,1756,1757,1,0,0,0,1757,1762,1,
  	0,0,0,1758,1760,3,198,99,0,1759,1761,5,173,0,0,1760,1759,1,0,0,0,1760,
  	1761,1,0,0,0,1761,1763,1,0,0,0,1762,1758,1,0,0,0,1762,1763,1,0,0,0,1763,
  	1768,1,0,0,0,1764,1766,3,194,97,0,1765,1767,5,173,0,0,1766,1765,1,0,0,
  	0,1766,1767,1,0,0,0,1767,1769,1,0,0,0,1768,1764,1,0,0,0,1768,1769,1,0,
  	0,0,1769,1770,1,0,0,0,1770,1771,5,3,0,0,1771,187,1,0,0,0,1772,1774,3,
  	190,95,0,1773,1775,5,173,0,0,1774,1773,1,0,0,0,1774,1775,1,0,0,0,1775,
  	1776,1,0,0,0,1776,1777,3,186,93,0,1777,189,1,0,0,0,1778,1780,3,328,164,
  	0,1779,1781,5,173,0,0,1780,1779,1,0,0,0,1780,1781,1,0,0,0,1781,1782,1,
  	0,0,0,1782,1784,3,332,166,0,1783,1785,5,173,0,0,1784,1783,1,0,0,0,1784,
  	1785,1,0,0,0,1785,1787,1,0,0,0,1786,1788,3,192,96,0,1787,1786,1,0,0,0,
  	1787,1788,1,0,0,0,1788,1790,1,0,0,0,1789,1791,5,173,0,0,1790,1789,1,0,
  	0,0,1790,1791,1,0,0,0,1791,1792,1,0,0,0,1792,1793,3,332,166,0,1793,1823,
  	1,0,0,0,1794,1796,3,332,166,0,1795,1797,5,173,0,0,1796,1795,1,0,0,0,1796,
  	1797,1,0,0,0,1797,1799,1,0,0,0,1798,1800,3,192,96,0,1799,1798,1,0,0,0,
  	1799,1800,1,0,0,0,1800,1802,1,0,0,0,1801,1803,5,173,0,0,1802,1801,1,0,
  	0,0,1802,1803,1,0,0,0,1803,1804,1,0,0,0,1804,1806,3,332,166,0,1805,1807,
  	5,173,0,0,1806,1805,1,0,0,0,1806,1807,1,0,0,0,1807,1808,1,0,0,0,1808,
  	1809,3,330,165,0,1809,1823,1,0,0,0,1810,1812,3,332,166,0,1811,1813,5,
  	173,0,0,1812,1811,1,0,0,0,1812,1813,1,0,0,0,1813,1815,1,0,0,0,1814,1816,
  	3,192,96,0,1815,1814,1,0,0,0,1815,1816,1,0,0,0,1816,1818,1,0,0,0,1817,
  	1819,5,173,0,0,1818,1817,1,0,0,0,1818,1819,1,0,0,0,1819,1820,1,0,0,0,
  	1820,1821,3,332,166,0,1821,1823,1,0,0,0,1822,1778,1,0,0,0,1822,1794,1,
  	0,0,0,1822,1810,1,0,0,0,1823,191,1,0,0,0,1824,1826,5,7,0,0,1825,1827,
  	5,173,0,0,1826,1825,1,0,0,0,1826,1827,1,0,0,0,1827,1832,1,0,0,0,1828,
  	1830,3,308,154,0,1829,1831,5,173,0,0,1830,1829,1,0,0,0,1830,1831,1,0,
  	0,0,1831,1833,1,0,0,0,1832,1828,1,0,0,0,1832,1833,1,0,0,0,1833,1838,1,
  	0,0,0,1834,1836,3,196,98,0,1835,1837,5,173,0,0,1836,1835,1,0,0,0,1836,
  	1837,1,0,0,0,1837,1839,1,0,0,0,1838,1834,1,0,0,0,1838,1839,1,0,0,0,1839,
  	1844,1,0,0,0,1840,1842,3,202,101,0,1841,1843,5,173,0,0,1842,1841,1,0,
  	0,0,1842,1843,1,0,0,0,1843,1845,1,0,0,0,1844,1840,1,0,0,0,1844,1845,1,
  	0,0,0,1845,1850,1,0,0,0,1846,1848,3,194,97,0,1847,1849,5,173,0,0,1848,
  	1847,1,0,0,0,1848,1849,1,0,0,0,1849,1851,1,0,0,0,1850,1846,1,0,0,0,1850,
  	1851,1,0,0,0,1851,1852,1,0,0,0,1852,1853,5,8,0,0,1853,193,1,0,0,0,1854,
  	1856,5,9,0,0,1855,1857,5,173,0,0,1856,1855,1,0,0,0,1856,1857,1,0,0,0,
  	1857,1891,1,0,0,0,1858,1860,3,316,158,0,1859,1861,5,173,0,0,1860,1859,
  	1,0,0,0,1860,1861,1,0,0,0,1861,1862,1,0,0,0,1862,1864,5,157,0,0,1863,
  	1865,5,173,0,0,1864,1863,1,0,0,0,1864,1865,1,0,0,0,1865,1866,1,0,0,0,
  	1866,1868,3,218,109,0,1867,1869,5,173,0,0,1868,1867,1,0,0,0,1868,1869,
  	1,0,0,0,1869,1888,1,0,0,0,1870,1872,5,4,0,0,1871,1873,5,173,0,0,1872,
  	1871,1,0,0,0,1872,1873,1,0,0,0,1873,1874,1,0,0,0,1874,1876,3,316,158,
  	0,1875,1877,5,173,0,0,1876,1875,1,0,0,0,1876,1877,1,0,0,0,1877,1878,1,
  	0,0,0,1878,1880,5,157,0,0,1879,1881,5,173,0,0,1880,1879,1,0,0,0,1880,
  	1881,1,0,0,0,1881,1882,1,0,0,0,1882,1884,3,218,109,0,1883,1885,5,173,
  	0,0,1884,1883,1,0,0,0,1884,1885,1,0,0,0,1885,1887,1,0,0,0,1886,1870,1,
  	0,0,0,1887,1890,1,0,0,0,1888,1886,1,0,0,0,1888,1889,1,0,0,0,1889,1892,
  	1,0,0,0,1890,1888,1,0,0,0,1891,1858,1,0,0,0,1891,1892,1,0,0,0,1892,1893,
  	1,0,0,0,1893,1894,5,10,0,0,1894,195,1,0,0,0,1895,1897,5,157,0,0,1896,
  	1898,5,173,0,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,0,
  	1899,1913,3,216,108,0,1900,1902,5,173,0,0,1901,1900,1,0,0,0,1901,1902,
  	1,0,0,0,1902,1903,1,0,0,0,1903,1905,5,11,0,0,1904,1906,5,157,0,0,1905,
  	1904,1,0,0,0,1905,1906,1,0,0,0,1906,1908,1,0,0,0,1907,1909,5,173,0,0,
  	1908,1907,1,0,0,0,1908,1909,1,0,0,0,1909,1910,1,0,0,0,1910,1912,3,216,
  	108,0,1911,1901,1,0,0,0,1912,1915,1,0,0,0,1913,1911,1,0,0,0,1913,1914,
  	1,0,0,0,1914,197,1,0,0,0,1915,1913,1,0,0,0,1916,1923,3,200,100,0,1917,
  	1919,5,173,0,0,1918,1917,1,0,0,0,1918,1919,1,0,0,0,1919,1920,1,0,0,0,
  	1920,1922,3,200,100,0,1921,1918,1,0,0,0,1922,1925,1,0,0,0,1923,1921,1,
  	0,0,0,1923,1924,1,0,0,0,1924,199,1,0,0,0,1925,1923,1,0,0,0,1926,1928,
  	5,157,0,0,1927,1929,5,173,0,0,1928,1927,1,0,0,0,1928,1929,1,0,0,0,1929,
  	1930,1,0,0,0,1930,1931,3,214,107,0,1931,201,1,0,0,0,1932,1934,5,152,0,
  	0,1933,1935,5,173,0,0,1934,1933,1,0,0,0,1934,1935,1,0,0,0,1935,1942,1,
  	0,0,0,1936,1943,5,132,0,0,1937,1938,5,49,0,0,1938,1939,5,173,0,0,1939,
  	1943,5,132,0,0,1940,1943,5,138,0,0,1941,1943,5,46,0,0,1942,1936,1,0,0,
  	0,1942,1937,1,0,0,0,1942,1940,1,0,0,0,1942,1941,1,0,0,0,1942,1943,1,0,
  	0,0,1943,1945,1,0,0,0,1944,1946,5,173,0,0,1945,1944,1,0,0,0,1945,1946,
  	1,0,0,0,1946,1961,1,0,0,0,1947,1949,3,210,105,0,1948,1947,1,0,0,0,1948,
  	1949,1,0,0,0,1949,1951,1,0,0,0,1950,1952,5,173,0,0,1951,1950,1,0,0,0,
  	1951,1952,1,0,0,0,1952,1953,1,0,0,0,1953,1955,5,12,0,0,1954,1956,5,173,
  	0,0,1955,1954,1,0,0,0,1955,1956,1,0,0,0,1956,1958,1,0,0,0,1957,1959,3,
  	212,106,0,1958,1957,1,0,0,0,1958,1959,1,0,0,0,1959,1962,1,0,0,0,1960,
  	1962,3,318,159,0,1961,1948,1,0,0,0,1961,1960,1,0,0,0,1961,1962,1,0,0,
  	0,1962,1967,1,0,0,0,1963,1965,5,173,0,0,1964,1963,1,0,0,0,1964,1965,1,
  	0,0,0,1965,1966,1,0,0,0,1966,1968,3,204,102,0,1967,1964,1,0,0,0,1967,
  	1968,1,0,0,0,1968,203,1,0,0,0,1969,1971,5,2,0,0,1970,1972,5,173,0,0,1971,
  	1970,1,0,0,0,1971,1972,1,0,0,0,1972,1973,1,0,0,0,1973,1975,3,308,154,
  	0,1974,1976,5,173,0,0,1975,1974,1,0,0,0,1975,1976,1,0,0,0,1976,1977,1,
  	0,0,0,1977,1979,5,4,0,0,1978,1980,5,173,0,0,1979,1978,1,0,0,0,1979,1980,
  	1,0,0,0,1980,1981,1,0,0,0,1981,1993,3,308,154,0,1982,1984,5,173,0,0,1983,
  	1982,1,0,0,0,1983,1984,1,0,0,0,1984,1985,1,0,0,0,1985,1987,5,11,0,0,1986,
  	1988,5,173,0,0,1987,1986,1,0,0,0,1987,1988,1,0,0,0,1988,1989,1,0,0,0,
  	1989,1991,3,176,88,0,1990,1992,5,173,0,0,1991,1990,1,0,0,0,1991,1992,
  	1,0,0,0,1992,1994,1,0,0,0,1993,1983,1,0,0,0,1993,1994,1,0,0,0,1994,2014,
  	1,0,0,0,1995,1997,5,173,0,0,1996,1995,1,0,0,0,1996,1997,1,0,0,0,1997,
  	1998,1,0,0,0,1998,2000,5,11,0,0,1999,2001,5,173,0,0,2000,1999,1,0,0,0,
  	2000,2001,1,0,0,0,2001,2002,1,0,0,0,2002,2004,3,208,104,0,2003,2005,5,
  	173,0,0,2004,2003,1,0,0,0,2004,2005,1,0,0,0,2005,2006,1,0,0,0,2006,2008,
  	5,4,0,0,2007,2009,5,173,0,0,2008,2007,1,0,0,0,2008,2009,1,0,0,0,2009,
  	2010,1,0,0,0,2010,2012,3,206,103,0,2011,2013,5,173,0,0,2012,2011,1,0,
  	0,0,2012,2013,1,0,0,0,2013,2015,1,0,0,0,2014,1996,1,0,0,0,2014,2015,1,
  	0,0,0,2015,2016,1,0,0,0,2016,2017,5,3,0,0,2017,205,1,0,0,0,2018,2020,
  	5,9,0,0,2019,2021,5,173,0,0,2020,2019,1,0,0,0,2020,2021,1,0,0,0,2021,
  	2023,1,0,0,0,2022,2024,3,164,82,0,2023,2022,1,0,0,0,2023,2024,1,0,0,0,
  	2024,2026,1,0,0,0,2025,2027,5,173,0,0,2026,2025,1,0,0,0,2026,2027,1,0,
  	0,0,2027,2028,1,0,0,0,2028,2029,5,10,0,0,2029,207,1,0,0,0,2030,2032,5,
  	9,0,0,2031,2033,5,173,0,0,2032,2031,1,0,0,0,2032,2033,1,0,0,0,2033,2035,
  	1,0,0,0,2034,2036,3,164,82,0,2035,2034,1,0,0,0,2035,2036,1,0,0,0,2036,
  	2038,1,0,0,0,2037,2039,5,173,0,0,2038,2037,1,0,0,0,2038,2039,1,0,0,0,
  	2039,2040,1,0,0,0,2040,2041,5,10,0,0,2041,209,1,0,0,0,2042,2043,5,160,
  	0,0,2043,211,1,0,0,0,2044,2045,5,160,0,0,2045,213,1,0,0,0,2046,2047,3,
  	322,161,0,2047,215,1,0,0,0,2048,2049,3,322,161,0,2049,217,1,0,0,0,2050,
  	2051,3,220,110,0,2051,219,1,0,0,0,2052,2059,3,222,111,0,2053,2054,5,173,
  	0,0,2054,2055,5,119,0,0,2055,2056,5,173,0,0,2056,2058,3,222,111,0,2057,
  	2053,1,0,0,0,2058,2061,1,0,0,0,2059,2057,1,0,0,0,2059,2060,1,0,0,0,2060,
  	221,1,0,0,0,2061,2059,1,0,0,0,2062,2069,3,224,112,0,2063,2064,5,173,0,
  	0,2064,2065,5,149,0,0,2065,2066,5,173,0,0,2066,2068,3,224,112,0,2067,
  	2063,1,0,0,0,2068,2071,1,0,0,0,2069,2067,1,0,0,0,2069,2070,1,0,0,0,2070,
  	223,1,0,0,0,2071,2069,1,0,0,0,2072,2079,3,226,113,0,2073,2074,5,173,0,
  	0,2074,2075,5,51,0,0,2075,2076,5,173,0,0,2076,2078,3,226,113,0,2077,2073,
  	1,0,0,0,2078,2081,1,0,0,0,2079,2077,1,0,0,0,2079,2080,1,0,0,0,2080,225,
  	1,0,0,0,2081,2079,1,0,0,0,2082,2084,5,113,0,0,2083,2085,5,173,0,0,2084,
  	2083,1,0,0,0,2084,2085,1,0,0,0,2085,2087,1,0,0,0,2086,2082,1,0,0,0,2087,
  	2090,1,0,0,0,2088,2086,1,0,0,0,2088,2089,1,0,0,0,2089,2091,1,0,0,0,2090,
  	2088,1,0,0,0,2091,2092,3,228,114,0,2092,227,1,0,0,0,2093,2103,3,232,116,
  	0,2094,2096,5,173,0,0,2095,2094,1,0,0,0,2095,2096,1,0,0,0,2096,2097,1,
  	0,0,0,2097,2099,3,230,115,0,2098,2100,5,173,0,0,2099,2098,1,0,0,0,2099,
  	2100,1,0,0,0,2100,2101,1,0,0,0,2101,2102,3,232,116,0,2102,2104,1,0,0,
  	0,2103,2095,1,0,0,0,2103,2104,1,0,0,0,2104,2142,1,0,0,0,2105,2107,3,232,
  	116,0,2106,2108,5,173,0,0,2107,2106,1,0,0,0,2107,2108,1,0,0,0,2108,2109,
  	1,0,0,0,2109,2111,5,154,0,0,2110,2112,5,173,0,0,2111,2110,1,0,0,0,2111,
  	2112,1,0,0,0,2112,2113,1,0,0,0,2113,2114,3,232,116,0,2114,2115,1,0,0,
  	0,2115,2116,6,114,-1,0,2116,2142,1,0,0,0,2117,2119,3,232,116,0,2118,2120,
  	5,173,0,0,2119,2118,1,0,0,0,2119,2120,1,0,0,0,2120,2121,1,0,0,0,2121,
  	2123,3,230,115,0,2122,2124,5,173,0,0,2123,2122,1,0,0,0,2123,2124,1,0,
  	0,0,2124,2125,1,0,0,0,2125,2135,3,232,116,0,2126,2128,5,173,0,0,2127,
  	2126,1,0,0,0,2127,2128,1,0,0,0,2128,2129,1,0,0,0,2129,2131,3,230,115,
  	0,2130,2132,5,173,0,0,2131,2130,1,0,0,0,2131,2132,1,0,0,0,2132,2133,1,
  	0,0,0,2133,2134,3,232,116,0,2134,2136,1,0,0,0,2135,2127,1,0,0,0,2136,
  	2137,1,0,0,0,2137,2135,1,0,0,0,2137,2138,1,0,0,0,2138,2139,1,0,0,0,2139,
  	2140,6,114,-1,0,2140,2142,1,0,0,0,2141,2093,1,0,0,0,2141,2105,1,0,0,0,
  	2141,2117,1,0,0,0,2142,229,1,0,0,0,2143,2144,7,2,0,0,2144,231,1,0,0,0,
  	2145,2156,3,234,117,0,2146,2148,5,173,0,0,2147,2146,1,0,0,0,2147,2148,
  	1,0,0,0,2148,2149,1,0,0,0,2149,2151,5,11,0,0,2150,2152,5,173,0,0,2151,
  	2150,1,0,0,0,2151,2152,1,0,0,0,2152,2153,1,0,0,0,2153,2155,3,234,117,
  	0,2154,2147,1,0,0,0,2155,2158,1,0,0,0,2156,2154,1,0,0,0,2156,2157,1,0,
  	0,0,2157,233,1,0,0,0,2158,2156,1,0,0,0,2159,2170,3,236,118,0,2160,2162,
  	5,173,0,0,2161,2160,1,0,0,0,2161,2162,1,0,0,0,2162,2163,1,0,0,0,2163,
  	2165,5,18,0,0,2164,2166,5,173,0,0,2165,2164,1,0,0,0,2165,2166,1,0,0,0,
  	2166,2167,1,0,0,0,2167,2169,3,236,118,0,2168,2161,1,0,0,0,2169,2172,1,
  	0,0,0,2170,2168,1,0,0,0,2170,2171,1,0,0,0,2171,235,1,0,0,0,2172,2170,
  	1,0,0,0,2173,2185,3,240,120,0,2174,2176,5,173,0,0,2175,2174,1,0,0,0,2175,
  	2176,1,0,0,0,2176,2177,1,0,0,0,2177,2179,3,238,119,0,2178,2180,5,173,
  	0,0,2179,2178,1,0,0,0,2179,2180,1,0,0,0,2180,2181,1,0,0,0,2181,2182,3,
  	240,120,0,2182,2184,1,0,0,0,2183,2175,1,0,0,0,2184,2187,1,0,0,0,2185,
  	2183,1,0,0,0,2185,2186,1,0,0,0,2186,237,1,0,0,0,2187,2185,1,0,0,0,2188,
  	2189,7,3,0,0,2189,239,1,0,0,0,2190,2202,3,244,122,0,2191,2193,5,173,0,
  	0,2192,2191,1,0,0,0,2192,2193,1,0,0,0,2193,2194,1,0,0,0,2194,2196,3,242,
  	121,0,2195,2197,5,173,0,0,2196,2195,1,0,0,0,2196,2197,1,0,0,0,2197,2198,
  	1,0,0,0,2198,2199,3,244,122,0,2199,2201,1,0,0,0,2200,2192,1,0,0,0,2201,
  	2204,1,0,0,0,2202,2200,1,0,0,0,2202,2203,1,0,0,0,2203,241,1,0,0,0,2204,
  	2202,1,0,0,0,2205,2206,7,4,0,0,2206,243,1,0,0,0,2207,2219,3,248,124,0,
  	2208,2210,5,173,0,0,2209,2208,1,0,0,0,2209,2210,1,0,0,0,2210,2211,1,0,
  	0,0,2211,2213,3,246,123,0,2212,2214,5,173,0,0,2213,2212,1,0,0,0,2213,
  	2214,1,0,0,0,2214,2215,1,0,0,0,2215,2216,3,248,124,0,2216,2218,1,0,0,
  	0,2217,2209,1,0,0,0,2218,2221,1,0,0,0,2219,2217,1,0,0,0,2219,2220,1,0,
  	0,0,2220,245,1,0,0,0,2221,2219,1,0,0,0,2222,2223,7,5,0,0,2223,247,1,0,
  	0,0,2224,2235,3,250,125,0,2225,2227,5,173,0,0,2226,2225,1,0,0,0,2226,
  	2227,1,0,0,0,2227,2228,1,0,0,0,2228,2230,5,24,0,0,2229,2231,5,173,0,0,
  	2230,2229,1,0,0,0,2230,2231,1,0,0,0,2231,2232,1,0,0,0,2232,2234,3,250,
  	125,0,2233,2226,1,0,0,0,2234,2237,1,0,0,0,2235,2233,1,0,0,0,2235,2236,
  	1,0,0,0,2236,249,1,0,0,0,2237,2235,1,0,0,0,2238,2240,5,155,0,0,2239,2241,
  	5,173,0,0,2240,2239,1,0,0,0,2240,2241,1,0,0,0,2241,2243,1,0,0,0,2242,
  	2238,1,0,0,0,2243,2246,1,0,0,0,2244,2242,1,0,0,0,2244,2245,1,0,0,0,2245,
  	2247,1,0,0,0,2246,2244,1,0,0,0,2247,2252,3,252,126,0,2248,2250,5,173,
  	0,0,2249,2248,1,0,0,0,2249,2250,1,0,0,0,2250,2251,1,0,0,0,2251,2253,5,
  	156,0,0,2252,2249,1,0,0,0,2252,2253,1,0,0,0,2253,251,1,0,0,0,2254,2262,
  	3,262,131,0,2255,2263,3,256,128,0,2256,2258,3,254,127,0,2257,2256,1,0,
  	0,0,2258,2259,1,0,0,0,2259,2257,1,0,0,0,2259,2260,1,0,0,0,2260,2263,1,
  	0,0,0,2261,2263,3,260,130,0,2262,2255,1,0,0,0,2262,2257,1,0,0,0,2262,
  	2261,1,0,0,0,2262,2263,1,0,0,0,2263,253,1,0,0,0,2264,2265,5,173,0,0,2265,
  	2267,5,96,0,0,2266,2268,5,173,0,0,2267,2266,1,0,0,0,2267,2268,1,0,0,0,
  	2268,2269,1,0,0,0,2269,2284,3,262,131,0,2270,2271,5,7,0,0,2271,2272,3,
  	218,109,0,2272,2273,5,8,0,0,2273,2284,1,0,0,0,2274,2276,5,7,0,0,2275,
  	2277,3,218,109,0,2276,2275,1,0,0,0,2276,2277,1,0,0,0,2277,2278,1,0,0,
  	0,2278,2280,5,157,0,0,2279,2281,3,218,109,0,2280,2279,1,0,0,0,2280,2281,
  	1,0,0,0,2281,2282,1,0,0,0,2282,2284,5,8,0,0,2283,2264,1,0,0,0,2283,2270,
  	1,0,0,0,2283,2274,1,0,0,0,2284,255,1,0,0,0,2285,2297,3,258,129,0,2286,
  	2287,5,173,0,0,2287,2288,5,134,0,0,2288,2289,5,173,0,0,2289,2297,5,147,
  	0,0,2290,2291,5,173,0,0,2291,2292,5,82,0,0,2292,2293,5,173,0,0,2293,2297,
  	5,147,0,0,2294,2295,5,173,0,0,2295,2297,5,66,0,0,2296,2285,1,0,0,0,2296,
  	2286,1,0,0,0,2296,2290,1,0,0,0,2296,2294,1,0,0,0,2297,2299,1,0,0,0,2298,
  	2300,5,173,0,0,2299,2298,1,0,0,0,2299,2300,1,0,0,0,2300,2301,1,0,0,0,
  	2301,2302,3,262,131,0,2302,257,1,0,0,0,2303,2305,5,173,0,0,2304,2303,
  	1,0,0,0,2304,2305,1,0,0,0,2305,2306,1,0,0,0,2306,2307,5,25,0,0,2307,259,
  	1,0,0,0,2308,2309,5,173,0,0,2309,2310,5,99,0,0,2310,2311,5,173,0,0,2311,
  	2319,5,115,0,0,2312,2313,5,173,0,0,2313,2314,5,99,0,0,2314,2315,5,173,
  	0,0,2315,2316,5,113,0,0,2316,2317,5,173,0,0,2317,2319,5,115,0,0,2318,
  	2308,1,0,0,0,2318,2312,1,0,0,0,2319,261,1,0,0,0,2320,2327,3,264,132,0,
  	2321,2323,5,173,0,0,2322,2321,1,0,0,0,2322,2323,1,0,0,0,2323,2324,1,0,
  	0,0,2324,2326,3,302,151,0,2325,2322,1,0,0,0,2326,2329,1,0,0,0,2327,2325,
  	1,0,0,0,2327,2328,1,0,0,0,2328,263,1,0,0,0,2329,2327,1,0,0,0,2330,2341,
  	3,272,136,0,2331,2341,3,312,156,0,2332,2341,3,304,152,0,2333,2341,3,284,
  	142,0,2334,2341,3,286,143,0,2335,2341,3,296,148,0,2336,2341,3,298,149,
  	0,2337,2341,3,300,150,0,2338,2341,3,308,154,0,2339,2341,3,266,133,0,2340,
  	2330,1,0,0,0,2340,2331,1,0,0,0,2340,2332,1,0,0,0,2340,2333,1,0,0,0,2340,
  	2334,1,0,0,0,2340,2335,1,0,0,0,2340,2336,1,0,0,0,2340,2337,1,0,0,0,2340,
  	2338,1,0,0,0,2340,2339,1,0,0,0,2341,265,1,0,0,0,2342,2344,5,49,0,0,2343,
  	2345,5,173,0,0,2344,2343,1,0,0,0,2344,2345,1,0,0,0,2345,2346,1,0,0,0,
  	2346,2348,5,2,0,0,2347,2349,5,173,0,0,2348,2347,1,0,0,0,2348,2349,1,0,
  	0,0,2349,2350,1,0,0,0,2350,2352,3,268,134,0,2351,2353,5,173,0,0,2352,
  	2351,1,0,0,0,2352,2353,1,0,0,0,2353,2354,1,0,0,0,2354,2355,5,3,0,0,2355,
  	2399,1,0,0,0,2356,2358,5,47,0,0,2357,2359,5,173,0,0,2358,2357,1,0,0,0,
  	2358,2359,1,0,0,0,2359,2360,1,0,0,0,2360,2362,5,2,0,0,2361,2363,5,173,
  	0,0,2362,2361,1,0,0,0,2362,2363,1,0,0,0,2363,2364,1,0,0,0,2364,2366,3,
  	268,134,0,2365,2367,5,173,0,0,2366,2365,1,0,0,0,2366,2367,1,0,0,0,2367,
  	2368,1,0,0,0,2368,2369,5,3,0,0,2369,2399,1,0,0,0,2370,2372,5,114,0,0,
  	2371,2373,5,173,0,0,2372,2371,1,0,0,0,2372,2373,1,0,0,0,2373,2374,1,0,
  	0,0,2374,2376,5,2,0,0,2375,2377,5,173,0,0,2376,2375,1,0,0,0,2376,2377,
  	1,0,0,0,2377,2378,1,0,0,0,2378,2380,3,268,134,0,2379,2381,5,173,0,0,2380,
  	2379,1,0,0,0,2380,2381,1,0,0,0,2381,2382,1,0,0,0,2382,2383,5,3,0,0,2383,
  	2399,1,0,0,0,2384,2386,5,150,0,0,2385,2387,5,173,0,0,2386,2385,1,0,0,
  	0,2386,2387,1,0,0,0,2387,2388,1,0,0,0,2388,2390,5,2,0,0,2389,2391,5,173,
  	0,0,2390,2389,1,0,0,0,2390,2391,1,0,0,0,2391,2392,1,0,0,0,2392,2394,3,
  	268,134,0,2393,2395,5,173,0,0,2394,2393,1,0,0,0,2394,2395,1,0,0,0,2395,
  	2396,1,0,0,0,2396,2397,5,3,0,0,2397,2399,1,0,0,0,2398,2342,1,0,0,0,2398,
  	2356,1,0,0,0,2398,2370,1,0,0,0,2398,2384,1,0,0,0,2399,267,1,0,0,0,2400,
  	2405,3,270,135,0,2401,2403,5,173,0,0,2402,2401,1,0,0,0,2402,2403,1,0,
  	0,0,2403,2404,1,0,0,0,2404,2406,3,176,88,0,2405,2402,1,0,0,0,2405,2406,
  	1,0,0,0,2406,269,1,0,0,0,2407,2408,3,308,154,0,2408,2409,5,173,0,0,2409,
  	2410,5,96,0,0,2410,2411,5,173,0,0,2411,2412,3,218,109,0,2412,271,1,0,
  	0,0,2413,2420,3,310,155,0,2414,2420,5,158,0,0,2415,2420,3,274,137,0,2416,
  	2420,5,115,0,0,2417,2420,3,276,138,0,2418,2420,3,280,140,0,2419,2413,
  	1,0,0,0,2419,2414,1,0,0,0,2419,2415,1,0,0,0,2419,2416,1,0,0,0,2419,2417,
  	1,0,0,0,2419,2418,1,0,0,0,2420,273,1,0,0,0,2421,2422,7,6,0,0,2422,275,
  	1,0,0,0,2423,2425,5,7,0,0,2424,2426,5,173,0,0,2425,2424,1,0,0,0,2425,
  	2426,1,0,0,0,2426,2440,1,0,0,0,2427,2429,3,218,109,0,2428,2430,5,173,
  	0,0,2429,2428,1,0,0,0,2429,2430,1,0,0,0,2430,2437,1,0,0,0,2431,2433,3,
  	278,139,0,2432,2434,5,173,0,0,2433,2432,1,0,0,0,2433,2434,1,0,0,0,2434,
  	2436,1,0,0,0,2435,2431,1,0,0,0,2436,2439,1,0,0,0,2437,2435,1,0,0,0,2437,
  	2438,1,0,0,0,2438,2441,1,0,0,0,2439,2437,1,0,0,0,2440,2427,1,0,0,0,2440,
  	2441,1,0,0,0,2441,2442,1,0,0,0,2442,2443,5,8,0,0,2443,277,1,0,0,0,2444,
  	2446,5,4,0,0,2445,2447,5,173,0,0,2446,2445,1,0,0,0,2446,2447,1,0,0,0,
  	2447,2449,1,0,0,0,2448,2450,3,218,109,0,2449,2448,1,0,0,0,2449,2450,1,
  	0,0,0,2450,279,1,0,0,0,2451,2453,5,9,0,0,2452,2454,5,173,0,0,2453,2452,
  	1,0,0,0,2453,2454,1,0,0,0,2454,2455,1,0,0,0,2455,2457,3,282,141,0,2456,
  	2458,5,173,0,0,2457,2456,1,0,0,0,2457,2458,1,0,0,0,2458,2469,1,0,0,0,
  	2459,2461,5,4,0,0,2460,2462,5,173,0,0,2461,2460,1,0,0,0,2461,2462,1,0,
  	0,0,2462,2463,1,0,0,0,2463,2465,3,282,141,0,2464,2466,5,173,0,0,2465,
  	2464,1,0,0,0,2465,2466,1,0,0,0,2466,2468,1,0,0,0,2467,2459,1,0,0,0,2468,
  	2471,1,0,0,0,2469,2467,1,0,0,0,2469,2470,1,0,0,0,2470,2472,1,0,0,0,2471,
  	2469,1,0,0,0,2472,2473,5,10,0,0,2473,281,1,0,0,0,2474,2477,3,324,162,
  	0,2475,2477,5,158,0,0,2476,2474,1,0,0,0,2476,2475,1,0,0,0,2477,2479,1,
  	0,0,0,2478,2480,5,173,0,0,2479,2478,1,0,0,0,2479,2480,1,0,0,0,2480,2481,
  	1,0,0,0,2481,2483,5,157,0,0,2482,2484,5,173,0,0,2483,2482,1,0,0,0,2483,
  	2484,1,0,0,0,2484,2485,1,0,0,0,2485,2486,3,218,109,0,2486,283,1,0,0,0,
  	2487,2489,5,2,0,0,2488,2490,5,173,0,0,2489,2488,1,0,0,0,2489,2490,1,0,
  	0,0,2490,2491,1,0,0,0,2491,2493,3,218,109,0,2492,2494,5,173,0,0,2493,
  	2492,1,0,0,0,2493,2494,1,0,0,0,2494,2495,1,0,0,0,2495,2496,5,3,0,0,2496,
  	285,1,0,0,0,2497,2499,5,68,0,0,2498,2500,5,173,0,0,2499,2498,1,0,0,0,
  	2499,2500,1,0,0,0,2500,2501,1,0,0,0,2501,2503,5,2,0,0,2502,2504,5,173,
  	0,0,2503,2502,1,0,0,0,2503,2504,1,0,0,0,2504,2505,1,0,0,0,2505,2507,5,
  	152,0,0,2506,2508,5,173,0,0,2507,2506,1,0,0,0,2507,2508,1,0,0,0,2508,
  	2509,1,0,0,0,2509,2575,5,3,0,0,2510,2512,5,60,0,0,2511,2513,5,173,0,0,
  	2512,2511,1,0,0,0,2512,2513,1,0,0,0,2513,2514,1,0,0,0,2514,2516,5,2,0,
  	0,2515,2517,5,173,0,0,2516,2515,1,0,0,0,2516,2517,1,0,0,0,2517,2518,1,
  	0,0,0,2518,2520,3,290,145,0,2519,2521,5,173,0,0,2520,2519,1,0,0,0,2520,
  	2521,1,0,0,0,2521,2532,1,0,0,0,2522,2524,5,52,0,0,2523,2525,5,173,0,0,
  	2524,2523,1,0,0,0,2524,2525,1,0,0,0,2525,2526,1,0,0,0,2526,2533,3,96,
  	48,0,2527,2529,5,4,0,0,2528,2530,5,173,0,0,2529,2528,1,0,0,0,2529,2530,
  	1,0,0,0,2530,2531,1,0,0,0,2531,2533,3,290,145,0,2532,2522,1,0,0,0,2532,
  	2527,1,0,0,0,2533,2535,1,0,0,0,2534,2536,5,173,0,0,2535,2534,1,0,0,0,
  	2535,2536,1,0,0,0,2536,2537,1,0,0,0,2537,2538,5,3,0,0,2538,2575,1,0,0,
  	0,2539,2541,3,288,144,0,2540,2542,5,173,0,0,2541,2540,1,0,0,0,2541,2542,
  	1,0,0,0,2542,2543,1,0,0,0,2543,2545,5,2,0,0,2544,2546,5,173,0,0,2545,
  	2544,1,0,0,0,2545,2546,1,0,0,0,2546,2551,1,0,0,0,2547,2549,5,78,0,0,2548,
  	2550,5,173,0,0,2549,2548,1,0,0,0,2549,2550,1,0,0,0,2550,2552,1,0,0,0,
  	2551,2547,1,0,0,0,2551,2552,1,0,0,0,2552,2570,1,0,0,0,2553,2555,3,290,
  	145,0,2554,2556,5,173,0,0,2555,2554,1,0,0,0,2555,2556,1,0,0,0,2556,2567,
  	1,0,0,0,2557,2559,5,4,0,0,2558,2560,5,173,0,0,2559,2558,1,0,0,0,2559,
  	2560,1,0,0,0,2560,2561,1,0,0,0,2561,2563,3,290,145,0,2562,2564,5,173,
  	0,0,2563,2562,1,0,0,0,2563,2564,1,0,0,0,2564,2566,1,0,0,0,2565,2557,1,
  	0,0,0,2566,2569,1,0,0,0,2567,2565,1,0,0,0,2567,2568,1,0,0,0,2568,2571,
  	1,0,0,0,2569,2567,1,0,0,0,2570,2553,1,0,0,0,2570,2571,1,0,0,0,2571,2572,
  	1,0,0,0,2572,2573,5,3,0,0,2573,2575,1,0,0,0,2574,2497,1,0,0,0,2574,2510,
  	1,0,0,0,2574,2539,1,0,0,0,2575,287,1,0,0,0,2576,2577,3,324,162,0,2577,
  	289,1,0,0,0,2578,2580,3,324,162,0,2579,2581,5,173,0,0,2580,2579,1,0,0,
  	0,2580,2581,1,0,0,0,2581,2582,1,0,0,0,2582,2583,5,157,0,0,2583,2585,5,
  	6,0,0,2584,2586,5,173,0,0,2585,2584,1,0,0,0,2585,2586,1,0,0,0,2586,2588,
  	1,0,0,0,2587,2578,1,0,0,0,2587,2588,1,0,0,0,2588,2589,1,0,0,0,2589,2592,
  	3,218,109,0,2590,2592,3,292,146,0,2591,2587,1,0,0,0,2591,2590,1,0,0,0,
  	2592,291,1,0,0,0,2593,2595,3,294,147,0,2594,2596,5,173,0,0,2595,2594,
  	1,0,0,0,2595,2596,1,0,0,0,2596,2597,1,0,0,0,2597,2598,5,155,0,0,2598,
  	2600,5,16,0,0,2599,2601,5,173,0,0,2600,2599,1,0,0,0,2600,2601,1,0,0,0,
  	2601,2602,1,0,0,0,2602,2604,3,218,109,0,2603,2605,5,173,0,0,2604,2603,
  	1,0,0,0,2604,2605,1,0,0,0,2605,293,1,0,0,0,2606,2631,3,324,162,0,2607,
  	2609,5,2,0,0,2608,2610,5,173,0,0,2609,2608,1,0,0,0,2609,2610,1,0,0,0,
  	2610,2611,1,0,0,0,2611,2613,3,324,162,0,2612,2614,5,173,0,0,2613,2612,
  	1,0,0,0,2613,2614,1,0,0,0,2614,2625,1,0,0,0,2615,2617,5,4,0,0,2616,2618,
  	5,173,0,0,2617,2616,1,0,0,0,2617,2618,1,0,0,0,2618,2619,1,0,0,0,2619,
  	2621,3,324,162,0,2620,2622,5,173,0,0,2621,2620,1,0,0,0,2621,2622,1,0,
  	0,0,2622,2624,1,0,0,0,2623,2615,1,0,0,0,2624,2627,1,0,0,0,2625,2623,1,
  	0,0,0,2625,2626,1,0,0,0,2626,2628,1,0,0,0,2627,2625,1,0,0,0,2628,2629,
  	5,3,0,0,2629,2631,1,0,0,0,2630,2606,1,0,0,0,2630,2607,1,0,0,0,2631,295,
  	1,0,0,0,2632,2637,3,186,93,0,2633,2635,5,173,0,0,2634,2633,1,0,0,0,2634,
  	2635,1,0,0,0,2635,2636,1,0,0,0,2636,2638,3,188,94,0,2637,2634,1,0,0,0,
  	2638,2639,1,0,0,0,2639,2637,1,0,0,0,2639,2640,1,0,0,0,2640,297,1,0,0,
  	0,2641,2643,5,83,0,0,2642,2644,5,173,0,0,2643,2642,1,0,0,0,2643,2644,
  	1,0,0,0,2644,2645,1,0,0,0,2645,2647,5,9,0,0,2646,2648,5,173,0,0,2647,
  	2646,1,0,0,0,2647,2648,1,0,0,0,2648,2649,1,0,0,0,2649,2651,5,106,0,0,
  	2650,2652,5,173,0,0,2651,2650,1,0,0,0,2651,2652,1,0,0,0,2652,2653,1,0,
  	0,0,2653,2658,3,178,89,0,2654,2656,5,173,0,0,2655,2654,1,0,0,0,2655,2656,
  	1,0,0,0,2656,2657,1,0,0,0,2657,2659,3,176,88,0,2658,2655,1,0,0,0,2658,
  	2659,1,0,0,0,2659,2661,1,0,0,0,2660,2662,5,173,0,0,2661,2660,1,0,0,0,
  	2661,2662,1,0,0,0,2662,2663,1,0,0,0,2663,2664,5,10,0,0,2664,299,1,0,0,
  	0,2665,2667,5,68,0,0,2666,2668,5,173,0,0,2667,2666,1,0,0,0,2667,2668,
  	1,0,0,0,2668,2669,1,0,0,0,2669,2671,5,9,0,0,2670,2672,5,173,0,0,2671,
  	2670,1,0,0,0,2671,2672,1,0,0,0,2672,2673,1,0,0,0,2673,2675,5,106,0,0,
  	2674,2676,5,173,0,0,2675,2674,1,0,0,0,2675,2676,1,0,0,0,2676,2677,1,0,
  	0,0,2677,2682,3,178,89,0,2678,2680,5,173,0,0,2679,2678,1,0,0,0,2679,2680,
  	1,0,0,0,2680,2681,1,0,0,0,2681,2683,3,176,88,0,2682,2679,1,0,0,0,2682,
  	2683,1,0,0,0,2683,2685,1,0,0,0,2684,2686,5,173,0,0,2685,2684,1,0,0,0,
  	2685,2686,1,0,0,0,2686,2687,1,0,0,0,2687,2688,5,10,0,0,2688,301,1,0,0,
  	0,2689,2691,5,5,0,0,2690,2692,5,173,0,0,2691,2690,1,0,0,0,2691,2692,1,
  	0,0,0,2692,2695,1,0,0,0,2693,2696,3,316,158,0,2694,2696,5,152,0,0,2695,
  	2693,1,0,0,0,2695,2694,1,0,0,0,2696,303,1,0,0,0,2697,2702,5,59,0,0,2698,
  	2700,5,173,0,0,2699,2698,1,0,0,0,2699,2700,1,0,0,0,2700,2701,1,0,0,0,
  	2701,2703,3,306,153,0,2702,2699,1,0,0,0,2703,2704,1,0,0,0,2704,2702,1,
  	0,0,0,2704,2705,1,0,0,0,2705,2720,1,0,0,0,2706,2708,5,59,0,0,2707,2709,
  	5,173,0,0,2708,2707,1,0,0,0,2708,2709,1,0,0,0,2709,2710,1,0,0,0,2710,
  	2715,3,218,109,0,2711,2713,5,173,0,0,2712,2711,1,0,0,0,2712,2713,1,0,
  	0,0,2713,2714,1,0,0,0,2714,2716,3,306,153,0,2715,2712,1,0,0,0,2716,2717,
  	1,0,0,0,2717,2715,1,0,0,0,2717,2718,1,0,0,0,2718,2720,1,0,0,0,2719,2697,
  	1,0,0,0,2719,2706,1,0,0,0,2720,2729,1,0,0,0,2721,2723,5,173,0,0,2722,
  	2721,1,0,0,0,2722,2723,1,0,0,0,2723,2724,1,0,0,0,2724,2726,5,80,0,0,2725,
  	2727,5,173,0,0,2726,2725,1,0,0,0,2726,2727,1,0,0,0,2727,2728,1,0,0,0,
  	2728,2730,3,218,109,0,2729,2722,1,0,0,0,2729,2730,1,0,0,0,2730,2732,1,
  	0,0,0,2731,2733,5,173,0,0,2732,2731,1,0,0,0,2732,2733,1,0,0,0,2733,2734,
  	1,0,0,0,2734,2735,5,81,0,0,2735,305,1,0,0,0,2736,2738,5,145,0,0,2737,
  	2739,5,173,0,0,2738,2737,1,0,0,0,2738,2739,1,0,0,0,2739,2740,1,0,0,0,
  	2740,2742,3,218,109,0,2741,2743,5,173,0,0,2742,2741,1,0,0,0,2742,2743,
  	1,0,0,0,2743,2744,1,0,0,0,2744,2746,5,136,0,0,2745,2747,5,173,0,0,2746,
  	2745,1,0,0,0,2746,2747,1,0,0,0,2747,2748,1,0,0,0,2748,2749,3,218,109,
  	0,2749,307,1,0,0,0,2750,2751,3,324,162,0,2751,309,1,0,0,0,2752,2755,3,
  	320,160,0,2753,2755,3,318,159,0,2754,2752,1,0,0,0,2754,2753,1,0,0,0,2755,
  	311,1,0,0,0,2756,2759,5,26,0,0,2757,2760,3,324,162,0,2758,2760,5,160,
  	0,0,2759,2757,1,0,0,0,2759,2758,1,0,0,0,2760,313,1,0,0,0,2761,2763,3,
  	264,132,0,2762,2764,5,173,0,0,2763,2762,1,0,0,0,2763,2764,1,0,0,0,2764,
  	2765,1,0,0,0,2765,2766,3,302,151,0,2766,315,1,0,0,0,2767,2768,3,322,161,
  	0,2768,317,1,0,0,0,2769,2770,5,160,0,0,2770,319,1,0,0,0,2771,2772,7,7,
  	0,0,2772,321,1,0,0,0,2773,2774,3,324,162,0,2774,323,1,0,0,0,2775,2781,
  	5,169,0,0,2776,2777,5,172,0,0,2777,2781,6,162,-1,0,2778,2781,5,161,0,
  	0,2779,2781,3,326,163,0,2780,2775,1,0,0,0,2780,2776,1,0,0,0,2780,2778,
  	1,0,0,0,2780,2779,1,0,0,0,2781,325,1,0,0,0,2782,2783,7,8,0,0,2783,327,
  	1,0,0,0,2784,2785,7,9,0,0,2785,329,1,0,0,0,2786,2787,7,10,0,0,2787,331,
  	1,0,0,0,2788,2789,7,11,0,0,2789,333,1,0,0,0,484,336,340,345,349,354,357,
  	361,364,387,393,397,400,406,410,414,418,422,426,430,435,439,446,450,458,
  	462,472,476,480,485,498,502,510,514,518,522,530,534,538,542,557,562,568,
  	572,575,578,584,588,593,596,601,605,609,614,629,633,640,660,664,667,670,
  	673,676,680,685,689,699,703,708,713,718,724,728,732,737,744,748,752,755,
  	772,776,780,784,788,791,794,807,811,815,819,823,827,829,833,837,839,845,
  	849,853,857,870,874,878,882,886,891,894,898,902,904,908,912,914,933,940,
  	953,960,966,969,979,982,990,993,999,1002,1008,1023,1039,1046,1053,1064,
  	1084,1088,1093,1102,1106,1111,1117,1123,1129,1133,1137,1145,1149,1153,
  	1159,1163,1167,1173,1177,1181,1185,1189,1195,1199,1203,1207,1211,1215,
  	1221,1228,1233,1239,1244,1261,1265,1273,1283,1288,1293,1297,1302,1308,
  	1313,1316,1320,1324,1328,1334,1338,1343,1348,1352,1355,1357,1361,1365,
  	1371,1375,1380,1384,1393,1399,1407,1411,1415,1419,1426,1430,1434,1438,
  	1441,1444,1450,1453,1457,1461,1466,1470,1479,1483,1488,1502,1504,1506,
  	1511,1521,1527,1534,1547,1551,1555,1559,1564,1569,1573,1579,1583,1587,
  	1591,1596,1602,1605,1611,1614,1620,1624,1628,1632,1636,1641,1646,1650,
  	1655,1658,1667,1676,1681,1694,1697,1705,1709,1714,1719,1723,1728,1734,
  	1739,1746,1750,1754,1756,1760,1762,1766,1768,1774,1780,1784,1787,1790,
  	1796,1799,1802,1806,1812,1815,1818,1822,1826,1830,1832,1836,1838,1842,
  	1844,1848,1850,1856,1860,1864,1868,1872,1876,1880,1884,1888,1891,1897,
  	1901,1905,1908,1913,1918,1923,1928,1934,1942,1945,1948,1951,1955,1958,
  	1961,1964,1967,1971,1975,1979,1983,1987,1991,1993,1996,2000,2004,2008,
  	2012,2014,2020,2023,2026,2032,2035,2038,2059,2069,2079,2084,2088,2095,
  	2099,2103,2107,2111,2119,2123,2127,2131,2137,2141,2147,2151,2156,2161,
  	2165,2170,2175,2179,2185,2192,2196,2202,2209,2213,2219,2226,2230,2235,
  	2240,2244,2249,2252,2259,2262,2267,2276,2280,2283,2296,2299,2304,2318,
  	2322,2327,2340,2344,2348,2352,2358,2362,2366,2372,2376,2380,2386,2390,
  	2394,2398,2402,2405,2419,2425,2429,2433,2437,2440,2446,2449,2453,2457,
  	2461,2465,2469,2476,2479,2483,2489,2493,2499,2503,2507,2512,2516,2520,
  	2524,2529,2532,2535,2541,2545,2549,2551,2555,2559,2563,2567,2570,2574,
  	2580,2585,2587,2591,2595,2600,2604,2609,2613,2617,2621,2625,2630,2634,
  	2639,2643,2647,2651,2655,2658,2661,2667,2671,2675,2679,2682,2685,2691,
  	2695,2699,2704,2708,2712,2717,2719,2722,2726,2729,2732,2738,2742,2746,
  	2754,2759,2763,2780
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cypherParserStaticData = staticData.release();
}

}

CypherParser::CypherParser(TokenStream *input) : CypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CypherParser::CypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  CypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *cypherParserStaticData->atn, cypherParserStaticData->decisionToDFA, cypherParserStaticData->sharedContextCache, options);
}

CypherParser::~CypherParser() {
  delete _interpreter;
}

const atn::ATN& CypherParser::getATN() const {
  return *cypherParserStaticData->atn;
}

std::string CypherParser::getGrammarFileName() const {
  return "Cypher.g4";
}

const std::vector<std::string>& CypherParser::getRuleNames() const {
  return cypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& CypherParser::getVocabulary() const {
  return cypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CypherParser::getSerializedATN() const {
  return cypherParserStaticData->serializedATN;
}


//----------------- Ku_StatementsContext ------------------------------------------------------------------

CypherParser::Ku_StatementsContext::Ku_StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_CypherContext *> CypherParser::Ku_StatementsContext::oC_Cypher() {
  return getRuleContexts<CypherParser::OC_CypherContext>();
}

CypherParser::OC_CypherContext* CypherParser::Ku_StatementsContext::oC_Cypher(size_t i) {
  return getRuleContext<CypherParser::OC_CypherContext>(i);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::EOF() {
  return getToken(CypherParser::EOF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::Ku_StatementsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::Ku_StatementsContext::getRuleIndex() const {
  return CypherParser::RuleKu_Statements;
}


CypherParser::Ku_StatementsContext* CypherParser::ku_Statements() {
  Ku_StatementsContext *_localctx = _tracker.createInstance<Ku_StatementsContext>(_ctx, getState());
  enterRule(_localctx, 0, CypherParser::RuleKu_Statements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(334);
    oC_Cypher();
    setState(345);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(336);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(335);
          match(CypherParser::SP);
        }
        setState(338);
        match(CypherParser::T__0);
        setState(340);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
        case 1: {
          setState(339);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(342);
        oC_Cypher(); 
      }
      setState(347);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    }
    setState(349);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(348);
      match(CypherParser::SP);
    }
    setState(351);
    match(CypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CypherContext ------------------------------------------------------------------

CypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StatementContext* CypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<CypherParser::OC_StatementContext>(0);
}

CypherParser::OC_AnyCypherOptionContext* CypherParser::OC_CypherContext::oC_AnyCypherOption() {
  return getRuleContext<CypherParser::OC_AnyCypherOptionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CypherContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CypherContext::getRuleIndex() const {
  return CypherParser::RuleOC_Cypher;
}


CypherParser::OC_CypherContext* CypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 2, CypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(354);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::EXPLAIN

    || _la == CypherParser::PROFILE) {
      setState(353);
      oC_AnyCypherOption();
    }
    setState(357);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(356);
      match(CypherParser::SP);
    }

    setState(359);
    oC_Statement();
    setState(364);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(361);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(360);
        match(CypherParser::SP);
      }
      setState(363);
      match(CypherParser::T__0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

CypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_QueryContext* CypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

CypherParser::KU_CreateNodeTableContext* CypherParser::OC_StatementContext::kU_CreateNodeTable() {
  return getRuleContext<CypherParser::KU_CreateNodeTableContext>(0);
}

CypherParser::KU_CreateRelTableContext* CypherParser::OC_StatementContext::kU_CreateRelTable() {
  return getRuleContext<CypherParser::KU_CreateRelTableContext>(0);
}

CypherParser::KU_CreateRelTableGroupContext* CypherParser::OC_StatementContext::kU_CreateRelTableGroup() {
  return getRuleContext<CypherParser::KU_CreateRelTableGroupContext>(0);
}

CypherParser::KU_CreateSequenceContext* CypherParser::OC_StatementContext::kU_CreateSequence() {
  return getRuleContext<CypherParser::KU_CreateSequenceContext>(0);
}

CypherParser::KU_CreateTypeContext* CypherParser::OC_StatementContext::kU_CreateType() {
  return getRuleContext<CypherParser::KU_CreateTypeContext>(0);
}

CypherParser::KU_DropContext* CypherParser::OC_StatementContext::kU_Drop() {
  return getRuleContext<CypherParser::KU_DropContext>(0);
}

CypherParser::KU_AlterTableContext* CypherParser::OC_StatementContext::kU_AlterTable() {
  return getRuleContext<CypherParser::KU_AlterTableContext>(0);
}

CypherParser::KU_CopyFromContext* CypherParser::OC_StatementContext::kU_CopyFrom() {
  return getRuleContext<CypherParser::KU_CopyFromContext>(0);
}

CypherParser::KU_CopyFromByColumnContext* CypherParser::OC_StatementContext::kU_CopyFromByColumn() {
  return getRuleContext<CypherParser::KU_CopyFromByColumnContext>(0);
}

CypherParser::KU_CopyTOContext* CypherParser::OC_StatementContext::kU_CopyTO() {
  return getRuleContext<CypherParser::KU_CopyTOContext>(0);
}

CypherParser::KU_StandaloneCallContext* CypherParser::OC_StatementContext::kU_StandaloneCall() {
  return getRuleContext<CypherParser::KU_StandaloneCallContext>(0);
}

CypherParser::KU_CreateMacroContext* CypherParser::OC_StatementContext::kU_CreateMacro() {
  return getRuleContext<CypherParser::KU_CreateMacroContext>(0);
}

CypherParser::KU_CommentOnContext* CypherParser::OC_StatementContext::kU_CommentOn() {
  return getRuleContext<CypherParser::KU_CommentOnContext>(0);
}

CypherParser::KU_TransactionContext* CypherParser::OC_StatementContext::kU_Transaction() {
  return getRuleContext<CypherParser::KU_TransactionContext>(0);
}

CypherParser::KU_ExtensionContext* CypherParser::OC_StatementContext::kU_Extension() {
  return getRuleContext<CypherParser::KU_ExtensionContext>(0);
}

CypherParser::KU_ExportDatabaseContext* CypherParser::OC_StatementContext::kU_ExportDatabase() {
  return getRuleContext<CypherParser::KU_ExportDatabaseContext>(0);
}

CypherParser::KU_ImportDatabaseContext* CypherParser::OC_StatementContext::kU_ImportDatabase() {
  return getRuleContext<CypherParser::KU_ImportDatabaseContext>(0);
}

CypherParser::KU_AttachDatabaseContext* CypherParser::OC_StatementContext::kU_AttachDatabase() {
  return getRuleContext<CypherParser::KU_AttachDatabaseContext>(0);
}

CypherParser::KU_DetachDatabaseContext* CypherParser::OC_StatementContext::kU_DetachDatabase() {
  return getRuleContext<CypherParser::KU_DetachDatabaseContext>(0);
}

CypherParser::KU_UseDatabaseContext* CypherParser::OC_StatementContext::kU_UseDatabase() {
  return getRuleContext<CypherParser::KU_UseDatabaseContext>(0);
}


size_t CypherParser::OC_StatementContext::getRuleIndex() const {
  return CypherParser::RuleOC_Statement;
}


CypherParser::OC_StatementContext* CypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, CypherParser::RuleOC_Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(387);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(366);
      oC_Query();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(367);
      kU_CreateNodeTable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(368);
      kU_CreateRelTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(369);
      kU_CreateRelTableGroup();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(370);
      kU_CreateSequence();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(371);
      kU_CreateType();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(372);
      kU_Drop();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(373);
      kU_AlterTable();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(374);
      kU_CopyFrom();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(375);
      kU_CopyFromByColumn();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(376);
      kU_CopyTO();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(377);
      kU_StandaloneCall();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(378);
      kU_CreateMacro();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(379);
      kU_CommentOn();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(380);
      kU_Transaction();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(381);
      kU_Extension();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(382);
      kU_ExportDatabase();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(383);
      kU_ImportDatabase();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(384);
      kU_AttachDatabase();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(385);
      kU_DetachDatabase();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(386);
      kU_UseDatabase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromContext ------------------------------------------------------------------

CypherParser::KU_CopyFromContext::KU_CopyFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_CopyFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_CopyFromContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}

CypherParser::KU_ColumnNamesContext* CypherParser::KU_CopyFromContext::kU_ColumnNames() {
  return getRuleContext<CypherParser::KU_ColumnNamesContext>(0);
}


size_t CypherParser::KU_CopyFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFrom;
}


CypherParser::KU_CopyFromContext* CypherParser::kU_CopyFrom() {
  KU_CopyFromContext *_localctx = _tracker.createInstance<KU_CopyFromContext>(_ctx, getState());
  enterRule(_localctx, 6, CypherParser::RuleKU_CopyFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(389);
    match(CypherParser::COPY);
    setState(390);
    match(CypherParser::SP);
    setState(391);
    oC_SchemaName();
    setState(400);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(393);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(392);
        match(CypherParser::SP);
      }
      setState(395);
      kU_ColumnNames();
      setState(397);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(396);
        match(CypherParser::SP);
      }
      break;
    }

    case 2: {
      setState(399);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(402);
    match(CypherParser::FROM);
    setState(403);
    match(CypherParser::SP);
    setState(404);
    kU_ScanSource();
    setState(418);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
    case 1: {
      setState(406);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(405);
        match(CypherParser::SP);
      }
      setState(408);
      match(CypherParser::T__1);
      setState(410);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(409);
        match(CypherParser::SP);
      }
      setState(412);
      kU_Options();
      setState(414);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(413);
        match(CypherParser::SP);
      }
      setState(416);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnNamesContext ------------------------------------------------------------------

CypherParser::KU_ColumnNamesContext::KU_ColumnNamesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_ColumnNamesContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ColumnNamesContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ColumnNamesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ColumnNamesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ColumnNamesContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnNames;
}


CypherParser::KU_ColumnNamesContext* CypherParser::kU_ColumnNames() {
  KU_ColumnNamesContext *_localctx = _tracker.createInstance<KU_ColumnNamesContext>(_ctx, getState());
  enterRule(_localctx, 8, CypherParser::RuleKU_ColumnNames);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(420);
    match(CypherParser::T__1);
    setState(422);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(421);
      match(CypherParser::SP);
    }
    setState(424);
    oC_SchemaName();
    setState(435);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(426);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(425);
          match(CypherParser::SP);
        }
        setState(428);
        match(CypherParser::T__3);
        setState(430);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(429);
          match(CypherParser::SP);
        }
        setState(432);
        oC_SchemaName(); 
      }
      setState(437);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    }
    setState(439);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(438);
      match(CypherParser::SP);
    }
    setState(441);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ScanSourceContext ------------------------------------------------------------------

CypherParser::KU_ScanSourceContext::KU_ScanSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_FilePathsContext* CypherParser::KU_ScanSourceContext::kU_FilePaths() {
  return getRuleContext<CypherParser::KU_FilePathsContext>(0);
}

CypherParser::OC_QueryContext* CypherParser::KU_ScanSourceContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ScanSourceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ScanSourceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::KU_ScanSourceContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ScanSourceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_ScanSourceContext::getRuleIndex() const {
  return CypherParser::RuleKU_ScanSource;
}


CypherParser::KU_ScanSourceContext* CypherParser::kU_ScanSource() {
  KU_ScanSourceContext *_localctx = _tracker.createInstance<KU_ScanSourceContext>(_ctx, getState());
  enterRule(_localctx, 10, CypherParser::RuleKU_ScanSource);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(462);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(443);
      kU_FilePaths();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(444);
      match(CypherParser::T__1);
      setState(446);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(445);
        match(CypherParser::SP);
      }
      setState(448);
      oC_Query();
      setState(450);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(449);
        match(CypherParser::SP);
      }
      setState(452);
      match(CypherParser::T__2);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(454);
      oC_Variable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(455);
      oC_Variable();
      setState(456);
      match(CypherParser::T__4);
      setState(458);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(457);
        match(CypherParser::SP);
      }
      setState(460);
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromByColumnContext ------------------------------------------------------------------

CypherParser::KU_CopyFromByColumnContext::KU_CopyFromByColumnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromByColumnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COLUMN() {
  return getToken(CypherParser::COLUMN, 0);
}


size_t CypherParser::KU_CopyFromByColumnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFromByColumn;
}


CypherParser::KU_CopyFromByColumnContext* CypherParser::kU_CopyFromByColumn() {
  KU_CopyFromByColumnContext *_localctx = _tracker.createInstance<KU_CopyFromByColumnContext>(_ctx, getState());
  enterRule(_localctx, 12, CypherParser::RuleKU_CopyFromByColumn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(464);
    match(CypherParser::COPY);
    setState(465);
    match(CypherParser::SP);
    setState(466);
    oC_SchemaName();
    setState(467);
    match(CypherParser::SP);
    setState(468);
    match(CypherParser::FROM);
    setState(469);
    match(CypherParser::SP);
    setState(470);
    match(CypherParser::T__1);
    setState(472);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(471);
      match(CypherParser::SP);
    }
    setState(474);
    match(CypherParser::StringLiteral);
    setState(485);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__3 || _la == CypherParser::SP) {
      setState(476);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(475);
        match(CypherParser::SP);
      }
      setState(478);
      match(CypherParser::T__3);
      setState(480);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(479);
        match(CypherParser::SP);
      }
      setState(482);
      match(CypherParser::StringLiteral);
      setState(487);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(488);
    match(CypherParser::T__2);
    setState(489);
    match(CypherParser::SP);
    setState(490);
    match(CypherParser::BY);
    setState(491);
    match(CypherParser::SP);
    setState(492);
    match(CypherParser::COLUMN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyTOContext ------------------------------------------------------------------

CypherParser::KU_CopyTOContext::KU_CopyTOContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyTOContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_QueryContext* CypherParser::KU_CopyTOContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::TO() {
  return getToken(CypherParser::TO, 0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_CopyTOContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}


size_t CypherParser::KU_CopyTOContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyTO;
}


CypherParser::KU_CopyTOContext* CypherParser::kU_CopyTO() {
  KU_CopyTOContext *_localctx = _tracker.createInstance<KU_CopyTOContext>(_ctx, getState());
  enterRule(_localctx, 14, CypherParser::RuleKU_CopyTO);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(494);
    match(CypherParser::COPY);
    setState(495);
    match(CypherParser::SP);
    setState(496);
    match(CypherParser::T__1);
    setState(498);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(497);
      match(CypherParser::SP);
    }
    setState(500);
    oC_Query();
    setState(502);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(501);
      match(CypherParser::SP);
    }
    setState(504);
    match(CypherParser::T__2);
    setState(505);
    match(CypherParser::SP);
    setState(506);
    match(CypherParser::TO);
    setState(507);
    match(CypherParser::SP);
    setState(508);
    match(CypherParser::StringLiteral);
    setState(522);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      setState(510);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(509);
        match(CypherParser::SP);
      }
      setState(512);
      match(CypherParser::T__1);
      setState(514);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(513);
        match(CypherParser::SP);
      }
      setState(516);
      kU_Options();
      setState(518);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(517);
        match(CypherParser::SP);
      }
      setState(520);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ExportDatabaseContext::KU_ExportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ExportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_ExportDatabaseContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}


size_t CypherParser::KU_ExportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ExportDatabase;
}


CypherParser::KU_ExportDatabaseContext* CypherParser::kU_ExportDatabase() {
  KU_ExportDatabaseContext *_localctx = _tracker.createInstance<KU_ExportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 16, CypherParser::RuleKU_ExportDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(524);
    match(CypherParser::EXPORT);
    setState(525);
    match(CypherParser::SP);
    setState(526);
    match(CypherParser::DATABASE);
    setState(527);
    match(CypherParser::SP);
    setState(528);
    match(CypherParser::StringLiteral);
    setState(542);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      setState(530);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(529);
        match(CypherParser::SP);
      }
      setState(532);
      match(CypherParser::T__1);
      setState(534);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(533);
        match(CypherParser::SP);
      }
      setState(536);
      kU_Options();
      setState(538);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(537);
        match(CypherParser::SP);
      }
      setState(540);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ImportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ImportDatabaseContext::KU_ImportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ImportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_ImportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ImportDatabase;
}


CypherParser::KU_ImportDatabaseContext* CypherParser::kU_ImportDatabase() {
  KU_ImportDatabaseContext *_localctx = _tracker.createInstance<KU_ImportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 18, CypherParser::RuleKU_ImportDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(544);
    match(CypherParser::IMPORT);
    setState(545);
    match(CypherParser::SP);
    setState(546);
    match(CypherParser::DATABASE);
    setState(547);
    match(CypherParser::SP);
    setState(548);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AttachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_AttachDatabaseContext::KU_AttachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::ATTACH() {
  return getToken(CypherParser::ATTACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AttachDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::DBTYPE() {
  return getToken(CypherParser::DBTYPE, 0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_AttachDatabaseContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AttachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_AttachDatabaseContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}


size_t CypherParser::KU_AttachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_AttachDatabase;
}


CypherParser::KU_AttachDatabaseContext* CypherParser::kU_AttachDatabase() {
  KU_AttachDatabaseContext *_localctx = _tracker.createInstance<KU_AttachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 20, CypherParser::RuleKU_AttachDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(550);
    match(CypherParser::ATTACH);
    setState(551);
    match(CypherParser::SP);
    setState(552);
    match(CypherParser::StringLiteral);
    setState(557);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      setState(553);
      match(CypherParser::SP);
      setState(554);
      match(CypherParser::AS);
      setState(555);
      match(CypherParser::SP);
      setState(556);
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
    setState(559);
    match(CypherParser::SP);
    setState(560);
    match(CypherParser::T__1);
    setState(562);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(561);
      match(CypherParser::SP);
    }
    setState(564);
    match(CypherParser::DBTYPE);
    setState(565);
    match(CypherParser::SP);
    setState(566);
    oC_SymbolicName();
    setState(575);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      setState(568);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(567);
        match(CypherParser::SP);
      }
      setState(570);
      match(CypherParser::T__3);
      setState(572);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(571);
        match(CypherParser::SP);
      }
      setState(574);
      kU_Options();
      break;
    }

    default:
      break;
    }
    setState(578);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(577);
      match(CypherParser::SP);
    }
    setState(580);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionContext ------------------------------------------------------------------

CypherParser::KU_OptionContext::KU_OptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_OptionContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_OptionContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Option;
}


CypherParser::KU_OptionContext* CypherParser::kU_Option() {
  KU_OptionContext *_localctx = _tracker.createInstance<KU_OptionContext>(_ctx, getState());
  enterRule(_localctx, 22, CypherParser::RuleKU_Option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(601);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(582);
      oC_SymbolicName();
      setState(596);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
      case 1: {
        setState(584);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(583);
          match(CypherParser::SP);
        }
        setState(586);
        match(CypherParser::T__5);
        setState(588);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(587);
          match(CypherParser::SP);
        }
        break;
      }

      case 2: {
        setState(593);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::SP) {
          setState(590);
          match(CypherParser::SP);
          setState(595);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      default:
        break;
      }
      setState(598);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(600);
      oC_SymbolicName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionsContext ------------------------------------------------------------------

CypherParser::KU_OptionsContext::KU_OptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_OptionContext *> CypherParser::KU_OptionsContext::kU_Option() {
  return getRuleContexts<CypherParser::KU_OptionContext>();
}

CypherParser::KU_OptionContext* CypherParser::KU_OptionsContext::kU_Option(size_t i) {
  return getRuleContext<CypherParser::KU_OptionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_Options;
}


CypherParser::KU_OptionsContext* CypherParser::kU_Options() {
  KU_OptionsContext *_localctx = _tracker.createInstance<KU_OptionsContext>(_ctx, getState());
  enterRule(_localctx, 24, CypherParser::RuleKU_Options);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(603);
    kU_Option();
    setState(614);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(605);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(604);
          match(CypherParser::SP);
        }
        setState(607);
        match(CypherParser::T__3);
        setState(609);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(608);
          match(CypherParser::SP);
        }
        setState(611);
        kU_Option(); 
      }
      setState(616);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DetachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_DetachDatabaseContext::KU_DetachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DetachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_DetachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_DetachDatabase;
}


CypherParser::KU_DetachDatabaseContext* CypherParser::kU_DetachDatabase() {
  KU_DetachDatabaseContext *_localctx = _tracker.createInstance<KU_DetachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 26, CypherParser::RuleKU_DetachDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(617);
    match(CypherParser::DETACH);
    setState(618);
    match(CypherParser::SP);
    setState(619);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_UseDatabaseContext ------------------------------------------------------------------

CypherParser::KU_UseDatabaseContext::KU_UseDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_UseDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_UseDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_UseDatabase;
}


CypherParser::KU_UseDatabaseContext* CypherParser::kU_UseDatabase() {
  KU_UseDatabaseContext *_localctx = _tracker.createInstance<KU_UseDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 28, CypherParser::RuleKU_UseDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(621);
    match(CypherParser::USE);
    setState(622);
    match(CypherParser::SP);
    setState(623);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StandaloneCallContext ------------------------------------------------------------------

CypherParser::KU_StandaloneCallContext::KU_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StandaloneCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StandaloneCallContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StandaloneCallContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::KU_StandaloneCallContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}


size_t CypherParser::KU_StandaloneCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_StandaloneCall;
}


CypherParser::KU_StandaloneCallContext* CypherParser::kU_StandaloneCall() {
  KU_StandaloneCallContext *_localctx = _tracker.createInstance<KU_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 30, CypherParser::RuleKU_StandaloneCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(640);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(625);
      match(CypherParser::CALL);
      setState(626);
      match(CypherParser::SP);
      setState(627);
      oC_SymbolicName();
      setState(629);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(628);
        match(CypherParser::SP);
      }
      setState(631);
      match(CypherParser::T__5);
      setState(633);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(632);
        match(CypherParser::SP);
      }
      setState(635);
      oC_Expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(637);
      match(CypherParser::CALL);
      setState(638);
      match(CypherParser::SP);
      setState(639);
      oC_FunctionInvocation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CommentOnContext ------------------------------------------------------------------

CypherParser::KU_CommentOnContext::KU_CommentOnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::COMMENT() {
  return getToken(CypherParser::COMMENT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CommentOnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::ON() {
  return getToken(CypherParser::ON, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CommentOnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_CommentOnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CommentOn;
}


CypherParser::KU_CommentOnContext* CypherParser::kU_CommentOn() {
  KU_CommentOnContext *_localctx = _tracker.createInstance<KU_CommentOnContext>(_ctx, getState());
  enterRule(_localctx, 32, CypherParser::RuleKU_CommentOn);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(642);
    match(CypherParser::COMMENT);
    setState(643);
    match(CypherParser::SP);
    setState(644);
    match(CypherParser::ON);
    setState(645);
    match(CypherParser::SP);
    setState(646);
    match(CypherParser::TABLE);
    setState(647);
    match(CypherParser::SP);
    setState(648);
    oC_SchemaName();
    setState(649);
    match(CypherParser::SP);
    setState(650);
    match(CypherParser::IS);
    setState(651);
    match(CypherParser::SP);
    setState(652);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateMacroContext ------------------------------------------------------------------

CypherParser::KU_CreateMacroContext::KU_CreateMacroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateMacroContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::MACRO() {
  return getToken(CypherParser::MACRO, 0);
}

CypherParser::OC_FunctionNameContext* CypherParser::KU_CreateMacroContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_CreateMacroContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::KU_PositionalArgsContext* CypherParser::KU_CreateMacroContext::kU_PositionalArgs() {
  return getRuleContext<CypherParser::KU_PositionalArgsContext>(0);
}

std::vector<CypherParser::KU_DefaultArgContext *> CypherParser::KU_CreateMacroContext::kU_DefaultArg() {
  return getRuleContexts<CypherParser::KU_DefaultArgContext>();
}

CypherParser::KU_DefaultArgContext* CypherParser::KU_CreateMacroContext::kU_DefaultArg(size_t i) {
  return getRuleContext<CypherParser::KU_DefaultArgContext>(i);
}


size_t CypherParser::KU_CreateMacroContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateMacro;
}


CypherParser::KU_CreateMacroContext* CypherParser::kU_CreateMacro() {
  KU_CreateMacroContext *_localctx = _tracker.createInstance<KU_CreateMacroContext>(_ctx, getState());
  enterRule(_localctx, 34, CypherParser::RuleKU_CreateMacro);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(654);
    match(CypherParser::CREATE);
    setState(655);
    match(CypherParser::SP);
    setState(656);
    match(CypherParser::MACRO);
    setState(657);
    match(CypherParser::SP);
    setState(658);
    oC_FunctionName();
    setState(660);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(659);
      match(CypherParser::SP);
    }
    setState(662);
    match(CypherParser::T__1);
    setState(664);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      setState(663);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(667);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      setState(666);
      kU_PositionalArgs();
      break;
    }

    default:
      break;
    }
    setState(670);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      setState(669);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(673);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & -4761777667909507179) != 0) || ((((_la - 112) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 112)) & 1297602465103738881) != 0)) {
      setState(672);
      kU_DefaultArg();
    }
    setState(685);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(676);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(675);
          match(CypherParser::SP);
        }
        setState(678);
        match(CypherParser::T__3);
        setState(680);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(679);
          match(CypherParser::SP);
        }
        setState(682);
        kU_DefaultArg(); 
      }
      setState(687);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
    }
    setState(689);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(688);
      match(CypherParser::SP);
    }
    setState(691);
    match(CypherParser::T__2);
    setState(692);
    match(CypherParser::SP);
    setState(693);
    match(CypherParser::AS);
    setState(694);
    match(CypherParser::SP);
    setState(695);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PositionalArgsContext ------------------------------------------------------------------

CypherParser::KU_PositionalArgsContext::KU_PositionalArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_PositionalArgsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_PositionalArgsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PositionalArgsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PositionalArgsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PositionalArgsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PositionalArgs;
}


CypherParser::KU_PositionalArgsContext* CypherParser::kU_PositionalArgs() {
  KU_PositionalArgsContext *_localctx = _tracker.createInstance<KU_PositionalArgsContext>(_ctx, getState());
  enterRule(_localctx, 36, CypherParser::RuleKU_PositionalArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(697);
    oC_SymbolicName();
    setState(708);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(699);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(698);
          match(CypherParser::SP);
        }
        setState(701);
        match(CypherParser::T__3);
        setState(703);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(702);
          match(CypherParser::SP);
        }
        setState(705);
        oC_SymbolicName(); 
      }
      setState(710);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultArgContext ------------------------------------------------------------------

CypherParser::KU_DefaultArgContext::KU_DefaultArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DefaultArgContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_DefaultArgContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DefaultArgContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_DefaultArgContext::getRuleIndex() const {
  return CypherParser::RuleKU_DefaultArg;
}


CypherParser::KU_DefaultArgContext* CypherParser::kU_DefaultArg() {
  KU_DefaultArgContext *_localctx = _tracker.createInstance<KU_DefaultArgContext>(_ctx, getState());
  enterRule(_localctx, 38, CypherParser::RuleKU_DefaultArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(711);
    oC_SymbolicName();
    setState(713);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(712);
      match(CypherParser::SP);
    }
    setState(715);
    match(CypherParser::COLON);
    setState(716);
    match(CypherParser::T__5);
    setState(718);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(717);
      match(CypherParser::SP);
    }
    setState(720);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FilePathsContext ------------------------------------------------------------------

CypherParser::KU_FilePathsContext::KU_FilePathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::GLOB() {
  return getToken(CypherParser::GLOB, 0);
}


size_t CypherParser::KU_FilePathsContext::getRuleIndex() const {
  return CypherParser::RuleKU_FilePaths;
}


CypherParser::KU_FilePathsContext* CypherParser::kU_FilePaths() {
  KU_FilePathsContext *_localctx = _tracker.createInstance<KU_FilePathsContext>(_ctx, getState());
  enterRule(_localctx, 40, CypherParser::RuleKU_FilePaths);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(755);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 1);
        setState(722);
        match(CypherParser::T__6);
        setState(724);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(723);
          match(CypherParser::SP);
        }
        setState(726);
        match(CypherParser::StringLiteral);
        setState(737);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__3 || _la == CypherParser::SP) {
          setState(728);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(727);
            match(CypherParser::SP);
          }
          setState(730);
          match(CypherParser::T__3);
          setState(732);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(731);
            match(CypherParser::SP);
          }
          setState(734);
          match(CypherParser::StringLiteral);
          setState(739);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(740);
        match(CypherParser::T__7);
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(741);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::GLOB: {
        enterOuterAlt(_localctx, 3);
        setState(742);
        match(CypherParser::GLOB);
        setState(744);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(743);
          match(CypherParser::SP);
        }
        setState(746);
        match(CypherParser::T__1);
        setState(748);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(747);
          match(CypherParser::SP);
        }
        setState(750);
        match(CypherParser::StringLiteral);
        setState(752);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(751);
          match(CypherParser::SP);
        }
        setState(754);
        match(CypherParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IfNotExistsContext ------------------------------------------------------------------

CypherParser::KU_IfNotExistsContext::KU_IfNotExistsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::IF() {
  return getToken(CypherParser::IF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_IfNotExistsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}


size_t CypherParser::KU_IfNotExistsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IfNotExists;
}


CypherParser::KU_IfNotExistsContext* CypherParser::kU_IfNotExists() {
  KU_IfNotExistsContext *_localctx = _tracker.createInstance<KU_IfNotExistsContext>(_ctx, getState());
  enterRule(_localctx, 42, CypherParser::RuleKU_IfNotExists);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(757);
    match(CypherParser::IF);
    setState(758);
    match(CypherParser::SP);
    setState(759);
    match(CypherParser::NOT);
    setState(760);
    match(CypherParser::SP);
    setState(761);
    match(CypherParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeTableContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeTableContext::KU_CreateNodeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateNodeTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateNodeTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateNodeTableContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

CypherParser::KU_CreateNodeConstraintContext* CypherParser::KU_CreateNodeTableContext::kU_CreateNodeConstraint() {
  return getRuleContext<CypherParser::KU_CreateNodeConstraintContext>(0);
}


size_t CypherParser::KU_CreateNodeTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeTable;
}


CypherParser::KU_CreateNodeTableContext* CypherParser::kU_CreateNodeTable() {
  KU_CreateNodeTableContext *_localctx = _tracker.createInstance<KU_CreateNodeTableContext>(_ctx, getState());
  enterRule(_localctx, 44, CypherParser::RuleKU_CreateNodeTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(763);
    match(CypherParser::CREATE);
    setState(764);
    match(CypherParser::SP);
    setState(765);
    match(CypherParser::NODE);
    setState(766);
    match(CypherParser::SP);
    setState(767);
    match(CypherParser::TABLE);
    setState(768);
    match(CypherParser::SP);
    setState(772);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx)) {
    case 1: {
      setState(769);
      kU_IfNotExists();
      setState(770);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(774);
    oC_SchemaName();
    setState(776);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(775);
      match(CypherParser::SP);
    }
    setState(778);
    match(CypherParser::T__1);
    setState(780);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(779);
      match(CypherParser::SP);
    }
    setState(782);
    kU_PropertyDefinitions();
    setState(784);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      setState(783);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(791);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__3) {
      setState(786);
      match(CypherParser::T__3);
      setState(788);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(787);
        match(CypherParser::SP);
      }
      setState(790);
      kU_CreateNodeConstraint();
    }
    setState(794);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(793);
      match(CypherParser::SP);
    }
    setState(796);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableContext::KU_CreateRelTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableContext::kU_RelTableConnection() {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateRelTableContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_CreateRelTableContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}


size_t CypherParser::KU_CreateRelTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTable;
}


CypherParser::KU_CreateRelTableContext* CypherParser::kU_CreateRelTable() {
  KU_CreateRelTableContext *_localctx = _tracker.createInstance<KU_CreateRelTableContext>(_ctx, getState());
  enterRule(_localctx, 46, CypherParser::RuleKU_CreateRelTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(798);
    match(CypherParser::CREATE);
    setState(799);
    match(CypherParser::SP);
    setState(800);
    match(CypherParser::REL);
    setState(801);
    match(CypherParser::SP);
    setState(802);
    match(CypherParser::TABLE);
    setState(803);
    match(CypherParser::SP);
    setState(807);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      setState(804);
      kU_IfNotExists();
      setState(805);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(809);
    oC_SchemaName();
    setState(811);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(810);
      match(CypherParser::SP);
    }
    setState(813);
    match(CypherParser::T__1);
    setState(815);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(814);
      match(CypherParser::SP);
    }
    setState(817);
    kU_RelTableConnection();
    setState(819);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(818);
      match(CypherParser::SP);
    }
    setState(829);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
    case 1: {
      setState(821);
      match(CypherParser::T__3);
      setState(823);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(822);
        match(CypherParser::SP);
      }
      setState(825);
      kU_PropertyDefinitions();
      setState(827);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(826);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(839);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__3) {
      setState(831);
      match(CypherParser::T__3);
      setState(833);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(832);
        match(CypherParser::SP);
      }
      setState(835);
      oC_SymbolicName();
      setState(837);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(836);
        match(CypherParser::SP);
      }
    }
    setState(841);
    match(CypherParser::T__2);
    setState(857);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      setState(842);
      match(CypherParser::SP);
      setState(843);
      match(CypherParser::WITH);
      setState(845);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(844);
        match(CypherParser::SP);
      }
      setState(847);
      match(CypherParser::T__1);
      setState(849);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(848);
        match(CypherParser::SP);
      }
      setState(851);
      kU_Options();
      setState(853);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(852);
        match(CypherParser::SP);
      }
      setState(855);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableGroupContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableGroupContext::KU_CreateRelTableGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableGroupContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::GROUP() {
  return getToken(CypherParser::GROUP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

std::vector<CypherParser::KU_RelTableConnectionContext *> CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection() {
  return getRuleContexts<CypherParser::KU_RelTableConnectionContext>();
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection(size_t i) {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(i);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateRelTableGroupContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableGroupContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableGroupContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTableGroup;
}


CypherParser::KU_CreateRelTableGroupContext* CypherParser::kU_CreateRelTableGroup() {
  KU_CreateRelTableGroupContext *_localctx = _tracker.createInstance<KU_CreateRelTableGroupContext>(_ctx, getState());
  enterRule(_localctx, 48, CypherParser::RuleKU_CreateRelTableGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(859);
    match(CypherParser::CREATE);
    setState(860);
    match(CypherParser::SP);
    setState(861);
    match(CypherParser::REL);
    setState(862);
    match(CypherParser::SP);
    setState(863);
    match(CypherParser::TABLE);
    setState(864);
    match(CypherParser::SP);
    setState(865);
    match(CypherParser::GROUP);
    setState(866);
    match(CypherParser::SP);
    setState(870);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
    case 1: {
      setState(867);
      kU_IfNotExists();
      setState(868);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(872);
    oC_SchemaName();
    setState(874);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(873);
      match(CypherParser::SP);
    }
    setState(876);
    match(CypherParser::T__1);
    setState(878);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(877);
      match(CypherParser::SP);
    }
    setState(880);
    kU_RelTableConnection();
    setState(889); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(882);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(881);
                match(CypherParser::SP);
              }
              setState(884);
              match(CypherParser::T__3);
              setState(886);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(885);
                match(CypherParser::SP);
              }
              setState(888);
              kU_RelTableConnection();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(891); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(894);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(893);
      match(CypherParser::SP);
    }
    setState(904);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
    case 1: {
      setState(896);
      match(CypherParser::T__3);
      setState(898);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(897);
        match(CypherParser::SP);
      }
      setState(900);
      kU_PropertyDefinitions();
      setState(902);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(901);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(914);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__3) {
      setState(906);
      match(CypherParser::T__3);
      setState(908);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(907);
        match(CypherParser::SP);
      }
      setState(910);
      oC_SymbolicName();
      setState(912);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(911);
        match(CypherParser::SP);
      }
    }
    setState(916);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RelTableConnectionContext ------------------------------------------------------------------

CypherParser::KU_RelTableConnectionContext::KU_RelTableConnectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RelTableConnectionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_RelTableConnectionContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RelTableConnectionContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RelTableConnectionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RelTableConnection;
}


CypherParser::KU_RelTableConnectionContext* CypherParser::kU_RelTableConnection() {
  KU_RelTableConnectionContext *_localctx = _tracker.createInstance<KU_RelTableConnectionContext>(_ctx, getState());
  enterRule(_localctx, 50, CypherParser::RuleKU_RelTableConnection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(918);
    match(CypherParser::FROM);
    setState(919);
    match(CypherParser::SP);
    setState(920);
    oC_SchemaName();
    setState(921);
    match(CypherParser::SP);
    setState(922);
    match(CypherParser::TO);
    setState(923);
    match(CypherParser::SP);
    setState(924);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateSequenceContext ------------------------------------------------------------------

CypherParser::KU_CreateSequenceContext::KU_CreateSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateSequenceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateSequenceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateSequenceContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

std::vector<CypherParser::KU_SequenceOptionsContext *> CypherParser::KU_CreateSequenceContext::kU_SequenceOptions() {
  return getRuleContexts<CypherParser::KU_SequenceOptionsContext>();
}

CypherParser::KU_SequenceOptionsContext* CypherParser::KU_CreateSequenceContext::kU_SequenceOptions(size_t i) {
  return getRuleContext<CypherParser::KU_SequenceOptionsContext>(i);
}


size_t CypherParser::KU_CreateSequenceContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateSequence;
}


CypherParser::KU_CreateSequenceContext* CypherParser::kU_CreateSequence() {
  KU_CreateSequenceContext *_localctx = _tracker.createInstance<KU_CreateSequenceContext>(_ctx, getState());
  enterRule(_localctx, 52, CypherParser::RuleKU_CreateSequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(926);
    match(CypherParser::CREATE);
    setState(927);
    match(CypherParser::SP);
    setState(928);
    match(CypherParser::SEQUENCE);
    setState(929);
    match(CypherParser::SP);
    setState(933);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
    case 1: {
      setState(930);
      kU_IfNotExists();
      setState(931);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(935);
    oC_SchemaName();
    setState(940);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(936);
        match(CypherParser::SP);
        setState(937);
        kU_SequenceOptions(); 
      }
      setState(942);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateTypeContext ------------------------------------------------------------------

CypherParser::KU_CreateTypeContext::KU_CreateTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::TYPE() {
  return getToken(CypherParser::TYPE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateTypeContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_CreateTypeContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_CreateTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateType;
}


CypherParser::KU_CreateTypeContext* CypherParser::kU_CreateType() {
  KU_CreateTypeContext *_localctx = _tracker.createInstance<KU_CreateTypeContext>(_ctx, getState());
  enterRule(_localctx, 54, CypherParser::RuleKU_CreateType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(943);
    match(CypherParser::CREATE);
    setState(944);
    match(CypherParser::SP);
    setState(945);
    match(CypherParser::TYPE);
    setState(946);
    match(CypherParser::SP);
    setState(947);
    oC_SchemaName();
    setState(948);
    match(CypherParser::SP);
    setState(949);
    match(CypherParser::AS);
    setState(950);
    match(CypherParser::SP);
    setState(951);
    kU_DataType(0);
    setState(953);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      setState(952);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_SequenceOptionsContext ------------------------------------------------------------------

CypherParser::KU_SequenceOptionsContext::KU_SequenceOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_IncrementByContext* CypherParser::KU_SequenceOptionsContext::kU_IncrementBy() {
  return getRuleContext<CypherParser::KU_IncrementByContext>(0);
}

CypherParser::KU_MinValueContext* CypherParser::KU_SequenceOptionsContext::kU_MinValue() {
  return getRuleContext<CypherParser::KU_MinValueContext>(0);
}

CypherParser::KU_MaxValueContext* CypherParser::KU_SequenceOptionsContext::kU_MaxValue() {
  return getRuleContext<CypherParser::KU_MaxValueContext>(0);
}

CypherParser::KU_StartWithContext* CypherParser::KU_SequenceOptionsContext::kU_StartWith() {
  return getRuleContext<CypherParser::KU_StartWithContext>(0);
}

CypherParser::KU_CycleContext* CypherParser::KU_SequenceOptionsContext::kU_Cycle() {
  return getRuleContext<CypherParser::KU_CycleContext>(0);
}


size_t CypherParser::KU_SequenceOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_SequenceOptions;
}


CypherParser::KU_SequenceOptionsContext* CypherParser::kU_SequenceOptions() {
  KU_SequenceOptionsContext *_localctx = _tracker.createInstance<KU_SequenceOptionsContext>(_ctx, getState());
  enterRule(_localctx, 56, CypherParser::RuleKU_SequenceOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(960);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(955);
      kU_IncrementBy();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(956);
      kU_MinValue();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(957);
      kU_MaxValue();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(958);
      kU_StartWith();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(959);
      kU_Cycle();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IncrementByContext ------------------------------------------------------------------

CypherParser::KU_IncrementByContext::KU_IncrementByContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_IncrementByContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_IncrementByContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_IncrementByContext::getRuleIndex() const {
  return CypherParser::RuleKU_IncrementBy;
}


CypherParser::KU_IncrementByContext* CypherParser::kU_IncrementBy() {
  KU_IncrementByContext *_localctx = _tracker.createInstance<KU_IncrementByContext>(_ctx, getState());
  enterRule(_localctx, 58, CypherParser::RuleKU_IncrementBy);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(962);
    match(CypherParser::INCREMENT);
    setState(963);
    match(CypherParser::SP);
    setState(966);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::BY) {
      setState(964);
      match(CypherParser::BY);
      setState(965);
      match(CypherParser::SP);
    }
    setState(969);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(968);
      match(CypherParser::MINUS);
    }
    setState(971);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MinValueContext ------------------------------------------------------------------

CypherParser::KU_MinValueContext::KU_MinValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MinValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MinValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MinValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MinValue;
}


CypherParser::KU_MinValueContext* CypherParser::kU_MinValue() {
  KU_MinValueContext *_localctx = _tracker.createInstance<KU_MinValueContext>(_ctx, getState());
  enterRule(_localctx, 60, CypherParser::RuleKU_MinValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(982);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(973);
        match(CypherParser::NO);
        setState(974);
        match(CypherParser::SP);
        setState(975);
        match(CypherParser::MINVALUE);
        break;
      }

      case CypherParser::MINVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(976);
        match(CypherParser::MINVALUE);
        setState(977);
        match(CypherParser::SP);
        setState(979);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(978);
          match(CypherParser::MINUS);
        }
        setState(981);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MaxValueContext ------------------------------------------------------------------

CypherParser::KU_MaxValueContext::KU_MaxValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MaxValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MaxValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MaxValue;
}


CypherParser::KU_MaxValueContext* CypherParser::kU_MaxValue() {
  KU_MaxValueContext *_localctx = _tracker.createInstance<KU_MaxValueContext>(_ctx, getState());
  enterRule(_localctx, 62, CypherParser::RuleKU_MaxValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(993);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(984);
        match(CypherParser::NO);
        setState(985);
        match(CypherParser::SP);
        setState(986);
        match(CypherParser::MAXVALUE);
        break;
      }

      case CypherParser::MAXVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(987);
        match(CypherParser::MAXVALUE);
        setState(988);
        match(CypherParser::SP);
        setState(990);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(989);
          match(CypherParser::MINUS);
        }
        setState(992);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StartWithContext ------------------------------------------------------------------

CypherParser::KU_StartWithContext::KU_StartWithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StartWithContext::START() {
  return getToken(CypherParser::START, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StartWithContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_StartWithContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_StartWithContext::getRuleIndex() const {
  return CypherParser::RuleKU_StartWith;
}


CypherParser::KU_StartWithContext* CypherParser::kU_StartWith() {
  KU_StartWithContext *_localctx = _tracker.createInstance<KU_StartWithContext>(_ctx, getState());
  enterRule(_localctx, 64, CypherParser::RuleKU_StartWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(995);
    match(CypherParser::START);
    setState(996);
    match(CypherParser::SP);
    setState(999);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::WITH) {
      setState(997);
      match(CypherParser::WITH);
      setState(998);
      match(CypherParser::SP);
    }
    setState(1002);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(1001);
      match(CypherParser::MINUS);
    }
    setState(1004);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CycleContext ------------------------------------------------------------------

CypherParser::KU_CycleContext::KU_CycleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CycleContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::KU_CycleContext::getRuleIndex() const {
  return CypherParser::RuleKU_Cycle;
}


CypherParser::KU_CycleContext* CypherParser::kU_Cycle() {
  KU_CycleContext *_localctx = _tracker.createInstance<KU_CycleContext>(_ctx, getState());
  enterRule(_localctx, 66, CypherParser::RuleKU_Cycle);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1008);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::NO) {
      setState(1006);
      match(CypherParser::NO);
      setState(1007);
      match(CypherParser::SP);
    }
    setState(1010);
    match(CypherParser::CYCLE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IfExistsContext ------------------------------------------------------------------

CypherParser::KU_IfExistsContext::KU_IfExistsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IfExistsContext::IF() {
  return getToken(CypherParser::IF, 0);
}

tree::TerminalNode* CypherParser::KU_IfExistsContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_IfExistsContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}


size_t CypherParser::KU_IfExistsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IfExists;
}


CypherParser::KU_IfExistsContext* CypherParser::kU_IfExists() {
  KU_IfExistsContext *_localctx = _tracker.createInstance<KU_IfExistsContext>(_ctx, getState());
  enterRule(_localctx, 68, CypherParser::RuleKU_IfExists);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1012);
    match(CypherParser::IF);
    setState(1013);
    match(CypherParser::SP);
    setState(1014);
    match(CypherParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropContext ------------------------------------------------------------------

CypherParser::KU_DropContext::KU_DropContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DropContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DropContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DropContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DropContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_DropContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

CypherParser::KU_IfExistsContext* CypherParser::KU_DropContext::kU_IfExists() {
  return getRuleContext<CypherParser::KU_IfExistsContext>(0);
}


size_t CypherParser::KU_DropContext::getRuleIndex() const {
  return CypherParser::RuleKU_Drop;
}


CypherParser::KU_DropContext* CypherParser::kU_Drop() {
  KU_DropContext *_localctx = _tracker.createInstance<KU_DropContext>(_ctx, getState());
  enterRule(_localctx, 70, CypherParser::RuleKU_Drop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1016);
    match(CypherParser::DROP);
    setState(1017);
    match(CypherParser::SP);
    setState(1018);
    _la = _input->LA(1);
    if (!(_la == CypherParser::SEQUENCE

    || _la == CypherParser::TABLE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1019);
    match(CypherParser::SP);
    setState(1023);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
    case 1: {
      setState(1020);
      kU_IfExists();
      setState(1021);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1025);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterTableContext ------------------------------------------------------------------

CypherParser::KU_AlterTableContext::KU_AlterTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AlterTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AlterTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_AlterOptionsContext* CypherParser::KU_AlterTableContext::kU_AlterOptions() {
  return getRuleContext<CypherParser::KU_AlterOptionsContext>(0);
}


size_t CypherParser::KU_AlterTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterTable;
}


CypherParser::KU_AlterTableContext* CypherParser::kU_AlterTable() {
  KU_AlterTableContext *_localctx = _tracker.createInstance<KU_AlterTableContext>(_ctx, getState());
  enterRule(_localctx, 72, CypherParser::RuleKU_AlterTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1027);
    match(CypherParser::ALTER);
    setState(1028);
    match(CypherParser::SP);
    setState(1029);
    match(CypherParser::TABLE);
    setState(1030);
    match(CypherParser::SP);
    setState(1031);
    oC_SchemaName();
    setState(1032);
    match(CypherParser::SP);
    setState(1033);
    kU_AlterOptions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterOptionsContext ------------------------------------------------------------------

CypherParser::KU_AlterOptionsContext::KU_AlterOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_AddPropertyContext* CypherParser::KU_AlterOptionsContext::kU_AddProperty() {
  return getRuleContext<CypherParser::KU_AddPropertyContext>(0);
}

CypherParser::KU_DropPropertyContext* CypherParser::KU_AlterOptionsContext::kU_DropProperty() {
  return getRuleContext<CypherParser::KU_DropPropertyContext>(0);
}

CypherParser::KU_RenameTableContext* CypherParser::KU_AlterOptionsContext::kU_RenameTable() {
  return getRuleContext<CypherParser::KU_RenameTableContext>(0);
}

CypherParser::KU_RenamePropertyContext* CypherParser::KU_AlterOptionsContext::kU_RenameProperty() {
  return getRuleContext<CypherParser::KU_RenamePropertyContext>(0);
}


size_t CypherParser::KU_AlterOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterOptions;
}


CypherParser::KU_AlterOptionsContext* CypherParser::kU_AlterOptions() {
  KU_AlterOptionsContext *_localctx = _tracker.createInstance<KU_AlterOptionsContext>(_ctx, getState());
  enterRule(_localctx, 74, CypherParser::RuleKU_AlterOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1039);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1035);
      kU_AddProperty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1036);
      kU_DropProperty();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1037);
      kU_RenameTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1038);
      kU_RenameProperty();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddPropertyContext ------------------------------------------------------------------

CypherParser::KU_AddPropertyContext::KU_AddPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AddPropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_AddPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_AddPropertyContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_AddPropertyContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

CypherParser::KU_DefaultContext* CypherParser::KU_AddPropertyContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}


size_t CypherParser::KU_AddPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddProperty;
}


CypherParser::KU_AddPropertyContext* CypherParser::kU_AddProperty() {
  KU_AddPropertyContext *_localctx = _tracker.createInstance<KU_AddPropertyContext>(_ctx, getState());
  enterRule(_localctx, 76, CypherParser::RuleKU_AddProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1041);
    match(CypherParser::ADD);
    setState(1042);
    match(CypherParser::SP);
    setState(1046);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
    case 1: {
      setState(1043);
      kU_IfNotExists();
      setState(1044);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1048);
    oC_PropertyKeyName();
    setState(1049);
    match(CypherParser::SP);
    setState(1050);
    kU_DataType(0);
    setState(1053);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx)) {
    case 1: {
      setState(1051);
      match(CypherParser::SP);
      setState(1052);
      kU_Default();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultContext ------------------------------------------------------------------

CypherParser::KU_DefaultContext::KU_DefaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DefaultContext::DEFAULT() {
  return getToken(CypherParser::DEFAULT, 0);
}

tree::TerminalNode* CypherParser::KU_DefaultContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_DefaultContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_DefaultContext::getRuleIndex() const {
  return CypherParser::RuleKU_Default;
}


CypherParser::KU_DefaultContext* CypherParser::kU_Default() {
  KU_DefaultContext *_localctx = _tracker.createInstance<KU_DefaultContext>(_ctx, getState());
  enterRule(_localctx, 78, CypherParser::RuleKU_Default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1055);
    match(CypherParser::DEFAULT);
    setState(1056);
    match(CypherParser::SP);
    setState(1057);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropPropertyContext ------------------------------------------------------------------

CypherParser::KU_DropPropertyContext::KU_DropPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DropPropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_DropPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

CypherParser::KU_IfExistsContext* CypherParser::KU_DropPropertyContext::kU_IfExists() {
  return getRuleContext<CypherParser::KU_IfExistsContext>(0);
}


size_t CypherParser::KU_DropPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropProperty;
}


CypherParser::KU_DropPropertyContext* CypherParser::kU_DropProperty() {
  KU_DropPropertyContext *_localctx = _tracker.createInstance<KU_DropPropertyContext>(_ctx, getState());
  enterRule(_localctx, 80, CypherParser::RuleKU_DropProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1059);
    match(CypherParser::DROP);
    setState(1060);
    match(CypherParser::SP);
    setState(1064);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx)) {
    case 1: {
      setState(1061);
      kU_IfExists();
      setState(1062);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1066);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenameTableContext ------------------------------------------------------------------

CypherParser::KU_RenameTableContext::KU_RenameTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenameTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::TO() {
  return getToken(CypherParser::TO, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RenameTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_RenameTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameTable;
}


CypherParser::KU_RenameTableContext* CypherParser::kU_RenameTable() {
  KU_RenameTableContext *_localctx = _tracker.createInstance<KU_RenameTableContext>(_ctx, getState());
  enterRule(_localctx, 82, CypherParser::RuleKU_RenameTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1068);
    match(CypherParser::RENAME);
    setState(1069);
    match(CypherParser::SP);
    setState(1070);
    match(CypherParser::TO);
    setState(1071);
    match(CypherParser::SP);
    setState(1072);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenamePropertyContext ------------------------------------------------------------------

CypherParser::KU_RenamePropertyContext::KU_RenamePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenamePropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RenamePropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameProperty;
}


CypherParser::KU_RenamePropertyContext* CypherParser::kU_RenameProperty() {
  KU_RenamePropertyContext *_localctx = _tracker.createInstance<KU_RenamePropertyContext>(_ctx, getState());
  enterRule(_localctx, 84, CypherParser::RuleKU_RenameProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1074);
    match(CypherParser::RENAME);
    setState(1075);
    match(CypherParser::SP);
    setState(1076);
    oC_PropertyKeyName();
    setState(1077);
    match(CypherParser::SP);
    setState(1078);
    match(CypherParser::TO);
    setState(1079);
    match(CypherParser::SP);
    setState(1080);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnDefinitionsContext ------------------------------------------------------------------

CypherParser::KU_ColumnDefinitionsContext::KU_ColumnDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ColumnDefinitionContext *> CypherParser::KU_ColumnDefinitionsContext::kU_ColumnDefinition() {
  return getRuleContexts<CypherParser::KU_ColumnDefinitionContext>();
}

CypherParser::KU_ColumnDefinitionContext* CypherParser::KU_ColumnDefinitionsContext::kU_ColumnDefinition(size_t i) {
  return getRuleContext<CypherParser::KU_ColumnDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ColumnDefinitionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ColumnDefinitionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ColumnDefinitionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnDefinitions;
}


CypherParser::KU_ColumnDefinitionsContext* CypherParser::kU_ColumnDefinitions() {
  KU_ColumnDefinitionsContext *_localctx = _tracker.createInstance<KU_ColumnDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 86, CypherParser::RuleKU_ColumnDefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1082);
    kU_ColumnDefinition();
    setState(1093);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1084);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1083);
          match(CypherParser::SP);
        }
        setState(1086);
        match(CypherParser::T__3);
        setState(1088);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1087);
          match(CypherParser::SP);
        }
        setState(1090);
        kU_ColumnDefinition(); 
      }
      setState(1095);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnDefinitionContext ------------------------------------------------------------------

CypherParser::KU_ColumnDefinitionContext::KU_ColumnDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_ColumnDefinitionContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_ColumnDefinitionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_ColumnDefinitionContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_ColumnDefinitionContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnDefinition;
}


CypherParser::KU_ColumnDefinitionContext* CypherParser::kU_ColumnDefinition() {
  KU_ColumnDefinitionContext *_localctx = _tracker.createInstance<KU_ColumnDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 88, CypherParser::RuleKU_ColumnDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1096);
    oC_PropertyKeyName();
    setState(1097);
    match(CypherParser::SP);
    setState(1098);
    kU_DataType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsContext::KU_PropertyDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionContext *> CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionContext>();
}

CypherParser::KU_PropertyDefinitionContext* CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitions;
}


CypherParser::KU_PropertyDefinitionsContext* CypherParser::kU_PropertyDefinitions() {
  KU_PropertyDefinitionsContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 90, CypherParser::RuleKU_PropertyDefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1100);
    kU_PropertyDefinition();
    setState(1111);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1102);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1101);
          match(CypherParser::SP);
        }
        setState(1104);
        match(CypherParser::T__3);
        setState(1106);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1105);
          match(CypherParser::SP);
        }
        setState(1108);
        kU_PropertyDefinition(); 
      }
      setState(1113);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionContext::KU_PropertyDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_ColumnDefinitionContext* CypherParser::KU_PropertyDefinitionContext::kU_ColumnDefinition() {
  return getRuleContext<CypherParser::KU_ColumnDefinitionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::KU_DefaultContext* CypherParser::KU_PropertyDefinitionContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::PRIMARY() {
  return getToken(CypherParser::PRIMARY, 0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}


size_t CypherParser::KU_PropertyDefinitionContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinition;
}


CypherParser::KU_PropertyDefinitionContext* CypherParser::kU_PropertyDefinition() {
  KU_PropertyDefinitionContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 92, CypherParser::RuleKU_PropertyDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1114);
    kU_ColumnDefinition();
    setState(1117);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      setState(1115);
      match(CypherParser::SP);
      setState(1116);
      kU_Default();
      break;
    }

    default:
      break;
    }
    setState(1123);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
    case 1: {
      setState(1119);
      match(CypherParser::SP);
      setState(1120);
      match(CypherParser::PRIMARY);
      setState(1121);
      match(CypherParser::SP);
      setState(1122);
      match(CypherParser::KEY);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeConstraintContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeConstraintContext::KU_CreateNodeConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::PRIMARY() {
  return getToken(CypherParser::PRIMARY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeConstraintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_CreateNodeConstraintContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_CreateNodeConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeConstraint;
}


CypherParser::KU_CreateNodeConstraintContext* CypherParser::kU_CreateNodeConstraint() {
  KU_CreateNodeConstraintContext *_localctx = _tracker.createInstance<KU_CreateNodeConstraintContext>(_ctx, getState());
  enterRule(_localctx, 94, CypherParser::RuleKU_CreateNodeConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1125);
    match(CypherParser::PRIMARY);
    setState(1126);
    match(CypherParser::SP);
    setState(1127);
    match(CypherParser::KEY);
    setState(1129);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1128);
      match(CypherParser::SP);
    }
    setState(1131);
    match(CypherParser::T__1);
    setState(1133);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1132);
      match(CypherParser::SP);
    }
    setState(1135);
    oC_PropertyKeyName();
    setState(1137);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1136);
      match(CypherParser::SP);
    }
    setState(1139);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DataTypeContext ------------------------------------------------------------------

CypherParser::KU_DataTypeContext::KU_DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DataTypeContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

CypherParser::KU_ColumnDefinitionsContext* CypherParser::KU_DataTypeContext::kU_ColumnDefinitions() {
  return getRuleContext<CypherParser::KU_ColumnDefinitionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DataTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::KU_DataTypeContext *> CypherParser::KU_DataTypeContext::kU_DataType() {
  return getRuleContexts<CypherParser::KU_DataTypeContext>();
}

CypherParser::KU_DataTypeContext* CypherParser::KU_DataTypeContext::kU_DataType(size_t i) {
  return getRuleContext<CypherParser::KU_DataTypeContext>(i);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::DECIMAL() {
  return getToken(CypherParser::DECIMAL, 0);
}

std::vector<CypherParser::OC_IntegerLiteralContext *> CypherParser::KU_DataTypeContext::oC_IntegerLiteral() {
  return getRuleContexts<CypherParser::OC_IntegerLiteralContext>();
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_DataTypeContext::oC_IntegerLiteral(size_t i) {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(i);
}

CypherParser::KU_ListIdentifiersContext* CypherParser::KU_DataTypeContext::kU_ListIdentifiers() {
  return getRuleContext<CypherParser::KU_ListIdentifiersContext>(0);
}


size_t CypherParser::KU_DataTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_DataType;
}



CypherParser::KU_DataTypeContext* CypherParser::kU_DataType() {
   return kU_DataType(0);
}

CypherParser::KU_DataTypeContext* CypherParser::kU_DataType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_DataTypeContext *_localctx = _tracker.createInstance<KU_DataTypeContext>(_ctx, parentState);
  CypherParser::KU_DataTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 96;
  enterRecursionRule(_localctx, 96, CypherParser::RuleKU_DataType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1215);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
    case 1: {
      setState(1142);
      oC_SymbolicName();
      break;
    }

    case 2: {
      setState(1143);
      match(CypherParser::UNION);
      setState(1145);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1144);
        match(CypherParser::SP);
      }
      setState(1147);
      match(CypherParser::T__1);
      setState(1149);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1148);
        match(CypherParser::SP);
      }
      setState(1151);
      kU_ColumnDefinitions();
      setState(1153);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1152);
        match(CypherParser::SP);
      }
      setState(1155);
      match(CypherParser::T__2);
      break;
    }

    case 3: {
      setState(1157);
      oC_SymbolicName();
      setState(1159);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1158);
        match(CypherParser::SP);
      }
      setState(1161);
      match(CypherParser::T__1);
      setState(1163);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1162);
        match(CypherParser::SP);
      }
      setState(1165);
      kU_ColumnDefinitions();
      setState(1167);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1166);
        match(CypherParser::SP);
      }
      setState(1169);
      match(CypherParser::T__2);
      break;
    }

    case 4: {
      setState(1171);
      oC_SymbolicName();
      setState(1173);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1172);
        match(CypherParser::SP);
      }
      setState(1175);
      match(CypherParser::T__1);
      setState(1177);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1176);
        match(CypherParser::SP);
      }
      setState(1179);
      kU_DataType(0);
      setState(1181);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1180);
        match(CypherParser::SP);
      }
      setState(1183);
      match(CypherParser::T__3);
      setState(1185);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1184);
        match(CypherParser::SP);
      }
      setState(1187);
      kU_DataType(0);
      setState(1189);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1188);
        match(CypherParser::SP);
      }
      setState(1191);
      match(CypherParser::T__2);
      break;
    }

    case 5: {
      setState(1193);
      match(CypherParser::DECIMAL);
      setState(1195);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1194);
        match(CypherParser::SP);
      }
      setState(1197);
      match(CypherParser::T__1);
      setState(1199);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1198);
        match(CypherParser::SP);
      }
      setState(1201);
      oC_IntegerLiteral();
      setState(1203);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1202);
        match(CypherParser::SP);
      }
      setState(1205);
      match(CypherParser::T__3);
      setState(1207);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1206);
        match(CypherParser::SP);
      }
      setState(1209);
      oC_IntegerLiteral();
      setState(1211);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1210);
        match(CypherParser::SP);
      }
      setState(1213);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1221);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<KU_DataTypeContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleKU_DataType);
        setState(1217);

        if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
        setState(1218);
        kU_ListIdentifiers(); 
      }
      setState(1223);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- KU_ListIdentifiersContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifiersContext::KU_ListIdentifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ListIdentifierContext *> CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier() {
  return getRuleContexts<CypherParser::KU_ListIdentifierContext>();
}

CypherParser::KU_ListIdentifierContext* CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier(size_t i) {
  return getRuleContext<CypherParser::KU_ListIdentifierContext>(i);
}


size_t CypherParser::KU_ListIdentifiersContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifiers;
}


CypherParser::KU_ListIdentifiersContext* CypherParser::kU_ListIdentifiers() {
  KU_ListIdentifiersContext *_localctx = _tracker.createInstance<KU_ListIdentifiersContext>(_ctx, getState());
  enterRule(_localctx, 98, CypherParser::RuleKU_ListIdentifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1224);
    kU_ListIdentifier();
    setState(1228);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1225);
        kU_ListIdentifier(); 
      }
      setState(1230);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListIdentifierContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifierContext::KU_ListIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_ListIdentifierContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::KU_ListIdentifierContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifier;
}


CypherParser::KU_ListIdentifierContext* CypherParser::kU_ListIdentifier() {
  KU_ListIdentifierContext *_localctx = _tracker.createInstance<KU_ListIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 100, CypherParser::RuleKU_ListIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1231);
    match(CypherParser::T__6);
    setState(1233);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DecimalInteger) {
      setState(1232);
      oC_IntegerLiteral();
    }
    setState(1235);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnyCypherOptionContext ------------------------------------------------------------------

CypherParser::OC_AnyCypherOptionContext::OC_AnyCypherOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExplainContext* CypherParser::OC_AnyCypherOptionContext::oC_Explain() {
  return getRuleContext<CypherParser::OC_ExplainContext>(0);
}

CypherParser::OC_ProfileContext* CypherParser::OC_AnyCypherOptionContext::oC_Profile() {
  return getRuleContext<CypherParser::OC_ProfileContext>(0);
}


size_t CypherParser::OC_AnyCypherOptionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnyCypherOption;
}


CypherParser::OC_AnyCypherOptionContext* CypherParser::oC_AnyCypherOption() {
  OC_AnyCypherOptionContext *_localctx = _tracker.createInstance<OC_AnyCypherOptionContext>(_ctx, getState());
  enterRule(_localctx, 102, CypherParser::RuleOC_AnyCypherOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1239);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::EXPLAIN: {
        enterOuterAlt(_localctx, 1);
        setState(1237);
        oC_Explain();
        break;
      }

      case CypherParser::PROFILE: {
        enterOuterAlt(_localctx, 2);
        setState(1238);
        oC_Profile();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplainContext ------------------------------------------------------------------

CypherParser::OC_ExplainContext::OC_ExplainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExplainContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}

tree::TerminalNode* CypherParser::OC_ExplainContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::OC_ExplainContext::LOGICAL() {
  return getToken(CypherParser::LOGICAL, 0);
}


size_t CypherParser::OC_ExplainContext::getRuleIndex() const {
  return CypherParser::RuleOC_Explain;
}


CypherParser::OC_ExplainContext* CypherParser::oC_Explain() {
  OC_ExplainContext *_localctx = _tracker.createInstance<OC_ExplainContext>(_ctx, getState());
  enterRule(_localctx, 104, CypherParser::RuleOC_Explain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1241);
    match(CypherParser::EXPLAIN);
    setState(1244);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx)) {
    case 1: {
      setState(1242);
      match(CypherParser::SP);
      setState(1243);
      match(CypherParser::LOGICAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProfileContext ------------------------------------------------------------------

CypherParser::OC_ProfileContext::OC_ProfileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProfileContext::PROFILE() {
  return getToken(CypherParser::PROFILE, 0);
}


size_t CypherParser::OC_ProfileContext::getRuleIndex() const {
  return CypherParser::RuleOC_Profile;
}


CypherParser::OC_ProfileContext* CypherParser::oC_Profile() {
  OC_ProfileContext *_localctx = _tracker.createInstance<OC_ProfileContext>(_ctx, getState());
  enterRule(_localctx, 106, CypherParser::RuleOC_Profile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1246);
    match(CypherParser::PROFILE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_TransactionContext ------------------------------------------------------------------

CypherParser::KU_TransactionContext::KU_TransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_TransactionContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_TransactionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ONLY() {
  return getToken(CypherParser::ONLY, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::CHECKPOINT() {
  return getToken(CypherParser::CHECKPOINT, 0);
}


size_t CypherParser::KU_TransactionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Transaction;
}


CypherParser::KU_TransactionContext* CypherParser::kU_Transaction() {
  KU_TransactionContext *_localctx = _tracker.createInstance<KU_TransactionContext>(_ctx, getState());
  enterRule(_localctx, 108, CypherParser::RuleKU_Transaction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1261);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1248);
      match(CypherParser::BEGIN);
      setState(1249);
      match(CypherParser::SP);
      setState(1250);
      match(CypherParser::TRANSACTION);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1251);
      match(CypherParser::BEGIN);
      setState(1252);
      match(CypherParser::SP);
      setState(1253);
      match(CypherParser::TRANSACTION);
      setState(1254);
      match(CypherParser::SP);
      setState(1255);
      match(CypherParser::READ);
      setState(1256);
      match(CypherParser::SP);
      setState(1257);
      match(CypherParser::ONLY);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1258);
      match(CypherParser::COMMIT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1259);
      match(CypherParser::ROLLBACK);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1260);
      match(CypherParser::CHECKPOINT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExtensionContext ------------------------------------------------------------------

CypherParser::KU_ExtensionContext::KU_ExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LoadExtensionContext* CypherParser::KU_ExtensionContext::kU_LoadExtension() {
  return getRuleContext<CypherParser::KU_LoadExtensionContext>(0);
}

CypherParser::KU_InstallExtensionContext* CypherParser::KU_ExtensionContext::kU_InstallExtension() {
  return getRuleContext<CypherParser::KU_InstallExtensionContext>(0);
}


size_t CypherParser::KU_ExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Extension;
}


CypherParser::KU_ExtensionContext* CypherParser::kU_Extension() {
  KU_ExtensionContext *_localctx = _tracker.createInstance<KU_ExtensionContext>(_ctx, getState());
  enterRule(_localctx, 110, CypherParser::RuleKU_Extension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1265);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 1);
        setState(1263);
        kU_LoadExtension();
        break;
      }

      case CypherParser::INSTALL: {
        enterOuterAlt(_localctx, 2);
        setState(1264);
        kU_InstallExtension();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadExtensionContext ------------------------------------------------------------------

CypherParser::KU_LoadExtensionContext::KU_LoadExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadExtensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_LoadExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_LoadExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadExtension;
}


CypherParser::KU_LoadExtensionContext* CypherParser::kU_LoadExtension() {
  KU_LoadExtensionContext *_localctx = _tracker.createInstance<KU_LoadExtensionContext>(_ctx, getState());
  enterRule(_localctx, 112, CypherParser::RuleKU_LoadExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1267);
    match(CypherParser::LOAD);
    setState(1268);
    match(CypherParser::SP);
    setState(1269);
    match(CypherParser::EXTENSION);
    setState(1270);
    match(CypherParser::SP);
    setState(1273);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::StringLiteral: {
        setState(1271);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1272);
        oC_Variable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InstallExtensionContext ------------------------------------------------------------------

CypherParser::KU_InstallExtensionContext::KU_InstallExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::INSTALL() {
  return getToken(CypherParser::INSTALL, 0);
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_InstallExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_InstallExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_InstallExtension;
}


CypherParser::KU_InstallExtensionContext* CypherParser::kU_InstallExtension() {
  KU_InstallExtensionContext *_localctx = _tracker.createInstance<KU_InstallExtensionContext>(_ctx, getState());
  enterRule(_localctx, 114, CypherParser::RuleKU_InstallExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1275);
    match(CypherParser::INSTALL);
    setState(1276);
    match(CypherParser::SP);
    setState(1277);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

CypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RegularQueryContext* CypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<CypherParser::OC_RegularQueryContext>(0);
}


size_t CypherParser::OC_QueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_Query;
}


CypherParser::OC_QueryContext* CypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
  enterRule(_localctx, 116, CypherParser::RuleOC_Query);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1279);
    oC_RegularQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

CypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}

std::vector<CypherParser::OC_UnionContext *> CypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<CypherParser::OC_UnionContext>();
}

CypherParser::OC_UnionContext* CypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<CypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RegularQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_ReturnContext *> CypherParser::OC_RegularQueryContext::oC_Return() {
  return getRuleContexts<CypherParser::OC_ReturnContext>();
}

CypherParser::OC_ReturnContext* CypherParser::OC_RegularQueryContext::oC_Return(size_t i) {
  return getRuleContext<CypherParser::OC_ReturnContext>(i);
}


size_t CypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularQuery;
}


CypherParser::OC_RegularQueryContext* CypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
  enterRule(_localctx, 118, CypherParser::RuleOC_RegularQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1302);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1281);
      oC_SingleQuery();
      setState(1288);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1283);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1282);
            match(CypherParser::SP);
          }
          setState(1285);
          oC_Union(); 
        }
        setState(1290);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1295); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1291);
                oC_Return();
                setState(1293);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1292);
                  match(CypherParser::SP);
                }
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1297); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1299);
      oC_SingleQuery();
       notifyReturnNotAtEnd(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

CypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnionContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnionContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}


size_t CypherParser::OC_UnionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Union;
}


CypherParser::OC_UnionContext* CypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
  enterRule(_localctx, 120, CypherParser::RuleOC_Union);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1316);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1304);
      match(CypherParser::UNION);
      setState(1305);
      match(CypherParser::SP);
      setState(1306);
      match(CypherParser::ALL);
      setState(1308);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1307);
        match(CypherParser::SP);
      }
      setState(1310);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1311);
      match(CypherParser::UNION);
      setState(1313);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1312);
        match(CypherParser::SP);
      }
      setState(1315);
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

CypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

CypherParser::OC_MultiPartQueryContext* CypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<CypherParser::OC_MultiPartQueryContext>(0);
}


size_t CypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SingleQuery;
}


CypherParser::OC_SingleQueryContext* CypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 122, CypherParser::RuleOC_SingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1320);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1318);
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1319);
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

CypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ReturnContext* CypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<CypherParser::OC_ReturnContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}


size_t CypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SinglePartQuery;
}


CypherParser::OC_SinglePartQueryContext* CypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
  enterRule(_localctx, 124, CypherParser::RuleOC_SinglePartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1357);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1328);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::CALL || ((((_la - 103) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 103)) & 1099511660553) != 0)) {
        setState(1322);
        oC_ReadingClause();
        setState(1324);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1323);
          match(CypherParser::SP);
        }
        setState(1330);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1331);
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1338);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::CALL || ((((_la - 103) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 103)) & 1099511660553) != 0)) {
        setState(1332);
        oC_ReadingClause();
        setState(1334);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1333);
          match(CypherParser::SP);
        }
        setState(1340);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1341);
      oC_UpdatingClause();
      setState(1348);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1343);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1342);
            match(CypherParser::SP);
          }
          setState(1345);
          oC_UpdatingClause(); 
        }
        setState(1350);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx);
      }
      setState(1355);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx)) {
      case 1: {
        setState(1352);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1351);
          match(CypherParser::SP);
        }
        setState(1354);
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

CypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<CypherParser::KU_QueryPartContext *> CypherParser::OC_MultiPartQueryContext::kU_QueryPart() {
  return getRuleContexts<CypherParser::KU_QueryPartContext>();
}

CypherParser::KU_QueryPartContext* CypherParser::OC_MultiPartQueryContext::kU_QueryPart(size_t i) {
  return getRuleContext<CypherParser::KU_QueryPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiPartQuery;
}


CypherParser::OC_MultiPartQueryContext* CypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
  enterRule(_localctx, 126, CypherParser::RuleOC_MultiPartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1363); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1359);
              kU_QueryPart();
              setState(1361);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(1360);
                match(CypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1365); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1367);
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_QueryPartContext ------------------------------------------------------------------

CypherParser::KU_QueryPartContext::KU_QueryPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_WithContext* CypherParser::KU_QueryPartContext::oC_With() {
  return getRuleContext<CypherParser::OC_WithContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::KU_QueryPartContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::KU_QueryPartContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::KU_QueryPartContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::KU_QueryPartContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_QueryPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_QueryPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_QueryPartContext::getRuleIndex() const {
  return CypherParser::RuleKU_QueryPart;
}


CypherParser::KU_QueryPartContext* CypherParser::kU_QueryPart() {
  KU_QueryPartContext *_localctx = _tracker.createInstance<KU_QueryPartContext>(_ctx, getState());
  enterRule(_localctx, 128, CypherParser::RuleKU_QueryPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1375);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::CALL || ((((_la - 103) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 103)) & 1099511660553) != 0)) {
      setState(1369);
      oC_ReadingClause();
      setState(1371);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1370);
        match(CypherParser::SP);
      }
      setState(1377);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1384);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 4611686568183202081) != 0)) {
      setState(1378);
      oC_UpdatingClause();
      setState(1380);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1379);
        match(CypherParser::SP);
      }
      setState(1386);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1387);
    oC_With();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

CypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_CreateContext* CypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<CypherParser::OC_CreateContext>(0);
}

CypherParser::OC_MergeContext* CypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<CypherParser::OC_MergeContext>(0);
}

CypherParser::OC_SetContext* CypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

CypherParser::OC_DeleteContext* CypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<CypherParser::OC_DeleteContext>(0);
}


size_t CypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpdatingClause;
}


CypherParser::OC_UpdatingClauseContext* CypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
  enterRule(_localctx, 130, CypherParser::RuleOC_UpdatingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1393);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
        setState(1389);
        oC_Create();
        break;
      }

      case CypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
        setState(1390);
        oC_Merge();
        break;
      }

      case CypherParser::SET: {
        enterOuterAlt(_localctx, 3);
        setState(1391);
        oC_Set();
        break;
      }

      case CypherParser::DELETE:
      case CypherParser::DETACH: {
        enterOuterAlt(_localctx, 4);
        setState(1392);
        oC_Delete();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

CypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_MatchContext* CypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<CypherParser::OC_MatchContext>(0);
}

CypherParser::OC_UnwindContext* CypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<CypherParser::OC_UnwindContext>(0);
}

CypherParser::KU_InQueryCallContext* CypherParser::OC_ReadingClauseContext::kU_InQueryCall() {
  return getRuleContext<CypherParser::KU_InQueryCallContext>(0);
}

CypherParser::KU_LoadFromContext* CypherParser::OC_ReadingClauseContext::kU_LoadFrom() {
  return getRuleContext<CypherParser::KU_LoadFromContext>(0);
}


size_t CypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_ReadingClause;
}


CypherParser::OC_ReadingClauseContext* CypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 132, CypherParser::RuleOC_ReadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1399);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::MATCH:
      case CypherParser::OPTIONAL: {
        enterOuterAlt(_localctx, 1);
        setState(1395);
        oC_Match();
        break;
      }

      case CypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
        setState(1396);
        oC_Unwind();
        break;
      }

      case CypherParser::CALL: {
        enterOuterAlt(_localctx, 3);
        setState(1397);
        kU_InQueryCall();
        break;
      }

      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 4);
        setState(1398);
        kU_LoadFrom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadFromContext ------------------------------------------------------------------

CypherParser::KU_LoadFromContext::KU_LoadFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_LoadFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::HEADERS() {
  return getToken(CypherParser::HEADERS, 0);
}

CypherParser::KU_ColumnDefinitionsContext* CypherParser::KU_LoadFromContext::kU_ColumnDefinitions() {
  return getRuleContext<CypherParser::KU_ColumnDefinitionsContext>(0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_LoadFromContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_LoadFromContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_LoadFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadFrom;
}


CypherParser::KU_LoadFromContext* CypherParser::kU_LoadFrom() {
  KU_LoadFromContext *_localctx = _tracker.createInstance<KU_LoadFromContext>(_ctx, getState());
  enterRule(_localctx, 134, CypherParser::RuleKU_LoadFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1401);
    match(CypherParser::LOAD);
    setState(1419);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
    case 1: {
      setState(1402);
      match(CypherParser::SP);
      setState(1403);
      match(CypherParser::WITH);
      setState(1404);
      match(CypherParser::SP);
      setState(1405);
      match(CypherParser::HEADERS);
      setState(1407);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1406);
        match(CypherParser::SP);
      }
      setState(1409);
      match(CypherParser::T__1);
      setState(1411);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1410);
        match(CypherParser::SP);
      }
      setState(1413);
      kU_ColumnDefinitions();
      setState(1415);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1414);
        match(CypherParser::SP);
      }
      setState(1417);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
    setState(1421);
    match(CypherParser::SP);
    setState(1422);
    match(CypherParser::FROM);
    setState(1423);
    match(CypherParser::SP);
    setState(1424);
    kU_ScanSource();
    setState(1438);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      setState(1426);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1425);
        match(CypherParser::SP);
      }
      setState(1428);
      match(CypherParser::T__1);
      setState(1430);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1429);
        match(CypherParser::SP);
      }
      setState(1432);
      kU_Options();
      setState(1434);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1433);
        match(CypherParser::SP);
      }
      setState(1436);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
    setState(1444);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
    case 1: {
      setState(1441);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1440);
        match(CypherParser::SP);
      }
      setState(1443);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InQueryCallContext ------------------------------------------------------------------

CypherParser::KU_InQueryCallContext::KU_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_InQueryCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::KU_InQueryCallContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_InQueryCallContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_InQueryCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_InQueryCall;
}


CypherParser::KU_InQueryCallContext* CypherParser::kU_InQueryCall() {
  KU_InQueryCallContext *_localctx = _tracker.createInstance<KU_InQueryCallContext>(_ctx, getState());
  enterRule(_localctx, 136, CypherParser::RuleKU_InQueryCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1446);
    match(CypherParser::CALL);
    setState(1447);
    match(CypherParser::SP);
    setState(1448);
    oC_FunctionInvocation();
    setState(1453);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx)) {
    case 1: {
      setState(1450);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1449);
        match(CypherParser::SP);
      }
      setState(1452);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

CypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MatchContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_MatchContext::OPTIONAL() {
  return getToken(CypherParser::OPTIONAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MatchContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_HintContext* CypherParser::OC_MatchContext::kU_Hint() {
  return getRuleContext<CypherParser::KU_HintContext>(0);
}


size_t CypherParser::OC_MatchContext::getRuleIndex() const {
  return CypherParser::RuleOC_Match;
}


CypherParser::OC_MatchContext* CypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
  enterRule(_localctx, 138, CypherParser::RuleOC_Match);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1457);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::OPTIONAL) {
      setState(1455);
      match(CypherParser::OPTIONAL);
      setState(1456);
      match(CypherParser::SP);
    }
    setState(1459);
    match(CypherParser::MATCH);
    setState(1461);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1460);
      match(CypherParser::SP);
    }
    setState(1463);
    oC_Pattern();
    setState(1466);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx)) {
    case 1: {
      setState(1464);
      match(CypherParser::SP);
      setState(1465);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(1470);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx)) {
    case 1: {
      setState(1468);
      match(CypherParser::SP);
      setState(1469);
      kU_Hint();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_HintContext ------------------------------------------------------------------

CypherParser::KU_HintContext::KU_HintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_HintContext::HINT() {
  return getToken(CypherParser::HINT, 0);
}

tree::TerminalNode* CypherParser::KU_HintContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_JoinNodeContext* CypherParser::KU_HintContext::kU_JoinNode() {
  return getRuleContext<CypherParser::KU_JoinNodeContext>(0);
}


size_t CypherParser::KU_HintContext::getRuleIndex() const {
  return CypherParser::RuleKU_Hint;
}


CypherParser::KU_HintContext* CypherParser::kU_Hint() {
  KU_HintContext *_localctx = _tracker.createInstance<KU_HintContext>(_ctx, getState());
  enterRule(_localctx, 140, CypherParser::RuleKU_Hint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1472);
    match(CypherParser::HINT);
    setState(1473);
    match(CypherParser::SP);
    setState(1474);
    kU_JoinNode(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_JoinNodeContext ------------------------------------------------------------------

CypherParser::KU_JoinNodeContext::KU_JoinNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_JoinNodeContext *> CypherParser::KU_JoinNodeContext::kU_JoinNode() {
  return getRuleContexts<CypherParser::KU_JoinNodeContext>();
}

CypherParser::KU_JoinNodeContext* CypherParser::KU_JoinNodeContext::kU_JoinNode(size_t i) {
  return getRuleContext<CypherParser::KU_JoinNodeContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_JoinNodeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_JoinNodeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_JoinNodeContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_JoinNodeContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_JoinNodeContext::JOIN() {
  return getToken(CypherParser::JOIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_JoinNodeContext::MULTI_JOIN() {
  return getTokens(CypherParser::MULTI_JOIN);
}

tree::TerminalNode* CypherParser::KU_JoinNodeContext::MULTI_JOIN(size_t i) {
  return getToken(CypherParser::MULTI_JOIN, i);
}


size_t CypherParser::KU_JoinNodeContext::getRuleIndex() const {
  return CypherParser::RuleKU_JoinNode;
}



CypherParser::KU_JoinNodeContext* CypherParser::kU_JoinNode() {
   return kU_JoinNode(0);
}

CypherParser::KU_JoinNodeContext* CypherParser::kU_JoinNode(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_JoinNodeContext *_localctx = _tracker.createInstance<KU_JoinNodeContext>(_ctx, parentState);
  CypherParser::KU_JoinNodeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 142;
  enterRecursionRule(_localctx, 142, CypherParser::RuleKU_JoinNode, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1488);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__1: {
        setState(1477);
        match(CypherParser::T__1);
        setState(1479);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1478);
          match(CypherParser::SP);
        }
        setState(1481);
        kU_JoinNode(0);
        setState(1483);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1482);
          match(CypherParser::SP);
        }
        setState(1485);
        match(CypherParser::T__2);
        break;
      }

      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1487);
        oC_SchemaName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(1506);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1504);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<KU_JoinNodeContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleKU_JoinNode);
          setState(1490);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(1491);
          match(CypherParser::SP);
          setState(1492);
          match(CypherParser::JOIN);
          setState(1493);
          match(CypherParser::SP);
          setState(1494);
          kU_JoinNode(5);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<KU_JoinNodeContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleKU_JoinNode);
          setState(1495);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1500); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(1496);
                    match(CypherParser::SP);
                    setState(1497);
                    match(CypherParser::MULTI_JOIN);
                    setState(1498);
                    match(CypherParser::SP);
                    setState(1499);
                    oC_SchemaName();
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(1502); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        default:
          break;
        } 
      }
      setState(1508);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

CypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnwindContext::UNWIND() {
  return getToken(CypherParser::UNWIND, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnwindContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_UnwindContext::getRuleIndex() const {
  return CypherParser::RuleOC_Unwind;
}


CypherParser::OC_UnwindContext* CypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
  enterRule(_localctx, 144, CypherParser::RuleOC_Unwind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1509);
    match(CypherParser::UNWIND);
    setState(1511);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1510);
      match(CypherParser::SP);
    }
    setState(1513);
    oC_Expression();
    setState(1514);
    match(CypherParser::SP);
    setState(1515);
    match(CypherParser::AS);
    setState(1516);
    match(CypherParser::SP);
    setState(1517);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

CypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CreateContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_CreateContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_CreateContext::getRuleIndex() const {
  return CypherParser::RuleOC_Create;
}


CypherParser::OC_CreateContext* CypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
  enterRule(_localctx, 146, CypherParser::RuleOC_Create);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1519);
    match(CypherParser::CREATE);
    setState(1521);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1520);
      match(CypherParser::SP);
    }
    setState(1523);
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

CypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MergeContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_MergeActionContext *> CypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<CypherParser::OC_MergeActionContext>();
}

CypherParser::OC_MergeActionContext* CypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<CypherParser::OC_MergeActionContext>(i);
}


size_t CypherParser::OC_MergeContext::getRuleIndex() const {
  return CypherParser::RuleOC_Merge;
}


CypherParser::OC_MergeContext* CypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
  enterRule(_localctx, 148, CypherParser::RuleOC_Merge);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1525);
    match(CypherParser::MERGE);
    setState(1527);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1526);
      match(CypherParser::SP);
    }
    setState(1529);
    oC_Pattern();
    setState(1534);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1530);
        match(CypherParser::SP);
        setState(1531);
        oC_MergeAction(); 
      }
      setState(1536);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

CypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::ON() {
  return getToken(CypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeActionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_SetContext* CypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}


size_t CypherParser::OC_MergeActionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MergeAction;
}


CypherParser::OC_MergeActionContext* CypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
  enterRule(_localctx, 150, CypherParser::RuleOC_MergeAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1547);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1537);
      match(CypherParser::ON);
      setState(1538);
      match(CypherParser::SP);
      setState(1539);
      match(CypherParser::MATCH);
      setState(1540);
      match(CypherParser::SP);
      setState(1541);
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1542);
      match(CypherParser::ON);
      setState(1543);
      match(CypherParser::SP);
      setState(1544);
      match(CypherParser::CREATE);
      setState(1545);
      match(CypherParser::SP);
      setState(1546);
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

CypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SetContext::SET() {
  return getToken(CypherParser::SET, 0);
}

std::vector<CypherParser::OC_SetItemContext *> CypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<CypherParser::OC_SetItemContext>();
}

CypherParser::OC_SetItemContext* CypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<CypherParser::OC_SetItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetContext::getRuleIndex() const {
  return CypherParser::RuleOC_Set;
}


CypherParser::OC_SetContext* CypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
  enterRule(_localctx, 152, CypherParser::RuleOC_Set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1549);
    match(CypherParser::SET);
    setState(1551);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1550);
      match(CypherParser::SP);
    }
    setState(1553);
    oC_SetItem();
    setState(1564);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1555);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1554);
          match(CypherParser::SP);
        }
        setState(1557);
        match(CypherParser::T__3);
        setState(1559);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1558);
          match(CypherParser::SP);
        }
        setState(1561);
        oC_SetItem(); 
      }
      setState(1566);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

CypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyExpressionContext* CypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<CypherParser::OC_PropertyExpressionContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SetItem;
}


CypherParser::OC_SetItemContext* CypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
  enterRule(_localctx, 154, CypherParser::RuleOC_SetItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1567);
    oC_PropertyExpression();
    setState(1569);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1568);
      match(CypherParser::SP);
    }
    setState(1571);
    match(CypherParser::T__5);
    setState(1573);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1572);
      match(CypherParser::SP);
    }
    setState(1575);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

CypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_DeleteContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_DeleteContext::getRuleIndex() const {
  return CypherParser::RuleOC_Delete;
}


CypherParser::OC_DeleteContext* CypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
  enterRule(_localctx, 156, CypherParser::RuleOC_Delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1579);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DETACH) {
      setState(1577);
      match(CypherParser::DETACH);
      setState(1578);
      match(CypherParser::SP);
    }
    setState(1581);
    match(CypherParser::DELETE);
    setState(1583);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1582);
      match(CypherParser::SP);
    }
    setState(1585);
    oC_Expression();
    setState(1596);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1587);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1586);
          match(CypherParser::SP);
        }
        setState(1589);
        match(CypherParser::T__3);
        setState(1591);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1590);
          match(CypherParser::SP);
        }
        setState(1593);
        oC_Expression(); 
      }
      setState(1598);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

CypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_WithContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_WithContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_WithContext::getRuleIndex() const {
  return CypherParser::RuleOC_With;
}


CypherParser::OC_WithContext* CypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
  enterRule(_localctx, 158, CypherParser::RuleOC_With);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1599);
    match(CypherParser::WITH);
    setState(1600);
    oC_ProjectionBody();
    setState(1605);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx)) {
    case 1: {
      setState(1602);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1601);
        match(CypherParser::SP);
      }
      setState(1604);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

CypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ReturnContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_ReturnContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}


size_t CypherParser::OC_ReturnContext::getRuleIndex() const {
  return CypherParser::RuleOC_Return;
}


CypherParser::OC_ReturnContext* CypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
  enterRule(_localctx, 160, CypherParser::RuleOC_Return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1607);
    match(CypherParser::RETURN);
    setState(1608);
    oC_ProjectionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionBodyContext ------------------------------------------------------------------

CypherParser::OC_ProjectionBodyContext::OC_ProjectionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionBodyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::OC_ProjectionBodyContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

CypherParser::OC_OrderContext* CypherParser::OC_ProjectionBodyContext::oC_Order() {
  return getRuleContext<CypherParser::OC_OrderContext>(0);
}

CypherParser::OC_SkipContext* CypherParser::OC_ProjectionBodyContext::oC_Skip() {
  return getRuleContext<CypherParser::OC_SkipContext>(0);
}

CypherParser::OC_LimitContext* CypherParser::OC_ProjectionBodyContext::oC_Limit() {
  return getRuleContext<CypherParser::OC_LimitContext>(0);
}


size_t CypherParser::OC_ProjectionBodyContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionBody;
}


CypherParser::OC_ProjectionBodyContext* CypherParser::oC_ProjectionBody() {
  OC_ProjectionBodyContext *_localctx = _tracker.createInstance<OC_ProjectionBodyContext>(_ctx, getState());
  enterRule(_localctx, 162, CypherParser::RuleOC_ProjectionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1614);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx)) {
    case 1: {
      setState(1611);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1610);
        match(CypherParser::SP);
      }
      setState(1613);
      match(CypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(1616);
    match(CypherParser::SP);
    setState(1617);
    oC_ProjectionItems();
    setState(1620);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 234, _ctx)) {
    case 1: {
      setState(1618);
      match(CypherParser::SP);
      setState(1619);
      oC_Order();
      break;
    }

    default:
      break;
    }
    setState(1624);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx)) {
    case 1: {
      setState(1622);
      match(CypherParser::SP);
      setState(1623);
      oC_Skip();
      break;
    }

    default:
      break;
    }
    setState(1628);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
    case 1: {
      setState(1626);
      match(CypherParser::SP);
      setState(1627);
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemsContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemsContext::OC_ProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<CypherParser::OC_ProjectionItemContext *> CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem() {
  return getRuleContexts<CypherParser::OC_ProjectionItemContext>();
}

CypherParser::OC_ProjectionItemContext* CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem(size_t i) {
  return getRuleContext<CypherParser::OC_ProjectionItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItems;
}


CypherParser::OC_ProjectionItemsContext* CypherParser::oC_ProjectionItems() {
  OC_ProjectionItemsContext *_localctx = _tracker.createInstance<OC_ProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 164, CypherParser::RuleOC_ProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1658);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1630);
        match(CypherParser::STAR);
        setState(1641);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 239, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1632);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1631);
              match(CypherParser::SP);
            }
            setState(1634);
            match(CypherParser::T__3);
            setState(1636);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1635);
              match(CypherParser::SP);
            }
            setState(1638);
            oC_ProjectionItem(); 
          }
          setState(1643);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 239, _ctx);
        }
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__6:
      case CypherParser::T__8:
      case CypherParser::T__25:
      case CypherParser::ANY:
      case CypherParser::ADD:
      case CypherParser::ALL:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CASE:
      case CypherParser::CAST:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXISTS:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::FALSE:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::NOT:
      case CypherParser::NONE:
      case CypherParser::NULL_:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TRUE:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::SINGLE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::MINUS:
      case CypherParser::StringLiteral:
      case CypherParser::DecimalInteger:
      case CypherParser::HexLetter:
      case CypherParser::ExponentDecimalReal:
      case CypherParser::RegularDecimalReal:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(1644);
        oC_ProjectionItem();
        setState(1655);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 242, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1646);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1645);
              match(CypherParser::SP);
            }
            setState(1648);
            match(CypherParser::T__3);
            setState(1650);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1649);
              match(CypherParser::SP);
            }
            setState(1652);
            oC_ProjectionItem(); 
          }
          setState(1657);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 242, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemContext::OC_ProjectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ProjectionItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_ProjectionItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_ProjectionItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItem;
}


CypherParser::OC_ProjectionItemContext* CypherParser::oC_ProjectionItem() {
  OC_ProjectionItemContext *_localctx = _tracker.createInstance<OC_ProjectionItemContext>(_ctx, getState());
  enterRule(_localctx, 166, CypherParser::RuleOC_ProjectionItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1667);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1660);
      oC_Expression();
      setState(1661);
      match(CypherParser::SP);
      setState(1662);
      match(CypherParser::AS);
      setState(1663);
      match(CypherParser::SP);
      setState(1664);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1666);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

CypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_OrderContext::ORDER() {
  return getToken(CypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrderContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_OrderContext::BY() {
  return getToken(CypherParser::BY, 0);
}

std::vector<CypherParser::OC_SortItemContext *> CypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<CypherParser::OC_SortItemContext>();
}

CypherParser::OC_SortItemContext* CypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<CypherParser::OC_SortItemContext>(i);
}


size_t CypherParser::OC_OrderContext::getRuleIndex() const {
  return CypherParser::RuleOC_Order;
}


CypherParser::OC_OrderContext* CypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
  enterRule(_localctx, 168, CypherParser::RuleOC_Order);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1669);
    match(CypherParser::ORDER);
    setState(1670);
    match(CypherParser::SP);
    setState(1671);
    match(CypherParser::BY);
    setState(1672);
    match(CypherParser::SP);
    setState(1673);
    oC_SortItem();
    setState(1681);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__3) {
      setState(1674);
      match(CypherParser::T__3);
      setState(1676);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1675);
        match(CypherParser::SP);
      }
      setState(1678);
      oC_SortItem();
      setState(1683);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

CypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SkipContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::OC_SkipContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_SkipContext::getRuleIndex() const {
  return CypherParser::RuleOC_Skip;
}


CypherParser::OC_SkipContext* CypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
  enterRule(_localctx, 170, CypherParser::RuleOC_Skip);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1684);
    match(CypherParser::L_SKIP);
    setState(1685);
    match(CypherParser::SP);
    setState(1686);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

CypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LimitContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::OC_LimitContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_LimitContext::getRuleIndex() const {
  return CypherParser::RuleOC_Limit;
}


CypherParser::OC_LimitContext* CypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
  enterRule(_localctx, 172, CypherParser::RuleOC_Limit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1688);
    match(CypherParser::LIMIT);
    setState(1689);
    match(CypherParser::SP);
    setState(1690);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

CypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(CypherParser::ASCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASC() {
  return getToken(CypherParser::ASC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(CypherParser::DESCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESC() {
  return getToken(CypherParser::DESC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_SortItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SortItem;
}


CypherParser::OC_SortItemContext* CypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
  enterRule(_localctx, 174, CypherParser::RuleOC_SortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1692);
    oC_Expression();
    setState(1697);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 248, _ctx)) {
    case 1: {
      setState(1694);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1693);
        match(CypherParser::SP);
      }
      setState(1696);
      _la = _input->LA(1);
      if (!(((((_la - 53) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 53)) & 12582915) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

CypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WhereContext::WHERE() {
  return getToken(CypherParser::WHERE, 0);
}

tree::TerminalNode* CypherParser::OC_WhereContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_WhereContext::getRuleIndex() const {
  return CypherParser::RuleOC_Where;
}


CypherParser::OC_WhereContext* CypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
  enterRule(_localctx, 176, CypherParser::RuleOC_Where);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1699);
    match(CypherParser::WHERE);
    setState(1700);
    match(CypherParser::SP);
    setState(1701);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

CypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PatternPartContext *> CypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<CypherParser::OC_PatternPartContext>();
}

CypherParser::OC_PatternPartContext* CypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<CypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_Pattern;
}


CypherParser::OC_PatternContext* CypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
  enterRule(_localctx, 178, CypherParser::RuleOC_Pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1703);
    oC_PatternPart();
    setState(1714);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1705);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1704);
          match(CypherParser::SP);
        }
        setState(1707);
        match(CypherParser::T__3);
        setState(1709);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1708);
          match(CypherParser::SP);
        }
        setState(1711);
        oC_PatternPart(); 
      }
      setState(1716);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

CypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_AnonymousPatternPartContext* CypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<CypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternPart;
}


CypherParser::OC_PatternPartContext* CypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
  enterRule(_localctx, 180, CypherParser::RuleOC_PatternPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1728);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1717);
        oC_Variable();
        setState(1719);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1718);
          match(CypherParser::SP);
        }
        setState(1721);
        match(CypherParser::T__5);
        setState(1723);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1722);
          match(CypherParser::SP);
        }
        setState(1725);
        oC_AnonymousPatternPart();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(1727);
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

CypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PatternElementContext* CypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnonymousPatternPart;
}


CypherParser::OC_AnonymousPatternPartContext* CypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
  enterRule(_localctx, 182, CypherParser::RuleOC_AnonymousPatternPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1730);
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

CypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternElementContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PatternElementContext* CypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_PatternElementContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElement;
}


CypherParser::OC_PatternElementContext* CypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 184, CypherParser::RuleOC_PatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1746);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1732);
      oC_NodePattern();
      setState(1739);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1734);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1733);
            match(CypherParser::SP);
          }
          setState(1736);
          oC_PatternElementChain(); 
        }
        setState(1741);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1742);
      match(CypherParser::T__1);
      setState(1743);
      oC_PatternElement();
      setState(1744);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

CypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodePatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_NodePatternContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_NodePatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodePattern;
}


CypherParser::OC_NodePatternContext* CypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 186, CypherParser::RuleOC_NodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1748);
    match(CypherParser::T__1);
    setState(1750);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1749);
      match(CypherParser::SP);
    }
    setState(1756);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & -4761777667909507179) != 0) || ((((_la - 112) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 112)) & 1297602465103738881) != 0)) {
      setState(1752);
      oC_Variable();
      setState(1754);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1753);
        match(CypherParser::SP);
      }
    }
    setState(1762);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1758);
      oC_NodeLabels();
      setState(1760);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1759);
        match(CypherParser::SP);
      }
    }
    setState(1768);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1764);
      kU_Properties();
      setState(1766);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1765);
        match(CypherParser::SP);
      }
    }
    setState(1770);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

CypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RelationshipPatternContext* CypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<CypherParser::OC_RelationshipPatternContext>(0);
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_PatternElementChainContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElementChain;
}


CypherParser::OC_PatternElementChainContext* CypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
  enterRule(_localctx, 188, CypherParser::RuleOC_PatternElementChain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1772);
    oC_RelationshipPattern();
    setState(1774);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1773);
      match(CypherParser::SP);
    }
    setState(1776);
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

CypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LeftArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<CypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<CypherParser::OC_DashContext *> CypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<CypherParser::OC_DashContext>();
}

CypherParser::OC_DashContext* CypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<CypherParser::OC_DashContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_RelationshipDetailContext* CypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<CypherParser::OC_RelationshipDetailContext>(0);
}

CypherParser::OC_RightArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<CypherParser::OC_RightArrowHeadContext>(0);
}


size_t CypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipPattern;
}


CypherParser::OC_RelationshipPatternContext* CypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
  enterRule(_localctx, 190, CypherParser::RuleOC_RelationshipPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1822);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1778);
      oC_LeftArrowHead();
      setState(1780);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1779);
        match(CypherParser::SP);
      }
      setState(1782);
      oC_Dash();
      setState(1784);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 267, _ctx)) {
      case 1: {
        setState(1783);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1787);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1786);
        oC_RelationshipDetail();
      }
      setState(1790);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1789);
        match(CypherParser::SP);
      }
      setState(1792);
      oC_Dash();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1794);
      oC_Dash();
      setState(1796);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 270, _ctx)) {
      case 1: {
        setState(1795);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1799);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1798);
        oC_RelationshipDetail();
      }
      setState(1802);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1801);
        match(CypherParser::SP);
      }
      setState(1804);
      oC_Dash();
      setState(1806);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1805);
        match(CypherParser::SP);
      }
      setState(1808);
      oC_RightArrowHead();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1810);
      oC_Dash();
      setState(1812);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 274, _ctx)) {
      case 1: {
        setState(1811);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1815);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1814);
        oC_RelationshipDetail();
      }
      setState(1818);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1817);
        match(CypherParser::SP);
      }
      setState(1820);
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

CypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_RelationshipTypesContext* CypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<CypherParser::OC_RelationshipTypesContext>(0);
}

CypherParser::OC_RangeLiteralContext* CypherParser::OC_RelationshipDetailContext::oC_RangeLiteral() {
  return getRuleContext<CypherParser::OC_RangeLiteralContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_RelationshipDetailContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipDetail;
}


CypherParser::OC_RelationshipDetailContext* CypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
  enterRule(_localctx, 192, CypherParser::RuleOC_RelationshipDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1824);
    match(CypherParser::T__6);
    setState(1826);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1825);
      match(CypherParser::SP);
    }
    setState(1832);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & -4761777667909507179) != 0) || ((((_la - 112) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 112)) & 1297602465103738881) != 0)) {
      setState(1828);
      oC_Variable();
      setState(1830);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1829);
        match(CypherParser::SP);
      }
    }
    setState(1838);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1834);
      oC_RelationshipTypes();
      setState(1836);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1835);
        match(CypherParser::SP);
      }
    }
    setState(1844);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::STAR) {
      setState(1840);
      oC_RangeLiteral();
      setState(1842);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1841);
        match(CypherParser::SP);
      }
    }
    setState(1850);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1846);
      kU_Properties();
      setState(1848);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1847);
        match(CypherParser::SP);
      }
    }
    setState(1852);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertiesContext ------------------------------------------------------------------

CypherParser::KU_PropertiesContext::KU_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_PropertiesContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertiesContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::KU_PropertiesContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::KU_PropertiesContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::KU_PropertiesContext::getRuleIndex() const {
  return CypherParser::RuleKU_Properties;
}


CypherParser::KU_PropertiesContext* CypherParser::kU_Properties() {
  KU_PropertiesContext *_localctx = _tracker.createInstance<KU_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 194, CypherParser::RuleKU_Properties);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1854);
    match(CypherParser::T__8);
    setState(1856);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1855);
      match(CypherParser::SP);
    }
    setState(1891);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & -4761777667909507179) != 0) || ((((_la - 112) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 112)) & 1297602465103738881) != 0)) {
      setState(1858);
      oC_PropertyKeyName();
      setState(1860);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1859);
        match(CypherParser::SP);
      }
      setState(1862);
      match(CypherParser::COLON);
      setState(1864);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1863);
        match(CypherParser::SP);
      }
      setState(1866);
      oC_Expression();
      setState(1868);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1867);
        match(CypherParser::SP);
      }
      setState(1888);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__3) {
        setState(1870);
        match(CypherParser::T__3);
        setState(1872);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1871);
          match(CypherParser::SP);
        }
        setState(1874);
        oC_PropertyKeyName();
        setState(1876);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1875);
          match(CypherParser::SP);
        }
        setState(1878);
        match(CypherParser::COLON);
        setState(1880);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1879);
          match(CypherParser::SP);
        }
        setState(1882);
        oC_Expression();
        setState(1884);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1883);
          match(CypherParser::SP);
        }
        setState(1890);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1893);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

CypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_RelTypeNameContext *> CypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<CypherParser::OC_RelTypeNameContext>();
}

CypherParser::OC_RelTypeNameContext* CypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<CypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipTypes;
}


CypherParser::OC_RelationshipTypesContext* CypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
  enterRule(_localctx, 196, CypherParser::RuleOC_RelationshipTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1895);
    match(CypherParser::COLON);
    setState(1897);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1896);
      match(CypherParser::SP);
    }
    setState(1899);
    oC_RelTypeName();
    setState(1913);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1901);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1900);
          match(CypherParser::SP);
        }
        setState(1903);
        match(CypherParser::T__10);
        setState(1905);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::COLON) {
          setState(1904);
          match(CypherParser::COLON);
        }
        setState(1908);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1907);
          match(CypherParser::SP);
        }
        setState(1910);
        oC_RelTypeName(); 
      }
      setState(1915);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NodeLabelContext *> CypherParser::OC_NodeLabelsContext::oC_NodeLabel() {
  return getRuleContexts<CypherParser::OC_NodeLabelContext>();
}

CypherParser::OC_NodeLabelContext* CypherParser::OC_NodeLabelsContext::oC_NodeLabel(size_t i) {
  return getRuleContext<CypherParser::OC_NodeLabelContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabels;
}


CypherParser::OC_NodeLabelsContext* CypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
  enterRule(_localctx, 198, CypherParser::RuleOC_NodeLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1916);
    oC_NodeLabel();
    setState(1923);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 303, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1918);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1917);
          match(CypherParser::SP);
        }
        setState(1920);
        oC_NodeLabel(); 
      }
      setState(1925);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 303, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelContext::OC_NodeLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LabelNameContext* CypherParser::OC_NodeLabelContext::oC_LabelName() {
  return getRuleContext<CypherParser::OC_LabelNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_NodeLabelContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabel;
}


CypherParser::OC_NodeLabelContext* CypherParser::oC_NodeLabel() {
  OC_NodeLabelContext *_localctx = _tracker.createInstance<OC_NodeLabelContext>(_ctx, getState());
  enterRule(_localctx, 200, CypherParser::RuleOC_NodeLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1926);
    match(CypherParser::COLON);
    setState(1928);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1927);
      match(CypherParser::SP);
    }
    setState(1930);
    oC_LabelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

CypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SHORTEST() {
  return getToken(CypherParser::SHORTEST, 0);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::TRAIL() {
  return getToken(CypherParser::TRAIL, 0);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::ACYCLIC() {
  return getToken(CypherParser::ACYCLIC, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::OC_RangeLiteralContext::kU_RecursiveRelationshipComprehension() {
  return getRuleContext<CypherParser::KU_RecursiveRelationshipComprehensionContext>(0);
}

CypherParser::OC_LowerBoundContext* CypherParser::OC_RangeLiteralContext::oC_LowerBound() {
  return getRuleContext<CypherParser::OC_LowerBoundContext>(0);
}

CypherParser::OC_UpperBoundContext* CypherParser::OC_RangeLiteralContext::oC_UpperBound() {
  return getRuleContext<CypherParser::OC_UpperBoundContext>(0);
}


size_t CypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_RangeLiteral;
}


CypherParser::OC_RangeLiteralContext* CypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 202, CypherParser::RuleOC_RangeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1932);
    match(CypherParser::STAR);
    setState(1934);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx)) {
    case 1: {
      setState(1933);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1942);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(1936);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::ALL: {
        setState(1937);
        match(CypherParser::ALL);
        setState(1938);
        match(CypherParser::SP);
        setState(1939);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::TRAIL: {
        setState(1940);
        match(CypherParser::TRAIL);
        break;
      }

      case CypherParser::ACYCLIC: {
        setState(1941);
        match(CypherParser::ACYCLIC);
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__7:
      case CypherParser::T__8:
      case CypherParser::T__11:
      case CypherParser::DecimalInteger:
      case CypherParser::SP: {
        break;
      }

    default:
      break;
    }
    setState(1945);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx)) {
    case 1: {
      setState(1944);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1961);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 312, _ctx)) {
    case 1: {
      setState(1948);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(1947);
        oC_LowerBound();
      }
      setState(1951);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1950);
        match(CypherParser::SP);
      }
      setState(1953);
      match(CypherParser::T__11);
      setState(1955);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx)) {
      case 1: {
        setState(1954);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1958);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(1957);
        oC_UpperBound();
      }
      break;
    }

    case 2: {
      setState(1960);
      oC_IntegerLiteral();
      break;
    }

    default:
      break;
    }
    setState(1967);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx)) {
    case 1: {
      setState(1964);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1963);
        match(CypherParser::SP);
      }
      setState(1966);
      kU_RecursiveRelationshipComprehension();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RecursiveRelationshipComprehensionContext ------------------------------------------------------------------

CypherParser::KU_RecursiveRelationshipComprehensionContext::KU_RecursiveRelationshipComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_VariableContext *> CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable() {
  return getRuleContexts<CypherParser::OC_VariableContext>();
}

CypherParser::OC_VariableContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable(size_t i) {
  return getRuleContext<CypherParser::OC_VariableContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RecursiveRelationshipComprehensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RecursiveRelationshipComprehensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateRelProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateRelProjectionItemsContext>(0);
}

CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateNodeProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateNodeProjectionItemsContext>(0);
}


size_t CypherParser::KU_RecursiveRelationshipComprehensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RecursiveRelationshipComprehension;
}


CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::kU_RecursiveRelationshipComprehension() {
  KU_RecursiveRelationshipComprehensionContext *_localctx = _tracker.createInstance<KU_RecursiveRelationshipComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 204, CypherParser::RuleKU_RecursiveRelationshipComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1969);
    match(CypherParser::T__1);
    setState(1971);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1970);
      match(CypherParser::SP);
    }
    setState(1973);
    oC_Variable();
    setState(1975);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1974);
      match(CypherParser::SP);
    }
    setState(1977);
    match(CypherParser::T__3);
    setState(1979);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1978);
      match(CypherParser::SP);
    }
    setState(1981);
    oC_Variable();
    setState(1993);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx)) {
    case 1: {
      setState(1983);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1982);
        match(CypherParser::SP);
      }
      setState(1985);
      match(CypherParser::T__10);
      setState(1987);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1986);
        match(CypherParser::SP);
      }
      setState(1989);
      oC_Where();
      setState(1991);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx)) {
      case 1: {
        setState(1990);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    setState(2014);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__10 || _la == CypherParser::SP) {
      setState(1996);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1995);
        match(CypherParser::SP);
      }
      setState(1998);
      match(CypherParser::T__10);
      setState(2000);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1999);
        match(CypherParser::SP);
      }
      setState(2002);
      kU_IntermediateRelProjectionItems();
      setState(2004);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2003);
        match(CypherParser::SP);
      }
      setState(2006);
      match(CypherParser::T__3);
      setState(2008);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2007);
        match(CypherParser::SP);
      }
      setState(2010);
      kU_IntermediateNodeProjectionItems();
      setState(2012);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2011);
        match(CypherParser::SP);
      }
    }
    setState(2016);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateNodeProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateNodeProjectionItemsContext::KU_IntermediateNodeProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateNodeProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateNodeProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateNodeProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateNodeProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateNodeProjectionItems;
}


CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::kU_IntermediateNodeProjectionItems() {
  KU_IntermediateNodeProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateNodeProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 206, CypherParser::RuleKU_IntermediateNodeProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2018);
    match(CypherParser::T__8);
    setState(2020);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx)) {
    case 1: {
      setState(2019);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2023);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4641100153426541948) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -572029811628137251) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 21454633646125) != 0)) {
      setState(2022);
      oC_ProjectionItems();
    }
    setState(2026);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2025);
      match(CypherParser::SP);
    }
    setState(2028);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateRelProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateRelProjectionItemsContext::KU_IntermediateRelProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateRelProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateRelProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateRelProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateRelProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateRelProjectionItems;
}


CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::kU_IntermediateRelProjectionItems() {
  KU_IntermediateRelProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateRelProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 208, CypherParser::RuleKU_IntermediateRelProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2030);
    match(CypherParser::T__8);
    setState(2032);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx)) {
    case 1: {
      setState(2031);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2035);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4641100153426541948) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -572029811628137251) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 21454633646125) != 0)) {
      setState(2034);
      oC_ProjectionItems();
    }
    setState(2038);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2037);
      match(CypherParser::SP);
    }
    setState(2040);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LowerBoundContext ------------------------------------------------------------------

CypherParser::OC_LowerBoundContext::OC_LowerBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LowerBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_LowerBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_LowerBound;
}


CypherParser::OC_LowerBoundContext* CypherParser::oC_LowerBound() {
  OC_LowerBoundContext *_localctx = _tracker.createInstance<OC_LowerBoundContext>(_ctx, getState());
  enterRule(_localctx, 210, CypherParser::RuleOC_LowerBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2042);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpperBoundContext ------------------------------------------------------------------

CypherParser::OC_UpperBoundContext::OC_UpperBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UpperBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_UpperBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpperBound;
}


CypherParser::OC_UpperBoundContext* CypherParser::oC_UpperBound() {
  OC_UpperBoundContext *_localctx = _tracker.createInstance<OC_UpperBoundContext>(_ctx, getState());
  enterRule(_localctx, 212, CypherParser::RuleOC_UpperBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2044);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

CypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_LabelNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_LabelName;
}


CypherParser::OC_LabelNameContext* CypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 214, CypherParser::RuleOC_LabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2046);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

CypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelTypeName;
}


CypherParser::OC_RelTypeNameContext* CypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 216, CypherParser::RuleOC_RelTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2048);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

CypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_OrExpressionContext* CypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<CypherParser::OC_OrExpressionContext>(0);
}


size_t CypherParser::OC_ExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Expression;
}


CypherParser::OC_ExpressionContext* CypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 218, CypherParser::RuleOC_Expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2050);
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

CypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_XorExpressionContext *> CypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<CypherParser::OC_XorExpressionContext>();
}

CypherParser::OC_XorExpressionContext* CypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::OR() {
  return getTokens(CypherParser::OR);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(CypherParser::OR, i);
}


size_t CypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_OrExpression;
}


CypherParser::OC_OrExpressionContext* CypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 220, CypherParser::RuleOC_OrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2052);
    oC_XorExpression();
    setState(2059);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2053);
        match(CypherParser::SP);
        setState(2054);
        match(CypherParser::OR);
        setState(2055);
        match(CypherParser::SP);
        setState(2056);
        oC_XorExpression(); 
      }
      setState(2061);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

CypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AndExpressionContext *> CypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<CypherParser::OC_AndExpressionContext>();
}

CypherParser::OC_AndExpressionContext* CypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(CypherParser::XOR);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(CypherParser::XOR, i);
}


size_t CypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_XorExpression;
}


CypherParser::OC_XorExpressionContext* CypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 222, CypherParser::RuleOC_XorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2062);
    oC_AndExpression();
    setState(2069);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2063);
        match(CypherParser::SP);
        setState(2064);
        match(CypherParser::XOR);
        setState(2065);
        match(CypherParser::SP);
        setState(2066);
        oC_AndExpression(); 
      }
      setState(2071);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

CypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NotExpressionContext *> CypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<CypherParser::OC_NotExpressionContext>();
}

CypherParser::OC_NotExpressionContext* CypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<CypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::AND() {
  return getTokens(CypherParser::AND);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(CypherParser::AND, i);
}


size_t CypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AndExpression;
}


CypherParser::OC_AndExpressionContext* CypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 224, CypherParser::RuleOC_AndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2072);
    oC_NotExpression();
    setState(2079);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2073);
        match(CypherParser::SP);
        setState(2074);
        match(CypherParser::AND);
        setState(2075);
        match(CypherParser::SP);
        setState(2076);
        oC_NotExpression(); 
      }
      setState(2081);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

CypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ComparisonExpressionContext* CypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<CypherParser::OC_ComparisonExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::NOT() {
  return getTokens(CypherParser::NOT);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::NOT(size_t i) {
  return getToken(CypherParser::NOT, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NotExpression;
}


CypherParser::OC_NotExpressionContext* CypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
  enterRule(_localctx, 226, CypherParser::RuleOC_NotExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2088);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::NOT) {
      setState(2082);
      match(CypherParser::NOT);
      setState(2084);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2083);
        match(CypherParser::SP);
      }
      setState(2090);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2091);
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

CypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseOrOperatorExpressionContext *> CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseOrOperatorExpressionContext>();
}

CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseOrOperatorExpressionContext>(i);
}

std::vector<CypherParser::KU_ComparisonOperatorContext *> CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator() {
  return getRuleContexts<CypherParser::KU_ComparisonOperatorContext>();
}

CypherParser::KU_ComparisonOperatorContext* CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator(size_t i) {
  return getRuleContext<CypherParser::KU_ComparisonOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::INVALID_NOT_EQUAL() {
  return getToken(CypherParser::INVALID_NOT_EQUAL, 0);
}


size_t CypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ComparisonExpression;
}


CypherParser::OC_ComparisonExpressionContext* CypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 228, CypherParser::RuleOC_ComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2141);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 349, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2093);
      kU_BitwiseOrOperatorExpression();
      setState(2103);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx)) {
      case 1: {
        setState(2095);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2094);
          match(CypherParser::SP);
        }
        setState(2097);
        kU_ComparisonOperator();
        setState(2099);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2098);
          match(CypherParser::SP);
        }
        setState(2101);
        kU_BitwiseOrOperatorExpression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2105);
      kU_BitwiseOrOperatorExpression();

      setState(2107);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2106);
        match(CypherParser::SP);
      }
      setState(2109);
      antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken = match(CypherParser::INVALID_NOT_EQUAL);
      setState(2111);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2110);
        match(CypherParser::SP);
      }
      setState(2113);
      kU_BitwiseOrOperatorExpression();
       notifyInvalidNotEqualOperator(antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken); 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2117);
      kU_BitwiseOrOperatorExpression();
      setState(2119);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2118);
        match(CypherParser::SP);
      }
      setState(2121);
      kU_ComparisonOperator();
      setState(2123);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2122);
        match(CypherParser::SP);
      }
      setState(2125);
      kU_BitwiseOrOperatorExpression();
      setState(2135); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2127);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2126);
                  match(CypherParser::SP);
                }
                setState(2129);
                kU_ComparisonOperator();
                setState(2131);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2130);
                  match(CypherParser::SP);
                }
                setState(2133);
                kU_BitwiseOrOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2137); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
       notifyNonBinaryComparison(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ComparisonOperatorContext ------------------------------------------------------------------

CypherParser::KU_ComparisonOperatorContext::KU_ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_ComparisonOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_ComparisonOperator;
}


CypherParser::KU_ComparisonOperatorContext* CypherParser::kU_ComparisonOperator() {
  KU_ComparisonOperatorContext *_localctx = _tracker.createInstance<KU_ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 230, CypherParser::RuleKU_ComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2143);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 254016) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseOrOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseOrOperatorExpressionContext::KU_BitwiseOrOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseAndOperatorExpressionContext *> CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseAndOperatorExpressionContext>();
}

CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseAndOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseOrOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseOrOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseOrOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseOrOperatorExpression;
}


CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::kU_BitwiseOrOperatorExpression() {
  KU_BitwiseOrOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseOrOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 232, CypherParser::RuleKU_BitwiseOrOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2145);
    kU_BitwiseAndOperatorExpression();
    setState(2156);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 352, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2147);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2146);
          match(CypherParser::SP);
        }
        setState(2149);
        match(CypherParser::T__10);
        setState(2151);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2150);
          match(CypherParser::SP);
        }
        setState(2153);
        kU_BitwiseAndOperatorExpression(); 
      }
      setState(2158);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 352, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseAndOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseAndOperatorExpressionContext::KU_BitwiseAndOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitShiftOperatorExpressionContext *> CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorExpressionContext>();
}

CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseAndOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseAndOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseAndOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseAndOperatorExpression;
}


CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::kU_BitwiseAndOperatorExpression() {
  KU_BitwiseAndOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseAndOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 234, CypherParser::RuleKU_BitwiseAndOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2159);
    kU_BitShiftOperatorExpression();
    setState(2170);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 355, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2161);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2160);
          match(CypherParser::SP);
        }
        setState(2163);
        match(CypherParser::T__17);
        setState(2165);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2164);
          match(CypherParser::SP);
        }
        setState(2167);
        kU_BitShiftOperatorExpression(); 
      }
      setState(2172);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 355, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorExpressionContext::KU_BitShiftOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AddOrSubtractExpressionContext *> CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContexts<CypherParser::OC_AddOrSubtractExpressionContext>();
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AddOrSubtractExpressionContext>(i);
}

std::vector<CypherParser::KU_BitShiftOperatorContext *> CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorContext>();
}

CypherParser::KU_BitShiftOperatorContext* CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitShiftOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitShiftOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitShiftOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperatorExpression;
}


CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::kU_BitShiftOperatorExpression() {
  KU_BitShiftOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 236, CypherParser::RuleKU_BitShiftOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2173);
    oC_AddOrSubtractExpression();
    setState(2185);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 358, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2175);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2174);
          match(CypherParser::SP);
        }
        setState(2177);
        kU_BitShiftOperator();
        setState(2179);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2178);
          match(CypherParser::SP);
        }
        setState(2181);
        oC_AddOrSubtractExpression(); 
      }
      setState(2187);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 358, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorContext::KU_BitShiftOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_BitShiftOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperator;
}


CypherParser::KU_BitShiftOperatorContext* CypherParser::kU_BitShiftOperator() {
  KU_BitShiftOperatorContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorContext>(_ctx, getState());
  enterRule(_localctx, 238, CypherParser::RuleKU_BitShiftOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2188);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__18

    || _la == CypherParser::T__19)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

CypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_MultiplyDivideModuloExpressionContext *> CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<CypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<CypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<CypherParser::KU_AddOrSubtractOperatorContext *> CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator() {
  return getRuleContexts<CypherParser::KU_AddOrSubtractOperatorContext>();
}

CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator(size_t i) {
  return getRuleContext<CypherParser::KU_AddOrSubtractOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AddOrSubtractExpression;
}


CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 240, CypherParser::RuleOC_AddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2190);
    oC_MultiplyDivideModuloExpression();
    setState(2202);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 361, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2192);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2191);
          match(CypherParser::SP);
        }
        setState(2194);
        kU_AddOrSubtractOperator();
        setState(2196);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2195);
          match(CypherParser::SP);
        }
        setState(2198);
        oC_MultiplyDivideModuloExpression(); 
      }
      setState(2204);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 361, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddOrSubtractOperatorContext ------------------------------------------------------------------

CypherParser::KU_AddOrSubtractOperatorContext::KU_AddOrSubtractOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddOrSubtractOperatorContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_AddOrSubtractOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddOrSubtractOperator;
}


CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::kU_AddOrSubtractOperator() {
  KU_AddOrSubtractOperatorContext *_localctx = _tracker.createInstance<KU_AddOrSubtractOperatorContext>(_ctx, getState());
  enterRule(_localctx, 242, CypherParser::RuleKU_AddOrSubtractOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2205);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__20 || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

CypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PowerOfExpressionContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<CypherParser::OC_PowerOfExpressionContext>();
}

CypherParser::OC_PowerOfExpressionContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<CypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<CypherParser::KU_MultiplyDivideModuloOperatorContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator() {
  return getRuleContexts<CypherParser::KU_MultiplyDivideModuloOperatorContext>();
}

CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator(size_t i) {
  return getRuleContext<CypherParser::KU_MultiplyDivideModuloOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiplyDivideModuloExpression;
}


CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
  enterRule(_localctx, 244, CypherParser::RuleOC_MultiplyDivideModuloExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2207);
    oC_PowerOfExpression();
    setState(2219);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 364, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2209);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2208);
          match(CypherParser::SP);
        }
        setState(2211);
        kU_MultiplyDivideModuloOperator();
        setState(2213);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2212);
          match(CypherParser::SP);
        }
        setState(2215);
        oC_PowerOfExpression(); 
      }
      setState(2221);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 364, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MultiplyDivideModuloOperatorContext ------------------------------------------------------------------

CypherParser::KU_MultiplyDivideModuloOperatorContext::KU_MultiplyDivideModuloOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MultiplyDivideModuloOperatorContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}


size_t CypherParser::KU_MultiplyDivideModuloOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_MultiplyDivideModuloOperator;
}


CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::kU_MultiplyDivideModuloOperator() {
  KU_MultiplyDivideModuloOperatorContext *_localctx = _tracker.createInstance<KU_MultiplyDivideModuloOperatorContext>(_ctx, getState());
  enterRule(_localctx, 246, CypherParser::RuleKU_MultiplyDivideModuloOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2222);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__21

    || _la == CypherParser::T__22 || _la == CypherParser::STAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

CypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext *> CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression() {
  return getRuleContexts<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>();
}

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression(size_t i) {
  return getRuleContext<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PowerOfExpression;
}


CypherParser::OC_PowerOfExpressionContext* CypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
  enterRule(_localctx, 248, CypherParser::RuleOC_PowerOfExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2224);
    oC_UnaryAddSubtractOrFactorialExpression();
    setState(2235);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 367, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2226);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2225);
          match(CypherParser::SP);
        }
        setState(2228);
        match(CypherParser::T__23);
        setState(2230);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2229);
          match(CypherParser::SP);
        }
        setState(2232);
        oC_UnaryAddSubtractOrFactorialExpression(); 
      }
      setState(2237);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 367, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddSubtractOrFactorialExpressionContext ------------------------------------------------------------------

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::OC_UnaryAddSubtractOrFactorialExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::oC_StringListNullOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringListNullOperatorExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS() {
  return getTokens(CypherParser::MINUS);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS(size_t i) {
  return getToken(CypherParser::MINUS, i);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::FACTORIAL() {
  return getToken(CypherParser::FACTORIAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression;
}


CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::oC_UnaryAddSubtractOrFactorialExpression() {
  OC_UnaryAddSubtractOrFactorialExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddSubtractOrFactorialExpressionContext>(_ctx, getState());
  enterRule(_localctx, 250, CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2244);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::MINUS) {
      setState(2238);
      match(CypherParser::MINUS);
      setState(2240);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2239);
        match(CypherParser::SP);
      }
      setState(2246);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2247);
    oC_StringListNullOperatorExpression();
    setState(2252);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 371, _ctx)) {
    case 1: {
      setState(2249);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2248);
        match(CypherParser::SP);
      }
      setState(2251);
      match(CypherParser::FACTORIAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringListNullOperatorExpressionContext::OC_StringListNullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_StringOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringOperatorExpressionContext>(0);
}

CypherParser::OC_NullOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression() {
  return getRuleContext<CypherParser::OC_NullOperatorExpressionContext>(0);
}

std::vector<CypherParser::OC_ListOperatorExpressionContext *> CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<CypherParser::OC_ListOperatorExpressionContext>();
}

CypherParser::OC_ListOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_ListOperatorExpressionContext>(i);
}


size_t CypherParser::OC_StringListNullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringListNullOperatorExpression;
}


CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::oC_StringListNullOperatorExpression() {
  OC_StringListNullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 252, CypherParser::RuleOC_StringListNullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2254);
    oC_PropertyOrLabelsExpression();
    setState(2262);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 373, _ctx)) {
    case 1: {
      setState(2255);
      oC_StringOperatorExpression();
      break;
    }

    case 2: {
      setState(2257); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2256);
                oC_ListOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2259); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 372, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 3: {
      setState(2261);
      oC_NullOperatorExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::IN() {
  return getToken(CypherParser::IN, 0);
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_ListOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}


size_t CypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListOperatorExpression;
}


CypherParser::OC_ListOperatorExpressionContext* CypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 254, CypherParser::RuleOC_ListOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2283);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 377, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2264);
      match(CypherParser::SP);
      setState(2265);
      match(CypherParser::IN);
      setState(2267);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2266);
        match(CypherParser::SP);
      }
      setState(2269);
      oC_PropertyOrLabelsExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2270);
      match(CypherParser::T__6);
      setState(2271);
      oC_Expression();
      setState(2272);
      match(CypherParser::T__7);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2274);
      match(CypherParser::T__6);
      setState(2276);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4641100153426541948) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -572029811628137251) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 21454616868909) != 0)) {
        setState(2275);
        oC_Expression();
      }
      setState(2278);
      match(CypherParser::COLON);
      setState(2280);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4641100153426541948) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -572029811628137251) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 21454616868909) != 0)) {
        setState(2279);
        oC_Expression();
      }
      setState(2282);
      match(CypherParser::T__7);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringOperatorExpressionContext::OC_StringOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_RegularExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_RegularExpression() {
  return getRuleContext<CypherParser::OC_RegularExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_StringOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::STARTS() {
  return getToken(CypherParser::STARTS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::ENDS() {
  return getToken(CypherParser::ENDS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}


size_t CypherParser::OC_StringOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringOperatorExpression;
}


CypherParser::OC_StringOperatorExpressionContext* CypherParser::oC_StringOperatorExpression() {
  OC_StringOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 256, CypherParser::RuleOC_StringOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2296);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 378, _ctx)) {
    case 1: {
      setState(2285);
      oC_RegularExpression();
      break;
    }

    case 2: {
      setState(2286);
      match(CypherParser::SP);
      setState(2287);
      match(CypherParser::STARTS);
      setState(2288);
      match(CypherParser::SP);
      setState(2289);
      match(CypherParser::WITH);
      break;
    }

    case 3: {
      setState(2290);
      match(CypherParser::SP);
      setState(2291);
      match(CypherParser::ENDS);
      setState(2292);
      match(CypherParser::SP);
      setState(2293);
      match(CypherParser::WITH);
      break;
    }

    case 4: {
      setState(2294);
      match(CypherParser::SP);
      setState(2295);
      match(CypherParser::CONTAINS);
      break;
    }

    default:
      break;
    }
    setState(2299);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2298);
      match(CypherParser::SP);
    }
    setState(2301);
    oC_PropertyOrLabelsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularExpressionContext ------------------------------------------------------------------

CypherParser::OC_RegularExpressionContext::OC_RegularExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RegularExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_RegularExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularExpression;
}


CypherParser::OC_RegularExpressionContext* CypherParser::oC_RegularExpression() {
  OC_RegularExpressionContext *_localctx = _tracker.createInstance<OC_RegularExpressionContext>(_ctx, getState());
  enterRule(_localctx, 258, CypherParser::RuleOC_RegularExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2304);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2303);
      match(CypherParser::SP);
    }
    setState(2306);
    match(CypherParser::T__24);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_NullOperatorExpressionContext::OC_NullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NullOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}


size_t CypherParser::OC_NullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NullOperatorExpression;
}


CypherParser::OC_NullOperatorExpressionContext* CypherParser::oC_NullOperatorExpression() {
  OC_NullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 260, CypherParser::RuleOC_NullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2318);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 381, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2308);
      match(CypherParser::SP);
      setState(2309);
      match(CypherParser::IS);
      setState(2310);
      match(CypherParser::SP);
      setState(2311);
      match(CypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2312);
      match(CypherParser::SP);
      setState(2313);
      match(CypherParser::IS);
      setState(2314);
      match(CypherParser::SP);
      setState(2315);
      match(CypherParser::NOT);
      setState(2316);
      match(CypherParser::SP);
      setState(2317);
      match(CypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyOrLabelsExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyOrLabelsExpressionContext::OC_PropertyOrLabelsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

std::vector<CypherParser::OC_PropertyLookupContext *> CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<CypherParser::OC_PropertyLookupContext>();
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PropertyOrLabelsExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PropertyOrLabelsExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PropertyOrLabelsExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyOrLabelsExpression;
}


CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::oC_PropertyOrLabelsExpression() {
  OC_PropertyOrLabelsExpressionContext *_localctx = _tracker.createInstance<OC_PropertyOrLabelsExpressionContext>(_ctx, getState());
  enterRule(_localctx, 262, CypherParser::RuleOC_PropertyOrLabelsExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2320);
    oC_Atom();
    setState(2327);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 383, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2322);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2321);
          match(CypherParser::SP);
        }
        setState(2324);
        oC_PropertyLookup(); 
      }
      setState(2329);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 383, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

CypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LiteralContext* CypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

CypherParser::OC_ParameterContext* CypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<CypherParser::OC_ParameterContext>(0);
}

CypherParser::OC_CaseExpressionContext* CypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<CypherParser::OC_CaseExpressionContext>(0);
}

CypherParser::OC_ParenthesizedExpressionContext* CypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<CypherParser::OC_ParenthesizedExpressionContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_PathPatternsContext* CypherParser::OC_AtomContext::oC_PathPatterns() {
  return getRuleContext<CypherParser::OC_PathPatternsContext>(0);
}

CypherParser::OC_ExistSubqueryContext* CypherParser::OC_AtomContext::oC_ExistSubquery() {
  return getRuleContext<CypherParser::OC_ExistSubqueryContext>(0);
}

CypherParser::KU_CountSubqueryContext* CypherParser::OC_AtomContext::kU_CountSubquery() {
  return getRuleContext<CypherParser::KU_CountSubqueryContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_QuantifierContext* CypherParser::OC_AtomContext::oC_Quantifier() {
  return getRuleContext<CypherParser::OC_QuantifierContext>(0);
}


size_t CypherParser::OC_AtomContext::getRuleIndex() const {
  return CypherParser::RuleOC_Atom;
}


CypherParser::OC_AtomContext* CypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
  enterRule(_localctx, 264, CypherParser::RuleOC_Atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2340);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 384, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2330);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2331);
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2332);
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2333);
      oC_ParenthesizedExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2334);
      oC_FunctionInvocation();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2335);
      oC_PathPatterns();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2336);
      oC_ExistSubquery();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2337);
      kU_CountSubquery();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2338);
      oC_Variable();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2339);
      oC_Quantifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QuantifierContext ------------------------------------------------------------------

CypherParser::OC_QuantifierContext::OC_QuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_FilterExpressionContext* CypherParser::OC_QuantifierContext::oC_FilterExpression() {
  return getRuleContext<CypherParser::OC_FilterExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_QuantifierContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::ANY() {
  return getToken(CypherParser::ANY, 0);
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::NONE() {
  return getToken(CypherParser::NONE, 0);
}

tree::TerminalNode* CypherParser::OC_QuantifierContext::SINGLE() {
  return getToken(CypherParser::SINGLE, 0);
}


size_t CypherParser::OC_QuantifierContext::getRuleIndex() const {
  return CypherParser::RuleOC_Quantifier;
}


CypherParser::OC_QuantifierContext* CypherParser::oC_Quantifier() {
  OC_QuantifierContext *_localctx = _tracker.createInstance<OC_QuantifierContext>(_ctx, getState());
  enterRule(_localctx, 266, CypherParser::RuleOC_Quantifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2398);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ALL: {
        enterOuterAlt(_localctx, 1);
        setState(2342);
        match(CypherParser::ALL);
        setState(2344);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2343);
          match(CypherParser::SP);
        }
        setState(2346);
        match(CypherParser::T__1);
        setState(2348);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2347);
          match(CypherParser::SP);
        }
        setState(2350);
        oC_FilterExpression();
        setState(2352);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2351);
          match(CypherParser::SP);
        }
        setState(2354);
        match(CypherParser::T__2);
        break;
      }

      case CypherParser::ANY: {
        enterOuterAlt(_localctx, 2);
        setState(2356);
        match(CypherParser::ANY);
        setState(2358);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2357);
          match(CypherParser::SP);
        }
        setState(2360);
        match(CypherParser::T__1);
        setState(2362);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2361);
          match(CypherParser::SP);
        }
        setState(2364);
        oC_FilterExpression();
        setState(2366);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2365);
          match(CypherParser::SP);
        }
        setState(2368);
        match(CypherParser::T__2);
        break;
      }

      case CypherParser::NONE: {
        enterOuterAlt(_localctx, 3);
        setState(2370);
        match(CypherParser::NONE);
        setState(2372);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2371);
          match(CypherParser::SP);
        }
        setState(2374);
        match(CypherParser::T__1);
        setState(2376);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2375);
          match(CypherParser::SP);
        }
        setState(2378);
        oC_FilterExpression();
        setState(2380);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2379);
          match(CypherParser::SP);
        }
        setState(2382);
        match(CypherParser::T__2);
        break;
      }

      case CypherParser::SINGLE: {
        enterOuterAlt(_localctx, 4);
        setState(2384);
        match(CypherParser::SINGLE);
        setState(2386);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2385);
          match(CypherParser::SP);
        }
        setState(2388);
        match(CypherParser::T__1);
        setState(2390);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2389);
          match(CypherParser::SP);
        }
        setState(2392);
        oC_FilterExpression();
        setState(2394);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2393);
          match(CypherParser::SP);
        }
        setState(2396);
        match(CypherParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FilterExpressionContext ------------------------------------------------------------------

CypherParser::OC_FilterExpressionContext::OC_FilterExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IdInCollContext* CypherParser::OC_FilterExpressionContext::oC_IdInColl() {
  return getRuleContext<CypherParser::OC_IdInCollContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_FilterExpressionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_FilterExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_FilterExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_FilterExpression;
}


CypherParser::OC_FilterExpressionContext* CypherParser::oC_FilterExpression() {
  OC_FilterExpressionContext *_localctx = _tracker.createInstance<OC_FilterExpressionContext>(_ctx, getState());
  enterRule(_localctx, 268, CypherParser::RuleOC_FilterExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2400);
    oC_IdInColl();
    setState(2405);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 399, _ctx)) {
    case 1: {
      setState(2402);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2401);
        match(CypherParser::SP);
      }
      setState(2404);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IdInCollContext ------------------------------------------------------------------

CypherParser::OC_IdInCollContext::OC_IdInCollContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_IdInCollContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_IdInCollContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_IdInCollContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_IdInCollContext::IN() {
  return getToken(CypherParser::IN, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_IdInCollContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_IdInCollContext::getRuleIndex() const {
  return CypherParser::RuleOC_IdInColl;
}


CypherParser::OC_IdInCollContext* CypherParser::oC_IdInColl() {
  OC_IdInCollContext *_localctx = _tracker.createInstance<OC_IdInCollContext>(_ctx, getState());
  enterRule(_localctx, 270, CypherParser::RuleOC_IdInColl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2407);
    oC_Variable();
    setState(2408);
    match(CypherParser::SP);
    setState(2409);
    match(CypherParser::IN);
    setState(2410);
    match(CypherParser::SP);
    setState(2411);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

CypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NumberLiteralContext* CypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<CypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_BooleanLiteralContext* CypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<CypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

CypherParser::OC_ListLiteralContext* CypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<CypherParser::OC_ListLiteralContext>(0);
}

CypherParser::KU_StructLiteralContext* CypherParser::OC_LiteralContext::kU_StructLiteral() {
  return getRuleContext<CypherParser::KU_StructLiteralContext>(0);
}


size_t CypherParser::OC_LiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_Literal;
}


CypherParser::OC_LiteralContext* CypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
  enterRule(_localctx, 272, CypherParser::RuleOC_Literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2419);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::DecimalInteger:
      case CypherParser::ExponentDecimalReal:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2413);
        oC_NumberLiteral();
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(2414);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::FALSE:
      case CypherParser::TRUE: {
        enterOuterAlt(_localctx, 3);
        setState(2415);
        oC_BooleanLiteral();
        break;
      }

      case CypherParser::NULL_: {
        enterOuterAlt(_localctx, 4);
        setState(2416);
        match(CypherParser::NULL_);
        break;
      }

      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 5);
        setState(2417);
        oC_ListLiteral();
        break;
      }

      case CypherParser::T__8: {
        enterOuterAlt(_localctx, 6);
        setState(2418);
        kU_StructLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

CypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::TRUE() {
  return getToken(CypherParser::TRUE, 0);
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::FALSE() {
  return getToken(CypherParser::FALSE, 0);
}


size_t CypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_BooleanLiteral;
}


CypherParser::OC_BooleanLiteralContext* CypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 274, CypherParser::RuleOC_BooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2421);
    _la = _input->LA(1);
    if (!(_la == CypherParser::FALSE

    || _la == CypherParser::TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

CypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<CypherParser::KU_ListEntryContext *> CypherParser::OC_ListLiteralContext::kU_ListEntry() {
  return getRuleContexts<CypherParser::KU_ListEntryContext>();
}

CypherParser::KU_ListEntryContext* CypherParser::OC_ListLiteralContext::kU_ListEntry(size_t i) {
  return getRuleContext<CypherParser::KU_ListEntryContext>(i);
}


size_t CypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListLiteral;
}


CypherParser::OC_ListLiteralContext* CypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 276, CypherParser::RuleOC_ListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2423);
    match(CypherParser::T__6);
    setState(2425);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2424);
      match(CypherParser::SP);
    }
    setState(2440);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4641100153426541948) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -572029811628137251) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 21454616868909) != 0)) {
      setState(2427);
      oC_Expression();
      setState(2429);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2428);
        match(CypherParser::SP);
      }
      setState(2437);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__3) {
        setState(2431);
        kU_ListEntry();
        setState(2433);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2432);
          match(CypherParser::SP);
        }
        setState(2439);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2442);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListEntryContext ------------------------------------------------------------------

CypherParser::KU_ListEntryContext::KU_ListEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ListEntryContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListEntryContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_ListEntryContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListEntry;
}


CypherParser::KU_ListEntryContext* CypherParser::kU_ListEntry() {
  KU_ListEntryContext *_localctx = _tracker.createInstance<KU_ListEntryContext>(_ctx, getState());
  enterRule(_localctx, 278, CypherParser::RuleKU_ListEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2444);
    match(CypherParser::T__3);
    setState(2446);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 406, _ctx)) {
    case 1: {
      setState(2445);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2449);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4641100153426541948) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -572029811628137251) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 21454616868909) != 0)) {
      setState(2448);
      oC_Expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructLiteralContext ------------------------------------------------------------------

CypherParser::KU_StructLiteralContext::KU_StructLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_StructFieldContext *> CypherParser::KU_StructLiteralContext::kU_StructField() {
  return getRuleContexts<CypherParser::KU_StructFieldContext>();
}

CypherParser::KU_StructFieldContext* CypherParser::KU_StructLiteralContext::kU_StructField(size_t i) {
  return getRuleContext<CypherParser::KU_StructFieldContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructLiteralContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructLiteral;
}


CypherParser::KU_StructLiteralContext* CypherParser::kU_StructLiteral() {
  KU_StructLiteralContext *_localctx = _tracker.createInstance<KU_StructLiteralContext>(_ctx, getState());
  enterRule(_localctx, 280, CypherParser::RuleKU_StructLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2451);
    match(CypherParser::T__8);
    setState(2453);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2452);
      match(CypherParser::SP);
    }
    setState(2455);
    kU_StructField();
    setState(2457);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2456);
      match(CypherParser::SP);
    }
    setState(2469);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__3) {
      setState(2459);
      match(CypherParser::T__3);
      setState(2461);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2460);
        match(CypherParser::SP);
      }
      setState(2463);
      kU_StructField();
      setState(2465);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2464);
        match(CypherParser::SP);
      }
      setState(2471);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2472);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructFieldContext ------------------------------------------------------------------

CypherParser::KU_StructFieldContext::KU_StructFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StructFieldContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StructFieldContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructFieldContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructFieldContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructField;
}


CypherParser::KU_StructFieldContext* CypherParser::kU_StructField() {
  KU_StructFieldContext *_localctx = _tracker.createInstance<KU_StructFieldContext>(_ctx, getState());
  enterRule(_localctx, 282, CypherParser::RuleKU_StructField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2476);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2474);
        oC_SymbolicName();
        break;
      }

      case CypherParser::StringLiteral: {
        setState(2475);
        match(CypherParser::StringLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2479);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2478);
      match(CypherParser::SP);
    }
    setState(2481);
    match(CypherParser::COLON);
    setState(2483);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2482);
      match(CypherParser::SP);
    }
    setState(2485);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

CypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ParenthesizedExpression;
}


CypherParser::OC_ParenthesizedExpressionContext* CypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 284, CypherParser::RuleOC_ParenthesizedExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2487);
    match(CypherParser::T__1);
    setState(2489);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2488);
      match(CypherParser::SP);
    }
    setState(2491);
    oC_Expression();
    setState(2493);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2492);
      match(CypherParser::SP);
    }
    setState(2495);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

CypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::CAST() {
  return getToken(CypherParser::CAST, 0);
}

std::vector<CypherParser::KU_FunctionParameterContext *> CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter() {
  return getRuleContexts<CypherParser::KU_FunctionParameterContext>();
}

CypherParser::KU_FunctionParameterContext* CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter(size_t i) {
  return getRuleContext<CypherParser::KU_FunctionParameterContext>(i);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::OC_FunctionInvocationContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

CypherParser::OC_FunctionNameContext* CypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}


size_t CypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionInvocation;
}


CypherParser::OC_FunctionInvocationContext* CypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
  enterRule(_localctx, 286, CypherParser::RuleOC_FunctionInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2574);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 437, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2497);
      match(CypherParser::COUNT);
      setState(2499);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2498);
        match(CypherParser::SP);
      }
      setState(2501);
      match(CypherParser::T__1);
      setState(2503);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2502);
        match(CypherParser::SP);
      }
      setState(2505);
      match(CypherParser::STAR);
      setState(2507);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2506);
        match(CypherParser::SP);
      }
      setState(2509);
      match(CypherParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2510);
      match(CypherParser::CAST);
      setState(2512);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2511);
        match(CypherParser::SP);
      }
      setState(2514);
      match(CypherParser::T__1);
      setState(2516);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2515);
        match(CypherParser::SP);
      }
      setState(2518);
      kU_FunctionParameter();
      setState(2520);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2519);
        match(CypherParser::SP);
      }
      setState(2532);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CypherParser::AS: {
          setState(2522);
          match(CypherParser::AS);
          setState(2524);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2523);
            match(CypherParser::SP);
          }
          setState(2526);
          kU_DataType(0);
          break;
        }

        case CypherParser::T__3: {
          setState(2527);
          match(CypherParser::T__3);
          setState(2529);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2528);
            match(CypherParser::SP);
          }
          setState(2531);
          kU_FunctionParameter();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2535);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2534);
        match(CypherParser::SP);
      }
      setState(2537);
      match(CypherParser::T__2);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2539);
      oC_FunctionName();
      setState(2541);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2540);
        match(CypherParser::SP);
      }
      setState(2543);
      match(CypherParser::T__1);
      setState(2545);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2544);
        match(CypherParser::SP);
      }
      setState(2551);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DISTINCT) {
        setState(2547);
        match(CypherParser::DISTINCT);
        setState(2549);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2548);
          match(CypherParser::SP);
        }
      }
      setState(2570);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4641100153426541948) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -572029811628137251) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 21454616868909) != 0)) {
        setState(2553);
        kU_FunctionParameter();
        setState(2555);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2554);
          match(CypherParser::SP);
        }
        setState(2567);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__3) {
          setState(2557);
          match(CypherParser::T__3);
          setState(2559);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2558);
            match(CypherParser::SP);
          }
          setState(2561);
          kU_FunctionParameter();
          setState(2563);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2562);
            match(CypherParser::SP);
          }
          setState(2569);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(2572);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

CypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionName;
}


CypherParser::OC_FunctionNameContext* CypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 288, CypherParser::RuleOC_FunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2576);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FunctionParameterContext ------------------------------------------------------------------

CypherParser::KU_FunctionParameterContext::KU_FunctionParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_FunctionParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_FunctionParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FunctionParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::KU_LambdaParameterContext* CypherParser::KU_FunctionParameterContext::kU_LambdaParameter() {
  return getRuleContext<CypherParser::KU_LambdaParameterContext>(0);
}


size_t CypherParser::KU_FunctionParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_FunctionParameter;
}


CypherParser::KU_FunctionParameterContext* CypherParser::kU_FunctionParameter() {
  KU_FunctionParameterContext *_localctx = _tracker.createInstance<KU_FunctionParameterContext>(_ctx, getState());
  enterRule(_localctx, 290, CypherParser::RuleKU_FunctionParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2591);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 441, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2587);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 440, _ctx)) {
      case 1: {
        setState(2578);
        oC_SymbolicName();
        setState(2580);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2579);
          match(CypherParser::SP);
        }
        setState(2582);
        match(CypherParser::COLON);
        setState(2583);
        match(CypherParser::T__5);
        setState(2585);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2584);
          match(CypherParser::SP);
        }
        break;
      }

      default:
        break;
      }
      setState(2589);
      oC_Expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2590);
      kU_LambdaParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LambdaParameterContext ------------------------------------------------------------------

CypherParser::KU_LambdaParameterContext::KU_LambdaParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LambdaVarsContext* CypherParser::KU_LambdaParameterContext::kU_LambdaVars() {
  return getRuleContext<CypherParser::KU_LambdaVarsContext>(0);
}

tree::TerminalNode* CypherParser::KU_LambdaParameterContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_LambdaParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LambdaParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LambdaParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_LambdaParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_LambdaParameter;
}


CypherParser::KU_LambdaParameterContext* CypherParser::kU_LambdaParameter() {
  KU_LambdaParameterContext *_localctx = _tracker.createInstance<KU_LambdaParameterContext>(_ctx, getState());
  enterRule(_localctx, 292, CypherParser::RuleKU_LambdaParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2593);
    kU_LambdaVars();
    setState(2595);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2594);
      match(CypherParser::SP);
    }
    setState(2597);
    match(CypherParser::MINUS);
    setState(2598);
    match(CypherParser::T__15);
    setState(2600);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2599);
      match(CypherParser::SP);
    }
    setState(2602);
    oC_Expression();
    setState(2604);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 444, _ctx)) {
    case 1: {
      setState(2603);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LambdaVarsContext ------------------------------------------------------------------

CypherParser::KU_LambdaVarsContext::KU_LambdaVarsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_LambdaVarsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_LambdaVarsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LambdaVarsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LambdaVarsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_LambdaVarsContext::getRuleIndex() const {
  return CypherParser::RuleKU_LambdaVars;
}


CypherParser::KU_LambdaVarsContext* CypherParser::kU_LambdaVars() {
  KU_LambdaVarsContext *_localctx = _tracker.createInstance<KU_LambdaVarsContext>(_ctx, getState());
  enterRule(_localctx, 294, CypherParser::RuleKU_LambdaVars);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2630);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(2606);
        oC_SymbolicName();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(2607);
        match(CypherParser::T__1);
        setState(2609);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2608);
          match(CypherParser::SP);
        }
        setState(2611);
        oC_SymbolicName();
        setState(2613);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2612);
          match(CypherParser::SP);
        }
        setState(2625);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__3) {
          setState(2615);
          match(CypherParser::T__3);
          setState(2617);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2616);
            match(CypherParser::SP);
          }
          setState(2619);
          oC_SymbolicName();
          setState(2621);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2620);
            match(CypherParser::SP);
          }
          setState(2627);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2628);
        match(CypherParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PathPatternsContext ------------------------------------------------------------------

CypherParser::OC_PathPatternsContext::OC_PathPatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PathPatternsContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PathPatternsContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PathPatternsContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PathPatternsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PathPatternsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PathPatternsContext::getRuleIndex() const {
  return CypherParser::RuleOC_PathPatterns;
}


CypherParser::OC_PathPatternsContext* CypherParser::oC_PathPatterns() {
  OC_PathPatternsContext *_localctx = _tracker.createInstance<OC_PathPatternsContext>(_ctx, getState());
  enterRule(_localctx, 296, CypherParser::RuleOC_PathPatterns);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2632);
    oC_NodePattern();
    setState(2637); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2634);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(2633);
                match(CypherParser::SP);
              }
              setState(2636);
              oC_PatternElementChain();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2639); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 452, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExistSubqueryContext ------------------------------------------------------------------

CypherParser::OC_ExistSubqueryContext::OC_ExistSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_ExistSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExistSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_ExistSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_ExistSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_ExistSubquery;
}


CypherParser::OC_ExistSubqueryContext* CypherParser::oC_ExistSubquery() {
  OC_ExistSubqueryContext *_localctx = _tracker.createInstance<OC_ExistSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 298, CypherParser::RuleOC_ExistSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2641);
    match(CypherParser::EXISTS);
    setState(2643);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2642);
      match(CypherParser::SP);
    }
    setState(2645);
    match(CypherParser::T__8);
    setState(2647);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2646);
      match(CypherParser::SP);
    }
    setState(2649);
    match(CypherParser::MATCH);
    setState(2651);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2650);
      match(CypherParser::SP);
    }
    setState(2653);
    oC_Pattern();
    setState(2658);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 457, _ctx)) {
    case 1: {
      setState(2655);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2654);
        match(CypherParser::SP);
      }
      setState(2657);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2661);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2660);
      match(CypherParser::SP);
    }
    setState(2663);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CountSubqueryContext ------------------------------------------------------------------

CypherParser::KU_CountSubqueryContext::KU_CountSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::KU_CountSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CountSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_CountSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_CountSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleKU_CountSubquery;
}


CypherParser::KU_CountSubqueryContext* CypherParser::kU_CountSubquery() {
  KU_CountSubqueryContext *_localctx = _tracker.createInstance<KU_CountSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 300, CypherParser::RuleKU_CountSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2665);
    match(CypherParser::COUNT);
    setState(2667);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2666);
      match(CypherParser::SP);
    }
    setState(2669);
    match(CypherParser::T__8);
    setState(2671);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2670);
      match(CypherParser::SP);
    }
    setState(2673);
    match(CypherParser::MATCH);
    setState(2675);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2674);
      match(CypherParser::SP);
    }
    setState(2677);
    oC_Pattern();
    setState(2682);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 463, _ctx)) {
    case 1: {
      setState(2679);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2678);
        match(CypherParser::SP);
      }
      setState(2681);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2685);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2684);
      match(CypherParser::SP);
    }
    setState(2687);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

CypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyLookup;
}


CypherParser::OC_PropertyLookupContext* CypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
  enterRule(_localctx, 302, CypherParser::RuleOC_PropertyLookup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2689);
    match(CypherParser::T__4);
    setState(2691);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2690);
      match(CypherParser::SP);
    }
    setState(2695);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2693);
        oC_PropertyKeyName();
        break;
      }

      case CypherParser::STAR: {
        setState(2694);
        match(CypherParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

CypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(CypherParser::ELSE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(CypherParser::CASE, 0);
}

std::vector<CypherParser::OC_CaseAlternativeContext *> CypherParser::OC_CaseExpressionContext::oC_CaseAlternative() {
  return getRuleContexts<CypherParser::OC_CaseAlternativeContext>();
}

CypherParser::OC_CaseAlternativeContext* CypherParser::OC_CaseExpressionContext::oC_CaseAlternative(size_t i) {
  return getRuleContext<CypherParser::OC_CaseAlternativeContext>(i);
}


size_t CypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseExpression;
}


CypherParser::OC_CaseExpressionContext* CypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 304, CypherParser::RuleOC_CaseExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2719);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 472, _ctx)) {
    case 1: {
      setState(2697);
      match(CypherParser::CASE);
      setState(2702); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2699);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2698);
                  match(CypherParser::SP);
                }
                setState(2701);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2704); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 468, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(2706);
      match(CypherParser::CASE);
      setState(2708);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2707);
        match(CypherParser::SP);
      }
      setState(2710);
      oC_Expression();
      setState(2715); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2712);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2711);
                  match(CypherParser::SP);
                }
                setState(2714);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2717); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 471, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
    setState(2729);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 475, _ctx)) {
    case 1: {
      setState(2722);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2721);
        match(CypherParser::SP);
      }
      setState(2724);
      match(CypherParser::ELSE);
      setState(2726);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2725);
        match(CypherParser::SP);
      }
      setState(2728);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(2732);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2731);
      match(CypherParser::SP);
    }
    setState(2734);
    match(CypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativeContext ------------------------------------------------------------------

CypherParser::OC_CaseAlternativeContext::OC_CaseAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::WHEN() {
  return getToken(CypherParser::WHEN, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseAlternativeContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseAlternativeContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::THEN() {
  return getToken(CypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseAlternativeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CaseAlternativeContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseAlternative;
}


CypherParser::OC_CaseAlternativeContext* CypherParser::oC_CaseAlternative() {
  OC_CaseAlternativeContext *_localctx = _tracker.createInstance<OC_CaseAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 306, CypherParser::RuleOC_CaseAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2736);
    match(CypherParser::WHEN);
    setState(2738);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2737);
      match(CypherParser::SP);
    }
    setState(2740);
    oC_Expression();
    setState(2742);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2741);
      match(CypherParser::SP);
    }
    setState(2744);
    match(CypherParser::THEN);
    setState(2746);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2745);
      match(CypherParser::SP);
    }
    setState(2748);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

CypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_VariableContext::getRuleIndex() const {
  return CypherParser::RuleOC_Variable;
}


CypherParser::OC_VariableContext* CypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
  enterRule(_localctx, 308, CypherParser::RuleOC_Variable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2750);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

CypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_DoubleLiteralContext* CypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<CypherParser::OC_DoubleLiteralContext>(0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_NumberLiteral;
}


CypherParser::OC_NumberLiteralContext* CypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 310, CypherParser::RuleOC_NumberLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2754);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ExponentDecimalReal:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2752);
        oC_DoubleLiteral();
        break;
      }

      case CypherParser::DecimalInteger: {
        enterOuterAlt(_localctx, 2);
        setState(2753);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

CypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_ParameterContext::getRuleIndex() const {
  return CypherParser::RuleOC_Parameter;
}


CypherParser::OC_ParameterContext* CypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
  enterRule(_localctx, 312, CypherParser::RuleOC_Parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2756);
    match(CypherParser::T__25);
    setState(2759);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2757);
        oC_SymbolicName();
        break;
      }

      case CypherParser::DecimalInteger: {
        setState(2758);
        match(CypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyExpression;
}


CypherParser::OC_PropertyExpressionContext* CypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 314, CypherParser::RuleOC_PropertyExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2761);
    oC_Atom();
    setState(2763);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2762);
      match(CypherParser::SP);
    }
    setState(2765);
    oC_PropertyLookup();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

CypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyKeyName;
}


CypherParser::OC_PropertyKeyNameContext* CypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
  enterRule(_localctx, 316, CypherParser::RuleOC_PropertyKeyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2767);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

CypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_IntegerLiteral;
}


CypherParser::OC_IntegerLiteralContext* CypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 318, CypherParser::RuleOC_IntegerLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2769);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

CypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::ExponentDecimalReal() {
  return getToken(CypherParser::ExponentDecimalReal, 0);
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(CypherParser::RegularDecimalReal, 0);
}


size_t CypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_DoubleLiteral;
}


CypherParser::OC_DoubleLiteralContext* CypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 320, CypherParser::RuleOC_DoubleLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2771);
    _la = _input->LA(1);
    if (!(_la == CypherParser::ExponentDecimalReal

    || _la == CypherParser::RegularDecimalReal)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

CypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SchemaName;
}


CypherParser::OC_SchemaNameContext* CypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 322, CypherParser::RuleOC_SchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2773);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

CypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(CypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(CypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(CypherParser::HexLetter, 0);
}

CypherParser::KU_NonReservedKeywordsContext* CypherParser::OC_SymbolicNameContext::kU_NonReservedKeywords() {
  return getRuleContext<CypherParser::KU_NonReservedKeywordsContext>(0);
}


size_t CypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SymbolicName;
}


CypherParser::OC_SymbolicNameContext* CypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
  enterRule(_localctx, 324, CypherParser::RuleOC_SymbolicName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2780);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::UnescapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(2775);
        match(CypherParser::UnescapedSymbolicName);
        break;
      }

      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(2776);
        antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken = match(CypherParser::EscapedSymbolicName);
        if ((antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken != nullptr ? antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken->getText() : "") == "``") { notifyEmptyToken(antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken); }
        break;
      }

      case CypherParser::HexLetter: {
        enterOuterAlt(_localctx, 3);
        setState(2778);
        match(CypherParser::HexLetter);
        break;
      }

      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CHECKPOINT:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LIMIT:
      case CypherParser::LOAD:
      case CypherParser::LOGICAL:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::L_SKIP: {
        enterOuterAlt(_localctx, 4);
        setState(2779);
        kU_NonReservedKeywords();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_NonReservedKeywordsContext ------------------------------------------------------------------

CypherParser::KU_NonReservedKeywordsContext::KU_NonReservedKeywordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMENT() {
  return getToken(CypherParser::COMMENT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::AS() {
  return getToken(CypherParser::AS, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ATTACH() {
  return getToken(CypherParser::ATTACH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CHECKPOINT() {
  return getToken(CypherParser::CHECKPOINT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DECIMAL() {
  return getToken(CypherParser::DECIMAL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::GRAPH() {
  return getToken(CypherParser::GRAPH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IF() {
  return getToken(CypherParser::IF, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::LOGICAL() {
  return getToken(CypherParser::LOGICAL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::PROJECT() {
  return getToken(CypherParser::PROJECT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::SET() {
  return getToken(CypherParser::SET, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::START() {
  return getToken(CypherParser::START, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::TYPE() {
  return getToken(CypherParser::TYPE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::WRITE() {
  return getToken(CypherParser::WRITE, 0);
}


size_t CypherParser::KU_NonReservedKeywordsContext::getRuleIndex() const {
  return CypherParser::RuleKU_NonReservedKeywords;
}


CypherParser::KU_NonReservedKeywordsContext* CypherParser::kU_NonReservedKeywords() {
  KU_NonReservedKeywordsContext *_localctx = _tracker.createInstance<KU_NonReservedKeywordsContext>(_ctx, getState());
  enterRule(_localctx, 326, CypherParser::RuleKU_NonReservedKeywords);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2782);
    _la = _input->LA(1);
    if (!(((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & -4761777667909507179) != 0) || ((((_la - 112) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 112)) & 2822467614721) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_LeftArrowHead;
}


CypherParser::OC_LeftArrowHeadContext* CypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 328, CypherParser::RuleOC_LeftArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2784);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2013282304) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_RightArrowHead;
}


CypherParser::OC_RightArrowHeadContext* CypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 330, CypherParser::RuleOC_RightArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2786);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 32212320256) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

CypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DashContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::OC_DashContext::getRuleIndex() const {
  return CypherParser::RuleOC_Dash;
}


CypherParser::OC_DashContext* CypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
  enterRule(_localctx, 332, CypherParser::RuleOC_Dash);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2788);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 70334384439296) != 0) || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CypherParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 48: return kU_DataTypeSempred(antlrcpp::downCast<KU_DataTypeContext *>(context), predicateIndex);
    case 71: return kU_JoinNodeSempred(antlrcpp::downCast<KU_JoinNodeContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_DataTypeSempred(KU_DataTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 5);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_JoinNodeSempred(KU_JoinNodeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 4);
    case 2: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

void CypherParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cypherParserInitialize();
#else
  ::antlr4::internal::call_once(cypherParserOnceFlag, cypherParserInitialize);
#endif
}
